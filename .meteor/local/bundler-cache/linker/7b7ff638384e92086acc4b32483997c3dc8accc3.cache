[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\n\n/* Package-scope variables */\nvar Geolocation;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                    //\n// packages/mdg_geolocation/geolocation.js                                            //\n//                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////\n                                                                                      //\n// is location refreshing currently on?                                               // 1\nvar watchingPosition = false;                                                         // 2\n                                                                                      // 3\n// current location variable and dependency                                           // 4\nvar location = new ReactiveVar(null);                                                 // 5\n                                                                                      // 6\n// error variable and dependency                                                      // 7\nvar error = new ReactiveVar(null);                                                    // 8\n                                                                                      // 9\n// options for watchPosition                                                          // 10\nvar options = {                                                                       // 11\n  enableHighAccuracy: true,                                                           // 12\n  maximumAge: 0,                                                                      // 13\n  timeout: 10000                                                                      // 14\n};                                                                                    // 15\n                                                                                      // 16\nvar onError = function (newError) {                                                   // 17\n  error.set(newError);                                                                // 18\n};                                                                                    // 19\n                                                                                      // 20\nvar onPosition = function (newLocation) {                                             // 21\n  location.set(newLocation);                                                          // 22\n  error.set(null);                                                                    // 23\n};                                                                                    // 24\n                                                                                      // 25\nvar startWatchingPosition = function () {                                             // 26\n  if (! watchingPosition && navigator.geolocation) {                                  // 27\n    navigator.geolocation.watchPosition(onPosition, onError, options);                // 28\n    watchingPosition = true;                                                          // 29\n  }                                                                                   // 30\n};                                                                                    // 31\n                                                                                      // 32\n// exports                                                                            // 33\n                                                                                      // 34\n/**                                                                                   // 35\n * @summary The namespace for all geolocation functions.                              // 36\n * @namespace                                                                         // 37\n */                                                                                   // 38\nGeolocation = {                                                                       // 39\n  /**                                                                                 // 40\n   * @summary Get the current geolocation error                                       // 41\n   * @return {PositionError} The                                                      // 42\n   * [position error](https://developer.mozilla.org/en-US/docs/Web/API/PositionError)\n   * that is currently preventing position updates.                                   // 44\n   */                                                                                 // 45\n  error: function () {                                                                // 46\n    startWatchingPosition();                                                          // 47\n    return error.get();                                                               // 48\n  },                                                                                  // 49\n                                                                                      // 50\n  /**                                                                                 // 51\n   * @summary Get the current location                                                // 52\n   * @return {Position | null} The                                                    // 53\n   * [position](https://developer.mozilla.org/en-US/docs/Web/API/Position)            // 54\n   * that is reported by the device, or null if no position is available.             // 55\n   */                                                                                 // 56\n  currentLocation: function () {                                                      // 57\n    startWatchingPosition();                                                          // 58\n    return location.get();                                                            // 59\n  },                                                                                  // 60\n  // simple version of location; just lat and lng                                     // 61\n                                                                                      // 62\n  /**                                                                                 // 63\n   * @summary Get the current latitude and longitude                                  // 64\n   * @return {Object | null} An object with `lat` and `lng` properties,               // 65\n   * or null if no position is available.                                             // 66\n   */                                                                                 // 67\n  latLng: function () {                                                               // 68\n    var loc = Geolocation.currentLocation();                                          // 69\n                                                                                      // 70\n    if (loc) {                                                                        // 71\n      return {                                                                        // 72\n        lat: loc.coords.latitude,                                                     // 73\n        lng: loc.coords.longitude                                                     // 74\n      };                                                                              // 75\n    }                                                                                 // 76\n                                                                                      // 77\n    return null;                                                                      // 78\n  }                                                                                   // 79\n};                                                                                    // 80\n                                                                                      // 81\n////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['mdg:geolocation'] = {}, {\n  Geolocation: Geolocation\n});\n\n})();\n","servePath":"/packages/mdg_geolocation.js","sourceMap":{"version":3,"sources":["/packages/mdg_geolocation/geolocation.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2F","file":"/packages/mdg_geolocation.js","sourcesContent":["// is location refreshing currently on?\nvar watchingPosition = false;\n\n// current location variable and dependency\nvar location = new ReactiveVar(null);\n\n// error variable and dependency\nvar error = new ReactiveVar(null);\n\n// options for watchPosition\nvar options = {\n  enableHighAccuracy: true,\n  maximumAge: 0,\n  timeout: 10000\n};\n\nvar onError = function (newError) {\n  error.set(newError);\n};\n\nvar onPosition = function (newLocation) {\n  location.set(newLocation);\n  error.set(null);\n};\n\nvar startWatchingPosition = function () {\n  if (! watchingPosition && navigator.geolocation) {\n    navigator.geolocation.watchPosition(onPosition, onError, options);\n    watchingPosition = true;\n  }\n};\n\n// exports\n\n/**\n * @summary The namespace for all geolocation functions.\n * @namespace\n */\nGeolocation = {\n  /**\n   * @summary Get the current geolocation error\n   * @return {PositionError} The\n   * [position error](https://developer.mozilla.org/en-US/docs/Web/API/PositionError)\n   * that is currently preventing position updates.\n   */\n  error: function () {\n    startWatchingPosition();\n    return error.get();\n  },\n\n  /**\n   * @summary Get the current location\n   * @return {Position | null} The\n   * [position](https://developer.mozilla.org/en-US/docs/Web/API/Position)\n   * that is reported by the device, or null if no position is available.\n   */\n  currentLocation: function () {\n    startWatchingPosition();\n    return location.get();\n  },\n  // simple version of location; just lat and lng\n  \n  /**\n   * @summary Get the current latitude and longitude\n   * @return {Object | null} An object with `lat` and `lng` properties,\n   * or null if no position is available.\n   */\n  latLng: function () {\n    var loc = Geolocation.currentLocation();\n\n    if (loc) {\n      return {\n        lat: loc.coords.latitude,\n        lng: loc.coords.longitude\n      };\n    }\n\n    return null;\n  }\n};\n"]}}]