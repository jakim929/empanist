[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\n\n/* Package-scope variables */\nvar Slingshot, matchAllowedFileTypes;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                     //\n// packages/edgee_slingshot/packages/edgee_slingshot.js                                //\n//                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////\n                                                                                       //\n(function () {                                                                         // 1\n                                                                                       // 2\n//////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                              //     // 4\n// packages/edgee:slingshot/lib/restrictions.js                                 //     // 5\n//                                                                              //     // 6\n//////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                //     // 8\n/**                                                                             // 1   // 9\n * @module meteor-slingshot                                                     // 2   // 10\n */                                                                             // 3   // 11\n                                                                                // 4   // 12\nSlingshot = {};                                                                 // 5   // 13\n                                                                                // 6   // 14\n/* global matchAllowedFileTypes: true */                                        // 7   // 15\nmatchAllowedFileTypes = Match.OneOf(String, [String], RegExp, null);            // 8   // 16\n                                                                                // 9   // 17\n/**                                                                             // 10  // 18\n * List of configured restrictions by name.                                     // 11  // 19\n *                                                                              // 12  // 20\n * @type {Object.<String, Function>}                                            // 13  // 21\n * @private                                                                     // 14  // 22\n */                                                                             // 15  // 23\n                                                                                // 16  // 24\nSlingshot._restrictions = {};                                                   // 17  // 25\n                                                                                // 18  // 26\n/**                                                                             // 19  // 27\n * Creates file upload restrictions for a specific directive.                   // 20  // 28\n *                                                                              // 21  // 29\n * @param {string} name - A unique identifier of the directive.                 // 22  // 30\n * @param {Object} restrictions - The file upload restrictions.                 // 23  // 31\n * @returns {Object}                                                            // 24  // 32\n */                                                                             // 25  // 33\n                                                                                // 26  // 34\nSlingshot.fileRestrictions = function (name, restrictions) {                    // 27  // 35\n  check(restrictions, {                                                         // 28  // 36\n    authorize: Match.Optional(Function),                                        // 29  // 37\n    maxSize: Match.Optional(Match.OneOf(Number, null)),                         // 30  // 38\n    allowedFileTypes: Match.Optional(matchAllowedFileTypes)                     // 31  // 39\n  });                                                                           // 32  // 40\n                                                                                // 33  // 41\n  if (Meteor.isServer) {                                                        // 34  // 42\n    var directive = Slingshot.getDirective(name);                               // 35  // 43\n    if (directive) {                                                            // 36  // 44\n      _.extend(directive._directive, restrictions);                             // 37  // 45\n    }                                                                           // 38  // 46\n  }                                                                             // 39  // 47\n                                                                                // 40  // 48\n  return (Slingshot._restrictions[name] =                                       // 41  // 49\n    _.extend(Slingshot._restrictions[name] || {}, restrictions));               // 42  // 50\n};                                                                              // 43  // 51\n                                                                                // 44  // 52\n/**                                                                             // 45  // 53\n * @param {string} name - The unique identifier of the directive to             // 46  // 54\n * retrieve the restrictions for.                                               // 47  // 55\n * @returns {Object}                                                            // 48  // 56\n */                                                                             // 49  // 57\n                                                                                // 50  // 58\nSlingshot.getRestrictions = function (name) {                                   // 51  // 59\n  return this._restrictions[name] || {};                                        // 52  // 60\n};                                                                              // 53  // 61\n                                                                                // 54  // 62\n//////////////////////////////////////////////////////////////////////////////////     // 63\n                                                                                       // 64\n}).call(this);                                                                         // 65\n                                                                                       // 66\n                                                                                       // 67\n                                                                                       // 68\n                                                                                       // 69\n                                                                                       // 70\n                                                                                       // 71\n(function () {                                                                         // 72\n                                                                                       // 73\n//////////////////////////////////////////////////////////////////////////////////     // 74\n//                                                                              //     // 75\n// packages/edgee:slingshot/lib/validators.js                                   //     // 76\n//                                                                              //     // 77\n//////////////////////////////////////////////////////////////////////////////////     // 78\n                                                                                //     // 79\nSlingshot.Validators = {                                                        // 1   // 80\n                                                                                // 2   // 81\n /**                                                                            // 3   // 82\n  *                                                                             // 4   // 83\n  * @method checkAll                                                            // 5   // 84\n  *                                                                             // 6   // 85\n  * @throws Meteor.Error                                                        // 7   // 86\n  *                                                                             // 8   // 87\n  * @param {Object} context                                                     // 9   // 88\n  * @param {FileInfo} file                                                      // 10  // 89\n  * @param {Object} [meta]                                                      // 11  // 90\n  * @param {Object} [restrictions]                                              // 12  // 91\n  *                                                                             // 13  // 92\n  * @returns {Boolean}                                                          // 14  // 93\n  */                                                                            // 15  // 94\n                                                                                // 16  // 95\n  checkAll: function (context, file, meta, restrictions) {                      // 17  // 96\n    return this.checkFileSize(file.size, restrictions.maxSize) &&               // 18  // 97\n      this.checkFileType(file.type, restrictions.allowedFileTypes) &&           // 19  // 98\n      (typeof restrictions.authorize !== 'function' ||                          // 20  // 99\n        restrictions.authorize.call(context, file, meta));                      // 21  // 100\n  },                                                                            // 22  // 101\n                                                                                // 23  // 102\n  /**                                                                           // 24  // 103\n   * @throws Meteor.Error                                                       // 25  // 104\n   *                                                                            // 26  // 105\n   * @param {Number} size - Size of file in bytes.                              // 27  // 106\n   * @param {Number} maxSize - Max size of file in bytes.                       // 28  // 107\n   * @returns {boolean}                                                         // 29  // 108\n   */                                                                           // 30  // 109\n                                                                                // 31  // 110\n  checkFileSize: function (size, maxSize) {                                     // 32  // 111\n    maxSize = Math.min(maxSize, Infinity);                                      // 33  // 112\n                                                                                // 34  // 113\n    if (maxSize && size > maxSize)                                              // 35  // 114\n      throw new Meteor.Error(\"Upload denied\", \"File exceeds allowed size of \" + // 36  // 115\n      formatBytes(maxSize));                                                    // 37  // 116\n                                                                                // 38  // 117\n    return true;                                                                // 39  // 118\n  },                                                                            // 40  // 119\n                                                                                // 41  // 120\n  /**                                                                           // 42  // 121\n   *                                                                            // 43  // 122\n   * @throws Meteor.Error                                                       // 44  // 123\n   *                                                                            // 45  // 124\n   * @param {String} type - Mime type                                           // 46  // 125\n   * @param {(RegExp|Array|String)} [allowed] - Allowed file type(s)            // 47  // 126\n   * @returns {boolean}                                                         // 48  // 127\n   */                                                                           // 49  // 128\n                                                                                // 50  // 129\n  checkFileType: function (type, allowed) {                                     // 51  // 130\n    if (allowed instanceof RegExp) {                                            // 52  // 131\n                                                                                // 53  // 132\n      if (!allowed.test(type))                                                  // 54  // 133\n        throw new Meteor.Error(\"Upload denied\",                                 // 55  // 134\n          type + \" is not an allowed file type\");                               // 56  // 135\n                                                                                // 57  // 136\n      return true;                                                              // 58  // 137\n    }                                                                           // 59  // 138\n                                                                                // 60  // 139\n    if (_.isArray(allowed)) {                                                   // 61  // 140\n      if (allowed.indexOf(type) < 0) {                                          // 62  // 141\n        throw new Meteor.Error(\"Upload denied\",                                 // 63  // 142\n          type + \" is not one of the followed allowed file types: \" +           // 64  // 143\n          allowed.join(\", \"));                                                  // 65  // 144\n      }                                                                         // 66  // 145\n                                                                                // 67  // 146\n      return true;                                                              // 68  // 147\n    }                                                                           // 69  // 148\n                                                                                // 70  // 149\n    if (allowed && allowed !== type) {                                          // 71  // 150\n      throw new Meteor.Error(\"Upload denied\", \"Only files of type \" + allowed + // 72  // 151\n        \" can be uploaded\");                                                    // 73  // 152\n    }                                                                           // 74  // 153\n                                                                                // 75  // 154\n    return true;                                                                // 76  // 155\n  }                                                                             // 77  // 156\n};                                                                              // 78  // 157\n                                                                                // 79  // 158\n/** Human readable data-size in bytes.                                          // 80  // 159\n *                                                                              // 81  // 160\n * @param size {Number}                                                         // 82  // 161\n * @returns {string}                                                            // 83  // 162\n */                                                                             // 84  // 163\n                                                                                // 85  // 164\nfunction formatBytes(size) {                                                    // 86  // 165\n  var units = ['Bytes', 'KB', 'MB', 'GB', 'TB'],                                // 87  // 166\n      unit = units.shift();                                                     // 88  // 167\n                                                                                // 89  // 168\n  while (size >= 0x400 && units.length) {                                       // 90  // 169\n    size /= 0x400;                                                              // 91  // 170\n    unit = units.shift();                                                       // 92  // 171\n  }                                                                             // 93  // 172\n                                                                                // 94  // 173\n  return (Math.round(size * 100) / 100) + \" \" + unit;                           // 95  // 174\n}                                                                               // 96  // 175\n                                                                                // 97  // 176\n//////////////////////////////////////////////////////////////////////////////////     // 177\n                                                                                       // 178\n}).call(this);                                                                         // 179\n                                                                                       // 180\n                                                                                       // 181\n                                                                                       // 182\n                                                                                       // 183\n                                                                                       // 184\n                                                                                       // 185\n(function () {                                                                         // 186\n                                                                                       // 187\n//////////////////////////////////////////////////////////////////////////////////     // 188\n//                                                                              //     // 189\n// packages/edgee:slingshot/lib/upload.js                                       //     // 190\n//                                                                              //     // 191\n//////////////////////////////////////////////////////////////////////////////////     // 192\n                                                                                //     // 193\n/**                                                                             // 1   // 194\n * @fileOverview Defines client side API in which files can be uploaded.        // 2   // 195\n */                                                                             // 3   // 196\n                                                                                // 4   // 197\n/**                                                                             // 5   // 198\n *                                                                              // 6   // 199\n * @param {string} directive - Name of server-directive to use.                 // 7   // 200\n * @param {object} [metaData] - Data to be sent to directive.                   // 8   // 201\n * @constructor                                                                 // 9   // 202\n */                                                                             // 10  // 203\n                                                                                // 11  // 204\nSlingshot.Upload = function (directive, metaData) {                             // 12  // 205\n                                                                                // 13  // 206\n  if (!window.File || !window.FormData) {                                       // 14  // 207\n    throw new Error(\"Browser does not support HTML5 uploads\");                  // 15  // 208\n  }                                                                             // 16  // 209\n                                                                                // 17  // 210\n  var self = this,                                                              // 18  // 211\n      loaded = new ReactiveVar(),                                               // 19  // 212\n      total = new ReactiveVar(),                                                // 20  // 213\n      status = new ReactiveVar(\"idle\"),                                         // 21  // 214\n      dataUri,                                                                  // 22  // 215\n      preloaded;                                                                // 23  // 216\n                                                                                // 24  // 217\n  function buildFormData() {                                                    // 25  // 218\n    var formData = new window.FormData();                                       // 26  // 219\n                                                                                // 27  // 220\n    _.each(self.instructions.postData, function (field) {                       // 28  // 221\n      formData.append(field.name, field.value);                                 // 29  // 222\n    });                                                                         // 30  // 223\n                                                                                // 31  // 224\n    formData.append(\"file\", self.file);                                         // 32  // 225\n                                                                                // 33  // 226\n    return formData;                                                            // 34  // 227\n  }                                                                             // 35  // 228\n                                                                                // 36  // 229\n  _.extend(self, {                                                              // 37  // 230\n                                                                                // 38  // 231\n    /**                                                                         // 39  // 232\n     * @returns {string}                                                        // 40  // 233\n     */                                                                         // 41  // 234\n                                                                                // 42  // 235\n    status: function () {                                                       // 43  // 236\n      return status.get();                                                      // 44  // 237\n    },                                                                          // 45  // 238\n                                                                                // 46  // 239\n    /**                                                                         // 47  // 240\n     * @returns {number}                                                        // 48  // 241\n     */                                                                         // 49  // 242\n                                                                                // 50  // 243\n    progress: function () {                                                     // 51  // 244\n      return self.uploaded() / total.get();                                     // 52  // 245\n    },                                                                          // 53  // 246\n                                                                                // 54  // 247\n    /**                                                                         // 55  // 248\n     * @returns {number}                                                        // 56  // 249\n     */                                                                         // 57  // 250\n                                                                                // 58  // 251\n    uploaded: function () {                                                     // 59  // 252\n      return loaded.get();                                                      // 60  // 253\n    },                                                                          // 61  // 254\n                                                                                // 62  // 255\n   /**                                                                          // 63  // 256\n    * @param {File} file                                                        // 64  // 257\n    * @returns {null|Error} Returns null on success, Error on failure.          // 65  // 258\n    */                                                                          // 66  // 259\n                                                                                // 67  // 260\n    validate: function(file) {                                                  // 68  // 261\n      var context = {                                                           // 69  // 262\n        userId: Meteor.userId && Meteor.userId()                                // 70  // 263\n      };                                                                        // 71  // 264\n      try {                                                                     // 72  // 265\n        var validators = Slingshot.Validators,                                  // 73  // 266\n            restrictions = Slingshot.getRestrictions(directive);                // 74  // 267\n                                                                                // 75  // 268\n        validators.checkAll(context, file, metaData, restrictions) && null;     // 76  // 269\n      } catch(error) {                                                          // 77  // 270\n        return error;                                                           // 78  // 271\n      }                                                                         // 79  // 272\n    },                                                                          // 80  // 273\n                                                                                // 81  // 274\n    /**                                                                         // 82  // 275\n     * @param {(File|Blob)} file                                                // 83  // 276\n     * @param {Function} [callback]                                             // 84  // 277\n     * @returns {Slingshot.Upload}                                              // 85  // 278\n     */                                                                         // 86  // 279\n                                                                                // 87  // 280\n    send: function (file, callback) {                                           // 88  // 281\n      if (! (file instanceof window.File) && ! (file instanceof window.Blob))   // 89  // 282\n        throw new Error(\"Not a file\");                                          // 90  // 283\n                                                                                // 91  // 284\n      self.file = file;                                                         // 92  // 285\n                                                                                // 93  // 286\n      self.request(function (error, instructions) {                             // 94  // 287\n        if (error) {                                                            // 95  // 288\n          return callback(error);                                               // 96  // 289\n        }                                                                       // 97  // 290\n                                                                                // 98  // 291\n        self.instructions = instructions;                                       // 99  // 292\n                                                                                // 100\n        self.transfer(callback);                                                // 101\n      });                                                                       // 102\n                                                                                // 103\n      return self;                                                              // 104\n    },                                                                          // 105\n                                                                                // 106\n    /**                                                                         // 107\n     * @param {Function} [callback]                                             // 108\n     * @returns {Slingshot.Upload}                                              // 109\n     */                                                                         // 110\n                                                                                // 111\n    request: function (callback) {                                              // 112\n                                                                                // 113\n      if (!self.file) {                                                         // 114\n        callback(new Error(\"No file to request upload for\"));                   // 115\n      }                                                                         // 116\n                                                                                // 117\n      var file = _.pick(self.file, \"name\", \"size\", \"type\");                     // 118\n                                                                                // 119\n      status.set(\"authorizing\");                                                // 120\n                                                                                // 121\n      var error = this.validate(file);                                          // 122\n      if (error) {                                                              // 123\n        status.set(\"failed\");                                                   // 124\n        callback(error);                                                        // 125\n        return self;                                                            // 126\n      }                                                                         // 127\n                                                                                // 128\n      Meteor.call(\"slingshot/uploadRequest\", directive,                         // 129\n        file, metaData, function (error, instructions) {                        // 130\n          status.set(error ? \"failed\" : \"authorized\");                          // 131\n          callback(error, instructions);                                        // 132\n        });                                                                     // 133\n                                                                                // 134\n      return self;                                                              // 135\n    },                                                                          // 136\n                                                                                // 137\n    /**                                                                         // 138\n     * @param {Function} [callback]                                             // 139\n     *                                                                          // 140\n     * @returns {Slingshot.Upload}                                              // 141\n     */                                                                         // 142\n                                                                                // 143\n    transfer: function (callback) {                                             // 144\n      if (status.curValue !== \"authorized\") {                                   // 145\n        throw new Error(\"Cannot transfer file at upload status: \" +             // 146\n          status.curValue);                                                     // 147\n      }                                                                         // 148\n                                                                                // 149\n      status.set(\"transferring\");                                               // 150\n      loaded.set(0);                                                            // 151\n                                                                                // 152\n      var xhr = new XMLHttpRequest();                                           // 153\n                                                                                // 154\n      xhr.upload.addEventListener(\"progress\", function (event) {                // 155\n        if (event.lengthComputable) {                                           // 156\n          loaded.set(event.loaded);                                             // 157\n          total.set(event.total);                                               // 158\n        }                                                                       // 159\n      }, false);                                                                // 160\n                                                                                // 161\n      function getError() {                                                     // 162\n        return new Meteor.Error(xhr.statusText + \" - \" + xhr.status,            // 163\n            \"Failed to upload file to cloud storage\");                          // 164\n      }                                                                         // 165\n                                                                                // 166\n      xhr.addEventListener(\"load\", function () {                                // 167\n                                                                                // 168\n        if (xhr.status < 400) {                                                 // 169\n          status.set(\"done\");                                                   // 170\n          loaded.set(total.get());                                              // 171\n          callback(null, self.instructions.download);                           // 172\n        }                                                                       // 173\n        else {                                                                  // 174\n          status.set(\"failed\");                                                 // 175\n          callback(getError());                                                 // 176\n        }                                                                       // 177\n      });                                                                       // 178\n                                                                                // 179\n      xhr.addEventListener(\"error\", function () {                               // 180\n        status.set(\"failed\");                                                   // 181\n        callback(getError());                                                   // 182\n      });                                                                       // 183\n                                                                                // 184\n      xhr.addEventListener(\"abort\", function () {                               // 185\n        status.set(\"aborted\");                                                  // 186\n        callback(new Meteor.Error(\"Aborted\",                                    // 187\n          \"The upload has been aborted by the user\"));                          // 188\n      });                                                                       // 189\n                                                                                // 190\n      xhr.open(\"POST\", self.instructions.upload, true);                         // 191\n                                                                                // 192\n      _.each(self.instructions.headers, function (value, key) {                 // 193\n        xhr.setRequestHeader(key, value);                                       // 194\n      });                                                                       // 195\n                                                                                // 196\n      xhr.send(buildFormData());                                                // 197\n      self.xhr = xhr;                                                           // 198\n                                                                                // 199\n      return self;                                                              // 200\n    },                                                                          // 201\n                                                                                // 202\n    /**                                                                         // 203\n     * @returns {boolean}                                                       // 204\n     */                                                                         // 205\n                                                                                // 206\n    isImage: function () {                                                      // 207\n      self.status(); //React to status change.                                  // 208\n      return Boolean(self.file && self.file.type.split(\"/\")[0] === \"image\");    // 209\n    },                                                                          // 210\n                                                                                // 211\n    /**                                                                         // 212\n     * Latency compensated url of the file to be uploaded.                      // 213\n     *                                                                          // 214\n     * @param {boolean} preload                                                 // 215\n     *                                                                          // 216\n     * @returns {string}                                                        // 217\n     */                                                                         // 218\n                                                                                // 219\n    url: function (preload) {                                                   // 220\n      if (!dataUri) {                                                           // 221\n        var localUrl = new ReactiveVar(),                                       // 222\n            URL = (window.URL || window.webkitURL);                             // 223\n                                                                                // 224\n        dataUri = new ReactiveVar();                                            // 225\n                                                                                // 226\n        Tracker.nonreactive(function () {                                       // 227\n                                                                                // 228\n          /*                                                                    // 229\n           It is important that we generate the local url not more than once    // 230\n           throughout the entire lifecycle of `self` to prevent flickering.     // 231\n           */                                                                   // 232\n                                                                                // 233\n          var previewRequirement = new Tracker.Dependency();                    // 234\n                                                                                // 235\n          Tracker.autorun(function (computation) {                              // 236\n            if (self.file) {                                                    // 237\n              if (URL) {                                                        // 238\n                localUrl.set(URL.createObjectURL(self.file));                   // 239\n                computation.stop();                                             // 240\n              }                                                                 // 241\n              else if (Tracker.active && window.FileReader) {                   // 242\n                readDataUrl(self.file, function (result) {                      // 243\n                  localUrl.set(result);                                         // 244\n                  computation.stop();                                           // 245\n                });                                                             // 246\n              }                                                                 // 247\n            }                                                                   // 248\n            else {                                                              // 249\n              previewRequirement.depend();                                      // 250\n            }                                                                   // 251\n          });                                                                   // 252\n                                                                                // 253\n          Tracker.autorun(function (computation) {                              // 254\n            var status = self.status();                                         // 255\n                                                                                // 256\n            if (self.instructions && status === \"done\") {                       // 257\n              computation.stop();                                               // 258\n              dataUri.set(self.instructions.download);                          // 259\n            }                                                                   // 260\n            else if (status === \"failed\" || status === \"aborted\") {             // 261\n              computation.stop();                                               // 262\n            }                                                                   // 263\n            else if (self.file && !dataUri.curValue) {                          // 264\n              previewRequirement.changed();                                     // 265\n              dataUri.set(localUrl.get());                                      // 266\n            }                                                                   // 267\n          });                                                                   // 268\n        });                                                                     // 269\n      }                                                                         // 270\n                                                                                // 271\n      if (preload) {                                                            // 272\n                                                                                // 273\n        if (self.file && !self.isImage())                                       // 274\n          throw new Error(\"Cannot pre-load anything other than images\");        // 275\n                                                                                // 276\n        if (!preloaded) {                                                       // 277\n          Tracker.nonreactive(function () {                                     // 278\n            preloaded = new ReactiveVar();                                      // 279\n                                                                                // 280\n            Tracker.autorun(function (computation) {                            // 281\n              var url = dataUri.get();                                          // 282\n                                                                                // 283\n              if (self.instructions) {                                          // 284\n                preloadImage(url, function () {                                 // 285\n                  computation.stop();                                           // 286\n                  preloaded.set(url);                                           // 287\n                });                                                             // 288\n              }                                                                 // 289\n              else                                                              // 290\n                preloaded.set(url);                                             // 291\n            });                                                                 // 292\n          });                                                                   // 293\n        }                                                                       // 294\n                                                                                // 295\n        return preloaded.get();                                                 // 296\n      }                                                                         // 297\n      else                                                                      // 298\n        return dataUri.get();                                                   // 299\n    },                                                                          // 300\n                                                                                // 301\n    /** Gets an upload parameter for the directive.                             // 302\n     *                                                                          // 303\n     * @param {String} name                                                     // 304\n     * @returns {String|Number|Undefined}                                       // 305\n     */                                                                         // 306\n                                                                                // 307\n    param: function (name) {                                                    // 308\n      self.status(); //React to status changes.                                 // 309\n                                                                                // 310\n      var data = self.instructions && self.instructions.postData,               // 311\n          field = data && _.findWhere(data, {name: name});                      // 312\n                                                                                // 313\n      return field && field.value;                                              // 314\n    }                                                                           // 315\n                                                                                // 316\n  });                                                                           // 317\n};                                                                              // 318\n                                                                                // 319\n/**                                                                             // 320\n *                                                                              // 321\n * @param {String} image - URL of image to preload.                             // 322\n * @param {Function} callback                                                   // 323\n */                                                                             // 324\n                                                                                // 325\nfunction preloadImage(image, callback) {                                        // 326\n  var preloader = new window.Image();                                           // 327\n                                                                                // 328\n  preloader.onload = callback;                                                  // 329\n                                                                                // 330\n  preloader.src = image;                                                        // 331\n}                                                                               // 332\n                                                                                // 333\nfunction readDataUrl(file, callback) {                                          // 334\n  var reader = new window.FileReader();                                         // 335\n                                                                                // 336\n  reader.onloadend = function () {                                              // 337\n    callback(reader.result);                                                    // 338\n  };                                                                            // 339\n                                                                                // 340\n  reader.readAsDataURL(file);                                                   // 341\n}                                                                               // 342\n                                                                                // 343\n//////////////////////////////////////////////////////////////////////////////////     // 537\n                                                                                       // 538\n}).call(this);                                                                         // 539\n                                                                                       // 540\n/////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['edgee:slingshot'] = {}, {\n  Slingshot: Slingshot\n});\n\n})();\n","servePath":"/packages/edgee_slingshot.js","sourceMap":{"version":3,"sources":["/packages/edgee_slingshot/packages/edgee_slingshot.js"],"names":[],"mappingsfile":"/packages/edgee_slingshot.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/edgee:slingshot/lib/restrictions.js                                 //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n/**                                                                             // 1\n * @module meteor-slingshot                                                     // 2\n */                                                                             // 3\n                                                                                // 4\nSlingshot = {};                                                                 // 5\n                                                                                // 6\n/* global matchAllowedFileTypes: true */                                        // 7\nmatchAllowedFileTypes = Match.OneOf(String, [String], RegExp, null);            // 8\n                                                                                // 9\n/**                                                                             // 10\n * List of configured restrictions by name.                                     // 11\n *                                                                              // 12\n * @type {Object.<String, Function>}                                            // 13\n * @private                                                                     // 14\n */                                                                             // 15\n                                                                                // 16\nSlingshot._restrictions = {};                                                   // 17\n                                                                                // 18\n/**                                                                             // 19\n * Creates file upload restrictions for a specific directive.                   // 20\n *                                                                              // 21\n * @param {string} name - A unique identifier of the directive.                 // 22\n * @param {Object} restrictions - The file upload restrictions.                 // 23\n * @returns {Object}                                                            // 24\n */                                                                             // 25\n                                                                                // 26\nSlingshot.fileRestrictions = function (name, restrictions) {                    // 27\n  check(restrictions, {                                                         // 28\n    authorize: Match.Optional(Function),                                        // 29\n    maxSize: Match.Optional(Match.OneOf(Number, null)),                         // 30\n    allowedFileTypes: Match.Optional(matchAllowedFileTypes)                     // 31\n  });                                                                           // 32\n                                                                                // 33\n  if (Meteor.isServer) {                                                        // 34\n    var directive = Slingshot.getDirective(name);                               // 35\n    if (directive) {                                                            // 36\n      _.extend(directive._directive, restrictions);                             // 37\n    }                                                                           // 38\n  }                                                                             // 39\n                                                                                // 40\n  return (Slingshot._restrictions[name] =                                       // 41\n    _.extend(Slingshot._restrictions[name] || {}, restrictions));               // 42\n};                                                                              // 43\n                                                                                // 44\n/**                                                                             // 45\n * @param {string} name - The unique identifier of the directive to             // 46\n * retrieve the restrictions for.                                               // 47\n * @returns {Object}                                                            // 48\n */                                                                             // 49\n                                                                                // 50\nSlingshot.getRestrictions = function (name) {                                   // 51\n  return this._restrictions[name] || {};                                        // 52\n};                                                                              // 53\n                                                                                // 54\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/edgee:slingshot/lib/validators.js                                   //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nSlingshot.Validators = {                                                        // 1\n                                                                                // 2\n /**                                                                            // 3\n  *                                                                             // 4\n  * @method checkAll                                                            // 5\n  *                                                                             // 6\n  * @throws Meteor.Error                                                        // 7\n  *                                                                             // 8\n  * @param {Object} context                                                     // 9\n  * @param {FileInfo} file                                                      // 10\n  * @param {Object} [meta]                                                      // 11\n  * @param {Object} [restrictions]                                              // 12\n  *                                                                             // 13\n  * @returns {Boolean}                                                          // 14\n  */                                                                            // 15\n                                                                                // 16\n  checkAll: function (context, file, meta, restrictions) {                      // 17\n    return this.checkFileSize(file.size, restrictions.maxSize) &&               // 18\n      this.checkFileType(file.type, restrictions.allowedFileTypes) &&           // 19\n      (typeof restrictions.authorize !== 'function' ||                          // 20\n        restrictions.authorize.call(context, file, meta));                      // 21\n  },                                                                            // 22\n                                                                                // 23\n  /**                                                                           // 24\n   * @throws Meteor.Error                                                       // 25\n   *                                                                            // 26\n   * @param {Number} size - Size of file in bytes.                              // 27\n   * @param {Number} maxSize - Max size of file in bytes.                       // 28\n   * @returns {boolean}                                                         // 29\n   */                                                                           // 30\n                                                                                // 31\n  checkFileSize: function (size, maxSize) {                                     // 32\n    maxSize = Math.min(maxSize, Infinity);                                      // 33\n                                                                                // 34\n    if (maxSize && size > maxSize)                                              // 35\n      throw new Meteor.Error(\"Upload denied\", \"File exceeds allowed size of \" + // 36\n      formatBytes(maxSize));                                                    // 37\n                                                                                // 38\n    return true;                                                                // 39\n  },                                                                            // 40\n                                                                                // 41\n  /**                                                                           // 42\n   *                                                                            // 43\n   * @throws Meteor.Error                                                       // 44\n   *                                                                            // 45\n   * @param {String} type - Mime type                                           // 46\n   * @param {(RegExp|Array|String)} [allowed] - Allowed file type(s)            // 47\n   * @returns {boolean}                                                         // 48\n   */                                                                           // 49\n                                                                                // 50\n  checkFileType: function (type, allowed) {                                     // 51\n    if (allowed instanceof RegExp) {                                            // 52\n                                                                                // 53\n      if (!allowed.test(type))                                                  // 54\n        throw new Meteor.Error(\"Upload denied\",                                 // 55\n          type + \" is not an allowed file type\");                               // 56\n                                                                                // 57\n      return true;                                                              // 58\n    }                                                                           // 59\n                                                                                // 60\n    if (_.isArray(allowed)) {                                                   // 61\n      if (allowed.indexOf(type) < 0) {                                          // 62\n        throw new Meteor.Error(\"Upload denied\",                                 // 63\n          type + \" is not one of the followed allowed file types: \" +           // 64\n          allowed.join(\", \"));                                                  // 65\n      }                                                                         // 66\n                                                                                // 67\n      return true;                                                              // 68\n    }                                                                           // 69\n                                                                                // 70\n    if (allowed && allowed !== type) {                                          // 71\n      throw new Meteor.Error(\"Upload denied\", \"Only files of type \" + allowed + // 72\n        \" can be uploaded\");                                                    // 73\n    }                                                                           // 74\n                                                                                // 75\n    return true;                                                                // 76\n  }                                                                             // 77\n};                                                                              // 78\n                                                                                // 79\n/** Human readable data-size in bytes.                                          // 80\n *                                                                              // 81\n * @param size {Number}                                                         // 82\n * @returns {string}                                                            // 83\n */                                                                             // 84\n                                                                                // 85\nfunction formatBytes(size) {                                                    // 86\n  var units = ['Bytes', 'KB', 'MB', 'GB', 'TB'],                                // 87\n      unit = units.shift();                                                     // 88\n                                                                                // 89\n  while (size >= 0x400 && units.length) {                                       // 90\n    size /= 0x400;                                                              // 91\n    unit = units.shift();                                                       // 92\n  }                                                                             // 93\n                                                                                // 94\n  return (Math.round(size * 100) / 100) + \" \" + unit;                           // 95\n}                                                                               // 96\n                                                                                // 97\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/edgee:slingshot/lib/upload.js                                       //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n/**                                                                             // 1\n * @fileOverview Defines client side API in which files can be uploaded.        // 2\n */                                                                             // 3\n                                                                                // 4\n/**                                                                             // 5\n *                                                                              // 6\n * @param {string} directive - Name of server-directive to use.                 // 7\n * @param {object} [metaData] - Data to be sent to directive.                   // 8\n * @constructor                                                                 // 9\n */                                                                             // 10\n                                                                                // 11\nSlingshot.Upload = function (directive, metaData) {                             // 12\n                                                                                // 13\n  if (!window.File || !window.FormData) {                                       // 14\n    throw new Error(\"Browser does not support HTML5 uploads\");                  // 15\n  }                                                                             // 16\n                                                                                // 17\n  var self = this,                                                              // 18\n      loaded = new ReactiveVar(),                                               // 19\n      total = new ReactiveVar(),                                                // 20\n      status = new ReactiveVar(\"idle\"),                                         // 21\n      dataUri,                                                                  // 22\n      preloaded;                                                                // 23\n                                                                                // 24\n  function buildFormData() {                                                    // 25\n    var formData = new window.FormData();                                       // 26\n                                                                                // 27\n    _.each(self.instructions.postData, function (field) {                       // 28\n      formData.append(field.name, field.value);                                 // 29\n    });                                                                         // 30\n                                                                                // 31\n    formData.append(\"file\", self.file);                                         // 32\n                                                                                // 33\n    return formData;                                                            // 34\n  }                                                                             // 35\n                                                                                // 36\n  _.extend(self, {                                                              // 37\n                                                                                // 38\n    /**                                                                         // 39\n     * @returns {string}                                                        // 40\n     */                                                                         // 41\n                                                                                // 42\n    status: function () {                                                       // 43\n      return status.get();                                                      // 44\n    },                                                                          // 45\n                                                                                // 46\n    /**                                                                         // 47\n     * @returns {number}                                                        // 48\n     */                                                                         // 49\n                                                                                // 50\n    progress: function () {                                                     // 51\n      return self.uploaded() / total.get();                                     // 52\n    },                                                                          // 53\n                                                                                // 54\n    /**                                                                         // 55\n     * @returns {number}                                                        // 56\n     */                                                                         // 57\n                                                                                // 58\n    uploaded: function () {                                                     // 59\n      return loaded.get();                                                      // 60\n    },                                                                          // 61\n                                                                                // 62\n   /**                                                                          // 63\n    * @param {File} file                                                        // 64\n    * @returns {null|Error} Returns null on success, Error on failure.          // 65\n    */                                                                          // 66\n                                                                                // 67\n    validate: function(file) {                                                  // 68\n      var context = {                                                           // 69\n        userId: Meteor.userId && Meteor.userId()                                // 70\n      };                                                                        // 71\n      try {                                                                     // 72\n        var validators = Slingshot.Validators,                                  // 73\n            restrictions = Slingshot.getRestrictions(directive);                // 74\n                                                                                // 75\n        validators.checkAll(context, file, metaData, restrictions) && null;     // 76\n      } catch(error) {                                                          // 77\n        return error;                                                           // 78\n      }                                                                         // 79\n    },                                                                          // 80\n                                                                                // 81\n    /**                                                                         // 82\n     * @param {(File|Blob)} file                                                // 83\n     * @param {Function} [callback]                                             // 84\n     * @returns {Slingshot.Upload}                                              // 85\n     */                                                                         // 86\n                                                                                // 87\n    send: function (file, callback) {                                           // 88\n      if (! (file instanceof window.File) && ! (file instanceof window.Blob))   // 89\n        throw new Error(\"Not a file\");                                          // 90\n                                                                                // 91\n      self.file = file;                                                         // 92\n                                                                                // 93\n      self.request(function (error, instructions) {                             // 94\n        if (error) {                                                            // 95\n          return callback(error);                                               // 96\n        }                                                                       // 97\n                                                                                // 98\n        self.instructions = instructions;                                       // 99\n                                                                                // 100\n        self.transfer(callback);                                                // 101\n      });                                                                       // 102\n                                                                                // 103\n      return self;                                                              // 104\n    },                                                                          // 105\n                                                                                // 106\n    /**                                                                         // 107\n     * @param {Function} [callback]                                             // 108\n     * @returns {Slingshot.Upload}                                              // 109\n     */                                                                         // 110\n                                                                                // 111\n    request: function (callback) {                                              // 112\n                                                                                // 113\n      if (!self.file) {                                                         // 114\n        callback(new Error(\"No file to request upload for\"));                   // 115\n      }                                                                         // 116\n                                                                                // 117\n      var file = _.pick(self.file, \"name\", \"size\", \"type\");                     // 118\n                                                                                // 119\n      status.set(\"authorizing\");                                                // 120\n                                                                                // 121\n      var error = this.validate(file);                                          // 122\n      if (error) {                                                              // 123\n        status.set(\"failed\");                                                   // 124\n        callback(error);                                                        // 125\n        return self;                                                            // 126\n      }                                                                         // 127\n                                                                                // 128\n      Meteor.call(\"slingshot/uploadRequest\", directive,                         // 129\n        file, metaData, function (error, instructions) {                        // 130\n          status.set(error ? \"failed\" : \"authorized\");                          // 131\n          callback(error, instructions);                                        // 132\n        });                                                                     // 133\n                                                                                // 134\n      return self;                                                              // 135\n    },                                                                          // 136\n                                                                                // 137\n    /**                                                                         // 138\n     * @param {Function} [callback]                                             // 139\n     *                                                                          // 140\n     * @returns {Slingshot.Upload}                                              // 141\n     */                                                                         // 142\n                                                                                // 143\n    transfer: function (callback) {                                             // 144\n      if (status.curValue !== \"authorized\") {                                   // 145\n        throw new Error(\"Cannot transfer file at upload status: \" +             // 146\n          status.curValue);                                                     // 147\n      }                                                                         // 148\n                                                                                // 149\n      status.set(\"transferring\");                                               // 150\n      loaded.set(0);                                                            // 151\n                                                                                // 152\n      var xhr = new XMLHttpRequest();                                           // 153\n                                                                                // 154\n      xhr.upload.addEventListener(\"progress\", function (event) {                // 155\n        if (event.lengthComputable) {                                           // 156\n          loaded.set(event.loaded);                                             // 157\n          total.set(event.total);                                               // 158\n        }                                                                       // 159\n      }, false);                                                                // 160\n                                                                                // 161\n      function getError() {                                                     // 162\n        return new Meteor.Error(xhr.statusText + \" - \" + xhr.status,            // 163\n            \"Failed to upload file to cloud storage\");                          // 164\n      }                                                                         // 165\n                                                                                // 166\n      xhr.addEventListener(\"load\", function () {                                // 167\n                                                                                // 168\n        if (xhr.status < 400) {                                                 // 169\n          status.set(\"done\");                                                   // 170\n          loaded.set(total.get());                                              // 171\n          callback(null, self.instructions.download);                           // 172\n        }                                                                       // 173\n        else {                                                                  // 174\n          status.set(\"failed\");                                                 // 175\n          callback(getError());                                                 // 176\n        }                                                                       // 177\n      });                                                                       // 178\n                                                                                // 179\n      xhr.addEventListener(\"error\", function () {                               // 180\n        status.set(\"failed\");                                                   // 181\n        callback(getError());                                                   // 182\n      });                                                                       // 183\n                                                                                // 184\n      xhr.addEventListener(\"abort\", function () {                               // 185\n        status.set(\"aborted\");                                                  // 186\n        callback(new Meteor.Error(\"Aborted\",                                    // 187\n          \"The upload has been aborted by the user\"));                          // 188\n      });                                                                       // 189\n                                                                                // 190\n      xhr.open(\"POST\", self.instructions.upload, true);                         // 191\n                                                                                // 192\n      _.each(self.instructions.headers, function (value, key) {                 // 193\n        xhr.setRequestHeader(key, value);                                       // 194\n      });                                                                       // 195\n                                                                                // 196\n      xhr.send(buildFormData());                                                // 197\n      self.xhr = xhr;                                                           // 198\n                                                                                // 199\n      return self;                                                              // 200\n    },                                                                          // 201\n                                                                                // 202\n    /**                                                                         // 203\n     * @returns {boolean}                                                       // 204\n     */                                                                         // 205\n                                                                                // 206\n    isImage: function () {                                                      // 207\n      self.status(); //React to status change.                                  // 208\n      return Boolean(self.file && self.file.type.split(\"/\")[0] === \"image\");    // 209\n    },                                                                          // 210\n                                                                                // 211\n    /**                                                                         // 212\n     * Latency compensated url of the file to be uploaded.                      // 213\n     *                                                                          // 214\n     * @param {boolean} preload                                                 // 215\n     *                                                                          // 216\n     * @returns {string}                                                        // 217\n     */                                                                         // 218\n                                                                                // 219\n    url: function (preload) {                                                   // 220\n      if (!dataUri) {                                                           // 221\n        var localUrl = new ReactiveVar(),                                       // 222\n            URL = (window.URL || window.webkitURL);                             // 223\n                                                                                // 224\n        dataUri = new ReactiveVar();                                            // 225\n                                                                                // 226\n        Tracker.nonreactive(function () {                                       // 227\n                                                                                // 228\n          /*                                                                    // 229\n           It is important that we generate the local url not more than once    // 230\n           throughout the entire lifecycle of `self` to prevent flickering.     // 231\n           */                                                                   // 232\n                                                                                // 233\n          var previewRequirement = new Tracker.Dependency();                    // 234\n                                                                                // 235\n          Tracker.autorun(function (computation) {                              // 236\n            if (self.file) {                                                    // 237\n              if (URL) {                                                        // 238\n                localUrl.set(URL.createObjectURL(self.file));                   // 239\n                computation.stop();                                             // 240\n              }                                                                 // 241\n              else if (Tracker.active && window.FileReader) {                   // 242\n                readDataUrl(self.file, function (result) {                      // 243\n                  localUrl.set(result);                                         // 244\n                  computation.stop();                                           // 245\n                });                                                             // 246\n              }                                                                 // 247\n            }                                                                   // 248\n            else {                                                              // 249\n              previewRequirement.depend();                                      // 250\n            }                                                                   // 251\n          });                                                                   // 252\n                                                                                // 253\n          Tracker.autorun(function (computation) {                              // 254\n            var status = self.status();                                         // 255\n                                                                                // 256\n            if (self.instructions && status === \"done\") {                       // 257\n              computation.stop();                                               // 258\n              dataUri.set(self.instructions.download);                          // 259\n            }                                                                   // 260\n            else if (status === \"failed\" || status === \"aborted\") {             // 261\n              computation.stop();                                               // 262\n            }                                                                   // 263\n            else if (self.file && !dataUri.curValue) {                          // 264\n              previewRequirement.changed();                                     // 265\n              dataUri.set(localUrl.get());                                      // 266\n            }                                                                   // 267\n          });                                                                   // 268\n        });                                                                     // 269\n      }                                                                         // 270\n                                                                                // 271\n      if (preload) {                                                            // 272\n                                                                                // 273\n        if (self.file && !self.isImage())                                       // 274\n          throw new Error(\"Cannot pre-load anything other than images\");        // 275\n                                                                                // 276\n        if (!preloaded) {                                                       // 277\n          Tracker.nonreactive(function () {                                     // 278\n            preloaded = new ReactiveVar();                                      // 279\n                                                                                // 280\n            Tracker.autorun(function (computation) {                            // 281\n              var url = dataUri.get();                                          // 282\n                                                                                // 283\n              if (self.instructions) {                                          // 284\n                preloadImage(url, function () {                                 // 285\n                  computation.stop();                                           // 286\n                  preloaded.set(url);                                           // 287\n                });                                                             // 288\n              }                                                                 // 289\n              else                                                              // 290\n                preloaded.set(url);                                             // 291\n            });                                                                 // 292\n          });                                                                   // 293\n        }                                                                       // 294\n                                                                                // 295\n        return preloaded.get();                                                 // 296\n      }                                                                         // 297\n      else                                                                      // 298\n        return dataUri.get();                                                   // 299\n    },                                                                          // 300\n                                                                                // 301\n    /** Gets an upload parameter for the directive.                             // 302\n     *                                                                          // 303\n     * @param {String} name                                                     // 304\n     * @returns {String|Number|Undefined}                                       // 305\n     */                                                                         // 306\n                                                                                // 307\n    param: function (name) {                                                    // 308\n      self.status(); //React to status changes.                                 // 309\n                                                                                // 310\n      var data = self.instructions && self.instructions.postData,               // 311\n          field = data && _.findWhere(data, {name: name});                      // 312\n                                                                                // 313\n      return field && field.value;                                              // 314\n    }                                                                           // 315\n                                                                                // 316\n  });                                                                           // 317\n};                                                                              // 318\n                                                                                // 319\n/**                                                                             // 320\n *                                                                              // 321\n * @param {String} image - URL of image to preload.                             // 322\n * @param {Function} callback                                                   // 323\n */                                                                             // 324\n                                                                                // 325\nfunction preloadImage(image, callback) {                                        // 326\n  var preloader = new window.Image();                                           // 327\n                                                                                // 328\n  preloader.onload = callback;                                                  // 329\n                                                                                // 330\n  preloader.src = image;                                                        // 331\n}                                                                               // 332\n                                                                                // 333\nfunction readDataUrl(file, callback) {                                          // 334\n  var reader = new window.FileReader();                                         // 335\n                                                                                // 336\n  reader.onloadend = function () {                                              // 337\n    callback(reader.result);                                                    // 338\n  };                                                                            // 339\n                                                                                // 340\n  reader.readAsDataURL(file);                                                   // 341\n}                                                                               // 342\n                                                                                // 343\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]