[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Index, Engine, ReactiveEngine, Cursor, SearchCollection, MongoDBEngine, MinimongoEngine, MongoTextIndexEngine, EasySearch;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"easysearch:core\":{\"lib\":{\"core\":{\"index.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/createClass\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/index.js                                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nvar _createClass2 = require('babel-runtime/helpers/createClass');                                                    //\n                                                                                                                     //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                           //\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * An Index represents the main entry point for searching with EasySearch. It relies on                              //\n * the given engine to have the search functionality and defines the data that should be searchable.                 //\n *                                                                                                                   //\n * @type {Index}                                                                                                     //\n */                                                                                                                  //\nIndex = function () {                                                                                                // 7\n  /**                                                                                                                //\n   * Constructor                                                                                                     //\n   *                                                                                                                 //\n   * @param {Object} config Configuration                                                                            //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  function Index(config) {                                                                                           // 15\n    (0, _classCallCheck3['default'])(this, Index);                                                                   //\n                                                                                                                     //\n    check(config, Object);                                                                                           // 16\n    check(config.collection, Meteor.Collection);                                                                     // 17\n    check(config.fields, [String]);                                                                                  // 18\n                                                                                                                     //\n    if (!(config.engine instanceof Engine)) {                                                                        // 20\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');                              // 21\n    }                                                                                                                //\n                                                                                                                     //\n    if (!config.name) config.name = (config.collection._name || '').toLowerCase();                                   // 24\n                                                                                                                     //\n    this.config = _.extend(Index.defaultConfiguration, config);                                                      // 27\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });\n                                                                                                                     //\n    // Engine specific code on index creation                                                                        //\n    config.engine.onIndexCreate(this.config);                                                                        // 15\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Default configuration for an index.                                                                             //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Search the index.                                                                                               //\n   *                                                                                                                 //\n   * @param {Object|String} searchDefinition Search definition                                                       //\n   * @param {Object}        options          Options                                                                 //\n   *                                                                                                                 //\n   * @returns {Cursor}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  Index.prototype.search = function () {                                                                             // 7\n    function search(searchDefinition) {                                                                              //\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                         //\n                                                                                                                     //\n      this.config.engine.checkSearchParam(searchDefinition, this.config);                                            // 55\n                                                                                                                     //\n      check(options, {                                                                                               // 57\n        limit: Match.Optional(Number),                                                                               // 58\n        skip: Match.Optional(Number),                                                                                // 59\n        props: Match.Optional(Object)                                                                                // 60\n      });                                                                                                            //\n                                                                                                                     //\n      options = {                                                                                                    // 63\n        search: this._getSearchOptions(options),                                                                     // 64\n        index: this.config                                                                                           // 65\n      };                                                                                                             //\n                                                                                                                     //\n      if (!this.config.permission(options.search)) {                                                                 // 68\n        throw new Meteor.Error('not-allowed', \"Not allowed to search this index!\");                                  // 69\n      }                                                                                                              //\n                                                                                                                     //\n      return this.config.engine.search(searchDefinition, options);                                                   // 72\n    }                                                                                                                //\n                                                                                                                     //\n    return search;                                                                                                   //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Returns the search options based on the given options.                                                          //\n   *                                                                                                                 //\n   * @param {Object} options Options to use                                                                          //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  Index.prototype._getSearchOptions = function () {                                                                  // 7\n    function _getSearchOptions(options) {                                                                            //\n      return _.defaults(Meteor.userId ? { userId: Meteor.userId() } : {}, options, this.defaultSearchOptions);       // 83\n    }                                                                                                                //\n                                                                                                                     //\n    return _getSearchOptions;                                                                                        //\n  }();                                                                                                               //\n                                                                                                                     //\n  (0, _createClass3['default'])(Index, null, [{                                                                      //\n    key: 'defaultConfiguration',                                                                                     //\n    get: function () {                                                                                               //\n      function get() {                                                                                               //\n        return {                                                                                                     // 40\n          permission: function () {                                                                                  // 41\n            function permission() {                                                                                  // 41\n              return true;                                                                                           //\n            }                                                                                                        //\n                                                                                                                     //\n            return permission;                                                                                       //\n          }(),                                                                                                       //\n          defaultSearchOptions: {}                                                                                   // 42\n        };                                                                                                           //\n      }                                                                                                              //\n                                                                                                                     //\n      return get;                                                                                                    //\n    }()                                                                                                              //\n  }]);                                                                                                               //\n  return Index;                                                                                                      //\n}();                                                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"engine.js\":[\"babel-runtime/helpers/classCallCheck\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/engine.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * An Engine is the technology used for searching with EasySearch, with                                              //\n * customizable configuration to how it interacts with the data from the Index.                                      //\n *                                                                                                                   //\n * @type {Engine}                                                                                                    //\n */                                                                                                                  //\nEngine = function () {                                                                                               // 7\n  /**                                                                                                                //\n   * Constructor                                                                                                     //\n   *                                                                                                                 //\n   * @param {Object} config configuration                                                                            //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  function Engine() {                                                                                                // 15\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                            //\n    (0, _classCallCheck3['default'])(this, Engine);                                                                  //\n                                                                                                                     //\n    if (this.constructor === Engine) {                                                                               // 16\n      throw new Error('Cannot initialize instance of Engine');                                                       // 17\n    }                                                                                                                //\n                                                                                                                     //\n    if (!_.isFunction(this.search)) {                                                                                // 20\n      throw new Error('Engine needs to implement search method');                                                    // 21\n    }                                                                                                                //\n                                                                                                                     //\n    this.config = _.defaults({}, config, this.defaultConfiguration());                                               // 24\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  Engine.prototype.defaultConfiguration = function () {                                                              // 7\n    function defaultConfiguration() {                                                                                //\n      return {};                                                                                                     // 33\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Call a configuration method with the engine scope.                                                              //\n   *                                                                                                                 //\n   * @param {String} methodName Method name                                                                          //\n   * @param {Object} args       Arguments for the method                                                             //\n   *                                                                                                                 //\n   * @returns {*}                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  Engine.prototype.callConfigMethod = function () {                                                                  // 7\n    function callConfigMethod(methodName) {                                                                          //\n      check(methodName, String);                                                                                     // 45\n                                                                                                                     //\n      var func = this.config[methodName];                                                                            // 47\n                                                                                                                     //\n      if (func) {                                                                                                    // 49\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {    //\n          args[_key - 1] = arguments[_key];                                                                          //\n        }                                                                                                            //\n                                                                                                                     //\n        return func.apply(this, args);                                                                               // 50\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return callConfigMethod;                                                                                         //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Check the given search parameter for validity                                                                   //\n   *                                                                                                                 //\n   * @param search                                                                                                   //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  Engine.prototype.checkSearchParam = function () {                                                                  // 7\n    function checkSearchParam(search) {                                                                              //\n      check(search, String);                                                                                         // 60\n    }                                                                                                                //\n                                                                                                                     //\n    return checkSearchParam;                                                                                         //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   *Code to run on index creation                                                                                    //\n   *                                                                                                                 //\n   * @param {Object} indexConfig Index configuraction                                                                //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  Engine.prototype.onIndexCreate = function () {                                                                     // 7\n    function onIndexCreate(indexConfig) {                                                                            //\n      if (!indexConfig.allowedFields) {                                                                              // 69\n        indexConfig.allowedFields = indexConfig.fields;                                                              // 70\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return onIndexCreate;                                                                                            //\n  }();                                                                                                               //\n                                                                                                                     //\n  return Engine;                                                                                                     //\n}();                                                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"reactive-engine.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/reactive-engine.js                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                        //\n                                                                                                                     //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                               //\n                                                                                                                     //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                          //\n                                                                                                                     //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                 //\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * A ReactiveEngine handles the reactive logic, such as subscribing                                                  //\n * and publishing documents into a self contained collection.                                                        //\n *                                                                                                                   //\n * @type {ReactiveEngine}                                                                                            //\n */                                                                                                                  //\nReactiveEngine = function (_Engine) {                                                                                // 7\n  (0, _inherits3['default'])(ReactiveEngine, _Engine);                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Constructor.                                                                                                    //\n   *                                                                                                                 //\n   * @param {Object} config Configuration                                                                            //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  function ReactiveEngine(config) {                                                                                  // 15\n    (0, _classCallCheck3['default'])(this, ReactiveEngine);                                                          //\n                                                                                                                     //\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _Engine.call(this, config));                       //\n                                                                                                                     //\n    if (_this === _this.constructor) {                                                                               // 18\n      throw new Error('Cannot initialize instance of ReactiveEngine');                                               // 19\n    }                                                                                                                //\n                                                                                                                     //\n    if (!_.isFunction(_this.getSearchCursor)) {                                                                      // 22\n      throw new Error('Reactive engine needs to implement getSearchCursor method');                                  // 23\n    }                                                                                                                //\n    return _this;                                                                                                    //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  ReactiveEngine.prototype.defaultConfiguration = function () {                                                      // 7\n    function defaultConfiguration() {                                                                                //\n      return _.defaults({}, {                                                                                        // 33\n        transform: function () {                                                                                     // 34\n          function transform(doc) {                                                                                  // 34\n            return doc;                                                                                              //\n          }                                                                                                          //\n                                                                                                                     //\n          return transform;                                                                                          //\n        }(),                                                                                                         //\n        beforePublish: function () {                                                                                 // 35\n          function beforePublish(event, doc) {                                                                       // 35\n            return doc;                                                                                              //\n          }                                                                                                          //\n                                                                                                                     //\n          return beforePublish;                                                                                      //\n        }()                                                                                                          //\n      }, _Engine.prototype.defaultConfiguration.call(this));                                                         //\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Code to run on index creation                                                                                   //\n   *                                                                                                                 //\n   * @param {Object} indexConfig Index configuration                                                                 //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  ReactiveEngine.prototype.onIndexCreate = function () {                                                             // 7\n    function onIndexCreate(indexConfig) {                                                                            //\n      _Engine.prototype.onIndexCreate.call(this, indexConfig);                                                       // 45\n      indexConfig.searchCollection = new SearchCollection(indexConfig, this);                                        // 46\n      indexConfig.mongoCollection = indexConfig.searchCollection._collection;                                        // 47\n    }                                                                                                                //\n                                                                                                                     //\n    return onIndexCreate;                                                                                            //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Transform the search definition.                                                                                //\n   *                                                                                                                 //\n   * @param {String|Object} searchDefinition Search definition                                                       //\n   * @param {Object}        options          Search and index options                                                //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  ReactiveEngine.prototype.transformSearchDefinition = function () {                                                 // 7\n    function transformSearchDefinition(searchDefinition, options) {                                                  //\n      if (_.isString(searchDefinition)) {                                                                            // 59\n        (function () {                                                                                               //\n          var obj = {};                                                                                              // 60\n                                                                                                                     //\n          _.each(options.index.fields, function (field) {                                                            // 62\n            obj[field] = searchDefinition;                                                                           // 63\n          });                                                                                                        //\n                                                                                                                     //\n          searchDefinition = obj;                                                                                    // 66\n        })();                                                                                                        //\n      }                                                                                                              //\n                                                                                                                     //\n      return searchDefinition;                                                                                       // 69\n    }                                                                                                                //\n                                                                                                                     //\n    return transformSearchDefinition;                                                                                //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Check the given search parameter for validity                                                                   //\n   *                                                                                                                 //\n   * @param search                                                                                                   //\n   * @param indexOptions                                                                                             //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  ReactiveEngine.prototype.checkSearchParam = function () {                                                          // 7\n    function checkSearchParam(search, indexOptions) {                                                                //\n      check(search, Match.OneOf(String, Object));                                                                    // 79\n                                                                                                                     //\n      if (_.isObject(search)) {                                                                                      // 81\n        _.each(search, function (val, field) {                                                                       // 82\n          check(val, String);                                                                                        // 83\n                                                                                                                     //\n          if (-1 === _.indexOf(indexOptions.allowedFields, field)) {                                                 // 85\n            throw new Meteor.Error('Not allowed to search over field \"' + field + '\"');                              // 86\n          }                                                                                                          //\n        });                                                                                                          //\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return checkSearchParam;                                                                                         //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Reactively search on the collection.                                                                            //\n   *                                                                                                                 //\n   * @param {Object} searchDefinition Search definition                                                              //\n   * @param {Object} options          Options                                                                        //\n   *                                                                                                                 //\n   * @returns {Cursor}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  ReactiveEngine.prototype.search = function () {                                                                    // 7\n    function search(searchDefinition, options) {                                                                     //\n      if (Meteor.isClient) {                                                                                         // 101\n        return options.index.searchCollection.find(searchDefinition, options.search);                                // 102\n      } else {                                                                                                       //\n        return this.getSearchCursor(this.transformSearchDefinition(searchDefinition, options), options);             // 104\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return search;                                                                                                   //\n  }();                                                                                                               //\n                                                                                                                     //\n  return ReactiveEngine;                                                                                             //\n}(Engine);                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"cursor.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/createClass\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/cursor.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");                                                    //\n                                                                                                                     //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                           //\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * A Cursor represents a pointer to the search results. Since it's specific                                          //\n * to EasySearch it can also be used to check for valid return values.                                               //\n *                                                                                                                   //\n * @type {Cursor}                                                                                                    //\n */                                                                                                                  //\nCursor = function () {                                                                                               // 7\n  /**                                                                                                                //\n   * Constructor                                                                                                     //\n   *                                                                                                                 //\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor                                                     //\n   * @param {Number}       count         Count of all documents found                                                //\n   * @param {Boolean}      isReady       Cursor is ready                                                             //\n   * @param {Object}       publishHandle Publish handle to stop if on client                                         //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   *                                                                                                                 //\n   */                                                                                                                //\n                                                                                                                     //\n  function Cursor(mongoCursor, count) {                                                                              // 19\n    var isReady = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];                         //\n    var publishHandle = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];                   //\n    (0, _classCallCheck3[\"default\"])(this, Cursor);                                                                  //\n                                                                                                                     //\n    check(mongoCursor.fetch, Function);                                                                              // 20\n    check(count, Number);                                                                                            // 21\n    check(isReady, Match.Optional(Boolean));                                                                         // 22\n    check(publishHandle, Match.OneOf(null, Object));                                                                 // 23\n                                                                                                                     //\n    this._mongoCursor = mongoCursor;                                                                                 // 25\n    this._count = count;                                                                                             // 26\n    this._isReady = isReady;                                                                                         // 27\n    this._publishHandle = publishHandle;                                                                             // 28\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Fetch the search results.                                                                                       //\n   *                                                                                                                 //\n   * @returns {[Object]}                                                                                             //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  Cursor.prototype.fetch = function () {                                                                             // 7\n    function fetch() {                                                                                               //\n      return this._mongoCursor.fetch();                                                                              // 37\n    }                                                                                                                //\n                                                                                                                     //\n    return fetch;                                                                                                    //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Stop the subscription handle associated with the cursor.                                                        //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  Cursor.prototype.stop = function () {                                                                              // 7\n    function stop() {                                                                                                //\n      if (this._publishHandle) {                                                                                     // 44\n        return this._publishHandle.stop();                                                                           // 45\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return stop;                                                                                                     //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return count of all documents found                                                                             //\n   *                                                                                                                 //\n   * @returns {Number}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  Cursor.prototype.count = function () {                                                                             // 7\n    function count() {                                                                                               //\n      return this._count;                                                                                            // 55\n    }                                                                                                                //\n                                                                                                                     //\n    return count;                                                                                                    //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return if the cursor is ready.                                                                                  //\n   *                                                                                                                 //\n   * @returns {Boolean}                                                                                              //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  Cursor.prototype.isReady = function () {                                                                           // 7\n    function isReady() {                                                                                             //\n      return this._isReady;                                                                                          // 64\n    }                                                                                                                //\n                                                                                                                     //\n    return isReady;                                                                                                  //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return the raw mongo cursor.                                                                                    //\n   *                                                                                                                 //\n   * @returns {Mongo.Cursor}                                                                                         //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  (0, _createClass3[\"default\"])(Cursor, [{                                                                           //\n    key: \"mongoCursor\",                                                                                              //\n    get: function () {                                                                                               //\n      function get() {                                                                                               //\n        return this._mongoCursor;                                                                                    // 73\n      }                                                                                                              //\n                                                                                                                     //\n      return get;                                                                                                    //\n    }()                                                                                                              //\n                                                                                                                     //\n    /**                                                                                                              //\n     * Return a fake empty cursor, without data.                                                                     //\n     *                                                                                                               //\n     * @returns {Object}                                                                                             //\n     */                                                                                                              //\n                                                                                                                     //\n  }], [{                                                                                                             //\n    key: \"emptyCursor\",                                                                                              //\n    get: function () {                                                                                               //\n      function get() {                                                                                               //\n        return { fetch: function () {                                                                                // 82\n            function fetch() {                                                                                       // 82\n              return [];                                                                                             //\n            }                                                                                                        //\n                                                                                                                     //\n            return fetch;                                                                                            //\n          }(), observe: function () {                                                                                //\n            function observe() {                                                                                     // 82\n              return { stop: function () {                                                                           // 82\n                  function stop() {                                                                                  // 82\n                    return null;                                                                                     //\n                  }                                                                                                  //\n                                                                                                                     //\n                  return stop;                                                                                       //\n                }() };                                                                                               //\n            }                                                                                                        //\n                                                                                                                     //\n            return observe;                                                                                          //\n          }(), stop: function () {                                                                                   //\n            function stop() {}                                                                                       // 82\n                                                                                                                     //\n            return stop;                                                                                             //\n          }() };                                                                                                     //\n      }                                                                                                              //\n                                                                                                                     //\n      return get;                                                                                                    //\n    }()                                                                                                              //\n  }]);                                                                                                               //\n  return Cursor;                                                                                                     //\n}();                                                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"search-collection.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/createClass\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/core/search-collection.js                                                            //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nvar _createClass2 = require('babel-runtime/helpers/createClass');                                                    //\n                                                                                                                     //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                           //\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * A search collection represents a reactive collection on the client,                                               //\n * which is used by the ReactiveEngine for searching.                                                                //\n *                                                                                                                   //\n * @type {SearchCollection}                                                                                          //\n */                                                                                                                  //\nSearchCollection = function () {                                                                                     // 7\n  /**                                                                                                                //\n   * Constructor                                                                                                     //\n   *                                                                                                                 //\n   * @param {Object}         indexConfiguration Index configuration                                                  //\n   * @param {ReactiveEngine} engine             Reactive Engine                                                      //\n   *                                                                                                                 //\n   * @constructor                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n  function SearchCollection(indexConfiguration, engine) {                                                            // 16\n    (0, _classCallCheck3['default'])(this, SearchCollection);                                                        //\n                                                                                                                     //\n    check(indexConfiguration, Object);                                                                               // 17\n    check(indexConfiguration.name, Match.OneOf(String, null));                                                       // 18\n                                                                                                                     //\n    if (!(engine instanceof ReactiveEngine)) {                                                                       // 20\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');                      // 21\n    }                                                                                                                //\n                                                                                                                     //\n    this._indexConfiguration = indexConfiguration;                                                                   // 24\n    this._name = indexConfiguration.name + '/easySearch';                                                            // 25\n    this._engine = engine;                                                                                           // 26\n                                                                                                                     //\n    if (Meteor.isClient) {                                                                                           // 28\n      this._collection = new Meteor.Collection(this._name);                                                          // 29\n    } else if (Meteor.isServer) {                                                                                    //\n      this._setUpPublication();                                                                                      // 31\n    }                                                                                                                //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Get name                                                                                                        //\n   *                                                                                                                 //\n   * @returns {String}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Find documents on the client.                                                                                   //\n   *                                                                                                                 //\n   * @param {Object} searchDefinition Search definition                                                              //\n   * @param {Object} options          Options                                                                        //\n   *                                                                                                                 //\n   * @returns {Cursor}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  SearchCollection.prototype.find = function () {                                                                    // 7\n    function find(searchDefinition, options) {                                                                       //\n      if (!Meteor.isClient) {                                                                                        // 62\n        throw new Error('find can only be used on client');                                                          // 63\n      }                                                                                                              //\n                                                                                                                     //\n      var publishHandle = Meteor.subscribe(this.name, searchDefinition, options);                                    // 66\n                                                                                                                     //\n      var count = this._getCount(searchDefinition);                                                                  // 68\n      var mongoCursor = this._getMongoCursor(searchDefinition, options);                                             // 69\n                                                                                                                     //\n      if (!_.isNumber(count)) {                                                                                      // 71\n        return new Cursor(mongoCursor, 0, false);                                                                    // 72\n      }                                                                                                              //\n                                                                                                                     //\n      return new Cursor(mongoCursor, count, true, publishHandle);                                                    // 75\n    }                                                                                                                //\n                                                                                                                     //\n    return find;                                                                                                     //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Get the count of the cursor.                                                                                    //\n   *                                                                                                                 //\n   * @params {Object} searchDefinition Search definition                                                             //\n   *                                                                                                                 //\n   * @returns {Cursor.count}                                                                                         //\n   *                                                                                                                 //\n   * @private                                                                                                        //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  SearchCollection.prototype._getCount = function () {                                                               // 7\n    function _getCount(searchDefinition) {                                                                           //\n      var countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));                     // 88\n                                                                                                                     //\n      if (countDoc) {                                                                                                // 90\n        return countDoc.count;                                                                                       // 91\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return _getCount;                                                                                                //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Get the mongo cursor.                                                                                           //\n   *                                                                                                                 //\n   * @param {Object} searchDefinition Search definition                                                              //\n   * @param {Object} options          Search options                                                                 //\n   *                                                                                                                 //\n   * @returns {Cursor}                                                                                               //\n   * @private                                                                                                        //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  SearchCollection.prototype._getMongoCursor = function () {                                                         // 7\n    function _getMongoCursor(searchDefinition, options) {                                                            //\n      var _this = this;                                                                                              //\n                                                                                                                     //\n      return this._collection.find({ __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options.props) }, {\n        transform: function () {                                                                                     // 108\n          function transform(doc) {                                                                                  // 108\n            delete doc.__searchDefinition;                                                                           // 109\n            delete doc.__searchOptions;                                                                              // 110\n            delete doc.__sortPosition;                                                                               // 111\n                                                                                                                     //\n            doc = _this.engine.config.transform(doc);                                                                // 113\n                                                                                                                     //\n            return doc;                                                                                              // 115\n          }                                                                                                          //\n                                                                                                                     //\n          return transform;                                                                                          //\n        }(),                                                                                                         //\n        sort: ['__sortPosition']                                                                                     // 117\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return _getMongoCursor;                                                                                          //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return a unique document id for publication.                                                                    //\n   *                                                                                                                 //\n   * @param {Document} doc                                                                                           //\n   *                                                                                                                 //\n   * @returns string                                                                                                 //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  SearchCollection.prototype.generateId = function () {                                                              // 7\n    function generateId(doc) {                                                                                       //\n      return doc._id + doc.__searchDefinition + doc.__searchOptions;                                                 // 130\n    }                                                                                                                //\n                                                                                                                     //\n    return generateId;                                                                                               //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Add custom fields to the given document                                                                         //\n   *                                                                                                                 //\n   * @param {Document} doc                                                                                           //\n   * @param {Object}   data                                                                                          //\n   * @returns {*}                                                                                                    //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  SearchCollection.prototype.addCustomFields = function () {                                                         // 7\n    function addCustomFields(doc, data) {                                                                            //\n      _.forEach(data, function (val, key) {                                                                          // 141\n        doc['__' + key] = val;                                                                                       // 142\n      });                                                                                                            //\n                                                                                                                     //\n      return doc;                                                                                                    // 145\n    }                                                                                                                //\n                                                                                                                     //\n    return addCustomFields;                                                                                          //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Set up publication.                                                                                             //\n   *                                                                                                                 //\n   * @private                                                                                                        //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  SearchCollection.prototype._setUpPublication = function () {                                                       // 7\n    function _setUpPublication() {                                                                                   //\n      var collectionScope = this,                                                                                    // 154\n          collectionName = this.name;                                                                                //\n                                                                                                                     //\n      Meteor.publish(collectionName, function (searchDefinition, options) {                                          // 157\n        var _this2 = this;                                                                                           //\n                                                                                                                     //\n        check(searchDefinition, Match.OneOf(String, Object));                                                        // 158\n        check(options, Object);                                                                                      // 159\n                                                                                                                     //\n        var definitionString = JSON.stringify(searchDefinition),                                                     // 161\n            optionsString = JSON.stringify(options.props);                                                           //\n                                                                                                                     //\n        options.userId = this.userId;                                                                                // 164\n        options.publicationScope = this;                                                                             // 165\n                                                                                                                     //\n        if (!collectionScope._indexConfiguration.permission(options)) {                                              // 167\n          throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");                         // 168\n        }                                                                                                            //\n                                                                                                                     //\n        collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);              // 171\n                                                                                                                     //\n        var cursor = collectionScope.engine.search(searchDefinition, {                                               // 173\n          search: options,                                                                                           // 174\n          index: collectionScope._indexConfiguration                                                                 // 175\n        });                                                                                                          //\n                                                                                                                     //\n        var count = cursor.count();                                                                                  // 178\n                                                                                                                     //\n        this.added(collectionName, 'searchCount' + definitionString, { count: count });                              // 180\n                                                                                                                     //\n        var resultsHandle = cursor.mongoCursor.observe({                                                             // 182\n          addedAt: function () {                                                                                     // 183\n            function addedAt(doc, atIndex, before) {                                                                 // 183\n              doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);                    // 184\n              doc = collectionScope.addCustomFields(doc, {                                                           // 185\n                searchDefinition: definitionString,                                                                  // 186\n                searchOptions: optionsString,                                                                        // 187\n                sortPosition: atIndex,                                                                               // 188\n                originalId: doc._id                                                                                  // 189\n              });                                                                                                    //\n                                                                                                                     //\n              _this2.added(collectionName, collectionScope.generateId(doc), doc);                                    // 192\n            }                                                                                                        //\n                                                                                                                     //\n            return addedAt;                                                                                          //\n          }(),                                                                                                       //\n          changedAt: function () {                                                                                   // 194\n            function changedAt(doc, oldDoc, atIndex) {                                                               // 194\n              doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);                  // 195\n              doc = collectionScope.addCustomFields(doc, {                                                           // 196\n                searchDefinition: definitionString,                                                                  // 197\n                searchOptions: optionsString,                                                                        // 198\n                sortPosition: atIndex,                                                                               // 199\n                originalId: doc._id                                                                                  // 200\n              });                                                                                                    //\n                                                                                                                     //\n              _this2.changed(collectionName, collectionScope.generateId(doc), doc);                                  // 203\n            }                                                                                                        //\n                                                                                                                     //\n            return changedAt;                                                                                        //\n          }(),                                                                                                       //\n          movedTo: function () {                                                                                     // 205\n            function movedTo(doc, fromIndex, toIndex, before) {                                                      // 205\n              doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);         // 206\n              doc = collectionScope.addCustomFields(doc, {                                                           // 207\n                searchDefinition: definitionString,                                                                  // 208\n                searchOptions: optionsString,                                                                        // 209\n                sortPosition: toIndex                                                                                // 210\n              });                                                                                                    //\n                                                                                                                     //\n              var beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);                        // 213\n                                                                                                                     //\n              if (beforeDoc) {                                                                                       // 215\n                beforeDoc = collectionScope.addCustomFields(beforeDoc, {                                             // 216\n                  searchDefinition: definitionString,                                                                // 217\n                  searchOptions: optionsString,                                                                      // 218\n                  sortPosition: fromIndex                                                                            // 219\n                });                                                                                                  //\n                _this2.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);                    // 221\n              }                                                                                                      //\n                                                                                                                     //\n              _this2.changed(collectionName, collectionScope.generateId(doc), doc);                                  // 224\n            }                                                                                                        //\n                                                                                                                     //\n            return movedTo;                                                                                          //\n          }(),                                                                                                       //\n          removedAt: function () {                                                                                   // 226\n            function removedAt(doc, atIndex) {                                                                       // 226\n              doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);                          // 227\n              doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n              _this2.removed(collectionName, collectionScope.generateId(doc));                                       // 229\n            }                                                                                                        //\n                                                                                                                     //\n            return removedAt;                                                                                        //\n          }()                                                                                                        //\n        });                                                                                                          //\n                                                                                                                     //\n        this.onStop(function () {                                                                                    // 233\n          resultsHandle.stop();                                                                                      // 234\n        });                                                                                                          //\n                                                                                                                     //\n        this.ready();                                                                                                // 237\n      });                                                                                                            //\n    }                                                                                                                //\n                                                                                                                     //\n    return _setUpPublication;                                                                                        //\n  }();                                                                                                               //\n                                                                                                                     //\n  (0, _createClass3['default'])(SearchCollection, [{                                                                 //\n    key: 'name',                                                                                                     //\n    get: function () {                                                                                               //\n      function get() {                                                                                               //\n        return this._name;                                                                                           // 41\n      }                                                                                                              //\n                                                                                                                     //\n      return get;                                                                                                    //\n    }()                                                                                                              //\n                                                                                                                     //\n    /**                                                                                                              //\n     * Get engine                                                                                                    //\n     *                                                                                                               //\n     * @returns {ReactiveEngine}                                                                                     //\n     */                                                                                                              //\n                                                                                                                     //\n  }, {                                                                                                               //\n    key: 'engine',                                                                                                   //\n    get: function () {                                                                                               //\n      function get() {                                                                                               //\n        return this._engine;                                                                                         // 50\n      }                                                                                                              //\n                                                                                                                     //\n      return get;                                                                                                    //\n    }()                                                                                                              //\n  }]);                                                                                                               //\n  return SearchCollection;                                                                                           //\n}();                                                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"engines\":{\"mongo-db.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/engines/mongo-db.js                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                        //\n                                                                                                                     //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                               //\n                                                                                                                     //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                          //\n                                                                                                                     //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                 //\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications       //\n * are handled within the Engine.                                                                                    //\n *                                                                                                                   //\n * @type {MongoDBEngine}                                                                                             //\n */                                                                                                                  //\nMongoDBEngine = function (_ReactiveEngine) {                                                                         // 7\n  (0, _inherits3['default'])(MongoDBEngine, _ReactiveEngine);                                                        //\n                                                                                                                     //\n  function MongoDBEngine() {                                                                                         //\n    (0, _classCallCheck3['default'])(this, MongoDBEngine);                                                           //\n    return (0, _possibleConstructorReturn3['default'])(this, _ReactiveEngine.apply(this, arguments));                //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoDBEngine.prototype.defaultConfiguration = function () {                                                       //\n    function defaultConfiguration() {                                                                                //\n      return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _ReactiveEngine.prototype.defaultConfiguration.call(this));\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.                  //\n   *                                                                                                                 //\n   * @param {Object} engineScope Scope of the engine                                                                 //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  MongoDBEngine.defaultMongoConfiguration = function () {                                                            // 7\n    function defaultMongoConfiguration(engineScope) {                                                                //\n      return {                                                                                                       // 25\n        aggregation: '$or',                                                                                          // 26\n        selector: function () {                                                                                      // 27\n          function selector(searchObject, options, aggregation) {                                                    //\n            var selector = {};                                                                                       // 28\n                                                                                                                     //\n            selector[aggregation] = [];                                                                              // 30\n                                                                                                                     //\n            _.each(searchObject, function (searchString, field) {                                                    // 32\n              var fieldSelector = engineScope.callConfigMethod('selectorPerField', field, searchString, options);    // 33\n                                                                                                                     //\n              if (fieldSelector) {                                                                                   // 37\n                selector[aggregation].push(fieldSelector);                                                           // 38\n              }                                                                                                      //\n            });                                                                                                      //\n                                                                                                                     //\n            return selector;                                                                                         // 42\n          }                                                                                                          //\n                                                                                                                     //\n          return selector;                                                                                           //\n        }(),                                                                                                         //\n        selectorPerField: function () {                                                                              // 44\n          function selectorPerField(field, searchString) {                                                           //\n            var selector = {};                                                                                       // 45\n                                                                                                                     //\n            selector[field] = { '$regex': '.*' + searchString + '.*', '$options': 'i' };                             // 47\n                                                                                                                     //\n            return selector;                                                                                         // 49\n          }                                                                                                          //\n                                                                                                                     //\n          return selectorPerField;                                                                                   //\n        }(),                                                                                                         //\n        sort: function () {                                                                                          // 51\n          function sort(searchObject, options) {                                                                     //\n            return options.index.fields;                                                                             // 52\n          }                                                                                                          //\n                                                                                                                     //\n          return sort;                                                                                               //\n        }()                                                                                                          //\n      };                                                                                                             //\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultMongoConfiguration;                                                                                //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return the find options for the mongo find query.                                                               //\n   *                                                                                                                 //\n   * @param {String} searchDefinition Search definition                                                              //\n   * @param {Object} options          Search and index options                                                       //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  MongoDBEngine.prototype.getFindOptions = function () {                                                             // 7\n    function getFindOptions(searchDefinition, options) {                                                             //\n      return {                                                                                                       // 64\n        sort: this.callConfigMethod('sort', searchDefinition, options),                                              // 65\n        limit: options.search.limit,                                                                                 // 66\n        skip: options.search.skip,                                                                                   // 67\n        fields: this.callConfigMethod('fields', searchDefinition, options)                                           // 68\n      };                                                                                                             //\n    }                                                                                                                //\n                                                                                                                     //\n    return getFindOptions;                                                                                           //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return the reactive search cursor.                                                                              //\n   *                                                                                                                 //\n   * @param {String} searchDefinition Search definition                                                              //\n   * @param {Object} options          Search and index options                                                       //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  MongoDBEngine.prototype.getSearchCursor = function () {                                                            // 7\n    function getSearchCursor(searchDefinition, options) {                                                            //\n      var selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),          // 79\n          findOptions = this.getFindOptions(searchDefinition, options),                                              //\n          collection = options.index.collection;                                                                     //\n                                                                                                                     //\n      check(options, Object);                                                                                        // 83\n      check(selector, Object);                                                                                       // 84\n      check(findOptions, Object);                                                                                    // 85\n                                                                                                                     //\n      return new Cursor(collection.find(selector, findOptions), collection.find(selector).count());                  // 87\n    }                                                                                                                //\n                                                                                                                     //\n    return getSearchCursor;                                                                                          //\n  }();                                                                                                               //\n                                                                                                                     //\n  return MongoDBEngine;                                                                                              //\n}(ReactiveEngine);                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"minimongo.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/engines/minimongo.js                                                                 //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                        //\n                                                                                                                     //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                               //\n                                                                                                                     //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                          //\n                                                                                                                     //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                 //\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * The MinimongEngine lets you search the index on the client-side.                                                  //\n *                                                                                                                   //\n * @type {MinimongoEngine}                                                                                           //\n */                                                                                                                  //\nMinimongoEngine = function (_Engine) {                                                                               // 6\n  (0, _inherits3['default'])(MinimongoEngine, _Engine);                                                              //\n                                                                                                                     //\n  function MinimongoEngine() {                                                                                       //\n    (0, _classCallCheck3['default'])(this, MinimongoEngine);                                                         //\n    return (0, _possibleConstructorReturn3['default'])(this, _Engine.apply(this, arguments));                        //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  MinimongoEngine.prototype.defaultConfiguration = function () {                                                     //\n    function defaultConfiguration() {                                                                                //\n      return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _Engine.prototype.defaultConfiguration.call(this));\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Search the index.                                                                                               //\n   *                                                                                                                 //\n   * @param {Object} searchDefinition Search definition                                                              //\n   * @param {Object} options          Object of options                                                              //\n   *                                                                                                                 //\n   * @returns {cursor}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  MinimongoEngine.prototype.search = function () {                                                                   // 6\n    function search(searchDefinition, options) {                                                                     //\n      if (!Meteor.isClient) {                                                                                        // 25\n        throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');                           // 26\n      }                                                                                                              //\n                                                                                                                     //\n      searchDefinition = this.transformSearchDefinition(searchDefinition, options);                                  // 29\n                                                                                                                     //\n      // check() calls are in getSearchCursor method                                                                 //\n      return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);                       // 24\n    }                                                                                                                //\n                                                                                                                     //\n    return search;                                                                                                   //\n  }();                                                                                                               //\n                                                                                                                     //\n  return MinimongoEngine;                                                                                            //\n}(Engine);                                                                                                           //\n                                                                                                                     //\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;                              // 36\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;            // 37\n                                                                                                                     //\nMinimongoEngine.prototype.getFindOptions = function () {                                                             // 39\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             //\n    args[_key] = arguments[_key];                                                                                    //\n  }                                                                                                                  //\n                                                                                                                     //\n  var findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);                                        // 40\n                                                                                                                     //\n  findOptions.transform = this.config.transform;                                                                     // 42\n                                                                                                                     //\n  return findOptions;                                                                                                // 44\n};                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mongo-text-index.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/engines/mongo-text-index.js                                                          //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                              //\n                                                                                                                     //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //\n                                                                                                                     //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                        //\n                                                                                                                     //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                               //\n                                                                                                                     //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                          //\n                                                                                                                     //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                 //\n                                                                                                                     //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                    //\n                                                                                                                     //\n/**                                                                                                                  //\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.                                       //\n *                                                                                                                   //\n * @type {MongoTextIndexEngine}                                                                                      //\n */                                                                                                                  //\nMongoTextIndexEngine = function (_ReactiveEngine) {                                                                  // 6\n  (0, _inherits3['default'])(MongoTextIndexEngine, _ReactiveEngine);                                                 //\n                                                                                                                     //\n  function MongoTextIndexEngine() {                                                                                  //\n    (0, _classCallCheck3['default'])(this, MongoTextIndexEngine);                                                    //\n    return (0, _possibleConstructorReturn3['default'])(this, _ReactiveEngine.apply(this, arguments));                //\n  }                                                                                                                  //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Return default configuration.                                                                                   //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n  MongoTextIndexEngine.prototype.defaultConfiguration = function () {                                                //\n    function defaultConfiguration() {                                                                                //\n      var mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);                                        // 13\n                                                                                                                     //\n      mongoConfiguration.selector = function (searchString) {                                                        // 15\n        if (searchString.trim()) {                                                                                   // 16\n          return { $text: { $search: searchString } };                                                               // 17\n        }                                                                                                            //\n                                                                                                                     //\n        return {};                                                                                                   // 20\n      };                                                                                                             //\n                                                                                                                     //\n      return _.defaults({}, mongoConfiguration, _ReactiveEngine.prototype.defaultConfiguration.call(this));          // 23\n    }                                                                                                                //\n                                                                                                                     //\n    return defaultConfiguration;                                                                                     //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Setup the index on creation.                                                                                    //\n   *                                                                                                                 //\n   * @param {Object} indexConfig Index configuration                                                                 //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  MongoTextIndexEngine.prototype.onIndexCreate = function () {                                                       // 6\n    function onIndexCreate(indexConfig) {                                                                            //\n      _ReactiveEngine.prototype.onIndexCreate.call(this, indexConfig);                                               // 32\n                                                                                                                     //\n      if (Meteor.isServer) {                                                                                         // 34\n        (function () {                                                                                               //\n          var textIndexesConfig = {};                                                                                // 35\n                                                                                                                     //\n          _.each(indexConfig.fields, function (field) {                                                              // 37\n            textIndexesConfig[field] = 'text';                                                                       // 38\n          });                                                                                                        //\n                                                                                                                     //\n          if (indexConfig.weights) {                                                                                 // 41\n            textIndexesConfig.weights = options.weights();                                                           // 42\n          }                                                                                                          //\n                                                                                                                     //\n          indexConfig.collection._ensureIndex(textIndexesConfig);                                                    // 45\n        })();                                                                                                        //\n      }                                                                                                              //\n    }                                                                                                                //\n                                                                                                                     //\n    return onIndexCreate;                                                                                            //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Transform the search definition.                                                                                //\n   *                                                                                                                 //\n   * @param {String|Object} searchDefinition Search definition                                                       //\n   * @param {Object}        options          Search and index options                                                //\n   *                                                                                                                 //\n   * @returns {Object}                                                                                               //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  MongoTextIndexEngine.prototype.transformSearchDefinition = function () {                                           // 6\n    function transformSearchDefinition(searchDefinition, options) {                                                  //\n      return searchDefinition;                                                                                       // 58\n    }                                                                                                                //\n                                                                                                                     //\n    return transformSearchDefinition;                                                                                //\n  }();                                                                                                               //\n                                                                                                                     //\n  /**                                                                                                                //\n   * Check the given search parameter for validity                                                                   //\n   *                                                                                                                 //\n   * @param search                                                                                                   //\n   */                                                                                                                //\n                                                                                                                     //\n                                                                                                                     //\n  MongoTextIndexEngine.prototype.checkSearchParam = function () {                                                    // 6\n    function checkSearchParam(search) {                                                                              //\n      check(search, String);                                                                                         // 67\n    }                                                                                                                //\n                                                                                                                     //\n    return checkSearchParam;                                                                                         //\n  }();                                                                                                               //\n                                                                                                                     //\n  return MongoTextIndexEngine;                                                                                       //\n}(ReactiveEngine);                                                                                                   //\n                                                                                                                     //\n// Explicitely inherit getSearchCursor method functionality                                                          //\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;                            // 72\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;                              // 73\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"globals.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/easysearch_core/lib/globals.js                                                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nEasySearch = {                                                                                                       // 1\n  // Core                                                                                                            //\n  Index: Index,                                                                                                      // 3\n  Engine: Engine,                                                                                                    // 4\n  ReactiveEngine: ReactiveEngine,                                                                                    // 5\n  Cursor: Cursor,                                                                                                    // 6\n  // Engines                                                                                                         //\n  MongoDB: MongoDBEngine,                                                                                            // 8\n  Minimongo: MinimongoEngine,                                                                                        // 9\n  MongoTextIndex: MongoTextIndexEngine                                                                               // 10\n};                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/index.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/engine.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/reactive-engine.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/cursor.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/search-collection.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/engines/mongo-db.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/engines/minimongo.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/engines/mongo-text-index.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/globals.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['easysearch:core'] = {}, {\n  EasySearch: EasySearch\n});\n\n})();\n","servePath":"/packages/easysearch_core.js","sourceMap":{"version":3,"sources":["/packages/easysearch:core/lib/core/index.js","/packages/easysearch:core/lib/core/engine.js","/packages/easysearch:core/lib/core/reactive-engine.js","/packages/easysearch:core/lib/core/cursor.js","/packages/easysearch:core/lib/core/search-collection.js","/packages/easysearch:core/lib/engines/mongo-db.js","/packages/easysearch:core/lib/engines/minimongo.js","/packages/easysearch:core/lib/engines/mongo-text-index.js","/packages/easysearch:core/lib/globals.js"],"names":[],"mappings":"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","file":"/packages/easysearch_core.js","sourcesContent":["/**\n * An Index represents the main entry point for searching with EasySearch. It relies on\n * the given engine to have the search functionality and defines the data that should be searchable.\n *\n * @type {Index}\n */\nIndex = class Index {\n  /**\n   * Constructor\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n  constructor(config) {\n    check(config, Object);\n    check(config.collection, Meteor.Collection);\n    check(config.fields, [String]);\n\n    if (!(config.engine instanceof Engine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');\n    }\n\n    if (!config.name)\n      config.name = (config.collection._name || '').toLowerCase();\n\n    this.config = _.extend(Index.defaultConfiguration, config);\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });\n\n    // Engine specific code on index creation\n    config.engine.onIndexCreate(this.config);\n  }\n\n  /**\n   * Default configuration for an index.\n   *\n   * @returns {Object}\n   */\n  static get defaultConfiguration() {\n    return {\n      permission: () => true,\n      defaultSearchOptions: {}\n    };\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object|String} searchDefinition Search definition\n   * @param {Object}        options          Options\n   *\n   * @returns {Cursor}\n   */\n  search(searchDefinition, options = {}) {\n    this.config.engine.checkSearchParam(searchDefinition, this.config);\n\n    check(options, {\n      limit: Match.Optional(Number),\n      skip: Match.Optional(Number),\n      props: Match.Optional(Object)\n    });\n\n    options = {\n      search: this._getSearchOptions(options),\n      index: this.config\n    };\n\n    if (!this.config.permission(options.search)) {\n      throw new Meteor.Error('not-allowed', \"Not allowed to search this index!\");\n    }\n\n    return this.config.engine.search(searchDefinition, options);\n  }\n\n  /**\n   * Returns the search options based on the given options.\n   *\n   * @param {Object} options Options to use\n   *\n   * @returns {Object}\n   */\n  _getSearchOptions(options) {\n    return _.defaults(( Meteor.userId ? { userId: Meteor.userId() } : {} ), options, this.defaultSearchOptions);\n  }\n};\n","/**\n * An Engine is the technology used for searching with EasySearch, with\n * customizable configuration to how it interacts with the data from the Index.\n *\n * @type {Engine}\n */\nEngine = class Engine {\n  /**\n   * Constructor\n   *\n   * @param {Object} config configuration\n   *\n   * @constructor\n   */\n  constructor(config = {}) {\n    if (this.constructor === Engine) {\n      throw new Error('Cannot initialize instance of Engine');\n    }\n\n    if (!_.isFunction(this.search)) {\n      throw new Error('Engine needs to implement search method');\n    }\n\n    this.config = _.defaults({}, config, this.defaultConfiguration());\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return {};\n  }\n\n  /**\n   * Call a configuration method with the engine scope.\n   *\n   * @param {String} methodName Method name\n   * @param {Object} args       Arguments for the method\n   *\n   * @returns {*}\n   */\n  callConfigMethod(methodName, ...args) {\n    check(methodName, String);\n\n    let func = this.config[methodName];\n\n    if (func) {\n      return func.apply(this, args);\n    }\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n\n  /**\n   *Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuraction\n   */\n  onIndexCreate(indexConfig) {\n    if (!indexConfig.allowedFields) {\n      indexConfig.allowedFields = indexConfig.fields;\n    }\n  }\n};\n","/**\n * A ReactiveEngine handles the reactive logic, such as subscribing\n * and publishing documents into a self contained collection.\n *\n * @type {ReactiveEngine}\n */\nReactiveEngine = class ReactiveEngine extends Engine {\n  /**\n   * Constructor.\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n  constructor(config) {\n    super(config);\n\n    if (this === this.constructor) {\n      throw new Error('Cannot initialize instance of ReactiveEngine');\n    }\n\n    if (!_.isFunction(this.getSearchCursor)) {\n      throw new Error('Reactive engine needs to implement getSearchCursor method');\n    }\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, {\n      transform: (doc) => doc,\n      beforePublish: (event, doc) => doc\n    }, super.defaultConfiguration());\n  }\n\n  /**\n   * Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n  onIndexCreate(indexConfig) {\n    super.onIndexCreate(indexConfig);\n    indexConfig.searchCollection = new SearchCollection(indexConfig, this);\n    indexConfig.mongoCollection = indexConfig.searchCollection._collection;\n  }\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n  transformSearchDefinition(searchDefinition, options) {\n    if (_.isString(searchDefinition)) {\n      let obj = {};\n\n      _.each(options.index.fields, function (field) {\n        obj[field] = searchDefinition;\n      });\n\n      searchDefinition = obj;\n    }\n\n    return searchDefinition;\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   * @param indexOptions\n   */\n  checkSearchParam(search, indexOptions) {\n    check(search, Match.OneOf(String, Object));\n\n    if (_.isObject(search)) {\n      _.each(search, function (val, field) {\n        check(val, String);\n\n        if (-1 === _.indexOf(indexOptions.allowedFields, field)) {\n          throw new Meteor.Error(`Not allowed to search over field \"${field}\"`);\n        }\n      });\n    }\n  }\n\n  /**\n   * Reactively search on the collection.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  search(searchDefinition, options) {\n    if (Meteor.isClient) {\n      return options.index.searchCollection.find(searchDefinition, options.search);\n    } else {\n      return this.getSearchCursor(\n        this.transformSearchDefinition(searchDefinition, options),\n        options\n      );\n    }\n  }\n};\n","/**\n * A Cursor represents a pointer to the search results. Since it's specific\n * to EasySearch it can also be used to check for valid return values.\n *\n * @type {Cursor}\n */\nCursor = class Cursor {\n  /**\n   * Constructor\n   *\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor\n   * @param {Number}       count         Count of all documents found\n   * @param {Boolean}      isReady       Cursor is ready\n   * @param {Object}       publishHandle Publish handle to stop if on client\n   *\n   * @constructor\n   *\n   */\n  constructor(mongoCursor, count, isReady = true, publishHandle = null) {\n    check(mongoCursor.fetch, Function);\n    check(count, Number);\n    check(isReady, Match.Optional(Boolean));\n    check(publishHandle, Match.OneOf(null, Object));\n\n    this._mongoCursor = mongoCursor;\n    this._count = count;\n    this._isReady = isReady;\n    this._publishHandle = publishHandle;\n  }\n\n  /**\n   * Fetch the search results.\n   *\n   * @returns {[Object]}\n   */\n  fetch() {\n    return this._mongoCursor.fetch();\n  }\n\n /**\n  * Stop the subscription handle associated with the cursor.\n  */\n  stop() {\n    if (this._publishHandle) {\n      return this._publishHandle.stop();\n    }\n  }\n\n  /**\n   * Return count of all documents found\n   *\n   * @returns {Number}\n   */\n  count() {\n    return this._count;\n  }\n\n  /**\n   * Return if the cursor is ready.\n   *\n   * @returns {Boolean}\n   */\n  isReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Return the raw mongo cursor.\n   *\n   * @returns {Mongo.Cursor}\n   */\n  get mongoCursor() {\n    return this._mongoCursor;\n  }\n\n  /**\n   * Return a fake empty cursor, without data.\n   *\n   * @returns {Object}\n   */\n  static get emptyCursor() {\n    return { fetch: () => [], observe: () => { return { stop: () => null }; }, stop: () => {} };\n  }\n};\n","/**\n * A search collection represents a reactive collection on the client,\n * which is used by the ReactiveEngine for searching.\n *\n * @type {SearchCollection}\n */\nSearchCollection = class SearchCollection {\n  /**\n   * Constructor\n   *\n   * @param {Object}         indexConfiguration Index configuration\n   * @param {ReactiveEngine} engine             Reactive Engine\n   *\n   * @constructor\n   */\n  constructor(indexConfiguration, engine) {\n    check(indexConfiguration, Object);\n    check(indexConfiguration.name, Match.OneOf(String, null));\n\n    if (!(engine instanceof ReactiveEngine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');\n    }\n\n    this._indexConfiguration = indexConfiguration;\n    this._name = `${indexConfiguration.name}/easySearch`;\n    this._engine = engine;\n\n    if (Meteor.isClient) {\n      this._collection = new Meteor.Collection(this._name);\n    } else if (Meteor.isServer) {\n      this._setUpPublication();\n    }\n  }\n\n  /**\n   * Get name\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Get engine\n   *\n   * @returns {ReactiveEngine}\n   */\n  get engine() {\n    return this._engine;\n  }\n\n  /**\n   * Find documents on the client.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  find(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Error('find can only be used on client');\n    }\n\n    let publishHandle = Meteor.subscribe(this.name, searchDefinition, options);\n\n    let count = this._getCount(searchDefinition);\n    let mongoCursor = this._getMongoCursor(searchDefinition, options);\n\n    if (!_.isNumber(count)) {\n      return new Cursor(mongoCursor, 0, false);\n    }\n\n    return new Cursor(mongoCursor, count, true, publishHandle);\n  }\n\n  /**\n   * Get the count of the cursor.\n   *\n   * @params {Object} searchDefinition Search definition\n   *\n   * @returns {Cursor.count}\n   *\n   * @private\n   */\n  _getCount(searchDefinition) {\n    let countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));\n\n    if (countDoc) {\n      return countDoc.count;\n    }\n  }\n\n  /**\n   * Get the mongo cursor.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Search options\n   *\n   * @returns {Cursor}\n   * @private\n   */\n  _getMongoCursor(searchDefinition, options) {\n    return this._collection.find(\n      { __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options.props) },\n      {\n        transform: (doc) => {\n          delete doc.__searchDefinition;\n          delete doc.__searchOptions;\n          delete doc.__sortPosition;\n\n          doc = this.engine.config.transform(doc);\n\n          return doc;\n        },\n        sort: ['__sortPosition']\n      }\n    );\n  }\n\n  /**\n   * Return a unique document id for publication.\n   *\n   * @param {Document} doc\n   *\n   * @returns string\n   */\n  generateId(doc) {\n    return doc._id + doc.__searchDefinition + doc.__searchOptions;\n  }\n\n  /**\n   * Add custom fields to the given document\n   *\n   * @param {Document} doc\n   * @param {Object}   data\n   * @returns {*}\n   */\n  addCustomFields(doc, data) {\n    _.forEach(data, function (val, key) {\n      doc['__' + key] = val;\n    });\n\n    return doc;\n  }\n\n  /**\n   * Set up publication.\n   *\n   * @private\n   */\n  _setUpPublication() {\n    var collectionScope = this,\n      collectionName = this.name;\n\n    Meteor.publish(collectionName, function (searchDefinition, options) {\n      check(searchDefinition, Match.OneOf(String, Object));\n      check(options, Object);\n\n      let definitionString = JSON.stringify(searchDefinition),\n        optionsString = JSON.stringify(options.props);\n\n      options.userId = this.userId;\n      options.publicationScope = this;\n\n      if (!collectionScope._indexConfiguration.permission(options)) {\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n      }\n\n      collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);\n\n      let cursor = collectionScope.engine.search(searchDefinition, {\n        search: options,\n        index: collectionScope._indexConfiguration\n      });\n\n      const count = cursor.count();\n\n      this.added(collectionName, 'searchCount' + definitionString, { count: count });\n\n      let resultsHandle = cursor.mongoCursor.observe({\n        addedAt: (doc, atIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.added(collectionName, collectionScope.generateId(doc), doc);\n        },\n        changedAt: (doc, oldDoc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc)\n        },\n        movedTo: (doc, fromIndex, toIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: toIndex\n          });\n\n          let beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);\n\n          if (beforeDoc) {\n            beforeDoc = collectionScope.addCustomFields(beforeDoc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: fromIndex\n            });\n            this.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);\n          }\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc);\n        },\n        removedAt: (doc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);\n          doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n          this.removed(collectionName, collectionScope.generateId(doc));\n        }\n      });\n\n      this.onStop(function () {\n        resultsHandle.stop();\n      });\n\n      this.ready();\n    });\n  }\n};\n","/**\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications\n * are handled within the Engine.\n *\n * @type {MongoDBEngine}\n */\nMongoDBEngine = class MongoDBEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.\n   *\n   * @param {Object} engineScope Scope of the engine\n   *\n   * @returns {Object}\n   */\n  static defaultMongoConfiguration(engineScope) {\n    return {\n      aggregation: '$or',\n      selector(searchObject, options, aggregation) {\n        let selector = {};\n\n        selector[aggregation] = [];\n\n        _.each(searchObject, (searchString, field) => {\n          let fieldSelector = engineScope.callConfigMethod(\n            'selectorPerField', field, searchString, options\n          );\n\n          if (fieldSelector) {\n            selector[aggregation].push(fieldSelector);\n          }\n        });\n\n        return selector;\n      },\n      selectorPerField(field, searchString) {\n        let selector = {};\n\n        selector[field] = { '$regex' : `.*${searchString}.*`, '$options' : 'i'};\n\n        return selector\n      },\n      sort(searchObject, options) {\n        return options.index.fields;\n      }\n    };\n  }\n\n  /**\n   * Return the find options for the mongo find query.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getFindOptions(searchDefinition, options) {\n    return {\n      sort: this.callConfigMethod('sort', searchDefinition, options),\n      limit: options.search.limit,\n      skip: options.search.skip,\n      fields: this.callConfigMethod('fields', searchDefinition, options)\n    };\n  }\n\n  /**\n   * Return the reactive search cursor.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getSearchCursor(searchDefinition, options) {\n    let selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),\n      findOptions = this.getFindOptions(searchDefinition, options),\n      collection = options.index.collection;\n\n    check(options, Object);\n    check(selector, Object);\n    check(findOptions, Object);\n\n    return new Cursor(\n      collection.find(selector, findOptions),\n      collection.find(selector).count()\n    );\n  }\n};\n","/**\n * The MinimongEngine lets you search the index on the client-side.\n *\n * @type {MinimongoEngine}\n */\nMinimongoEngine = class MinimongoEngine extends Engine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Object of options\n   *\n   * @returns {cursor}\n   */\n  search(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');\n    }\n\n    searchDefinition = this.transformSearchDefinition(searchDefinition, options);\n\n    // check() calls are in getSearchCursor method\n    return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);\n  }\n};\n\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;\n\nMinimongoEngine.prototype.getFindOptions = function (...args) {\n  let findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);\n\n  findOptions.transform = this.config.transform;\n\n  return findOptions;\n};\n","/**\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.\n *\n * @type {MongoTextIndexEngine}\n */\nMongoTextIndexEngine = class MongoTextIndexEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    let mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);\n\n    mongoConfiguration.selector = function (searchString) {\n      if (searchString.trim()) {\n        return { $text: { $search: searchString } };\n      }\n\n      return {};\n    };\n\n    return _.defaults({}, mongoConfiguration, super.defaultConfiguration());\n  }\n\n  /**\n   * Setup the index on creation.\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n  onIndexCreate(indexConfig) {\n    super.onIndexCreate(indexConfig);\n\n    if (Meteor.isServer) {\n      let textIndexesConfig = {};\n\n      _.each(indexConfig.fields, function (field) {\n        textIndexesConfig[field] = 'text';\n      });\n\n      if (indexConfig.weights) {\n        textIndexesConfig.weights = options.weights();\n      }\n\n      indexConfig.collection._ensureIndex(textIndexesConfig);\n    }\n  }\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n  transformSearchDefinition(searchDefinition, options) {\n    return searchDefinition;\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n};\n\n// Explicitely inherit getSearchCursor method functionality\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;\n","EasySearch = {\n  // Core\n  Index,\n  Engine,\n  ReactiveEngine,\n  Cursor,\n  // Engines\n  MongoDB: MongoDBEngine,\n  Minimongo: MinimongoEngine,\n  MongoTextIndex: MongoTextIndexEngine\n};\n"]}}]