[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\n\n/* Package-scope variables */\nvar __coffeescriptShare, ComputedField;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// packages/peerlibrary_computed-field/packages/peerlibrary_computed-fi //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n                                                                        //\n(function () {\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/peerlibrary:computed-field/lib.coffee.js                 //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                  \n\nComputedField = (function() {\n  function ComputedField(func, equalsFunc) {\n    var getter, handle, lastValue, startAutorun;\n    handle = null;\n    lastValue = null;\n    startAutorun = function() {\n      var originalStop;\n      handle = Tracker.autorun(function(computation) {\n        var value;\n        value = func();\n        if (!lastValue) {\n          lastValue = new ReactiveVar(value, equalsFunc);\n        } else {\n          lastValue.set(value);\n        }\n        return Tracker.afterFlush(function() {\n          if (!lastValue.dep.hasDependents()) {\n            return getter.stop();\n          }\n        });\n      });\n      if (handle.onStop) {\n        return handle.onStop(function() {\n          return handle = null;\n        });\n      } else {\n        originalStop = handle.stop;\n        return handle.stop = function() {\n          if (handle) {\n            originalStop.call(handle);\n          }\n          return handle = null;\n        };\n      }\n    };\n    startAutorun();\n    getter = function() {\n      getter.flush();\n      return lastValue.get();\n    };\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(getter, this.constructor.prototype);\n    } else {\n      getter.__proto__ = this.constructor.prototype;\n    }\n    getter.toString = function() {\n      return \"ComputedField{\" + (this()) + \"}\";\n    };\n    getter.apply = function() {\n      return getter();\n    };\n    getter.call = function() {\n      return getter();\n    };\n    getter.stop = function() {\n      if (handle != null) {\n        handle.stop();\n      }\n      return handle = null;\n    };\n    getter._isRunning = function() {\n      return !!handle;\n    };\n    getter.flush = function() {\n      return Tracker.nonreactive(function() {\n        if (handle) {\n          return handle._recompute();\n        } else {\n          return startAutorun();\n        }\n      });\n    };\n    return getter;\n  }\n\n  return ComputedField;\n\n})();\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n//////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['peerlibrary:computed-field'] = {}, {\n  ComputedField: ComputedField\n});\n\n})();\n","servePath":"/packages/peerlibrary_computed-field.js","sourceMap":{"version":3,"sources":["/packages/peerlibrary_computed-field/packages/peerlibrary_computed-field.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/peerlibrary_computed-field.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/peerlibrary:computed-field/lib.coffee.js                 //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                  \n\nComputedField = (function() {\n  function ComputedField(func, equalsFunc) {\n    var getter, handle, lastValue, startAutorun;\n    handle = null;\n    lastValue = null;\n    startAutorun = function() {\n      var originalStop;\n      handle = Tracker.autorun(function(computation) {\n        var value;\n        value = func();\n        if (!lastValue) {\n          lastValue = new ReactiveVar(value, equalsFunc);\n        } else {\n          lastValue.set(value);\n        }\n        return Tracker.afterFlush(function() {\n          if (!lastValue.dep.hasDependents()) {\n            return getter.stop();\n          }\n        });\n      });\n      if (handle.onStop) {\n        return handle.onStop(function() {\n          return handle = null;\n        });\n      } else {\n        originalStop = handle.stop;\n        return handle.stop = function() {\n          if (handle) {\n            originalStop.call(handle);\n          }\n          return handle = null;\n        };\n      }\n    };\n    startAutorun();\n    getter = function() {\n      getter.flush();\n      return lastValue.get();\n    };\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(getter, this.constructor.prototype);\n    } else {\n      getter.__proto__ = this.constructor.prototype;\n    }\n    getter.toString = function() {\n      return \"ComputedField{\" + (this()) + \"}\";\n    };\n    getter.apply = function() {\n      return getter();\n    };\n    getter.call = function() {\n      return getter();\n    };\n    getter.stop = function() {\n      if (handle != null) {\n        handle.stop();\n      }\n      return handle = null;\n    };\n    getter._isRunning = function() {\n      return !!handle;\n    };\n    getter.flush = function() {\n      return Tracker.nonreactive(function() {\n        if (handle) {\n          return handle._recompute();\n        } else {\n          return startAutorun();\n        }\n      });\n    };\n    return getter;\n  }\n\n  return ComputedField;\n\n})();\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]