[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar async;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/peerlibrary_async/packages/peerlibrary_async.js                                         //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/peerlibrary:async/async/lib/async.js                                            //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n/*!                                                                                         // 1\n * async                                                                                    // 2\n * https://github.com/caolan/async                                                          // 3\n *                                                                                          // 4\n * Copyright 2010-2014 Caolan McMahon                                                       // 5\n * Released under the MIT license                                                           // 6\n */                                                                                         // 7\n/*jshint onevar: false, indent:4 */                                                         // 8\n/*global setImmediate: false, setTimeout: false, console: false */                          // 9\n(function () {                                                                              // 10\n                                                                                            // 11\n    var async = {};                                                                         // 12\n                                                                                            // 13\n    // global on the server, window in the browser                                          // 14\n    var root, previous_async;                                                               // 15\n                                                                                            // 16\n    root = this;                                                                            // 17\n    if (root != null) {                                                                     // 18\n      previous_async = root.async;                                                          // 19\n    }                                                                                       // 20\n                                                                                            // 21\n    async.noConflict = function () {                                                        // 22\n        root.async = previous_async;                                                        // 23\n        return async;                                                                       // 24\n    };                                                                                      // 25\n                                                                                            // 26\n    function only_once(fn) {                                                                // 27\n        var called = false;                                                                 // 28\n        return function() {                                                                 // 29\n            if (called) throw new Error(\"Callback was already called.\");                    // 30\n            called = true;                                                                  // 31\n            fn.apply(root, arguments);                                                      // 32\n        }                                                                                   // 33\n    }                                                                                       // 34\n                                                                                            // 35\n    //// cross-browser compatiblity functions ////                                          // 36\n                                                                                            // 37\n    var _toString = Object.prototype.toString;                                              // 38\n                                                                                            // 39\n    var _isArray = Array.isArray || function (obj) {                                        // 40\n        return _toString.call(obj) === '[object Array]';                                    // 41\n    };                                                                                      // 42\n                                                                                            // 43\n    var _each = function (arr, iterator) {                                                  // 44\n        for (var i = 0; i < arr.length; i += 1) {                                           // 45\n            iterator(arr[i], i, arr);                                                       // 46\n        }                                                                                   // 47\n    };                                                                                      // 48\n                                                                                            // 49\n    var _map = function (arr, iterator) {                                                   // 50\n        if (arr.map) {                                                                      // 51\n            return arr.map(iterator);                                                       // 52\n        }                                                                                   // 53\n        var results = [];                                                                   // 54\n        _each(arr, function (x, i, a) {                                                     // 55\n            results.push(iterator(x, i, a));                                                // 56\n        });                                                                                 // 57\n        return results;                                                                     // 58\n    };                                                                                      // 59\n                                                                                            // 60\n    var _reduce = function (arr, iterator, memo) {                                          // 61\n        if (arr.reduce) {                                                                   // 62\n            return arr.reduce(iterator, memo);                                              // 63\n        }                                                                                   // 64\n        _each(arr, function (x, i, a) {                                                     // 65\n            memo = iterator(memo, x, i, a);                                                 // 66\n        });                                                                                 // 67\n        return memo;                                                                        // 68\n    };                                                                                      // 69\n                                                                                            // 70\n    var _keys = function (obj) {                                                            // 71\n        if (Object.keys) {                                                                  // 72\n            return Object.keys(obj);                                                        // 73\n        }                                                                                   // 74\n        var keys = [];                                                                      // 75\n        for (var k in obj) {                                                                // 76\n            if (obj.hasOwnProperty(k)) {                                                    // 77\n                keys.push(k);                                                               // 78\n            }                                                                               // 79\n        }                                                                                   // 80\n        return keys;                                                                        // 81\n    };                                                                                      // 82\n                                                                                            // 83\n    //// exported async module functions ////                                               // 84\n                                                                                            // 85\n    //// nextTick implementation with browser-compatible fallback ////                      // 86\n    if (typeof process === 'undefined' || !(process.nextTick)) {                            // 87\n        if (typeof setImmediate === 'function') {                                           // 88\n            async.nextTick = function (fn) {                                                // 89\n                // not a direct alias for IE10 compatibility                                // 90\n                setImmediate(fn);                                                           // 91\n            };                                                                              // 92\n            async.setImmediate = async.nextTick;                                            // 93\n        }                                                                                   // 94\n        else {                                                                              // 95\n            async.nextTick = function (fn) {                                                // 96\n                setTimeout(fn, 0);                                                          // 97\n            };                                                                              // 98\n            async.setImmediate = async.nextTick;                                            // 99\n        }                                                                                   // 100\n    }                                                                                       // 101\n    else {                                                                                  // 102\n        async.nextTick = process.nextTick;                                                  // 103\n        if (typeof setImmediate !== 'undefined') {                                          // 104\n            async.setImmediate = function (fn) {                                            // 105\n              // not a direct alias for IE10 compatibility                                  // 106\n              setImmediate(fn);                                                             // 107\n            };                                                                              // 108\n        }                                                                                   // 109\n        else {                                                                              // 110\n            async.setImmediate = async.nextTick;                                            // 111\n        }                                                                                   // 112\n    }                                                                                       // 113\n                                                                                            // 114\n    async.each = function (arr, iterator, callback) {                                       // 115\n        callback = callback || function () {};                                              // 116\n        if (!arr.length) {                                                                  // 117\n            return callback();                                                              // 118\n        }                                                                                   // 119\n        var completed = 0;                                                                  // 120\n        _each(arr, function (x) {                                                           // 121\n            iterator(x, only_once(done) );                                                  // 122\n        });                                                                                 // 123\n        function done(err) {                                                                // 124\n          if (err) {                                                                        // 125\n              callback(err);                                                                // 126\n              callback = function () {};                                                    // 127\n          }                                                                                 // 128\n          else {                                                                            // 129\n              completed += 1;                                                               // 130\n              if (completed >= arr.length) {                                                // 131\n                  callback();                                                               // 132\n              }                                                                             // 133\n          }                                                                                 // 134\n        }                                                                                   // 135\n    };                                                                                      // 136\n    async.forEach = async.each;                                                             // 137\n                                                                                            // 138\n    async.eachSeries = function (arr, iterator, callback) {                                 // 139\n        callback = callback || function () {};                                              // 140\n        if (!arr.length) {                                                                  // 141\n            return callback();                                                              // 142\n        }                                                                                   // 143\n        var completed = 0;                                                                  // 144\n        var iterate = function () {                                                         // 145\n            iterator(arr[completed], function (err) {                                       // 146\n                if (err) {                                                                  // 147\n                    callback(err);                                                          // 148\n                    callback = function () {};                                              // 149\n                }                                                                           // 150\n                else {                                                                      // 151\n                    completed += 1;                                                         // 152\n                    if (completed >= arr.length) {                                          // 153\n                        callback();                                                         // 154\n                    }                                                                       // 155\n                    else {                                                                  // 156\n                        iterate();                                                          // 157\n                    }                                                                       // 158\n                }                                                                           // 159\n            });                                                                             // 160\n        };                                                                                  // 161\n        iterate();                                                                          // 162\n    };                                                                                      // 163\n    async.forEachSeries = async.eachSeries;                                                 // 164\n                                                                                            // 165\n    async.eachLimit = function (arr, limit, iterator, callback) {                           // 166\n        var fn = _eachLimit(limit);                                                         // 167\n        fn.apply(null, [arr, iterator, callback]);                                          // 168\n    };                                                                                      // 169\n    async.forEachLimit = async.eachLimit;                                                   // 170\n                                                                                            // 171\n    var _eachLimit = function (limit) {                                                     // 172\n                                                                                            // 173\n        return function (arr, iterator, callback) {                                         // 174\n            callback = callback || function () {};                                          // 175\n            if (!arr.length || limit <= 0) {                                                // 176\n                return callback();                                                          // 177\n            }                                                                               // 178\n            var completed = 0;                                                              // 179\n            var started = 0;                                                                // 180\n            var running = 0;                                                                // 181\n                                                                                            // 182\n            (function replenish () {                                                        // 183\n                if (completed >= arr.length) {                                              // 184\n                    return callback();                                                      // 185\n                }                                                                           // 186\n                                                                                            // 187\n                while (running < limit && started < arr.length) {                           // 188\n                    started += 1;                                                           // 189\n                    running += 1;                                                           // 190\n                    iterator(arr[started - 1], function (err) {                             // 191\n                        if (err) {                                                          // 192\n                            callback(err);                                                  // 193\n                            callback = function () {};                                      // 194\n                        }                                                                   // 195\n                        else {                                                              // 196\n                            completed += 1;                                                 // 197\n                            running -= 1;                                                   // 198\n                            if (completed >= arr.length) {                                  // 199\n                                callback();                                                 // 200\n                            }                                                               // 201\n                            else {                                                          // 202\n                                replenish();                                                // 203\n                            }                                                               // 204\n                        }                                                                   // 205\n                    });                                                                     // 206\n                }                                                                           // 207\n            })();                                                                           // 208\n        };                                                                                  // 209\n    };                                                                                      // 210\n                                                                                            // 211\n                                                                                            // 212\n    var doParallel = function (fn) {                                                        // 213\n        return function () {                                                                // 214\n            var args = Array.prototype.slice.call(arguments);                               // 215\n            return fn.apply(null, [async.each].concat(args));                               // 216\n        };                                                                                  // 217\n    };                                                                                      // 218\n    var doParallelLimit = function(limit, fn) {                                             // 219\n        return function () {                                                                // 220\n            var args = Array.prototype.slice.call(arguments);                               // 221\n            return fn.apply(null, [_eachLimit(limit)].concat(args));                        // 222\n        };                                                                                  // 223\n    };                                                                                      // 224\n    var doSeries = function (fn) {                                                          // 225\n        return function () {                                                                // 226\n            var args = Array.prototype.slice.call(arguments);                               // 227\n            return fn.apply(null, [async.eachSeries].concat(args));                         // 228\n        };                                                                                  // 229\n    };                                                                                      // 230\n                                                                                            // 231\n                                                                                            // 232\n    var _asyncMap = function (eachfn, arr, iterator, callback) {                            // 233\n        arr = _map(arr, function (x, i) {                                                   // 234\n            return {index: i, value: x};                                                    // 235\n        });                                                                                 // 236\n        if (!callback) {                                                                    // 237\n            eachfn(arr, function (x, callback) {                                            // 238\n                iterator(x.value, function (err) {                                          // 239\n                    callback(err);                                                          // 240\n                });                                                                         // 241\n            });                                                                             // 242\n        } else {                                                                            // 243\n            var results = [];                                                               // 244\n            eachfn(arr, function (x, callback) {                                            // 245\n                iterator(x.value, function (err, v) {                                       // 246\n                    results[x.index] = v;                                                   // 247\n                    callback(err);                                                          // 248\n                });                                                                         // 249\n            }, function (err) {                                                             // 250\n                callback(err, results);                                                     // 251\n            });                                                                             // 252\n        }                                                                                   // 253\n    };                                                                                      // 254\n    async.map = doParallel(_asyncMap);                                                      // 255\n    async.mapSeries = doSeries(_asyncMap);                                                  // 256\n    async.mapLimit = function (arr, limit, iterator, callback) {                            // 257\n        return _mapLimit(limit)(arr, iterator, callback);                                   // 258\n    };                                                                                      // 259\n                                                                                            // 260\n    var _mapLimit = function(limit) {                                                       // 261\n        return doParallelLimit(limit, _asyncMap);                                           // 262\n    };                                                                                      // 263\n                                                                                            // 264\n    // reduce only has a series version, as doing reduce in parallel won't                  // 265\n    // work in many situations.                                                             // 266\n    async.reduce = function (arr, memo, iterator, callback) {                               // 267\n        async.eachSeries(arr, function (x, callback) {                                      // 268\n            iterator(memo, x, function (err, v) {                                           // 269\n                memo = v;                                                                   // 270\n                callback(err);                                                              // 271\n            });                                                                             // 272\n        }, function (err) {                                                                 // 273\n            callback(err, memo);                                                            // 274\n        });                                                                                 // 275\n    };                                                                                      // 276\n    // inject alias                                                                         // 277\n    async.inject = async.reduce;                                                            // 278\n    // foldl alias                                                                          // 279\n    async.foldl = async.reduce;                                                             // 280\n                                                                                            // 281\n    async.reduceRight = function (arr, memo, iterator, callback) {                          // 282\n        var reversed = _map(arr, function (x) {                                             // 283\n            return x;                                                                       // 284\n        }).reverse();                                                                       // 285\n        async.reduce(reversed, memo, iterator, callback);                                   // 286\n    };                                                                                      // 287\n    // foldr alias                                                                          // 288\n    async.foldr = async.reduceRight;                                                        // 289\n                                                                                            // 290\n    var _filter = function (eachfn, arr, iterator, callback) {                              // 291\n        var results = [];                                                                   // 292\n        arr = _map(arr, function (x, i) {                                                   // 293\n            return {index: i, value: x};                                                    // 294\n        });                                                                                 // 295\n        eachfn(arr, function (x, callback) {                                                // 296\n            iterator(x.value, function (v) {                                                // 297\n                if (v) {                                                                    // 298\n                    results.push(x);                                                        // 299\n                }                                                                           // 300\n                callback();                                                                 // 301\n            });                                                                             // 302\n        }, function (err) {                                                                 // 303\n            callback(_map(results.sort(function (a, b) {                                    // 304\n                return a.index - b.index;                                                   // 305\n            }), function (x) {                                                              // 306\n                return x.value;                                                             // 307\n            }));                                                                            // 308\n        });                                                                                 // 309\n    };                                                                                      // 310\n    async.filter = doParallel(_filter);                                                     // 311\n    async.filterSeries = doSeries(_filter);                                                 // 312\n    // select alias                                                                         // 313\n    async.select = async.filter;                                                            // 314\n    async.selectSeries = async.filterSeries;                                                // 315\n                                                                                            // 316\n    var _reject = function (eachfn, arr, iterator, callback) {                              // 317\n        var results = [];                                                                   // 318\n        arr = _map(arr, function (x, i) {                                                   // 319\n            return {index: i, value: x};                                                    // 320\n        });                                                                                 // 321\n        eachfn(arr, function (x, callback) {                                                // 322\n            iterator(x.value, function (v) {                                                // 323\n                if (!v) {                                                                   // 324\n                    results.push(x);                                                        // 325\n                }                                                                           // 326\n                callback();                                                                 // 327\n            });                                                                             // 328\n        }, function (err) {                                                                 // 329\n            callback(_map(results.sort(function (a, b) {                                    // 330\n                return a.index - b.index;                                                   // 331\n            }), function (x) {                                                              // 332\n                return x.value;                                                             // 333\n            }));                                                                            // 334\n        });                                                                                 // 335\n    };                                                                                      // 336\n    async.reject = doParallel(_reject);                                                     // 337\n    async.rejectSeries = doSeries(_reject);                                                 // 338\n                                                                                            // 339\n    var _detect = function (eachfn, arr, iterator, main_callback) {                         // 340\n        eachfn(arr, function (x, callback) {                                                // 341\n            iterator(x, function (result) {                                                 // 342\n                if (result) {                                                               // 343\n                    main_callback(x);                                                       // 344\n                    main_callback = function () {};                                         // 345\n                }                                                                           // 346\n                else {                                                                      // 347\n                    callback();                                                             // 348\n                }                                                                           // 349\n            });                                                                             // 350\n        }, function (err) {                                                                 // 351\n            main_callback();                                                                // 352\n        });                                                                                 // 353\n    };                                                                                      // 354\n    async.detect = doParallel(_detect);                                                     // 355\n    async.detectSeries = doSeries(_detect);                                                 // 356\n                                                                                            // 357\n    async.some = function (arr, iterator, main_callback) {                                  // 358\n        async.each(arr, function (x, callback) {                                            // 359\n            iterator(x, function (v) {                                                      // 360\n                if (v) {                                                                    // 361\n                    main_callback(true);                                                    // 362\n                    main_callback = function () {};                                         // 363\n                }                                                                           // 364\n                callback();                                                                 // 365\n            });                                                                             // 366\n        }, function (err) {                                                                 // 367\n            main_callback(false);                                                           // 368\n        });                                                                                 // 369\n    };                                                                                      // 370\n    // any alias                                                                            // 371\n    async.any = async.some;                                                                 // 372\n                                                                                            // 373\n    async.every = function (arr, iterator, main_callback) {                                 // 374\n        async.each(arr, function (x, callback) {                                            // 375\n            iterator(x, function (v) {                                                      // 376\n                if (!v) {                                                                   // 377\n                    main_callback(false);                                                   // 378\n                    main_callback = function () {};                                         // 379\n                }                                                                           // 380\n                callback();                                                                 // 381\n            });                                                                             // 382\n        }, function (err) {                                                                 // 383\n            main_callback(true);                                                            // 384\n        });                                                                                 // 385\n    };                                                                                      // 386\n    // all alias                                                                            // 387\n    async.all = async.every;                                                                // 388\n                                                                                            // 389\n    async.sortBy = function (arr, iterator, callback) {                                     // 390\n        async.map(arr, function (x, callback) {                                             // 391\n            iterator(x, function (err, criteria) {                                          // 392\n                if (err) {                                                                  // 393\n                    callback(err);                                                          // 394\n                }                                                                           // 395\n                else {                                                                      // 396\n                    callback(null, {value: x, criteria: criteria});                         // 397\n                }                                                                           // 398\n            });                                                                             // 399\n        }, function (err, results) {                                                        // 400\n            if (err) {                                                                      // 401\n                return callback(err);                                                       // 402\n            }                                                                               // 403\n            else {                                                                          // 404\n                var fn = function (left, right) {                                           // 405\n                    var a = left.criteria, b = right.criteria;                              // 406\n                    return a < b ? -1 : a > b ? 1 : 0;                                      // 407\n                };                                                                          // 408\n                callback(null, _map(results.sort(fn), function (x) {                        // 409\n                    return x.value;                                                         // 410\n                }));                                                                        // 411\n            }                                                                               // 412\n        });                                                                                 // 413\n    };                                                                                      // 414\n                                                                                            // 415\n    async.auto = function (tasks, callback) {                                               // 416\n        callback = callback || function () {};                                              // 417\n        var keys = _keys(tasks);                                                            // 418\n        var remainingTasks = keys.length                                                    // 419\n        if (!remainingTasks) {                                                              // 420\n            return callback();                                                              // 421\n        }                                                                                   // 422\n                                                                                            // 423\n        var results = {};                                                                   // 424\n                                                                                            // 425\n        var listeners = [];                                                                 // 426\n        var addListener = function (fn) {                                                   // 427\n            listeners.unshift(fn);                                                          // 428\n        };                                                                                  // 429\n        var removeListener = function (fn) {                                                // 430\n            for (var i = 0; i < listeners.length; i += 1) {                                 // 431\n                if (listeners[i] === fn) {                                                  // 432\n                    listeners.splice(i, 1);                                                 // 433\n                    return;                                                                 // 434\n                }                                                                           // 435\n            }                                                                               // 436\n        };                                                                                  // 437\n        var taskComplete = function () {                                                    // 438\n            remainingTasks--                                                                // 439\n            _each(listeners.slice(0), function (fn) {                                       // 440\n                fn();                                                                       // 441\n            });                                                                             // 442\n        };                                                                                  // 443\n                                                                                            // 444\n        addListener(function () {                                                           // 445\n            if (!remainingTasks) {                                                          // 446\n                var theCallback = callback;                                                 // 447\n                // prevent final callback from calling itself if it errors                  // 448\n                callback = function () {};                                                  // 449\n                                                                                            // 450\n                theCallback(null, results);                                                 // 451\n            }                                                                               // 452\n        });                                                                                 // 453\n                                                                                            // 454\n        _each(keys, function (k) {                                                          // 455\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];                           // 456\n            var taskCallback = function (err) {                                             // 457\n                var args = Array.prototype.slice.call(arguments, 1);                        // 458\n                if (args.length <= 1) {                                                     // 459\n                    args = args[0];                                                         // 460\n                }                                                                           // 461\n                if (err) {                                                                  // 462\n                    var safeResults = {};                                                   // 463\n                    _each(_keys(results), function(rkey) {                                  // 464\n                        safeResults[rkey] = results[rkey];                                  // 465\n                    });                                                                     // 466\n                    safeResults[k] = args;                                                  // 467\n                    callback(err, safeResults);                                             // 468\n                    // stop subsequent errors hitting callback multiple times               // 469\n                    callback = function () {};                                              // 470\n                }                                                                           // 471\n                else {                                                                      // 472\n                    results[k] = args;                                                      // 473\n                    async.setImmediate(taskComplete);                                       // 474\n                }                                                                           // 475\n            };                                                                              // 476\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];                  // 477\n            var ready = function () {                                                       // 478\n                return _reduce(requires, function (a, x) {                                  // 479\n                    return (a && results.hasOwnProperty(x));                                // 480\n                }, true) && !results.hasOwnProperty(k);                                     // 481\n            };                                                                              // 482\n            if (ready()) {                                                                  // 483\n                task[task.length - 1](taskCallback, results);                               // 484\n            }                                                                               // 485\n            else {                                                                          // 486\n                var listener = function () {                                                // 487\n                    if (ready()) {                                                          // 488\n                        removeListener(listener);                                           // 489\n                        task[task.length - 1](taskCallback, results);                       // 490\n                    }                                                                       // 491\n                };                                                                          // 492\n                addListener(listener);                                                      // 493\n            }                                                                               // 494\n        });                                                                                 // 495\n    };                                                                                      // 496\n                                                                                            // 497\n    async.retry = function(times, task, callback) {                                         // 498\n        var DEFAULT_TIMES = 5;                                                              // 499\n        var attempts = [];                                                                  // 500\n        // Use defaults if times not passed                                                 // 501\n        if (typeof times === 'function') {                                                  // 502\n            callback = task;                                                                // 503\n            task = times;                                                                   // 504\n            times = DEFAULT_TIMES;                                                          // 505\n        }                                                                                   // 506\n        // Make sure times is a number                                                      // 507\n        times = parseInt(times, 10) || DEFAULT_TIMES;                                       // 508\n        var wrappedTask = function(wrappedCallback, wrappedResults) {                       // 509\n            var retryAttempt = function(task, finalAttempt) {                               // 510\n                return function(seriesCallback) {                                           // 511\n                    task(function(err, result){                                             // 512\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});   // 513\n                    }, wrappedResults);                                                     // 514\n                };                                                                          // 515\n            };                                                                              // 516\n            while (times) {                                                                 // 517\n                attempts.push(retryAttempt(task, !(times-=1)));                             // 518\n            }                                                                               // 519\n            async.series(attempts, function(done, data){                                    // 520\n                data = data[data.length - 1];                                               // 521\n                (wrappedCallback || callback)(data.err, data.result);                       // 522\n            });                                                                             // 523\n        }                                                                                   // 524\n        // If a callback is passed, run this as a controll flow                             // 525\n        return callback ? wrappedTask() : wrappedTask                                       // 526\n    };                                                                                      // 527\n                                                                                            // 528\n    async.waterfall = function (tasks, callback) {                                          // 529\n        callback = callback || function () {};                                              // 530\n        if (!_isArray(tasks)) {                                                             // 531\n          var err = new Error('First argument to waterfall must be an array of functions'); // 532\n          return callback(err);                                                             // 533\n        }                                                                                   // 534\n        if (!tasks.length) {                                                                // 535\n            return callback();                                                              // 536\n        }                                                                                   // 537\n        var wrapIterator = function (iterator) {                                            // 538\n            return function (err) {                                                         // 539\n                if (err) {                                                                  // 540\n                    callback.apply(null, arguments);                                        // 541\n                    callback = function () {};                                              // 542\n                }                                                                           // 543\n                else {                                                                      // 544\n                    var args = Array.prototype.slice.call(arguments, 1);                    // 545\n                    var next = iterator.next();                                             // 546\n                    if (next) {                                                             // 547\n                        args.push(wrapIterator(next));                                      // 548\n                    }                                                                       // 549\n                    else {                                                                  // 550\n                        args.push(callback);                                                // 551\n                    }                                                                       // 552\n                    async.setImmediate(function () {                                        // 553\n                        iterator.apply(null, args);                                         // 554\n                    });                                                                     // 555\n                }                                                                           // 556\n            };                                                                              // 557\n        };                                                                                  // 558\n        wrapIterator(async.iterator(tasks))();                                              // 559\n    };                                                                                      // 560\n                                                                                            // 561\n    var _parallel = function(eachfn, tasks, callback) {                                     // 562\n        callback = callback || function () {};                                              // 563\n        if (_isArray(tasks)) {                                                              // 564\n            eachfn.map(tasks, function (fn, callback) {                                     // 565\n                if (fn) {                                                                   // 566\n                    fn(function (err) {                                                     // 567\n                        var args = Array.prototype.slice.call(arguments, 1);                // 568\n                        if (args.length <= 1) {                                             // 569\n                            args = args[0];                                                 // 570\n                        }                                                                   // 571\n                        callback.call(null, err, args);                                     // 572\n                    });                                                                     // 573\n                }                                                                           // 574\n            }, callback);                                                                   // 575\n        }                                                                                   // 576\n        else {                                                                              // 577\n            var results = {};                                                               // 578\n            eachfn.each(_keys(tasks), function (k, callback) {                              // 579\n                tasks[k](function (err) {                                                   // 580\n                    var args = Array.prototype.slice.call(arguments, 1);                    // 581\n                    if (args.length <= 1) {                                                 // 582\n                        args = args[0];                                                     // 583\n                    }                                                                       // 584\n                    results[k] = args;                                                      // 585\n                    callback(err);                                                          // 586\n                });                                                                         // 587\n            }, function (err) {                                                             // 588\n                callback(err, results);                                                     // 589\n            });                                                                             // 590\n        }                                                                                   // 591\n    };                                                                                      // 592\n                                                                                            // 593\n    async.parallel = function (tasks, callback) {                                           // 594\n        _parallel({ map: async.map, each: async.each }, tasks, callback);                   // 595\n    };                                                                                      // 596\n                                                                                            // 597\n    async.parallelLimit = function(tasks, limit, callback) {                                // 598\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);     // 599\n    };                                                                                      // 600\n                                                                                            // 601\n    async.series = function (tasks, callback) {                                             // 602\n        callback = callback || function () {};                                              // 603\n        if (_isArray(tasks)) {                                                              // 604\n            async.mapSeries(tasks, function (fn, callback) {                                // 605\n                if (fn) {                                                                   // 606\n                    fn(function (err) {                                                     // 607\n                        var args = Array.prototype.slice.call(arguments, 1);                // 608\n                        if (args.length <= 1) {                                             // 609\n                            args = args[0];                                                 // 610\n                        }                                                                   // 611\n                        callback.call(null, err, args);                                     // 612\n                    });                                                                     // 613\n                }                                                                           // 614\n            }, callback);                                                                   // 615\n        }                                                                                   // 616\n        else {                                                                              // 617\n            var results = {};                                                               // 618\n            async.eachSeries(_keys(tasks), function (k, callback) {                         // 619\n                tasks[k](function (err) {                                                   // 620\n                    var args = Array.prototype.slice.call(arguments, 1);                    // 621\n                    if (args.length <= 1) {                                                 // 622\n                        args = args[0];                                                     // 623\n                    }                                                                       // 624\n                    results[k] = args;                                                      // 625\n                    callback(err);                                                          // 626\n                });                                                                         // 627\n            }, function (err) {                                                             // 628\n                callback(err, results);                                                     // 629\n            });                                                                             // 630\n        }                                                                                   // 631\n    };                                                                                      // 632\n                                                                                            // 633\n    async.iterator = function (tasks) {                                                     // 634\n        var makeCallback = function (index) {                                               // 635\n            var fn = function () {                                                          // 636\n                if (tasks.length) {                                                         // 637\n                    tasks[index].apply(null, arguments);                                    // 638\n                }                                                                           // 639\n                return fn.next();                                                           // 640\n            };                                                                              // 641\n            fn.next = function () {                                                         // 642\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;          // 643\n            };                                                                              // 644\n            return fn;                                                                      // 645\n        };                                                                                  // 646\n        return makeCallback(0);                                                             // 647\n    };                                                                                      // 648\n                                                                                            // 649\n    async.apply = function (fn) {                                                           // 650\n        var args = Array.prototype.slice.call(arguments, 1);                                // 651\n        return function () {                                                                // 652\n            return fn.apply(                                                                // 653\n                null, args.concat(Array.prototype.slice.call(arguments))                    // 654\n            );                                                                              // 655\n        };                                                                                  // 656\n    };                                                                                      // 657\n                                                                                            // 658\n    var _concat = function (eachfn, arr, fn, callback) {                                    // 659\n        var r = [];                                                                         // 660\n        eachfn(arr, function (x, cb) {                                                      // 661\n            fn(x, function (err, y) {                                                       // 662\n                r = r.concat(y || []);                                                      // 663\n                cb(err);                                                                    // 664\n            });                                                                             // 665\n        }, function (err) {                                                                 // 666\n            callback(err, r);                                                               // 667\n        });                                                                                 // 668\n    };                                                                                      // 669\n    async.concat = doParallel(_concat);                                                     // 670\n    async.concatSeries = doSeries(_concat);                                                 // 671\n                                                                                            // 672\n    async.whilst = function (test, iterator, callback) {                                    // 673\n        if (test()) {                                                                       // 674\n            iterator(function (err) {                                                       // 675\n                if (err) {                                                                  // 676\n                    return callback(err);                                                   // 677\n                }                                                                           // 678\n                async.whilst(test, iterator, callback);                                     // 679\n            });                                                                             // 680\n        }                                                                                   // 681\n        else {                                                                              // 682\n            callback();                                                                     // 683\n        }                                                                                   // 684\n    };                                                                                      // 685\n                                                                                            // 686\n    async.doWhilst = function (iterator, test, callback) {                                  // 687\n        iterator(function (err) {                                                           // 688\n            if (err) {                                                                      // 689\n                return callback(err);                                                       // 690\n            }                                                                               // 691\n            var args = Array.prototype.slice.call(arguments, 1);                            // 692\n            if (test.apply(null, args)) {                                                   // 693\n                async.doWhilst(iterator, test, callback);                                   // 694\n            }                                                                               // 695\n            else {                                                                          // 696\n                callback();                                                                 // 697\n            }                                                                               // 698\n        });                                                                                 // 699\n    };                                                                                      // 700\n                                                                                            // 701\n    async.until = function (test, iterator, callback) {                                     // 702\n        if (!test()) {                                                                      // 703\n            iterator(function (err) {                                                       // 704\n                if (err) {                                                                  // 705\n                    return callback(err);                                                   // 706\n                }                                                                           // 707\n                async.until(test, iterator, callback);                                      // 708\n            });                                                                             // 709\n        }                                                                                   // 710\n        else {                                                                              // 711\n            callback();                                                                     // 712\n        }                                                                                   // 713\n    };                                                                                      // 714\n                                                                                            // 715\n    async.doUntil = function (iterator, test, callback) {                                   // 716\n        iterator(function (err) {                                                           // 717\n            if (err) {                                                                      // 718\n                return callback(err);                                                       // 719\n            }                                                                               // 720\n            var args = Array.prototype.slice.call(arguments, 1);                            // 721\n            if (!test.apply(null, args)) {                                                  // 722\n                async.doUntil(iterator, test, callback);                                    // 723\n            }                                                                               // 724\n            else {                                                                          // 725\n                callback();                                                                 // 726\n            }                                                                               // 727\n        });                                                                                 // 728\n    };                                                                                      // 729\n                                                                                            // 730\n    async.queue = function (worker, concurrency) {                                          // 731\n        if (concurrency === undefined) {                                                    // 732\n            concurrency = 1;                                                                // 733\n        }                                                                                   // 734\n        function _insert(q, data, pos, callback) {                                          // 735\n          if (!q.started){                                                                  // 736\n            q.started = true;                                                               // 737\n          }                                                                                 // 738\n          if (!_isArray(data)) {                                                            // 739\n              data = [data];                                                                // 740\n          }                                                                                 // 741\n          if(data.length == 0) {                                                            // 742\n             // call drain immediately if there are no tasks                                // 743\n             return async.setImmediate(function() {                                         // 744\n                 if (q.drain) {                                                             // 745\n                     q.drain();                                                             // 746\n                 }                                                                          // 747\n             });                                                                            // 748\n          }                                                                                 // 749\n          _each(data, function(task) {                                                      // 750\n              var item = {                                                                  // 751\n                  data: task,                                                               // 752\n                  callback: typeof callback === 'function' ? callback : null                // 753\n              };                                                                            // 754\n                                                                                            // 755\n              if (pos) {                                                                    // 756\n                q.tasks.unshift(item);                                                      // 757\n              } else {                                                                      // 758\n                q.tasks.push(item);                                                         // 759\n              }                                                                             // 760\n                                                                                            // 761\n              if (q.saturated && q.tasks.length === q.concurrency) {                        // 762\n                  q.saturated();                                                            // 763\n              }                                                                             // 764\n              async.setImmediate(q.process);                                                // 765\n          });                                                                               // 766\n        }                                                                                   // 767\n                                                                                            // 768\n        var workers = 0;                                                                    // 769\n        var q = {                                                                           // 770\n            tasks: [],                                                                      // 771\n            concurrency: concurrency,                                                       // 772\n            saturated: null,                                                                // 773\n            empty: null,                                                                    // 774\n            drain: null,                                                                    // 775\n            started: false,                                                                 // 776\n            paused: false,                                                                  // 777\n            push: function (data, callback) {                                               // 778\n              _insert(q, data, false, callback);                                            // 779\n            },                                                                              // 780\n            kill: function () {                                                             // 781\n              q.drain = null;                                                               // 782\n              q.tasks = [];                                                                 // 783\n            },                                                                              // 784\n            unshift: function (data, callback) {                                            // 785\n              _insert(q, data, true, callback);                                             // 786\n            },                                                                              // 787\n            process: function () {                                                          // 788\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {               // 789\n                    var task = q.tasks.shift();                                             // 790\n                    if (q.empty && q.tasks.length === 0) {                                  // 791\n                        q.empty();                                                          // 792\n                    }                                                                       // 793\n                    workers += 1;                                                           // 794\n                    var next = function () {                                                // 795\n                        workers -= 1;                                                       // 796\n                        if (task.callback) {                                                // 797\n                            task.callback.apply(task, arguments);                           // 798\n                        }                                                                   // 799\n                        if (q.drain && q.tasks.length + workers === 0) {                    // 800\n                            q.drain();                                                      // 801\n                        }                                                                   // 802\n                        q.process();                                                        // 803\n                    };                                                                      // 804\n                    var cb = only_once(next);                                               // 805\n                    worker(task.data, cb);                                                  // 806\n                }                                                                           // 807\n            },                                                                              // 808\n            length: function () {                                                           // 809\n                return q.tasks.length;                                                      // 810\n            },                                                                              // 811\n            running: function () {                                                          // 812\n                return workers;                                                             // 813\n            },                                                                              // 814\n            idle: function() {                                                              // 815\n                return q.tasks.length + workers === 0;                                      // 816\n            },                                                                              // 817\n            pause: function () {                                                            // 818\n                if (q.paused === true) { return; }                                          // 819\n                q.paused = true;                                                            // 820\n            },                                                                              // 821\n            resume: function () {                                                           // 822\n                if (q.paused === false) { return; }                                         // 823\n                q.paused = false;                                                           // 824\n                // Need to call q.process once per concurrent                               // 825\n                // worker to preserve full concurrency after pause                          // 826\n                for (var w = 1; w <= q.concurrency; w++) {                                  // 827\n                    async.setImmediate(q.process);                                          // 828\n                }                                                                           // 829\n            }                                                                               // 830\n        };                                                                                  // 831\n        return q;                                                                           // 832\n    };                                                                                      // 833\n                                                                                            // 834\n    async.priorityQueue = function (worker, concurrency) {                                  // 835\n                                                                                            // 836\n        function _compareTasks(a, b){                                                       // 837\n          return a.priority - b.priority;                                                   // 838\n        };                                                                                  // 839\n                                                                                            // 840\n        function _binarySearch(sequence, item, compare) {                                   // 841\n          var beg = -1,                                                                     // 842\n              end = sequence.length - 1;                                                    // 843\n          while (beg < end) {                                                               // 844\n            var mid = beg + ((end - beg + 1) >>> 1);                                        // 845\n            if (compare(item, sequence[mid]) >= 0) {                                        // 846\n              beg = mid;                                                                    // 847\n            } else {                                                                        // 848\n              end = mid - 1;                                                                // 849\n            }                                                                               // 850\n          }                                                                                 // 851\n          return beg;                                                                       // 852\n        }                                                                                   // 853\n                                                                                            // 854\n        function _insert(q, data, priority, callback) {                                     // 855\n          if (!q.started){                                                                  // 856\n            q.started = true;                                                               // 857\n          }                                                                                 // 858\n          if (!_isArray(data)) {                                                            // 859\n              data = [data];                                                                // 860\n          }                                                                                 // 861\n          if(data.length == 0) {                                                            // 862\n             // call drain immediately if there are no tasks                                // 863\n             return async.setImmediate(function() {                                         // 864\n                 if (q.drain) {                                                             // 865\n                     q.drain();                                                             // 866\n                 }                                                                          // 867\n             });                                                                            // 868\n          }                                                                                 // 869\n          _each(data, function(task) {                                                      // 870\n              var item = {                                                                  // 871\n                  data: task,                                                               // 872\n                  priority: priority,                                                       // 873\n                  callback: typeof callback === 'function' ? callback : null                // 874\n              };                                                                            // 875\n                                                                                            // 876\n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);     // 877\n                                                                                            // 878\n              if (q.saturated && q.tasks.length === q.concurrency) {                        // 879\n                  q.saturated();                                                            // 880\n              }                                                                             // 881\n              async.setImmediate(q.process);                                                // 882\n          });                                                                               // 883\n        }                                                                                   // 884\n                                                                                            // 885\n        // Start with a normal queue                                                        // 886\n        var q = async.queue(worker, concurrency);                                           // 887\n                                                                                            // 888\n        // Override push to accept second parameter representing priority                   // 889\n        q.push = function (data, priority, callback) {                                      // 890\n          _insert(q, data, priority, callback);                                             // 891\n        };                                                                                  // 892\n                                                                                            // 893\n        // Remove unshift function                                                          // 894\n        delete q.unshift;                                                                   // 895\n                                                                                            // 896\n        return q;                                                                           // 897\n    };                                                                                      // 898\n                                                                                            // 899\n    async.cargo = function (worker, payload) {                                              // 900\n        var working     = false,                                                            // 901\n            tasks       = [];                                                               // 902\n                                                                                            // 903\n        var cargo = {                                                                       // 904\n            tasks: tasks,                                                                   // 905\n            payload: payload,                                                               // 906\n            saturated: null,                                                                // 907\n            empty: null,                                                                    // 908\n            drain: null,                                                                    // 909\n            drained: true,                                                                  // 910\n            push: function (data, callback) {                                               // 911\n                if (!_isArray(data)) {                                                      // 912\n                    data = [data];                                                          // 913\n                }                                                                           // 914\n                _each(data, function(task) {                                                // 915\n                    tasks.push({                                                            // 916\n                        data: task,                                                         // 917\n                        callback: typeof callback === 'function' ? callback : null          // 918\n                    });                                                                     // 919\n                    cargo.drained = false;                                                  // 920\n                    if (cargo.saturated && tasks.length === payload) {                      // 921\n                        cargo.saturated();                                                  // 922\n                    }                                                                       // 923\n                });                                                                         // 924\n                async.setImmediate(cargo.process);                                          // 925\n            },                                                                              // 926\n            process: function process() {                                                   // 927\n                if (working) return;                                                        // 928\n                if (tasks.length === 0) {                                                   // 929\n                    if(cargo.drain && !cargo.drained) cargo.drain();                        // 930\n                    cargo.drained = true;                                                   // 931\n                    return;                                                                 // 932\n                }                                                                           // 933\n                                                                                            // 934\n                var ts = typeof payload === 'number'                                        // 935\n                            ? tasks.splice(0, payload)                                      // 936\n                            : tasks.splice(0, tasks.length);                                // 937\n                                                                                            // 938\n                var ds = _map(ts, function (task) {                                         // 939\n                    return task.data;                                                       // 940\n                });                                                                         // 941\n                                                                                            // 942\n                if(cargo.empty) cargo.empty();                                              // 943\n                working = true;                                                             // 944\n                worker(ds, function () {                                                    // 945\n                    working = false;                                                        // 946\n                                                                                            // 947\n                    var args = arguments;                                                   // 948\n                    _each(ts, function (data) {                                             // 949\n                        if (data.callback) {                                                // 950\n                            data.callback.apply(null, args);                                // 951\n                        }                                                                   // 952\n                    });                                                                     // 953\n                                                                                            // 954\n                    process();                                                              // 955\n                });                                                                         // 956\n            },                                                                              // 957\n            length: function () {                                                           // 958\n                return tasks.length;                                                        // 959\n            },                                                                              // 960\n            running: function () {                                                          // 961\n                return working;                                                             // 962\n            }                                                                               // 963\n        };                                                                                  // 964\n        return cargo;                                                                       // 965\n    };                                                                                      // 966\n                                                                                            // 967\n    var _console_fn = function (name) {                                                     // 968\n        return function (fn) {                                                              // 969\n            var args = Array.prototype.slice.call(arguments, 1);                            // 970\n            fn.apply(null, args.concat([function (err) {                                    // 971\n                var args = Array.prototype.slice.call(arguments, 1);                        // 972\n                if (typeof console !== 'undefined') {                                       // 973\n                    if (err) {                                                              // 974\n                        if (console.error) {                                                // 975\n                            console.error(err);                                             // 976\n                        }                                                                   // 977\n                    }                                                                       // 978\n                    else if (console[name]) {                                               // 979\n                        _each(args, function (x) {                                          // 980\n                            console[name](x);                                               // 981\n                        });                                                                 // 982\n                    }                                                                       // 983\n                }                                                                           // 984\n            }]));                                                                           // 985\n        };                                                                                  // 986\n    };                                                                                      // 987\n    async.log = _console_fn('log');                                                         // 988\n    async.dir = _console_fn('dir');                                                         // 989\n    /*async.info = _console_fn('info');                                                     // 990\n    async.warn = _console_fn('warn');                                                       // 991\n    async.error = _console_fn('error');*/                                                   // 992\n                                                                                            // 993\n    async.memoize = function (fn, hasher) {                                                 // 994\n        var memo = {};                                                                      // 995\n        var queues = {};                                                                    // 996\n        hasher = hasher || function (x) {                                                   // 997\n            return x;                                                                       // 998\n        };                                                                                  // 999\n        var memoized = function () {                                                        // 1000\n            var args = Array.prototype.slice.call(arguments);                               // 1001\n            var callback = args.pop();                                                      // 1002\n            var key = hasher.apply(null, args);                                             // 1003\n            if (key in memo) {                                                              // 1004\n                async.nextTick(function () {                                                // 1005\n                    callback.apply(null, memo[key]);                                        // 1006\n                });                                                                         // 1007\n            }                                                                               // 1008\n            else if (key in queues) {                                                       // 1009\n                queues[key].push(callback);                                                 // 1010\n            }                                                                               // 1011\n            else {                                                                          // 1012\n                queues[key] = [callback];                                                   // 1013\n                fn.apply(null, args.concat([function () {                                   // 1014\n                    memo[key] = arguments;                                                  // 1015\n                    var q = queues[key];                                                    // 1016\n                    delete queues[key];                                                     // 1017\n                    for (var i = 0, l = q.length; i < l; i++) {                             // 1018\n                      q[i].apply(null, arguments);                                          // 1019\n                    }                                                                       // 1020\n                }]));                                                                       // 1021\n            }                                                                               // 1022\n        };                                                                                  // 1023\n        memoized.memo = memo;                                                               // 1024\n        memoized.unmemoized = fn;                                                           // 1025\n        return memoized;                                                                    // 1026\n    };                                                                                      // 1027\n                                                                                            // 1028\n    async.unmemoize = function (fn) {                                                       // 1029\n      return function () {                                                                  // 1030\n        return (fn.unmemoized || fn).apply(null, arguments);                                // 1031\n      };                                                                                    // 1032\n    };                                                                                      // 1033\n                                                                                            // 1034\n    async.times = function (count, iterator, callback) {                                    // 1035\n        var counter = [];                                                                   // 1036\n        for (var i = 0; i < count; i++) {                                                   // 1037\n            counter.push(i);                                                                // 1038\n        }                                                                                   // 1039\n        return async.map(counter, iterator, callback);                                      // 1040\n    };                                                                                      // 1041\n                                                                                            // 1042\n    async.timesSeries = function (count, iterator, callback) {                              // 1043\n        var counter = [];                                                                   // 1044\n        for (var i = 0; i < count; i++) {                                                   // 1045\n            counter.push(i);                                                                // 1046\n        }                                                                                   // 1047\n        return async.mapSeries(counter, iterator, callback);                                // 1048\n    };                                                                                      // 1049\n                                                                                            // 1050\n    async.seq = function (/* functions... */) {                                             // 1051\n        var fns = arguments;                                                                // 1052\n        return function () {                                                                // 1053\n            var that = this;                                                                // 1054\n            var args = Array.prototype.slice.call(arguments);                               // 1055\n            var callback = args.pop();                                                      // 1056\n            async.reduce(fns, args, function (newargs, fn, cb) {                            // 1057\n                fn.apply(that, newargs.concat([function () {                                // 1058\n                    var err = arguments[0];                                                 // 1059\n                    var nextargs = Array.prototype.slice.call(arguments, 1);                // 1060\n                    cb(err, nextargs);                                                      // 1061\n                }]))                                                                        // 1062\n            },                                                                              // 1063\n            function (err, results) {                                                       // 1064\n                callback.apply(that, [err].concat(results));                                // 1065\n            });                                                                             // 1066\n        };                                                                                  // 1067\n    };                                                                                      // 1068\n                                                                                            // 1069\n    async.compose = function (/* functions... */) {                                         // 1070\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));                // 1071\n    };                                                                                      // 1072\n                                                                                            // 1073\n    var _applyEach = function (eachfn, fns /*args...*/) {                                   // 1074\n        var go = function () {                                                              // 1075\n            var that = this;                                                                // 1076\n            var args = Array.prototype.slice.call(arguments);                               // 1077\n            var callback = args.pop();                                                      // 1078\n            return eachfn(fns, function (fn, cb) {                                          // 1079\n                fn.apply(that, args.concat([cb]));                                          // 1080\n            },                                                                              // 1081\n            callback);                                                                      // 1082\n        };                                                                                  // 1083\n        if (arguments.length > 2) {                                                         // 1084\n            var args = Array.prototype.slice.call(arguments, 2);                            // 1085\n            return go.apply(this, args);                                                    // 1086\n        }                                                                                   // 1087\n        else {                                                                              // 1088\n            return go;                                                                      // 1089\n        }                                                                                   // 1090\n    };                                                                                      // 1091\n    async.applyEach = doParallel(_applyEach);                                               // 1092\n    async.applyEachSeries = doSeries(_applyEach);                                           // 1093\n                                                                                            // 1094\n    async.forever = function (fn, callback) {                                               // 1095\n        function next(err) {                                                                // 1096\n            if (err) {                                                                      // 1097\n                if (callback) {                                                             // 1098\n                    return callback(err);                                                   // 1099\n                }                                                                           // 1100\n                throw err;                                                                  // 1101\n            }                                                                               // 1102\n            fn(next);                                                                       // 1103\n        }                                                                                   // 1104\n        next();                                                                             // 1105\n    };                                                                                      // 1106\n                                                                                            // 1107\n    // Node.js                                                                              // 1108\n    if (typeof module !== 'undefined' && module.exports) {                                  // 1109\n        module.exports = async;                                                             // 1110\n    }                                                                                       // 1111\n    // AMD / RequireJS                                                                      // 1112\n    else if (typeof define !== 'undefined' && define.amd) {                                 // 1113\n        define([], function () {                                                            // 1114\n            return async;                                                                   // 1115\n        });                                                                                 // 1116\n    }                                                                                       // 1117\n    // included directly via <script> tag                                                   // 1118\n    else {                                                                                  // 1119\n        root.async = async;                                                                 // 1120\n    }                                                                                       // 1121\n                                                                                            // 1122\n}());                                                                                       // 1123\n                                                                                            // 1124\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/peerlibrary:async/export-async.js                                               //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nasync = this.async;                                                                         // 1\n                                                                                            // 2\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['peerlibrary:async'] = {}, {\n  async: async\n});\n\n})();\n","servePath":"/packages/peerlibrary_async.js","sourceMap":{"version":3,"sources":["/packages/peerlibrary_async/packages/peerlibrary_async.js"],"names":[],"mappingsfile":"/packages/peerlibrary_async.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/peerlibrary:async/async/lib/async.js                                            //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n/*!                                                                                         // 1\n * async                                                                                    // 2\n * https://github.com/caolan/async                                                          // 3\n *                                                                                          // 4\n * Copyright 2010-2014 Caolan McMahon                                                       // 5\n * Released under the MIT license                                                           // 6\n */                                                                                         // 7\n/*jshint onevar: false, indent:4 */                                                         // 8\n/*global setImmediate: false, setTimeout: false, console: false */                          // 9\n(function () {                                                                              // 10\n                                                                                            // 11\n    var async = {};                                                                         // 12\n                                                                                            // 13\n    // global on the server, window in the browser                                          // 14\n    var root, previous_async;                                                               // 15\n                                                                                            // 16\n    root = this;                                                                            // 17\n    if (root != null) {                                                                     // 18\n      previous_async = root.async;                                                          // 19\n    }                                                                                       // 20\n                                                                                            // 21\n    async.noConflict = function () {                                                        // 22\n        root.async = previous_async;                                                        // 23\n        return async;                                                                       // 24\n    };                                                                                      // 25\n                                                                                            // 26\n    function only_once(fn) {                                                                // 27\n        var called = false;                                                                 // 28\n        return function() {                                                                 // 29\n            if (called) throw new Error(\"Callback was already called.\");                    // 30\n            called = true;                                                                  // 31\n            fn.apply(root, arguments);                                                      // 32\n        }                                                                                   // 33\n    }                                                                                       // 34\n                                                                                            // 35\n    //// cross-browser compatiblity functions ////                                          // 36\n                                                                                            // 37\n    var _toString = Object.prototype.toString;                                              // 38\n                                                                                            // 39\n    var _isArray = Array.isArray || function (obj) {                                        // 40\n        return _toString.call(obj) === '[object Array]';                                    // 41\n    };                                                                                      // 42\n                                                                                            // 43\n    var _each = function (arr, iterator) {                                                  // 44\n        for (var i = 0; i < arr.length; i += 1) {                                           // 45\n            iterator(arr[i], i, arr);                                                       // 46\n        }                                                                                   // 47\n    };                                                                                      // 48\n                                                                                            // 49\n    var _map = function (arr, iterator) {                                                   // 50\n        if (arr.map) {                                                                      // 51\n            return arr.map(iterator);                                                       // 52\n        }                                                                                   // 53\n        var results = [];                                                                   // 54\n        _each(arr, function (x, i, a) {                                                     // 55\n            results.push(iterator(x, i, a));                                                // 56\n        });                                                                                 // 57\n        return results;                                                                     // 58\n    };                                                                                      // 59\n                                                                                            // 60\n    var _reduce = function (arr, iterator, memo) {                                          // 61\n        if (arr.reduce) {                                                                   // 62\n            return arr.reduce(iterator, memo);                                              // 63\n        }                                                                                   // 64\n        _each(arr, function (x, i, a) {                                                     // 65\n            memo = iterator(memo, x, i, a);                                                 // 66\n        });                                                                                 // 67\n        return memo;                                                                        // 68\n    };                                                                                      // 69\n                                                                                            // 70\n    var _keys = function (obj) {                                                            // 71\n        if (Object.keys) {                                                                  // 72\n            return Object.keys(obj);                                                        // 73\n        }                                                                                   // 74\n        var keys = [];                                                                      // 75\n        for (var k in obj) {                                                                // 76\n            if (obj.hasOwnProperty(k)) {                                                    // 77\n                keys.push(k);                                                               // 78\n            }                                                                               // 79\n        }                                                                                   // 80\n        return keys;                                                                        // 81\n    };                                                                                      // 82\n                                                                                            // 83\n    //// exported async module functions ////                                               // 84\n                                                                                            // 85\n    //// nextTick implementation with browser-compatible fallback ////                      // 86\n    if (typeof process === 'undefined' || !(process.nextTick)) {                            // 87\n        if (typeof setImmediate === 'function') {                                           // 88\n            async.nextTick = function (fn) {                                                // 89\n                // not a direct alias for IE10 compatibility                                // 90\n                setImmediate(fn);                                                           // 91\n            };                                                                              // 92\n            async.setImmediate = async.nextTick;                                            // 93\n        }                                                                                   // 94\n        else {                                                                              // 95\n            async.nextTick = function (fn) {                                                // 96\n                setTimeout(fn, 0);                                                          // 97\n            };                                                                              // 98\n            async.setImmediate = async.nextTick;                                            // 99\n        }                                                                                   // 100\n    }                                                                                       // 101\n    else {                                                                                  // 102\n        async.nextTick = process.nextTick;                                                  // 103\n        if (typeof setImmediate !== 'undefined') {                                          // 104\n            async.setImmediate = function (fn) {                                            // 105\n              // not a direct alias for IE10 compatibility                                  // 106\n              setImmediate(fn);                                                             // 107\n            };                                                                              // 108\n        }                                                                                   // 109\n        else {                                                                              // 110\n            async.setImmediate = async.nextTick;                                            // 111\n        }                                                                                   // 112\n    }                                                                                       // 113\n                                                                                            // 114\n    async.each = function (arr, iterator, callback) {                                       // 115\n        callback = callback || function () {};                                              // 116\n        if (!arr.length) {                                                                  // 117\n            return callback();                                                              // 118\n        }                                                                                   // 119\n        var completed = 0;                                                                  // 120\n        _each(arr, function (x) {                                                           // 121\n            iterator(x, only_once(done) );                                                  // 122\n        });                                                                                 // 123\n        function done(err) {                                                                // 124\n          if (err) {                                                                        // 125\n              callback(err);                                                                // 126\n              callback = function () {};                                                    // 127\n          }                                                                                 // 128\n          else {                                                                            // 129\n              completed += 1;                                                               // 130\n              if (completed >= arr.length) {                                                // 131\n                  callback();                                                               // 132\n              }                                                                             // 133\n          }                                                                                 // 134\n        }                                                                                   // 135\n    };                                                                                      // 136\n    async.forEach = async.each;                                                             // 137\n                                                                                            // 138\n    async.eachSeries = function (arr, iterator, callback) {                                 // 139\n        callback = callback || function () {};                                              // 140\n        if (!arr.length) {                                                                  // 141\n            return callback();                                                              // 142\n        }                                                                                   // 143\n        var completed = 0;                                                                  // 144\n        var iterate = function () {                                                         // 145\n            iterator(arr[completed], function (err) {                                       // 146\n                if (err) {                                                                  // 147\n                    callback(err);                                                          // 148\n                    callback = function () {};                                              // 149\n                }                                                                           // 150\n                else {                                                                      // 151\n                    completed += 1;                                                         // 152\n                    if (completed >= arr.length) {                                          // 153\n                        callback();                                                         // 154\n                    }                                                                       // 155\n                    else {                                                                  // 156\n                        iterate();                                                          // 157\n                    }                                                                       // 158\n                }                                                                           // 159\n            });                                                                             // 160\n        };                                                                                  // 161\n        iterate();                                                                          // 162\n    };                                                                                      // 163\n    async.forEachSeries = async.eachSeries;                                                 // 164\n                                                                                            // 165\n    async.eachLimit = function (arr, limit, iterator, callback) {                           // 166\n        var fn = _eachLimit(limit);                                                         // 167\n        fn.apply(null, [arr, iterator, callback]);                                          // 168\n    };                                                                                      // 169\n    async.forEachLimit = async.eachLimit;                                                   // 170\n                                                                                            // 171\n    var _eachLimit = function (limit) {                                                     // 172\n                                                                                            // 173\n        return function (arr, iterator, callback) {                                         // 174\n            callback = callback || function () {};                                          // 175\n            if (!arr.length || limit <= 0) {                                                // 176\n                return callback();                                                          // 177\n            }                                                                               // 178\n            var completed = 0;                                                              // 179\n            var started = 0;                                                                // 180\n            var running = 0;                                                                // 181\n                                                                                            // 182\n            (function replenish () {                                                        // 183\n                if (completed >= arr.length) {                                              // 184\n                    return callback();                                                      // 185\n                }                                                                           // 186\n                                                                                            // 187\n                while (running < limit && started < arr.length) {                           // 188\n                    started += 1;                                                           // 189\n                    running += 1;                                                           // 190\n                    iterator(arr[started - 1], function (err) {                             // 191\n                        if (err) {                                                          // 192\n                            callback(err);                                                  // 193\n                            callback = function () {};                                      // 194\n                        }                                                                   // 195\n                        else {                                                              // 196\n                            completed += 1;                                                 // 197\n                            running -= 1;                                                   // 198\n                            if (completed >= arr.length) {                                  // 199\n                                callback();                                                 // 200\n                            }                                                               // 201\n                            else {                                                          // 202\n                                replenish();                                                // 203\n                            }                                                               // 204\n                        }                                                                   // 205\n                    });                                                                     // 206\n                }                                                                           // 207\n            })();                                                                           // 208\n        };                                                                                  // 209\n    };                                                                                      // 210\n                                                                                            // 211\n                                                                                            // 212\n    var doParallel = function (fn) {                                                        // 213\n        return function () {                                                                // 214\n            var args = Array.prototype.slice.call(arguments);                               // 215\n            return fn.apply(null, [async.each].concat(args));                               // 216\n        };                                                                                  // 217\n    };                                                                                      // 218\n    var doParallelLimit = function(limit, fn) {                                             // 219\n        return function () {                                                                // 220\n            var args = Array.prototype.slice.call(arguments);                               // 221\n            return fn.apply(null, [_eachLimit(limit)].concat(args));                        // 222\n        };                                                                                  // 223\n    };                                                                                      // 224\n    var doSeries = function (fn) {                                                          // 225\n        return function () {                                                                // 226\n            var args = Array.prototype.slice.call(arguments);                               // 227\n            return fn.apply(null, [async.eachSeries].concat(args));                         // 228\n        };                                                                                  // 229\n    };                                                                                      // 230\n                                                                                            // 231\n                                                                                            // 232\n    var _asyncMap = function (eachfn, arr, iterator, callback) {                            // 233\n        arr = _map(arr, function (x, i) {                                                   // 234\n            return {index: i, value: x};                                                    // 235\n        });                                                                                 // 236\n        if (!callback) {                                                                    // 237\n            eachfn(arr, function (x, callback) {                                            // 238\n                iterator(x.value, function (err) {                                          // 239\n                    callback(err);                                                          // 240\n                });                                                                         // 241\n            });                                                                             // 242\n        } else {                                                                            // 243\n            var results = [];                                                               // 244\n            eachfn(arr, function (x, callback) {                                            // 245\n                iterator(x.value, function (err, v) {                                       // 246\n                    results[x.index] = v;                                                   // 247\n                    callback(err);                                                          // 248\n                });                                                                         // 249\n            }, function (err) {                                                             // 250\n                callback(err, results);                                                     // 251\n            });                                                                             // 252\n        }                                                                                   // 253\n    };                                                                                      // 254\n    async.map = doParallel(_asyncMap);                                                      // 255\n    async.mapSeries = doSeries(_asyncMap);                                                  // 256\n    async.mapLimit = function (arr, limit, iterator, callback) {                            // 257\n        return _mapLimit(limit)(arr, iterator, callback);                                   // 258\n    };                                                                                      // 259\n                                                                                            // 260\n    var _mapLimit = function(limit) {                                                       // 261\n        return doParallelLimit(limit, _asyncMap);                                           // 262\n    };                                                                                      // 263\n                                                                                            // 264\n    // reduce only has a series version, as doing reduce in parallel won't                  // 265\n    // work in many situations.                                                             // 266\n    async.reduce = function (arr, memo, iterator, callback) {                               // 267\n        async.eachSeries(arr, function (x, callback) {                                      // 268\n            iterator(memo, x, function (err, v) {                                           // 269\n                memo = v;                                                                   // 270\n                callback(err);                                                              // 271\n            });                                                                             // 272\n        }, function (err) {                                                                 // 273\n            callback(err, memo);                                                            // 274\n        });                                                                                 // 275\n    };                                                                                      // 276\n    // inject alias                                                                         // 277\n    async.inject = async.reduce;                                                            // 278\n    // foldl alias                                                                          // 279\n    async.foldl = async.reduce;                                                             // 280\n                                                                                            // 281\n    async.reduceRight = function (arr, memo, iterator, callback) {                          // 282\n        var reversed = _map(arr, function (x) {                                             // 283\n            return x;                                                                       // 284\n        }).reverse();                                                                       // 285\n        async.reduce(reversed, memo, iterator, callback);                                   // 286\n    };                                                                                      // 287\n    // foldr alias                                                                          // 288\n    async.foldr = async.reduceRight;                                                        // 289\n                                                                                            // 290\n    var _filter = function (eachfn, arr, iterator, callback) {                              // 291\n        var results = [];                                                                   // 292\n        arr = _map(arr, function (x, i) {                                                   // 293\n            return {index: i, value: x};                                                    // 294\n        });                                                                                 // 295\n        eachfn(arr, function (x, callback) {                                                // 296\n            iterator(x.value, function (v) {                                                // 297\n                if (v) {                                                                    // 298\n                    results.push(x);                                                        // 299\n                }                                                                           // 300\n                callback();                                                                 // 301\n            });                                                                             // 302\n        }, function (err) {                                                                 // 303\n            callback(_map(results.sort(function (a, b) {                                    // 304\n                return a.index - b.index;                                                   // 305\n            }), function (x) {                                                              // 306\n                return x.value;                                                             // 307\n            }));                                                                            // 308\n        });                                                                                 // 309\n    };                                                                                      // 310\n    async.filter = doParallel(_filter);                                                     // 311\n    async.filterSeries = doSeries(_filter);                                                 // 312\n    // select alias                                                                         // 313\n    async.select = async.filter;                                                            // 314\n    async.selectSeries = async.filterSeries;                                                // 315\n                                                                                            // 316\n    var _reject = function (eachfn, arr, iterator, callback) {                              // 317\n        var results = [];                                                                   // 318\n        arr = _map(arr, function (x, i) {                                                   // 319\n            return {index: i, value: x};                                                    // 320\n        });                                                                                 // 321\n        eachfn(arr, function (x, callback) {                                                // 322\n            iterator(x.value, function (v) {                                                // 323\n                if (!v) {                                                                   // 324\n                    results.push(x);                                                        // 325\n                }                                                                           // 326\n                callback();                                                                 // 327\n            });                                                                             // 328\n        }, function (err) {                                                                 // 329\n            callback(_map(results.sort(function (a, b) {                                    // 330\n                return a.index - b.index;                                                   // 331\n            }), function (x) {                                                              // 332\n                return x.value;                                                             // 333\n            }));                                                                            // 334\n        });                                                                                 // 335\n    };                                                                                      // 336\n    async.reject = doParallel(_reject);                                                     // 337\n    async.rejectSeries = doSeries(_reject);                                                 // 338\n                                                                                            // 339\n    var _detect = function (eachfn, arr, iterator, main_callback) {                         // 340\n        eachfn(arr, function (x, callback) {                                                // 341\n            iterator(x, function (result) {                                                 // 342\n                if (result) {                                                               // 343\n                    main_callback(x);                                                       // 344\n                    main_callback = function () {};                                         // 345\n                }                                                                           // 346\n                else {                                                                      // 347\n                    callback();                                                             // 348\n                }                                                                           // 349\n            });                                                                             // 350\n        }, function (err) {                                                                 // 351\n            main_callback();                                                                // 352\n        });                                                                                 // 353\n    };                                                                                      // 354\n    async.detect = doParallel(_detect);                                                     // 355\n    async.detectSeries = doSeries(_detect);                                                 // 356\n                                                                                            // 357\n    async.some = function (arr, iterator, main_callback) {                                  // 358\n        async.each(arr, function (x, callback) {                                            // 359\n            iterator(x, function (v) {                                                      // 360\n                if (v) {                                                                    // 361\n                    main_callback(true);                                                    // 362\n                    main_callback = function () {};                                         // 363\n                }                                                                           // 364\n                callback();                                                                 // 365\n            });                                                                             // 366\n        }, function (err) {                                                                 // 367\n            main_callback(false);                                                           // 368\n        });                                                                                 // 369\n    };                                                                                      // 370\n    // any alias                                                                            // 371\n    async.any = async.some;                                                                 // 372\n                                                                                            // 373\n    async.every = function (arr, iterator, main_callback) {                                 // 374\n        async.each(arr, function (x, callback) {                                            // 375\n            iterator(x, function (v) {                                                      // 376\n                if (!v) {                                                                   // 377\n                    main_callback(false);                                                   // 378\n                    main_callback = function () {};                                         // 379\n                }                                                                           // 380\n                callback();                                                                 // 381\n            });                                                                             // 382\n        }, function (err) {                                                                 // 383\n            main_callback(true);                                                            // 384\n        });                                                                                 // 385\n    };                                                                                      // 386\n    // all alias                                                                            // 387\n    async.all = async.every;                                                                // 388\n                                                                                            // 389\n    async.sortBy = function (arr, iterator, callback) {                                     // 390\n        async.map(arr, function (x, callback) {                                             // 391\n            iterator(x, function (err, criteria) {                                          // 392\n                if (err) {                                                                  // 393\n                    callback(err);                                                          // 394\n                }                                                                           // 395\n                else {                                                                      // 396\n                    callback(null, {value: x, criteria: criteria});                         // 397\n                }                                                                           // 398\n            });                                                                             // 399\n        }, function (err, results) {                                                        // 400\n            if (err) {                                                                      // 401\n                return callback(err);                                                       // 402\n            }                                                                               // 403\n            else {                                                                          // 404\n                var fn = function (left, right) {                                           // 405\n                    var a = left.criteria, b = right.criteria;                              // 406\n                    return a < b ? -1 : a > b ? 1 : 0;                                      // 407\n                };                                                                          // 408\n                callback(null, _map(results.sort(fn), function (x) {                        // 409\n                    return x.value;                                                         // 410\n                }));                                                                        // 411\n            }                                                                               // 412\n        });                                                                                 // 413\n    };                                                                                      // 414\n                                                                                            // 415\n    async.auto = function (tasks, callback) {                                               // 416\n        callback = callback || function () {};                                              // 417\n        var keys = _keys(tasks);                                                            // 418\n        var remainingTasks = keys.length                                                    // 419\n        if (!remainingTasks) {                                                              // 420\n            return callback();                                                              // 421\n        }                                                                                   // 422\n                                                                                            // 423\n        var results = {};                                                                   // 424\n                                                                                            // 425\n        var listeners = [];                                                                 // 426\n        var addListener = function (fn) {                                                   // 427\n            listeners.unshift(fn);                                                          // 428\n        };                                                                                  // 429\n        var removeListener = function (fn) {                                                // 430\n            for (var i = 0; i < listeners.length; i += 1) {                                 // 431\n                if (listeners[i] === fn) {                                                  // 432\n                    listeners.splice(i, 1);                                                 // 433\n                    return;                                                                 // 434\n                }                                                                           // 435\n            }                                                                               // 436\n        };                                                                                  // 437\n        var taskComplete = function () {                                                    // 438\n            remainingTasks--                                                                // 439\n            _each(listeners.slice(0), function (fn) {                                       // 440\n                fn();                                                                       // 441\n            });                                                                             // 442\n        };                                                                                  // 443\n                                                                                            // 444\n        addListener(function () {                                                           // 445\n            if (!remainingTasks) {                                                          // 446\n                var theCallback = callback;                                                 // 447\n                // prevent final callback from calling itself if it errors                  // 448\n                callback = function () {};                                                  // 449\n                                                                                            // 450\n                theCallback(null, results);                                                 // 451\n            }                                                                               // 452\n        });                                                                                 // 453\n                                                                                            // 454\n        _each(keys, function (k) {                                                          // 455\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];                           // 456\n            var taskCallback = function (err) {                                             // 457\n                var args = Array.prototype.slice.call(arguments, 1);                        // 458\n                if (args.length <= 1) {                                                     // 459\n                    args = args[0];                                                         // 460\n                }                                                                           // 461\n                if (err) {                                                                  // 462\n                    var safeResults = {};                                                   // 463\n                    _each(_keys(results), function(rkey) {                                  // 464\n                        safeResults[rkey] = results[rkey];                                  // 465\n                    });                                                                     // 466\n                    safeResults[k] = args;                                                  // 467\n                    callback(err, safeResults);                                             // 468\n                    // stop subsequent errors hitting callback multiple times               // 469\n                    callback = function () {};                                              // 470\n                }                                                                           // 471\n                else {                                                                      // 472\n                    results[k] = args;                                                      // 473\n                    async.setImmediate(taskComplete);                                       // 474\n                }                                                                           // 475\n            };                                                                              // 476\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];                  // 477\n            var ready = function () {                                                       // 478\n                return _reduce(requires, function (a, x) {                                  // 479\n                    return (a && results.hasOwnProperty(x));                                // 480\n                }, true) && !results.hasOwnProperty(k);                                     // 481\n            };                                                                              // 482\n            if (ready()) {                                                                  // 483\n                task[task.length - 1](taskCallback, results);                               // 484\n            }                                                                               // 485\n            else {                                                                          // 486\n                var listener = function () {                                                // 487\n                    if (ready()) {                                                          // 488\n                        removeListener(listener);                                           // 489\n                        task[task.length - 1](taskCallback, results);                       // 490\n                    }                                                                       // 491\n                };                                                                          // 492\n                addListener(listener);                                                      // 493\n            }                                                                               // 494\n        });                                                                                 // 495\n    };                                                                                      // 496\n                                                                                            // 497\n    async.retry = function(times, task, callback) {                                         // 498\n        var DEFAULT_TIMES = 5;                                                              // 499\n        var attempts = [];                                                                  // 500\n        // Use defaults if times not passed                                                 // 501\n        if (typeof times === 'function') {                                                  // 502\n            callback = task;                                                                // 503\n            task = times;                                                                   // 504\n            times = DEFAULT_TIMES;                                                          // 505\n        }                                                                                   // 506\n        // Make sure times is a number                                                      // 507\n        times = parseInt(times, 10) || DEFAULT_TIMES;                                       // 508\n        var wrappedTask = function(wrappedCallback, wrappedResults) {                       // 509\n            var retryAttempt = function(task, finalAttempt) {                               // 510\n                return function(seriesCallback) {                                           // 511\n                    task(function(err, result){                                             // 512\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});   // 513\n                    }, wrappedResults);                                                     // 514\n                };                                                                          // 515\n            };                                                                              // 516\n            while (times) {                                                                 // 517\n                attempts.push(retryAttempt(task, !(times-=1)));                             // 518\n            }                                                                               // 519\n            async.series(attempts, function(done, data){                                    // 520\n                data = data[data.length - 1];                                               // 521\n                (wrappedCallback || callback)(data.err, data.result);                       // 522\n            });                                                                             // 523\n        }                                                                                   // 524\n        // If a callback is passed, run this as a controll flow                             // 525\n        return callback ? wrappedTask() : wrappedTask                                       // 526\n    };                                                                                      // 527\n                                                                                            // 528\n    async.waterfall = function (tasks, callback) {                                          // 529\n        callback = callback || function () {};                                              // 530\n        if (!_isArray(tasks)) {                                                             // 531\n          var err = new Error('First argument to waterfall must be an array of functions'); // 532\n          return callback(err);                                                             // 533\n        }                                                                                   // 534\n        if (!tasks.length) {                                                                // 535\n            return callback();                                                              // 536\n        }                                                                                   // 537\n        var wrapIterator = function (iterator) {                                            // 538\n            return function (err) {                                                         // 539\n                if (err) {                                                                  // 540\n                    callback.apply(null, arguments);                                        // 541\n                    callback = function () {};                                              // 542\n                }                                                                           // 543\n                else {                                                                      // 544\n                    var args = Array.prototype.slice.call(arguments, 1);                    // 545\n                    var next = iterator.next();                                             // 546\n                    if (next) {                                                             // 547\n                        args.push(wrapIterator(next));                                      // 548\n                    }                                                                       // 549\n                    else {                                                                  // 550\n                        args.push(callback);                                                // 551\n                    }                                                                       // 552\n                    async.setImmediate(function () {                                        // 553\n                        iterator.apply(null, args);                                         // 554\n                    });                                                                     // 555\n                }                                                                           // 556\n            };                                                                              // 557\n        };                                                                                  // 558\n        wrapIterator(async.iterator(tasks))();                                              // 559\n    };                                                                                      // 560\n                                                                                            // 561\n    var _parallel = function(eachfn, tasks, callback) {                                     // 562\n        callback = callback || function () {};                                              // 563\n        if (_isArray(tasks)) {                                                              // 564\n            eachfn.map(tasks, function (fn, callback) {                                     // 565\n                if (fn) {                                                                   // 566\n                    fn(function (err) {                                                     // 567\n                        var args = Array.prototype.slice.call(arguments, 1);                // 568\n                        if (args.length <= 1) {                                             // 569\n                            args = args[0];                                                 // 570\n                        }                                                                   // 571\n                        callback.call(null, err, args);                                     // 572\n                    });                                                                     // 573\n                }                                                                           // 574\n            }, callback);                                                                   // 575\n        }                                                                                   // 576\n        else {                                                                              // 577\n            var results = {};                                                               // 578\n            eachfn.each(_keys(tasks), function (k, callback) {                              // 579\n                tasks[k](function (err) {                                                   // 580\n                    var args = Array.prototype.slice.call(arguments, 1);                    // 581\n                    if (args.length <= 1) {                                                 // 582\n                        args = args[0];                                                     // 583\n                    }                                                                       // 584\n                    results[k] = args;                                                      // 585\n                    callback(err);                                                          // 586\n                });                                                                         // 587\n            }, function (err) {                                                             // 588\n                callback(err, results);                                                     // 589\n            });                                                                             // 590\n        }                                                                                   // 591\n    };                                                                                      // 592\n                                                                                            // 593\n    async.parallel = function (tasks, callback) {                                           // 594\n        _parallel({ map: async.map, each: async.each }, tasks, callback);                   // 595\n    };                                                                                      // 596\n                                                                                            // 597\n    async.parallelLimit = function(tasks, limit, callback) {                                // 598\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);     // 599\n    };                                                                                      // 600\n                                                                                            // 601\n    async.series = function (tasks, callback) {                                             // 602\n        callback = callback || function () {};                                              // 603\n        if (_isArray(tasks)) {                                                              // 604\n            async.mapSeries(tasks, function (fn, callback) {                                // 605\n                if (fn) {                                                                   // 606\n                    fn(function (err) {                                                     // 607\n                        var args = Array.prototype.slice.call(arguments, 1);                // 608\n                        if (args.length <= 1) {                                             // 609\n                            args = args[0];                                                 // 610\n                        }                                                                   // 611\n                        callback.call(null, err, args);                                     // 612\n                    });                                                                     // 613\n                }                                                                           // 614\n            }, callback);                                                                   // 615\n        }                                                                                   // 616\n        else {                                                                              // 617\n            var results = {};                                                               // 618\n            async.eachSeries(_keys(tasks), function (k, callback) {                         // 619\n                tasks[k](function (err) {                                                   // 620\n                    var args = Array.prototype.slice.call(arguments, 1);                    // 621\n                    if (args.length <= 1) {                                                 // 622\n                        args = args[0];                                                     // 623\n                    }                                                                       // 624\n                    results[k] = args;                                                      // 625\n                    callback(err);                                                          // 626\n                });                                                                         // 627\n            }, function (err) {                                                             // 628\n                callback(err, results);                                                     // 629\n            });                                                                             // 630\n        }                                                                                   // 631\n    };                                                                                      // 632\n                                                                                            // 633\n    async.iterator = function (tasks) {                                                     // 634\n        var makeCallback = function (index) {                                               // 635\n            var fn = function () {                                                          // 636\n                if (tasks.length) {                                                         // 637\n                    tasks[index].apply(null, arguments);                                    // 638\n                }                                                                           // 639\n                return fn.next();                                                           // 640\n            };                                                                              // 641\n            fn.next = function () {                                                         // 642\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;          // 643\n            };                                                                              // 644\n            return fn;                                                                      // 645\n        };                                                                                  // 646\n        return makeCallback(0);                                                             // 647\n    };                                                                                      // 648\n                                                                                            // 649\n    async.apply = function (fn) {                                                           // 650\n        var args = Array.prototype.slice.call(arguments, 1);                                // 651\n        return function () {                                                                // 652\n            return fn.apply(                                                                // 653\n                null, args.concat(Array.prototype.slice.call(arguments))                    // 654\n            );                                                                              // 655\n        };                                                                                  // 656\n    };                                                                                      // 657\n                                                                                            // 658\n    var _concat = function (eachfn, arr, fn, callback) {                                    // 659\n        var r = [];                                                                         // 660\n        eachfn(arr, function (x, cb) {                                                      // 661\n            fn(x, function (err, y) {                                                       // 662\n                r = r.concat(y || []);                                                      // 663\n                cb(err);                                                                    // 664\n            });                                                                             // 665\n        }, function (err) {                                                                 // 666\n            callback(err, r);                                                               // 667\n        });                                                                                 // 668\n    };                                                                                      // 669\n    async.concat = doParallel(_concat);                                                     // 670\n    async.concatSeries = doSeries(_concat);                                                 // 671\n                                                                                            // 672\n    async.whilst = function (test, iterator, callback) {                                    // 673\n        if (test()) {                                                                       // 674\n            iterator(function (err) {                                                       // 675\n                if (err) {                                                                  // 676\n                    return callback(err);                                                   // 677\n                }                                                                           // 678\n                async.whilst(test, iterator, callback);                                     // 679\n            });                                                                             // 680\n        }                                                                                   // 681\n        else {                                                                              // 682\n            callback();                                                                     // 683\n        }                                                                                   // 684\n    };                                                                                      // 685\n                                                                                            // 686\n    async.doWhilst = function (iterator, test, callback) {                                  // 687\n        iterator(function (err) {                                                           // 688\n            if (err) {                                                                      // 689\n                return callback(err);                                                       // 690\n            }                                                                               // 691\n            var args = Array.prototype.slice.call(arguments, 1);                            // 692\n            if (test.apply(null, args)) {                                                   // 693\n                async.doWhilst(iterator, test, callback);                                   // 694\n            }                                                                               // 695\n            else {                                                                          // 696\n                callback();                                                                 // 697\n            }                                                                               // 698\n        });                                                                                 // 699\n    };                                                                                      // 700\n                                                                                            // 701\n    async.until = function (test, iterator, callback) {                                     // 702\n        if (!test()) {                                                                      // 703\n            iterator(function (err) {                                                       // 704\n                if (err) {                                                                  // 705\n                    return callback(err);                                                   // 706\n                }                                                                           // 707\n                async.until(test, iterator, callback);                                      // 708\n            });                                                                             // 709\n        }                                                                                   // 710\n        else {                                                                              // 711\n            callback();                                                                     // 712\n        }                                                                                   // 713\n    };                                                                                      // 714\n                                                                                            // 715\n    async.doUntil = function (iterator, test, callback) {                                   // 716\n        iterator(function (err) {                                                           // 717\n            if (err) {                                                                      // 718\n                return callback(err);                                                       // 719\n            }                                                                               // 720\n            var args = Array.prototype.slice.call(arguments, 1);                            // 721\n            if (!test.apply(null, args)) {                                                  // 722\n                async.doUntil(iterator, test, callback);                                    // 723\n            }                                                                               // 724\n            else {                                                                          // 725\n                callback();                                                                 // 726\n            }                                                                               // 727\n        });                                                                                 // 728\n    };                                                                                      // 729\n                                                                                            // 730\n    async.queue = function (worker, concurrency) {                                          // 731\n        if (concurrency === undefined) {                                                    // 732\n            concurrency = 1;                                                                // 733\n        }                                                                                   // 734\n        function _insert(q, data, pos, callback) {                                          // 735\n          if (!q.started){                                                                  // 736\n            q.started = true;                                                               // 737\n          }                                                                                 // 738\n          if (!_isArray(data)) {                                                            // 739\n              data = [data];                                                                // 740\n          }                                                                                 // 741\n          if(data.length == 0) {                                                            // 742\n             // call drain immediately if there are no tasks                                // 743\n             return async.setImmediate(function() {                                         // 744\n                 if (q.drain) {                                                             // 745\n                     q.drain();                                                             // 746\n                 }                                                                          // 747\n             });                                                                            // 748\n          }                                                                                 // 749\n          _each(data, function(task) {                                                      // 750\n              var item = {                                                                  // 751\n                  data: task,                                                               // 752\n                  callback: typeof callback === 'function' ? callback : null                // 753\n              };                                                                            // 754\n                                                                                            // 755\n              if (pos) {                                                                    // 756\n                q.tasks.unshift(item);                                                      // 757\n              } else {                                                                      // 758\n                q.tasks.push(item);                                                         // 759\n              }                                                                             // 760\n                                                                                            // 761\n              if (q.saturated && q.tasks.length === q.concurrency) {                        // 762\n                  q.saturated();                                                            // 763\n              }                                                                             // 764\n              async.setImmediate(q.process);                                                // 765\n          });                                                                               // 766\n        }                                                                                   // 767\n                                                                                            // 768\n        var workers = 0;                                                                    // 769\n        var q = {                                                                           // 770\n            tasks: [],                                                                      // 771\n            concurrency: concurrency,                                                       // 772\n            saturated: null,                                                                // 773\n            empty: null,                                                                    // 774\n            drain: null,                                                                    // 775\n            started: false,                                                                 // 776\n            paused: false,                                                                  // 777\n            push: function (data, callback) {                                               // 778\n              _insert(q, data, false, callback);                                            // 779\n            },                                                                              // 780\n            kill: function () {                                                             // 781\n              q.drain = null;                                                               // 782\n              q.tasks = [];                                                                 // 783\n            },                                                                              // 784\n            unshift: function (data, callback) {                                            // 785\n              _insert(q, data, true, callback);                                             // 786\n            },                                                                              // 787\n            process: function () {                                                          // 788\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {               // 789\n                    var task = q.tasks.shift();                                             // 790\n                    if (q.empty && q.tasks.length === 0) {                                  // 791\n                        q.empty();                                                          // 792\n                    }                                                                       // 793\n                    workers += 1;                                                           // 794\n                    var next = function () {                                                // 795\n                        workers -= 1;                                                       // 796\n                        if (task.callback) {                                                // 797\n                            task.callback.apply(task, arguments);                           // 798\n                        }                                                                   // 799\n                        if (q.drain && q.tasks.length + workers === 0) {                    // 800\n                            q.drain();                                                      // 801\n                        }                                                                   // 802\n                        q.process();                                                        // 803\n                    };                                                                      // 804\n                    var cb = only_once(next);                                               // 805\n                    worker(task.data, cb);                                                  // 806\n                }                                                                           // 807\n            },                                                                              // 808\n            length: function () {                                                           // 809\n                return q.tasks.length;                                                      // 810\n            },                                                                              // 811\n            running: function () {                                                          // 812\n                return workers;                                                             // 813\n            },                                                                              // 814\n            idle: function() {                                                              // 815\n                return q.tasks.length + workers === 0;                                      // 816\n            },                                                                              // 817\n            pause: function () {                                                            // 818\n                if (q.paused === true) { return; }                                          // 819\n                q.paused = true;                                                            // 820\n            },                                                                              // 821\n            resume: function () {                                                           // 822\n                if (q.paused === false) { return; }                                         // 823\n                q.paused = false;                                                           // 824\n                // Need to call q.process once per concurrent                               // 825\n                // worker to preserve full concurrency after pause                          // 826\n                for (var w = 1; w <= q.concurrency; w++) {                                  // 827\n                    async.setImmediate(q.process);                                          // 828\n                }                                                                           // 829\n            }                                                                               // 830\n        };                                                                                  // 831\n        return q;                                                                           // 832\n    };                                                                                      // 833\n                                                                                            // 834\n    async.priorityQueue = function (worker, concurrency) {                                  // 835\n                                                                                            // 836\n        function _compareTasks(a, b){                                                       // 837\n          return a.priority - b.priority;                                                   // 838\n        };                                                                                  // 839\n                                                                                            // 840\n        function _binarySearch(sequence, item, compare) {                                   // 841\n          var beg = -1,                                                                     // 842\n              end = sequence.length - 1;                                                    // 843\n          while (beg < end) {                                                               // 844\n            var mid = beg + ((end - beg + 1) >>> 1);                                        // 845\n            if (compare(item, sequence[mid]) >= 0) {                                        // 846\n              beg = mid;                                                                    // 847\n            } else {                                                                        // 848\n              end = mid - 1;                                                                // 849\n            }                                                                               // 850\n          }                                                                                 // 851\n          return beg;                                                                       // 852\n        }                                                                                   // 853\n                                                                                            // 854\n        function _insert(q, data, priority, callback) {                                     // 855\n          if (!q.started){                                                                  // 856\n            q.started = true;                                                               // 857\n          }                                                                                 // 858\n          if (!_isArray(data)) {                                                            // 859\n              data = [data];                                                                // 860\n          }                                                                                 // 861\n          if(data.length == 0) {                                                            // 862\n             // call drain immediately if there are no tasks                                // 863\n             return async.setImmediate(function() {                                         // 864\n                 if (q.drain) {                                                             // 865\n                     q.drain();                                                             // 866\n                 }                                                                          // 867\n             });                                                                            // 868\n          }                                                                                 // 869\n          _each(data, function(task) {                                                      // 870\n              var item = {                                                                  // 871\n                  data: task,                                                               // 872\n                  priority: priority,                                                       // 873\n                  callback: typeof callback === 'function' ? callback : null                // 874\n              };                                                                            // 875\n                                                                                            // 876\n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);     // 877\n                                                                                            // 878\n              if (q.saturated && q.tasks.length === q.concurrency) {                        // 879\n                  q.saturated();                                                            // 880\n              }                                                                             // 881\n              async.setImmediate(q.process);                                                // 882\n          });                                                                               // 883\n        }                                                                                   // 884\n                                                                                            // 885\n        // Start with a normal queue                                                        // 886\n        var q = async.queue(worker, concurrency);                                           // 887\n                                                                                            // 888\n        // Override push to accept second parameter representing priority                   // 889\n        q.push = function (data, priority, callback) {                                      // 890\n          _insert(q, data, priority, callback);                                             // 891\n        };                                                                                  // 892\n                                                                                            // 893\n        // Remove unshift function                                                          // 894\n        delete q.unshift;                                                                   // 895\n                                                                                            // 896\n        return q;                                                                           // 897\n    };                                                                                      // 898\n                                                                                            // 899\n    async.cargo = function (worker, payload) {                                              // 900\n        var working     = false,                                                            // 901\n            tasks       = [];                                                               // 902\n                                                                                            // 903\n        var cargo = {                                                                       // 904\n            tasks: tasks,                                                                   // 905\n            payload: payload,                                                               // 906\n            saturated: null,                                                                // 907\n            empty: null,                                                                    // 908\n            drain: null,                                                                    // 909\n            drained: true,                                                                  // 910\n            push: function (data, callback) {                                               // 911\n                if (!_isArray(data)) {                                                      // 912\n                    data = [data];                                                          // 913\n                }                                                                           // 914\n                _each(data, function(task) {                                                // 915\n                    tasks.push({                                                            // 916\n                        data: task,                                                         // 917\n                        callback: typeof callback === 'function' ? callback : null          // 918\n                    });                                                                     // 919\n                    cargo.drained = false;                                                  // 920\n                    if (cargo.saturated && tasks.length === payload) {                      // 921\n                        cargo.saturated();                                                  // 922\n                    }                                                                       // 923\n                });                                                                         // 924\n                async.setImmediate(cargo.process);                                          // 925\n            },                                                                              // 926\n            process: function process() {                                                   // 927\n                if (working) return;                                                        // 928\n                if (tasks.length === 0) {                                                   // 929\n                    if(cargo.drain && !cargo.drained) cargo.drain();                        // 930\n                    cargo.drained = true;                                                   // 931\n                    return;                                                                 // 932\n                }                                                                           // 933\n                                                                                            // 934\n                var ts = typeof payload === 'number'                                        // 935\n                            ? tasks.splice(0, payload)                                      // 936\n                            : tasks.splice(0, tasks.length);                                // 937\n                                                                                            // 938\n                var ds = _map(ts, function (task) {                                         // 939\n                    return task.data;                                                       // 940\n                });                                                                         // 941\n                                                                                            // 942\n                if(cargo.empty) cargo.empty();                                              // 943\n                working = true;                                                             // 944\n                worker(ds, function () {                                                    // 945\n                    working = false;                                                        // 946\n                                                                                            // 947\n                    var args = arguments;                                                   // 948\n                    _each(ts, function (data) {                                             // 949\n                        if (data.callback) {                                                // 950\n                            data.callback.apply(null, args);                                // 951\n                        }                                                                   // 952\n                    });                                                                     // 953\n                                                                                            // 954\n                    process();                                                              // 955\n                });                                                                         // 956\n            },                                                                              // 957\n            length: function () {                                                           // 958\n                return tasks.length;                                                        // 959\n            },                                                                              // 960\n            running: function () {                                                          // 961\n                return working;                                                             // 962\n            }                                                                               // 963\n        };                                                                                  // 964\n        return cargo;                                                                       // 965\n    };                                                                                      // 966\n                                                                                            // 967\n    var _console_fn = function (name) {                                                     // 968\n        return function (fn) {                                                              // 969\n            var args = Array.prototype.slice.call(arguments, 1);                            // 970\n            fn.apply(null, args.concat([function (err) {                                    // 971\n                var args = Array.prototype.slice.call(arguments, 1);                        // 972\n                if (typeof console !== 'undefined') {                                       // 973\n                    if (err) {                                                              // 974\n                        if (console.error) {                                                // 975\n                            console.error(err);                                             // 976\n                        }                                                                   // 977\n                    }                                                                       // 978\n                    else if (console[name]) {                                               // 979\n                        _each(args, function (x) {                                          // 980\n                            console[name](x);                                               // 981\n                        });                                                                 // 982\n                    }                                                                       // 983\n                }                                                                           // 984\n            }]));                                                                           // 985\n        };                                                                                  // 986\n    };                                                                                      // 987\n    async.log = _console_fn('log');                                                         // 988\n    async.dir = _console_fn('dir');                                                         // 989\n    /*async.info = _console_fn('info');                                                     // 990\n    async.warn = _console_fn('warn');                                                       // 991\n    async.error = _console_fn('error');*/                                                   // 992\n                                                                                            // 993\n    async.memoize = function (fn, hasher) {                                                 // 994\n        var memo = {};                                                                      // 995\n        var queues = {};                                                                    // 996\n        hasher = hasher || function (x) {                                                   // 997\n            return x;                                                                       // 998\n        };                                                                                  // 999\n        var memoized = function () {                                                        // 1000\n            var args = Array.prototype.slice.call(arguments);                               // 1001\n            var callback = args.pop();                                                      // 1002\n            var key = hasher.apply(null, args);                                             // 1003\n            if (key in memo) {                                                              // 1004\n                async.nextTick(function () {                                                // 1005\n                    callback.apply(null, memo[key]);                                        // 1006\n                });                                                                         // 1007\n            }                                                                               // 1008\n            else if (key in queues) {                                                       // 1009\n                queues[key].push(callback);                                                 // 1010\n            }                                                                               // 1011\n            else {                                                                          // 1012\n                queues[key] = [callback];                                                   // 1013\n                fn.apply(null, args.concat([function () {                                   // 1014\n                    memo[key] = arguments;                                                  // 1015\n                    var q = queues[key];                                                    // 1016\n                    delete queues[key];                                                     // 1017\n                    for (var i = 0, l = q.length; i < l; i++) {                             // 1018\n                      q[i].apply(null, arguments);                                          // 1019\n                    }                                                                       // 1020\n                }]));                                                                       // 1021\n            }                                                                               // 1022\n        };                                                                                  // 1023\n        memoized.memo = memo;                                                               // 1024\n        memoized.unmemoized = fn;                                                           // 1025\n        return memoized;                                                                    // 1026\n    };                                                                                      // 1027\n                                                                                            // 1028\n    async.unmemoize = function (fn) {                                                       // 1029\n      return function () {                                                                  // 1030\n        return (fn.unmemoized || fn).apply(null, arguments);                                // 1031\n      };                                                                                    // 1032\n    };                                                                                      // 1033\n                                                                                            // 1034\n    async.times = function (count, iterator, callback) {                                    // 1035\n        var counter = [];                                                                   // 1036\n        for (var i = 0; i < count; i++) {                                                   // 1037\n            counter.push(i);                                                                // 1038\n        }                                                                                   // 1039\n        return async.map(counter, iterator, callback);                                      // 1040\n    };                                                                                      // 1041\n                                                                                            // 1042\n    async.timesSeries = function (count, iterator, callback) {                              // 1043\n        var counter = [];                                                                   // 1044\n        for (var i = 0; i < count; i++) {                                                   // 1045\n            counter.push(i);                                                                // 1046\n        }                                                                                   // 1047\n        return async.mapSeries(counter, iterator, callback);                                // 1048\n    };                                                                                      // 1049\n                                                                                            // 1050\n    async.seq = function (/* functions... */) {                                             // 1051\n        var fns = arguments;                                                                // 1052\n        return function () {                                                                // 1053\n            var that = this;                                                                // 1054\n            var args = Array.prototype.slice.call(arguments);                               // 1055\n            var callback = args.pop();                                                      // 1056\n            async.reduce(fns, args, function (newargs, fn, cb) {                            // 1057\n                fn.apply(that, newargs.concat([function () {                                // 1058\n                    var err = arguments[0];                                                 // 1059\n                    var nextargs = Array.prototype.slice.call(arguments, 1);                // 1060\n                    cb(err, nextargs);                                                      // 1061\n                }]))                                                                        // 1062\n            },                                                                              // 1063\n            function (err, results) {                                                       // 1064\n                callback.apply(that, [err].concat(results));                                // 1065\n            });                                                                             // 1066\n        };                                                                                  // 1067\n    };                                                                                      // 1068\n                                                                                            // 1069\n    async.compose = function (/* functions... */) {                                         // 1070\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));                // 1071\n    };                                                                                      // 1072\n                                                                                            // 1073\n    var _applyEach = function (eachfn, fns /*args...*/) {                                   // 1074\n        var go = function () {                                                              // 1075\n            var that = this;                                                                // 1076\n            var args = Array.prototype.slice.call(arguments);                               // 1077\n            var callback = args.pop();                                                      // 1078\n            return eachfn(fns, function (fn, cb) {                                          // 1079\n                fn.apply(that, args.concat([cb]));                                          // 1080\n            },                                                                              // 1081\n            callback);                                                                      // 1082\n        };                                                                                  // 1083\n        if (arguments.length > 2) {                                                         // 1084\n            var args = Array.prototype.slice.call(arguments, 2);                            // 1085\n            return go.apply(this, args);                                                    // 1086\n        }                                                                                   // 1087\n        else {                                                                              // 1088\n            return go;                                                                      // 1089\n        }                                                                                   // 1090\n    };                                                                                      // 1091\n    async.applyEach = doParallel(_applyEach);                                               // 1092\n    async.applyEachSeries = doSeries(_applyEach);                                           // 1093\n                                                                                            // 1094\n    async.forever = function (fn, callback) {                                               // 1095\n        function next(err) {                                                                // 1096\n            if (err) {                                                                      // 1097\n                if (callback) {                                                             // 1098\n                    return callback(err);                                                   // 1099\n                }                                                                           // 1100\n                throw err;                                                                  // 1101\n            }                                                                               // 1102\n            fn(next);                                                                       // 1103\n        }                                                                                   // 1104\n        next();                                                                             // 1105\n    };                                                                                      // 1106\n                                                                                            // 1107\n    // Node.js                                                                              // 1108\n    if (typeof module !== 'undefined' && module.exports) {                                  // 1109\n        module.exports = async;                                                             // 1110\n    }                                                                                       // 1111\n    // AMD / RequireJS                                                                      // 1112\n    else if (typeof define !== 'undefined' && define.amd) {                                 // 1113\n        define([], function () {                                                            // 1114\n            return async;                                                                   // 1115\n        });                                                                                 // 1116\n    }                                                                                       // 1117\n    // included directly via <script> tag                                                   // 1118\n    else {                                                                                  // 1119\n        root.async = async;                                                                 // 1120\n    }                                                                                       // 1121\n                                                                                            // 1122\n}());                                                                                       // 1123\n                                                                                            // 1124\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/peerlibrary:async/export-async.js                                               //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\nasync = this.async;                                                                         // 1\n                                                                                            // 2\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]