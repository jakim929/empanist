[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar EJSON = Package.ejson.EJSON;\nvar Spacebars = Package.spacebars.Spacebars;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar BaseComponent = Package['peerlibrary:base-component'].BaseComponent;\nvar BaseComponentDebug = Package['peerlibrary:base-component'].BaseComponentDebug;\nvar assert = Package['peerlibrary:assert'].assert;\nvar ReactiveField = Package['peerlibrary:reactive-field'].ReactiveField;\nvar ComputedField = Package['peerlibrary:computed-field'].ComputedField;\nvar DataLookup = Package['peerlibrary:data-lookup'].DataLookup;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar __coffeescriptShare, Template, AttributeHandler, ElementAttributesUpdater, BlazeComponent, BlazeComponentDebug;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/template.coffee.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                                                                       // 1\n                                                                                                                       //\nTemplate = Blaze.Template;                                                                                             // 1\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/compatibility/templating.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* This file is needed to backport this pull request: https://github.com/meteor/meteor/pull/5903                       // 1\n   If it is a copy of templating.js file wrapped into a condition.                                                     // 2\n                                                                                                                       // 3\n   TODO: Remove this file eventually.                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nif (!Blaze.Template.__checkName) {                                                                                     // 7\n  // Packages and apps add templates on to this object.                                                                // 8\n                                                                                                                       // 9\n  /**                                                                                                                  // 10\n   * @summary The class for defining templates                                                                         // 11\n   * @class                                                                                                            // 12\n   * @instanceName Template.myTemplate                                                                                 // 13\n   */                                                                                                                  // 14\n  Template = Blaze.Template;                                                                                           // 15\n                                                                                                                       // 16\n  var RESERVED_TEMPLATE_NAMES = \"__proto__ name\".split(\" \");                                                           // 17\n                                                                                                                       // 18\n  // Check for duplicate template names and illegal names that won't work.                                             // 19\n  Template.__checkName = function (name) {                                                                             // 20\n    // Some names can't be used for Templates. These include:                                                          // 21\n    //  - Properties Blaze sets on the Template object.                                                                // 22\n    //  - Properties that some browsers don't let the code to set.                                                     // 23\n    //    These are specified in RESERVED_TEMPLATE_NAMES.                                                              // 24\n    if (name in Template || _.contains(RESERVED_TEMPLATE_NAMES, name)) {                                               // 25\n      if ((Template[name] instanceof Template) && name !== \"body\")                                                     // 26\n        throw new Error(\"There are multiple templates named '\" + name + \"'. Each template needs a unique name.\");      // 27\n      throw new Error(\"This template name is reserved: \" + name);                                                      // 28\n    }                                                                                                                  // 29\n  };                                                                                                                   // 30\n                                                                                                                       // 31\n  // XXX COMPAT WITH 0.8.3                                                                                             // 32\n  Template.__define__ = function (name, renderFunc) {                                                                  // 33\n    Template.__checkName(name);                                                                                        // 34\n    Template[name] = new Template(\"Template.\" + name, renderFunc);                                                     // 35\n    // Exempt packages built pre-0.9.0 from warnings about using old                                                   // 36\n    // helper syntax, because we can.  It's not very useful to get a                                                   // 37\n    // warning about someone else's code (like a package on Atmosphere),                                               // 38\n    // and this should at least put a bit of a dent in number of warnings                                              // 39\n    // that come from packages that haven't been updated lately.                                                       // 40\n    Template[name]._NOWARN_OLDSTYLE_HELPERS = true;                                                                    // 41\n  };                                                                                                                   // 42\n                                                                                                                       // 43\n  // Define a template `Template.body` that renders its                                                                // 44\n  // `contentRenderFuncs`.  `<body>` tags (of which there may be                                                       // 45\n  // multiple) will have their contents added to it.                                                                   // 46\n                                                                                                                       // 47\n  /**                                                                                                                  // 48\n   * @summary The [template object](#templates_api) representing your `<body>`                                         // 49\n   * tag.                                                                                                              // 50\n   * @locus Client                                                                                                     // 51\n   */                                                                                                                  // 52\n  Template.body = new Template('body', function () {                                                                   // 53\n    var view = this;                                                                                                   // 54\n    return _.map(Template.body.contentRenderFuncs, function (func) {                                                   // 55\n      return func.apply(view);                                                                                         // 56\n    });                                                                                                                // 57\n  });                                                                                                                  // 58\n  Template.body.contentRenderFuncs = []; // array of Blaze.Views                                                       // 59\n  Template.body.view = null;                                                                                           // 60\n                                                                                                                       // 61\n  Template.body.addContent = function (renderFunc) {                                                                   // 62\n    Template.body.contentRenderFuncs.push(renderFunc);                                                                 // 63\n  };                                                                                                                   // 64\n                                                                                                                       // 65\n  // This function does not use `this` and so it may be called                                                         // 66\n  // as `Meteor.startup(Template.body.renderIntoDocument)`.                                                            // 67\n  Template.body.renderToDocument = function () {                                                                       // 68\n    // Only do it once.                                                                                                // 69\n    if (Template.body.view)                                                                                            // 70\n      return;                                                                                                          // 71\n                                                                                                                       // 72\n    var view = Blaze.render(Template.body, document.body);                                                             // 73\n    Template.body.view = view;                                                                                         // 74\n  };                                                                                                                   // 75\n                                                                                                                       // 76\n  // XXX COMPAT WITH 0.9.0                                                                                             // 77\n  UI.body = Template.body;                                                                                             // 78\n                                                                                                                       // 79\n  // XXX COMPAT WITH 0.9.0                                                                                             // 80\n  // (<body> tags in packages built with 0.9.0)                                                                        // 81\n  Template.__body__ = Template.body;                                                                                   // 82\n  Template.__body__.__contentParts = Template.body.contentViews;                                                       // 83\n  Template.__body__.__instantiate = Template.body.renderToDocument;                                                    // 84\n}                                                                                                                      // 85\n                                                                                                                       // 86\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/compatibility/template.dynamic.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"__dynamicBackport\");                                                                             // 2\nTemplate[\"__dynamicBackport\"] = new Template(\"Template.__dynamicBackport\", (function() {                               // 3\n  var view = this;                                                                                                     // 4\n  return [ Blaze.View(\"lookup:checkContext\", function() {                                                              // 5\n    return Spacebars.mustache(view.lookup(\"checkContext\"));                                                            // 6\n  }), \"\\n  \", Blaze.If(function() {                                                                                    // 7\n    return Spacebars.call(view.lookup(\"dataContextPresent\"));                                                          // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"__dynamicWithDataContext\"), function() {                 // 10\n      return Blaze._InOuterTemplateScope(view, function() {                                                            // 11\n        return Spacebars.include(function() {                                                                          // 12\n          return Spacebars.call(view.templateContentBlock);                                                            // 13\n        });                                                                                                            // 14\n      });                                                                                                              // 15\n    }), \"\\n  \" ];                                                                                                      // 16\n  }, function() {                                                                                                      // 17\n    return [ \"\\n    \\n    \", Blaze._TemplateWith(function() {                                                          // 18\n      return {                                                                                                         // 19\n        template: Spacebars.call(view.lookup(\"template\")),                                                             // 20\n        data: Spacebars.call(view.lookup(\"..\"))                                                                        // 21\n      };                                                                                                               // 22\n    }, function() {                                                                                                    // 23\n      return Spacebars.include(view.lookupTemplate(\"__dynamicWithDataContext\"), function() {                           // 24\n        return Blaze._InOuterTemplateScope(view, function() {                                                          // 25\n          return Spacebars.include(function() {                                                                        // 26\n            return Spacebars.call(view.templateContentBlock);                                                          // 27\n          });                                                                                                          // 28\n        });                                                                                                            // 29\n      });                                                                                                              // 30\n    }), \"\\n  \" ];                                                                                                      // 31\n  }) ];                                                                                                                // 32\n}));                                                                                                                   // 33\n                                                                                                                       // 34\nTemplate.__checkName(\"__dynamicWithDataContextBackport\");                                                              // 35\nTemplate[\"__dynamicWithDataContextBackport\"] = new Template(\"Template.__dynamicWithDataContextBackport\", (function() {\n  var view = this;                                                                                                     // 37\n  return Spacebars.With(function() {                                                                                   // 38\n    return Spacebars.dataMustache(view.lookup(\"chooseTemplate\"), view.lookup(\"template\"));                             // 39\n  }, function() {                                                                                                      // 40\n    return [ \"\\n    \\n    \", Blaze._TemplateWith(function() {                                                          // 41\n      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"data\"));                                                 // 42\n    }, function() {                                                                                                    // 43\n      return Spacebars.include(view.lookupTemplate(\"..\"), function() {                                                 // 44\n        return Blaze._InOuterTemplateScope(view, function() {                                                          // 45\n          return Spacebars.include(function() {                                                                        // 46\n            return Spacebars.call(view.templateContentBlock);                                                          // 47\n          });                                                                                                          // 48\n        });                                                                                                            // 49\n      });                                                                                                              // 50\n    }), \"\\n  \" ];                                                                                                      // 51\n  });                                                                                                                  // 52\n}));                                                                                                                   // 53\n                                                                                                                       // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/compatibility/dynamic.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* This file is needed to backport this pull request: https://github.com/meteor/meteor/pull/5903                       // 1\n   If it is a copy of dynamic.js file wrapped into a condition with renaming of backported templates.                  // 2\n                                                                                                                       // 3\n   TODO: Remove this file eventually.                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nif (!Blaze.Template.__dynamicWithDataContext) {                                                                        // 7\n  Blaze.Template.__dynamicWithDataContext = Blaze.Template.__dynamicWithDataContextBackport;                           // 8\n  Blaze.Template.__dynamicWithDataContext.viewName = 'Template.__dynamicWithDataContext';                              // 9\n  Blaze.Template.__dynamic = Blaze.Template.__dynamicBackport;                                                         // 10\n  Blaze.Template.__dynamic.viewName = 'Template.__dynamic';                                                            // 11\n                                                                                                                       // 12\n  var Template = Blaze.Template;                                                                                       // 13\n                                                                                                                       // 14\n  /**                                                                                                                  // 15\n   * @isTemplate true                                                                                                  // 16\n   * @memberOf Template                                                                                                // 17\n   * @function dynamic                                                                                                 // 18\n   * @summary Choose a template to include dynamically, by name.                                                       // 19\n   * @locus Templates                                                                                                  // 20\n   * @param {String} template The name of the template to include.                                                     // 21\n   * @param {Object} [data] Optional. The data context in which to include the                                         // 22\n   * template.                                                                                                         // 23\n   */                                                                                                                  // 24\n                                                                                                                       // 25\n  Template.__dynamicWithDataContext.helpers({                                                                          // 26\n    chooseTemplate: function (name) {                                                                                  // 27\n      return Blaze._getTemplate(name, function () {                                                                    // 28\n        return Template.instance();                                                                                    // 29\n      });                                                                                                              // 30\n    }                                                                                                                  // 31\n  });                                                                                                                  // 32\n                                                                                                                       // 33\n  Template.__dynamic.helpers({                                                                                         // 34\n    dataContextPresent: function () {                                                                                  // 35\n      return _.has(this, \"data\");                                                                                      // 36\n    },                                                                                                                 // 37\n    checkContext: function () {                                                                                        // 38\n      if (!_.has(this, \"template\")) {                                                                                  // 39\n        throw new Error(\"Must specify name in the 'template' argument \" +                                              // 40\n          \"to {{> Template.dynamic}}.\");                                                                               // 41\n      }                                                                                                                // 42\n                                                                                                                       // 43\n      _.each(this, function (v, k) {                                                                                   // 44\n        if (k !== \"template\" && k !== \"data\") {                                                                        // 45\n          throw new Error(\"Invalid argument to {{> Template.dynamic}}: \" +                                             // 46\n            k);                                                                                                        // 47\n        }                                                                                                              // 48\n      });                                                                                                              // 49\n    }                                                                                                                  // 50\n  });                                                                                                                  // 51\n}                                                                                                                      // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/compatibility/lookup.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* This file backports Blaze lookup.js from Meteor 1.2 so that required Blaze features to support Blaze                // 1\n   Components are available also in older Meteor versions.                                                             // 2\n   It is a copy of lookup.js file from Meteor 1.2 with lexical scope lookup commented out.                             // 3\n                                                                                                                       // 4\n   TODO: Remove this file eventually.                                                                                  // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n// Check if we are not running Meteor 1.2+.                                                                            // 8\nif (! Blaze._getTemplate) {                                                                                            // 9\n  // If `x` is a function, binds the value of `this` for that function                                                 // 10\n  // to the current data context.                                                                                      // 11\n  var bindDataContext = function (x) {                                                                                 // 12\n    if (typeof x === 'function') {                                                                                     // 13\n      return function () {                                                                                             // 14\n        var data = Blaze.getData();                                                                                    // 15\n        if (data == null)                                                                                              // 16\n          data = {};                                                                                                   // 17\n        return x.apply(data, arguments);                                                                               // 18\n      };                                                                                                               // 19\n    }                                                                                                                  // 20\n    return x;                                                                                                          // 21\n  };                                                                                                                   // 22\n                                                                                                                       // 23\n  Blaze._getTemplateHelper = function (template, name, tmplInstanceFunc) {                                             // 24\n    // XXX COMPAT WITH 0.9.3                                                                                           // 25\n    var isKnownOldStyleHelper = false;                                                                                 // 26\n                                                                                                                       // 27\n    if (template.__helpers.has(name)) {                                                                                // 28\n      var helper = template.__helpers.get(name);                                                                       // 29\n      if (helper === Blaze._OLDSTYLE_HELPER) {                                                                         // 30\n        isKnownOldStyleHelper = true;                                                                                  // 31\n      } else if (helper != null) {                                                                                     // 32\n        return wrapHelper(bindDataContext(helper), tmplInstanceFunc);                                                  // 33\n      } else {                                                                                                         // 34\n        return null;                                                                                                   // 35\n      }                                                                                                                // 36\n    }                                                                                                                  // 37\n                                                                                                                       // 38\n    // old-style helper                                                                                                // 39\n    if (name in template) {                                                                                            // 40\n      // Only warn once per helper                                                                                     // 41\n      if (!isKnownOldStyleHelper) {                                                                                    // 42\n        template.__helpers.set(name, Blaze._OLDSTYLE_HELPER);                                                          // 43\n        if (!template._NOWARN_OLDSTYLE_HELPERS) {                                                                      // 44\n          Blaze._warn('Assigning helper with `' + template.viewName + '.' +                                            // 45\n            name + ' = ...` is deprecated.  Use `' + template.viewName +                                               // 46\n            '.helpers(...)` instead.');                                                                                // 47\n        }                                                                                                              // 48\n      }                                                                                                                // 49\n      if (template[name] != null) {                                                                                    // 50\n        return wrapHelper(bindDataContext(template[name]), tmplInstanceFunc);                                          // 51\n      }                                                                                                                // 52\n    }                                                                                                                  // 53\n                                                                                                                       // 54\n    return null;                                                                                                       // 55\n  };                                                                                                                   // 56\n                                                                                                                       // 57\n  var wrapHelper = function (f, templateFunc) {                                                                        // 58\n    // XXX COMPAT WITH METEOR 1.0.3.2                                                                                  // 59\n    if (!Blaze.Template._withTemplateInstanceFunc) {                                                                   // 60\n      return Blaze._wrapCatchingExceptions(f, 'template helper');                                                      // 61\n    }                                                                                                                  // 62\n                                                                                                                       // 63\n    if (typeof f !== \"function\") {                                                                                     // 64\n      return f;                                                                                                        // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    return function () {                                                                                               // 68\n      var self = this;                                                                                                 // 69\n      var args = arguments;                                                                                            // 70\n                                                                                                                       // 71\n      return Blaze.Template._withTemplateInstanceFunc(templateFunc, function () {                                      // 72\n        return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args);                                  // 73\n      });                                                                                                              // 74\n    };                                                                                                                 // 75\n  };                                                                                                                   // 76\n                                                                                                                       // 77\n  // templateInstance argument is provided to be available for possible                                                // 78\n  // alternative implementations of this function by 3rd party packages.                                               // 79\n  Blaze._getTemplate = function (name, templateInstance) {                                                             // 80\n    if ((name in Blaze.Template) && (Blaze.Template[name] instanceof Blaze.Template)) {                                // 81\n      return Blaze.Template[name];                                                                                     // 82\n    }                                                                                                                  // 83\n    return null;                                                                                                       // 84\n  };                                                                                                                   // 85\n                                                                                                                       // 86\n  Blaze._getGlobalHelper = function (name, templateInstance) {                                                         // 87\n    if (Blaze._globalHelpers[name] != null) {                                                                          // 88\n      return wrapHelper(bindDataContext(Blaze._globalHelpers[name]), templateInstance);                                // 89\n    }                                                                                                                  // 90\n    return null;                                                                                                       // 91\n  };                                                                                                                   // 92\n                                                                                                                       // 93\n  Blaze.View.prototype.lookup = function (name, _options) {                                                            // 94\n    var template = this.template;                                                                                      // 95\n    var lookupTemplate = _options && _options.template;                                                                // 96\n    var helper;                                                                                                        // 97\n    var binding;                                                                                                       // 98\n    var boundTmplInstance;                                                                                             // 99\n    var foundTemplate;                                                                                                 // 100\n                                                                                                                       // 101\n    if (this.templateInstance) {                                                                                       // 102\n      boundTmplInstance = _.bind(this.templateInstance, this);                                                         // 103\n    }                                                                                                                  // 104\n                                                                                                                       // 105\n    // 0. looking up the parent data context with the special \"../\" syntax                                             // 106\n    if (/^\\./.test(name)) {                                                                                            // 107\n      // starts with a dot. must be a series of dots which maps to an                                                  // 108\n      // ancestor of the appropriate height.                                                                           // 109\n      if (!/^(\\.)+$/.test(name))                                                                                       // 110\n        throw new Error(\"id starting with dot must be a series of dots\");                                              // 111\n                                                                                                                       // 112\n      return Blaze._parentData(name.length - 1, true /*_functionWrapped*/);                                            // 113\n                                                                                                                       // 114\n    }                                                                                                                  // 115\n                                                                                                                       // 116\n    // 1. look up a helper on the current template                                                                     // 117\n    if (template && ((helper = Blaze._getTemplateHelper(template, name, boundTmplInstance)) != null)) {                // 118\n      return helper;                                                                                                   // 119\n    }                                                                                                                  // 120\n                                                                                                                       // 121\n    // 2. look up a binding by traversing the lexical view hierarchy inside the                                        // 122\n    // current template                                                                                                // 123\n    /*if (template && (binding = Blaze._lexicalBindingLookup(Blaze.currentView, name)) != null) {                      // 124\n      return binding;                                                                                                  // 125\n    }*/                                                                                                                // 126\n                                                                                                                       // 127\n    // 3. look up a template by name                                                                                   // 128\n    if (lookupTemplate && ((foundTemplate = Blaze._getTemplate(name, boundTmplInstance)) != null)) {                   // 129\n      return foundTemplate;                                                                                            // 130\n    }                                                                                                                  // 131\n                                                                                                                       // 132\n    // 4. look up a global helper                                                                                      // 133\n    if ((helper = Blaze._getGlobalHelper(name, boundTmplInstance)) != null) {                                          // 134\n      return helper;                                                                                                   // 135\n    }                                                                                                                  // 136\n                                                                                                                       // 137\n    // 5. look up in a data context                                                                                    // 138\n    return function () {                                                                                               // 139\n      var isCalledAsFunction = (arguments.length > 0);                                                                 // 140\n      var data = Blaze.getData();                                                                                      // 141\n      var x = data && data[name];                                                                                      // 142\n      if (!x) {                                                                                                        // 143\n        if (lookupTemplate) {                                                                                          // 144\n          throw new Error(\"No such template: \" + name);                                                                // 145\n        } else if (isCalledAsFunction) {                                                                               // 146\n          throw new Error(\"No such function: \" + name);                                                                // 147\n        } /*else if (name.charAt(0) === '@' && ((x === null) ||                                                        // 148\n          (x === undefined))) {                                                                                        // 149\n          // Throw an error if the user tries to use a `@directive`                                                    // 150\n          // that doesn't exist.  We don't implement all directives                                                    // 151\n          // from Handlebars, so there's a potential for confusion                                                     // 152\n          // if we fail silently.  On the other hand, we want to                                                       // 153\n          // throw late in case some app or package wants to provide                                                   // 154\n          // a missing directive.                                                                                      // 155\n          throw new Error(\"Unsupported directive: \" + name);                                                           // 156\n        }*/                                                                                                            // 157\n      }                                                                                                                // 158\n      if (!data) {                                                                                                     // 159\n        return null;                                                                                                   // 160\n      }                                                                                                                // 161\n      if (typeof x !== 'function') {                                                                                   // 162\n        if (isCalledAsFunction) {                                                                                      // 163\n          throw new Error(\"Can't call non-function: \" + x);                                                            // 164\n        }                                                                                                              // 165\n        return x;                                                                                                      // 166\n      }                                                                                                                // 167\n      return x.apply(data, arguments);                                                                                 // 168\n    };                                                                                                                 // 169\n  };                                                                                                                   // 170\n}                                                                                                                      // 171\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/compatibility/attrs.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* This file is needed to backport this pull request: https://github.com/meteor/meteor/pull/5893                       // 1\n   It is a copy of attrs.js file with the changes from the above pull request merged in.                               // 2\n                                                                                                                       // 3\n   TODO: Remove this file eventually.                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\nvar jsUrlsAllowed = false;                                                                                             // 7\nBlaze._allowJavascriptUrls = function () {                                                                             // 8\n  jsUrlsAllowed = true;                                                                                                // 9\n};                                                                                                                     // 10\nBlaze._javascriptUrlsAllowed = function () {                                                                           // 11\n  return jsUrlsAllowed;                                                                                                // 12\n};                                                                                                                     // 13\n                                                                                                                       // 14\n// An AttributeHandler object is responsible for updating a particular attribute                                       // 15\n// of a particular element.  AttributeHandler subclasses implement                                                     // 16\n// browser-specific logic for dealing with particular attributes across                                                // 17\n// different browsers.                                                                                                 // 18\n//                                                                                                                     // 19\n// To define a new type of AttributeHandler, use                                                                       // 20\n// `var FooHandler = AttributeHandler.extend({ update: function ... })`                                                // 21\n// where the `update` function takes arguments `(element, oldValue, value)`.                                           // 22\n// The `element` argument is always the same between calls to `update` on                                              // 23\n// the same instance.  `oldValue` and `value` are each either `null` or                                                // 24\n// a Unicode string of the type that might be passed to the value argument                                             // 25\n// of `setAttribute` (i.e. not an HTML string with character references).                                              // 26\n// When an AttributeHandler is installed, an initial call to `update` is                                               // 27\n// always made with `oldValue = null`.  The `update` method can access                                                 // 28\n// `this.name` if the AttributeHandler class is a generic one that applies                                             // 29\n// to multiple attribute names.                                                                                        // 30\n//                                                                                                                     // 31\n// AttributeHandlers can store custom properties on `this`, as long as they                                            // 32\n// don't use the names `element`, `name`, `value`, and `oldValue`.                                                     // 33\n//                                                                                                                     // 34\n// AttributeHandlers can't influence how attributes appear in rendered HTML,                                           // 35\n// only how they are updated after materialization as DOM.                                                             // 36\n                                                                                                                       // 37\nAttributeHandler = function (name, value) {                                                                            // 38\n  this.name = name;                                                                                                    // 39\n  this.value = value;                                                                                                  // 40\n};                                                                                                                     // 41\nBlaze._AttributeHandler = AttributeHandler;                                                                            // 42\n                                                                                                                       // 43\nAttributeHandler.prototype.update = function (element, oldValue, value) {                                              // 44\n  if (value === null) {                                                                                                // 45\n    if (oldValue !== null)                                                                                             // 46\n      element.removeAttribute(this.name);                                                                              // 47\n  } else {                                                                                                             // 48\n    element.setAttribute(this.name, value);                                                                            // 49\n  }                                                                                                                    // 50\n};                                                                                                                     // 51\n                                                                                                                       // 52\nAttributeHandler.extend = function (options) {                                                                         // 53\n  var curType = this;                                                                                                  // 54\n  var subType = function AttributeHandlerSubtype(/*arguments*/) {                                                      // 55\n    AttributeHandler.apply(this, arguments);                                                                           // 56\n  };                                                                                                                   // 57\n  subType.prototype = new curType;                                                                                     // 58\n  subType.extend = curType.extend;                                                                                     // 59\n  if (options)                                                                                                         // 60\n    _.extend(subType.prototype, options);                                                                              // 61\n  return subType;                                                                                                      // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\n/// Apply the diff between the attributes of \"oldValue\" and \"value\" to \"element.\"                                      // 65\n//                                                                                                                     // 66\n// Each subclass must implement a parseValue method which takes a string                                               // 67\n// as an input and returns a dict of attributes. The keys of the dict                                                  // 68\n// are unique identifiers (ie. css properties in the case of styles), and the                                          // 69\n// values are the entire attribute which will be injected into the element.                                            // 70\n//                                                                                                                     // 71\n// Extended below to support classes, SVG elements and styles.                                                         // 72\n                                                                                                                       // 73\nBlaze._DiffingAttributeHandler = AttributeHandler.extend({                                                             // 74\n  update: function (element, oldValue, value) {                                                                        // 75\n    if (!this.getCurrentValue || !this.setValue || !this.parseValue)                                                   // 76\n      throw new Error(\"Missing methods in subclass of 'DiffingAttributeHandler'\");                                     // 77\n                                                                                                                       // 78\n    var oldAttrsMap = oldValue ? this.parseValue(oldValue) : {};                                                       // 79\n    var newAttrsMap = value ? this.parseValue(value) : {};                                                             // 80\n                                                                                                                       // 81\n    // the current attributes on the element, which we will mutate.                                                    // 82\n                                                                                                                       // 83\n    var attrString = this.getCurrentValue(element);                                                                    // 84\n    var attrsMap = attrString ? this.parseValue(attrString) : {};                                                      // 85\n                                                                                                                       // 86\n    _.each(_.keys(oldAttrsMap), function (t) {                                                                         // 87\n      if (! (t in newAttrsMap))                                                                                        // 88\n        delete attrsMap[t];                                                                                            // 89\n    });                                                                                                                // 90\n                                                                                                                       // 91\n    _.each(_.keys(newAttrsMap), function (t) {                                                                         // 92\n      attrsMap[t] = newAttrsMap[t];                                                                                    // 93\n    });                                                                                                                // 94\n                                                                                                                       // 95\n    this.setValue(element, _.values(attrsMap).join(' '));                                                              // 96\n  }                                                                                                                    // 97\n});                                                                                                                    // 98\n                                                                                                                       // 99\nvar ClassHandler = Blaze._DiffingAttributeHandler.extend({                                                             // 100\n  // @param rawValue {String}                                                                                          // 101\n  getCurrentValue: function (element) {                                                                                // 102\n    return element.className;                                                                                          // 103\n  },                                                                                                                   // 104\n  setValue: function (element, className) {                                                                            // 105\n    element.className = className;                                                                                     // 106\n  },                                                                                                                   // 107\n  parseValue: function (attrString) {                                                                                  // 108\n    var tokens = {};                                                                                                   // 109\n                                                                                                                       // 110\n    _.each(attrString.split(' '), function(token) {                                                                    // 111\n      if (token)                                                                                                       // 112\n        tokens[token] = token;                                                                                         // 113\n    });                                                                                                                // 114\n    return tokens;                                                                                                     // 115\n  }                                                                                                                    // 116\n});                                                                                                                    // 117\n                                                                                                                       // 118\nvar SVGClassHandler = ClassHandler.extend({                                                                            // 119\n  getCurrentValue: function (element) {                                                                                // 120\n    return element.className.baseVal;                                                                                  // 121\n  },                                                                                                                   // 122\n  setValue: function (element, className) {                                                                            // 123\n    element.setAttribute('class', className);                                                                          // 124\n  }                                                                                                                    // 125\n});                                                                                                                    // 126\n                                                                                                                       // 127\nvar StyleHandler = Blaze._DiffingAttributeHandler.extend({                                                             // 128\n  getCurrentValue: function (element) {                                                                                // 129\n    return element.getAttribute('style');                                                                              // 130\n  },                                                                                                                   // 131\n  setValue: function (element, style) {                                                                                // 132\n    if (style === '') {                                                                                                // 133\n      element.removeAttribute('style');                                                                                // 134\n    } else {                                                                                                           // 135\n      element.setAttribute('style', style);                                                                            // 136\n    }                                                                                                                  // 137\n  },                                                                                                                   // 138\n                                                                                                                       // 139\n  // Parse a string to produce a map from property to attribute string.                                                // 140\n  //                                                                                                                   // 141\n  // Example:                                                                                                          // 142\n  // \"color:red; foo:12px\" produces a token {color: \"color:red\", foo:\"foo:12px\"}                                       // 143\n  parseValue: function (attrString) {                                                                                  // 144\n    var tokens = {};                                                                                                   // 145\n                                                                                                                       // 146\n    // Regex for parsing a css attribute declaration, taken from css-parse:                                            // 147\n    // https://github.com/reworkcss/css-parse/blob/7cef3658d0bba872cde05a85339034b187cb3397/index.js#L219              // 148\n    var regex = /(\\*?[-#\\/\\*\\\\\\w]+(?:\\[[0-9a-z_-]+\\])?)\\s*:\\s*(?:\\'(?:\\\\\\'|.)*?\\'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+[;\\s]*/g;\n    var match = regex.exec(attrString);                                                                                // 150\n    while (match) {                                                                                                    // 151\n      // match[0] = entire matching string                                                                             // 152\n      // match[1] = css property                                                                                       // 153\n      // Prefix the token to prevent conflicts with existing properties.                                               // 154\n                                                                                                                       // 155\n      // XXX No `String.trim` on Safari 4. Swap out $.trim if we want to                                               // 156\n      // remove strong dep on jquery.                                                                                  // 157\n      tokens[' ' + match[1]] = match[0].trim ?                                                                         // 158\n        match[0].trim() : $.trim(match[0]);                                                                            // 159\n                                                                                                                       // 160\n      match = regex.exec(attrString);                                                                                  // 161\n    }                                                                                                                  // 162\n                                                                                                                       // 163\n    return tokens;                                                                                                     // 164\n  }                                                                                                                    // 165\n});                                                                                                                    // 166\n                                                                                                                       // 167\nvar BooleanHandler = AttributeHandler.extend({                                                                         // 168\n  update: function (element, oldValue, value) {                                                                        // 169\n    var name = this.name;                                                                                              // 170\n    if (value == null) {                                                                                               // 171\n      if (oldValue != null)                                                                                            // 172\n        element[name] = false;                                                                                         // 173\n    } else {                                                                                                           // 174\n      element[name] = true;                                                                                            // 175\n    }                                                                                                                  // 176\n  }                                                                                                                    // 177\n});                                                                                                                    // 178\n                                                                                                                       // 179\nvar DOMPropertyHandler = AttributeHandler.extend({                                                                     // 180\n  update: function (element, oldValue, value) {                                                                        // 181\n    var name = this.name;                                                                                              // 182\n    if (value !== element[name])                                                                                       // 183\n      element[name] = value;                                                                                           // 184\n  }                                                                                                                    // 185\n});                                                                                                                    // 186\n                                                                                                                       // 187\n// attributes of the type 'xlink:something' should be set using                                                        // 188\n// the correct namespace in order to work                                                                              // 189\nvar XlinkHandler = AttributeHandler.extend({                                                                           // 190\n  update: function(element, oldValue, value) {                                                                         // 191\n    var NS = 'http://www.w3.org/1999/xlink';                                                                           // 192\n    if (value === null) {                                                                                              // 193\n      if (oldValue !== null)                                                                                           // 194\n        element.removeAttributeNS(NS, this.name);                                                                      // 195\n    } else {                                                                                                           // 196\n      element.setAttributeNS(NS, this.name, this.value);                                                               // 197\n    }                                                                                                                  // 198\n  }                                                                                                                    // 199\n});                                                                                                                    // 200\n                                                                                                                       // 201\n// cross-browser version of `instanceof SVGElement`                                                                    // 202\nvar isSVGElement = function (elem) {                                                                                   // 203\n  return 'ownerSVGElement' in elem;                                                                                    // 204\n};                                                                                                                     // 205\n                                                                                                                       // 206\nvar isUrlAttribute = function (tagName, attrName) {                                                                    // 207\n  // Compiled from http://www.w3.org/TR/REC-html40/index/attributes.html                                               // 208\n  // and                                                                                                               // 209\n  // http://www.w3.org/html/wg/drafts/html/master/index.html#attributes-1                                              // 210\n  var urlAttrs = {                                                                                                     // 211\n    FORM: ['action'],                                                                                                  // 212\n    BODY: ['background'],                                                                                              // 213\n    BLOCKQUOTE: ['cite'],                                                                                              // 214\n    Q: ['cite'],                                                                                                       // 215\n    DEL: ['cite'],                                                                                                     // 216\n    INS: ['cite'],                                                                                                     // 217\n    OBJECT: ['classid', 'codebase', 'data', 'usemap'],                                                                 // 218\n    APPLET: ['codebase'],                                                                                              // 219\n    A: ['href'],                                                                                                       // 220\n    AREA: ['href'],                                                                                                    // 221\n    LINK: ['href'],                                                                                                    // 222\n    BASE: ['href'],                                                                                                    // 223\n    IMG: ['longdesc', 'src', 'usemap'],                                                                                // 224\n    FRAME: ['longdesc', 'src'],                                                                                        // 225\n    IFRAME: ['longdesc', 'src'],                                                                                       // 226\n    HEAD: ['profile'],                                                                                                 // 227\n    SCRIPT: ['src'],                                                                                                   // 228\n    INPUT: ['src', 'usemap', 'formaction'],                                                                            // 229\n    BUTTON: ['formaction'],                                                                                            // 230\n    BASE: ['href'],                                                                                                    // 231\n    MENUITEM: ['icon'],                                                                                                // 232\n    HTML: ['manifest'],                                                                                                // 233\n    VIDEO: ['poster']                                                                                                  // 234\n  };                                                                                                                   // 235\n                                                                                                                       // 236\n  if (attrName === 'itemid') {                                                                                         // 237\n    return true;                                                                                                       // 238\n  }                                                                                                                    // 239\n                                                                                                                       // 240\n  var urlAttrNames = urlAttrs[tagName] || [];                                                                          // 241\n  return _.contains(urlAttrNames, attrName);                                                                           // 242\n};                                                                                                                     // 243\n                                                                                                                       // 244\n// To get the protocol for a URL, we let the browser normalize it for                                                  // 245\n// us, by setting it as the href for an anchor tag and then reading out                                                // 246\n// the 'protocol' property.                                                                                            // 247\nif (Meteor.isClient) {                                                                                                 // 248\n  var anchorForNormalization = document.createElement('A');                                                            // 249\n}                                                                                                                      // 250\n                                                                                                                       // 251\nvar getUrlProtocol = function (url) {                                                                                  // 252\n  if (Meteor.isClient) {                                                                                               // 253\n    anchorForNormalization.href = url;                                                                                 // 254\n    return (anchorForNormalization.protocol || \"\").toLowerCase();                                                      // 255\n  } else {                                                                                                             // 256\n    throw new Error('getUrlProtocol not implemented on the server');                                                   // 257\n  }                                                                                                                    // 258\n};                                                                                                                     // 259\n                                                                                                                       // 260\n// UrlHandler is an attribute handler for all HTML attributes that take                                                // 261\n// URL values. It disallows javascript: URLs, unless                                                                   // 262\n// Blaze._allowJavascriptUrls() has been called. To detect javascript:                                                 // 263\n// urls, we set the attribute on a dummy anchor element and then read                                                  // 264\n// out the 'protocol' property of the attribute.                                                                       // 265\nvar origUpdate = AttributeHandler.prototype.update;                                                                    // 266\nvar UrlHandler = AttributeHandler.extend({                                                                             // 267\n  update: function (element, oldValue, value) {                                                                        // 268\n    var self = this;                                                                                                   // 269\n    var args = arguments;                                                                                              // 270\n                                                                                                                       // 271\n    if (Blaze._javascriptUrlsAllowed()) {                                                                              // 272\n      origUpdate.apply(self, args);                                                                                    // 273\n    } else {                                                                                                           // 274\n      var isJavascriptProtocol = (getUrlProtocol(value) === \"javascript:\");                                            // 275\n      if (isJavascriptProtocol) {                                                                                      // 276\n        Blaze._warn(\"URLs that use the 'javascript:' protocol are not \" +                                              // 277\n                    \"allowed in URL attribute values. \" +                                                              // 278\n                    \"Call Blaze._allowJavascriptUrls() \" +                                                             // 279\n                    \"to enable them.\");                                                                                // 280\n        origUpdate.apply(self, [element, oldValue, null]);                                                             // 281\n      } else {                                                                                                         // 282\n        origUpdate.apply(self, args);                                                                                  // 283\n      }                                                                                                                // 284\n    }                                                                                                                  // 285\n  }                                                                                                                    // 286\n});                                                                                                                    // 287\n                                                                                                                       // 288\n// XXX make it possible for users to register attribute handlers!                                                      // 289\nBlaze._makeAttributeHandler = function (elem, name, value) {                                                           // 290\n  // generally, use setAttribute but certain attributes need to be set                                                 // 291\n  // by directly setting a JavaScript property on the DOM element.                                                     // 292\n  if (name === 'class') {                                                                                              // 293\n    if (isSVGElement(elem)) {                                                                                          // 294\n      return new SVGClassHandler(name, value);                                                                         // 295\n    } else {                                                                                                           // 296\n      return new ClassHandler(name, value);                                                                            // 297\n    }                                                                                                                  // 298\n  } else if (name === 'style') {                                                                                       // 299\n    return new StyleHandler(name, value);                                                                              // 300\n  } else if ((elem.tagName === 'OPTION' && name === 'selected') ||                                                     // 301\n             (elem.tagName === 'INPUT' && name === 'checked')) {                                                       // 302\n    return new BooleanHandler(name, value);                                                                            // 303\n  } else if ((elem.tagName === 'TEXTAREA' || elem.tagName === 'INPUT')                                                 // 304\n             && name === 'value') {                                                                                    // 305\n    // internally, TEXTAREAs tracks their value in the 'value'                                                         // 306\n    // attribute just like INPUTs.                                                                                     // 307\n    return new DOMPropertyHandler(name, value);                                                                        // 308\n  } else if (name.substring(0,6) === 'xlink:') {                                                                       // 309\n    return new XlinkHandler(name.substring(6), value);                                                                 // 310\n  } else if (isUrlAttribute(elem.tagName, name)) {                                                                     // 311\n    return new UrlHandler(name, value);                                                                                // 312\n  } else {                                                                                                             // 313\n    return new AttributeHandler(name, value);                                                                          // 314\n  }                                                                                                                    // 315\n                                                                                                                       // 316\n  // XXX will need one for 'style' on IE, though modern browsers                                                       // 317\n  // seem to handle setAttribute ok.                                                                                   // 318\n};                                                                                                                     // 319\n                                                                                                                       // 320\n                                                                                                                       // 321\nElementAttributesUpdater = function (elem) {                                                                           // 322\n  this.elem = elem;                                                                                                    // 323\n  this.handlers = {};                                                                                                  // 324\n};                                                                                                                     // 325\n                                                                                                                       // 326\n// Update attributes on `elem` to the dictionary `attrs`, whose                                                        // 327\n// values are strings.                                                                                                 // 328\nElementAttributesUpdater.prototype.update = function(newAttrs) {                                                       // 329\n  var elem = this.elem;                                                                                                // 330\n  var handlers = this.handlers;                                                                                        // 331\n                                                                                                                       // 332\n  for (var k in handlers) {                                                                                            // 333\n    if (! _.has(newAttrs, k)) {                                                                                        // 334\n      // remove attributes (and handlers) for attribute names                                                          // 335\n      // that don't exist as keys of `newAttrs` and so won't                                                           // 336\n      // be visited when traversing it.  (Attributes that                                                              // 337\n      // exist in the `newAttrs` object but are `null`                                                                 // 338\n      // are handled later.)                                                                                           // 339\n      var handler = handlers[k];                                                                                       // 340\n      var oldValue = handler.value;                                                                                    // 341\n      handler.value = null;                                                                                            // 342\n      handler.update(elem, oldValue, null);                                                                            // 343\n      delete handlers[k];                                                                                              // 344\n    }                                                                                                                  // 345\n  }                                                                                                                    // 346\n                                                                                                                       // 347\n  for (var k in newAttrs) {                                                                                            // 348\n    var handler = null;                                                                                                // 349\n    var oldValue;                                                                                                      // 350\n    var value = newAttrs[k];                                                                                           // 351\n    if (! _.has(handlers, k)) {                                                                                        // 352\n      if (value !== null) {                                                                                            // 353\n        // make new handler                                                                                            // 354\n        handler = Blaze._makeAttributeHandler(elem, k, value);                                                         // 355\n        handlers[k] = handler;                                                                                         // 356\n        oldValue = null;                                                                                               // 357\n      }                                                                                                                // 358\n    } else {                                                                                                           // 359\n      handler = handlers[k];                                                                                           // 360\n      oldValue = handler.value;                                                                                        // 361\n    }                                                                                                                  // 362\n    if (oldValue !== value) {                                                                                          // 363\n      handler.value = value;                                                                                           // 364\n      handler.update(elem, oldValue, value);                                                                           // 365\n      if (value === null)                                                                                              // 366\n        delete handlers[k];                                                                                            // 367\n    }                                                                                                                  // 368\n  }                                                                                                                    // 369\n};                                                                                                                     // 370\n                                                                                                                       // 371\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/compatibility/materializer.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* This file is needed to backport this pull request: https://github.com/meteor/meteor/pull/5893                       // 1\n   It is a copy of the materializer.js file and is needed because it references symbols from attrs.js.                 // 2\n                                                                                                                       // 3\n   TODO: Remove this file eventually.                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n// Turns HTMLjs into DOM nodes and DOMRanges.                                                                          // 7\n//                                                                                                                     // 8\n// - `htmljs`: the value to materialize, which may be any of the htmljs                                                // 9\n//   types (Tag, CharRef, Comment, Raw, array, string, boolean, number,                                                // 10\n//   null, or undefined) or a View or Template (which will be used to                                                  // 11\n//   construct a View).                                                                                                // 12\n// - `intoArray`: the array of DOM nodes and DOMRanges to push the output                                              // 13\n//   into (required)                                                                                                   // 14\n// - `parentView`: the View we are materializing content for (optional)                                                // 15\n// - `_existingWorkStack`: optional argument, only used for recursive                                                  // 16\n//   calls when there is some other _materializeDOM on the call stack.                                                 // 17\n//   If _materializeDOM called your function and passed in a workStack,                                                // 18\n//   pass it back when you call _materializeDOM (such as from a workStack                                              // 19\n//   task).                                                                                                            // 20\n//                                                                                                                     // 21\n// Returns `intoArray`, which is especially useful if you pass in `[]`.                                                // 22\nBlaze._materializeDOM = function (htmljs, intoArray, parentView,                                                       // 23\n                                  _existingWorkStack) {                                                                // 24\n  // In order to use fewer stack frames, materializeDOMInner can push                                                  // 25\n  // tasks onto `workStack`, and they will be popped off                                                               // 26\n  // and run, last first, after materializeDOMInner returns.  The                                                      // 27\n  // reason we use a stack instead of a queue is so that we recurse                                                    // 28\n  // depth-first, doing newer tasks first.                                                                             // 29\n  var workStack = (_existingWorkStack || []);                                                                          // 30\n  materializeDOMInner(htmljs, intoArray, parentView, workStack);                                                       // 31\n                                                                                                                       // 32\n  if (! _existingWorkStack) {                                                                                          // 33\n    // We created the work stack, so we are responsible for finishing                                                  // 34\n    // the work.  Call each \"task\" function, starting with the top                                                     // 35\n    // of the stack.                                                                                                   // 36\n    while (workStack.length) {                                                                                         // 37\n      // Note that running task() may push new items onto workStack.                                                   // 38\n      var task = workStack.pop();                                                                                      // 39\n      task();                                                                                                          // 40\n    }                                                                                                                  // 41\n  }                                                                                                                    // 42\n                                                                                                                       // 43\n  return intoArray;                                                                                                    // 44\n};                                                                                                                     // 45\n                                                                                                                       // 46\nvar materializeDOMInner = function (htmljs, intoArray, parentView, workStack) {                                        // 47\n  if (htmljs == null) {                                                                                                // 48\n    // null or undefined                                                                                               // 49\n    return;                                                                                                            // 50\n  }                                                                                                                    // 51\n                                                                                                                       // 52\n  switch (typeof htmljs) {                                                                                             // 53\n  case 'string': case 'boolean': case 'number':                                                                        // 54\n    intoArray.push(document.createTextNode(String(htmljs)));                                                           // 55\n    return;                                                                                                            // 56\n  case 'object':                                                                                                       // 57\n    if (htmljs.htmljsType) {                                                                                           // 58\n      switch (htmljs.htmljsType) {                                                                                     // 59\n      case HTML.Tag.htmljsType:                                                                                        // 60\n        intoArray.push(materializeTag(htmljs, parentView, workStack));                                                 // 61\n        return;                                                                                                        // 62\n      case HTML.CharRef.htmljsType:                                                                                    // 63\n        intoArray.push(document.createTextNode(htmljs.str));                                                           // 64\n        return;                                                                                                        // 65\n      case HTML.Comment.htmljsType:                                                                                    // 66\n        intoArray.push(document.createComment(htmljs.sanitizedValue));                                                 // 67\n        return;                                                                                                        // 68\n      case HTML.Raw.htmljsType:                                                                                        // 69\n        // Get an array of DOM nodes by using the browser's HTML parser                                                // 70\n        // (like innerHTML).                                                                                           // 71\n        var nodes = Blaze._DOMBackend.parseHTML(htmljs.value);                                                         // 72\n        for (var i = 0; i < nodes.length; i++)                                                                         // 73\n          intoArray.push(nodes[i]);                                                                                    // 74\n        return;                                                                                                        // 75\n      }                                                                                                                // 76\n    } else if (HTML.isArray(htmljs)) {                                                                                 // 77\n      for (var i = htmljs.length-1; i >= 0; i--) {                                                                     // 78\n        workStack.push(_.bind(Blaze._materializeDOM, null,                                                             // 79\n                              htmljs[i], intoArray, parentView, workStack));                                           // 80\n      }                                                                                                                // 81\n      return;                                                                                                          // 82\n    } else {                                                                                                           // 83\n      if (htmljs instanceof Blaze.Template) {                                                                          // 84\n        htmljs = htmljs.constructView();                                                                               // 85\n        // fall through to Blaze.View case below                                                                       // 86\n      }                                                                                                                // 87\n      if (htmljs instanceof Blaze.View) {                                                                              // 88\n        Blaze._materializeView(htmljs, parentView, workStack, intoArray);                                              // 89\n        return;                                                                                                        // 90\n      }                                                                                                                // 91\n    }                                                                                                                  // 92\n  }                                                                                                                    // 93\n                                                                                                                       // 94\n  throw new Error(\"Unexpected object in htmljs: \" + htmljs);                                                           // 95\n};                                                                                                                     // 96\n                                                                                                                       // 97\nvar materializeTag = function (tag, parentView, workStack) {                                                           // 98\n  var tagName = tag.tagName;                                                                                           // 99\n  var elem;                                                                                                            // 100\n  if ((HTML.isKnownSVGElement(tagName) || isSVGAnchor(tag))                                                            // 101\n      && document.createElementNS) {                                                                                   // 102\n    // inline SVG                                                                                                      // 103\n    elem = document.createElementNS('http://www.w3.org/2000/svg', tagName);                                            // 104\n  } else {                                                                                                             // 105\n    // normal elements                                                                                                 // 106\n    elem = document.createElement(tagName);                                                                            // 107\n  }                                                                                                                    // 108\n                                                                                                                       // 109\n  var rawAttrs = tag.attrs;                                                                                            // 110\n  var children = tag.children;                                                                                         // 111\n  if (tagName === 'textarea' && tag.children.length &&                                                                 // 112\n      ! (rawAttrs && ('value' in rawAttrs))) {                                                                         // 113\n    // Provide very limited support for TEXTAREA tags with children                                                    // 114\n    // rather than a \"value\" attribute.                                                                                // 115\n    // Reactivity in the form of Views nested in the tag's children                                                    // 116\n    // won't work.  Compilers should compile textarea contents into                                                    // 117\n    // the \"value\" attribute of the tag, wrapped in a function if there                                                // 118\n    // is reactivity.                                                                                                  // 119\n    if (typeof rawAttrs === 'function' ||                                                                              // 120\n        HTML.isArray(rawAttrs)) {                                                                                      // 121\n      throw new Error(\"Can't have reactive children of TEXTAREA node; \" +                                              // 122\n                      \"use the 'value' attribute instead.\");                                                           // 123\n    }                                                                                                                  // 124\n    rawAttrs = _.extend({}, rawAttrs || null);                                                                         // 125\n    rawAttrs.value = Blaze._expand(children, parentView);                                                              // 126\n    children = [];                                                                                                     // 127\n  }                                                                                                                    // 128\n                                                                                                                       // 129\n  if (rawAttrs) {                                                                                                      // 130\n    var attrUpdater = new ElementAttributesUpdater(elem);                                                              // 131\n    var updateAttributes = function () {                                                                               // 132\n      var expandedAttrs = Blaze._expandAttributes(rawAttrs, parentView);                                               // 133\n      var flattenedAttrs = HTML.flattenAttributes(expandedAttrs);                                                      // 134\n      var stringAttrs = {};                                                                                            // 135\n      for (var attrName in flattenedAttrs) {                                                                           // 136\n        stringAttrs[attrName] = Blaze._toText(flattenedAttrs[attrName],                                                // 137\n                                              parentView,                                                              // 138\n                                              HTML.TEXTMODE.STRING);                                                   // 139\n      }                                                                                                                // 140\n      attrUpdater.update(stringAttrs);                                                                                 // 141\n    };                                                                                                                 // 142\n    var updaterComputation;                                                                                            // 143\n    if (parentView) {                                                                                                  // 144\n      updaterComputation =                                                                                             // 145\n        parentView.autorun(updateAttributes, undefined, 'updater');                                                    // 146\n    } else {                                                                                                           // 147\n      updaterComputation = Tracker.nonreactive(function () {                                                           // 148\n        return Tracker.autorun(function () {                                                                           // 149\n          Tracker._withCurrentView(parentView, updateAttributes);                                                      // 150\n        });                                                                                                            // 151\n      });                                                                                                              // 152\n    }                                                                                                                  // 153\n    Blaze._DOMBackend.Teardown.onElementTeardown(elem, function attrTeardown() {                                       // 154\n      updaterComputation.stop();                                                                                       // 155\n    });                                                                                                                // 156\n  }                                                                                                                    // 157\n                                                                                                                       // 158\n  if (children.length) {                                                                                               // 159\n    var childNodesAndRanges = [];                                                                                      // 160\n    // push this function first so that it's done last                                                                 // 161\n    workStack.push(function () {                                                                                       // 162\n      for (var i = 0; i < childNodesAndRanges.length; i++) {                                                           // 163\n        var x = childNodesAndRanges[i];                                                                                // 164\n        if (x instanceof Blaze._DOMRange)                                                                              // 165\n          x.attach(elem);                                                                                              // 166\n        else                                                                                                           // 167\n          elem.appendChild(x);                                                                                         // 168\n      }                                                                                                                // 169\n    });                                                                                                                // 170\n    // now push the task that calculates childNodesAndRanges                                                           // 171\n    workStack.push(_.bind(Blaze._materializeDOM, null,                                                                 // 172\n                          children, childNodesAndRanges, parentView,                                                   // 173\n                          workStack));                                                                                 // 174\n  }                                                                                                                    // 175\n                                                                                                                       // 176\n  return elem;                                                                                                         // 177\n};                                                                                                                     // 178\n                                                                                                                       // 179\n                                                                                                                       // 180\nvar isSVGAnchor = function (node) {                                                                                    // 181\n  // We generally aren't able to detect SVG <a> elements because                                                       // 182\n  // if \"A\" were in our list of known svg element names, then all                                                      // 183\n  // <a> nodes would be created using                                                                                  // 184\n  // `document.createElementNS`. But in the special case of <a                                                         // 185\n  // xlink:href=\"...\">, we can at least detect that attribute and                                                      // 186\n  // create an SVG <a> tag in that case.                                                                               // 187\n  //                                                                                                                   // 188\n  // However, we still have a general problem of knowing when to                                                       // 189\n  // use document.createElementNS and when to use                                                                      // 190\n  // document.createElement; for example, font tags will always                                                        // 191\n  // be created as SVG elements which can cause other                                                                  // 192\n  // problems. #1977                                                                                                   // 193\n  return (node.tagName === \"a\" &&                                                                                      // 194\n          node.attrs &&                                                                                                // 195\n          node.attrs[\"xlink:href\"] !== undefined);                                                                     // 196\n};                                                                                                                     // 197\n                                                                                                                       // 198\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/lib.coffee.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar ComponentsNamespaceReference, HTMLJSExpander, REQUIRE_RENDERED_INSTANCE, SUPPORTS_REACTIVE_INSTANCE, addEvents, argumentsConstructor, bindComponent, bindDataContext, callTemplateBaseHooks, contentAsFunc, contentAsView, currentViewIfRendering, expand, expandView, getTemplateBase, getTemplateInstance, getTemplateInstanceFunction, method, methodName, originalDot, originalFlattenAttributes, originalGetTemplate, originalInclude, originalVisitTag, ref, registerFirstCreatedHook, registerHooks, templateInstanceToComponent, withTemplateInstanceFunc, wrapHelper, wrapViewAndTemplate,                \n  slice = [].slice,                                                                                                    //\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty,                                                                                         //\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n                                                                                                                       //\ngetTemplateInstance = function(view, skipBlockHelpers) {                                                               // 1\n  while (view && !view._templateInstance) {                                                                            // 2\n    if (skipBlockHelpers) {                                                                                            // 3\n      view = view.parentView;                                                                                          // 4\n    } else {                                                                                                           //\n      view = view.originalParentView || view.parentView;                                                               // 6\n    }                                                                                                                  //\n  }                                                                                                                    //\n  return view != null ? view._templateInstance : void 0;                                                               //\n};                                                                                                                     // 1\n                                                                                                                       //\ntemplateInstanceToComponent = function(templateInstanceFunc, skipBlockHelpers) {                                       // 1\n  var templateInstance;                                                                                                // 15\n  templateInstance = typeof templateInstanceFunc === \"function\" ? templateInstanceFunc() : void 0;                     // 15\n  templateInstance = getTemplateInstance(templateInstance != null ? templateInstance.view : void 0, skipBlockHelpers);\n  while (templateInstance) {                                                                                           // 21\n    if ('component' in templateInstance) {                                                                             // 22\n      return templateInstance.component;                                                                               // 22\n    }                                                                                                                  //\n    if (skipBlockHelpers) {                                                                                            // 24\n      templateInstance = getTemplateInstance(templateInstance.view.parentView, skipBlockHelpers);                      // 25\n    } else {                                                                                                           //\n      templateInstance = getTemplateInstance(templateInstance.view.originalParentView || templateInstance.view.parentView, skipBlockHelpers);\n    }                                                                                                                  //\n  }                                                                                                                    //\n  return null;                                                                                                         //\n};                                                                                                                     // 14\n                                                                                                                       //\ngetTemplateInstanceFunction = function(view, skipBlockHelpers) {                                                       // 1\n  var templateInstance;                                                                                                // 32\n  templateInstance = getTemplateInstance(view, skipBlockHelpers);                                                      // 32\n  return function() {                                                                                                  //\n    return templateInstance;                                                                                           //\n  };                                                                                                                   //\n};                                                                                                                     // 31\n                                                                                                                       //\nComponentsNamespaceReference = (function() {                                                                           // 1\n  function ComponentsNamespaceReference(namespace, templateInstance1) {                                                // 37\n    this.namespace = namespace;                                                                                        // 37\n    this.templateInstance = templateInstance1;                                                                         // 37\n  }                                                                                                                    //\n                                                                                                                       //\n  return ComponentsNamespaceReference;                                                                                 //\n                                                                                                                       //\n})();                                                                                                                  //\n                                                                                                                       //\noriginalDot = Spacebars.dot;                                                                                           // 1\n                                                                                                                       //\nSpacebars.dot = function() {                                                                                           // 1\n  var args, value;                                                                                                     // 43\n  value = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                                  // 43\n  if (value instanceof ComponentsNamespaceReference) {                                                                 // 43\n    return Blaze._getTemplate(value.namespace + \".\" + (args.join('.')), value.templateInstance);                       // 44\n  }                                                                                                                    //\n  return originalDot.apply(null, [value].concat(slice.call(args)));                                                    //\n};                                                                                                                     // 42\n                                                                                                                       //\noriginalInclude = Spacebars.include;                                                                                   // 1\n                                                                                                                       //\nSpacebars.include = function() {                                                                                       // 1\n  var args, templateOrFunction;                                                                                        // 54\n  templateOrFunction = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                     // 54\n  if (templateOrFunction instanceof ComponentsNamespaceReference) {                                                    // 54\n    templateOrFunction = Blaze._getTemplate(templateOrFunction.namespace, templateOrFunction.templateInstance);        // 55\n  }                                                                                                                    //\n  return originalInclude.apply(null, [templateOrFunction].concat(slice.call(args)));                                   //\n};                                                                                                                     // 49\n                                                                                                                       //\nBlaze._getTemplateHelper = function(template, name, templateInstance) {                                                // 1\n  var component, helper, isKnownOldStyleHelper, mixinOrComponent, ref, ref1, ref2;                                     // 78\n  isKnownOldStyleHelper = false;                                                                                       // 78\n  if (template.__helpers.has(name)) {                                                                                  // 79\n    helper = template.__helpers.get(name);                                                                             // 80\n    if (helper === Blaze._OLDSTYLE_HELPER) {                                                                           // 81\n      isKnownOldStyleHelper = true;                                                                                    // 82\n    } else if (helper != null) {                                                                                       //\n      return wrapHelper(bindDataContext(helper), templateInstance);                                                    // 84\n    } else {                                                                                                           //\n      return null;                                                                                                     // 86\n    }                                                                                                                  //\n  }                                                                                                                    //\n  if (name in template) {                                                                                              // 89\n    if (!isKnownOldStyleHelper) {                                                                                      // 91\n      template.__helpers.set(name, Blaze._OLDSTYLE_HELPER);                                                            // 92\n      if (!template._NOWARN_OLDSTYLE_HELPERS) {                                                                        // 93\n        Blaze._warn(\"Assigning helper with `\" + template.viewName + \".\" + name + \" = ...` is deprecated.  Use `\" + template.viewName + \".helpers(...)` instead.\");\n      }                                                                                                                //\n    }                                                                                                                  //\n    if (template[name] != null) {                                                                                      // 95\n      return wrapHelper(bindDataContext(template[name]), templateInstance);                                            // 96\n    } else {                                                                                                           //\n      return null;                                                                                                     // 98\n    }                                                                                                                  //\n  }                                                                                                                    //\n  if (!templateInstance) {                                                                                             // 100\n    return null;                                                                                                       // 100\n  }                                                                                                                    //\n  if ((ref = template.viewName) === 'Template.__dynamicWithDataContext' || ref === 'Template.__dynamic') {             // 106\n    return null;                                                                                                       // 106\n  }                                                                                                                    //\n  component = Tracker.nonreactive(function() {                                                                         // 78\n    return templateInstanceToComponent(templateInstance, true);                                                        //\n  });                                                                                                                  //\n  if (component) {                                                                                                     // 116\n    if (mixinOrComponent = component.getFirstWith(null, name)) {                                                       // 118\n      return wrapHelper(bindComponent(mixinOrComponent, mixinOrComponent[name]), templateInstance);                    // 119\n    }                                                                                                                  //\n  }                                                                                                                    //\n  if (name && name in BlazeComponent.components) {                                                                     // 124\n    return new ComponentsNamespaceReference(name, templateInstance);                                                   // 125\n  }                                                                                                                    //\n  if (component) {                                                                                                     // 128\n    if ((helper = (ref1 = component._componentInternals) != null ? (ref2 = ref1.templateBase) != null ? ref2.__helpers.get(name) : void 0 : void 0) != null) {\n      return wrapHelper(bindDataContext(helper), templateInstance);                                                    // 130\n    }                                                                                                                  //\n  }                                                                                                                    //\n  return null;                                                                                                         //\n};                                                                                                                     // 77\n                                                                                                                       //\nshare.inExpandAttributes = false;                                                                                      // 1\n                                                                                                                       //\nbindComponent = function(component, helper) {                                                                          // 1\n  if (_.isFunction(helper)) {                                                                                          // 137\n    return function() {                                                                                                //\n      var args, name, result, value;                                                                                   // 139\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                    // 139\n      result = helper.apply(component, args);                                                                          // 139\n      if (share.inExpandAttributes && _.isObject(result)) {                                                            // 143\n        for (name in result) {                                                                                         // 144\n          value = result[name];                                                                                        //\n          if (share.EVENT_HANDLER_REGEX.test(name)) {                                                                  //\n            if (_.isFunction(value)) {                                                                                 // 145\n              result[name] = _.bind(value, component);                                                                 // 146\n            } else if (_.isArray(value)) {                                                                             //\n              result[name] = _.map(value, function(fun) {                                                              // 148\n                if (_.isFunction(fun)) {                                                                               // 149\n                  return _.bind(fun, component);                                                                       //\n                } else {                                                                                               //\n                  return fun;                                                                                          //\n                }                                                                                                      //\n              });                                                                                                      //\n            }                                                                                                          //\n          }                                                                                                            //\n        }                                                                                                              // 144\n      }                                                                                                                //\n      return result;                                                                                                   //\n    };                                                                                                                 //\n  } else {                                                                                                             //\n    return helper;                                                                                                     //\n  }                                                                                                                    //\n};                                                                                                                     // 136\n                                                                                                                       //\nbindDataContext = function(helper) {                                                                                   // 1\n  if (_.isFunction(helper)) {                                                                                          // 159\n    return function() {                                                                                                //\n      var data;                                                                                                        // 161\n      data = Blaze.getData();                                                                                          // 161\n      if (data == null) {                                                                                              //\n        data = {};                                                                                                     //\n      }                                                                                                                //\n      return helper.apply(data, arguments);                                                                            //\n    };                                                                                                                 //\n  } else {                                                                                                             //\n    return helper;                                                                                                     //\n  }                                                                                                                    //\n};                                                                                                                     // 158\n                                                                                                                       //\nwrapHelper = function(f, templateFunc) {                                                                               // 1\n  if (!Blaze.Template._withTemplateInstanceFunc) {                                                                     // 169\n    return Blaze._wrapCatchingExceptions(f, 'template helper');                                                        // 169\n  }                                                                                                                    //\n  if (!_.isFunction(f)) {                                                                                              // 171\n    return f;                                                                                                          // 171\n  }                                                                                                                    //\n  return function() {                                                                                                  //\n    var args, self;                                                                                                    // 174\n    self = this;                                                                                                       // 174\n    args = arguments;                                                                                                  // 174\n    return Blaze.Template._withTemplateInstanceFunc(templateFunc, function() {                                         //\n      return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args);                                    //\n    });                                                                                                                //\n  };                                                                                                                   //\n};                                                                                                                     // 167\n                                                                                                                       //\nif (Blaze.Template._withTemplateInstanceFunc) {                                                                        // 180\n  withTemplateInstanceFunc = Blaze.Template._withTemplateInstanceFunc;                                                 // 181\n} else {                                                                                                               //\n  withTemplateInstanceFunc = function(templateInstance, f) {                                                           // 184\n    return f();                                                                                                        //\n  };                                                                                                                   //\n}                                                                                                                      //\n                                                                                                                       //\ngetTemplateBase = function(component) {                                                                                // 1\n  return Tracker.nonreactive(function() {                                                                              //\n    var componentTemplate, templateBase;                                                                               // 190\n    componentTemplate = component.template();                                                                          // 190\n    if (_.isString(componentTemplate)) {                                                                               // 191\n      templateBase = Template[componentTemplate];                                                                      // 192\n      if (!templateBase) {                                                                                             // 193\n        throw new Error(\"Template '\" + componentTemplate + \"' cannot be found.\");                                      // 193\n      }                                                                                                                //\n    } else if (componentTemplate) {                                                                                    //\n      templateBase = componentTemplate;                                                                                // 195\n    } else {                                                                                                           //\n      throw new Error(\"Template for the component '\" + (component.componentName() || 'unnamed') + \"' not provided.\");  // 197\n    }                                                                                                                  //\n    return templateBase;                                                                                               //\n  });                                                                                                                  //\n};                                                                                                                     // 187\n                                                                                                                       //\ncallTemplateBaseHooks = function(component, hookName) {                                                                // 1\n  var callbacks, templateInstance;                                                                                     // 202\n  if (component._componentInternals == null) {                                                                         //\n    component._componentInternals = {};                                                                                //\n  }                                                                                                                    //\n  if (!component._componentInternals.templateInstance) {                                                               // 206\n    return;                                                                                                            // 206\n  }                                                                                                                    //\n  templateInstance = Tracker.nonreactive(function() {                                                                  // 202\n    return component._componentInternals.templateInstance();                                                           //\n  });                                                                                                                  //\n  callbacks = component._componentInternals.templateBase._getCallbacks(hookName);                                      // 202\n  Template._withTemplateInstanceFunc(function() {                                                                      // 202\n    return templateInstance;                                                                                           //\n  }, function() {                                                                                                      //\n    var callback, i, len, results;                                                                                     // 216\n    results = [];                                                                                                      // 216\n    for (i = 0, len = callbacks.length; i < len; i++) {                                                                //\n      callback = callbacks[i];                                                                                         //\n      results.push(callback.call(templateInstance));                                                                   // 217\n    }                                                                                                                  // 216\n    return results;                                                                                                    //\n  });                                                                                                                  //\n};                                                                                                                     // 201\n                                                                                                                       //\nwrapViewAndTemplate = function(currentView, f) {                                                                       // 1\n  var templateInstance;                                                                                                // 227\n  templateInstance = getTemplateInstanceFunction(currentView, true);                                                   // 227\n  return withTemplateInstanceFunc(templateInstance, function() {                                                       //\n    return Blaze._withCurrentView(currentView, function() {                                                            //\n      return f();                                                                                                      //\n    });                                                                                                                //\n  });                                                                                                                  //\n};                                                                                                                     // 222\n                                                                                                                       //\naddEvents = function(view, component) {                                                                                // 1\n  var eventMap, events, eventsList, fn, handler, i, len, spec;                                                         // 243\n  eventsList = component.events();                                                                                     // 243\n  if (!_.isArray(eventsList)) {                                                                                        // 245\n    throw new Error(\"'events' method from the component '\" + (component.componentName() || 'unnamed') + \"' did not return a list of event maps.\");\n  }                                                                                                                    //\n  for (i = 0, len = eventsList.length; i < len; i++) {                                                                 // 247\n    events = eventsList[i];                                                                                            //\n    eventMap = {};                                                                                                     // 248\n    fn = function(spec, handler) {                                                                                     // 250\n      return eventMap[spec] = function() {                                                                             //\n        var args, currentView, event;                                                                                  // 253\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                  // 253\n        event = args[0];                                                                                               // 253\n        currentView = Blaze.getView(event.currentTarget);                                                              // 253\n        wrapViewAndTemplate(currentView, function() {                                                                  // 253\n          return handler.apply(component, args);                                                                       //\n        });                                                                                                            //\n      };                                                                                                               //\n    };                                                                                                                 //\n    for (spec in events) {                                                                                             // 250\n      handler = events[spec];                                                                                          //\n      fn(spec, handler);                                                                                               // 251\n    }                                                                                                                  // 250\n    Blaze._addEventMap(view, eventMap, view);                                                                          // 248\n  }                                                                                                                    // 247\n};                                                                                                                     // 242\n                                                                                                                       //\noriginalGetTemplate = Blaze._getTemplate;                                                                              // 1\n                                                                                                                       //\nBlaze._getTemplate = function(name, templateInstance) {                                                                // 1\n  var template;                                                                                                        // 270\n  template = Tracker.nonreactive(function() {                                                                          // 270\n    var parentComponent, ref;                                                                                          // 271\n    if (Blaze.currentView) {                                                                                           // 271\n      parentComponent = BlazeComponent.currentComponent();                                                             // 272\n    } else {                                                                                                           //\n      parentComponent = templateInstanceToComponent(templateInstance, false);                                          // 276\n    }                                                                                                                  //\n    return (ref = BlazeComponent.getComponent(name)) != null ? ref.renderComponent(parentComponent) : void 0;          //\n  });                                                                                                                  //\n  if (template && (template instanceof Blaze.Template || _.isFunction(template))) {                                    // 279\n    return template;                                                                                                   // 279\n  }                                                                                                                    //\n  return originalGetTemplate(name);                                                                                    //\n};                                                                                                                     // 268\n                                                                                                                       //\nregisterHooks = function(template, hooks) {                                                                            // 1\n  if (template.onCreated) {                                                                                            // 284\n    template.onCreated(hooks.onCreated);                                                                               // 285\n    template.onRendered(hooks.onRendered);                                                                             // 285\n    return template.onDestroyed(hooks.onDestroyed);                                                                    //\n  } else {                                                                                                             //\n    template.created = hooks.onCreated;                                                                                // 290\n    template.rendered = hooks.onRendered;                                                                              // 290\n    return template.destroyed = hooks.onDestroyed;                                                                     //\n  }                                                                                                                    //\n};                                                                                                                     // 283\n                                                                                                                       //\nregisterFirstCreatedHook = function(template, onCreated) {                                                             // 1\n  var oldCreated;                                                                                                      // 295\n  if (template._callbacks) {                                                                                           // 295\n    return template._callbacks.created.unshift(onCreated);                                                             //\n  } else {                                                                                                             //\n    oldCreated = template.created;                                                                                     // 299\n    return template.created = function() {                                                                             //\n      onCreated.call(this);                                                                                            // 301\n      return oldCreated != null ? oldCreated.call(this) : void 0;                                                      //\n    };                                                                                                                 //\n  }                                                                                                                    //\n};                                                                                                                     // 294\n                                                                                                                       //\nTemplate.__dynamicWithDataContext.__helpers.set('chooseTemplate', function(name) {                                     // 1\n  return Blaze._getTemplate(name, (function(_this) {                                                                   //\n    return function() {                                                                                                //\n      return Template.instance();                                                                                      //\n    };                                                                                                                 //\n  })(this));                                                                                                           //\n});                                                                                                                    // 311\n                                                                                                                       //\nargumentsConstructor = function() {                                                                                    // 1\n  return assert(false);                                                                                                //\n};                                                                                                                     // 315\n                                                                                                                       //\nTemplate.registerHelper('args', function() {                                                                           // 1\n  var obj;                                                                                                             // 322\n  obj = {};                                                                                                            // 322\n  obj.constructor = argumentsConstructor;                                                                              // 322\n  obj._arguments = arguments;                                                                                          // 322\n  return obj;                                                                                                          //\n});                                                                                                                    // 321\n                                                                                                                       //\nshare.EVENT_HANDLER_REGEX = /^on[A-Z]/;                                                                                // 1\n                                                                                                                       //\nshare.isEventHandler = function(fun) {                                                                                 // 1\n  return _.isFunction(fun) && fun.eventHandler;                                                                        //\n};                                                                                                                     // 330\n                                                                                                                       //\noriginalFlattenAttributes = HTML.flattenAttributes;                                                                    // 1\n                                                                                                                       //\nHTML.flattenAttributes = function(attrs) {                                                                             // 1\n  var name, value;                                                                                                     // 337\n  if (attrs = originalFlattenAttributes(attrs)) {                                                                      // 337\n    for (name in attrs) {                                                                                              // 338\n      value = attrs[name];                                                                                             //\n      if (!(share.EVENT_HANDLER_REGEX.test(name))) {                                                                   //\n        continue;                                                                                                      //\n      }                                                                                                                //\n      if (share.isEventHandler(value)) {                                                                               // 340\n        continue;                                                                                                      // 340\n      }                                                                                                                //\n      if (_.isArray(value) && _.some(value, share.isEventHandler)) {                                                   // 341\n        continue;                                                                                                      // 341\n      }                                                                                                                //\n      if (_.isArray(value)) {                                                                                          // 345\n        attrs[name] = _.map(value, Spacebars.event);                                                                   // 346\n      } else {                                                                                                         //\n        attrs[name] = Spacebars.event(value);                                                                          // 348\n      }                                                                                                                //\n    }                                                                                                                  // 338\n  }                                                                                                                    //\n  return attrs;                                                                                                        //\n};                                                                                                                     // 336\n                                                                                                                       //\nSpacebars.event = function() {                                                                                         // 1\n  var args, eventHandler, fun;                                                                                         // 353\n  eventHandler = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                           // 353\n  if (!_.isFunction(eventHandler)) {                                                                                   // 353\n    throw new Error(\"Event handler not a function: \" + eventHandler);                                                  // 353\n  }                                                                                                                    //\n  args = Spacebars.mustacheImpl.apply(Spacebars, [(function() {                                                        // 353\n    var xs;                                                                                                            // 356\n    xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                        // 356\n    return xs;                                                                                                         //\n  })].concat(slice.call(args)));                                                                                       //\n  fun = function() {                                                                                                   // 353\n    var currentView, event, eventArgs;                                                                                 // 359\n    event = arguments[0], eventArgs = 2 <= arguments.length ? slice.call(arguments, 1) : [];                           // 359\n    currentView = Blaze.getView(event.currentTarget);                                                                  // 359\n    return wrapViewAndTemplate(currentView, function() {                                                               //\n      return eventHandler.apply(null, [event].concat(args, eventArgs));                                                //\n    });                                                                                                                //\n  };                                                                                                                   //\n  fun.eventHandler = true;                                                                                             // 353\n  return fun;                                                                                                          //\n};                                                                                                                     // 352\n                                                                                                                       //\noriginalVisitTag = HTML.ToHTMLVisitor.prototype.visitTag;                                                              // 1\n                                                                                                                       //\nHTML.ToHTMLVisitor.prototype.visitTag = function(tag) {                                                                // 1\n  var attrs, name;                                                                                                     // 373\n  if (attrs = tag.attrs) {                                                                                             // 373\n    attrs = HTML.flattenAttributes(attrs);                                                                             // 374\n    for (name in attrs) {                                                                                              // 375\n      if (share.EVENT_HANDLER_REGEX.test(name)) {                                                                      //\n        delete attrs[name];                                                                                            // 376\n      }                                                                                                                //\n    }                                                                                                                  // 375\n    tag.attrs = attrs;                                                                                                 // 374\n  }                                                                                                                    //\n  return originalVisitTag.call(this, tag);                                                                             //\n};                                                                                                                     // 372\n                                                                                                                       //\ncurrentViewIfRendering = function() {                                                                                  // 1\n  var view;                                                                                                            // 382\n  view = Blaze.currentView;                                                                                            // 382\n  if (view != null ? view._isInRender : void 0) {                                                                      // 383\n    return view;                                                                                                       //\n  } else {                                                                                                             //\n    return null;                                                                                                       //\n  }                                                                                                                    //\n};                                                                                                                     // 381\n                                                                                                                       //\ncontentAsFunc = function(content) {                                                                                    // 1\n  if (!_.isFunction(content)) {                                                                                        // 391\n    return function() {                                                                                                // 392\n      return content;                                                                                                  //\n    };                                                                                                                 //\n  }                                                                                                                    //\n  return content;                                                                                                      //\n};                                                                                                                     // 388\n                                                                                                                       //\ncontentAsView = function(content) {                                                                                    // 1\n  if (content instanceof Blaze.Template) {                                                                             // 400\n    return content.constructView();                                                                                    //\n  } else if (content instanceof Blaze.View) {                                                                          //\n    return content;                                                                                                    //\n  } else {                                                                                                             //\n    return Blaze.View('render', contentAsFunc(content));                                                               //\n  }                                                                                                                    //\n};                                                                                                                     // 397\n                                                                                                                       //\nHTMLJSExpander = Blaze._HTMLJSExpander.extend();                                                                       // 1\n                                                                                                                       //\nHTMLJSExpander.def({                                                                                                   // 1\n  visitObject: function(x) {                                                                                           // 410\n    if (x instanceof Blaze.Template) {                                                                                 // 411\n      x = x.constructView();                                                                                           // 412\n    }                                                                                                                  //\n    if (x instanceof Blaze.View) {                                                                                     // 413\n      return expandView(x, this.parentView);                                                                           // 414\n    }                                                                                                                  //\n    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);                                               //\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\nexpand = function(htmljs, parentView) {                                                                                // 1\n  parentView = parentView || currentViewIfRendering();                                                                 // 420\n  return (new HTMLJSExpander({                                                                                         //\n    parentView: parentView                                                                                             // 422\n  })).visit(htmljs);                                                                                                   //\n};                                                                                                                     // 419\n                                                                                                                       //\nexpandView = function(view, parentView) {                                                                              // 1\n  var htmljs, result;                                                                                                  // 426\n  Blaze._createView(view, parentView, true);                                                                           // 426\n  view._isInRender = true;                                                                                             // 426\n  htmljs = Blaze._withCurrentView(view, function() {                                                                   // 426\n    return view._render();                                                                                             //\n  });                                                                                                                  //\n  view._isInRender = false;                                                                                            // 426\n  Tracker.flush();                                                                                                     // 426\n  result = expand(htmljs, view);                                                                                       // 426\n  Tracker.flush();                                                                                                     // 426\n  if (Tracker.active) {                                                                                                // 439\n    Tracker.onInvalidate(function() {                                                                                  // 440\n      return Blaze._destroyView(view);                                                                                 //\n    });                                                                                                                //\n  } else {                                                                                                             //\n    Blaze._destroyView(view);                                                                                          // 443\n  }                                                                                                                    //\n  Tracker.flush();                                                                                                     // 426\n  return result;                                                                                                       //\n};                                                                                                                     // 425\n                                                                                                                       //\nBlazeComponent = (function(superClass) {                                                                               // 1\n  extend(BlazeComponent, superClass);                                                                                  // 451\n                                                                                                                       //\n  function BlazeComponent() {                                                                                          //\n    return BlazeComponent.__super__.constructor.apply(this, arguments);                                                //\n  }                                                                                                                    //\n                                                                                                                       //\n  BlazeComponent.getComponentForElement = function(domElement) {                                                       // 451\n    var templateInstance;                                                                                              // 452\n    if (!domElement) {                                                                                                 // 452\n      return null;                                                                                                     // 452\n    }                                                                                                                  //\n    if (domElement.nodeType !== Node.ELEMENT_NODE) {                                                                   // 455\n      throw new Error(\"Expected DOM element.\");                                                                        // 455\n    }                                                                                                                  //\n    templateInstance = getTemplateInstanceFunction(Blaze.getView(domElement), true);                                   // 452\n    return templateInstanceToComponent(templateInstance, true);                                                        //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.mixins = function() {                                                                       // 451\n    return [];                                                                                                         //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.mixinParent = function(mixinParent) {                                                       // 451\n    if (this._componentInternals == null) {                                                                            //\n      this._componentInternals = {};                                                                                   //\n    }                                                                                                                  //\n    if (mixinParent) {                                                                                                 // 474\n      this._componentInternals.mixinParent = mixinParent;                                                              // 475\n      return this;                                                                                                     // 477\n    }                                                                                                                  //\n    return this._componentInternals.mixinParent || null;                                                               //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.requireMixin = function(nameOrMixin) {                                                      // 451\n    var ref;                                                                                                           // 483\n    assert((ref = this._componentInternals) != null ? ref.mixins : void 0);                                            // 483\n    Tracker.nonreactive((function(_this) {                                                                             // 483\n      return function() {                                                                                              //\n        var base, mixinInstance, mixinInstanceComponent, ref1, ref2, ref3;                                             // 488\n        if (_this.getMixin(nameOrMixin)) {                                                                             // 488\n          return;                                                                                                      // 488\n        }                                                                                                              //\n        if (_.isString(nameOrMixin)) {                                                                                 // 490\n          if (_this.constructor.getComponent) {                                                                        // 493\n            mixinInstanceComponent = _this.constructor.getComponent(nameOrMixin);                                      // 494\n          } else {                                                                                                     //\n            mixinInstanceComponent = BlazeComponent.getComponent(nameOrMixin);                                         // 496\n          }                                                                                                            //\n          if (!mixinInstanceComponent) {                                                                               // 497\n            throw new Error(\"Unknown mixin '\" + nameOrMixin + \"'.\");                                                   // 497\n          }                                                                                                            //\n          mixinInstance = new mixinInstanceComponent();                                                                // 493\n        } else if (_.isFunction(nameOrMixin)) {                                                                        //\n          mixinInstance = new nameOrMixin();                                                                           // 500\n        } else {                                                                                                       //\n          mixinInstance = nameOrMixin;                                                                                 // 502\n        }                                                                                                              //\n        _this._componentInternals.mixins.push(mixinInstance);                                                          // 488\n        if (mixinInstance.mixinParent) {                                                                               // 512\n          mixinInstance.mixinParent(_this);                                                                            // 513\n        }                                                                                                              //\n        if (typeof mixinInstance.createMixins === \"function\") {                                                        //\n          mixinInstance.createMixins();                                                                                //\n        }                                                                                                              //\n        if ((base = _this._componentInternals).templateInstance == null) {                                             //\n          base.templateInstance = new ReactiveField(null, function(a, b) {                                             //\n            return a === b;                                                                                            //\n          });                                                                                                          //\n        }                                                                                                              //\n        if (!((ref1 = _this._componentInternals.templateInstance()) != null ? ref1.view.isDestroyed : void 0)) {       // 524\n          if (!_this._componentInternals.inOnCreated && ((ref2 = _this._componentInternals.templateInstance()) != null ? ref2.view.isCreated : void 0)) {\n            if (typeof mixinInstance.onCreated === \"function\") {                                                       //\n              mixinInstance.onCreated();                                                                               //\n            }                                                                                                          //\n          }                                                                                                            //\n          if (!_this._componentInternals.inOnRendered && ((ref3 = _this._componentInternals.templateInstance()) != null ? ref3.view.isRendered : void 0)) {\n            return typeof mixinInstance.onRendered === \"function\" ? mixinInstance.onRendered() : void 0;               //\n          }                                                                                                            //\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    return this;                                                                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.createMixins = function() {                                                                 // 451\n    var i, len, mixin, ref;                                                                                            // 533\n    if (this._componentInternals == null) {                                                                            //\n      this._componentInternals = {};                                                                                   //\n    }                                                                                                                  //\n    if (this._componentInternals.mixins) {                                                                             // 536\n      return;                                                                                                          // 536\n    }                                                                                                                  //\n    this._componentInternals.mixins = [];                                                                              // 533\n    ref = this.mixins();                                                                                               // 539\n    for (i = 0, len = ref.length; i < len; i++) {                                                                      // 539\n      mixin = ref[i];                                                                                                  //\n      this.requireMixin(mixin);                                                                                        // 540\n    }                                                                                                                  // 539\n    return this;                                                                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.getMixin = function(nameOrMixin) {                                                          // 451\n    var i, j, len, len1, mixin, mixinComponentName, ref, ref1, ref2;                                                   // 546\n    assert((ref = this._componentInternals) != null ? ref.mixins : void 0);                                            // 546\n    if (_.isString(nameOrMixin)) {                                                                                     // 548\n      ref1 = this._componentInternals.mixins;                                                                          // 549\n      for (i = 0, len = ref1.length; i < len; i++) {                                                                   // 549\n        mixin = ref1[i];                                                                                               //\n        mixinComponentName = (typeof mixin.componentName === \"function\" ? mixin.componentName() : void 0) || null;     // 552\n        if (mixinComponentName && mixinComponentName === nameOrMixin) {                                                // 553\n          return mixin;                                                                                                // 553\n        }                                                                                                              //\n      }                                                                                                                // 549\n    } else {                                                                                                           //\n      ref2 = this._componentInternals.mixins;                                                                          // 556\n      for (j = 0, len1 = ref2.length; j < len1; j++) {                                                                 // 556\n        mixin = ref2[j];                                                                                               //\n        if (mixin.constructor === nameOrMixin) {                                                                       // 558\n          return mixin;                                                                                                // 559\n        } else if (mixin === nameOrMixin) {                                                                            //\n          return mixin;                                                                                                // 563\n        }                                                                                                              //\n      }                                                                                                                // 556\n    }                                                                                                                  //\n    return null;                                                                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.callFirstWith = function() {                                                                // 451\n    var afterComponentOrMixin, args, mixin, propertyName;                                                              // 570\n    afterComponentOrMixin = arguments[0], propertyName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n    mixin = this.getFirstWith(afterComponentOrMixin, propertyName);                                                    // 570\n    if (!mixin) {                                                                                                      // 573\n      return;                                                                                                          // 573\n    }                                                                                                                  //\n    if (_.isFunction(mixin[propertyName])) {                                                                           // 575\n      return mixin[propertyName].apply(mixin, args);                                                                   // 576\n    } else {                                                                                                           //\n      return mixin[propertyName];                                                                                      // 578\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.getFirstWith = function(afterComponentOrMixin, propertyName) {                              // 451\n    var found, i, len, mixin, ref, ref1;                                                                               // 581\n    assert((ref = this._componentInternals) != null ? ref.mixins : void 0);                                            // 581\n    if (!afterComponentOrMixin) {                                                                                      // 584\n      if (propertyName in this) {                                                                                      // 585\n        return this;                                                                                                   // 585\n      }                                                                                                                //\n      found = true;                                                                                                    // 585\n    } else if (afterComponentOrMixin && afterComponentOrMixin === this) {                                              //\n      found = true;                                                                                                    // 590\n    } else {                                                                                                           //\n      found = false;                                                                                                   // 592\n    }                                                                                                                  //\n    ref1 = this._componentInternals.mixins;                                                                            // 595\n    for (i = 0, len = ref1.length; i < len; i++) {                                                                     // 595\n      mixin = ref1[i];                                                                                                 //\n      if (found && propertyName in mixin) {                                                                            // 596\n        return mixin;                                                                                                  // 596\n      }                                                                                                                //\n      if (mixin === afterComponentOrMixin) {                                                                           // 598\n        found = true;                                                                                                  // 598\n      }                                                                                                                //\n    }                                                                                                                  // 595\n    return null;                                                                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.renderComponent = function(parentComponent) {                                                         // 451\n    return Tracker.nonreactive((function(_this) {                                                                      //\n      return function() {                                                                                              //\n        var componentClass, data;                                                                                      // 609\n        componentClass = _this;                                                                                        // 609\n        if (Blaze.currentView) {                                                                                       // 611\n          data = Template.currentData();                                                                               // 617\n        } else {                                                                                                       //\n          data = null;                                                                                                 // 621\n        }                                                                                                              //\n        if ((data != null ? data.constructor : void 0) !== argumentsConstructor) {                                     // 623\n          return wrapViewAndTemplate(Blaze.currentView, function() {                                                   // 626\n            var component;                                                                                             // 627\n            component = new componentClass();                                                                          // 627\n            return component.renderComponent(parentComponent);                                                         // 629\n          });                                                                                                          //\n        }                                                                                                              //\n        return function() {                                                                                            //\n          var currentWith, nonreactiveArguments, reactiveArguments;                                                    // 636\n          assert(Tracker.active);                                                                                      // 636\n          currentWith = Blaze.getView('with');                                                                         // 636\n          reactiveArguments = new ComputedField(function() {                                                           // 636\n            data = currentWith.dataVar.get();                                                                          // 649\n            assert.equal(data != null ? data.constructor : void 0, argumentsConstructor);                              // 649\n            return data._arguments;                                                                                    //\n          }, EJSON.equals);                                                                                            //\n          nonreactiveArguments = reactiveArguments();                                                                  // 636\n          return Tracker.nonreactive(function() {                                                                      //\n            var template;                                                                                              // 661\n            template = Blaze._withCurrentView(Blaze.currentView.parentView.parentView, (function(_this) {              // 661\n              return function() {                                                                                      //\n                return wrapViewAndTemplate(Blaze.currentView, function() {                                             // 664\n                  var component;                                                                                       // 666\n                  component = (function(func, args, ctor) {                                                            // 666\n                    ctor.prototype = func.prototype;                                                                   //\n                    var child = new ctor, result = func.apply(child, args);                                            //\n                    return Object(result) === result ? result : child;                                                 //\n                  })(componentClass, nonreactiveArguments, function(){});                                              //\n                  return component.renderComponent(parentComponent);                                                   // 668\n                });                                                                                                    //\n              };                                                                                                       //\n            })(this));                                                                                                 //\n            registerFirstCreatedHook(template, function() {                                                            // 661\n              this.view.originalParentView = this.view.parentView;                                                     // 674\n              return this.view.parentView = this.view.parentView.parentView.parentView;                                //\n            });                                                                                                        //\n            return template;                                                                                           //\n          });                                                                                                          //\n        };                                                                                                             //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.renderComponent = function(parentComponent) {                                               // 451\n    return Tracker.nonreactive((function(_this) {                                                                      //\n      return function() {                                                                                              //\n        var component, template, templateBase;                                                                         // 685\n        component = _this;                                                                                             // 685\n        component.createMixins();                                                                                      // 685\n        templateBase = getTemplateBase(component);                                                                     // 685\n        template = new Blaze.Template(\"BlazeComponent.\" + (component.componentName() || 'unnamed'), templateBase.renderFunction);\n        if (component._componentInternals == null) {                                                                   //\n          component._componentInternals = {};                                                                          //\n        }                                                                                                              //\n        component._componentInternals.templateBase = templateBase;                                                     // 685\n        registerHooks(template, {                                                                                      // 685\n          onCreated: function() {                                                                                      // 705\n            var base, base1, base2, base3, componentOrMixin, results;                                                  // 708\n            if (parentComponent) {                                                                                     // 708\n              Tracker.nonreactive((function(_this) {                                                                   // 710\n                return function() {                                                                                    //\n                  assert(!component.parentComponent());                                                                // 712\n                  component.parentComponent(parentComponent);                                                          // 712\n                  return parentComponent.addChildComponent(component);                                                 //\n                };                                                                                                     //\n              })(this));                                                                                               //\n            }                                                                                                          //\n            this.view._onViewRendered((function(_this) {                                                               // 708\n              return function() {                                                                                      //\n                var componentOrMixin, results;                                                                         // 720\n                if (_this.view.renderCount !== 1) {                                                                    // 720\n                  return;                                                                                              // 720\n                }                                                                                                      //\n                componentOrMixin = null;                                                                               // 720\n                results = [];                                                                                          // 724\n                while (componentOrMixin = _this.component.getFirstWith(componentOrMixin, 'events')) {                  //\n                  results.push(addEvents(_this.view, componentOrMixin));                                               // 725\n                }                                                                                                      //\n                return results;                                                                                        //\n              };                                                                                                       //\n            })(this));                                                                                                 //\n            this.component = component;                                                                                // 708\n            assert(!Tracker.nonreactive((function(_this) {                                                             // 708\n              return function() {                                                                                      //\n                var base;                                                                                              // 730\n                return typeof (base = _this.component._componentInternals).templateInstance === \"function\" ? base.templateInstance() : void 0;\n              };                                                                                                       //\n            })(this)));                                                                                                //\n            if ((base = this.component._componentInternals).templateInstance == null) {                                //\n              base.templateInstance = new ReactiveField(this, function(a, b) {                                         //\n                return a === b;                                                                                        //\n              });                                                                                                      //\n            }                                                                                                          //\n            this.component._componentInternals.templateInstance(this);                                                 // 708\n            if ((base1 = this.component._componentInternals).isCreated == null) {                                      //\n              base1.isCreated = new ReactiveField(true);                                                               //\n            }                                                                                                          //\n            this.component._componentInternals.isCreated(true);                                                        // 708\n            if ((base2 = this.component._componentInternals).isRendered == null) {                                     //\n              base2.isRendered = new ReactiveField(false);                                                             //\n            }                                                                                                          //\n            this.component._componentInternals.isRendered(false);                                                      // 708\n            if ((base3 = this.component._componentInternals).isDestroyed == null) {                                    //\n              base3.isDestroyed = new ReactiveField(false);                                                            //\n            }                                                                                                          //\n            this.component._componentInternals.isDestroyed(false);                                                     // 708\n            try {                                                                                                      // 746\n              this.component._componentInternals.inOnCreated = true;                                                   // 751\n              componentOrMixin = null;                                                                                 // 751\n              results = [];                                                                                            // 753\n              while (componentOrMixin = this.component.getFirstWith(componentOrMixin, 'onCreated')) {                  //\n                results.push(componentOrMixin.onCreated());                                                            // 754\n              }                                                                                                        //\n              return results;                                                                                          //\n            } finally {                                                                                                //\n              delete this.component._componentInternals.inOnCreated;                                                   // 756\n            }                                                                                                          //\n          },                                                                                                           //\n          onRendered: function() {                                                                                     // 705\n            var base, componentOrMixin, results;                                                                       // 761\n            if ((base = this.component._componentInternals).isRendered == null) {                                      //\n              base.isRendered = new ReactiveField(true);                                                               //\n            }                                                                                                          //\n            this.component._componentInternals.isRendered(true);                                                       // 761\n            Tracker.nonreactive((function(_this) {                                                                     // 761\n              return function() {                                                                                      //\n                return assert.equal(_this.component._componentInternals.isCreated(), true);                            //\n              };                                                                                                       //\n            })(this));                                                                                                 //\n            try {                                                                                                      // 767\n              this.component._componentInternals.inOnRendered = true;                                                  // 769\n              componentOrMixin = null;                                                                                 // 769\n              results = [];                                                                                            // 771\n              while (componentOrMixin = this.component.getFirstWith(componentOrMixin, 'onRendered')) {                 //\n                results.push(componentOrMixin.onRendered());                                                           // 772\n              }                                                                                                        //\n              return results;                                                                                          //\n            } finally {                                                                                                //\n              delete this.component._componentInternals.inOnRendered;                                                  // 774\n            }                                                                                                          //\n          },                                                                                                           //\n          onDestroyed: function() {                                                                                    // 705\n            return this.autorun((function(_this) {                                                                     //\n              return function(computation) {                                                                           //\n                if (_this.component.childComponents().length) {                                                        // 782\n                  return;                                                                                              // 782\n                }                                                                                                      //\n                computation.stop();                                                                                    // 782\n                return Tracker.nonreactive(function() {                                                                //\n                  var base, base1, componentOrMixin;                                                                   // 786\n                  assert.equal(_this.component._componentInternals.isCreated(), true);                                 // 786\n                  _this.component._componentInternals.isCreated(false);                                                // 786\n                  if ((base = _this.component._componentInternals).isRendered == null) {                               //\n                    base.isRendered = new ReactiveField(false);                                                        //\n                  }                                                                                                    //\n                  _this.component._componentInternals.isRendered(false);                                               // 786\n                  if ((base1 = _this.component._componentInternals).isDestroyed == null) {                             //\n                    base1.isDestroyed = new ReactiveField(true);                                                       //\n                  }                                                                                                    //\n                  _this.component._componentInternals.isDestroyed(true);                                               // 786\n                  componentOrMixin = null;                                                                             // 786\n                  while (componentOrMixin = _this.component.getFirstWith(componentOrMixin, 'onDestroyed')) {           // 797\n                    componentOrMixin.onDestroyed();                                                                    // 798\n                  }                                                                                                    //\n                  if (parentComponent) {                                                                               // 800\n                    component.parentComponent(null);                                                                   // 802\n                    parentComponent.removeChildComponent(component);                                                   // 802\n                  }                                                                                                    //\n                  return _this.component._componentInternals.templateInstance(null);                                   //\n                });                                                                                                    //\n              };                                                                                                       //\n            })(this));                                                                                                 //\n          }                                                                                                            //\n        });                                                                                                            //\n        return template;                                                                                               //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.removeComponent = function() {                                                              // 451\n    if (this.isRendered()) {                                                                                           // 811\n      return Blaze.remove(this._componentInternals.templateInstance().view);                                           //\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.renderComponentToHTML = function(parentComponent, parentView, data) {                                 // 451\n    var component;                                                                                                     // 814\n    component = Tracker.nonreactive((function(_this) {                                                                 // 814\n      return function() {                                                                                              //\n        var componentClass;                                                                                            // 815\n        componentClass = _this;                                                                                        // 815\n        parentView = parentView || currentViewIfRendering() || ((parentComponent != null ? parentComponent.isRendered() : void 0) && parentComponent._componentInternals.templateInstance().view) || null;\n        return wrapViewAndTemplate(parentView, function() {                                                            //\n          return new componentClass();                                                                                 //\n        });                                                                                                            //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    if (arguments.length > 2) {                                                                                        // 822\n      return component.renderComponentToHTML(parentComponent, parentView, data);                                       //\n    } else {                                                                                                           //\n      return component.renderComponentToHTML(parentComponent, parentView);                                             //\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.renderComponentToHTML = function(parentComponent, parentView, data) {                       // 451\n    var expandedView, template;                                                                                        // 828\n    template = Tracker.nonreactive((function(_this) {                                                                  // 828\n      return function() {                                                                                              //\n        parentView = parentView || currentViewIfRendering() || ((parentComponent != null ? parentComponent.isRendered() : void 0) && parentComponent._componentInternals.templateInstance().view) || null;\n        return wrapViewAndTemplate(parentView, function() {                                                            //\n          return _this.renderComponent(parentComponent);                                                               //\n        });                                                                                                            //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    if (arguments.length > 2) {                                                                                        // 834\n      expandedView = expandView(Blaze._TemplateWith(data, contentAsFunc(template)), parentView);                       // 835\n    } else {                                                                                                           //\n      expandedView = expandView(contentAsView(template), parentView);                                                  // 837\n    }                                                                                                                  //\n    return HTML.toHTML(expandedView);                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.template = function() {                                                                     // 451\n    return this.callFirstWith(this, 'template') || this.constructor.componentName();                                   //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.onCreated = function() {                                                                    // 451\n    return callTemplateBaseHooks(this, 'created');                                                                     //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.onRendered = function() {                                                                   // 451\n    return callTemplateBaseHooks(this, 'rendered');                                                                    //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.onDestroyed = function() {                                                                  // 451\n    return callTemplateBaseHooks(this, 'destroyed');                                                                   //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.isCreated = function() {                                                                    // 451\n    var base;                                                                                                          // 854\n    if (this._componentInternals == null) {                                                                            //\n      this._componentInternals = {};                                                                                   //\n    }                                                                                                                  //\n    if ((base = this._componentInternals).isCreated == null) {                                                         //\n      base.isCreated = new ReactiveField(false);                                                                       //\n    }                                                                                                                  //\n    return this._componentInternals.isCreated();                                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.isRendered = function() {                                                                   // 451\n    var base;                                                                                                          // 860\n    if (this._componentInternals == null) {                                                                            //\n      this._componentInternals = {};                                                                                   //\n    }                                                                                                                  //\n    if ((base = this._componentInternals).isRendered == null) {                                                        //\n      base.isRendered = new ReactiveField(false);                                                                      //\n    }                                                                                                                  //\n    return this._componentInternals.isRendered();                                                                      //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.isDestroyed = function() {                                                                  // 451\n    var base;                                                                                                          // 866\n    if (this._componentInternals == null) {                                                                            //\n      this._componentInternals = {};                                                                                   //\n    }                                                                                                                  //\n    if ((base = this._componentInternals).isDestroyed == null) {                                                       //\n      base.isDestroyed = new ReactiveField(false);                                                                     //\n    }                                                                                                                  //\n    return this._componentInternals.isDestroyed();                                                                     //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.insertDOMElement = function(parent, node, before) {                                         // 451\n    if (before == null) {                                                                                              //\n      before = null;                                                                                                   //\n    }                                                                                                                  //\n    if (parent && node && (node.parentNode !== parent || node.nextSibling !== before)) {                               // 873\n      parent.insertBefore(node, before);                                                                               // 874\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.moveDOMElement = function(parent, node, before) {                                           // 451\n    if (before == null) {                                                                                              //\n      before = null;                                                                                                   //\n    }                                                                                                                  //\n    if (parent && node && (node.parentNode !== parent || node.nextSibling !== before)) {                               // 880\n      parent.insertBefore(node, before);                                                                               // 881\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.removeDOMElement = function(parent, node) {                                                 // 451\n    if (parent && node && node.parentNode === parent) {                                                                // 886\n      parent.removeChild(node);                                                                                        // 887\n    }                                                                                                                  //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.events = function() {                                                                       // 451\n    var eventMap, events, fn, handler, i, len, ref, results, spec, templateInstance, view;                             // 892\n    if (this._componentInternals == null) {                                                                            //\n      this._componentInternals = {};                                                                                   //\n    }                                                                                                                  //\n    if (!this._componentInternals.templateInstance) {                                                                  // 896\n      return [];                                                                                                       // 896\n    }                                                                                                                  //\n    view = Tracker.nonreactive((function(_this) {                                                                      // 892\n      return function() {                                                                                              //\n        return _this._componentInternals.templateInstance().view;                                                      //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    templateInstance = getTemplateInstanceFunction(view, true);                                                        // 892\n    ref = this._componentInternals.templateBase.__eventMaps;                                                           // 903\n    results = [];                                                                                                      // 903\n    for (i = 0, len = ref.length; i < len; i++) {                                                                      //\n      events = ref[i];                                                                                                 //\n      eventMap = {};                                                                                                   // 904\n      fn = function(spec, handler) {                                                                                   // 906\n        return eventMap[spec] = function() {                                                                           //\n          var args;                                                                                                    // 912\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                // 912\n          return withTemplateInstanceFunc(templateInstance, function() {                                               //\n            return Blaze._withCurrentView(view, function() {                                                           //\n              return handler.apply(view, args);                                                                        //\n            });                                                                                                        //\n          });                                                                                                          //\n        };                                                                                                             //\n      };                                                                                                               //\n      for (spec in events) {                                                                                           // 906\n        handler = events[spec];                                                                                        //\n        fn(spec, handler);                                                                                             // 907\n      }                                                                                                                // 906\n      results.push(eventMap);                                                                                          // 904\n    }                                                                                                                  // 903\n    return results;                                                                                                    //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.data = function(path, equalsFunc) {                                                         // 451\n    var base, ref, view;                                                                                               // 923\n    if (this._componentInternals == null) {                                                                            //\n      this._componentInternals = {};                                                                                   //\n    }                                                                                                                  //\n    if ((base = this._componentInternals).templateInstance == null) {                                                  //\n      base.templateInstance = new ReactiveField(null, function(a, b) {                                                 //\n        return a === b;                                                                                                //\n      });                                                                                                              //\n    }                                                                                                                  //\n    if (view = (ref = this._componentInternals.templateInstance()) != null ? ref.view : void 0) {                      // 926\n      if (path != null) {                                                                                              // 927\n        return DataLookup.get((function(_this) {                                                                       // 928\n          return function() {                                                                                          //\n            return Blaze.getData(view);                                                                                //\n          };                                                                                                           //\n        })(this), path, equalsFunc);                                                                                   //\n      } else {                                                                                                         //\n        return Blaze.getData(view);                                                                                    // 933\n      }                                                                                                                //\n    }                                                                                                                  //\n    return void 0;                                                                                                     //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.currentData = function(path, equalsFunc) {                                                            // 451\n    var currentView;                                                                                                   // 945\n    if (!Blaze.currentView) {                                                                                          // 945\n      return void 0;                                                                                                   // 945\n    }                                                                                                                  //\n    currentView = Blaze.currentView;                                                                                   // 945\n    if (_.isString(path)) {                                                                                            // 949\n      path = path.split('.');                                                                                          // 950\n    } else if (!_.isArray(path)) {                                                                                     //\n      return Blaze.getData(currentView);                                                                               // 952\n    }                                                                                                                  //\n    return DataLookup.get((function(_this) {                                                                           //\n      return function() {                                                                                              //\n        var lexicalData, result;                                                                                       // 955\n        if (Blaze._lexicalBindingLookup && (lexicalData = Blaze._lexicalBindingLookup(currentView, path[0]))) {        // 955\n          result = {};                                                                                                 // 958\n          result[path[0]] = lexicalData;                                                                               // 958\n          return result;                                                                                               // 960\n        }                                                                                                              //\n        return Blaze.getData(currentView);                                                                             //\n      };                                                                                                               //\n    })(this), path, equalsFunc);                                                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.currentData = function(path, equalsFunc) {                                                  // 451\n    return this.constructor.currentData(path, equalsFunc);                                                             //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.component = function() {                                                                    // 451\n    return this;                                                                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.currentComponent = function() {                                                                       // 451\n    var templateInstance;                                                                                              // 981\n    templateInstance = getTemplateInstanceFunction(Blaze.currentView, false);                                          // 981\n    return templateInstanceToComponent(templateInstance, false);                                                       //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.currentComponent = function() {                                                             // 451\n    return this.constructor.currentComponent();                                                                        //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.firstNode = function() {                                                                    // 451\n    if (this.isRendered()) {                                                                                           // 989\n      return this._componentInternals.templateInstance().view._domrange.firstNode();                                   // 989\n    }                                                                                                                  //\n    return void 0;                                                                                                     //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.lastNode = function() {                                                                     // 451\n    if (this.isRendered()) {                                                                                           // 994\n      return this._componentInternals.templateInstance().view._domrange.lastNode();                                    // 994\n    }                                                                                                                  //\n    return void 0;                                                                                                     //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponent.prototype.autorun = function(runFunc) {                                                               // 451\n    var templateInstance;                                                                                              // 1000\n    templateInstance = Tracker.nonreactive((function(_this) {                                                          // 1000\n      return function() {                                                                                              //\n        var ref;                                                                                                       // 1001\n        return (ref = _this._componentInternals) != null ? typeof ref.templateInstance === \"function\" ? ref.templateInstance() : void 0 : void 0;\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    if (!templateInstance) {                                                                                           // 1003\n      throw new Error(\"The component has to be created before calling 'autorun'.\");                                    // 1003\n    }                                                                                                                  //\n    return templateInstance.autorun(_.bind(runFunc, this));                                                            //\n  };                                                                                                                   //\n                                                                                                                       //\n  return BlazeComponent;                                                                                               //\n                                                                                                                       //\n})(BaseComponent);                                                                                                     //\n                                                                                                                       //\nSUPPORTS_REACTIVE_INSTANCE = ['subscriptionsReady'];                                                                   // 1\n                                                                                                                       //\nREQUIRE_RENDERED_INSTANCE = ['$', 'find', 'findAll'];                                                                  // 1\n                                                                                                                       //\nref = Blaze.TemplateInstance.prototype;                                                                                // 1019\nfor (methodName in ref) {                                                                                              // 1019\n  method = ref[methodName];                                                                                            //\n  if (!(methodName in BlazeComponent.prototype)) {                                                                     //\n    (function(methodName, method) {                                                                                    // 1020\n      if (indexOf.call(SUPPORTS_REACTIVE_INSTANCE, methodName) >= 0) {                                                 // 1021\n        return BlazeComponent.prototype[methodName] = function() {                                                     //\n          var args, base, templateInstance;                                                                            // 1023\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                // 1023\n          if (this._componentInternals == null) {                                                                      //\n            this._componentInternals = {};                                                                             //\n          }                                                                                                            //\n          if ((base = this._componentInternals).templateInstance == null) {                                            //\n            base.templateInstance = new ReactiveField(null, function(a, b) {                                           //\n              return a === b;                                                                                          //\n            });                                                                                                        //\n          }                                                                                                            //\n          if (templateInstance = this._componentInternals.templateInstance()) {                                        // 1026\n            return templateInstance[methodName].apply(templateInstance, args);                                         // 1027\n          }                                                                                                            //\n          return void 0;                                                                                               //\n        };                                                                                                             //\n      } else if (indexOf.call(REQUIRE_RENDERED_INSTANCE, methodName) >= 0) {                                           //\n        return BlazeComponent.prototype[methodName] = function() {                                                     //\n          var args, ref1;                                                                                              // 1033\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                // 1033\n          if (this.isRendered()) {                                                                                     // 1033\n            return (ref1 = this._componentInternals.templateInstance())[methodName].apply(ref1, args);                 // 1033\n          }                                                                                                            //\n          return void 0;                                                                                               //\n        };                                                                                                             //\n      } else {                                                                                                         //\n        return BlazeComponent.prototype[methodName] = function() {                                                     //\n          var args, templateInstance;                                                                                  // 1039\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                // 1039\n          templateInstance = Tracker.nonreactive((function(_this) {                                                    // 1039\n            return function() {                                                                                        //\n              var ref1;                                                                                                // 1040\n              return (ref1 = _this._componentInternals) != null ? typeof ref1.templateInstance === \"function\" ? ref1.templateInstance() : void 0 : void 0;\n            };                                                                                                         //\n          })(this));                                                                                                   //\n          if (!templateInstance) {                                                                                     // 1042\n            throw new Error(\"The component has to be created before calling '\" + methodName + \"'.\");                   // 1042\n          }                                                                                                            //\n          return templateInstance[methodName].apply(templateInstance, args);                                           //\n        };                                                                                                             //\n      }                                                                                                                //\n    })(methodName, method);                                                                                            //\n  }                                                                                                                    //\n}                                                                                                                      // 1019\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/debug.coffee.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar                                                                                                                    // 1\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty,                                                                                         //\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n                                                                                                                       //\nBlazeComponentDebug = (function(superClass) {                                                                          // 1\n  extend(BlazeComponentDebug, superClass);                                                                             // 2\n                                                                                                                       //\n  function BlazeComponentDebug() {                                                                                     //\n    return BlazeComponentDebug.__super__.constructor.apply(this, arguments);                                           //\n  }                                                                                                                    //\n                                                                                                                       //\n  BlazeComponentDebug.startComponent = function(component) {                                                           // 2\n    BlazeComponentDebug.__super__.constructor.startComponent.apply(this, arguments);                                   // 3\n    return console.log(component.data());                                                                              //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponentDebug.startMarkedComponent = function(component) {                                                     // 2\n    BlazeComponentDebug.__super__.constructor.startMarkedComponent.apply(this, arguments);                             // 8\n    return console.log(component.data());                                                                              //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponentDebug.dumpComponentSubtree = function(rootComponentOrElement) {                                        // 2\n    if ('nodeType' in rootComponentOrElement && rootComponentOrElement.nodeType === Node.ELEMENT_NODE) {               // 13\n      rootComponentOrElement = BlazeComponent.getComponentForElement(rootComponentOrElement);                          // 14\n    }                                                                                                                  //\n    return BlazeComponentDebug.__super__.constructor.dumpComponentSubtree.apply(this, arguments);                      //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponentDebug.dumpComponentTree = function(rootComponentOrElement) {                                           // 2\n    if ('nodeType' in rootComponentOrElement && rootComponentOrElement.nodeType === Node.ELEMENT_NODE) {               // 19\n      rootComponentOrElement = BlazeComponent.getComponentForElement(rootComponentOrElement);                          // 20\n    }                                                                                                                  //\n    return BlazeComponentDebug.__super__.constructor.dumpComponentTree.apply(this, arguments);                         //\n  };                                                                                                                   //\n                                                                                                                       //\n  BlazeComponentDebug.dumpAllComponents = function() {                                                                 // 2\n    var allRootComponents, j, len, rootComponent;                                                                      // 25\n    allRootComponents = [];                                                                                            // 25\n    $('*').each((function(_this) {                                                                                     // 25\n      return function(i, element) {                                                                                    //\n        var component, rootComponent;                                                                                  // 28\n        component = BlazeComponent.getComponentForElement(element);                                                    // 28\n        if (!component) {                                                                                              // 29\n          return;                                                                                                      // 29\n        }                                                                                                              //\n        rootComponent = _this.componentRoot(component);                                                                // 28\n        if (indexOf.call(allRootComponents, rootComponent) < 0) {                                                      // 31\n          return allRootComponents.push(rootComponent);                                                                //\n        }                                                                                                              //\n      };                                                                                                               //\n    })(this));                                                                                                         //\n    for (j = 0, len = allRootComponents.length; j < len; j++) {                                                        // 33\n      rootComponent = allRootComponents[j];                                                                            //\n      this.dumpComponentSubtree(rootComponent);                                                                        // 34\n    }                                                                                                                  // 33\n  };                                                                                                                   //\n                                                                                                                       //\n  return BlazeComponentDebug;                                                                                          //\n                                                                                                                       //\n})(BaseComponentDebug);                                                                                                //\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary_blaze-components/client.coffee.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar EventHandler, WHITESPACE_REGEX, createUIHooks, originalDOMRangeAttach, originalExpandAttributes, originalInsertNodeWithHooks, originalMakeAttributeHandler, originalMoveNodeWithHooks, originalToText, propagateUIHooks;\n                                                                                                                       //\npropagateUIHooks = function(parent, node) {                                                                            // 1\n  var childNode, i, len, ref;                                                                                          // 2\n  if (!parent._uihooks || node._uihooks) {                                                                             // 2\n    return;                                                                                                            // 2\n  }                                                                                                                    //\n  node._uihooks = _.extend({}, parent._uihooks, {                                                                      // 2\n    parentNode: node                                                                                                   // 4\n  });                                                                                                                  //\n  if (!node.hasChildNodes()) {                                                                                         // 6\n    return;                                                                                                            // 6\n  }                                                                                                                    //\n  ref = node.childNodes;                                                                                               // 8\n  for (i = 0, len = ref.length; i < len; i++) {                                                                        // 8\n    childNode = ref[i];                                                                                                //\n    if (childNode.nodeType === Node.ELEMENT_NODE) {                                                                    //\n      propagateUIHooks(node, childNode);                                                                               // 9\n    }                                                                                                                  //\n  }                                                                                                                    // 8\n};                                                                                                                     // 1\n                                                                                                                       //\noriginalInsertNodeWithHooks = Blaze._DOMRange._insertNodeWithHooks;                                                    // 1\n                                                                                                                       //\nBlaze._DOMRange._insertNodeWithHooks = function(node, parent, next) {                                                  // 1\n  propagateUIHooks(parent, node);                                                                                      // 16\n  return originalInsertNodeWithHooks(node, parent, next);                                                              //\n};                                                                                                                     // 15\n                                                                                                                       //\noriginalMoveNodeWithHooks = Blaze._DOMRange._moveNodeWithHooks;                                                        // 1\n                                                                                                                       //\nBlaze._DOMRange._moveNodeWithHooks = function(node, parent, next) {                                                    // 1\n  propagateUIHooks(parent, node);                                                                                      // 21\n  return originalMoveNodeWithHooks(node, parent, next);                                                                //\n};                                                                                                                     // 20\n                                                                                                                       //\ncreateUIHooks = function(component, parentNode) {                                                                      // 1\n  return {                                                                                                             //\n    parentNode: parentNode,                                                                                            // 25\n    insertElement: function(node, before) {                                                                            // 25\n      return component.insertDOMElement(this.parentNode, node, before);                                                //\n    },                                                                                                                 //\n    moveElement: function(node, before) {                                                                              // 25\n      return component.moveDOMElement(this.parentNode, node, before);                                                  //\n    },                                                                                                                 //\n    removeElement: function(node) {                                                                                    // 25\n      return component.removeDOMElement(node.parentNode, node);                                                        //\n    }                                                                                                                  //\n  };                                                                                                                   //\n};                                                                                                                     // 24\n                                                                                                                       //\noriginalDOMRangeAttach = Blaze._DOMRange.prototype.attach;                                                             // 1\n                                                                                                                       //\nBlaze._DOMRange.prototype.attach = function(parentElement, nextNode, _isMove, _isReplace) {                            // 1\n  var childNode, component, i, j, len, len1, member, oldUIHooks, ref, ref1, ref2, ref3;                                // 38\n  if (component = (ref = this.view) != null ? (ref1 = ref._templateInstance) != null ? ref1.component : void 0 : void 0) {\n    ref2 = this.members;                                                                                               // 39\n    for (i = 0, len = ref2.length; i < len; i++) {                                                                     // 39\n      member = ref2[i];                                                                                                //\n      if (!(!(member instanceof Blaze._DOMRange))) {                                                                   //\n        continue;                                                                                                      //\n      }                                                                                                                //\n      member._uihooks = createUIHooks(component, member);                                                              // 40\n      if (!member.hasChildNodes()) {                                                                                   // 42\n        continue;                                                                                                      // 42\n      }                                                                                                                //\n      ref3 = member.childNodes;                                                                                        // 44\n      for (j = 0, len1 = ref3.length; j < len1; j++) {                                                                 // 44\n        childNode = ref3[j];                                                                                           //\n        if (childNode.nodeType === Node.ELEMENT_NODE) {                                                                //\n          propagateUIHooks(member, childNode);                                                                         // 45\n        }                                                                                                              //\n      }                                                                                                                // 44\n    }                                                                                                                  // 39\n    oldUIHooks = parentElement._uihooks;                                                                               // 39\n    try {                                                                                                              // 48\n      parentElement._uihooks = createUIHooks(component, parentElement);                                                // 49\n      return originalDOMRangeAttach.apply(this, arguments);                                                            // 50\n    } finally {                                                                                                        //\n      if (oldUIHooks) {                                                                                                // 52\n        parentElement._uihooks = oldUIHooks;                                                                           // 53\n      } else {                                                                                                         //\n        delete parentElement._uihooks;                                                                                 // 55\n      }                                                                                                                //\n    }                                                                                                                  //\n  }                                                                                                                    //\n  return originalDOMRangeAttach.apply(this, arguments);                                                                //\n};                                                                                                                     // 37\n                                                                                                                       //\nWHITESPACE_REGEX = /^\\s+$/;                                                                                            // 1\n                                                                                                                       //\nEventHandler = Blaze._AttributeHandler.extend({                                                                        // 1\n  update: function(element, oldValue, value) {                                                                         // 62\n    var $element, eventName, fun, i, j, len, len1, results;                                                            // 63\n    if (!oldValue) {                                                                                                   // 63\n      oldValue = [];                                                                                                   // 63\n    }                                                                                                                  //\n    if (!_.isArray(oldValue)) {                                                                                        // 64\n      oldValue = [oldValue];                                                                                           // 64\n    }                                                                                                                  //\n    if (!value) {                                                                                                      // 66\n      value = [];                                                                                                      // 66\n    }                                                                                                                  //\n    if (!_.isArray(value)) {                                                                                           // 67\n      value = [value];                                                                                                 // 67\n    }                                                                                                                  //\n    assert(_.every(oldValue, share.isEventHandler), oldValue);                                                         // 63\n    assert(_.every(value, share.isEventHandler), value);                                                               // 63\n    $element = $(element);                                                                                             // 63\n    eventName = this.name.substr(2).toLowerCase();                                                                     // 63\n    for (i = 0, len = oldValue.length; i < len; i++) {                                                                 // 75\n      fun = oldValue[i];                                                                                               //\n      $element.off(eventName, fun);                                                                                    // 75\n    }                                                                                                                  // 75\n    results = [];                                                                                                      // 76\n    for (j = 0, len1 = value.length; j < len1; j++) {                                                                  //\n      fun = value[j];                                                                                                  //\n      results.push($element.on(eventName, fun));                                                                       // 76\n    }                                                                                                                  // 76\n    return results;                                                                                                    //\n  }                                                                                                                    //\n});                                                                                                                    //\n                                                                                                                       //\noriginalMakeAttributeHandler = Blaze._makeAttributeHandler;                                                            // 1\n                                                                                                                       //\nBlaze._makeAttributeHandler = function(elem, name, value) {                                                            // 1\n  if (share.EVENT_HANDLER_REGEX.test(name)) {                                                                          // 80\n    return new EventHandler(name, value);                                                                              //\n  } else {                                                                                                             //\n    return originalMakeAttributeHandler(elem, name, value);                                                            //\n  }                                                                                                                    //\n};                                                                                                                     // 79\n                                                                                                                       //\noriginalToText = Blaze._toText;                                                                                        // 1\n                                                                                                                       //\nBlaze._toText = function(htmljs, parentView, textMode) {                                                               // 1\n  if (share.isEventHandler(htmljs)) {                                                                                  // 89\n    return htmljs;                                                                                                     //\n  } else if (_.isArray(htmljs) && _.some(htmljs, share.isEventHandler)) {                                              //\n    return _.filter(htmljs, function(fun) {                                                                            //\n      if (share.isEventHandler(fun)) {                                                                                 // 94\n        return true;                                                                                                   // 94\n      }                                                                                                                //\n      if (WHITESPACE_REGEX.test(fun)) {                                                                                // 95\n        return false;                                                                                                  // 95\n      }                                                                                                                //\n      throw new Error(\"Invalid event handler: \" + fun);                                                                // 98\n    });                                                                                                                //\n  } else {                                                                                                             //\n    return originalToText(htmljs, parentView, textMode);                                                               //\n  }                                                                                                                    //\n};                                                                                                                     // 86\n                                                                                                                       //\noriginalExpandAttributes = Blaze._expandAttributes;                                                                    // 1\n                                                                                                                       //\nBlaze._expandAttributes = function(attrs, parentView) {                                                                // 1\n  var previousInExpandAttributes;                                                                                      // 104\n  previousInExpandAttributes = share.inExpandAttributes;                                                               // 104\n  share.inExpandAttributes = true;                                                                                     // 104\n  try {                                                                                                                // 106\n    return originalExpandAttributes(attrs, parentView);                                                                //\n  } finally {                                                                                                          //\n    share.inExpandAttributes = previousInExpandAttributes;                                                             // 109\n  }                                                                                                                    //\n};                                                                                                                     // 103\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['peerlibrary:blaze-components'] = {}, {\n  Template: Template,\n  BlazeComponent: BlazeComponent,\n  BlazeComponentDebug: BlazeComponentDebug\n});\n\n})();\n","servePath":"/packages/peerlibrary_blaze-components.js","sourceMap":{"version":3,"sources":["/packages/peerlibrary_blaze-components/template.coffee","/packages/peerlibrary_blaze-components/compatibility/templating.js","/packages/peerlibrary_blaze-components/compatibility/template.dynamic.js","/packages/peerlibrary_blaze-components/compatibility/dynamic.js","/packages/peerlibrary_blaze-components/compatibility/lookup.js","/packages/peerlibrary_blaze-components/compatibility/attrs.js","/packages/peerlibrary_blaze-components/compatibility/materializer.js","/packages/peerlibrary_blaze-components/lib.coffee","/packages/peerlibrary_blaze-components/debug.coffee","/packages/peerlibrary_blaze-components/client.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,WAAW,KAAK,CAAC,QAAjB;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACnlrMA;EAAA;;;qJAAA;;AAAA,sBAAsB,SAAC,IAAD,EAAO,gBAAP;AACpB,SAAM,QAAS,KAAQ,CAAC,iBAAxB;AACE,QAAG,gBAAH;AACE,aAAO,IAAI,CAAC,UAAZ,CADF;KAAA;AAGE,aAAO,IAAI,CAAC,kBAAL,IAA2B,IAAI,CAAC,UAAvC,CAHF;KADF;EAAA;wBAMA,IAAI,CAAE,2BAPc;AAAA,CAAtB;;AAAA,2BAaA,GAA8B,SAAC,oBAAD,EAAuB,gBAAvB;AAC5B;AAAA,kEAAmB,+BAAnB;AAAA,EAIA,mBAAmB,+CAAoB,gBAAgB,CAAE,aAAtC,EAA4C,gBAA5C,CAJnB;AAMA,SAAM,gBAAN;AACE,QAAqC,eAAe,gBAApD;AAAA,aAAO,gBAAgB,CAAC,SAAxB;KAAA;AAEA,QAAG,gBAAH;AACE,yBAAmB,oBAAoB,gBAAgB,CAAC,IAAI,CAAC,UAA1C,EAAsD,gBAAtD,CAAnB,CADF;KAAA;AAGE,yBAAmB,oBAAqB,gBAAgB,CAAC,IAAI,CAAC,kBAAtB,IAA4C,gBAAgB,CAAC,IAAI,CAAC,UAAvF,EAAoG,gBAApG,CAAnB,CAHF;KAHF;EAAA,CANA;SAcA,KAf4B;AAAA,CAb9B;;AAAA,2BA8BA,GAA8B,SAAC,IAAD,EAAO,gBAAP;AAC5B;AAAA,qBAAmB,oBAAoB,IAApB,EAA0B,gBAA1B,CAAnB;SACA;WACE,iBADF;EAAA,EAF4B;AAAA,CA9B9B;;AAAA;AAoCe,wCAAC,SAAD,EAAa,iBAAb;AAAiC,IAAhC,IAAC,aAAD,SAAgC;AAAA,IAApB,IAAC,oBAAD,iBAAoB,CAAjC;EAAA,CAAb;;sCAAA;;IApCF;;AAAA,WAwCA,GAAc,SAAS,CAAC,GAxCxB;;AAAA,SAyCS,CAAC,GAAV,GAAgB;AACd;AAAA,EADe,sBAAO,4DACtB;AAAA,MAAG,iBAAiB,4BAApB;AACE,WAAO,KAAK,CAAC,YAAN,CAAsB,KAAK,CAAC,SAAP,GAAiB,GAAjB,GAAmB,CAAC,IAAI,CAAC,IAAL,CAAU,GAAV,CAAD,CAAxC,EAA0D,KAAK,CAAC,gBAAhE,CAAP,CADF;GAAA;SAGA,wBAAY,MAAO,0BAAnB,EAJc;AAAA,CAzChB;;AAAA,eA+CA,GAAkB,SAAS,CAAC,OA/C5B;;AAAA,SAgDS,CAAC,OAAV,GAAoB;AAKlB;AAAA,EALmB,mCAAoB,4DAKvC;AAAA,MAAG,8BAA8B,4BAAjC;AACE,yBAAqB,KAAK,CAAC,YAAN,CAAmB,kBAAkB,CAAC,SAAtC,EAAiD,kBAAkB,CAAC,gBAApE,CAArB,CADF;GAAA;SAGA,4BAAgB,mBAAoB,0BAApC,EARkB;AAAA,CAhDpB;;AAAA,KA4EK,CAAC,kBAAN,GAA2B,SAAC,QAAD,EAAW,IAAX,EAAiB,gBAAjB;AACzB;AAAA,0BAAwB,KAAxB;AACA,MAAG,QAAQ,CAAC,SAAS,CAAC,GAAnB,CAAuB,IAAvB,CAAH;AACE,aAAS,QAAQ,CAAC,SAAS,CAAC,GAAnB,CAAuB,IAAvB,CAAT;AACA,QAAG,WAAU,KAAK,CAAC,gBAAnB;AACE,8BAAwB,IAAxB,CADF;KAAA,MAEK,IAAG,cAAH;AACH,aAAO,WAAW,gBAAgB,MAAhB,CAAX,EAAoC,gBAApC,CAAP,CADG;KAAA;AAGH,aAAO,IAAP,CAHG;KAJP;GADA;AAWA,MAAG,QAAQ,QAAX;AAEE;AACE,cAAQ,CAAC,SAAS,CAAC,GAAnB,CAAuB,IAAvB,EAA6B,KAAK,CAAC,gBAAnC;AACA,mBAAe,CAAC,wBAAhB;AACE,aAAK,CAAC,KAAN,CAAY,4BAA4B,QAAQ,CAAC,QAArC,GAAgD,GAAhD,GAAsD,IAAtD,GAA6D,+BAA7D,GAA+F,QAAQ,CAAC,QAAxG,GAAmH,yBAA/H,EADF;OAFF;KAAA;AAIA,QAAG,sBAAH;AACE,aAAO,WAAW,gBAAgB,QAAS,MAAzB,CAAX,EAA4C,gBAA5C,CAAP,CADF;KAAA;AAGE,aAAO,IAAP,CAHF;KANF;GAXA;AAsBA;AAAA,WAAO,IAAP;GAtBA;AA4BA,aAAe,QAAQ,CAAC,SAAT,KAAsB,mCAAtB,YAA2D,oBAA1E;AAAA,WAAO,IAAP;GA5BA;AAAA,EAgCA,YAAY,OAAO,CAAC,WAAR,CAAoB;WAG9B,4BAA4B,gBAA5B,EAA8C,IAA9C,EAH8B;EAAA,CAApB,CAhCZ;AAsCA,MAAG,SAAH;AAEE,QAAG,mBAAmB,SAAS,CAAC,YAAV,CAAuB,IAAvB,EAA6B,IAA7B,CAAtB;AACE,aAAO,WAAW,cAAc,gBAAd,EAAgC,gBAAiB,MAAjD,CAAX,EAAoE,gBAApE,CAAP,CADF;KAFF;GAtCA;AA8CA,MAAG,QAAS,QAAQ,cAAc,CAAC,UAAnC;AACE,WAAW,iCAA6B,IAA7B,EAAmC,gBAAnC,CAAX,CADF;GA9CA;AAkDA,MAAG,SAAH;AACE,QAAG,mJAAH;AACE,aAAO,WAAW,gBAAgB,MAAhB,CAAX,EAAoC,gBAApC,CAAP,CADF;KADF;GAlDA;SAsDA,KAvDyB;AAAA,CA5E3B;;AAAA,KAqIK,CAAC,kBAAN,GAA2B,KArI3B;;AAAA,aAuIA,GAAgB,SAAC,SAAD,EAAY,MAAZ;AACd,MAAG,CAAC,CAAC,UAAF,CAAa,MAAb,CAAH;WACE;AACE;AAAA,MADD,4DACC;AAAA,eAAS,MAAM,CAAC,KAAP,CAAa,SAAb,EAAwB,IAAxB,CAAT;AAIA,UAAG,KAAK,CAAC,kBAAN,IAA6B,CAAC,CAAC,QAAF,CAAW,MAAX,CAAhC;AACE;+BAAA;cAA+B,KAAK,CAAC,mBAAmB,CAAC,IAA1B,CAA+B,IAA/B;AAC7B,gBAAG,CAAC,CAAC,UAAF,CAAa,KAAb,CAAH;AACE,oBAAO,MAAP,GAAe,CAAC,CAAC,IAAF,CAAO,KAAP,EAAc,SAAd,CAAf,CADF;aAAA,MAEK,IAAG,CAAC,CAAC,OAAF,CAAU,KAAV,CAAH;AACH,oBAAO,MAAP,GAAe,CAAC,CAAC,GAAF,CAAM,KAAN,EAAa,SAAC,GAAD;AAC1B,oBAAG,CAAC,CAAC,UAAF,CAAa,GAAb,CAAH;yBACE,CAAC,CAAC,IAAF,CAAO,GAAP,EAAY,SAAZ,EADF;iBAAA;yBAGE,IAHF;iBAD0B;cAAA,CAAb,CAAf,CADG;;WAHP;AAAA,SADF;OAJA;aAeA,OAhBF;IAAA,EADF;GAAA;WAmBE,OAnBF;GADc;AAAA,CAvIhB;;AAAA,eA6JA,GAAkB,SAAC,MAAD;AAChB,MAAG,CAAC,CAAC,UAAF,CAAa,MAAb,CAAH;WACE;AACE;AAAA,aAAO,KAAK,CAAC,OAAN,EAAP;;QACA,OAAQ;OADR;aAEA,MAAM,CAAC,KAAP,CAAa,IAAb,EAAmB,SAAnB,EAHF;IAAA,EADF;GAAA;WAME,OANF;GADgB;AAAA,CA7JlB;;AAAA,UAsKA,GAAa,SAAC,CAAD,EAAI,YAAJ;AAEX,YAAsE,CAAC,QAAQ,CAAC,yBAAhF;AAAA,WAAO,KAAK,CAAC,uBAAN,CAA8B,CAA9B,EAAiC,iBAAjC,CAAP;GAAA;AAEA,QAAiB,CAAC,UAAF,CAAa,CAAb,CAAhB;AAAA,WAAO,CAAP;GAFA;SAIA;AACE;AAAA,WAAO,IAAP;AAAA,IACA,OAAO,SADP;WAGA,KAAK,CAAC,QAAQ,CAAC,yBAAf,CAAyC,YAAzC,EAAuD;aACrD,KAAK,CAAC,uBAAN,CAA8B,CAA9B,EAAiC,iBAAjC,CAAmD,CAAC,KAApD,CAA0D,IAA1D,EAAgE,IAAhE,EADqD;IAAA,CAAvD,EAJF;EAAA,EANW;AAAA,CAtKb;;AAmLA,IAAG,KAAK,CAAC,QAAQ,CAAC,yBAAlB;AACE,6BAA2B,KAAK,CAAC,QAAQ,CAAC,yBAA1C,CADF;CAAA;AAIE,6BAA2B,SAAC,gBAAD,EAAmB,CAAnB;WACzB,IADyB;EAAA,CAA3B,CAJF;CAnLA;;AAAA,eA0LA,GAAkB,SAAC,SAAD;SAEhB,OAAO,CAAC,WAAR,CAAoB;AAClB;AAAA,wBAAoB,SAAS,CAAC,QAAV,EAApB;AACA,QAAG,CAAC,CAAC,QAAF,CAAW,iBAAX,CAAH;AACE,qBAAe,QAAS,mBAAxB;AACA;AAAA,cAAU,UAAM,eAAa,iBAAb,GAA+B,oBAArC,CAAV;OAFF;KAAA,MAGK,IAAG,iBAAH;AACH,qBAAe,iBAAf,CADG;KAAA;AAGH,YAAU,UAAM,iCAA8B,CAAC,SAAS,CAAC,aAAV,MAA6B,SAA9B,CAA9B,GAAsE,iBAA5E,CAAV,CAHG;KAJL;WASA,aAVkB;EAAA,CAApB,EAFgB;AAAA,CA1LlB;;AAAA,qBAwMA,GAAwB,SAAC,SAAD,EAAY,QAAZ;AACtB;;IAAA,SAAS,CAAC,sBAAuB;GAAjC;AAIA,gBAAuB,CAAC,mBAAmB,CAAC,gBAA5C;AAAA;GAJA;AAAA,EAMA,mBAAmB,OAAO,CAAC,WAAR,CAAoB;WACrC,SAAS,CAAC,mBAAmB,CAAC,gBAA9B,GADqC;EAAA,CAApB,CANnB;AAAA,EAQA,YAAY,SAAS,CAAC,mBAAmB,CAAC,YAAY,CAAC,aAA3C,CAAyD,QAAzD,CARZ;AAAA,EASA,QAAQ,CAAC,yBAAT,CACE;WACE,iBADF;EAAA,CADF,EAIE;AACE;AAAA;SAAA;8BAAA;AACE,2BAAQ,CAAC,IAAT,CAAc,gBAAd,GADF;AAAA;mBADF;EAAA,CAJF,CATA,CADsB;AAAA,CAxMxB;;AAAA,mBA6NA,GAAsB,SAAC,WAAD,EAAc,CAAd;AAKpB;AAAA,qBAAmB,4BAA4B,WAA5B,EAAyC,IAAzC,CAAnB;SAMA,yBAAyB,gBAAzB,EAA2C;WAMzC,KAAK,CAAC,gBAAN,CAAuB,WAAvB,EAAoC;aAClC,IADkC;IAAA,CAApC,EANyC;EAAA,CAA3C,EAXoB;AAAA,CA7NtB;;AAAA,SAiPA,GAAY,SAAC,IAAD,EAAO,SAAP;AACV;AAAA,eAAa,SAAS,CAAC,MAAV,EAAb;AAEA,QAA8I,CAAC,OAAF,CAAU,UAAV,CAA7I;AAAA,UAAU,UAAM,yCAAsC,CAAC,SAAS,CAAC,aAAV,MAA6B,SAA9B,CAAtC,GAA8E,wCAApF,CAAV;GAFA;AAIA;2BAAA;AACE,eAAW,EAAX;AAEA,SACK,SAAC,IAAD,EAAO,OAAP;aACD,QAAS,MAAT,GAAiB;AACf;AAAA,QADgB,4DAChB;AAAA,gBAAQ,IAAK,GAAb;AAAA,QAEA,cAAc,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,aAApB,CAFd;AAAA,QAGA,oBAAoB,WAApB,EAAiC;iBAC/B,OAAO,CAAC,KAAR,CAAc,SAAd,EAAyB,IAAzB,EAD+B;QAAA,CAAjC,CAHA,CADe;MAAA,EADhB;IAAA,CADL;AAAA;6BAAA;AACE,SAAI,MAAM,QAAV,CADF;AAAA,KAFA;AAAA,IAeA,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB,QAAzB,EAAmC,IAAnC,CAfA,CADF;AAAA,GALU;AAAA,CAjPZ;;AAAA,mBA0QA,GAAsB,KAAK,CAAC,YA1Q5B;;AAAA,KA2QK,CAAC,YAAN,GAAqB,SAAC,IAAD,EAAO,gBAAP;AAEnB;AAAA,aAAW,OAAO,CAAC,WAAR,CAAoB;AAC7B;AAAA,QAAG,KAAK,CAAC,WAAT;AACE,wBAAkB,cAAc,CAAC,gBAAf,EAAlB,CADF;KAAA;AAKE,wBAAkB,4BAA4B,gBAA5B,EAA8C,KAA9C,CAAlB,CALF;KAAA;kEAOiC,CAAE,eAAnC,CAAmD,eAAnD,WAR6B;EAAA,CAApB,CAAX;AASA,MAAmB,YAAa,CAAC,oBAAoB,KAAK,CAAC,QAA1B,IAAsC,CAAC,CAAC,UAAF,CAAa,QAAb,CAAvC,CAAhC;AAAA,WAAO,QAAP;GATA;SAWA,oBAAoB,IAApB,EAbmB;AAAA,CA3QrB;;AAAA,aA0RA,GAAgB,SAAC,QAAD,EAAW,KAAX;AACd,MAAG,QAAQ,CAAC,SAAZ;AACE,YAAQ,CAAC,SAAT,CAAmB,KAAK,CAAC,SAAzB;AAAA,IACA,QAAQ,CAAC,UAAT,CAAoB,KAAK,CAAC,UAA1B,CADA;WAEA,QAAQ,CAAC,WAAT,CAAqB,KAAK,CAAC,WAA3B,EAHF;GAAA;AAME,YAAQ,CAAC,OAAT,GAAmB,KAAK,CAAC,SAAzB;AAAA,IACA,QAAQ,CAAC,QAAT,GAAoB,KAAK,CAAC,UAD1B;WAEA,QAAQ,CAAC,SAAT,GAAqB,KAAK,CAAC,YAR7B;GADc;AAAA,CA1RhB;;AAAA,wBAqSA,GAA2B,SAAC,QAAD,EAAW,SAAX;AACzB;AAAA,MAAG,QAAQ,CAAC,UAAZ;WACE,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,OAA5B,CAAoC,SAApC,EADF;GAAA;AAIE,iBAAa,QAAQ,CAAC,OAAtB;WACA,QAAQ,CAAC,OAAT,GAAmB;AACjB,eAAS,CAAC,IAAV,CAAe,IAAf;kCACA,UAAU,CAAE,IAAZ,CAAiB,IAAjB,WAFiB;IAAA,EALrB;GADyB;AAAA,CArS3B;;AAAA,QAsTQ,CAAC,wBAAwB,CAAC,SAAS,CAAC,GAA5C,CAAgD,gBAAhD,EAAkE,SAAC,IAAD;SAChE,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB;WAAA;aACvB,QAAQ,CAAC,QAAT,GADuB;IAAA;EAAA,QAAzB,EADgE;AAAA,CAAlE,CAtTA;;AAAA,oBA0TA,GAAuB;SAErB,OAAO,KAAP,EAFqB;AAAA,CA1TvB;;AAAA,QAgUQ,CAAC,cAAT,CAAwB,MAAxB,EAAgC;AAC9B;AAAA,QAAM,EAAN;AAAA,EAEA,GAAG,CAAC,WAAJ,GAAkB,oBAFlB;AAAA,EAGA,GAAG,CAAC,UAAJ,GAAiB,SAHjB;SAIA,IAL8B;AAAA,CAAhC,CAhUA;;AAAA,KAuUK,CAAC,mBAAN,GAA4B,UAvU5B;;AAAA,KAyUK,CAAC,cAAN,GAAuB,SAAC,GAAD;SACrB,CAAC,CAAC,UAAF,CAAa,GAAb,KAAsB,GAAG,CAAC,aADL;AAAA,CAzUvB;;AAAA,yBA8UA,GAA4B,IAAI,CAAC,iBA9UjC;;AAAA,IA+UI,CAAC,iBAAL,GAAyB,SAAC,KAAD;AACvB;AAAA,MAAG,QAAQ,0BAA0B,KAA1B,CAAX;AACE;0BAAA;YAA8B,KAAK,CAAC,mBAAmB,CAAC,IAA1B,CAA+B,IAA/B;;OAE5B;AAAA,UAAY,KAAK,CAAC,cAAN,CAAqB,KAArB,CAAZ;AAAA;OAAA;AACA,UAAY,CAAC,CAAC,OAAF,CAAU,KAAV,KAAqB,CAAC,CAAC,IAAF,CAAO,KAAP,EAAc,KAAK,CAAC,cAApB,CAAjC;AAAA;OADA;AAKA,UAAG,CAAC,CAAC,OAAF,CAAU,KAAV,CAAH;AACE,aAAM,MAAN,GAAc,CAAC,CAAC,GAAF,CAAM,KAAN,EAAa,SAAS,CAAC,KAAvB,CAAd,CADF;OAAA;AAGE,aAAM,MAAN,GAAc,SAAS,CAAC,KAAV,CAAgB,KAAhB,CAAd,CAHF;OAPF;AAAA,KADF;GAAA;SAaA,MAduB;AAAA,CA/UzB;;AAAA,SA+VS,CAAC,KAAV,GAAkB;AAChB;AAAA,EADiB,6BAAc,4DAC/B;AAAA,QAAwE,CAAC,UAAF,CAAa,YAAb,CAAvE;AAAA,UAAU,UAAM,mCAAiC,YAAvC,CAAV;GAAA;AAAA,EAGA,OAAO,SAAS,CAAC,YAAV,kBAAuB,EAAC;AAAW;AAAA,IAAV,0DAAU;WAAA,GAAX;EAAA,CAAD,CAAiB,0BAAxC,CAHP;AAAA,EAKA,MAAM;AACJ;AAAA,IADK,sBAAO,iEACZ;AAAA,kBAAc,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,aAApB,CAAd;WACA,oBAAoB,WAApB,EAAiC;aAI/B,YAAY,CAAC,KAAb,CAAmB,IAAnB,EAAyB,CAAC,KAAD,CAAO,CAAC,MAAR,CAAe,IAAf,EAAqB,SAArB,CAAzB,EAJ+B;IAAA,CAAjC,EAFI;EAAA,CALN;AAAA,EAaA,GAAG,CAAC,YAAJ,GAAmB,IAbnB;SAeA,IAhBgB;AAAA,CA/VlB;;AAAA,gBAkXA,GAAmB,IAAI,CAAC,aAAa,UAAE,SAlXvC;;AAAA,IAmXI,CAAC,aAAa,UAAE,SAApB,GAA+B,SAAC,GAAD;AAC7B;AAAA,MAAG,QAAQ,GAAG,CAAC,KAAf;AACE,YAAQ,IAAI,CAAC,iBAAL,CAAuB,KAAvB,CAAR;AACA;UAAuB,KAAK,CAAC,mBAAmB,CAAC,IAA1B,CAA+B,IAA/B;AACrB,oBAAa,MAAb;OADF;AAAA,KADA;AAAA,IAGA,GAAG,CAAC,KAAJ,GAAY,KAHZ,CADF;GAAA;SAMA,gBAAgB,CAAC,IAAjB,CAAsB,IAAtB,EAAyB,GAAzB,EAP6B;AAAA,CAnX/B;;AAAA,sBA4XA,GAAyB;AACvB;AAAA,SAAO,KAAK,CAAC,WAAb;AACA,qBAAG,IAAI,CAAE,oBAAT;WACE,KADF;GAAA;WAGE,KAHF;GAFuB;AAAA,CA5XzB;;AAAA,aAmYA,GAAgB,SAAC,OAAD;AAGd,MAAG,EAAE,CAAC,UAAF,CAAa,OAAb,CAAJ;AACE,WAAO;aACL,QADK;IAAA,CAAP,CADF;GAAA;SAIA,QAPc;AAAA,CAnYhB;;AAAA,aA4YA,GAAgB,SAAC,OAAD;AAGd,MAAG,mBAAmB,KAAK,CAAC,QAA5B;WACE,OAAO,CAAC,aAAR,GADF;GAAA,MAEK,IAAG,mBAAmB,KAAK,CAAC,IAA5B;WACH,QADG;GAAA;WAGH,KAAK,CAAC,IAAN,CAAW,QAAX,EAAqB,cAAc,OAAd,CAArB,EAHG;GALS;AAAA,CA5YhB;;AAAA,cAsZA,GAAiB,KAAK,CAAC,eAAe,CAAC,MAAtB,EAtZjB;;AAAA,cAuZc,CAAC,GAAf,CAEE;AAAA,eAAa,SAAC,CAAD;AACX,QAAG,aAAa,KAAK,CAAC,QAAtB;AACE,UAAI,CAAC,CAAC,aAAF,EAAJ,CADF;KAAA;AAEA,QAAG,aAAa,KAAK,CAAC,IAAtB;AACE,aAAO,WAAW,CAAX,EAAc,IAAC,WAAf,CAAP,CADF;KAFA;WAKA,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC,IAA/C,CAAoD,IAApD,EAAuD,CAAvD,EANW;EAAA,CAAb;CAFF,CAvZA;;AAAA,MAkaA,GAAS,SAAC,MAAD,EAAS,UAAT;AACP,eAAa,cAAc,wBAA3B;SAEA,CAAK,mBAAe;AAAA,gBAAY,UAAZ;GAAf,CAAL,CAA2C,CAAC,KAA5C,CAAkD,MAAlD,EAHO;AAAA,CAlaT;;AAAA,UAwaA,GAAa,SAAC,IAAD,EAAO,UAAP;AACX;AAAA,OAAK,CAAC,WAAN,CAAkB,IAAlB,EAAwB,UAAxB,EAAoC,IAApC;AAAA,EAEA,IAAI,CAAC,WAAL,GAAmB,IAFnB;AAAA,EAGA,SAAS,KAAK,CAAC,gBAAN,CAAuB,IAAvB,EAA6B;WACpC,IAAI,CAAC,OAAL,GADoC;EAAA,CAA7B,CAHT;AAAA,EAKA,IAAI,CAAC,WAAL,GAAmB,KALnB;AAAA,EAOA,OAAO,CAAC,KAAR,EAPA;AAAA,EASA,SAAS,OAAO,MAAP,EAAe,IAAf,CATT;AAAA,EAWA,OAAO,CAAC,KAAR,EAXA;AAaA,MAAG,OAAO,CAAC,MAAX;AACE,WAAO,CAAC,YAAR,CAAqB;aACnB,KAAK,CAAC,YAAN,CAAmB,IAAnB,EADmB;IAAA,CAArB,EADF;GAAA;AAIE,SAAK,CAAC,YAAN,CAAmB,IAAnB,EAJF;GAbA;AAAA,EAmBA,OAAO,CAAC,KAAR,EAnBA;SAqBA,OAtBW;AAAA,CAxab;;AAAA;AAkcE;;;;GAAA;;AAAA,gBAAC,uBAAD,GAAyB,SAAC,UAAD;AACvB;AAAA;AAAA,aAAO,IAAP;KAAA;AAGA,QAA+C,UAAU,CAAC,QAAX,KAAuB,IAAI,CAAC,YAA3E;AAAA,YAAU,UAAM,uBAAN,CAAV;KAHA;AAAA,IASA,mBAAmB,4BAA4B,KAAK,CAAC,OAAN,CAAc,UAAd,CAA5B,EAAuD,IAAvD,CATnB;WAUA,4BAA4B,gBAA5B,EAA8C,IAA9C,EAXuB;EAAA,CAAzB;;AAAA,2BAaA,SAAQ;WACN,GADM;EAAA,CAbR;;AAAA,2BAmBA,cAAa,SAAC,WAAD;;MACX,IAAC,uBAAuB;KAAxB;AAGA,QAAG,WAAH;AACE,UAAC,oBAAmB,CAAC,WAArB,GAAmC,WAAnC;AAEA,aAAO,IAAP,CAHF;KAHA;WASA,IAAC,oBAAmB,CAAC,WAArB,IAAoC,KAVzB;EAAA,CAnBb;;AAAA,2BA+BA,eAAc,SAAC,WAAD;AACZ;AAAA,yDAA2B,CAAE,eAA7B;AAAA,IAEA,OAAO,CAAC,WAAR,CAAoB;aAAA;AAGlB;AAAA,YAAU,KAAC,SAAD,CAAU,WAAV,CAAV;AAAA;SAAA;AAEA,YAAG,CAAC,CAAC,QAAF,CAAW,WAAX,CAAH;AAGE,cAAG,KAAC,YAAW,CAAC,YAAhB;AACE,qCAAyB,KAAC,YAAW,CAAC,YAAb,CAA0B,WAA1B,CAAzB,CADF;WAAA;AAGE,qCAAyB,cAAc,CAAC,YAAf,CAA4B,WAA5B,CAAzB,CAHF;WAAA;AAIA;AAAA,kBAAU,UAAM,oBAAkB,WAAlB,GAA8B,IAApC,CAAV;WAJA;AAAA,UAKA,gBAAoB,4BALpB,CAHF;SAAA,MASK,IAAG,CAAC,CAAC,UAAF,CAAa,WAAb,CAAH;AACH,0BAAoB,iBAApB,CADG;SAAA;AAGH,0BAAgB,WAAhB,CAHG;SAXL;AAAA,QAmBA,KAAC,oBAAmB,CAAC,MAAM,CAAC,IAA5B,CAAiC,aAAjC,CAnBA;AAwBA,YAAG,aAAa,CAAC,WAAjB;AACE,uBAAa,CAAC,WAAd,CAA0B,KAA1B,EADF;SAxBA;;UA4BA,aAAa,CAAC;SA5Bd;;cA8BoB,CAAC,mBAAwB,kBAAc,IAAd,EAAoB,SAAC,CAAD,EAAI,CAAJ;mBAAU,MAAK,EAAf;UAAA,CAApB;SA9B7C;AAoCA,kFAA8C,CAAE,IAAI,CAAC,qBAArD;AACE,cAA8B,MAAK,oBAAmB,CAAC,WAAzB,yEAAgF,CAAE,IAAI,CAAC,mBAArH;;cAAA,aAAa,CAAC;aAAd;WAAA;AACA,cAA+B,MAAK,oBAAmB,CAAC,YAAzB,yEAAiF,CAAE,IAAI,CAAC,oBAAvH;oEAAA,aAAa,CAAC,sBAAd;WAFF;SAvCkB;MAAA;IAAA,QAApB,CAFA;WA8CA,KA/CY;EAAA,CA/Bd;;AAAA,2BAiFA,eAAc;AACZ;;MAAA,IAAC,uBAAuB;KAAxB;AAGA,QAAU,IAAC,oBAAmB,CAAC,MAA/B;AAAA;KAHA;AAAA,IAIA,IAAC,oBAAmB,CAAC,MAArB,GAA8B,EAJ9B;AAMA;AAAA;qBAAA;AACE,UAAC,aAAD,CAAc,KAAd,EADF;AAAA,KANA;WAUA,KAXY;EAAA,CAjFd;;AAAA,2BA8FA,WAAU,SAAC,WAAD;AACR;AAAA,yDAA2B,CAAE,eAA7B;AAEA,QAAG,CAAC,CAAC,QAAF,CAAW,WAAX,CAAH;AACE;AAAA;wBAAA;AAGE,0EAAqB,KAAK,CAAC,yBAAN,IAA0B,IAA/C;AACA,YAAgB,sBAAuB,uBAAsB,WAA7D;AAAA,iBAAO,KAAP;SAJF;AAAA,OADF;KAAA;AAQE;AAAA;wBAAA;AAEE,YAAG,KAAK,CAAC,WAAN,KAAqB,WAAxB;AACE,iBAAO,KAAP,CADF;SAAA,MAIK,IAAG,UAAS,WAAZ;AACH,iBAAO,KAAP,CADG;SANP;AAAA,OARF;KAFA;WAmBA,KApBQ;EAAA,CA9FV;;AAAA,2BAsHA,gBAAe;AACb;AAAA,IADc,sCAAuB,6BAAc,4DACnD;AAAA,YAAQ,IAAC,aAAD,CAAc,qBAAd,EAAqC,YAArC,CAAR;AAGA;AAAA;KAHA;AAKA,QAAG,CAAC,CAAC,UAAF,CAAa,KAAM,cAAnB,CAAH;AACE,aAAO,KAAM,cAAN,cAAoB,IAApB,CAAP,CADF;KAAA;AAGE,aAAO,KAAM,cAAb,CAHF;KANa;EAAA,CAtHf;;AAAA,2BAiIA,eAAc,SAAC,qBAAD,EAAwB,YAAxB;AACZ;AAAA,yDAA2B,CAAE,eAA7B;AAGA,QAAG,sBAAH;AACE,UAAY,gBAAgB,IAA5B;AAAA,eAAO,IAAP;OAAA;AAAA,MAEA,QAAQ,IAFR,CADF;KAAA,MAKK,IAAG,yBAA0B,0BAAyB,IAAtD;AACH,cAAQ,IAAR,CADG;KAAA;AAGH,cAAQ,KAAR,CAHG;KARL;AAcA;AAAA;sBAAA;AACE,UAAgB,SAAU,gBAAgB,KAA1C;AAAA,eAAO,KAAP;OAAA;AAEA,UAAgB,UAAS,qBAAzB;AAAA,gBAAQ,IAAR;OAHF;AAAA,KAdA;WAmBA,KApBY;EAAA,CAjId;;AAAA,EA4JA,cAAC,gBAAD,GAAkB,SAAC,eAAD;WAChB,OAAO,CAAC,WAAR,CAAoB;aAAA;AAClB;AAAA,yBAAiB,KAAjB;AAEA,YAAG,KAAK,CAAC,WAAT;AAME,iBAAO,QAAQ,CAAC,WAAT,EAAP,CANF;SAAA;AAUE,iBAAO,IAAP,CAVF;SAFA;AAcA,4BAAG,IAAI,CAAE,qBAAN,KAAuB,oBAA1B;AAGE,iBAAO,oBAAoB,KAAK,CAAC,WAA1B,EAAuC;AAC5C;AAAA,wBAAgB,oBAAhB;AAEA,mBAAO,SAAS,CAAC,eAAV,CAA0B,eAA1B,CAAP,CAH4C;UAAA,CAAvC,CAAP,CAHF;SAdA;eA0BA;AACE;AAAA,iBAAO,OAAO,CAAC,MAAf;AAAA,UAKA,cAAc,KAAK,CAAC,OAAN,CAAc,MAAd,CALd;AAAA,UAYA,oBAAwB,kBAAc;AACpC,mBAAO,WAAW,CAAC,OAAO,CAAC,GAApB,EAAP;AAAA,YACA,MAAM,CAAC,KAAP,gBAAa,IAAI,CAAE,oBAAnB,EAAgC,oBAAhC,CADA;mBAEA,IAAI,CAAC,WAH+B;UAAA,CAAd,EAKtB,KAAK,CAAC,MALgB,CAZxB;AAAA,UAoBA,uBAAuB,mBApBvB;iBAsBA,OAAO,CAAC,WAAR,CAAoB;AAGlB;AAAA,uBAAW,KAAK,CAAC,gBAAN,CAAuB,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,UAApD,EAAgE;qBAAA;AAGzE,uBAAO,oBAAoB,KAAK,CAAC,WAA1B,EAAuC;AAE5C;AAAA,8BAAgB;;;;qBAAA,gBAAe,oBAAf,eAAhB;AAEA,yBAAO,SAAS,CAAC,eAAV,CAA0B,eAA1B,CAAP,CAJ4C;gBAAA,CAAvC,CAAP,CAHyE;cAAA;YAAA,QAAhE,CAAX;AAAA,YAUA,yBAAyB,QAAzB,EAAmC;AAGjC,kBAAC,KAAI,CAAC,kBAAN,GAA2B,IAAC,KAAI,CAAC,UAAjC;qBACA,IAAC,KAAI,CAAC,UAAN,GAAmB,IAAC,KAAI,CAAC,UAAU,CAAC,UAAU,CAAC,WAJd;YAAA,CAAnC,CAVA;mBAgBA,SAnBkB;UAAA,CAApB,EAvBF;QAAA,EA3BkB;MAAA;IAAA,QAApB,EADgB;EAAA,CA5JlB;;AAAA,2BAoOA,kBAAiB,SAAC,eAAD;WAKf,OAAO,CAAC,WAAR,CAAoB;aAAA;AAClB;AAAA,oBAAY,KAAZ;AAAA,QAGA,SAAS,CAAC,YAAV,EAHA;AAAA,QAKA,eAAe,gBAAgB,SAAhB,CALf;AAAA,QAUA,WAAe,SAAK,CAAC,QAAN,CAAe,oBAAiB,CAAC,SAAS,CAAC,aAAV,MAA6B,SAA9B,CAAhC,EAA2E,YAAY,CAAC,cAAxF,CAVf;;UAgBA,SAAS,CAAC,sBAAuB;SAhBjC;AAAA,QAiBA,SAAS,CAAC,mBAAmB,CAAC,YAA9B,GAA6C,YAjB7C;AAAA,QAmBA,cAAc,QAAd,EACE;AAAA,qBAAW;AAGT;AAAA,gBAAG,eAAH;AAEE,qBAAO,CAAC,WAAR,CAAoB;uBAAA;AAElB,yBAAO,UAAa,CAAC,eAAV,EAAX;AAAA,kBAGA,SAAS,CAAC,eAAV,CAA0B,eAA1B,CAHA;yBAIA,eAAe,CAAC,iBAAhB,CAAkC,SAAlC,EANkB;gBAAA;cAAA,QAApB,EAFF;aAAA;AAAA,YAUA,IAAC,KAAI,CAAC,eAAN,CAAsB;qBAAA;AAEpB;AAAA,oBAAc,KAAC,KAAI,CAAC,WAAN,KAAqB,CAAnC;AAAA;iBAAA;AAAA,gBAGA,mBAAmB,IAHnB;AAIA;uBAAM,mBAAmB,KAAC,UAAS,CAAC,YAAX,CAAwB,gBAAxB,EAA0C,QAA1C,CAAzB;AACE,yCAAU,KAAC,KAAX,EAAiB,gBAAjB,GADF;gBAAA;+BANoB;cAAA;YAAA,QAAtB,CAVA;AAAA,YAmBA,IAAC,UAAD,GAAa,SAnBb;AAAA,YAsBA,OAAO,QAAW,CAAC,WAAR,CAAoB;qBAAA;AAAG;iHAA8B,CAAC,4BAAlC;cAAA;YAAA,QAApB,CAAX,CAtBA;;kBAwB8B,CAAC,mBAAwB,kBAAc,IAAd,EAAiB,SAAC,CAAD,EAAI,CAAJ;uBAAU,MAAK,EAAf;cAAA,CAAjB;aAxBvD;AAAA,YAyBA,IAAC,UAAS,CAAC,mBAAmB,CAAC,gBAA/B,CAAgD,IAAhD,CAzBA;;mBA2B8B,CAAC,YAAiB,kBAAc,IAAd;aA3BhD;AAAA,YA4BA,IAAC,UAAS,CAAC,mBAAmB,CAAC,SAA/B,CAAyC,IAAzC,CA5BA;;mBAgC8B,CAAC,aAAkB,kBAAc,KAAd;aAhCjD;AAAA,YAiCA,IAAC,UAAS,CAAC,mBAAmB,CAAC,UAA/B,CAA0C,KAA1C,CAjCA;;mBAmC8B,CAAC,cAAmB,kBAAc,KAAd;aAnClD;AAAA,YAoCA,IAAC,UAAS,CAAC,mBAAmB,CAAC,WAA/B,CAA2C,KAA3C,CApCA;AAsCA;AAKE,kBAAC,UAAS,CAAC,mBAAmB,CAAC,WAA/B,GAA6C,IAA7C;AAAA,cACA,mBAAmB,IADnB;AAEA;qBAAM,mBAAmB,IAAC,UAAS,CAAC,YAAX,CAAwB,gBAAxB,EAA0C,WAA1C,CAAzB;AACE,6CAAgB,CAAC,SAAjB,IADF;cAAA;6BAPF;aAAA;AAUE,yBAAQ,UAAS,CAAC,mBAAmB,CAAC,WAAtC,CAVF;aAzCS;UAAA,CAAX;AAAA,UAqDA,YAAY;AAGV;;kBAA8B,CAAC,aAAkB,kBAAc,IAAd;aAAjD;AAAA,YACA,IAAC,UAAS,CAAC,mBAAmB,CAAC,UAA/B,CAA0C,IAA1C,CADA;AAAA,YAGA,OAAO,CAAC,WAAR,CAAoB;qBAAA;uBAClB,MAAM,CAAC,KAAP,CAAa,KAAC,UAAS,CAAC,mBAAmB,CAAC,SAA/B,EAAb,EAAyD,IAAzD,EADkB;cAAA;YAAA,QAApB,CAHA;AAMA;AAEE,kBAAC,UAAS,CAAC,mBAAmB,CAAC,YAA/B,GAA8C,IAA9C;AAAA,cACA,mBAAmB,IADnB;AAEA;qBAAM,mBAAmB,IAAC,UAAS,CAAC,YAAX,CAAwB,gBAAxB,EAA0C,YAA1C,CAAzB;AACE,6CAAgB,CAAC,UAAjB,IADF;cAAA;6BAJF;aAAA;AAOE,yBAAQ,UAAS,CAAC,mBAAmB,CAAC,YAAtC,CAPF;aATU;UAAA,CArDZ;AAAA,UAuEA,aAAa;mBACX,IAAC,QAAD,CAAS;qBAAA,SAAC,WAAD;AAKP,oBAAU,KAAC,UAAS,CAAC,eAAX,EAA4B,CAAC,MAAvC;AAAA;iBAAA;AAAA,gBACA,WAAW,CAAC,IAAZ,EADA;uBAGA,OAAO,CAAC,WAAR,CAAoB;AAClB;AAAA,wBAAM,CAAC,KAAP,CAAa,KAAC,UAAS,CAAC,mBAAmB,CAAC,SAA/B,EAAb,EAAyD,IAAzD;AAAA,kBAEA,KAAC,UAAS,CAAC,mBAAmB,CAAC,SAA/B,CAAyC,KAAzC,CAFA;;wBAI8B,CAAC,aAAkB,kBAAc,KAAd;mBAJjD;AAAA,kBAKA,KAAC,UAAS,CAAC,mBAAmB,CAAC,UAA/B,CAA0C,KAA1C,CALA;;yBAO8B,CAAC,cAAmB,kBAAc,IAAd;mBAPlD;AAAA,kBAQA,KAAC,UAAS,CAAC,mBAAmB,CAAC,WAA/B,CAA2C,IAA3C,CARA;AAAA,kBAUA,mBAAmB,IAVnB;AAWA,yBAAM,mBAAmB,KAAC,UAAS,CAAC,YAAX,CAAwB,gBAAxB,EAA0C,aAA1C,CAAzB;AACE,oCAAgB,CAAC,WAAjB,GADF;kBAAA,CAXA;AAcA,sBAAG,eAAH;AAEE,6BAAS,CAAC,eAAV,CAA0B,IAA1B;AAAA,oBACA,eAAe,CAAC,oBAAhB,CAAqC,SAArC,CADA,CAFF;mBAdA;yBAoBA,KAAC,UAAS,CAAC,mBAAmB,CAAC,gBAA/B,CAAgD,IAAhD,EArBkB;gBAAA,CAApB,EARO;cAAA;YAAA,QAAT,EADW;UAAA,CAvEb;SADF,CAnBA;eA2HA,SA5HkB;MAAA;IAAA,QAApB,EALe;EAAA,CApOjB;;AAAA,2BAuWA,kBAAiB;AACf,QAA6D,IAAC,WAAD,EAA7D;aAAA,KAAK,CAAC,MAAN,CAAa,IAAC,oBAAmB,CAAC,gBAArB,EAAuC,CAAC,IAArD;KADe;EAAA,CAvWjB;;AAAA,EA0WA,cAAC,sBAAD,GAAwB,SAAC,eAAD,EAAkB,UAAlB,EAA8B,IAA9B;AACtB;AAAA,gBAAY,OAAO,CAAC,WAAR,CAAoB;aAAA;AAC9B;AAAA,yBAAiB,KAAjB;AAAA,QAEA,aAAa,cAAc,wBAAd,IAA0C,4BAAC,eAAe,CAAE,UAAjB,gBAAkC,eAAe,CAAC,mBAAmB,CAAC,gBAApC,EAAsD,CAAC,IAA1F,CAA1C,IAA6I,IAF1J;eAIA,oBAAoB,UAApB,EAAgC;iBAC1B,qBAD0B;QAAA,CAAhC,EAL8B;MAAA;IAAA,QAApB,CAAZ;AAQA,QAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;aACE,SAAS,CAAC,qBAAV,CAAgC,eAAhC,EAAiD,UAAjD,EAA6D,IAA7D,EADF;KAAA;aAGE,SAAS,CAAC,qBAAV,CAAgC,eAAhC,EAAiD,UAAjD,EAHF;KATsB;EAAA,CA1WxB;;AAAA,2BAwXA,wBAAuB,SAAC,eAAD,EAAkB,UAAlB,EAA8B,IAA9B;AACrB;AAAA,eAAW,OAAO,CAAC,WAAR,CAAoB;aAAA;AAC7B,qBAAa,cAAc,wBAAd,IAA0C,4BAAC,eAAe,CAAE,UAAjB,gBAAkC,eAAe,CAAC,mBAAmB,CAAC,gBAApC,EAAsD,CAAC,IAA1F,CAA1C,IAA6I,IAA1J;eAEA,oBAAoB,UAApB,EAAgC;iBAC9B,KAAC,gBAAD,CAAiB,eAAjB,EAD8B;QAAA,CAAhC,EAH6B;MAAA;IAAA,QAApB,CAAX;AAMA,QAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;AACE,qBAAe,WAAW,KAAK,CAAC,aAAN,CAAoB,IAApB,EAA0B,cAAc,QAAd,CAA1B,CAAX,EAA8D,UAA9D,CAAf,CADF;KAAA;AAGE,qBAAe,WAAW,cAAc,QAAd,CAAX,EAAoC,UAApC,CAAf,CAHF;KANA;WAWA,IAAI,CAAC,MAAL,CAAY,YAAZ,EAZqB;EAAA,CAxXvB;;AAAA,2BAsYA,WAAU;WACR,IAAC,cAAD,CAAe,IAAf,EAAkB,UAAlB,KAAiC,IAAC,YAAW,CAAC,aAAb,GADzB;EAAA,CAtYV;;AAAA,2BAyYA,YAAW;WACT,sBAAsB,IAAtB,EAAyB,SAAzB,EADS;EAAA,CAzYX;;AAAA,2BA4YA,aAAY;WACV,sBAAsB,IAAtB,EAAyB,UAAzB,EADU;EAAA,CA5YZ;;AAAA,2BA+YA,cAAa;WACX,sBAAsB,IAAtB,EAAyB,WAAzB,EADW;EAAA,CA/Yb;;AAAA,2BAkZA,YAAW;AACT;;MAAA,IAAC,uBAAuB;KAAxB;;UACoB,CAAC,YAAiB,kBAAc,KAAd;KADtC;WAGA,IAAC,oBAAmB,CAAC,SAArB,GAJS;EAAA,CAlZX;;AAAA,2BAwZA,aAAY;AACV;;MAAA,IAAC,uBAAuB;KAAxB;;UACoB,CAAC,aAAkB,kBAAc,KAAd;KADvC;WAGA,IAAC,oBAAmB,CAAC,UAArB,GAJU;EAAA,CAxZZ;;AAAA,2BA8ZA,cAAa;AACX;;MAAA,IAAC,uBAAuB;KAAxB;;UACoB,CAAC,cAAmB,kBAAc,KAAd;KADxC;WAGA,IAAC,oBAAmB,CAAC,WAArB,GAJW;EAAA,CA9Zb;;AAAA,2BAoaA,mBAAkB,SAAC,MAAD,EAAS,IAAT,EAAe,MAAf;;MAChB,SAAU;KAAV;AACA,QAAG,UAAW,IAAX,IAAoB,CAAC,IAAI,CAAC,UAAL,KAAqB,MAArB,IAA+B,IAAI,CAAC,WAAL,KAAsB,MAAtD,CAAvB;AACE,YAAM,CAAC,YAAP,CAAoB,IAApB,EAA0B,MAA1B,EADF;KAFgB;EAAA,CApalB;;AAAA,2BA2aA,iBAAgB,SAAC,MAAD,EAAS,IAAT,EAAe,MAAf;;MACd,SAAU;KAAV;AACA,QAAG,UAAW,IAAX,IAAoB,CAAC,IAAI,CAAC,UAAL,KAAqB,MAArB,IAA+B,IAAI,CAAC,WAAL,KAAsB,MAAtD,CAAvB;AACE,YAAM,CAAC,YAAP,CAAoB,IAApB,EAA0B,MAA1B,EADF;KAFc;EAAA,CA3ahB;;AAAA,2BAkbA,mBAAkB,SAAC,MAAD,EAAS,IAAT;AAChB,QAAG,UAAW,IAAX,IAAoB,IAAI,CAAC,UAAL,KAAmB,MAA1C;AACE,YAAM,CAAC,WAAP,CAAmB,IAAnB,EADF;KADgB;EAAA,CAlblB;;AAAA,2BAwbA,SAAQ;AACN;;MAAA,IAAC,uBAAuB;KAAxB;AAIA,aAAkB,oBAAmB,CAAC,gBAAtC;AAAA,aAAO,EAAP;KAJA;AAAA,IAMA,OAAO,OAAO,CAAC,WAAR,CAAoB;aAAA;eACzB,KAAC,oBAAmB,CAAC,gBAArB,EAAuC,CAAC,KADf;MAAA;IAAA,QAApB,CANP;AAAA,IASA,mBAAmB,4BAA4B,IAA5B,EAAkC,IAAlC,CATnB;AAWA;AAAA;SAAA;sBAAA;AACE,iBAAW,EAAX;AAEA,WACK,SAAC,IAAD,EAAO,OAAP;eACD,QAAS,MAAT,GAAiB;AAIf;AAAA,UAJgB,4DAIhB;iBAAA,yBAAyB,gBAAzB,EAA2C;mBACzC,KAAK,CAAC,gBAAN,CAAuB,IAAvB,EAA6B;qBAC3B,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,IAApB,EAD2B;YAAA,CAA7B,EADyC;UAAA,CAA3C,EAJe;QAAA,EADhB;MAAA,CADL;AAAA;+BAAA;AACE,WAAI,MAAM,QAAV,CADF;AAAA,OAFA;AAAA,mBAYA,SAZA,CADF;AAAA;mBAZM;EAAA,CAxbR;;AAAA,2BAudA,OAAM,SAAC,IAAD,EAAO,UAAP;AACJ;;MAAA,IAAC,uBAAuB;KAAxB;;UACoB,CAAC,mBAAwB,kBAAc,IAAd,EAAoB,SAAC,CAAD,EAAI,CAAJ;eAAU,MAAK,EAAf;MAAA,CAApB;KAD7C;AAGA,QAAG,wEAA8C,CAAE,aAAnD;AACE,UAAG,YAAH;AACE,eAAO,UAAU,CAAC,GAAX,CAAe;iBAAA;mBACpB,KAAK,CAAC,OAAN,CAAc,IAAd,EADoB;UAAA;QAAA,QAAf,EAGL,IAHK,EAGC,UAHD,CAAP,CADF;OAAA;AAME,eAAO,KAAK,CAAC,OAAN,CAAc,IAAd,CAAP,CANF;OADF;KAHA;WAYA,OAbI;EAAA,CAvdN;;AAAA,EA6eA,cAAC,YAAD,GAAc,SAAC,IAAD,EAAO,UAAP;AACZ;AAAA,cAA6B,CAAC,WAA9B;AAAA,aAAO,MAAP;KAAA;AAAA,IAEA,cAAc,KAAK,CAAC,WAFpB;AAIA,QAAG,CAAC,CAAC,QAAF,CAAW,IAAX,CAAH;AACE,aAAO,IAAI,CAAC,KAAL,CAAW,GAAX,CAAP,CADF;KAAA,MAEK,IAAG,EAAK,CAAC,OAAF,CAAU,IAAV,CAAP;AACH,aAAO,KAAK,CAAC,OAAN,CAAc,WAAd,CAAP,CADG;KANL;WASA,UAAU,CAAC,GAAX,CAAe;aAAA;AACb;AAAA,YAAG,KAAK,CAAC,qBAAN,IAAgC,eAAc,KAAK,CAAC,qBAAN,CAA4B,WAA5B,EAAyC,IAAK,GAA9C,CAAd,CAAnC;AAGE,mBAAS,EAAT;AAAA,UACA,MAAO,KAAK,GAAL,CAAP,GAAkB,WADlB;AAEA,iBAAO,MAAP,CALF;SAAA;eAOA,KAAK,CAAC,OAAN,CAAc,WAAd,EARa;MAAA;IAAA,QAAf,EAUE,IAVF,EAUQ,UAVR,EAVY;EAAA,CA7ed;;AAAA,2BAogBA,cAAa,SAAC,IAAD,EAAO,UAAP;WACX,IAAC,YAAW,CAAC,WAAb,CAAyB,IAAzB,EAA+B,UAA/B,EADW;EAAA,CApgBb;;AAAA,2BAwgBA,YAAW;WACT,KADS;EAAA,CAxgBX;;AAAA,EA+gBA,cAAC,iBAAD,GAAmB;AAGjB;AAAA,uBAAmB,4BAA4B,KAAK,CAAC,WAAlC,EAA+C,KAA/C,CAAnB;WACA,4BAA4B,gBAA5B,EAA8C,KAA9C,EAJiB;EAAA,CA/gBnB;;AAAA,2BAshBA,mBAAkB;WAChB,IAAC,YAAW,CAAC,gBAAb,GADgB;EAAA,CAthBlB;;AAAA,2BAyhBA,YAAW;AACT,QAA6E,IAAC,WAAD,EAA7E;AAAA,aAAO,IAAC,oBAAmB,CAAC,gBAArB,EAAuC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAvD,EAAP;KAAA;WAEA,OAHS;EAAA,CAzhBX;;AAAA,2BA8hBA,WAAU;AACR,QAA4E,IAAC,WAAD,EAA5E;AAAA,aAAO,IAAC,oBAAmB,CAAC,gBAArB,EAAuC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAvD,EAAP;KAAA;WAEA,OAHQ;EAAA,CA9hBV;;AAAA,2BAoiBA,UAAS,SAAC,OAAD;AACP;AAAA,uBAAmB,OAAO,CAAC,WAAR,CAAoB;aAAA;AACrC;2GAAoB,CAAE,qCADe;MAAA;IAAA,QAApB,CAAnB;AAGA;AAAA,YAAU,UAAM,2DAAN,CAAV;KAHA;WAKA,gBAAgB,CAAC,OAAjB,CAAyB,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,IAAhB,CAAzB,EANO;EAAA,CApiBT;;wBAAA;;GAF2B,cAhc7B;;AAAA,0BA8+BA,GAA6B,CAC3B,oBAD2B,CA9+B7B;;AAAA,yBAk/BA,GAA4B,CAC1B,GAD0B,EAE1B,MAF0B,EAG1B,SAH0B,CAl/B5B;;AA0/BA;AAAA;2BAAA;MAA0D,gBAAmB,cAAc,UAAjC;AACxD,IAAG,UAAC,UAAD,EAAa,MAAb;AACD,UAAG,aAAc,0BAAd,kBAAH;eACE,cAAc,UAAG,YAAjB,GAA+B;AAC7B;AAAA,UAD8B,4DAC9B;;YAAA,IAAC,uBAAuB;WAAxB;;gBACoB,CAAC,mBAAwB,kBAAc,IAAd,EAAoB,SAAC,CAAD,EAAI,CAAJ;qBAAU,MAAK,EAAf;YAAA,CAApB;WAD7C;AAGA,cAAG,mBAAmB,IAAC,oBAAmB,CAAC,gBAArB,EAAtB;AACE,mBAAO,gBAAiB,YAAjB,yBAA6B,IAA7B,CAAP,CADF;WAHA;iBAMA,OAP6B;QAAA,EADjC;OAAA,MAUK,IAAG,aAAc,yBAAd,kBAAH;eACH,cAAc,UAAG,YAAjB,GAA+B;AAC7B;AAAA,UAD8B,4DAC9B;AAAA,cAAsE,IAAC,WAAD,EAAtE;AAAA,mBAAO,YAAC,oBAAmB,CAAC,gBAArB,GAAwC,YAAxC,aAAoD,IAApD,CAAP;WAAA;iBAEA,OAH6B;QAAA,EAD5B;OAAA;eAOH,cAAc,UAAG,YAAjB,GAA+B;AAC7B;AAAA,UAD8B,4DAC9B;AAAA,6BAAmB,OAAO,CAAC,WAAR,CAAoB;mBAAA;AACrC;oHAAoB,CAAE,qCADe;YAAA;UAAA,QAApB,CAAnB;AAGA;AAAA,kBAAU,UAAM,qDAAmD,UAAnD,GAA8D,IAApE,CAAV;WAHA;iBAKA,gBAAiB,YAAjB,yBAA6B,IAA7B,EAN6B;QAAA,EAP5B;OAXJ;IAAA,EAAH,CAAI,UAAJ,EAAgB,MAAhB;GADF;AAAA,CA1/BA;;;;;;;;;;;;;;;;;;;;ACAA;EAAA;;qJAAA;;AAAA;AACE;;;;GAAA;;AAAA,qBAAC,eAAD,GAAiB,SAAC,SAAD;AACf;WAEA,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,IAAV,EAAZ,EAHe;EAAA,CAAjB;;AAAA,EAKA,mBAAC,qBAAD,GAAuB,SAAC,SAAD;AACrB;WAEA,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,IAAV,EAAZ,EAHqB;EAAA,CALvB;;AAAA,EAUA,mBAAC,qBAAD,GAAuB,SAAC,sBAAD;AACrB,QAAG,cAAc,sBAAd,IAAyC,sBAAsB,CAAC,QAAvB,KAAmC,IAAI,CAAC,YAApF;AACE,+BAAyB,cAAc,CAAC,sBAAf,CAAsC,sBAAtC,CAAzB,CADF;KAAA;WAGA,sFAJqB;EAAA,CAVvB;;AAAA,EAgBA,mBAAC,kBAAD,GAAoB,SAAC,sBAAD;AAClB,QAAG,cAAc,sBAAd,IAAyC,sBAAsB,CAAC,QAAvB,KAAmC,IAAI,CAAC,YAApF;AACE,+BAAyB,cAAc,CAAC,sBAAf,CAAsC,sBAAtC,CAAzB,CADF;KAAA;WAGA,mFAJkB;EAAA,CAhBpB;;AAAA,EAsBA,mBAAC,kBAAD,GAAoB;AAClB;AAAA,wBAAoB,EAApB;AAAA,IAEA,EAAE,GAAF,CAAM,CAAC,IAAP,CAAY;aAAA,SAAC,CAAD,EAAI,OAAJ;AACV;AAAA,oBAAY,cAAc,CAAC,sBAAf,CAAsC,OAAtC,CAAZ;AACA;AAAA;SADA;AAAA,QAEA,gBAAgB,KAAC,cAAD,CAAe,SAAf,CAFhB;AAGA,YAA4C,aAAiB,iBAAjB,oBAA5C;iBAAA,iBAAiB,CAAC,IAAlB,CAAuB,aAAvB;SAJU;MAAA;IAAA,QAAZ,CAFA;AAQA;2CAAA;AACE,UAAC,qBAAD,CAAsB,aAAtB,EADF;AAAA,KATkB;EAAA,CAtBpB;;6BAAA;;GADgC,mBAAlC;;;;;;;;;;;;;;;;;;;;ACAA;;AAAA,mBAAmB,SAAC,MAAD,EAAS,IAAT;AACjB;AAAA,MAAU,OAAU,CAAC,QAAX,IAAuB,IAAI,CAAC,QAAtC;AAAA;GAAA;AAAA,EAEA,IAAI,CAAC,QAAL,GAAgB,CAAC,CAAC,MAAF,CAAS,EAAT,EAAa,MAAM,CAAC,QAApB,EAA8B;AAAA,gBAAY,IAAZ;GAA9B,CAFhB;AAIA,WAAkB,CAAC,aAAL,EAAd;AAAA;GAJA;AAMA;AAAA;uBAAA;QAAsC,SAAS,CAAC,QAAV,KAAsB,IAAI,CAAC;AAC/D,uBAAiB,IAAjB,EAAuB,SAAvB;KADF;AAAA,GAPiB;AAAA,CAAnB;;AAAA,2BAaA,GAA8B,KAAK,CAAC,SAAS,CAAC,oBAb9C;;AAAA,KAcK,CAAC,SAAS,CAAC,oBAAhB,GAAuC,SAAC,IAAD,EAAO,MAAP,EAAe,IAAf;AACrC,mBAAiB,MAAjB,EAAyB,IAAzB;SACA,4BAA4B,IAA5B,EAAkC,MAAlC,EAA0C,IAA1C,EAFqC;AAAA,CAdvC;;AAAA,yBAkBA,GAA4B,KAAK,CAAC,SAAS,CAAC,kBAlB5C;;AAAA,KAmBK,CAAC,SAAS,CAAC,kBAAhB,GAAqC,SAAC,IAAD,EAAO,MAAP,EAAe,IAAf;AACnC,mBAAiB,MAAjB,EAAyB,IAAzB;SACA,0BAA0B,IAA1B,EAAgC,MAAhC,EAAwC,IAAxC,EAFmC;AAAA,CAnBrC;;AAAA,aAuBA,GAAgB,SAAC,SAAD,EAAY,UAAZ;SACd;AAAA,gBAAY,UAAZ;AAAA,IAEA,eAAe,SAAC,IAAD,EAAO,MAAP;aACb,SAAS,CAAC,gBAAV,CAA2B,IAAC,WAA5B,EAAwC,IAAxC,EAA8C,MAA9C,EADa;IAAA,CAFf;AAAA,IAKA,aAAa,SAAC,IAAD,EAAO,MAAP;aACX,SAAS,CAAC,cAAV,CAAyB,IAAC,WAA1B,EAAsC,IAAtC,EAA4C,MAA5C,EADW;IAAA,CALb;AAAA,IAQA,eAAe,SAAC,IAAD;aACb,SAAS,CAAC,gBAAV,CAA2B,IAAI,CAAC,UAAhC,EAA4C,IAA5C,EADa;IAAA,CARf;IADc;AAAA,CAvBhB;;AAAA,sBAmCA,GAAyB,KAAK,CAAC,SAAS,UAAE,OAnC1C;;AAAA,KAoCK,CAAC,SAAS,UAAE,OAAjB,GAA0B,SAAC,aAAD,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,UAAnC;AACxB;AAAA,MAAG,qFAAoC,CAAE,2BAAzC;AACE;AAAA;uBAAA;YAA4B,oBAAsB,KAAK,CAAC,SAA5B;;OAC1B;AAAA,YAAM,CAAC,QAAP,GAAkB,cAAc,SAAd,EAAyB,MAAzB,CAAlB;AAEA,iBAAsB,CAAC,aAAP,EAAhB;AAAA;OAFA;AAIA;AAAA;4BAAA;YAAwC,SAAS,CAAC,QAAV,KAAsB,IAAI,CAAC;AACjE,2BAAiB,MAAjB,EAAyB,SAAzB;SADF;AAAA,OALF;AAAA;AAAA,IAQA,aAAa,aAAa,CAAC,QAR3B;AASA;AACE,mBAAa,CAAC,QAAd,GAAyB,cAAc,SAAd,EAAyB,aAAzB,CAAzB;AACA,aAAO,sBAAsB,CAAC,KAAvB,CAA6B,IAA7B,EAAgC,SAAhC,CAAP,CAFF;KAAA;AAIE,UAAG,UAAH;AACE,qBAAa,CAAC,QAAd,GAAyB,UAAzB,CADF;OAAA;AAGE,4BAAoB,CAAC,QAArB,CAHF;OAJF;KAVF;GAAA;SAmBA,sBAAsB,CAAC,KAAvB,CAA6B,IAA7B,EAAgC,SAAhC,EApBwB;AAAA,CApC1B;;AAAA,gBA0DA,GAAmB,OA1DnB;;AAAA,YA4DA,GAAe,KAAK,CAAC,iBAAiB,CAAC,MAAxB,CACb;AAAA,UAAQ,SAAC,OAAD,EAAU,QAAV,EAAoB,KAApB;AACN;AAAA;AAAA,iBAAW,EAAX;KAAA;AACA,UAA8B,CAAC,OAAF,CAAU,QAAV,CAA7B;AAAA,iBAAW,CAAC,QAAD,CAAX;KADA;AAGA;AAAA,cAAQ,EAAR;KAHA;AAIA,UAAwB,CAAC,OAAF,CAAU,KAAV,CAAvB;AAAA,cAAQ,CAAC,KAAD,CAAR;KAJA;AAAA,IAMA,OAAO,CAAC,CAAC,KAAF,CAAQ,QAAR,EAAkB,KAAK,CAAC,cAAxB,CAAP,EAAgD,QAAhD,CANA;AAAA,IAOA,OAAO,CAAC,CAAC,KAAF,CAAQ,KAAR,EAAe,KAAK,CAAC,cAArB,CAAP,EAA6C,KAA7C,CAPA;AAAA,IASA,WAAW,EAAE,OAAF,CATX;AAAA,IAUA,YAAY,IAAC,KAAI,CAAC,MAAN,CAAa,CAAb,CAAe,CAAC,WAAhB,EAVZ;AAYA;wBAAA;AAAA,cAAQ,CAAC,GAAT,CAAa,SAAb,EAAwB,GAAxB;AAAA,KAZA;AAaA;SAAA;qBAAA;AAAA,2BAAQ,CAAC,EAAT,CAAY,SAAZ,EAAuB,GAAvB;AAAA;mBAdM;EAAA,CAAR;CADa,CA5Df;;AAAA,4BA6EA,GAA+B,KAAK,CAAC,qBA7ErC;;AAAA,KA8EK,CAAC,qBAAN,GAA8B,SAAC,IAAD,EAAO,IAAP,EAAa,KAAb;AAC5B,MAAG,KAAK,CAAC,mBAAmB,CAAC,IAA1B,CAA+B,IAA/B,CAAH;WACM,iBAAa,IAAb,EAAmB,KAAnB,EADN;GAAA;WAGE,6BAA6B,IAA7B,EAAmC,IAAnC,EAAyC,KAAzC,EAHF;GAD4B;AAAA,CA9E9B;;AAAA,cAoFA,GAAiB,KAAK,CAAC,OApFvB;;AAAA,KAqFK,CAAC,OAAN,GAAgB,SAAC,MAAD,EAAS,UAAT,EAAqB,QAArB;AAGd,MAAG,KAAK,CAAC,cAAN,CAAqB,MAArB,CAAH;WACE,OADF;GAAA,MAEK,IAAG,CAAC,CAAC,OAAF,CAAU,MAAV,KAAsB,CAAC,CAAC,IAAF,CAAO,MAAP,EAAe,KAAK,CAAC,cAArB,CAAzB;WAEH,CAAC,CAAC,MAAF,CAAS,MAAT,EAAiB,SAAC,GAAD;AACf,UAAe,KAAK,CAAC,cAAN,CAAqB,GAArB,CAAf;AAAA,eAAO,IAAP;OAAA;AACA,UAAgB,gBAAgB,CAAC,IAAjB,CAAsB,GAAtB,CAAhB;AAAA,eAAO,KAAP;OADA;AAIA,YAAU,UAAM,4BAA0B,GAAhC,CAAV,CALe;IAAA,CAAjB,EAFG;GAAA;WASH,eAAe,MAAf,EAAuB,UAAvB,EAAmC,QAAnC,EATG;GALS;AAAA,CArFhB;;AAAA,wBAqGA,GAA2B,KAAK,CAAC,iBArGjC;;AAAA,KAsGK,CAAC,iBAAN,GAA0B,SAAC,KAAD,EAAQ,UAAR;AACxB;AAAA,+BAA6B,KAAK,CAAC,kBAAnC;AAAA,EACA,KAAK,CAAC,kBAAN,GAA2B,IAD3B;AAEA;WACE,yBAAyB,KAAzB,EAAgC,UAAhC,EADF;GAAA;AAGE,SAAK,CAAC,kBAAN,GAA2B,0BAA3B,CAHF;GAHwB;AAAA,CAtG1B","file":"/packages/peerlibrary_blaze-components.js","sourcesContent":["Template = Blaze.Template\n","/* This file is needed to backport this pull request: https://github.com/meteor/meteor/pull/5903\n   If it is a copy of templating.js file wrapped into a condition.\n\n   TODO: Remove this file eventually.\n */\n\nif (!Blaze.Template.__checkName) {\n  // Packages and apps add templates on to this object.\n\n  /**\n   * @summary The class for defining templates\n   * @class\n   * @instanceName Template.myTemplate\n   */\n  Template = Blaze.Template;\n\n  var RESERVED_TEMPLATE_NAMES = \"__proto__ name\".split(\" \");\n\n  // Check for duplicate template names and illegal names that won't work.\n  Template.__checkName = function (name) {\n    // Some names can't be used for Templates. These include:\n    //  - Properties Blaze sets on the Template object.\n    //  - Properties that some browsers don't let the code to set.\n    //    These are specified in RESERVED_TEMPLATE_NAMES.\n    if (name in Template || _.contains(RESERVED_TEMPLATE_NAMES, name)) {\n      if ((Template[name] instanceof Template) && name !== \"body\")\n        throw new Error(\"There are multiple templates named '\" + name + \"'. Each template needs a unique name.\");\n      throw new Error(\"This template name is reserved: \" + name);\n    }\n  };\n\n  // XXX COMPAT WITH 0.8.3\n  Template.__define__ = function (name, renderFunc) {\n    Template.__checkName(name);\n    Template[name] = new Template(\"Template.\" + name, renderFunc);\n    // Exempt packages built pre-0.9.0 from warnings about using old\n    // helper syntax, because we can.  It's not very useful to get a\n    // warning about someone else's code (like a package on Atmosphere),\n    // and this should at least put a bit of a dent in number of warnings\n    // that come from packages that haven't been updated lately.\n    Template[name]._NOWARN_OLDSTYLE_HELPERS = true;\n  };\n\n  // Define a template `Template.body` that renders its\n  // `contentRenderFuncs`.  `<body>` tags (of which there may be\n  // multiple) will have their contents added to it.\n\n  /**\n   * @summary The [template object](#templates_api) representing your `<body>`\n   * tag.\n   * @locus Client\n   */\n  Template.body = new Template('body', function () {\n    var view = this;\n    return _.map(Template.body.contentRenderFuncs, function (func) {\n      return func.apply(view);\n    });\n  });\n  Template.body.contentRenderFuncs = []; // array of Blaze.Views\n  Template.body.view = null;\n\n  Template.body.addContent = function (renderFunc) {\n    Template.body.contentRenderFuncs.push(renderFunc);\n  };\n\n  // This function does not use `this` and so it may be called\n  // as `Meteor.startup(Template.body.renderIntoDocument)`.\n  Template.body.renderToDocument = function () {\n    // Only do it once.\n    if (Template.body.view)\n      return;\n\n    var view = Blaze.render(Template.body, document.body);\n    Template.body.view = view;\n  };\n\n  // XXX COMPAT WITH 0.9.0\n  UI.body = Template.body;\n\n  // XXX COMPAT WITH 0.9.0\n  // (<body> tags in packages built with 0.9.0)\n  Template.__body__ = Template.body;\n  Template.__body__.__contentParts = Template.body.contentViews;\n  Template.__body__.__instantiate = Template.body.renderToDocument;\n}\n","\nTemplate.__checkName(\"__dynamicBackport\");\nTemplate[\"__dynamicBackport\"] = new Template(\"Template.__dynamicBackport\", (function() {\n  var view = this;\n  return [ Blaze.View(\"lookup:checkContext\", function() {\n    return Spacebars.mustache(view.lookup(\"checkContext\"));\n  }), \"\\n  \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"dataContextPresent\"));\n  }, function() {\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"__dynamicWithDataContext\"), function() {\n      return Blaze._InOuterTemplateScope(view, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(view.templateContentBlock);\n        });\n      });\n    }), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \\n    \", Blaze._TemplateWith(function() {\n      return {\n        template: Spacebars.call(view.lookup(\"template\")),\n        data: Spacebars.call(view.lookup(\"..\"))\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"__dynamicWithDataContext\"), function() {\n        return Blaze._InOuterTemplateScope(view, function() {\n          return Spacebars.include(function() {\n            return Spacebars.call(view.templateContentBlock);\n          });\n        });\n      });\n    }), \"\\n  \" ];\n  }) ];\n}));\n\nTemplate.__checkName(\"__dynamicWithDataContextBackport\");\nTemplate[\"__dynamicWithDataContextBackport\"] = new Template(\"Template.__dynamicWithDataContextBackport\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.dataMustache(view.lookup(\"chooseTemplate\"), view.lookup(\"template\"));\n  }, function() {\n    return [ \"\\n    \\n    \", Blaze._TemplateWith(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"data\"));\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"..\"), function() {\n        return Blaze._InOuterTemplateScope(view, function() {\n          return Spacebars.include(function() {\n            return Spacebars.call(view.templateContentBlock);\n          });\n        });\n      });\n    }), \"\\n  \" ];\n  });\n}));\n","/* This file is needed to backport this pull request: https://github.com/meteor/meteor/pull/5903\n   If it is a copy of dynamic.js file wrapped into a condition with renaming of backported templates.\n\n   TODO: Remove this file eventually.\n */\n\nif (!Blaze.Template.__dynamicWithDataContext) {\n  Blaze.Template.__dynamicWithDataContext = Blaze.Template.__dynamicWithDataContextBackport;\n  Blaze.Template.__dynamicWithDataContext.viewName = 'Template.__dynamicWithDataContext';\n  Blaze.Template.__dynamic = Blaze.Template.__dynamicBackport;\n  Blaze.Template.__dynamic.viewName = 'Template.__dynamic';\n\n  var Template = Blaze.Template;\n\n  /**\n   * @isTemplate true\n   * @memberOf Template\n   * @function dynamic\n   * @summary Choose a template to include dynamically, by name.\n   * @locus Templates\n   * @param {String} template The name of the template to include.\n   * @param {Object} [data] Optional. The data context in which to include the\n   * template.\n   */\n\n  Template.__dynamicWithDataContext.helpers({\n    chooseTemplate: function (name) {\n      return Blaze._getTemplate(name, function () {\n        return Template.instance();\n      });\n    }\n  });\n\n  Template.__dynamic.helpers({\n    dataContextPresent: function () {\n      return _.has(this, \"data\");\n    },\n    checkContext: function () {\n      if (!_.has(this, \"template\")) {\n        throw new Error(\"Must specify name in the 'template' argument \" +\n          \"to {{> Template.dynamic}}.\");\n      }\n\n      _.each(this, function (v, k) {\n        if (k !== \"template\" && k !== \"data\") {\n          throw new Error(\"Invalid argument to {{> Template.dynamic}}: \" +\n            k);\n        }\n      });\n    }\n  });\n}","/* This file backports Blaze lookup.js from Meteor 1.2 so that required Blaze features to support Blaze\n   Components are available also in older Meteor versions.\n   It is a copy of lookup.js file from Meteor 1.2 with lexical scope lookup commented out.\n\n   TODO: Remove this file eventually.\n */\n\n// Check if we are not running Meteor 1.2+.\nif (! Blaze._getTemplate) {\n  // If `x` is a function, binds the value of `this` for that function\n  // to the current data context.\n  var bindDataContext = function (x) {\n    if (typeof x === 'function') {\n      return function () {\n        var data = Blaze.getData();\n        if (data == null)\n          data = {};\n        return x.apply(data, arguments);\n      };\n    }\n    return x;\n  };\n\n  Blaze._getTemplateHelper = function (template, name, tmplInstanceFunc) {\n    // XXX COMPAT WITH 0.9.3\n    var isKnownOldStyleHelper = false;\n\n    if (template.__helpers.has(name)) {\n      var helper = template.__helpers.get(name);\n      if (helper === Blaze._OLDSTYLE_HELPER) {\n        isKnownOldStyleHelper = true;\n      } else if (helper != null) {\n        return wrapHelper(bindDataContext(helper), tmplInstanceFunc);\n      } else {\n        return null;\n      }\n    }\n\n    // old-style helper\n    if (name in template) {\n      // Only warn once per helper\n      if (!isKnownOldStyleHelper) {\n        template.__helpers.set(name, Blaze._OLDSTYLE_HELPER);\n        if (!template._NOWARN_OLDSTYLE_HELPERS) {\n          Blaze._warn('Assigning helper with `' + template.viewName + '.' +\n            name + ' = ...` is deprecated.  Use `' + template.viewName +\n            '.helpers(...)` instead.');\n        }\n      }\n      if (template[name] != null) {\n        return wrapHelper(bindDataContext(template[name]), tmplInstanceFunc);\n      }\n    }\n\n    return null;\n  };\n\n  var wrapHelper = function (f, templateFunc) {\n    // XXX COMPAT WITH METEOR 1.0.3.2\n    if (!Blaze.Template._withTemplateInstanceFunc) {\n      return Blaze._wrapCatchingExceptions(f, 'template helper');\n    }\n\n    if (typeof f !== \"function\") {\n      return f;\n    }\n\n    return function () {\n      var self = this;\n      var args = arguments;\n\n      return Blaze.Template._withTemplateInstanceFunc(templateFunc, function () {\n        return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args);\n      });\n    };\n  };\n\n  // templateInstance argument is provided to be available for possible\n  // alternative implementations of this function by 3rd party packages.\n  Blaze._getTemplate = function (name, templateInstance) {\n    if ((name in Blaze.Template) && (Blaze.Template[name] instanceof Blaze.Template)) {\n      return Blaze.Template[name];\n    }\n    return null;\n  };\n\n  Blaze._getGlobalHelper = function (name, templateInstance) {\n    if (Blaze._globalHelpers[name] != null) {\n      return wrapHelper(bindDataContext(Blaze._globalHelpers[name]), templateInstance);\n    }\n    return null;\n  };\n\n  Blaze.View.prototype.lookup = function (name, _options) {\n    var template = this.template;\n    var lookupTemplate = _options && _options.template;\n    var helper;\n    var binding;\n    var boundTmplInstance;\n    var foundTemplate;\n\n    if (this.templateInstance) {\n      boundTmplInstance = _.bind(this.templateInstance, this);\n    }\n\n    // 0. looking up the parent data context with the special \"../\" syntax\n    if (/^\\./.test(name)) {\n      // starts with a dot. must be a series of dots which maps to an\n      // ancestor of the appropriate height.\n      if (!/^(\\.)+$/.test(name))\n        throw new Error(\"id starting with dot must be a series of dots\");\n\n      return Blaze._parentData(name.length - 1, true /*_functionWrapped*/);\n\n    }\n\n    // 1. look up a helper on the current template\n    if (template && ((helper = Blaze._getTemplateHelper(template, name, boundTmplInstance)) != null)) {\n      return helper;\n    }\n\n    // 2. look up a binding by traversing the lexical view hierarchy inside the\n    // current template\n    /*if (template && (binding = Blaze._lexicalBindingLookup(Blaze.currentView, name)) != null) {\n      return binding;\n    }*/\n\n    // 3. look up a template by name\n    if (lookupTemplate && ((foundTemplate = Blaze._getTemplate(name, boundTmplInstance)) != null)) {\n      return foundTemplate;\n    }\n\n    // 4. look up a global helper\n    if ((helper = Blaze._getGlobalHelper(name, boundTmplInstance)) != null) {\n      return helper;\n    }\n\n    // 5. look up in a data context\n    return function () {\n      var isCalledAsFunction = (arguments.length > 0);\n      var data = Blaze.getData();\n      var x = data && data[name];\n      if (!x) {\n        if (lookupTemplate) {\n          throw new Error(\"No such template: \" + name);\n        } else if (isCalledAsFunction) {\n          throw new Error(\"No such function: \" + name);\n        } /*else if (name.charAt(0) === '@' && ((x === null) ||\n          (x === undefined))) {\n          // Throw an error if the user tries to use a `@directive`\n          // that doesn't exist.  We don't implement all directives\n          // from Handlebars, so there's a potential for confusion\n          // if we fail silently.  On the other hand, we want to\n          // throw late in case some app or package wants to provide\n          // a missing directive.\n          throw new Error(\"Unsupported directive: \" + name);\n        }*/\n      }\n      if (!data) {\n        return null;\n      }\n      if (typeof x !== 'function') {\n        if (isCalledAsFunction) {\n          throw new Error(\"Can't call non-function: \" + x);\n        }\n        return x;\n      }\n      return x.apply(data, arguments);\n    };\n  };\n}","/* This file is needed to backport this pull request: https://github.com/meteor/meteor/pull/5893\n   It is a copy of attrs.js file with the changes from the above pull request merged in.\n\n   TODO: Remove this file eventually.\n */\n\nvar jsUrlsAllowed = false;\nBlaze._allowJavascriptUrls = function () {\n  jsUrlsAllowed = true;\n};\nBlaze._javascriptUrlsAllowed = function () {\n  return jsUrlsAllowed;\n};\n\n// An AttributeHandler object is responsible for updating a particular attribute\n// of a particular element.  AttributeHandler subclasses implement\n// browser-specific logic for dealing with particular attributes across\n// different browsers.\n//\n// To define a new type of AttributeHandler, use\n// `var FooHandler = AttributeHandler.extend({ update: function ... })`\n// where the `update` function takes arguments `(element, oldValue, value)`.\n// The `element` argument is always the same between calls to `update` on\n// the same instance.  `oldValue` and `value` are each either `null` or\n// a Unicode string of the type that might be passed to the value argument\n// of `setAttribute` (i.e. not an HTML string with character references).\n// When an AttributeHandler is installed, an initial call to `update` is\n// always made with `oldValue = null`.  The `update` method can access\n// `this.name` if the AttributeHandler class is a generic one that applies\n// to multiple attribute names.\n//\n// AttributeHandlers can store custom properties on `this`, as long as they\n// don't use the names `element`, `name`, `value`, and `oldValue`.\n//\n// AttributeHandlers can't influence how attributes appear in rendered HTML,\n// only how they are updated after materialization as DOM.\n\nAttributeHandler = function (name, value) {\n  this.name = name;\n  this.value = value;\n};\nBlaze._AttributeHandler = AttributeHandler;\n\nAttributeHandler.prototype.update = function (element, oldValue, value) {\n  if (value === null) {\n    if (oldValue !== null)\n      element.removeAttribute(this.name);\n  } else {\n    element.setAttribute(this.name, value);\n  }\n};\n\nAttributeHandler.extend = function (options) {\n  var curType = this;\n  var subType = function AttributeHandlerSubtype(/*arguments*/) {\n    AttributeHandler.apply(this, arguments);\n  };\n  subType.prototype = new curType;\n  subType.extend = curType.extend;\n  if (options)\n    _.extend(subType.prototype, options);\n  return subType;\n};\n\n/// Apply the diff between the attributes of \"oldValue\" and \"value\" to \"element.\"\n//\n// Each subclass must implement a parseValue method which takes a string\n// as an input and returns a dict of attributes. The keys of the dict\n// are unique identifiers (ie. css properties in the case of styles), and the\n// values are the entire attribute which will be injected into the element.\n//\n// Extended below to support classes, SVG elements and styles.\n\nBlaze._DiffingAttributeHandler = AttributeHandler.extend({\n  update: function (element, oldValue, value) {\n    if (!this.getCurrentValue || !this.setValue || !this.parseValue)\n      throw new Error(\"Missing methods in subclass of 'DiffingAttributeHandler'\");\n\n    var oldAttrsMap = oldValue ? this.parseValue(oldValue) : {};\n    var newAttrsMap = value ? this.parseValue(value) : {};\n\n    // the current attributes on the element, which we will mutate.\n\n    var attrString = this.getCurrentValue(element);\n    var attrsMap = attrString ? this.parseValue(attrString) : {};\n\n    _.each(_.keys(oldAttrsMap), function (t) {\n      if (! (t in newAttrsMap))\n        delete attrsMap[t];\n    });\n\n    _.each(_.keys(newAttrsMap), function (t) {\n      attrsMap[t] = newAttrsMap[t];\n    });\n\n    this.setValue(element, _.values(attrsMap).join(' '));\n  }\n});\n\nvar ClassHandler = Blaze._DiffingAttributeHandler.extend({\n  // @param rawValue {String}\n  getCurrentValue: function (element) {\n    return element.className;\n  },\n  setValue: function (element, className) {\n    element.className = className;\n  },\n  parseValue: function (attrString) {\n    var tokens = {};\n\n    _.each(attrString.split(' '), function(token) {\n      if (token)\n        tokens[token] = token;\n    });\n    return tokens;\n  }\n});\n\nvar SVGClassHandler = ClassHandler.extend({\n  getCurrentValue: function (element) {\n    return element.className.baseVal;\n  },\n  setValue: function (element, className) {\n    element.setAttribute('class', className);\n  }\n});\n\nvar StyleHandler = Blaze._DiffingAttributeHandler.extend({\n  getCurrentValue: function (element) {\n    return element.getAttribute('style');\n  },\n  setValue: function (element, style) {\n    if (style === '') {\n      element.removeAttribute('style');\n    } else {\n      element.setAttribute('style', style);\n    }\n  },\n\n  // Parse a string to produce a map from property to attribute string.\n  //\n  // Example:\n  // \"color:red; foo:12px\" produces a token {color: \"color:red\", foo:\"foo:12px\"}\n  parseValue: function (attrString) {\n    var tokens = {};\n\n    // Regex for parsing a css attribute declaration, taken from css-parse:\n    // https://github.com/reworkcss/css-parse/blob/7cef3658d0bba872cde05a85339034b187cb3397/index.js#L219\n    var regex = /(\\*?[-#\\/\\*\\\\\\w]+(?:\\[[0-9a-z_-]+\\])?)\\s*:\\s*(?:\\'(?:\\\\\\'|.)*?\\'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+[;\\s]*/g;\n    var match = regex.exec(attrString);\n    while (match) {\n      // match[0] = entire matching string\n      // match[1] = css property\n      // Prefix the token to prevent conflicts with existing properties.\n\n      // XXX No `String.trim` on Safari 4. Swap out $.trim if we want to\n      // remove strong dep on jquery.\n      tokens[' ' + match[1]] = match[0].trim ?\n        match[0].trim() : $.trim(match[0]);\n\n      match = regex.exec(attrString);\n    }\n\n    return tokens;\n  }\n});\n\nvar BooleanHandler = AttributeHandler.extend({\n  update: function (element, oldValue, value) {\n    var name = this.name;\n    if (value == null) {\n      if (oldValue != null)\n        element[name] = false;\n    } else {\n      element[name] = true;\n    }\n  }\n});\n\nvar DOMPropertyHandler = AttributeHandler.extend({\n  update: function (element, oldValue, value) {\n    var name = this.name;\n    if (value !== element[name])\n      element[name] = value;\n  }\n});\n\n// attributes of the type 'xlink:something' should be set using\n// the correct namespace in order to work\nvar XlinkHandler = AttributeHandler.extend({\n  update: function(element, oldValue, value) {\n    var NS = 'http://www.w3.org/1999/xlink';\n    if (value === null) {\n      if (oldValue !== null)\n        element.removeAttributeNS(NS, this.name);\n    } else {\n      element.setAttributeNS(NS, this.name, this.value);\n    }\n  }\n});\n\n// cross-browser version of `instanceof SVGElement`\nvar isSVGElement = function (elem) {\n  return 'ownerSVGElement' in elem;\n};\n\nvar isUrlAttribute = function (tagName, attrName) {\n  // Compiled from http://www.w3.org/TR/REC-html40/index/attributes.html\n  // and\n  // http://www.w3.org/html/wg/drafts/html/master/index.html#attributes-1\n  var urlAttrs = {\n    FORM: ['action'],\n    BODY: ['background'],\n    BLOCKQUOTE: ['cite'],\n    Q: ['cite'],\n    DEL: ['cite'],\n    INS: ['cite'],\n    OBJECT: ['classid', 'codebase', 'data', 'usemap'],\n    APPLET: ['codebase'],\n    A: ['href'],\n    AREA: ['href'],\n    LINK: ['href'],\n    BASE: ['href'],\n    IMG: ['longdesc', 'src', 'usemap'],\n    FRAME: ['longdesc', 'src'],\n    IFRAME: ['longdesc', 'src'],\n    HEAD: ['profile'],\n    SCRIPT: ['src'],\n    INPUT: ['src', 'usemap', 'formaction'],\n    BUTTON: ['formaction'],\n    BASE: ['href'],\n    MENUITEM: ['icon'],\n    HTML: ['manifest'],\n    VIDEO: ['poster']\n  };\n\n  if (attrName === 'itemid') {\n    return true;\n  }\n\n  var urlAttrNames = urlAttrs[tagName] || [];\n  return _.contains(urlAttrNames, attrName);\n};\n\n// To get the protocol for a URL, we let the browser normalize it for\n// us, by setting it as the href for an anchor tag and then reading out\n// the 'protocol' property.\nif (Meteor.isClient) {\n  var anchorForNormalization = document.createElement('A');\n}\n\nvar getUrlProtocol = function (url) {\n  if (Meteor.isClient) {\n    anchorForNormalization.href = url;\n    return (anchorForNormalization.protocol || \"\").toLowerCase();\n  } else {\n    throw new Error('getUrlProtocol not implemented on the server');\n  }\n};\n\n// UrlHandler is an attribute handler for all HTML attributes that take\n// URL values. It disallows javascript: URLs, unless\n// Blaze._allowJavascriptUrls() has been called. To detect javascript:\n// urls, we set the attribute on a dummy anchor element and then read\n// out the 'protocol' property of the attribute.\nvar origUpdate = AttributeHandler.prototype.update;\nvar UrlHandler = AttributeHandler.extend({\n  update: function (element, oldValue, value) {\n    var self = this;\n    var args = arguments;\n\n    if (Blaze._javascriptUrlsAllowed()) {\n      origUpdate.apply(self, args);\n    } else {\n      var isJavascriptProtocol = (getUrlProtocol(value) === \"javascript:\");\n      if (isJavascriptProtocol) {\n        Blaze._warn(\"URLs that use the 'javascript:' protocol are not \" +\n                    \"allowed in URL attribute values. \" +\n                    \"Call Blaze._allowJavascriptUrls() \" +\n                    \"to enable them.\");\n        origUpdate.apply(self, [element, oldValue, null]);\n      } else {\n        origUpdate.apply(self, args);\n      }\n    }\n  }\n});\n\n// XXX make it possible for users to register attribute handlers!\nBlaze._makeAttributeHandler = function (elem, name, value) {\n  // generally, use setAttribute but certain attributes need to be set\n  // by directly setting a JavaScript property on the DOM element.\n  if (name === 'class') {\n    if (isSVGElement(elem)) {\n      return new SVGClassHandler(name, value);\n    } else {\n      return new ClassHandler(name, value);\n    }\n  } else if (name === 'style') {\n    return new StyleHandler(name, value);\n  } else if ((elem.tagName === 'OPTION' && name === 'selected') ||\n             (elem.tagName === 'INPUT' && name === 'checked')) {\n    return new BooleanHandler(name, value);\n  } else if ((elem.tagName === 'TEXTAREA' || elem.tagName === 'INPUT')\n             && name === 'value') {\n    // internally, TEXTAREAs tracks their value in the 'value'\n    // attribute just like INPUTs.\n    return new DOMPropertyHandler(name, value);\n  } else if (name.substring(0,6) === 'xlink:') {\n    return new XlinkHandler(name.substring(6), value);\n  } else if (isUrlAttribute(elem.tagName, name)) {\n    return new UrlHandler(name, value);\n  } else {\n    return new AttributeHandler(name, value);\n  }\n\n  // XXX will need one for 'style' on IE, though modern browsers\n  // seem to handle setAttribute ok.\n};\n\n\nElementAttributesUpdater = function (elem) {\n  this.elem = elem;\n  this.handlers = {};\n};\n\n// Update attributes on `elem` to the dictionary `attrs`, whose\n// values are strings.\nElementAttributesUpdater.prototype.update = function(newAttrs) {\n  var elem = this.elem;\n  var handlers = this.handlers;\n\n  for (var k in handlers) {\n    if (! _.has(newAttrs, k)) {\n      // remove attributes (and handlers) for attribute names\n      // that don't exist as keys of `newAttrs` and so won't\n      // be visited when traversing it.  (Attributes that\n      // exist in the `newAttrs` object but are `null`\n      // are handled later.)\n      var handler = handlers[k];\n      var oldValue = handler.value;\n      handler.value = null;\n      handler.update(elem, oldValue, null);\n      delete handlers[k];\n    }\n  }\n\n  for (var k in newAttrs) {\n    var handler = null;\n    var oldValue;\n    var value = newAttrs[k];\n    if (! _.has(handlers, k)) {\n      if (value !== null) {\n        // make new handler\n        handler = Blaze._makeAttributeHandler(elem, k, value);\n        handlers[k] = handler;\n        oldValue = null;\n      }\n    } else {\n      handler = handlers[k];\n      oldValue = handler.value;\n    }\n    if (oldValue !== value) {\n      handler.value = value;\n      handler.update(elem, oldValue, value);\n      if (value === null)\n        delete handlers[k];\n    }\n  }\n};\n","/* This file is needed to backport this pull request: https://github.com/meteor/meteor/pull/5893\n   It is a copy of the materializer.js file and is needed because it references symbols from attrs.js.\n\n   TODO: Remove this file eventually.\n */\n\n// Turns HTMLjs into DOM nodes and DOMRanges.\n//\n// - `htmljs`: the value to materialize, which may be any of the htmljs\n//   types (Tag, CharRef, Comment, Raw, array, string, boolean, number,\n//   null, or undefined) or a View or Template (which will be used to\n//   construct a View).\n// - `intoArray`: the array of DOM nodes and DOMRanges to push the output\n//   into (required)\n// - `parentView`: the View we are materializing content for (optional)\n// - `_existingWorkStack`: optional argument, only used for recursive\n//   calls when there is some other _materializeDOM on the call stack.\n//   If _materializeDOM called your function and passed in a workStack,\n//   pass it back when you call _materializeDOM (such as from a workStack\n//   task).\n//\n// Returns `intoArray`, which is especially useful if you pass in `[]`.\nBlaze._materializeDOM = function (htmljs, intoArray, parentView,\n                                  _existingWorkStack) {\n  // In order to use fewer stack frames, materializeDOMInner can push\n  // tasks onto `workStack`, and they will be popped off\n  // and run, last first, after materializeDOMInner returns.  The\n  // reason we use a stack instead of a queue is so that we recurse\n  // depth-first, doing newer tasks first.\n  var workStack = (_existingWorkStack || []);\n  materializeDOMInner(htmljs, intoArray, parentView, workStack);\n\n  if (! _existingWorkStack) {\n    // We created the work stack, so we are responsible for finishing\n    // the work.  Call each \"task\" function, starting with the top\n    // of the stack.\n    while (workStack.length) {\n      // Note that running task() may push new items onto workStack.\n      var task = workStack.pop();\n      task();\n    }\n  }\n\n  return intoArray;\n};\n\nvar materializeDOMInner = function (htmljs, intoArray, parentView, workStack) {\n  if (htmljs == null) {\n    // null or undefined\n    return;\n  }\n\n  switch (typeof htmljs) {\n  case 'string': case 'boolean': case 'number':\n    intoArray.push(document.createTextNode(String(htmljs)));\n    return;\n  case 'object':\n    if (htmljs.htmljsType) {\n      switch (htmljs.htmljsType) {\n      case HTML.Tag.htmljsType:\n        intoArray.push(materializeTag(htmljs, parentView, workStack));\n        return;\n      case HTML.CharRef.htmljsType:\n        intoArray.push(document.createTextNode(htmljs.str));\n        return;\n      case HTML.Comment.htmljsType:\n        intoArray.push(document.createComment(htmljs.sanitizedValue));\n        return;\n      case HTML.Raw.htmljsType:\n        // Get an array of DOM nodes by using the browser's HTML parser\n        // (like innerHTML).\n        var nodes = Blaze._DOMBackend.parseHTML(htmljs.value);\n        for (var i = 0; i < nodes.length; i++)\n          intoArray.push(nodes[i]);\n        return;\n      }\n    } else if (HTML.isArray(htmljs)) {\n      for (var i = htmljs.length-1; i >= 0; i--) {\n        workStack.push(_.bind(Blaze._materializeDOM, null,\n                              htmljs[i], intoArray, parentView, workStack));\n      }\n      return;\n    } else {\n      if (htmljs instanceof Blaze.Template) {\n        htmljs = htmljs.constructView();\n        // fall through to Blaze.View case below\n      }\n      if (htmljs instanceof Blaze.View) {\n        Blaze._materializeView(htmljs, parentView, workStack, intoArray);\n        return;\n      }\n    }\n  }\n\n  throw new Error(\"Unexpected object in htmljs: \" + htmljs);\n};\n\nvar materializeTag = function (tag, parentView, workStack) {\n  var tagName = tag.tagName;\n  var elem;\n  if ((HTML.isKnownSVGElement(tagName) || isSVGAnchor(tag))\n      && document.createElementNS) {\n    // inline SVG\n    elem = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n  } else {\n    // normal elements\n    elem = document.createElement(tagName);\n  }\n\n  var rawAttrs = tag.attrs;\n  var children = tag.children;\n  if (tagName === 'textarea' && tag.children.length &&\n      ! (rawAttrs && ('value' in rawAttrs))) {\n    // Provide very limited support for TEXTAREA tags with children\n    // rather than a \"value\" attribute.\n    // Reactivity in the form of Views nested in the tag's children\n    // won't work.  Compilers should compile textarea contents into\n    // the \"value\" attribute of the tag, wrapped in a function if there\n    // is reactivity.\n    if (typeof rawAttrs === 'function' ||\n        HTML.isArray(rawAttrs)) {\n      throw new Error(\"Can't have reactive children of TEXTAREA node; \" +\n                      \"use the 'value' attribute instead.\");\n    }\n    rawAttrs = _.extend({}, rawAttrs || null);\n    rawAttrs.value = Blaze._expand(children, parentView);\n    children = [];\n  }\n\n  if (rawAttrs) {\n    var attrUpdater = new ElementAttributesUpdater(elem);\n    var updateAttributes = function () {\n      var expandedAttrs = Blaze._expandAttributes(rawAttrs, parentView);\n      var flattenedAttrs = HTML.flattenAttributes(expandedAttrs);\n      var stringAttrs = {};\n      for (var attrName in flattenedAttrs) {\n        stringAttrs[attrName] = Blaze._toText(flattenedAttrs[attrName],\n                                              parentView,\n                                              HTML.TEXTMODE.STRING);\n      }\n      attrUpdater.update(stringAttrs);\n    };\n    var updaterComputation;\n    if (parentView) {\n      updaterComputation =\n        parentView.autorun(updateAttributes, undefined, 'updater');\n    } else {\n      updaterComputation = Tracker.nonreactive(function () {\n        return Tracker.autorun(function () {\n          Tracker._withCurrentView(parentView, updateAttributes);\n        });\n      });\n    }\n    Blaze._DOMBackend.Teardown.onElementTeardown(elem, function attrTeardown() {\n      updaterComputation.stop();\n    });\n  }\n\n  if (children.length) {\n    var childNodesAndRanges = [];\n    // push this function first so that it's done last\n    workStack.push(function () {\n      for (var i = 0; i < childNodesAndRanges.length; i++) {\n        var x = childNodesAndRanges[i];\n        if (x instanceof Blaze._DOMRange)\n          x.attach(elem);\n        else\n          elem.appendChild(x);\n      }\n    });\n    // now push the task that calculates childNodesAndRanges\n    workStack.push(_.bind(Blaze._materializeDOM, null,\n                          children, childNodesAndRanges, parentView,\n                          workStack));\n  }\n\n  return elem;\n};\n\n\nvar isSVGAnchor = function (node) {\n  // We generally aren't able to detect SVG <a> elements because\n  // if \"A\" were in our list of known svg element names, then all\n  // <a> nodes would be created using\n  // `document.createElementNS`. But in the special case of <a\n  // xlink:href=\"...\">, we can at least detect that attribute and\n  // create an SVG <a> tag in that case.\n  //\n  // However, we still have a general problem of knowing when to\n  // use document.createElementNS and when to use\n  // document.createElement; for example, font tags will always\n  // be created as SVG elements which can cause other\n  // problems. #1977\n  return (node.tagName === \"a\" &&\n          node.attrs &&\n          node.attrs[\"xlink:href\"] !== undefined);\n};\n","getTemplateInstance = (view, skipBlockHelpers) ->\n  while view and not view._templateInstance\n    if skipBlockHelpers\n      view = view.parentView\n    else\n      view = view.originalParentView or view.parentView\n\n  view?._templateInstance\n\n# More or less the same as aldeed:template-extension's template.get('component') just specialized.\n# It allows us to not have a dependency on template-extension package and that we can work with Iron\n# Router which has its own DynamicTemplate class which is not patched by template-extension and thus\n# does not have .get() method.\ntemplateInstanceToComponent = (templateInstanceFunc, skipBlockHelpers) ->\n  templateInstance = templateInstanceFunc?()\n\n  # Iron Router uses its own DynamicTemplate which is not a proper template instance, but it is\n  # passed in as such, so we want to find the real one before we start searching for the component.\n  templateInstance = getTemplateInstance templateInstance?.view, skipBlockHelpers\n\n  while templateInstance\n    return templateInstance.component if 'component' of templateInstance\n\n    if skipBlockHelpers\n      templateInstance = getTemplateInstance templateInstance.view.parentView, skipBlockHelpers\n    else\n      templateInstance = getTemplateInstance (templateInstance.view.originalParentView or templateInstance.view.parentView), skipBlockHelpers\n\n  null\n\ngetTemplateInstanceFunction = (view, skipBlockHelpers) ->\n  templateInstance = getTemplateInstance view, skipBlockHelpers\n  ->\n    templateInstance\n\nclass ComponentsNamespaceReference\n  constructor: (@namespace, @templateInstance) ->\n\n# We extend the original dot operator to support {{> Foo.Bar}}. This goes through a getTemplateHelper path, but\n# we want to redirect it to the getTemplate path. So we mark it in getTemplateHelper and then here call getTemplate.\noriginalDot = Spacebars.dot\nSpacebars.dot = (value, args...) ->\n  if value instanceof ComponentsNamespaceReference\n    return Blaze._getTemplate \"#{value.namespace}.#{args.join '.'}\", value.templateInstance\n\n  originalDot value, args...\n\noriginalInclude = Spacebars.include\nSpacebars.include = (templateOrFunction, args...) ->\n  # If ComponentsNamespaceReference gets all the way to the Spacebars.include it means that we are in the situation\n  # where there is both namespace and component with the same name, and user is including a component. But namespace\n  # reference is created instead (because we do not know in advance that there is no Spacebars.dot call around lookup\n  # call). So we dereference the reference and try to resolve a template. Of course, a component might not really exist.\n  if templateOrFunction instanceof ComponentsNamespaceReference\n    templateOrFunction = Blaze._getTemplate templateOrFunction.namespace, templateOrFunction.templateInstance\n\n  originalInclude templateOrFunction, args...\n\n# We override the original lookup method with a similar one, which supports components as well.\n#\n# Now the order of the lookup will be, in order:\n#   a helper of the current template\n#   a property of the current component (not the BlazeComponent.currentComponent() though, but @component())\n#   a helper of the current component's base template (not the BlazeComponent.currentComponent() though, but @component())\n#   the name of a component\n#   the name of a template\n#   global helper\n#   a property of the data context\n#\n# Returns a function, a non-function value, or null. If a function is found, it is bound appropriately.\n#\n# NOTE: This function must not establish any reactive dependencies itself.  If there is any reactivity\n# in the value, lookup should return a function.\n#\n# TODO: Should we also lookup for a property of the component-level data context (and template-level data context)?\n\nBlaze._getTemplateHelper = (template, name, templateInstance) ->\n  isKnownOldStyleHelper = false\n  if template.__helpers.has name\n    helper = template.__helpers.get name\n    if helper is Blaze._OLDSTYLE_HELPER\n      isKnownOldStyleHelper = true\n    else if helper?\n      return wrapHelper bindDataContext(helper), templateInstance\n    else\n      return null\n\n  # Old-style helper.\n  if name of template\n    # Only warn once per helper.\n    unless isKnownOldStyleHelper\n      template.__helpers.set name, Blaze._OLDSTYLE_HELPER\n      unless template._NOWARN_OLDSTYLE_HELPERS\n        Blaze._warn \"Assigning helper with `\" + template.viewName + \".\" + name + \" = ...` is deprecated.  Use `\" + template.viewName + \".helpers(...)` instead.\"\n    if template[name]?\n      return wrapHelper bindDataContext(template[name]), templateInstance\n    else\n      return null\n\n  return null unless templateInstance\n\n  # Do not resolve component helpers if inside Template.dynamic. The reason is that Template.dynamic uses a data context\n  # value with name \"template\" internally. But when used inside a component the data context lookup is then resolved\n  # into a current component's template method and not the data context \"template\". To force the data context resolving\n  # Template.dynamic should use \"this.template\" in its templates, but it does not, so we have a special case here for it.\n  return null if template.viewName in ['Template.__dynamicWithDataContext', 'Template.__dynamic']\n\n  # Blaze.View::lookup should not introduce any reactive dependencies, but we can simply ignore reactivity here because\n  # template instance probably cannot change without reconstructing the component as well.\n  component = Tracker.nonreactive ->\n    # We want to skip any block helper. {{method}} should resolve to\n    # {{component.method}} and not to {{currentComponent.method}}.\n    templateInstanceToComponent templateInstance, true\n\n  # Component.\n  if component\n    # This will first search on the component and then continue with mixins.\n    if mixinOrComponent = component.getFirstWith null, name\n      return wrapHelper bindComponent(mixinOrComponent, mixinOrComponent[name]), templateInstance\n\n  # A special case to support {{> Foo.Bar}}. This goes through a getTemplateHelper path, but we want to redirect\n  # it to the getTemplate path. So we mark it and leave to Spacebars.dot to call getTemplate.\n  # TODO: We should provide a BaseComponent.getComponentsNamespace method instead of accessing components directly.\n  if name and name of BlazeComponent.components\n    return new ComponentsNamespaceReference name, templateInstance\n\n  # Maybe a preexisting template helper on the component's base template.\n  if component\n    if (helper = component._componentInternals?.templateBase?.__helpers.get name)?\n      return wrapHelper bindDataContext(helper), templateInstance\n\n  null\n\nshare.inExpandAttributes = false\n\nbindComponent = (component, helper) ->\n  if _.isFunction helper\n    (args...) ->\n      result = helper.apply component, args\n\n      # If we are expanding attributes and this is an object with dynamic attributes,\n      # then we want to bind all possible event handlers to the component as well.\n      if share.inExpandAttributes and _.isObject result\n        for name, value of result when share.EVENT_HANDLER_REGEX.test name\n          if _.isFunction value\n            result[name] = _.bind value, component\n          else if _.isArray value\n            result[name] = _.map value, (fun) ->\n              if _.isFunction fun\n                _.bind fun, component\n              else\n                fun\n\n      result\n  else\n    helper\n\nbindDataContext = (helper) ->\n  if _.isFunction helper\n    ->\n      data = Blaze.getData()\n      data ?= {}\n      helper.apply data, arguments\n  else\n    helper\n\nwrapHelper = (f, templateFunc) ->\n  # XXX COMPAT WITH METEOR 1.0.3.2\n  return Blaze._wrapCatchingExceptions f, 'template helper' unless Blaze.Template._withTemplateInstanceFunc\n\n  return f unless _.isFunction f\n\n  ->\n    self = @\n    args = arguments\n\n    Blaze.Template._withTemplateInstanceFunc templateFunc, ->\n      Blaze._wrapCatchingExceptions(f, 'template helper').apply self, args\n\nif Blaze.Template._withTemplateInstanceFunc\n  withTemplateInstanceFunc = Blaze.Template._withTemplateInstanceFunc\nelse\n  # XXX COMPAT WITH METEOR 1.0.3.2.\n  withTemplateInstanceFunc = (templateInstance, f) ->\n    f()\n\ngetTemplateBase = (component) ->\n  # We do not allow template to be a reactive method.\n  Tracker.nonreactive ->\n    componentTemplate = component.template()\n    if _.isString componentTemplate\n      templateBase = Template[componentTemplate]\n      throw new Error \"Template '#{componentTemplate}' cannot be found.\" unless templateBase\n    else if componentTemplate\n      templateBase = componentTemplate\n    else\n      throw new Error \"Template for the component '#{component.componentName() or 'unnamed'}' not provided.\"\n\n    templateBase\n\ncallTemplateBaseHooks = (component, hookName) ->\n  component._componentInternals ?= {}\n\n  # In mixins we do not have a template instance. There is also\n  # no reason for a template instance to extend a Blaze template.\n  return unless component._componentInternals.templateInstance\n\n  templateInstance = Tracker.nonreactive ->\n    component._componentInternals.templateInstance()\n  callbacks = component._componentInternals.templateBase._getCallbacks hookName\n  Template._withTemplateInstanceFunc(\n    ->\n      templateInstance\n  ,\n    ->\n      for callback in callbacks\n        callback.call templateInstance\n  )\n\n  return\n\nwrapViewAndTemplate = (currentView, f) ->\n  # For template content wrapped inside the block helper, we want to skip the block\n  # helper when searching for corresponding template. This means that Template.instance()\n  # will return the component's template, while BlazeComponent.currentComponent() will\n  # return the component inside.\n  templateInstance = getTemplateInstanceFunction currentView, true\n\n  # We set template instance to match the current view (mostly, only not when inside\n  # the block helper). The latter we use for BlazeComponent.currentComponent(), but\n  # it is good that both template instance and current view correspond to each other\n  # as much as possible.\n  withTemplateInstanceFunc templateInstance, ->\n    # We set view based on the current view so that inside event handlers\n    # BlazeComponent.currentData() (and Blaze.getData() and Template.currentData())\n    # returns data context of event target and not component/template. Moreover,\n    # inside event handlers BlazeComponent.currentComponent() returns the component\n    # of event target.\n    Blaze._withCurrentView currentView, ->\n      f()\n\naddEvents = (view, component) ->\n  eventsList = component.events()\n\n  throw new Error \"'events' method from the component '#{component.componentName() or 'unnamed'}' did not return a list of event maps.\" unless _.isArray eventsList\n\n  for events in eventsList\n    eventMap = {}\n\n    for spec, handler of events\n      do (spec, handler) ->\n        eventMap[spec] = (args...) ->\n          event = args[0]\n\n          currentView = Blaze.getView event.currentTarget\n          wrapViewAndTemplate currentView, ->\n            handler.apply component, args\n\n          # Make sure CoffeeScript does not return anything.\n          # Returning from event handlers is deprecated.\n          return\n\n    Blaze._addEventMap view, eventMap, view\n\n  return\n\noriginalGetTemplate = Blaze._getTemplate\nBlaze._getTemplate = (name, templateInstance) ->\n  # Blaze.View::lookup should not introduce any reactive dependencies, so we are making sure it is so.\n  template = Tracker.nonreactive ->\n    if Blaze.currentView\n      parentComponent = BlazeComponent.currentComponent()\n    else\n      # We do not skip block helpers to assure that when block helpers are used,\n      # component tree integrates them nicely into a tree.\n      parentComponent = templateInstanceToComponent templateInstance, false\n\n    BlazeComponent.getComponent(name)?.renderComponent parentComponent\n  return template if template and (template instanceof Blaze.Template or _.isFunction template)\n\n  originalGetTemplate name\n\nregisterHooks = (template, hooks) ->\n  if template.onCreated\n    template.onCreated hooks.onCreated\n    template.onRendered hooks.onRendered\n    template.onDestroyed hooks.onDestroyed\n  else\n    # XXX COMPAT WITH METEOR 1.0.3.2.\n    template.created = hooks.onCreated\n    template.rendered = hooks.onRendered\n    template.destroyed = hooks.onDestroyed\n\nregisterFirstCreatedHook = (template, onCreated) ->\n  if template._callbacks\n    template._callbacks.created.unshift onCreated\n  else\n    # XXX COMPAT WITH METEOR 1.0.3.2.\n    oldCreated = template.created\n    template.created = ->\n      onCreated.call @\n      oldCreated?.call @\n\n# We make Template.dynamic resolve to the component if component name is specified as a template name, and not\n# to the non-component template which is probably used only for the content. We simply reuse Blaze._getTemplate.\n# TODO: How to pass args?\n#       Maybe simply by using Spacebars nested expressions (https://github.com/meteor/meteor/pull/4101)?\n#       Template.dynamic template=\"...\" data=(args ...)? But this exposes the fact that args are passed as data context.\n#       Maybe we should simply override Template.dynamic and add \"args\" argument?\n# TODO: This can be removed once https://github.com/meteor/meteor/pull/4036 is merged in.\nTemplate.__dynamicWithDataContext.__helpers.set 'chooseTemplate', (name) ->\n  Blaze._getTemplate name, =>\n    Template.instance()\n\nargumentsConstructor = ->\n  # This class should never really be created.\n  assert false\n\n# TODO: Find a way to pass arguments to the component without having to introduce one intermediary data context into the data context hierarchy.\n#       (In fact two data contexts, because we add one more when restoring the original one.)\nTemplate.registerHelper 'args', ->\n  obj = {}\n  # We use custom constructor to know that it is not a real data context.\n  obj.constructor = argumentsConstructor\n  obj._arguments = arguments\n  obj\n\nshare.EVENT_HANDLER_REGEX = /^on[A-Z]/\n\nshare.isEventHandler = (fun) ->\n  _.isFunction(fun) and fun.eventHandler\n\n# When event handlers are provided directly as args they are not passed through\n# Spacebars.event by the template compiler, so we have to do it ourselves.\noriginalFlattenAttributes = HTML.flattenAttributes\nHTML.flattenAttributes = (attrs) ->\n  if attrs = originalFlattenAttributes attrs\n    for name, value of attrs when share.EVENT_HANDLER_REGEX.test name\n      # Already processed by Spacebars.event.\n      continue if share.isEventHandler value\n      continue if _.isArray(value) and _.some value, share.isEventHandler\n\n      # When event handlers are provided directly as args,\n      # we require them to be just event handlers.\n      if _.isArray value\n        attrs[name] = _.map value, Spacebars.event\n      else\n        attrs[name] = Spacebars.event value\n\n  attrs\n\nSpacebars.event = (eventHandler, args...) ->\n  throw new Error \"Event handler not a function: #{eventHandler}\" unless _.isFunction eventHandler\n\n  # Execute all arguments.\n  args = Spacebars.mustacheImpl ((xs...) -> xs), args...\n\n  fun = (event, eventArgs...) ->\n    currentView = Blaze.getView event.currentTarget\n    wrapViewAndTemplate currentView, ->\n      # We do not have to bind \"this\" because event handlers are resolved\n      # as template helpers and are already bound. We bind event handlers\n      # in dynamic attributes already as well.\n      eventHandler.apply null, [event].concat args, eventArgs\n\n  fun.eventHandler = true\n\n  fun\n\n# When converting the component to the static HTML, remove all event handlers.\noriginalVisitTag = HTML.ToHTMLVisitor::visitTag\nHTML.ToHTMLVisitor::visitTag = (tag) ->\n  if attrs = tag.attrs\n    attrs = HTML.flattenAttributes attrs\n    for name of attrs when share.EVENT_HANDLER_REGEX.test name\n      delete attrs[name]\n    tag.attrs = attrs\n\n  originalVisitTag.call @, tag\n\ncurrentViewIfRendering = ->\n  view = Blaze.currentView\n  if view?._isInRender\n    view\n  else\n    null\n\ncontentAsFunc = (content) ->\n  # We do not check content for validity.\n\n  if !_.isFunction content\n    return ->\n      content\n\n  content\n\ncontentAsView = (content) ->\n  # We do not check content for validity.\n\n  if content instanceof Blaze.Template\n    content.constructView()\n  else if content instanceof Blaze.View\n    content\n  else\n    Blaze.View 'render', contentAsFunc content\n\nHTMLJSExpander = Blaze._HTMLJSExpander.extend()\nHTMLJSExpander.def\n  # Based on Blaze._HTMLJSExpander, but calls our expandView.\n  visitObject: (x) ->\n    if x instanceof Blaze.Template\n      x = x.constructView()\n    if x instanceof Blaze.View\n      return expandView x, @parentView\n\n    HTML.TransformingVisitor.prototype.visitObject.call @, x\n\n# Based on Blaze._expand, but uses our HTMLJSExpander.\nexpand = (htmljs, parentView) ->\n  parentView = parentView or currentViewIfRendering()\n\n  (new HTMLJSExpander parentView: parentView).visit htmljs\n\n# Based on Blaze._expandView, but with flushing.\nexpandView = (view, parentView) ->\n  Blaze._createView view, parentView, true\n\n  view._isInRender = true\n  htmljs = Blaze._withCurrentView view, ->\n    view._render()\n  view._isInRender = false\n\n  Tracker.flush()\n\n  result = expand htmljs, view\n\n  Tracker.flush()\n\n  if Tracker.active\n    Tracker.onInvalidate ->\n      Blaze._destroyView view\n  else\n    Blaze._destroyView view\n\n  Tracker.flush()\n\n  result\n\nclass BlazeComponent extends BaseComponent\n  # TODO: Figure out how to do at the BaseComponent level?\n  @getComponentForElement: (domElement) ->\n    return null unless domElement\n\n    # This uses the same check if the argument is a DOM element that Blaze._DOMRange.forElement does.\n    throw new Error \"Expected DOM element.\" unless domElement.nodeType is Node.ELEMENT_NODE\n\n    # For DOM elements we want to return the component which matches the template\n    # with that DOM element and not the component closest in the component tree.\n    # So we skip the block helpers. (If DOM element is rendered by the block helper\n    # this will find that block helper template/component.)\n    templateInstance = getTemplateInstanceFunction Blaze.getView(domElement), true\n    templateInstanceToComponent templateInstance, true\n\n  mixins: ->\n    []\n\n  # When a component is used as a mixin, createMixins will call this method to set the parent\n  # component using this mixin. Extend this method if you want to do any action when parent is\n  # set, for example, add dependency mixins to the parent. Make sure you call super as well.\n  mixinParent: (mixinParent) ->\n    @_componentInternals ?= {}\n\n    # Setter.\n    if mixinParent\n      @_componentInternals.mixinParent = mixinParent\n      # To allow chaining.\n      return @\n\n    # Getter.\n    @_componentInternals.mixinParent or null\n\n  requireMixin: (nameOrMixin) ->\n    assert @_componentInternals?.mixins\n\n    Tracker.nonreactive =>\n      # Do not do anything if mixin is already required. This allows multiple mixins to call requireMixin\n      # in mixinParent method to add dependencies, but if dependencies are already there, nothing happens.\n      return if @getMixin nameOrMixin\n\n      if _.isString nameOrMixin\n        # It could be that the component is not a real instance of the BlazeComponent class,\n        # so it might not have a constructor pointing back to a BlazeComponent subclass.\n        if @constructor.getComponent\n          mixinInstanceComponent = @constructor.getComponent nameOrMixin\n        else\n          mixinInstanceComponent = BlazeComponent.getComponent nameOrMixin\n        throw new Error \"Unknown mixin '#{nameOrMixin}'.\" unless mixinInstanceComponent\n        mixinInstance = new mixinInstanceComponent()\n      else if _.isFunction nameOrMixin\n        mixinInstance = new nameOrMixin()\n      else\n        mixinInstance = nameOrMixin\n\n      # We add mixin before we call mixinParent so that dependencies come after this mixin,\n      # and that we prevent possible infinite loops because of circular dependencies.\n      # TODO: For now we do not provide an official API to add dependencies before the mixin itself.\n      @_componentInternals.mixins.push mixinInstance\n\n      # We allow mixins to not be components, so methods are not necessary available.\n\n      # Set mixin parent.\n      if mixinInstance.mixinParent\n        mixinInstance.mixinParent @\n\n      # Maybe mixin has its own mixins as well.\n      mixinInstance.createMixins?()\n\n      @_componentInternals.templateInstance ?= new ReactiveField null, (a, b) -> a is b\n\n      # If a mixin is adding a dependency using requireMixin after its mixinParent class (for example, in onCreate)\n      # and this is this dependency mixin, the view might already be created or rendered and callbacks were\n      # already called, so we should call them manually here as well. But only if he view has not been destroyed\n      # already. For those mixins we do not call anything, there is little use for them now.\n      unless @_componentInternals.templateInstance()?.view.isDestroyed\n        mixinInstance.onCreated?() if not @_componentInternals.inOnCreated and @_componentInternals.templateInstance()?.view.isCreated\n        mixinInstance.onRendered?() if not @_componentInternals.inOnRendered and @_componentInternals.templateInstance()?.view.isRendered\n\n    # To allow chaining.\n    @\n\n  # Method to instantiate all mixins.\n  createMixins: ->\n    @_componentInternals ?= {}\n\n    # To allow calling it multiple times, but non-first calls are simply ignored.\n    return if @_componentInternals.mixins\n    @_componentInternals.mixins = []\n\n    for mixin in @mixins()\n      @requireMixin mixin\n\n    # To allow chaining.\n    @\n\n  getMixin: (nameOrMixin) ->\n    assert @_componentInternals?.mixins\n\n    if _.isString nameOrMixin\n      for mixin in @_componentInternals.mixins\n        # We do not require mixins to be components, but if they are, they can\n        # be referenced based on their component name.\n        mixinComponentName = mixin.componentName?() or null\n        return mixin if mixinComponentName and mixinComponentName is nameOrMixin\n\n    else\n      for mixin in @_componentInternals.mixins\n        # nameOrMixin is a class.\n        if mixin.constructor is nameOrMixin\n          return mixin\n\n        # nameOrMixin is an instance, or something else.\n        else if mixin is nameOrMixin\n          return mixin\n\n    null\n\n  # Calls the component (if afterComponentOrMixin is null) or the first next mixin\n  # after afterComponentOrMixin it finds, and returns the result.\n  callFirstWith: (afterComponentOrMixin, propertyName, args...) ->\n    mixin = @getFirstWith afterComponentOrMixin, propertyName\n\n    # TODO: Should we throw an error here? Something like calling a function which does not exist?\n    return unless mixin\n\n    if _.isFunction mixin[propertyName]\n      return mixin[propertyName] args...\n    else\n      return mixin[propertyName]\n\n  getFirstWith: (afterComponentOrMixin, propertyName) ->\n    assert @_componentInternals?.mixins\n\n    # If afterComponentOrMixin is not provided, we start with the component.\n    if not afterComponentOrMixin\n      return @ if propertyName of @\n      # And continue with mixins.\n      found = true\n    # If afterComponentOrMixin is the component, we start with mixins.\n    else if afterComponentOrMixin and afterComponentOrMixin is @\n      found = true\n    else\n      found = false\n\n    # TODO: Implement with a map between mixin -> position, so that we do not have to seek to find a mixin.\n    for mixin in @_componentInternals.mixins\n      return mixin if found and propertyName of mixin\n\n      found = true if mixin is afterComponentOrMixin\n\n    null\n\n  # This class method more or less just creates an instance of a component and calls its renderComponent\n  # method. But because we want to allow passing arguments to the component in templates, we have some\n  # complicated code around to extract and pass those arguments. It is similar to how data context is\n  # passed to block helpers. In a data context visible only to the block helper template.\n  # TODO: This could be made less hacky. See https://github.com/meteor/meteor/issues/3913\n  @renderComponent: (parentComponent) ->\n    Tracker.nonreactive =>\n      componentClass = @\n\n      if Blaze.currentView\n        # We check data context in a non-reactive way, because we want just to peek into it\n        # and determine if data context contains component arguments or not. And while\n        # component arguments might change through time, the fact that they are there at\n        # all or not (\"args\" template helper was used or not) does not change through time.\n        # So we can check that non-reactively.\n        data = Template.currentData()\n      else\n        # There is no current view when there is no data context yet, thus also no arguments\n        # were provided through \"args\" template helper, so we just continue normally.\n        data = null\n\n      if data?.constructor isnt argumentsConstructor\n        # So that currentComponent in the constructor can return the component\n        # inside which this component has been constructed.\n        return wrapViewAndTemplate Blaze.currentView, =>\n          component = new componentClass()\n\n          return component.renderComponent parentComponent\n\n      # Arguments were provided through \"args\" template helper.\n\n      # We want to reactively depend on the data context for arguments, so we return a function\n      # instead of a template. Function will be run inside an autorun, a reactive context.\n      ->\n        assert Tracker.active\n\n        # We cannot use Template.getData() inside a normal autorun because current view is not defined inside\n        # a normal autorun. But we do not really have to depend reactively on the current view, only on the\n        # data context of a known (the closest Blaze.With) view. So we get this view by ourselves.\n        currentWith = Blaze.getView 'with'\n\n        # By default dataVar in the Blaze.With view uses ReactiveVar with default equality function which\n        # sees all objects as different. So invalidations are triggered for every data context assignments\n        # even if data has not really changed. This is why wrap it into a ComputedField with EJSON.equals.\n        # Because it uses EJSON.equals it will invalidate our function only if really changes.\n        # See https://github.com/meteor/meteor/issues/4073\n        reactiveArguments = new ComputedField ->\n          data = currentWith.dataVar.get()\n          assert.equal data?.constructor, argumentsConstructor\n          data._arguments\n        ,\n          EJSON.equals\n\n        # Here we register a reactive dependency on the ComputedField.\n        nonreactiveArguments = reactiveArguments()\n\n        Tracker.nonreactive ->\n          # Arguments were passed in as a data context. We want currentData in the constructor to return the\n          # original (parent) data context. Like we were not passing in arguments as a data context.\n          template = Blaze._withCurrentView Blaze.currentView.parentView.parentView, =>\n            # So that currentComponent in the constructor can return the component\n            # inside which this component has been constructed.\n            return wrapViewAndTemplate Blaze.currentView, =>\n              # Use arguments for the constructor.\n              component = new componentClass nonreactiveArguments...\n\n              return component.renderComponent parentComponent\n\n          # It has to be the first callback so that other have a correct data context.\n          registerFirstCreatedHook template, ->\n            # Arguments were passed in as a data context. Restore original (parent) data\n            # context. Same logic as in Blaze._InOuterTemplateScope.\n            @view.originalParentView = @view.parentView\n            @view.parentView = @view.parentView.parentView.parentView\n\n          template\n\n  renderComponent: (parentComponent) ->\n    # To make sure we do not introduce any reactive dependency. This is a conscious design decision.\n    # Reactivity should be changing data context, but components should be more stable, only changing\n    # when structure change in rendered DOM. You can change the component you are including (or pass\n    # different arguments) reactively though.\n    Tracker.nonreactive =>\n      component = @\n\n      # If mixins have not yet been created.\n      component.createMixins()\n\n      templateBase = getTemplateBase component\n\n      # Create a new component template based on the Blaze template. We want our own template\n      # because the same Blaze template could be reused between multiple components.\n      # TODO: Should we cache these templates based on (componentName, templateBase) pair? We could use two levels of ES2015 Maps, componentName -> templateBase -> template. What about component arguments changing?\n      template = new Blaze.Template \"BlazeComponent.#{component.componentName() or 'unnamed'}\", templateBase.renderFunction\n\n      # We lookup preexisting template helpers in Blaze._getTemplateHelper, if the component does not have\n      # a property with the same name. Preexisting event handlers and life-cycle hooks are taken care of\n      # in the related methods in the base class.\n\n      component._componentInternals ?= {}\n      component._componentInternals.templateBase = templateBase\n\n      registerHooks template,\n        onCreated: ->\n          # @ is a template instance.\n\n          if parentComponent\n            # component.parentComponent is reactive, so we use Tracker.nonreactive just to make sure we do not leak any reactivity here.\n            Tracker.nonreactive =>\n              # TODO: Should we support that the same component can be rendered multiple times in parallel? How could we do that? For different component parents or only the same one?\n              assert not component.parentComponent()\n\n              # We set the parent only when the component is created, not just constructed.\n              component.parentComponent parentComponent\n              parentComponent.addChildComponent component\n\n          @view._onViewRendered =>\n            # Attach events the first time template instance renders.\n            return unless @view.renderCount is 1\n\n            # We first add event handlers from the component, then mixins.\n            componentOrMixin = null\n            while componentOrMixin = @component.getFirstWith componentOrMixin, 'events'\n              addEvents @view, componentOrMixin\n\n          @component = component\n\n          # TODO: Should we support that the same component can be rendered multiple times in parallel? How could we do that? For different component parents or only the same one?\n          assert not Tracker.nonreactive => @component._componentInternals.templateInstance?()\n\n          @component._componentInternals.templateInstance ?= new ReactiveField @, (a, b) -> a is b\n          @component._componentInternals.templateInstance @\n\n          @component._componentInternals.isCreated ?= new ReactiveField true\n          @component._componentInternals.isCreated true\n\n          # Maybe we are re-rendering the component. So let's initialize variables just to be sure.\n\n          @component._componentInternals.isRendered ?= new ReactiveField false\n          @component._componentInternals.isRendered false\n\n          @component._componentInternals.isDestroyed ?= new ReactiveField false\n          @component._componentInternals.isDestroyed false\n\n          try\n            # We have to know if we should call onCreated on the mixin inside the requireMixin or not. We want to call\n            # it only once. If it requireMixin is called from onCreated of another mixin, then it will be added at the\n            # end and we will get it here at the end. So we should not call onCreated inside requireMixin because then\n            # onCreated would be called twice.\n            @component._componentInternals.inOnCreated = true\n            componentOrMixin = null\n            while componentOrMixin = @component.getFirstWith componentOrMixin, 'onCreated'\n              componentOrMixin.onCreated()\n          finally\n            delete @component._componentInternals.inOnCreated\n\n        onRendered: ->\n          # @ is a template instance.\n\n          @component._componentInternals.isRendered ?= new ReactiveField true\n          @component._componentInternals.isRendered true\n\n          Tracker.nonreactive =>\n            assert.equal @component._componentInternals.isCreated(), true\n\n          try\n            # Same as for onCreated above.\n            @component._componentInternals.inOnRendered = true\n            componentOrMixin = null\n            while componentOrMixin = @component.getFirstWith componentOrMixin, 'onRendered'\n              componentOrMixin.onRendered()\n          finally\n            delete @component._componentInternals.inOnRendered\n\n        onDestroyed: ->\n          @autorun (computation) =>\n            # @ is a template instance.\n\n            # We wait for all children components to be destroyed first.\n            # See https://github.com/meteor/meteor/issues/4166\n            return if @component.childComponents().length\n            computation.stop()\n\n            Tracker.nonreactive =>\n              assert.equal @component._componentInternals.isCreated(), true\n\n              @component._componentInternals.isCreated false\n\n              @component._componentInternals.isRendered ?= new ReactiveField false\n              @component._componentInternals.isRendered false\n\n              @component._componentInternals.isDestroyed ?= new ReactiveField true\n              @component._componentInternals.isDestroyed true\n\n              componentOrMixin = null\n              while componentOrMixin = @component.getFirstWith componentOrMixin, 'onDestroyed'\n                componentOrMixin.onDestroyed()\n\n              if parentComponent\n                # The component has been destroyed, clear up the parent.\n                component.parentComponent null\n                parentComponent.removeChildComponent component\n\n              # Remove the reference so that it is clear that template instance is not available anymore.\n              @component._componentInternals.templateInstance null\n\n      template\n\n  removeComponent: ->\n    Blaze.remove @_componentInternals.templateInstance().view if @isRendered()\n\n  @renderComponentToHTML: (parentComponent, parentView, data) ->\n    component = Tracker.nonreactive =>\n      componentClass = @\n\n      parentView = parentView or currentViewIfRendering() or (parentComponent?.isRendered() and parentComponent._componentInternals.templateInstance().view) or null\n\n      wrapViewAndTemplate parentView, =>\n        new componentClass()\n\n    if arguments.length > 2\n      component.renderComponentToHTML parentComponent, parentView, data\n    else\n      component.renderComponentToHTML parentComponent, parentView\n\n  renderComponentToHTML: (parentComponent, parentView, data) ->\n    template = Tracker.nonreactive =>\n      parentView = parentView or currentViewIfRendering() or (parentComponent?.isRendered() and parentComponent._componentInternals.templateInstance().view) or null\n\n      wrapViewAndTemplate parentView, =>\n        @renderComponent parentComponent\n\n    if arguments.length > 2\n      expandedView = expandView Blaze._TemplateWith(data, contentAsFunc template), parentView\n    else\n      expandedView = expandView contentAsView(template), parentView\n\n    HTML.toHTML expandedView\n\n  template: ->\n    @callFirstWith(@, 'template') or @constructor.componentName()\n\n  onCreated: ->\n    callTemplateBaseHooks @, 'created'\n\n  onRendered: ->\n    callTemplateBaseHooks @, 'rendered'\n\n  onDestroyed: ->\n    callTemplateBaseHooks @, 'destroyed'\n\n  isCreated: ->\n    @_componentInternals ?= {}\n    @_componentInternals.isCreated ?= new ReactiveField false\n\n    @_componentInternals.isCreated()\n\n  isRendered: ->\n    @_componentInternals ?= {}\n    @_componentInternals.isRendered ?= new ReactiveField false\n\n    @_componentInternals.isRendered()\n\n  isDestroyed: ->\n    @_componentInternals ?= {}\n    @_componentInternals.isDestroyed ?= new ReactiveField false\n\n    @_componentInternals.isDestroyed()\n\n  insertDOMElement: (parent, node, before) ->\n    before ?= null\n    if parent and node and (node.parentNode isnt parent or node.nextSibling isnt before)\n      parent.insertBefore node, before\n\n    return\n\n  moveDOMElement: (parent, node, before) ->\n    before ?= null\n    if parent and node and (node.parentNode isnt parent or node.nextSibling isnt before)\n      parent.insertBefore node, before\n\n    return\n\n  removeDOMElement: (parent, node) ->\n    if parent and node and node.parentNode is parent\n      parent.removeChild node\n\n    return\n\n  events: ->\n    @_componentInternals ?= {}\n\n    # In mixins we do not have a template instance. There is also\n    # no reason for a template instance to extend a Blaze template.\n    return [] unless @_componentInternals.templateInstance\n\n    view = Tracker.nonreactive =>\n      @_componentInternals.templateInstance().view\n    # We skip block helpers to match Blaze behavior.\n    templateInstance = getTemplateInstanceFunction view, true\n\n    for events in @_componentInternals.templateBase.__eventMaps\n      eventMap = {}\n\n      for spec, handler of events\n        do (spec, handler) ->\n          eventMap[spec] = (args...) ->\n            # In template event handlers view and template instance are not based on the current target\n            # (like Blaze Components event handlers are) but it is based on the template-level view.\n            # In a way we are reverting here what addEvents does.\n            withTemplateInstanceFunc templateInstance, ->\n              Blaze._withCurrentView view, ->\n                handler.apply view, args\n\n      eventMap\n\n  # Component-level data context. Reactive. Use this to always get the\n  # top-level data context used to render the component. If path is\n  # provided, it returns only the value under that path, with reactivity\n  # limited to changes of that value only.\n  data: (path, equalsFunc) ->\n    @_componentInternals ?= {}\n    @_componentInternals.templateInstance ?= new ReactiveField null, (a, b) -> a is b\n\n    if view = @_componentInternals.templateInstance()?.view\n      if path?\n        return DataLookup.get =>\n          Blaze.getData view\n        ,\n          path, equalsFunc\n      else\n        return Blaze.getData view\n\n    undefined\n\n  # Caller-level data context. Reactive. Use this to get in event handlers the data\n  # context at the place where event originated (target context). In template helpers\n  # the data context where template helpers were called. In onCreated, onRendered,\n  # and onDestroyed, the same as @data(). Inside a template this is the same as this.\n  # If path is provided, it returns only the value under that path, with reactivity\n  # limited to changes of that value only. Moreover, if path is provided is also\n  # looks into the current lexical scope data.\n  @currentData: (path, equalsFunc) ->\n    return undefined unless Blaze.currentView\n\n    currentView = Blaze.currentView\n\n    if _.isString path\n      path = path.split '.'\n    else if not _.isArray path\n      return Blaze.getData currentView\n\n    DataLookup.get =>\n      if Blaze._lexicalBindingLookup and lexicalData = Blaze._lexicalBindingLookup currentView, path[0]\n        # We return custom data object so that we can reuse the same\n        # lookup logic for both lexical and the normal data context case.\n        result = {}\n        result[path[0]] = lexicalData\n        return result\n\n      Blaze.getData currentView\n    ,\n      path, equalsFunc\n\n  # Method should never be overridden. The implementation should always be exactly the same as class method implementation.\n  currentData: (path, equalsFunc) ->\n    @constructor.currentData path, equalsFunc\n\n  # Useful in templates to get a reference to the component.\n  component: ->\n    @\n\n  # Caller-level component. In most cases the same as @, but in event handlers\n  # it returns the component at the place where event originated (target component).\n  # Inside template content wrapped with a block helper component, it is the closest\n  # block helper component.\n  @currentComponent: ->\n    # We are not skipping block helpers because one of main reasons for @currentComponent()\n    # is that we can get hold of the block helper component instance.\n    templateInstance = getTemplateInstanceFunction Blaze.currentView, false\n    templateInstanceToComponent templateInstance, false\n\n  # Method should never be overridden. The implementation should always be exactly the same as class method implementation.\n  currentComponent: ->\n    @constructor.currentComponent()\n\n  firstNode: ->\n    return @_componentInternals.templateInstance().view._domrange.firstNode() if @isRendered()\n\n    undefined\n\n  lastNode: ->\n    return @_componentInternals.templateInstance().view._domrange.lastNode() if @isRendered()\n\n    undefined\n\n  # The same as it would be generated automatically, only that the runFunc gets bound to the component.\n  autorun: (runFunc) ->\n    templateInstance = Tracker.nonreactive =>\n      @_componentInternals?.templateInstance?()\n\n    throw new Error \"The component has to be created before calling 'autorun'.\" unless templateInstance\n\n    templateInstance.autorun _.bind runFunc, @\n\nSUPPORTS_REACTIVE_INSTANCE = [\n  'subscriptionsReady'\n]\n\nREQUIRE_RENDERED_INSTANCE = [\n  '$',\n  'find',\n  'findAll'\n]\n\n# We copy utility methods ($, findAll, subscribe, etc.) from the template instance prototype,\n# if a method with the same name does not exist already.\nfor methodName, method of (Blaze.TemplateInstance::) when methodName not of (BlazeComponent::)\n  do (methodName, method) ->\n    if methodName in SUPPORTS_REACTIVE_INSTANCE\n      BlazeComponent::[methodName] = (args...) ->\n        @_componentInternals ?= {}\n        @_componentInternals.templateInstance ?= new ReactiveField null, (a, b) -> a is b\n\n        if templateInstance = @_componentInternals.templateInstance()\n          return templateInstance[methodName] args...\n\n        undefined\n\n    else if methodName in REQUIRE_RENDERED_INSTANCE\n      BlazeComponent::[methodName] = (args...) ->\n        return @_componentInternals.templateInstance()[methodName] args... if @isRendered()\n\n        undefined\n\n    else\n      BlazeComponent::[methodName] = (args...) ->\n        templateInstance = Tracker.nonreactive =>\n          @_componentInternals?.templateInstance?()\n\n        throw new Error \"The component has to be created before calling '#{methodName}'.\" unless templateInstance\n\n        templateInstance[methodName] args...\n","class BlazeComponentDebug extends BaseComponentDebug\n  @startComponent: (component) ->\n    super\n\n    console.log component.data()\n\n  @startMarkedComponent: (component) ->\n    super\n\n    console.log component.data()\n\n  @dumpComponentSubtree: (rootComponentOrElement) ->\n    if 'nodeType' of rootComponentOrElement and rootComponentOrElement.nodeType is Node.ELEMENT_NODE\n      rootComponentOrElement = BlazeComponent.getComponentForElement rootComponentOrElement\n\n    super\n\n  @dumpComponentTree: (rootComponentOrElement) ->\n    if 'nodeType' of rootComponentOrElement and rootComponentOrElement.nodeType is Node.ELEMENT_NODE\n      rootComponentOrElement = BlazeComponent.getComponentForElement rootComponentOrElement\n\n    super\n\n  @dumpAllComponents: ->\n    allRootComponents = []\n\n    $('*').each (i, element) =>\n      component = BlazeComponent.getComponentForElement element\n      return unless component\n      rootComponent = @componentRoot component\n      allRootComponents.push rootComponent unless rootComponent in allRootComponents\n\n    for rootComponent in allRootComponents\n      @dumpComponentSubtree rootComponent\n\n    return\n","propagateUIHooks = (parent, node) ->\n  return if not parent._uihooks or node._uihooks\n\n  node._uihooks = _.extend {}, parent._uihooks, parentNode: node\n\n  return unless node.hasChildNodes()\n\n  for childNode in node.childNodes when childNode.nodeType is Node.ELEMENT_NODE\n    propagateUIHooks node, childNode\n\n  # To optimize.\n  return\n\noriginalInsertNodeWithHooks = Blaze._DOMRange._insertNodeWithHooks\nBlaze._DOMRange._insertNodeWithHooks = (node, parent, next) ->\n  propagateUIHooks parent, node\n  originalInsertNodeWithHooks node, parent, next\n\noriginalMoveNodeWithHooks = Blaze._DOMRange._moveNodeWithHooks\nBlaze._DOMRange._moveNodeWithHooks = (node, parent, next) ->\n  propagateUIHooks parent, node\n  originalMoveNodeWithHooks node, parent, next\n\ncreateUIHooks = (component, parentNode) ->\n  parentNode: parentNode\n\n  insertElement: (node, before) ->\n    component.insertDOMElement @parentNode, node, before\n\n  moveElement: (node, before) ->\n    component.moveDOMElement @parentNode, node, before\n\n  removeElement: (node) ->\n    component.removeDOMElement node.parentNode, node\n\noriginalDOMRangeAttach = Blaze._DOMRange::attach\nBlaze._DOMRange::attach = (parentElement, nextNode, _isMove, _isReplace) ->\n  if component = @view?._templateInstance?.component\n    for member in @members when member not instanceof Blaze._DOMRange\n      member._uihooks = createUIHooks component, member\n\n      continue unless member.hasChildNodes()\n\n      for childNode in member.childNodes when childNode.nodeType is Node.ELEMENT_NODE\n        propagateUIHooks member, childNode\n\n    oldUIHooks = parentElement._uihooks\n    try\n      parentElement._uihooks = createUIHooks component, parentElement\n      return originalDOMRangeAttach.apply @, arguments\n    finally\n      if oldUIHooks\n        parentElement._uihooks = oldUIHooks\n      else\n        delete parentElement._uihooks\n\n  originalDOMRangeAttach.apply @, arguments\n\nWHITESPACE_REGEX = /^\\s+$/\n\nEventHandler = Blaze._AttributeHandler.extend\n  update: (element, oldValue, value) ->\n    oldValue = [] unless oldValue\n    oldValue = [oldValue] unless _.isArray oldValue\n\n    value = [] unless value\n    value = [value] unless _.isArray value\n\n    assert _.every(oldValue, share.isEventHandler), oldValue\n    assert _.every(value, share.isEventHandler), value\n\n    $element = $(element)\n    eventName = @name.substr(2).toLowerCase()\n\n    $element.off eventName, fun for fun in oldValue\n    $element.on eventName, fun for fun in value\n\noriginalMakeAttributeHandler = Blaze._makeAttributeHandler\nBlaze._makeAttributeHandler = (elem, name, value) ->\n  if share.EVENT_HANDLER_REGEX.test name\n    new EventHandler name, value\n  else\n    originalMakeAttributeHandler elem, name, value\n\noriginalToText = Blaze._toText\nBlaze._toText = (htmljs, parentView, textMode) ->\n  # If it is an event handler function, we pass it as it is and do not try to convert it to text.\n  # Our EventHandler knows how to handle such attribute values - functions.\n  if share.isEventHandler htmljs\n    htmljs\n  else if _.isArray(htmljs) and _.some htmljs, share.isEventHandler\n    # Remove whitespace in onEvent=\"{{onEvent1}} {{onEvent2}}\".\n    _.filter htmljs, (fun) ->\n      return true if share.isEventHandler fun\n      return false if WHITESPACE_REGEX.test fun\n\n      # We do not support anything fancy besides whitespace.\n      throw new Error \"Invalid event handler: #{fun}\"\n  else\n    originalToText htmljs, parentView, textMode\n\noriginalExpandAttributes = Blaze._expandAttributes\nBlaze._expandAttributes = (attrs, parentView) ->\n  previousInExpandAttributes = share.inExpandAttributes\n  share.inExpandAttributes = true\n  try\n    originalExpandAttributes attrs, parentView\n  finally\n    share.inExpandAttributes = previousInExpandAttributes\n"]}}]