[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jamiecollinson_selectize-bootstrap/selectize/dist/js/standalone/selectize.js                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**                                                                                                                   // 1\n * sifter.js                                                                                                          // 2\n * Copyright (c) 2013 Brian Reavis & contributors                                                                     // 3\n *                                                                                                                    // 4\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this                               // 5\n * file except in compliance with the License. You may obtain a copy of the License at:                               // 6\n * http://www.apache.org/licenses/LICENSE-2.0                                                                         // 7\n *                                                                                                                    // 8\n * Unless required by applicable law or agreed to in writing, software distributed under                              // 9\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF                                // 10\n * ANY KIND, either express or implied. See the License for the specific language                                     // 11\n * governing permissions and limitations under the License.                                                           // 12\n *                                                                                                                    // 13\n * @author Brian Reavis <brian@thirdroute.com>                                                                        // 14\n */                                                                                                                   // 15\n                                                                                                                      // 16\n(function(root, factory) {                                                                                            // 17\n\tif (typeof define === 'function' && define.amd) {                                                                    // 18\n\t\tdefine('sifter', factory);                                                                                          // 19\n\t} else if (typeof exports === 'object') {                                                                            // 20\n\t\tmodule.exports = factory();                                                                                         // 21\n\t} else {                                                                                                             // 22\n\t\troot.Sifter = factory();                                                                                            // 23\n\t}                                                                                                                    // 24\n}(this, function() {                                                                                                  // 25\n                                                                                                                      // 26\n\t/**                                                                                                                  // 27\n\t * Textually searches arrays and hashes of objects                                                                   // 28\n\t * by property (or multiple properties). Designed                                                                    // 29\n\t * specifically for autocomplete.                                                                                    // 30\n\t *                                                                                                                   // 31\n\t * @constructor                                                                                                      // 32\n\t * @param {array|object} items                                                                                       // 33\n\t * @param {object} items                                                                                             // 34\n\t */                                                                                                                  // 35\n\tvar Sifter = function(items, settings) {                                                                             // 36\n\t\tthis.items = items;                                                                                                 // 37\n\t\tthis.settings = settings || {diacritics: true};                                                                     // 38\n\t};                                                                                                                   // 39\n                                                                                                                      // 40\n\t/**                                                                                                                  // 41\n\t * Splits a search string into an array of individual                                                                // 42\n\t * regexps to be used to match results.                                                                              // 43\n\t *                                                                                                                   // 44\n\t * @param {string} query                                                                                             // 45\n\t * @returns {array}                                                                                                  // 46\n\t */                                                                                                                  // 47\n\tSifter.prototype.tokenize = function(query) {                                                                        // 48\n\t\tquery = trim(String(query || '').toLowerCase());                                                                    // 49\n\t\tif (!query || !query.length) return [];                                                                             // 50\n                                                                                                                      // 51\n\t\tvar i, n, regex, letter;                                                                                            // 52\n\t\tvar tokens = [];                                                                                                    // 53\n\t\tvar words = query.split(/ +/);                                                                                      // 54\n                                                                                                                      // 55\n\t\tfor (i = 0, n = words.length; i < n; i++) {                                                                         // 56\n\t\t\tregex = escape_regex(words[i]);                                                                                    // 57\n\t\t\tif (this.settings.diacritics) {                                                                                    // 58\n\t\t\t\tfor (letter in DIACRITICS) {                                                                                      // 59\n\t\t\t\t\tif (DIACRITICS.hasOwnProperty(letter)) {                                                                         // 60\n\t\t\t\t\t\tregex = regex.replace(new RegExp(letter, 'g'), DIACRITICS[letter]);                                             // 61\n\t\t\t\t\t}                                                                                                                // 62\n\t\t\t\t}                                                                                                                 // 63\n\t\t\t}                                                                                                                  // 64\n\t\t\ttokens.push({                                                                                                      // 65\n\t\t\t\tstring : words[i],                                                                                                // 66\n\t\t\t\tregex  : new RegExp(regex, 'i')                                                                                   // 67\n\t\t\t});                                                                                                                // 68\n\t\t}                                                                                                                   // 69\n                                                                                                                      // 70\n\t\treturn tokens;                                                                                                      // 71\n\t};                                                                                                                   // 72\n                                                                                                                      // 73\n\t/**                                                                                                                  // 74\n\t * Iterates over arrays and hashes.                                                                                  // 75\n\t *                                                                                                                   // 76\n\t * ```                                                                                                               // 77\n\t * this.iterator(this.items, function(item, id) {                                                                    // 78\n\t *    // invoked for each item                                                                                       // 79\n\t * });                                                                                                               // 80\n\t * ```                                                                                                               // 81\n\t *                                                                                                                   // 82\n\t * @param {array|object} object                                                                                      // 83\n\t */                                                                                                                  // 84\n\tSifter.prototype.iterator = function(object, callback) {                                                             // 85\n\t\tvar iterator;                                                                                                       // 86\n\t\tif (is_array(object)) {                                                                                             // 87\n\t\t\titerator = Array.prototype.forEach || function(callback) {                                                         // 88\n\t\t\t\tfor (var i = 0, n = this.length; i < n; i++) {                                                                    // 89\n\t\t\t\t\tcallback(this[i], i, this);                                                                                      // 90\n\t\t\t\t}                                                                                                                 // 91\n\t\t\t};                                                                                                                 // 92\n\t\t} else {                                                                                                            // 93\n\t\t\titerator = function(callback) {                                                                                    // 94\n\t\t\t\tfor (var key in this) {                                                                                           // 95\n\t\t\t\t\tif (this.hasOwnProperty(key)) {                                                                                  // 96\n\t\t\t\t\t\tcallback(this[key], key, this);                                                                                 // 97\n\t\t\t\t\t}                                                                                                                // 98\n\t\t\t\t}                                                                                                                 // 99\n\t\t\t};                                                                                                                 // 100\n\t\t}                                                                                                                   // 101\n                                                                                                                      // 102\n\t\titerator.apply(object, [callback]);                                                                                 // 103\n\t};                                                                                                                   // 104\n                                                                                                                      // 105\n\t/**                                                                                                                  // 106\n\t * Returns a function to be used to score individual results.                                                        // 107\n\t *                                                                                                                   // 108\n\t * Good matches will have a higher score than poor matches.                                                          // 109\n\t * If an item is not a match, 0 will be returned by the function.                                                    // 110\n\t *                                                                                                                   // 111\n\t * @param {object|string} search                                                                                     // 112\n\t * @param {object} options (optional)                                                                                // 113\n\t * @returns {function}                                                                                               // 114\n\t */                                                                                                                  // 115\n\tSifter.prototype.getScoreFunction = function(search, options) {                                                      // 116\n\t\tvar self, fields, tokens, token_count;                                                                              // 117\n                                                                                                                      // 118\n\t\tself        = this;                                                                                                 // 119\n\t\tsearch      = self.prepareSearch(search, options);                                                                  // 120\n\t\ttokens      = search.tokens;                                                                                        // 121\n\t\tfields      = search.options.fields;                                                                                // 122\n\t\ttoken_count = tokens.length;                                                                                        // 123\n                                                                                                                      // 124\n\t\t/**                                                                                                                 // 125\n\t\t * Calculates how close of a match the                                                                              // 126\n\t\t * given value is against a search token.                                                                           // 127\n\t\t *                                                                                                                  // 128\n\t\t * @param {mixed} value                                                                                             // 129\n\t\t * @param {object} token                                                                                            // 130\n\t\t * @return {number}                                                                                                 // 131\n\t\t */                                                                                                                 // 132\n\t\tvar scoreValue = function(value, token) {                                                                           // 133\n\t\t\tvar score, pos;                                                                                                    // 134\n                                                                                                                      // 135\n\t\t\tif (!value) return 0;                                                                                              // 136\n\t\t\tvalue = String(value || '');                                                                                       // 137\n\t\t\tpos = value.search(token.regex);                                                                                   // 138\n\t\t\tif (pos === -1) return 0;                                                                                          // 139\n\t\t\tscore = token.string.length / value.length;                                                                        // 140\n\t\t\tif (pos === 0) score += 0.5;                                                                                       // 141\n\t\t\treturn score;                                                                                                      // 142\n\t\t};                                                                                                                  // 143\n                                                                                                                      // 144\n\t\t/**                                                                                                                 // 145\n\t\t * Calculates the score of an object                                                                                // 146\n\t\t * against the search query.                                                                                        // 147\n\t\t *                                                                                                                  // 148\n\t\t * @param {object} token                                                                                            // 149\n\t\t * @param {object} data                                                                                             // 150\n\t\t * @return {number}                                                                                                 // 151\n\t\t */                                                                                                                 // 152\n\t\tvar scoreObject = (function() {                                                                                     // 153\n\t\t\tvar field_count = fields.length;                                                                                   // 154\n\t\t\tif (!field_count) {                                                                                                // 155\n\t\t\t\treturn function() { return 0; };                                                                                  // 156\n\t\t\t}                                                                                                                  // 157\n\t\t\tif (field_count === 1) {                                                                                           // 158\n\t\t\t\treturn function(token, data) {                                                                                    // 159\n\t\t\t\t\treturn scoreValue(data[fields[0]], token);                                                                       // 160\n\t\t\t\t};                                                                                                                // 161\n\t\t\t}                                                                                                                  // 162\n\t\t\treturn function(token, data) {                                                                                     // 163\n\t\t\t\tfor (var i = 0, sum = 0; i < field_count; i++) {                                                                  // 164\n\t\t\t\t\tsum += scoreValue(data[fields[i]], token);                                                                       // 165\n\t\t\t\t}                                                                                                                 // 166\n\t\t\t\treturn sum / field_count;                                                                                         // 167\n\t\t\t};                                                                                                                 // 168\n\t\t})();                                                                                                               // 169\n                                                                                                                      // 170\n\t\tif (!token_count) {                                                                                                 // 171\n\t\t\treturn function() { return 0; };                                                                                   // 172\n\t\t}                                                                                                                   // 173\n\t\tif (token_count === 1) {                                                                                            // 174\n\t\t\treturn function(data) {                                                                                            // 175\n\t\t\t\treturn scoreObject(tokens[0], data);                                                                              // 176\n\t\t\t};                                                                                                                 // 177\n\t\t}                                                                                                                   // 178\n                                                                                                                      // 179\n\t\tif (search.options.conjunction === 'and') {                                                                         // 180\n\t\t\treturn function(data) {                                                                                            // 181\n\t\t\t\tvar score;                                                                                                        // 182\n\t\t\t\tfor (var i = 0, sum = 0; i < token_count; i++) {                                                                  // 183\n\t\t\t\t\tscore = scoreObject(tokens[i], data);                                                                            // 184\n\t\t\t\t\tif (score <= 0) return 0;                                                                                        // 185\n\t\t\t\t\tsum += score;                                                                                                    // 186\n\t\t\t\t}                                                                                                                 // 187\n\t\t\t\treturn sum / token_count;                                                                                         // 188\n\t\t\t};                                                                                                                 // 189\n\t\t} else {                                                                                                            // 190\n\t\t\treturn function(data) {                                                                                            // 191\n\t\t\t\tfor (var i = 0, sum = 0; i < token_count; i++) {                                                                  // 192\n\t\t\t\t\tsum += scoreObject(tokens[i], data);                                                                             // 193\n\t\t\t\t}                                                                                                                 // 194\n\t\t\t\treturn sum / token_count;                                                                                         // 195\n\t\t\t};                                                                                                                 // 196\n\t\t}                                                                                                                   // 197\n\t};                                                                                                                   // 198\n                                                                                                                      // 199\n\t/**                                                                                                                  // 200\n\t * Returns a function that can be used to compare two                                                                // 201\n\t * results, for sorting purposes. If no sorting should                                                               // 202\n\t * be performed, `null` will be returned.                                                                            // 203\n\t *                                                                                                                   // 204\n\t * @param {string|object} search                                                                                     // 205\n\t * @param {object} options                                                                                           // 206\n\t * @return function(a,b)                                                                                             // 207\n\t */                                                                                                                  // 208\n\tSifter.prototype.getSortFunction = function(search, options) {                                                       // 209\n\t\tvar i, n, self, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;              // 210\n                                                                                                                      // 211\n\t\tself   = this;                                                                                                      // 212\n\t\tsearch = self.prepareSearch(search, options);                                                                       // 213\n\t\tsort   = (!search.query && options.sort_empty) || options.sort;                                                     // 214\n                                                                                                                      // 215\n\t\t/**                                                                                                                 // 216\n\t\t * Fetches the specified sort field value                                                                           // 217\n\t\t * from a search result item.                                                                                       // 218\n\t\t *                                                                                                                  // 219\n\t\t * @param  {string} name                                                                                            // 220\n\t\t * @param  {object} result                                                                                          // 221\n\t\t * @return {mixed}                                                                                                  // 222\n\t\t */                                                                                                                 // 223\n\t\tget_field = function(name, result) {                                                                                // 224\n\t\t\tif (name === '$score') return result.score;                                                                        // 225\n\t\t\treturn self.items[result.id][name];                                                                                // 226\n\t\t};                                                                                                                  // 227\n                                                                                                                      // 228\n\t\t// parse options                                                                                                    // 229\n\t\tfields = [];                                                                                                        // 230\n\t\tif (sort) {                                                                                                         // 231\n\t\t\tfor (i = 0, n = sort.length; i < n; i++) {                                                                         // 232\n\t\t\t\tif (search.query || sort[i].field !== '$score') {                                                                 // 233\n\t\t\t\t\tfields.push(sort[i]);                                                                                            // 234\n\t\t\t\t}                                                                                                                 // 235\n\t\t\t}                                                                                                                  // 236\n\t\t}                                                                                                                   // 237\n                                                                                                                      // 238\n\t\t// the \"$score\" field is implied to be the primary                                                                  // 239\n\t\t// sort field, unless it's manually specified                                                                       // 240\n\t\tif (search.query) {                                                                                                 // 241\n\t\t\timplicit_score = true;                                                                                             // 242\n\t\t\tfor (i = 0, n = fields.length; i < n; i++) {                                                                       // 243\n\t\t\t\tif (fields[i].field === '$score') {                                                                               // 244\n\t\t\t\t\timplicit_score = false;                                                                                          // 245\n\t\t\t\t\tbreak;                                                                                                           // 246\n\t\t\t\t}                                                                                                                 // 247\n\t\t\t}                                                                                                                  // 248\n\t\t\tif (implicit_score) {                                                                                              // 249\n\t\t\t\tfields.unshift({field: '$score', direction: 'desc'});                                                             // 250\n\t\t\t}                                                                                                                  // 251\n\t\t} else {                                                                                                            // 252\n\t\t\tfor (i = 0, n = fields.length; i < n; i++) {                                                                       // 253\n\t\t\t\tif (fields[i].field === '$score') {                                                                               // 254\n\t\t\t\t\tfields.splice(i, 1);                                                                                             // 255\n\t\t\t\t\tbreak;                                                                                                           // 256\n\t\t\t\t}                                                                                                                 // 257\n\t\t\t}                                                                                                                  // 258\n\t\t}                                                                                                                   // 259\n                                                                                                                      // 260\n\t\tmultipliers = [];                                                                                                   // 261\n\t\tfor (i = 0, n = fields.length; i < n; i++) {                                                                        // 262\n\t\t\tmultipliers.push(fields[i].direction === 'desc' ? -1 : 1);                                                         // 263\n\t\t}                                                                                                                   // 264\n                                                                                                                      // 265\n\t\t// build function                                                                                                   // 266\n\t\tfields_count = fields.length;                                                                                       // 267\n\t\tif (!fields_count) {                                                                                                // 268\n\t\t\treturn null;                                                                                                       // 269\n\t\t} else if (fields_count === 1) {                                                                                    // 270\n\t\t\tfield = fields[0].field;                                                                                           // 271\n\t\t\tmultiplier = multipliers[0];                                                                                       // 272\n\t\t\treturn function(a, b) {                                                                                            // 273\n\t\t\t\treturn multiplier * cmp(                                                                                          // 274\n\t\t\t\t\tget_field(field, a),                                                                                             // 275\n\t\t\t\t\tget_field(field, b)                                                                                              // 276\n\t\t\t\t);                                                                                                                // 277\n\t\t\t};                                                                                                                 // 278\n\t\t} else {                                                                                                            // 279\n\t\t\treturn function(a, b) {                                                                                            // 280\n\t\t\t\tvar i, result, a_value, b_value, field;                                                                           // 281\n\t\t\t\tfor (i = 0; i < fields_count; i++) {                                                                              // 282\n\t\t\t\t\tfield = fields[i].field;                                                                                         // 283\n\t\t\t\t\tresult = multipliers[i] * cmp(                                                                                   // 284\n\t\t\t\t\t\tget_field(field, a),                                                                                            // 285\n\t\t\t\t\t\tget_field(field, b)                                                                                             // 286\n\t\t\t\t\t);                                                                                                               // 287\n\t\t\t\t\tif (result) return result;                                                                                       // 288\n\t\t\t\t}                                                                                                                 // 289\n\t\t\t\treturn 0;                                                                                                         // 290\n\t\t\t};                                                                                                                 // 291\n\t\t}                                                                                                                   // 292\n\t};                                                                                                                   // 293\n                                                                                                                      // 294\n\t/**                                                                                                                  // 295\n\t * Parses a search query and returns an object                                                                       // 296\n\t * with tokens and fields ready to be populated                                                                      // 297\n\t * with results.                                                                                                     // 298\n\t *                                                                                                                   // 299\n\t * @param {string} query                                                                                             // 300\n\t * @param {object} options                                                                                           // 301\n\t * @returns {object}                                                                                                 // 302\n\t */                                                                                                                  // 303\n\tSifter.prototype.prepareSearch = function(query, options) {                                                          // 304\n\t\tif (typeof query === 'object') return query;                                                                        // 305\n                                                                                                                      // 306\n\t\toptions = extend({}, options);                                                                                      // 307\n                                                                                                                      // 308\n\t\tvar option_fields     = options.fields;                                                                             // 309\n\t\tvar option_sort       = options.sort;                                                                               // 310\n\t\tvar option_sort_empty = options.sort_empty;                                                                         // 311\n                                                                                                                      // 312\n\t\tif (option_fields && !is_array(option_fields)) options.fields = [option_fields];                                    // 313\n\t\tif (option_sort && !is_array(option_sort)) options.sort = [option_sort];                                            // 314\n\t\tif (option_sort_empty && !is_array(option_sort_empty)) options.sort_empty = [option_sort_empty];                    // 315\n                                                                                                                      // 316\n\t\treturn {                                                                                                            // 317\n\t\t\toptions : options,                                                                                                 // 318\n\t\t\tquery   : String(query || '').toLowerCase(),                                                                       // 319\n\t\t\ttokens  : this.tokenize(query),                                                                                    // 320\n\t\t\ttotal   : 0,                                                                                                       // 321\n\t\t\titems   : []                                                                                                       // 322\n\t\t};                                                                                                                  // 323\n\t};                                                                                                                   // 324\n                                                                                                                      // 325\n\t/**                                                                                                                  // 326\n\t * Searches through all items and returns a sorted array of matches.                                                 // 327\n\t *                                                                                                                   // 328\n\t * The `options` parameter can contain:                                                                              // 329\n\t *                                                                                                                   // 330\n\t *   - fields {string|array}                                                                                         // 331\n\t *   - sort {array}                                                                                                  // 332\n\t *   - score {function}                                                                                              // 333\n\t *   - filter {bool}                                                                                                 // 334\n\t *   - limit {integer}                                                                                               // 335\n\t *                                                                                                                   // 336\n\t * Returns an object containing:                                                                                     // 337\n\t *                                                                                                                   // 338\n\t *   - options {object}                                                                                              // 339\n\t *   - query {string}                                                                                                // 340\n\t *   - tokens {array}                                                                                                // 341\n\t *   - total {int}                                                                                                   // 342\n\t *   - items {array}                                                                                                 // 343\n\t *                                                                                                                   // 344\n\t * @param {string} query                                                                                             // 345\n\t * @param {object} options                                                                                           // 346\n\t * @returns {object}                                                                                                 // 347\n\t */                                                                                                                  // 348\n\tSifter.prototype.search = function(query, options) {                                                                 // 349\n\t\tvar self = this, value, score, search, calculateScore;                                                              // 350\n\t\tvar fn_sort;                                                                                                        // 351\n\t\tvar fn_score;                                                                                                       // 352\n                                                                                                                      // 353\n\t\tsearch  = this.prepareSearch(query, options);                                                                       // 354\n\t\toptions = search.options;                                                                                           // 355\n\t\tquery   = search.query;                                                                                             // 356\n                                                                                                                      // 357\n\t\t// generate result scoring function                                                                                 // 358\n\t\tfn_score = options.score || self.getScoreFunction(search);                                                          // 359\n                                                                                                                      // 360\n\t\t// perform search and sort                                                                                          // 361\n\t\tif (query.length) {                                                                                                 // 362\n\t\t\tself.iterator(self.items, function(item, id) {                                                                     // 363\n\t\t\t\tscore = fn_score(item);                                                                                           // 364\n\t\t\t\tif (options.filter === false || score > 0) {                                                                      // 365\n\t\t\t\t\tsearch.items.push({'score': score, 'id': id});                                                                   // 366\n\t\t\t\t}                                                                                                                 // 367\n\t\t\t});                                                                                                                // 368\n\t\t} else {                                                                                                            // 369\n\t\t\tself.iterator(self.items, function(item, id) {                                                                     // 370\n\t\t\t\tsearch.items.push({'score': 1, 'id': id});                                                                        // 371\n\t\t\t});                                                                                                                // 372\n\t\t}                                                                                                                   // 373\n                                                                                                                      // 374\n\t\tfn_sort = self.getSortFunction(search, options);                                                                    // 375\n\t\tif (fn_sort) search.items.sort(fn_sort);                                                                            // 376\n                                                                                                                      // 377\n\t\t// apply limits                                                                                                     // 378\n\t\tsearch.total = search.items.length;                                                                                 // 379\n\t\tif (typeof options.limit === 'number') {                                                                            // 380\n\t\t\tsearch.items = search.items.slice(0, options.limit);                                                               // 381\n\t\t}                                                                                                                   // 382\n                                                                                                                      // 383\n\t\treturn search;                                                                                                      // 384\n\t};                                                                                                                   // 385\n                                                                                                                      // 386\n\t// utilities                                                                                                         // 387\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -                                   // 388\n                                                                                                                      // 389\n\tvar cmp = function(a, b) {                                                                                           // 390\n\t\tif (typeof a === 'number' && typeof b === 'number') {                                                               // 391\n\t\t\treturn a > b ? 1 : (a < b ? -1 : 0);                                                                               // 392\n\t\t}                                                                                                                   // 393\n\t\ta = asciifold(String(a || ''));                                                                                     // 394\n\t\tb = asciifold(String(b || ''));                                                                                     // 395\n\t\tif (a > b) return 1;                                                                                                // 396\n\t\tif (b > a) return -1;                                                                                               // 397\n\t\treturn 0;                                                                                                           // 398\n\t};                                                                                                                   // 399\n                                                                                                                      // 400\n\tvar extend = function(a, b) {                                                                                        // 401\n\t\tvar i, n, k, object;                                                                                                // 402\n\t\tfor (i = 1, n = arguments.length; i < n; i++) {                                                                     // 403\n\t\t\tobject = arguments[i];                                                                                             // 404\n\t\t\tif (!object) continue;                                                                                             // 405\n\t\t\tfor (k in object) {                                                                                                // 406\n\t\t\t\tif (object.hasOwnProperty(k)) {                                                                                   // 407\n\t\t\t\t\ta[k] = object[k];                                                                                                // 408\n\t\t\t\t}                                                                                                                 // 409\n\t\t\t}                                                                                                                  // 410\n\t\t}                                                                                                                   // 411\n\t\treturn a;                                                                                                           // 412\n\t};                                                                                                                   // 413\n                                                                                                                      // 414\n\tvar trim = function(str) {                                                                                           // 415\n\t\treturn (str + '').replace(/^\\s+|\\s+$|/g, '');                                                                       // 416\n\t};                                                                                                                   // 417\n                                                                                                                      // 418\n\tvar escape_regex = function(str) {                                                                                   // 419\n\t\treturn (str + '').replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');                                                        // 420\n\t};                                                                                                                   // 421\n                                                                                                                      // 422\n\tvar is_array = Array.isArray || ($ && $.isArray) || function(object) {                                               // 423\n\t\treturn Object.prototype.toString.call(object) === '[object Array]';                                                 // 424\n\t};                                                                                                                   // 425\n                                                                                                                      // 426\n\tvar DIACRITICS = {                                                                                                   // 427\n\t\t'a': '[aÀÁÂÃÄÅàáâãäåĀāąĄ]',                                                                                         // 428\n\t\t'c': '[cÇçćĆčČ]',                                                                                                   // 429\n\t\t'd': '[dđĐďĎ]',                                                                                                     // 430\n\t\t'e': '[eÈÉÊËèéêëěĚĒēęĘ]',                                                                                           // 431\n\t\t'i': '[iÌÍÎÏìíîïĪī]',                                                                                               // 432\n\t\t'l': '[lłŁ]',                                                                                                       // 433\n\t\t'n': '[nÑñňŇńŃ]',                                                                                                   // 434\n\t\t'o': '[oÒÓÔÕÕÖØòóôõöøŌō]',                                                                                          // 435\n\t\t'r': '[rřŘ]',                                                                                                       // 436\n\t\t's': '[sŠšśŚ]',                                                                                                     // 437\n\t\t't': '[tťŤ]',                                                                                                       // 438\n\t\t'u': '[uÙÚÛÜùúûüůŮŪū]',                                                                                             // 439\n\t\t'y': '[yŸÿýÝ]',                                                                                                     // 440\n\t\t'z': '[zŽžżŻźŹ]'                                                                                                    // 441\n\t};                                                                                                                   // 442\n                                                                                                                      // 443\n\tvar asciifold = (function() {                                                                                        // 444\n\t\tvar i, n, k, chunk;                                                                                                 // 445\n\t\tvar foreignletters = '';                                                                                            // 446\n\t\tvar lookup = {};                                                                                                    // 447\n\t\tfor (k in DIACRITICS) {                                                                                             // 448\n\t\t\tif (DIACRITICS.hasOwnProperty(k)) {                                                                                // 449\n\t\t\t\tchunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);                                                     // 450\n\t\t\t\tforeignletters += chunk;                                                                                          // 451\n\t\t\t\tfor (i = 0, n = chunk.length; i < n; i++) {                                                                       // 452\n\t\t\t\t\tlookup[chunk.charAt(i)] = k;                                                                                     // 453\n\t\t\t\t}                                                                                                                 // 454\n\t\t\t}                                                                                                                  // 455\n\t\t}                                                                                                                   // 456\n\t\tvar regexp = new RegExp('[' +  foreignletters + ']', 'g');                                                          // 457\n\t\treturn function(str) {                                                                                              // 458\n\t\t\treturn str.replace(regexp, function(foreignletter) {                                                               // 459\n\t\t\t\treturn lookup[foreignletter];                                                                                     // 460\n\t\t\t}).toLowerCase();                                                                                                  // 461\n\t\t};                                                                                                                  // 462\n\t})();                                                                                                                // 463\n                                                                                                                      // 464\n                                                                                                                      // 465\n\t// export                                                                                                            // 466\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -                                   // 467\n                                                                                                                      // 468\n\treturn Sifter;                                                                                                       // 469\n}));                                                                                                                  // 470\n                                                                                                                      // 471\n                                                                                                                      // 472\n                                                                                                                      // 473\n/**                                                                                                                   // 474\n * microplugin.js                                                                                                     // 475\n * Copyright (c) 2013 Brian Reavis & contributors                                                                     // 476\n *                                                                                                                    // 477\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this                               // 478\n * file except in compliance with the License. You may obtain a copy of the License at:                               // 479\n * http://www.apache.org/licenses/LICENSE-2.0                                                                         // 480\n *                                                                                                                    // 481\n * Unless required by applicable law or agreed to in writing, software distributed under                              // 482\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF                                // 483\n * ANY KIND, either express or implied. See the License for the specific language                                     // 484\n * governing permissions and limitations under the License.                                                           // 485\n *                                                                                                                    // 486\n * @author Brian Reavis <brian@thirdroute.com>                                                                        // 487\n */                                                                                                                   // 488\n                                                                                                                      // 489\n(function(root, factory) {                                                                                            // 490\n\tif (typeof define === 'function' && define.amd) {                                                                    // 491\n\t\tdefine('microplugin', factory);                                                                                     // 492\n\t} else if (typeof exports === 'object') {                                                                            // 493\n\t\tmodule.exports = factory();                                                                                         // 494\n\t} else {                                                                                                             // 495\n\t\troot.MicroPlugin = factory();                                                                                       // 496\n\t}                                                                                                                    // 497\n}(this, function() {                                                                                                  // 498\n\tvar MicroPlugin = {};                                                                                                // 499\n                                                                                                                      // 500\n\tMicroPlugin.mixin = function(Interface) {                                                                            // 501\n\t\tInterface.plugins = {};                                                                                             // 502\n                                                                                                                      // 503\n\t\t/**                                                                                                                 // 504\n\t\t * Initializes the listed plugins (with options).                                                                   // 505\n\t\t * Acceptable formats:                                                                                              // 506\n\t\t *                                                                                                                  // 507\n\t\t * List (without options):                                                                                          // 508\n\t\t *   ['a', 'b', 'c']                                                                                                // 509\n\t\t *                                                                                                                  // 510\n\t\t * List (with options):                                                                                             // 511\n\t\t *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]                                                       // 512\n\t\t *                                                                                                                  // 513\n\t\t * Hash (with options):                                                                                             // 514\n\t\t *   {'a': { ... }, 'b': { ... }, 'c': { ... }}                                                                     // 515\n\t\t *                                                                                                                  // 516\n\t\t * @param {mixed} plugins                                                                                           // 517\n\t\t */                                                                                                                 // 518\n\t\tInterface.prototype.initializePlugins = function(plugins) {                                                         // 519\n\t\t\tvar i, n, key;                                                                                                     // 520\n\t\t\tvar self  = this;                                                                                                  // 521\n\t\t\tvar queue = [];                                                                                                    // 522\n                                                                                                                      // 523\n\t\t\tself.plugins = {                                                                                                   // 524\n\t\t\t\tnames     : [],                                                                                                   // 525\n\t\t\t\tsettings  : {},                                                                                                   // 526\n\t\t\t\trequested : {},                                                                                                   // 527\n\t\t\t\tloaded    : {}                                                                                                    // 528\n\t\t\t};                                                                                                                 // 529\n                                                                                                                      // 530\n\t\t\tif (utils.isArray(plugins)) {                                                                                      // 531\n\t\t\t\tfor (i = 0, n = plugins.length; i < n; i++) {                                                                     // 532\n\t\t\t\t\tif (typeof plugins[i] === 'string') {                                                                            // 533\n\t\t\t\t\t\tqueue.push(plugins[i]);                                                                                         // 534\n\t\t\t\t\t} else {                                                                                                         // 535\n\t\t\t\t\t\tself.plugins.settings[plugins[i].name] = plugins[i].options;                                                    // 536\n\t\t\t\t\t\tqueue.push(plugins[i].name);                                                                                    // 537\n\t\t\t\t\t}                                                                                                                // 538\n\t\t\t\t}                                                                                                                 // 539\n\t\t\t} else if (plugins) {                                                                                              // 540\n\t\t\t\tfor (key in plugins) {                                                                                            // 541\n\t\t\t\t\tif (plugins.hasOwnProperty(key)) {                                                                               // 542\n\t\t\t\t\t\tself.plugins.settings[key] = plugins[key];                                                                      // 543\n\t\t\t\t\t\tqueue.push(key);                                                                                                // 544\n\t\t\t\t\t}                                                                                                                // 545\n\t\t\t\t}                                                                                                                 // 546\n\t\t\t}                                                                                                                  // 547\n                                                                                                                      // 548\n\t\t\twhile (queue.length) {                                                                                             // 549\n\t\t\t\tself.require(queue.shift());                                                                                      // 550\n\t\t\t}                                                                                                                  // 551\n\t\t};                                                                                                                  // 552\n                                                                                                                      // 553\n\t\tInterface.prototype.loadPlugin = function(name) {                                                                   // 554\n\t\t\tvar self    = this;                                                                                                // 555\n\t\t\tvar plugins = self.plugins;                                                                                        // 556\n\t\t\tvar plugin  = Interface.plugins[name];                                                                             // 557\n                                                                                                                      // 558\n\t\t\tif (!Interface.plugins.hasOwnProperty(name)) {                                                                     // 559\n\t\t\t\tthrow new Error('Unable to find \"' +  name + '\" plugin');                                                         // 560\n\t\t\t}                                                                                                                  // 561\n                                                                                                                      // 562\n\t\t\tplugins.requested[name] = true;                                                                                    // 563\n\t\t\tplugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);                                 // 564\n\t\t\tplugins.names.push(name);                                                                                          // 565\n\t\t};                                                                                                                  // 566\n                                                                                                                      // 567\n\t\t/**                                                                                                                 // 568\n\t\t * Initializes a plugin.                                                                                            // 569\n\t\t *                                                                                                                  // 570\n\t\t * @param {string} name                                                                                             // 571\n\t\t */                                                                                                                 // 572\n\t\tInterface.prototype.require = function(name) {                                                                      // 573\n\t\t\tvar self = this;                                                                                                   // 574\n\t\t\tvar plugins = self.plugins;                                                                                        // 575\n                                                                                                                      // 576\n\t\t\tif (!self.plugins.loaded.hasOwnProperty(name)) {                                                                   // 577\n\t\t\t\tif (plugins.requested[name]) {                                                                                    // 578\n\t\t\t\t\tthrow new Error('Plugin has circular dependency (\"' + name + '\")');                                              // 579\n\t\t\t\t}                                                                                                                 // 580\n\t\t\t\tself.loadPlugin(name);                                                                                            // 581\n\t\t\t}                                                                                                                  // 582\n                                                                                                                      // 583\n\t\t\treturn plugins.loaded[name];                                                                                       // 584\n\t\t};                                                                                                                  // 585\n                                                                                                                      // 586\n\t\t/**                                                                                                                 // 587\n\t\t * Registers a plugin.                                                                                              // 588\n\t\t *                                                                                                                  // 589\n\t\t * @param {string} name                                                                                             // 590\n\t\t * @param {function} fn                                                                                             // 591\n\t\t */                                                                                                                 // 592\n\t\tInterface.define = function(name, fn) {                                                                             // 593\n\t\t\tInterface.plugins[name] = {                                                                                        // 594\n\t\t\t\t'name' : name,                                                                                                    // 595\n\t\t\t\t'fn'   : fn                                                                                                       // 596\n\t\t\t};                                                                                                                 // 597\n\t\t};                                                                                                                  // 598\n\t};                                                                                                                   // 599\n                                                                                                                      // 600\n\tvar utils = {                                                                                                        // 601\n\t\tisArray: Array.isArray || function(vArg) {                                                                          // 602\n\t\t\treturn Object.prototype.toString.call(vArg) === '[object Array]';                                                  // 603\n\t\t}                                                                                                                   // 604\n\t};                                                                                                                   // 605\n                                                                                                                      // 606\n\treturn MicroPlugin;                                                                                                  // 607\n}));                                                                                                                  // 608\n                                                                                                                      // 609\n/**                                                                                                                   // 610\n * selectize.js (v0.12.1)                                                                                             // 611\n * Copyright (c) 2013–2015 Brian Reavis & contributors                                                                // 612\n *                                                                                                                    // 613\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this                               // 614\n * file except in compliance with the License. You may obtain a copy of the License at:                               // 615\n * http://www.apache.org/licenses/LICENSE-2.0                                                                         // 616\n *                                                                                                                    // 617\n * Unless required by applicable law or agreed to in writing, software distributed under                              // 618\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF                                // 619\n * ANY KIND, either express or implied. See the License for the specific language                                     // 620\n * governing permissions and limitations under the License.                                                           // 621\n *                                                                                                                    // 622\n * @author Brian Reavis <brian@thirdroute.com>                                                                        // 623\n */                                                                                                                   // 624\n                                                                                                                      // 625\n/*jshint curly:false */                                                                                               // 626\n/*jshint browser:true */                                                                                              // 627\n                                                                                                                      // 628\n(function(root, factory) {                                                                                            // 629\n\tif (typeof define === 'function' && define.amd) {                                                                    // 630\n\t\tdefine('selectize', ['jquery','sifter','microplugin'], factory);                                                    // 631\n\t} else if (typeof exports === 'object') {                                                                            // 632\n\t\tmodule.exports = factory(require('jquery'), require('sifter'), require('microplugin'));                             // 633\n\t} else {                                                                                                             // 634\n\t\troot.Selectize = factory(root.jQuery, root.Sifter, root.MicroPlugin);                                               // 635\n\t}                                                                                                                    // 636\n}(this, function($, Sifter, MicroPlugin) {                                                                            // 637\n\t'use strict';                                                                                                        // 638\n                                                                                                                      // 639\n\tvar highlight = function($element, pattern) {                                                                        // 640\n\t\tif (typeof pattern === 'string' && !pattern.length) return;                                                         // 641\n\t\tvar regex = (typeof pattern === 'string') ? new RegExp(pattern, 'i') : pattern;                                     // 642\n\t                                                                                                                     // 643\n\t\tvar highlight = function(node) {                                                                                    // 644\n\t\t\tvar skip = 0;                                                                                                      // 645\n\t\t\tif (node.nodeType === 3) {                                                                                         // 646\n\t\t\t\tvar pos = node.data.search(regex);                                                                                // 647\n\t\t\t\tif (pos >= 0 && node.data.length > 0) {                                                                           // 648\n\t\t\t\t\tvar match = node.data.match(regex);                                                                              // 649\n\t\t\t\t\tvar spannode = document.createElement('span');                                                                   // 650\n\t\t\t\t\tspannode.className = 'highlight';                                                                                // 651\n\t\t\t\t\tvar middlebit = node.splitText(pos);                                                                             // 652\n\t\t\t\t\tvar endbit = middlebit.splitText(match[0].length);                                                               // 653\n\t\t\t\t\tvar middleclone = middlebit.cloneNode(true);                                                                     // 654\n\t\t\t\t\tspannode.appendChild(middleclone);                                                                               // 655\n\t\t\t\t\tmiddlebit.parentNode.replaceChild(spannode, middlebit);                                                          // 656\n\t\t\t\t\tskip = 1;                                                                                                        // 657\n\t\t\t\t}                                                                                                                 // 658\n\t\t\t} else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {                      // 659\n\t\t\t\tfor (var i = 0; i < node.childNodes.length; ++i) {                                                                // 660\n\t\t\t\t\ti += highlight(node.childNodes[i]);                                                                              // 661\n\t\t\t\t}                                                                                                                 // 662\n\t\t\t}                                                                                                                  // 663\n\t\t\treturn skip;                                                                                                       // 664\n\t\t};                                                                                                                  // 665\n\t                                                                                                                     // 666\n\t\treturn $element.each(function() {                                                                                   // 667\n\t\t\thighlight(this);                                                                                                   // 668\n\t\t});                                                                                                                 // 669\n\t};                                                                                                                   // 670\n\t                                                                                                                     // 671\n\tvar MicroEvent = function() {};                                                                                      // 672\n\tMicroEvent.prototype = {                                                                                             // 673\n\t\ton: function(event, fct){                                                                                           // 674\n\t\t\tthis._events = this._events || {};                                                                                 // 675\n\t\t\tthis._events[event] = this._events[event] || [];                                                                   // 676\n\t\t\tthis._events[event].push(fct);                                                                                     // 677\n\t\t},                                                                                                                  // 678\n\t\toff: function(event, fct){                                                                                          // 679\n\t\t\tvar n = arguments.length;                                                                                          // 680\n\t\t\tif (n === 0) return delete this._events;                                                                           // 681\n\t\t\tif (n === 1) return delete this._events[event];                                                                    // 682\n\t                                                                                                                     // 683\n\t\t\tthis._events = this._events || {};                                                                                 // 684\n\t\t\tif (event in this._events === false) return;                                                                       // 685\n\t\t\tthis._events[event].splice(this._events[event].indexOf(fct), 1);                                                   // 686\n\t\t},                                                                                                                  // 687\n\t\ttrigger: function(event /* , args... */){                                                                           // 688\n\t\t\tthis._events = this._events || {};                                                                                 // 689\n\t\t\tif (event in this._events === false) return;                                                                       // 690\n\t\t\tfor (var i = 0; i < this._events[event].length; i++){                                                              // 691\n\t\t\t\tthis._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));                                     // 692\n\t\t\t}                                                                                                                  // 693\n\t\t}                                                                                                                   // 694\n\t};                                                                                                                   // 695\n\t                                                                                                                     // 696\n\t/**                                                                                                                  // 697\n\t * Mixin will delegate all MicroEvent.js function in the destination object.                                         // 698\n\t *                                                                                                                   // 699\n\t * - MicroEvent.mixin(Foobar) will make Foobar able to use MicroEvent                                                // 700\n\t *                                                                                                                   // 701\n\t * @param {object} the object which will support MicroEvent                                                          // 702\n\t */                                                                                                                  // 703\n\tMicroEvent.mixin = function(destObject){                                                                             // 704\n\t\tvar props = ['on', 'off', 'trigger'];                                                                               // 705\n\t\tfor (var i = 0; i < props.length; i++){                                                                             // 706\n\t\t\tdestObject.prototype[props[i]] = MicroEvent.prototype[props[i]];                                                   // 707\n\t\t}                                                                                                                   // 708\n\t};                                                                                                                   // 709\n\t                                                                                                                     // 710\n\tvar IS_MAC        = /Mac/.test(navigator.userAgent);                                                                 // 711\n\t                                                                                                                     // 712\n\tvar KEY_A         = 65;                                                                                              // 713\n\tvar KEY_COMMA     = 188;                                                                                             // 714\n\tvar KEY_RETURN    = 13;                                                                                              // 715\n\tvar KEY_ESC       = 27;                                                                                              // 716\n\tvar KEY_LEFT      = 37;                                                                                              // 717\n\tvar KEY_UP        = 38;                                                                                              // 718\n\tvar KEY_P         = 80;                                                                                              // 719\n\tvar KEY_RIGHT     = 39;                                                                                              // 720\n\tvar KEY_DOWN      = 40;                                                                                              // 721\n\tvar KEY_N         = 78;                                                                                              // 722\n\tvar KEY_BACKSPACE = 8;                                                                                               // 723\n\tvar KEY_DELETE    = 46;                                                                                              // 724\n\tvar KEY_SHIFT     = 16;                                                                                              // 725\n\tvar KEY_CMD       = IS_MAC ? 91 : 17;                                                                                // 726\n\tvar KEY_CTRL      = IS_MAC ? 18 : 17;                                                                                // 727\n\tvar KEY_TAB       = 9;                                                                                               // 728\n\t                                                                                                                     // 729\n\tvar TAG_SELECT    = 1;                                                                                               // 730\n\tvar TAG_INPUT     = 2;                                                                                               // 731\n\t                                                                                                                     // 732\n\t// for now, android support in general is too spotty to support validity                                             // 733\n\tvar SUPPORTS_VALIDITY_API = !/android/i.test(window.navigator.userAgent) && !!document.createElement('form').validity;\n\t                                                                                                                     // 735\n\tvar isset = function(object) {                                                                                       // 736\n\t\treturn typeof object !== 'undefined';                                                                               // 737\n\t};                                                                                                                   // 738\n\t                                                                                                                     // 739\n\t/**                                                                                                                  // 740\n\t * Converts a scalar to its best string representation                                                               // 741\n\t * for hash keys and HTML attribute values.                                                                          // 742\n\t *                                                                                                                   // 743\n\t * Transformations:                                                                                                  // 744\n\t *   'str'     -> 'str'                                                                                              // 745\n\t *   null      -> ''                                                                                                 // 746\n\t *   undefined -> ''                                                                                                 // 747\n\t *   true      -> '1'                                                                                                // 748\n\t *   false     -> '0'                                                                                                // 749\n\t *   0         -> '0'                                                                                                // 750\n\t *   1         -> '1'                                                                                                // 751\n\t *                                                                                                                   // 752\n\t * @param {string} value                                                                                             // 753\n\t * @returns {string|null}                                                                                            // 754\n\t */                                                                                                                  // 755\n\tvar hash_key = function(value) {                                                                                     // 756\n\t\tif (typeof value === 'undefined' || value === null) return null;                                                    // 757\n\t\tif (typeof value === 'boolean') return value ? '1' : '0';                                                           // 758\n\t\treturn value + '';                                                                                                  // 759\n\t};                                                                                                                   // 760\n\t                                                                                                                     // 761\n\t/**                                                                                                                  // 762\n\t * Escapes a string for use within HTML.                                                                             // 763\n\t *                                                                                                                   // 764\n\t * @param {string} str                                                                                               // 765\n\t * @returns {string}                                                                                                 // 766\n\t */                                                                                                                  // 767\n\tvar escape_html = function(str) {                                                                                    // 768\n\t\treturn (str + '')                                                                                                   // 769\n\t\t\t.replace(/&/g, '&amp;')                                                                                            // 770\n\t\t\t.replace(/</g, '&lt;')                                                                                             // 771\n\t\t\t.replace(/>/g, '&gt;')                                                                                             // 772\n\t\t\t.replace(/\"/g, '&quot;');                                                                                          // 773\n\t};                                                                                                                   // 774\n\t                                                                                                                     // 775\n\t/**                                                                                                                  // 776\n\t * Escapes \"$\" characters in replacement strings.                                                                    // 777\n\t *                                                                                                                   // 778\n\t * @param {string} str                                                                                               // 779\n\t * @returns {string}                                                                                                 // 780\n\t */                                                                                                                  // 781\n\tvar escape_replace = function(str) {                                                                                 // 782\n\t\treturn (str + '').replace(/\\$/g, '$$$$');                                                                           // 783\n\t};                                                                                                                   // 784\n\t                                                                                                                     // 785\n\tvar hook = {};                                                                                                       // 786\n\t                                                                                                                     // 787\n\t/**                                                                                                                  // 788\n\t * Wraps `method` on `self` so that `fn`                                                                             // 789\n\t * is invoked before the original method.                                                                            // 790\n\t *                                                                                                                   // 791\n\t * @param {object} self                                                                                              // 792\n\t * @param {string} method                                                                                            // 793\n\t * @param {function} fn                                                                                              // 794\n\t */                                                                                                                  // 795\n\thook.before = function(self, method, fn) {                                                                           // 796\n\t\tvar original = self[method];                                                                                        // 797\n\t\tself[method] = function() {                                                                                         // 798\n\t\t\tfn.apply(self, arguments);                                                                                         // 799\n\t\t\treturn original.apply(self, arguments);                                                                            // 800\n\t\t};                                                                                                                  // 801\n\t};                                                                                                                   // 802\n\t                                                                                                                     // 803\n\t/**                                                                                                                  // 804\n\t * Wraps `method` on `self` so that `fn`                                                                             // 805\n\t * is invoked after the original method.                                                                             // 806\n\t *                                                                                                                   // 807\n\t * @param {object} self                                                                                              // 808\n\t * @param {string} method                                                                                            // 809\n\t * @param {function} fn                                                                                              // 810\n\t */                                                                                                                  // 811\n\thook.after = function(self, method, fn) {                                                                            // 812\n\t\tvar original = self[method];                                                                                        // 813\n\t\tself[method] = function() {                                                                                         // 814\n\t\t\tvar result = original.apply(self, arguments);                                                                      // 815\n\t\t\tfn.apply(self, arguments);                                                                                         // 816\n\t\t\treturn result;                                                                                                     // 817\n\t\t};                                                                                                                  // 818\n\t};                                                                                                                   // 819\n\t                                                                                                                     // 820\n\t/**                                                                                                                  // 821\n\t * Wraps `fn` so that it can only be invoked once.                                                                   // 822\n\t *                                                                                                                   // 823\n\t * @param {function} fn                                                                                              // 824\n\t * @returns {function}                                                                                               // 825\n\t */                                                                                                                  // 826\n\tvar once = function(fn) {                                                                                            // 827\n\t\tvar called = false;                                                                                                 // 828\n\t\treturn function() {                                                                                                 // 829\n\t\t\tif (called) return;                                                                                                // 830\n\t\t\tcalled = true;                                                                                                     // 831\n\t\t\tfn.apply(this, arguments);                                                                                         // 832\n\t\t};                                                                                                                  // 833\n\t};                                                                                                                   // 834\n\t                                                                                                                     // 835\n\t/**                                                                                                                  // 836\n\t * Wraps `fn` so that it can only be called once                                                                     // 837\n\t * every `delay` milliseconds (invoked on the falling edge).                                                         // 838\n\t *                                                                                                                   // 839\n\t * @param {function} fn                                                                                              // 840\n\t * @param {int} delay                                                                                                // 841\n\t * @returns {function}                                                                                               // 842\n\t */                                                                                                                  // 843\n\tvar debounce = function(fn, delay) {                                                                                 // 844\n\t\tvar timeout;                                                                                                        // 845\n\t\treturn function() {                                                                                                 // 846\n\t\t\tvar self = this;                                                                                                   // 847\n\t\t\tvar args = arguments;                                                                                              // 848\n\t\t\twindow.clearTimeout(timeout);                                                                                      // 849\n\t\t\ttimeout = window.setTimeout(function() {                                                                           // 850\n\t\t\t\tfn.apply(self, args);                                                                                             // 851\n\t\t\t}, delay);                                                                                                         // 852\n\t\t};                                                                                                                  // 853\n\t};                                                                                                                   // 854\n\t                                                                                                                     // 855\n\t/**                                                                                                                  // 856\n\t * Debounce all fired events types listed in `types`                                                                 // 857\n\t * while executing the provided `fn`.                                                                                // 858\n\t *                                                                                                                   // 859\n\t * @param {object} self                                                                                              // 860\n\t * @param {array} types                                                                                              // 861\n\t * @param {function} fn                                                                                              // 862\n\t */                                                                                                                  // 863\n\tvar debounce_events = function(self, types, fn) {                                                                    // 864\n\t\tvar type;                                                                                                           // 865\n\t\tvar trigger = self.trigger;                                                                                         // 866\n\t\tvar event_args = {};                                                                                                // 867\n\t                                                                                                                     // 868\n\t\t// override trigger method                                                                                          // 869\n\t\tself.trigger = function() {                                                                                         // 870\n\t\t\tvar type = arguments[0];                                                                                           // 871\n\t\t\tif (types.indexOf(type) !== -1) {                                                                                  // 872\n\t\t\t\tevent_args[type] = arguments;                                                                                     // 873\n\t\t\t} else {                                                                                                           // 874\n\t\t\t\treturn trigger.apply(self, arguments);                                                                            // 875\n\t\t\t}                                                                                                                  // 876\n\t\t};                                                                                                                  // 877\n\t                                                                                                                     // 878\n\t\t// invoke provided function                                                                                         // 879\n\t\tfn.apply(self, []);                                                                                                 // 880\n\t\tself.trigger = trigger;                                                                                             // 881\n\t                                                                                                                     // 882\n\t\t// trigger queued events                                                                                            // 883\n\t\tfor (type in event_args) {                                                                                          // 884\n\t\t\tif (event_args.hasOwnProperty(type)) {                                                                             // 885\n\t\t\t\ttrigger.apply(self, event_args[type]);                                                                            // 886\n\t\t\t}                                                                                                                  // 887\n\t\t}                                                                                                                   // 888\n\t};                                                                                                                   // 889\n\t                                                                                                                     // 890\n\t/**                                                                                                                  // 891\n\t * A workaround for http://bugs.jquery.com/ticket/6696                                                               // 892\n\t *                                                                                                                   // 893\n\t * @param {object} $parent - Parent element to listen on.                                                            // 894\n\t * @param {string} event - Event name.                                                                               // 895\n\t * @param {string} selector - Descendant selector to filter by.                                                      // 896\n\t * @param {function} fn - Event handler.                                                                             // 897\n\t */                                                                                                                  // 898\n\tvar watchChildEvent = function($parent, event, selector, fn) {                                                       // 899\n\t\t$parent.on(event, selector, function(e) {                                                                           // 900\n\t\t\tvar child = e.target;                                                                                              // 901\n\t\t\twhile (child && child.parentNode !== $parent[0]) {                                                                 // 902\n\t\t\t\tchild = child.parentNode;                                                                                         // 903\n\t\t\t}                                                                                                                  // 904\n\t\t\te.currentTarget = child;                                                                                           // 905\n\t\t\treturn fn.apply(this, [e]);                                                                                        // 906\n\t\t});                                                                                                                 // 907\n\t};                                                                                                                   // 908\n\t                                                                                                                     // 909\n\t/**                                                                                                                  // 910\n\t * Determines the current selection within a text input control.                                                     // 911\n\t * Returns an object containing:                                                                                     // 912\n\t *   - start                                                                                                         // 913\n\t *   - length                                                                                                        // 914\n\t *                                                                                                                   // 915\n\t * @param {object} input                                                                                             // 916\n\t * @returns {object}                                                                                                 // 917\n\t */                                                                                                                  // 918\n\tvar getSelection = function(input) {                                                                                 // 919\n\t\tvar result = {};                                                                                                    // 920\n\t\tif ('selectionStart' in input) {                                                                                    // 921\n\t\t\tresult.start = input.selectionStart;                                                                               // 922\n\t\t\tresult.length = input.selectionEnd - result.start;                                                                 // 923\n\t\t} else if (document.selection) {                                                                                    // 924\n\t\t\tinput.focus();                                                                                                     // 925\n\t\t\tvar sel = document.selection.createRange();                                                                        // 926\n\t\t\tvar selLen = document.selection.createRange().text.length;                                                         // 927\n\t\t\tsel.moveStart('character', -input.value.length);                                                                   // 928\n\t\t\tresult.start = sel.text.length - selLen;                                                                           // 929\n\t\t\tresult.length = selLen;                                                                                            // 930\n\t\t}                                                                                                                   // 931\n\t\treturn result;                                                                                                      // 932\n\t};                                                                                                                   // 933\n\t                                                                                                                     // 934\n\t/**                                                                                                                  // 935\n\t * Copies CSS properties from one element to another.                                                                // 936\n\t *                                                                                                                   // 937\n\t * @param {object} $from                                                                                             // 938\n\t * @param {object} $to                                                                                               // 939\n\t * @param {array} properties                                                                                         // 940\n\t */                                                                                                                  // 941\n\tvar transferStyles = function($from, $to, properties) {                                                              // 942\n\t\tvar i, n, styles = {};                                                                                              // 943\n\t\tif (properties) {                                                                                                   // 944\n\t\t\tfor (i = 0, n = properties.length; i < n; i++) {                                                                   // 945\n\t\t\t\tstyles[properties[i]] = $from.css(properties[i]);                                                                 // 946\n\t\t\t}                                                                                                                  // 947\n\t\t} else {                                                                                                            // 948\n\t\t\tstyles = $from.css();                                                                                              // 949\n\t\t}                                                                                                                   // 950\n\t\t$to.css(styles);                                                                                                    // 951\n\t};                                                                                                                   // 952\n\t                                                                                                                     // 953\n\t/**                                                                                                                  // 954\n\t * Measures the width of a string within a                                                                           // 955\n\t * parent element (in pixels).                                                                                       // 956\n\t *                                                                                                                   // 957\n\t * @param {string} str                                                                                               // 958\n\t * @param {object} $parent                                                                                           // 959\n\t * @returns {int}                                                                                                    // 960\n\t */                                                                                                                  // 961\n\tvar measureString = function(str, $parent) {                                                                         // 962\n\t\tif (!str) {                                                                                                         // 963\n\t\t\treturn 0;                                                                                                          // 964\n\t\t}                                                                                                                   // 965\n\t                                                                                                                     // 966\n\t\tvar $test = $('<test>').css({                                                                                       // 967\n\t\t\tposition: 'absolute',                                                                                              // 968\n\t\t\ttop: -99999,                                                                                                       // 969\n\t\t\tleft: -99999,                                                                                                      // 970\n\t\t\twidth: 'auto',                                                                                                     // 971\n\t\t\tpadding: 0,                                                                                                        // 972\n\t\t\twhiteSpace: 'pre'                                                                                                  // 973\n\t\t}).text(str).appendTo('body');                                                                                      // 974\n\t                                                                                                                     // 975\n\t\ttransferStyles($parent, $test, [                                                                                    // 976\n\t\t\t'letterSpacing',                                                                                                   // 977\n\t\t\t'fontSize',                                                                                                        // 978\n\t\t\t'fontFamily',                                                                                                      // 979\n\t\t\t'fontWeight',                                                                                                      // 980\n\t\t\t'textTransform'                                                                                                    // 981\n\t\t]);                                                                                                                 // 982\n\t                                                                                                                     // 983\n\t\tvar width = $test.width();                                                                                          // 984\n\t\t$test.remove();                                                                                                     // 985\n\t                                                                                                                     // 986\n\t\treturn width;                                                                                                       // 987\n\t};                                                                                                                   // 988\n\t                                                                                                                     // 989\n\t/**                                                                                                                  // 990\n\t * Sets up an input to grow horizontally as the user                                                                 // 991\n\t * types. If the value is changed manually, you can                                                                  // 992\n\t * trigger the \"update\" handler to resize:                                                                           // 993\n\t *                                                                                                                   // 994\n\t * $input.trigger('update');                                                                                         // 995\n\t *                                                                                                                   // 996\n\t * @param {object} $input                                                                                            // 997\n\t */                                                                                                                  // 998\n\tvar autoGrow = function($input) {                                                                                    // 999\n\t\tvar currentWidth = null;                                                                                            // 1000\n\t                                                                                                                     // 1001\n\t\tvar update = function(e, options) {                                                                                 // 1002\n\t\t\tvar value, keyCode, printable, placeholder, width;                                                                 // 1003\n\t\t\tvar shift, character, selection;                                                                                   // 1004\n\t\t\te = e || window.event || {};                                                                                       // 1005\n\t\t\toptions = options || {};                                                                                           // 1006\n\t                                                                                                                     // 1007\n\t\t\tif (e.metaKey || e.altKey) return;                                                                                 // 1008\n\t\t\tif (!options.force && $input.data('grow') === false) return;                                                       // 1009\n\t                                                                                                                     // 1010\n\t\t\tvalue = $input.val();                                                                                              // 1011\n\t\t\tif (e.type && e.type.toLowerCase() === 'keydown') {                                                                // 1012\n\t\t\t\tkeyCode = e.keyCode;                                                                                              // 1013\n\t\t\t\tprintable = (                                                                                                     // 1014\n\t\t\t\t\t(keyCode >= 97 && keyCode <= 122) || // a-z                                                                      // 1015\n\t\t\t\t\t(keyCode >= 65 && keyCode <= 90)  || // A-Z                                                                      // 1016\n\t\t\t\t\t(keyCode >= 48 && keyCode <= 57)  || // 0-9                                                                      // 1017\n\t\t\t\t\tkeyCode === 32 // space                                                                                          // 1018\n\t\t\t\t);                                                                                                                // 1019\n\t                                                                                                                     // 1020\n\t\t\t\tif (keyCode === KEY_DELETE || keyCode === KEY_BACKSPACE) {                                                        // 1021\n\t\t\t\t\tselection = getSelection($input[0]);                                                                             // 1022\n\t\t\t\t\tif (selection.length) {                                                                                          // 1023\n\t\t\t\t\t\tvalue = value.substring(0, selection.start) + value.substring(selection.start + selection.length);              // 1024\n\t\t\t\t\t} else if (keyCode === KEY_BACKSPACE && selection.start) {                                                       // 1025\n\t\t\t\t\t\tvalue = value.substring(0, selection.start - 1) + value.substring(selection.start + 1);                         // 1026\n\t\t\t\t\t} else if (keyCode === KEY_DELETE && typeof selection.start !== 'undefined') {                                   // 1027\n\t\t\t\t\t\tvalue = value.substring(0, selection.start) + value.substring(selection.start + 1);                             // 1028\n\t\t\t\t\t}                                                                                                                // 1029\n\t\t\t\t} else if (printable) {                                                                                           // 1030\n\t\t\t\t\tshift = e.shiftKey;                                                                                              // 1031\n\t\t\t\t\tcharacter = String.fromCharCode(e.keyCode);                                                                      // 1032\n\t\t\t\t\tif (shift) character = character.toUpperCase();                                                                  // 1033\n\t\t\t\t\telse character = character.toLowerCase();                                                                        // 1034\n\t\t\t\t\tvalue += character;                                                                                              // 1035\n\t\t\t\t}                                                                                                                 // 1036\n\t\t\t}                                                                                                                  // 1037\n\t                                                                                                                     // 1038\n\t\t\tplaceholder = $input.attr('placeholder');                                                                          // 1039\n\t\t\tif (!value && placeholder) {                                                                                       // 1040\n\t\t\t\tvalue = placeholder;                                                                                              // 1041\n\t\t\t}                                                                                                                  // 1042\n\t                                                                                                                     // 1043\n\t\t\twidth = measureString(value, $input) + 4;                                                                          // 1044\n\t\t\tif (width !== currentWidth) {                                                                                      // 1045\n\t\t\t\tcurrentWidth = width;                                                                                             // 1046\n\t\t\t\t$input.width(width);                                                                                              // 1047\n\t\t\t\t$input.triggerHandler('resize');                                                                                  // 1048\n\t\t\t}                                                                                                                  // 1049\n\t\t};                                                                                                                  // 1050\n\t                                                                                                                     // 1051\n\t\t$input.on('keydown keyup update blur', update);                                                                     // 1052\n\t\tupdate();                                                                                                           // 1053\n\t};                                                                                                                   // 1054\n\t                                                                                                                     // 1055\n\tvar Selectize = function($input, settings) {                                                                         // 1056\n\t\tvar key, i, n, dir, input, self = this;                                                                             // 1057\n\t\tinput = $input[0];                                                                                                  // 1058\n\t\tinput.selectize = self;                                                                                             // 1059\n\t                                                                                                                     // 1060\n\t\t// detect rtl environment                                                                                           // 1061\n\t\tvar computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);                                // 1062\n\t\tdir = computedStyle ? computedStyle.getPropertyValue('direction') : input.currentStyle && input.currentStyle.direction;\n\t\tdir = dir || $input.parents('[dir]:first').attr('dir') || '';                                                       // 1064\n\t                                                                                                                     // 1065\n\t\t// setup default state                                                                                              // 1066\n\t\t$.extend(self, {                                                                                                    // 1067\n\t\t\torder            : 0,                                                                                              // 1068\n\t\t\tsettings         : settings,                                                                                       // 1069\n\t\t\t$input           : $input,                                                                                         // 1070\n\t\t\ttabIndex         : $input.attr('tabindex') || '',                                                                  // 1071\n\t\t\ttagType          : input.tagName.toLowerCase() === 'select' ? TAG_SELECT : TAG_INPUT,                              // 1072\n\t\t\trtl              : /rtl/i.test(dir),                                                                               // 1073\n\t                                                                                                                     // 1074\n\t\t\teventNS          : '.selectize' + (++Selectize.count),                                                             // 1075\n\t\t\thighlightedValue : null,                                                                                           // 1076\n\t\t\tisOpen           : false,                                                                                          // 1077\n\t\t\tisDisabled       : false,                                                                                          // 1078\n\t\t\tisRequired       : $input.is('[required]'),                                                                        // 1079\n\t\t\tisInvalid        : false,                                                                                          // 1080\n\t\t\tisLocked         : false,                                                                                          // 1081\n\t\t\tisFocused        : false,                                                                                          // 1082\n\t\t\tisInputHidden    : false,                                                                                          // 1083\n\t\t\tisSetup          : false,                                                                                          // 1084\n\t\t\tisShiftDown      : false,                                                                                          // 1085\n\t\t\tisCmdDown        : false,                                                                                          // 1086\n\t\t\tisCtrlDown       : false,                                                                                          // 1087\n\t\t\tignoreFocus      : false,                                                                                          // 1088\n\t\t\tignoreBlur       : false,                                                                                          // 1089\n\t\t\tignoreHover      : false,                                                                                          // 1090\n\t\t\thasOptions       : false,                                                                                          // 1091\n\t\t\tcurrentResults   : null,                                                                                           // 1092\n\t\t\tlastValue        : '',                                                                                             // 1093\n\t\t\tcaretPos         : 0,                                                                                              // 1094\n\t\t\tloading          : 0,                                                                                              // 1095\n\t\t\tloadedSearches   : {},                                                                                             // 1096\n\t                                                                                                                     // 1097\n\t\t\t$activeOption    : null,                                                                                           // 1098\n\t\t\t$activeItems     : [],                                                                                             // 1099\n\t                                                                                                                     // 1100\n\t\t\toptgroups        : {},                                                                                             // 1101\n\t\t\toptions          : {},                                                                                             // 1102\n\t\t\tuserOptions      : {},                                                                                             // 1103\n\t\t\titems            : [],                                                                                             // 1104\n\t\t\trenderCache      : {},                                                                                             // 1105\n\t\t\tonSearchChange   : settings.loadThrottle === null ? self.onSearchChange : debounce(self.onSearchChange, settings.loadThrottle)\n\t\t});                                                                                                                 // 1107\n\t                                                                                                                     // 1108\n\t\t// search system                                                                                                    // 1109\n\t\tself.sifter = new Sifter(this.options, {diacritics: settings.diacritics});                                          // 1110\n\t                                                                                                                     // 1111\n\t\t// build options table                                                                                              // 1112\n\t\tif (self.settings.options) {                                                                                        // 1113\n\t\t\tfor (i = 0, n = self.settings.options.length; i < n; i++) {                                                        // 1114\n\t\t\t\tself.registerOption(self.settings.options[i]);                                                                    // 1115\n\t\t\t}                                                                                                                  // 1116\n\t\t\tdelete self.settings.options;                                                                                      // 1117\n\t\t}                                                                                                                   // 1118\n\t                                                                                                                     // 1119\n\t\t// build optgroup table                                                                                             // 1120\n\t\tif (self.settings.optgroups) {                                                                                      // 1121\n\t\t\tfor (i = 0, n = self.settings.optgroups.length; i < n; i++) {                                                      // 1122\n\t\t\t\tself.registerOptionGroup(self.settings.optgroups[i]);                                                             // 1123\n\t\t\t}                                                                                                                  // 1124\n\t\t\tdelete self.settings.optgroups;                                                                                    // 1125\n\t\t}                                                                                                                   // 1126\n\t                                                                                                                     // 1127\n\t\t// option-dependent defaults                                                                                        // 1128\n\t\tself.settings.mode = self.settings.mode || (self.settings.maxItems === 1 ? 'single' : 'multi');                     // 1129\n\t\tif (typeof self.settings.hideSelected !== 'boolean') {                                                              // 1130\n\t\t\tself.settings.hideSelected = self.settings.mode === 'multi';                                                       // 1131\n\t\t}                                                                                                                   // 1132\n\t                                                                                                                     // 1133\n\t\tself.initializePlugins(self.settings.plugins);                                                                      // 1134\n\t\tself.setupCallbacks();                                                                                              // 1135\n\t\tself.setupTemplates();                                                                                              // 1136\n\t\tself.setup();                                                                                                       // 1137\n\t};                                                                                                                   // 1138\n\t                                                                                                                     // 1139\n\t// mixins                                                                                                            // 1140\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -                         // 1141\n\t                                                                                                                     // 1142\n\tMicroEvent.mixin(Selectize);                                                                                         // 1143\n\tMicroPlugin.mixin(Selectize);                                                                                        // 1144\n\t                                                                                                                     // 1145\n\t// methods                                                                                                           // 1146\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -                         // 1147\n\t                                                                                                                     // 1148\n\t$.extend(Selectize.prototype, {                                                                                      // 1149\n\t                                                                                                                     // 1150\n\t\t/**                                                                                                                 // 1151\n\t\t * Creates all elements and sets up event bindings.                                                                 // 1152\n\t\t */                                                                                                                 // 1153\n\t\tsetup: function() {                                                                                                 // 1154\n\t\t\tvar self      = this;                                                                                              // 1155\n\t\t\tvar settings  = self.settings;                                                                                     // 1156\n\t\t\tvar eventNS   = self.eventNS;                                                                                      // 1157\n\t\t\tvar $window   = $(window);                                                                                         // 1158\n\t\t\tvar $document = $(document);                                                                                       // 1159\n\t\t\tvar $input    = self.$input;                                                                                       // 1160\n\t                                                                                                                     // 1161\n\t\t\tvar $wrapper;                                                                                                      // 1162\n\t\t\tvar $control;                                                                                                      // 1163\n\t\t\tvar $control_input;                                                                                                // 1164\n\t\t\tvar $dropdown;                                                                                                     // 1165\n\t\t\tvar $dropdown_content;                                                                                             // 1166\n\t\t\tvar $dropdown_parent;                                                                                              // 1167\n\t\t\tvar inputMode;                                                                                                     // 1168\n\t\t\tvar timeout_blur;                                                                                                  // 1169\n\t\t\tvar timeout_focus;                                                                                                 // 1170\n\t\t\tvar classes;                                                                                                       // 1171\n\t\t\tvar classes_plugins;                                                                                               // 1172\n\t                                                                                                                     // 1173\n\t\t\tinputMode         = self.settings.mode;                                                                            // 1174\n\t\t\tclasses           = $input.attr('class') || '';                                                                    // 1175\n\t                                                                                                                     // 1176\n\t\t\t$wrapper          = $('<div>').addClass(settings.wrapperClass).addClass(classes).addClass(inputMode);              // 1177\n\t\t\t$control          = $('<div>').addClass(settings.inputClass).addClass('items').appendTo($wrapper);                 // 1178\n\t\t\t$control_input    = $('<input type=\"text\" autocomplete=\"off\" />').appendTo($control).attr('tabindex', $input.is(':disabled') ? '-1' : self.tabIndex);\n\t\t\t$dropdown_parent  = $(settings.dropdownParent || $wrapper);                                                        // 1180\n\t\t\t$dropdown         = $('<div>').addClass(settings.dropdownClass).addClass(inputMode).hide().appendTo($dropdown_parent);\n\t\t\t$dropdown_content = $('<div>').addClass(settings.dropdownContentClass).appendTo($dropdown);                        // 1182\n\t                                                                                                                     // 1183\n\t\t\tif(self.settings.copyClassesToDropdown) {                                                                          // 1184\n\t\t\t\t$dropdown.addClass(classes);                                                                                      // 1185\n\t\t\t}                                                                                                                  // 1186\n\t                                                                                                                     // 1187\n\t\t\t$wrapper.css({                                                                                                     // 1188\n\t\t\t\twidth: $input[0].style.width                                                                                      // 1189\n\t\t\t});                                                                                                                // 1190\n\t                                                                                                                     // 1191\n\t\t\tif (self.plugins.names.length) {                                                                                   // 1192\n\t\t\t\tclasses_plugins = 'plugin-' + self.plugins.names.join(' plugin-');                                                // 1193\n\t\t\t\t$wrapper.addClass(classes_plugins);                                                                               // 1194\n\t\t\t\t$dropdown.addClass(classes_plugins);                                                                              // 1195\n\t\t\t}                                                                                                                  // 1196\n\t                                                                                                                     // 1197\n\t\t\tif ((settings.maxItems === null || settings.maxItems > 1) && self.tagType === TAG_SELECT) {                        // 1198\n\t\t\t\t$input.attr('multiple', 'multiple');                                                                              // 1199\n\t\t\t}                                                                                                                  // 1200\n\t                                                                                                                     // 1201\n\t\t\tif (self.settings.placeholder) {                                                                                   // 1202\n\t\t\t\t$control_input.attr('placeholder', settings.placeholder);                                                         // 1203\n\t\t\t}                                                                                                                  // 1204\n\t                                                                                                                     // 1205\n\t\t\t// if splitOn was not passed in, construct it from the delimiter to allow pasting universally                      // 1206\n\t\t\tif (!self.settings.splitOn && self.settings.delimiter) {                                                           // 1207\n\t\t\t\tvar delimiterEscaped = self.settings.delimiter.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                         // 1208\n\t\t\t\tself.settings.splitOn = new RegExp('\\\\s*' + delimiterEscaped + '+\\\\s*');                                          // 1209\n\t\t\t}                                                                                                                  // 1210\n\t                                                                                                                     // 1211\n\t\t\tif ($input.attr('autocorrect')) {                                                                                  // 1212\n\t\t\t\t$control_input.attr('autocorrect', $input.attr('autocorrect'));                                                   // 1213\n\t\t\t}                                                                                                                  // 1214\n\t                                                                                                                     // 1215\n\t\t\tif ($input.attr('autocapitalize')) {                                                                               // 1216\n\t\t\t\t$control_input.attr('autocapitalize', $input.attr('autocapitalize'));                                             // 1217\n\t\t\t}                                                                                                                  // 1218\n\t                                                                                                                     // 1219\n\t\t\tself.$wrapper          = $wrapper;                                                                                 // 1220\n\t\t\tself.$control          = $control;                                                                                 // 1221\n\t\t\tself.$control_input    = $control_input;                                                                           // 1222\n\t\t\tself.$dropdown         = $dropdown;                                                                                // 1223\n\t\t\tself.$dropdown_content = $dropdown_content;                                                                        // 1224\n\t                                                                                                                     // 1225\n\t\t\t$dropdown.on('mouseenter', '[data-selectable]', function() { return self.onOptionHover.apply(self, arguments); });\n\t\t\t$dropdown.on('mousedown click', '[data-selectable]', function() { return self.onOptionSelect.apply(self, arguments); });\n\t\t\twatchChildEvent($control, 'mousedown', '*:not(input)', function() { return self.onItemSelect.apply(self, arguments); });\n\t\t\tautoGrow($control_input);                                                                                          // 1229\n\t                                                                                                                     // 1230\n\t\t\t$control.on({                                                                                                      // 1231\n\t\t\t\tmousedown : function() { return self.onMouseDown.apply(self, arguments); },                                       // 1232\n\t\t\t\tclick     : function() { return self.onClick.apply(self, arguments); }                                            // 1233\n\t\t\t});                                                                                                                // 1234\n\t                                                                                                                     // 1235\n\t\t\t$control_input.on({                                                                                                // 1236\n\t\t\t\tmousedown : function(e) { e.stopPropagation(); },                                                                 // 1237\n\t\t\t\tkeydown   : function() { return self.onKeyDown.apply(self, arguments); },                                         // 1238\n\t\t\t\tkeyup     : function() { return self.onKeyUp.apply(self, arguments); },                                           // 1239\n\t\t\t\tkeypress  : function() { return self.onKeyPress.apply(self, arguments); },                                        // 1240\n\t\t\t\tresize    : function() { self.positionDropdown.apply(self, []); },                                                // 1241\n\t\t\t\tblur      : function() { return self.onBlur.apply(self, arguments); },                                            // 1242\n\t\t\t\tfocus     : function() { self.ignoreBlur = false; return self.onFocus.apply(self, arguments); },                  // 1243\n\t\t\t\tpaste     : function() { return self.onPaste.apply(self, arguments); }                                            // 1244\n\t\t\t});                                                                                                                // 1245\n\t                                                                                                                     // 1246\n\t\t\t$document.on('keydown' + eventNS, function(e) {                                                                    // 1247\n\t\t\t\tself.isCmdDown = e[IS_MAC ? 'metaKey' : 'ctrlKey'];                                                               // 1248\n\t\t\t\tself.isCtrlDown = e[IS_MAC ? 'altKey' : 'ctrlKey'];                                                               // 1249\n\t\t\t\tself.isShiftDown = e.shiftKey;                                                                                    // 1250\n\t\t\t});                                                                                                                // 1251\n\t                                                                                                                     // 1252\n\t\t\t$document.on('keyup' + eventNS, function(e) {                                                                      // 1253\n\t\t\t\tif (e.keyCode === KEY_CTRL) self.isCtrlDown = false;                                                              // 1254\n\t\t\t\tif (e.keyCode === KEY_SHIFT) self.isShiftDown = false;                                                            // 1255\n\t\t\t\tif (e.keyCode === KEY_CMD) self.isCmdDown = false;                                                                // 1256\n\t\t\t});                                                                                                                // 1257\n\t                                                                                                                     // 1258\n\t\t\t$document.on('mousedown' + eventNS, function(e) {                                                                  // 1259\n\t\t\t\tif (self.isFocused) {                                                                                             // 1260\n\t\t\t\t\t// prevent events on the dropdown scrollbar from causing the control to blur                                     // 1261\n\t\t\t\t\tif (e.target === self.$dropdown[0] || e.target.parentNode === self.$dropdown[0]) {                               // 1262\n\t\t\t\t\t\treturn false;                                                                                                   // 1263\n\t\t\t\t\t}                                                                                                                // 1264\n\t\t\t\t\t// blur on click outside                                                                                         // 1265\n\t\t\t\t\tif (!self.$control.has(e.target).length && e.target !== self.$control[0]) {                                      // 1266\n\t\t\t\t\t\tself.blur(e.target);                                                                                            // 1267\n\t\t\t\t\t}                                                                                                                // 1268\n\t\t\t\t}                                                                                                                 // 1269\n\t\t\t});                                                                                                                // 1270\n\t                                                                                                                     // 1271\n\t\t\t$window.on(['scroll' + eventNS, 'resize' + eventNS].join(' '), function() {                                        // 1272\n\t\t\t\tif (self.isOpen) {                                                                                                // 1273\n\t\t\t\t\tself.positionDropdown.apply(self, arguments);                                                                    // 1274\n\t\t\t\t}                                                                                                                 // 1275\n\t\t\t});                                                                                                                // 1276\n\t\t\t$window.on('mousemove' + eventNS, function() {                                                                     // 1277\n\t\t\t\tself.ignoreHover = false;                                                                                         // 1278\n\t\t\t});                                                                                                                // 1279\n\t                                                                                                                     // 1280\n\t\t\t// store original children and tab index so that they can be                                                       // 1281\n\t\t\t// restored when the destroy() method is called.                                                                   // 1282\n\t\t\tthis.revertSettings = {                                                                                            // 1283\n\t\t\t\t$children : $input.children().detach(),                                                                           // 1284\n\t\t\t\ttabindex  : $input.attr('tabindex')                                                                               // 1285\n\t\t\t};                                                                                                                 // 1286\n\t                                                                                                                     // 1287\n\t\t\t$input.attr('tabindex', -1).hide().after(self.$wrapper);                                                           // 1288\n\t                                                                                                                     // 1289\n\t\t\tif ($.isArray(settings.items)) {                                                                                   // 1290\n\t\t\t\tself.setValue(settings.items);                                                                                    // 1291\n\t\t\t\tdelete settings.items;                                                                                            // 1292\n\t\t\t}                                                                                                                  // 1293\n\t                                                                                                                     // 1294\n\t\t\t// feature detect for the validation API                                                                           // 1295\n\t\t\tif (SUPPORTS_VALIDITY_API) {                                                                                       // 1296\n\t\t\t\t$input.on('invalid' + eventNS, function(e) {                                                                      // 1297\n\t\t\t\t\te.preventDefault();                                                                                              // 1298\n\t\t\t\t\tself.isInvalid = true;                                                                                           // 1299\n\t\t\t\t\tself.refreshState();                                                                                             // 1300\n\t\t\t\t});                                                                                                               // 1301\n\t\t\t}                                                                                                                  // 1302\n\t                                                                                                                     // 1303\n\t\t\tself.updateOriginalInput();                                                                                        // 1304\n\t\t\tself.refreshItems();                                                                                               // 1305\n\t\t\tself.refreshState();                                                                                               // 1306\n\t\t\tself.updatePlaceholder();                                                                                          // 1307\n\t\t\tself.isSetup = true;                                                                                               // 1308\n\t                                                                                                                     // 1309\n\t\t\tif ($input.is(':disabled')) {                                                                                      // 1310\n\t\t\t\tself.disable();                                                                                                   // 1311\n\t\t\t}                                                                                                                  // 1312\n\t                                                                                                                     // 1313\n\t\t\tself.on('change', this.onChange);                                                                                  // 1314\n\t                                                                                                                     // 1315\n\t\t\t$input.data('selectize', self);                                                                                    // 1316\n\t\t\t$input.addClass('selectized');                                                                                     // 1317\n\t\t\tself.trigger('initialize');                                                                                        // 1318\n\t                                                                                                                     // 1319\n\t\t\t// preload options                                                                                                 // 1320\n\t\t\tif (settings.preload === true) {                                                                                   // 1321\n\t\t\t\tself.onSearchChange('');                                                                                          // 1322\n\t\t\t}                                                                                                                  // 1323\n\t                                                                                                                     // 1324\n\t\t},                                                                                                                  // 1325\n\t                                                                                                                     // 1326\n\t\t/**                                                                                                                 // 1327\n\t\t * Sets up default rendering functions.                                                                             // 1328\n\t\t */                                                                                                                 // 1329\n\t\tsetupTemplates: function() {                                                                                        // 1330\n\t\t\tvar self = this;                                                                                                   // 1331\n\t\t\tvar field_label = self.settings.labelField;                                                                        // 1332\n\t\t\tvar field_optgroup = self.settings.optgroupLabelField;                                                             // 1333\n\t                                                                                                                     // 1334\n\t\t\tvar templates = {                                                                                                  // 1335\n\t\t\t\t'optgroup': function(data) {                                                                                      // 1336\n\t\t\t\t\treturn '<div class=\"optgroup\">' + data.html + '</div>';                                                          // 1337\n\t\t\t\t},                                                                                                                // 1338\n\t\t\t\t'optgroup_header': function(data, escape) {                                                                       // 1339\n\t\t\t\t\treturn '<div class=\"optgroup-header\">' + escape(data[field_optgroup]) + '</div>';                                // 1340\n\t\t\t\t},                                                                                                                // 1341\n\t\t\t\t'option': function(data, escape) {                                                                                // 1342\n\t\t\t\t\treturn '<div class=\"option\">' + escape(data[field_label]) + '</div>';                                            // 1343\n\t\t\t\t},                                                                                                                // 1344\n\t\t\t\t'item': function(data, escape) {                                                                                  // 1345\n\t\t\t\t\treturn '<div class=\"item\">' + escape(data[field_label]) + '</div>';                                              // 1346\n\t\t\t\t},                                                                                                                // 1347\n\t\t\t\t'option_create': function(data, escape) {                                                                         // 1348\n\t\t\t\t\treturn '<div class=\"create\">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>';                      // 1349\n\t\t\t\t}                                                                                                                 // 1350\n\t\t\t};                                                                                                                 // 1351\n\t                                                                                                                     // 1352\n\t\t\tself.settings.render = $.extend({}, templates, self.settings.render);                                              // 1353\n\t\t},                                                                                                                  // 1354\n\t                                                                                                                     // 1355\n\t\t/**                                                                                                                 // 1356\n\t\t * Maps fired events to callbacks provided                                                                          // 1357\n\t\t * in the settings used when creating the control.                                                                  // 1358\n\t\t */                                                                                                                 // 1359\n\t\tsetupCallbacks: function() {                                                                                        // 1360\n\t\t\tvar key, fn, callbacks = {                                                                                         // 1361\n\t\t\t\t'initialize'      : 'onInitialize',                                                                               // 1362\n\t\t\t\t'change'          : 'onChange',                                                                                   // 1363\n\t\t\t\t'item_add'        : 'onItemAdd',                                                                                  // 1364\n\t\t\t\t'item_remove'     : 'onItemRemove',                                                                               // 1365\n\t\t\t\t'clear'           : 'onClear',                                                                                    // 1366\n\t\t\t\t'option_add'      : 'onOptionAdd',                                                                                // 1367\n\t\t\t\t'option_remove'   : 'onOptionRemove',                                                                             // 1368\n\t\t\t\t'option_clear'    : 'onOptionClear',                                                                              // 1369\n\t\t\t\t'optgroup_add'    : 'onOptionGroupAdd',                                                                           // 1370\n\t\t\t\t'optgroup_remove' : 'onOptionGroupRemove',                                                                        // 1371\n\t\t\t\t'optgroup_clear'  : 'onOptionGroupClear',                                                                         // 1372\n\t\t\t\t'dropdown_open'   : 'onDropdownOpen',                                                                             // 1373\n\t\t\t\t'dropdown_close'  : 'onDropdownClose',                                                                            // 1374\n\t\t\t\t'type'            : 'onType',                                                                                     // 1375\n\t\t\t\t'load'            : 'onLoad',                                                                                     // 1376\n\t\t\t\t'focus'           : 'onFocus',                                                                                    // 1377\n\t\t\t\t'blur'            : 'onBlur'                                                                                      // 1378\n\t\t\t};                                                                                                                 // 1379\n\t                                                                                                                     // 1380\n\t\t\tfor (key in callbacks) {                                                                                           // 1381\n\t\t\t\tif (callbacks.hasOwnProperty(key)) {                                                                              // 1382\n\t\t\t\t\tfn = this.settings[callbacks[key]];                                                                              // 1383\n\t\t\t\t\tif (fn) this.on(key, fn);                                                                                        // 1384\n\t\t\t\t}                                                                                                                 // 1385\n\t\t\t}                                                                                                                  // 1386\n\t\t},                                                                                                                  // 1387\n\t                                                                                                                     // 1388\n\t\t/**                                                                                                                 // 1389\n\t\t * Triggered when the main control element                                                                          // 1390\n\t\t * has a click event.                                                                                               // 1391\n\t\t *                                                                                                                  // 1392\n\t\t * @param {object} e                                                                                                // 1393\n\t\t * @return {boolean}                                                                                                // 1394\n\t\t */                                                                                                                 // 1395\n\t\tonClick: function(e) {                                                                                              // 1396\n\t\t\tvar self = this;                                                                                                   // 1397\n\t                                                                                                                     // 1398\n\t\t\t// necessary for mobile webkit devices (manual focus triggering                                                    // 1399\n\t\t\t// is ignored unless invoked within a click event)                                                                 // 1400\n\t\t\tif (!self.isFocused) {                                                                                             // 1401\n\t\t\t\tself.focus();                                                                                                     // 1402\n\t\t\t\te.preventDefault();                                                                                               // 1403\n\t\t\t}                                                                                                                  // 1404\n\t\t},                                                                                                                  // 1405\n\t                                                                                                                     // 1406\n\t\t/**                                                                                                                 // 1407\n\t\t * Triggered when the main control element                                                                          // 1408\n\t\t * has a mouse down event.                                                                                          // 1409\n\t\t *                                                                                                                  // 1410\n\t\t * @param {object} e                                                                                                // 1411\n\t\t * @return {boolean}                                                                                                // 1412\n\t\t */                                                                                                                 // 1413\n\t\tonMouseDown: function(e) {                                                                                          // 1414\n\t\t\tvar self = this;                                                                                                   // 1415\n\t\t\tvar defaultPrevented = e.isDefaultPrevented();                                                                     // 1416\n\t\t\tvar $target = $(e.target);                                                                                         // 1417\n\t                                                                                                                     // 1418\n\t\t\tif (self.isFocused) {                                                                                              // 1419\n\t\t\t\t// retain focus by preventing native handling. if the                                                             // 1420\n\t\t\t\t// event target is the input it should not be modified.                                                           // 1421\n\t\t\t\t// otherwise, text selection within the input won't work.                                                         // 1422\n\t\t\t\tif (e.target !== self.$control_input[0]) {                                                                        // 1423\n\t\t\t\t\tif (self.settings.mode === 'single') {                                                                           // 1424\n\t\t\t\t\t\t// toggle dropdown                                                                                              // 1425\n\t\t\t\t\t\tself.isOpen ? self.close() : self.open();                                                                       // 1426\n\t\t\t\t\t} else if (!defaultPrevented) {                                                                                  // 1427\n\t\t\t\t\t\tself.setActiveItem(null);                                                                                       // 1428\n\t\t\t\t\t}                                                                                                                // 1429\n\t\t\t\t\treturn false;                                                                                                    // 1430\n\t\t\t\t}                                                                                                                 // 1431\n\t\t\t} else {                                                                                                           // 1432\n\t\t\t\t// give control focus                                                                                             // 1433\n\t\t\t\tif (!defaultPrevented) {                                                                                          // 1434\n\t\t\t\t\twindow.setTimeout(function() {                                                                                   // 1435\n\t\t\t\t\t\tself.focus();                                                                                                   // 1436\n\t\t\t\t\t}, 0);                                                                                                           // 1437\n\t\t\t\t}                                                                                                                 // 1438\n\t\t\t}                                                                                                                  // 1439\n\t\t},                                                                                                                  // 1440\n\t                                                                                                                     // 1441\n\t\t/**                                                                                                                 // 1442\n\t\t * Triggered when the value of the control has been changed.                                                        // 1443\n\t\t * This should propagate the event to the original DOM                                                              // 1444\n\t\t * input / select element.                                                                                          // 1445\n\t\t */                                                                                                                 // 1446\n\t\tonChange: function() {                                                                                              // 1447\n\t\t\tthis.$input.trigger('change');                                                                                     // 1448\n\t\t},                                                                                                                  // 1449\n\t                                                                                                                     // 1450\n\t\t/**                                                                                                                 // 1451\n\t\t * Triggered on <input> paste.                                                                                      // 1452\n\t\t *                                                                                                                  // 1453\n\t\t * @param {object} e                                                                                                // 1454\n\t\t * @returns {boolean}                                                                                               // 1455\n\t\t */                                                                                                                 // 1456\n\t\tonPaste: function(e) {                                                                                              // 1457\n\t\t\tvar self = this;                                                                                                   // 1458\n\t\t\tif (self.isFull() || self.isInputHidden || self.isLocked) {                                                        // 1459\n\t\t\t\te.preventDefault();                                                                                               // 1460\n\t\t\t} else {                                                                                                           // 1461\n\t\t\t\t// If a regex or string is included, this will split the pasted                                                   // 1462\n\t\t\t\t// input and create Items for each separate value                                                                 // 1463\n\t\t\t\tif (self.settings.splitOn) {                                                                                      // 1464\n\t\t\t\t\tsetTimeout(function() {                                                                                          // 1465\n\t\t\t\t\t\tvar splitInput = $.trim(self.$control_input.val() || '').split(self.settings.splitOn);                          // 1466\n\t\t\t\t\t\tfor (var i = 0, n = splitInput.length; i < n; i++) {                                                            // 1467\n\t\t\t\t\t\t\tself.createItem(splitInput[i]);                                                                                // 1468\n\t\t\t\t\t\t}                                                                                                               // 1469\n\t\t\t\t\t}, 0);                                                                                                           // 1470\n\t\t\t\t}                                                                                                                 // 1471\n\t\t\t}                                                                                                                  // 1472\n\t\t},                                                                                                                  // 1473\n\t                                                                                                                     // 1474\n\t\t/**                                                                                                                 // 1475\n\t\t * Triggered on <input> keypress.                                                                                   // 1476\n\t\t *                                                                                                                  // 1477\n\t\t * @param {object} e                                                                                                // 1478\n\t\t * @returns {boolean}                                                                                               // 1479\n\t\t */                                                                                                                 // 1480\n\t\tonKeyPress: function(e) {                                                                                           // 1481\n\t\t\tif (this.isLocked) return e && e.preventDefault();                                                                 // 1482\n\t\t\tvar character = String.fromCharCode(e.keyCode || e.which);                                                         // 1483\n\t\t\tif (this.settings.create && this.settings.mode === 'multi' && character === this.settings.delimiter) {             // 1484\n\t\t\t\tthis.createItem();                                                                                                // 1485\n\t\t\t\te.preventDefault();                                                                                               // 1486\n\t\t\t\treturn false;                                                                                                     // 1487\n\t\t\t}                                                                                                                  // 1488\n\t\t},                                                                                                                  // 1489\n\t                                                                                                                     // 1490\n\t\t/**                                                                                                                 // 1491\n\t\t * Triggered on <input> keydown.                                                                                    // 1492\n\t\t *                                                                                                                  // 1493\n\t\t * @param {object} e                                                                                                // 1494\n\t\t * @returns {boolean}                                                                                               // 1495\n\t\t */                                                                                                                 // 1496\n\t\tonKeyDown: function(e) {                                                                                            // 1497\n\t\t\tvar isInput = e.target === this.$control_input[0];                                                                 // 1498\n\t\t\tvar self = this;                                                                                                   // 1499\n\t                                                                                                                     // 1500\n\t\t\tif (self.isLocked) {                                                                                               // 1501\n\t\t\t\tif (e.keyCode !== KEY_TAB) {                                                                                      // 1502\n\t\t\t\t\te.preventDefault();                                                                                              // 1503\n\t\t\t\t}                                                                                                                 // 1504\n\t\t\t\treturn;                                                                                                           // 1505\n\t\t\t}                                                                                                                  // 1506\n\t                                                                                                                     // 1507\n\t\t\tswitch (e.keyCode) {                                                                                               // 1508\n\t\t\t\tcase KEY_A:                                                                                                       // 1509\n\t\t\t\t\tif (self.isCmdDown) {                                                                                            // 1510\n\t\t\t\t\t\tself.selectAll();                                                                                               // 1511\n\t\t\t\t\t\treturn;                                                                                                         // 1512\n\t\t\t\t\t}                                                                                                                // 1513\n\t\t\t\t\tbreak;                                                                                                           // 1514\n\t\t\t\tcase KEY_ESC:                                                                                                     // 1515\n\t\t\t\t\tif (self.isOpen) {                                                                                               // 1516\n\t\t\t\t\t\te.preventDefault();                                                                                             // 1517\n\t\t\t\t\t\te.stopPropagation();                                                                                            // 1518\n\t\t\t\t\t\tself.close();                                                                                                   // 1519\n\t\t\t\t\t}                                                                                                                // 1520\n\t\t\t\t\treturn;                                                                                                          // 1521\n\t\t\t\tcase KEY_N:                                                                                                       // 1522\n\t\t\t\t\tif (!e.ctrlKey || e.altKey) break;                                                                               // 1523\n\t\t\t\tcase KEY_DOWN:                                                                                                    // 1524\n\t\t\t\t\tif (!self.isOpen && self.hasOptions) {                                                                           // 1525\n\t\t\t\t\t\tself.open();                                                                                                    // 1526\n\t\t\t\t\t} else if (self.$activeOption) {                                                                                 // 1527\n\t\t\t\t\t\tself.ignoreHover = true;                                                                                        // 1528\n\t\t\t\t\t\tvar $next = self.getAdjacentOption(self.$activeOption, 1);                                                      // 1529\n\t\t\t\t\t\tif ($next.length) self.setActiveOption($next, true, true);                                                      // 1530\n\t\t\t\t\t}                                                                                                                // 1531\n\t\t\t\t\te.preventDefault();                                                                                              // 1532\n\t\t\t\t\treturn;                                                                                                          // 1533\n\t\t\t\tcase KEY_P:                                                                                                       // 1534\n\t\t\t\t\tif (!e.ctrlKey || e.altKey) break;                                                                               // 1535\n\t\t\t\tcase KEY_UP:                                                                                                      // 1536\n\t\t\t\t\tif (self.$activeOption) {                                                                                        // 1537\n\t\t\t\t\t\tself.ignoreHover = true;                                                                                        // 1538\n\t\t\t\t\t\tvar $prev = self.getAdjacentOption(self.$activeOption, -1);                                                     // 1539\n\t\t\t\t\t\tif ($prev.length) self.setActiveOption($prev, true, true);                                                      // 1540\n\t\t\t\t\t}                                                                                                                // 1541\n\t\t\t\t\te.preventDefault();                                                                                              // 1542\n\t\t\t\t\treturn;                                                                                                          // 1543\n\t\t\t\tcase KEY_RETURN:                                                                                                  // 1544\n\t\t\t\t\tif (self.isOpen && self.$activeOption) {                                                                         // 1545\n\t\t\t\t\t\tself.onOptionSelect({currentTarget: self.$activeOption});                                                       // 1546\n\t\t\t\t\t\te.preventDefault();                                                                                             // 1547\n\t\t\t\t\t}                                                                                                                // 1548\n\t\t\t\t\treturn;                                                                                                          // 1549\n\t\t\t\tcase KEY_LEFT:                                                                                                    // 1550\n\t\t\t\t\tself.advanceSelection(-1, e);                                                                                    // 1551\n\t\t\t\t\treturn;                                                                                                          // 1552\n\t\t\t\tcase KEY_RIGHT:                                                                                                   // 1553\n\t\t\t\t\tself.advanceSelection(1, e);                                                                                     // 1554\n\t\t\t\t\treturn;                                                                                                          // 1555\n\t\t\t\tcase KEY_TAB:                                                                                                     // 1556\n\t\t\t\t\tif (self.settings.selectOnTab && self.isOpen && self.$activeOption) {                                            // 1557\n\t\t\t\t\t\tself.onOptionSelect({currentTarget: self.$activeOption});                                                       // 1558\n\t                                                                                                                     // 1559\n\t\t\t\t\t\t// Default behaviour is to jump to the next field, we only want this                                            // 1560\n\t\t\t\t\t\t// if the current field doesn't accept any more entries                                                         // 1561\n\t\t\t\t\t\tif (!self.isFull()) {                                                                                           // 1562\n\t\t\t\t\t\t\te.preventDefault();                                                                                            // 1563\n\t\t\t\t\t\t}                                                                                                               // 1564\n\t\t\t\t\t}                                                                                                                // 1565\n\t\t\t\t\tif (self.settings.create && self.createItem()) {                                                                 // 1566\n\t\t\t\t\t\te.preventDefault();                                                                                             // 1567\n\t\t\t\t\t}                                                                                                                // 1568\n\t\t\t\t\treturn;                                                                                                          // 1569\n\t\t\t\tcase KEY_BACKSPACE:                                                                                               // 1570\n\t\t\t\tcase KEY_DELETE:                                                                                                  // 1571\n\t\t\t\t\tself.deleteSelection(e);                                                                                         // 1572\n\t\t\t\t\treturn;                                                                                                          // 1573\n\t\t\t}                                                                                                                  // 1574\n\t                                                                                                                     // 1575\n\t\t\tif ((self.isFull() || self.isInputHidden) && !(IS_MAC ? e.metaKey : e.ctrlKey)) {                                  // 1576\n\t\t\t\te.preventDefault();                                                                                               // 1577\n\t\t\t\treturn;                                                                                                           // 1578\n\t\t\t}                                                                                                                  // 1579\n\t\t},                                                                                                                  // 1580\n\t                                                                                                                     // 1581\n\t\t/**                                                                                                                 // 1582\n\t\t * Triggered on <input> keyup.                                                                                      // 1583\n\t\t *                                                                                                                  // 1584\n\t\t * @param {object} e                                                                                                // 1585\n\t\t * @returns {boolean}                                                                                               // 1586\n\t\t */                                                                                                                 // 1587\n\t\tonKeyUp: function(e) {                                                                                              // 1588\n\t\t\tvar self = this;                                                                                                   // 1589\n\t                                                                                                                     // 1590\n\t\t\tif (self.isLocked) return e && e.preventDefault();                                                                 // 1591\n\t\t\tvar value = self.$control_input.val() || '';                                                                       // 1592\n\t\t\tif (self.lastValue !== value) {                                                                                    // 1593\n\t\t\t\tself.lastValue = value;                                                                                           // 1594\n\t\t\t\tself.onSearchChange(value);                                                                                       // 1595\n\t\t\t\tself.refreshOptions();                                                                                            // 1596\n\t\t\t\tself.trigger('type', value);                                                                                      // 1597\n\t\t\t}                                                                                                                  // 1598\n\t\t},                                                                                                                  // 1599\n\t                                                                                                                     // 1600\n\t\t/**                                                                                                                 // 1601\n\t\t * Invokes the user-provide option provider / loader.                                                               // 1602\n\t\t *                                                                                                                  // 1603\n\t\t * Note: this function is debounced in the Selectize                                                                // 1604\n\t\t * constructor (by `settings.loadDelay` milliseconds)                                                               // 1605\n\t\t *                                                                                                                  // 1606\n\t\t * @param {string} value                                                                                            // 1607\n\t\t */                                                                                                                 // 1608\n\t\tonSearchChange: function(value) {                                                                                   // 1609\n\t\t\tvar self = this;                                                                                                   // 1610\n\t\t\tvar fn = self.settings.load;                                                                                       // 1611\n\t\t\tif (!fn) return;                                                                                                   // 1612\n\t\t\tif (self.loadedSearches.hasOwnProperty(value)) return;                                                             // 1613\n\t\t\tself.loadedSearches[value] = true;                                                                                 // 1614\n\t\t\tself.load(function(callback) {                                                                                     // 1615\n\t\t\t\tfn.apply(self, [value, callback]);                                                                                // 1616\n\t\t\t});                                                                                                                // 1617\n\t\t},                                                                                                                  // 1618\n\t                                                                                                                     // 1619\n\t\t/**                                                                                                                 // 1620\n\t\t * Triggered on <input> focus.                                                                                      // 1621\n\t\t *                                                                                                                  // 1622\n\t\t * @param {object} e (optional)                                                                                     // 1623\n\t\t * @returns {boolean}                                                                                               // 1624\n\t\t */                                                                                                                 // 1625\n\t\tonFocus: function(e) {                                                                                              // 1626\n\t\t\tvar self = this;                                                                                                   // 1627\n\t\t\tvar wasFocused = self.isFocused;                                                                                   // 1628\n\t                                                                                                                     // 1629\n\t\t\tif (self.isDisabled) {                                                                                             // 1630\n\t\t\t\tself.blur();                                                                                                      // 1631\n\t\t\t\te && e.preventDefault();                                                                                          // 1632\n\t\t\t\treturn false;                                                                                                     // 1633\n\t\t\t}                                                                                                                  // 1634\n\t                                                                                                                     // 1635\n\t\t\tif (self.ignoreFocus) return;                                                                                      // 1636\n\t\t\tself.isFocused = true;                                                                                             // 1637\n\t\t\tif (self.settings.preload === 'focus') self.onSearchChange('');                                                    // 1638\n\t                                                                                                                     // 1639\n\t\t\tif (!wasFocused) self.trigger('focus');                                                                            // 1640\n\t                                                                                                                     // 1641\n\t\t\tif (!self.$activeItems.length) {                                                                                   // 1642\n\t\t\t\tself.showInput();                                                                                                 // 1643\n\t\t\t\tself.setActiveItem(null);                                                                                         // 1644\n\t\t\t\tself.refreshOptions(!!self.settings.openOnFocus);                                                                 // 1645\n\t\t\t}                                                                                                                  // 1646\n\t                                                                                                                     // 1647\n\t\t\tself.refreshState();                                                                                               // 1648\n\t\t},                                                                                                                  // 1649\n\t                                                                                                                     // 1650\n\t\t/**                                                                                                                 // 1651\n\t\t * Triggered on <input> blur.                                                                                       // 1652\n\t\t *                                                                                                                  // 1653\n\t\t * @param {object} e                                                                                                // 1654\n\t\t * @param {Element} dest                                                                                            // 1655\n\t\t */                                                                                                                 // 1656\n\t\tonBlur: function(e, dest) {                                                                                         // 1657\n\t\t\tvar self = this;                                                                                                   // 1658\n\t\t\tif (!self.isFocused) return;                                                                                       // 1659\n\t\t\tself.isFocused = false;                                                                                            // 1660\n\t                                                                                                                     // 1661\n\t\t\tif (self.ignoreFocus) {                                                                                            // 1662\n\t\t\t\treturn;                                                                                                           // 1663\n\t\t\t} else if (!self.ignoreBlur && document.activeElement === self.$dropdown_content[0]) {                             // 1664\n\t\t\t\t// necessary to prevent IE closing the dropdown when the scrollbar is clicked                                     // 1665\n\t\t\t\tself.ignoreBlur = true;                                                                                           // 1666\n\t\t\t\tself.onFocus(e);                                                                                                  // 1667\n\t\t\t\treturn;                                                                                                           // 1668\n\t\t\t}                                                                                                                  // 1669\n\t                                                                                                                     // 1670\n\t\t\tvar deactivate = function() {                                                                                      // 1671\n\t\t\t\tself.close();                                                                                                     // 1672\n\t\t\t\tself.setTextboxValue('');                                                                                         // 1673\n\t\t\t\tself.setActiveItem(null);                                                                                         // 1674\n\t\t\t\tself.setActiveOption(null);                                                                                       // 1675\n\t\t\t\tself.setCaret(self.items.length);                                                                                 // 1676\n\t\t\t\tself.refreshState();                                                                                              // 1677\n\t                                                                                                                     // 1678\n\t\t\t\t// IE11 bug: element still marked as active                                                                       // 1679\n\t\t\t\t(dest || document.body).focus();                                                                                  // 1680\n\t                                                                                                                     // 1681\n\t\t\t\tself.ignoreFocus = false;                                                                                         // 1682\n\t\t\t\tself.trigger('blur');                                                                                             // 1683\n\t\t\t};                                                                                                                 // 1684\n\t                                                                                                                     // 1685\n\t\t\tself.ignoreFocus = true;                                                                                           // 1686\n\t\t\tif (self.settings.create && self.settings.createOnBlur) {                                                          // 1687\n\t\t\t\tself.createItem(null, false, deactivate);                                                                         // 1688\n\t\t\t} else {                                                                                                           // 1689\n\t\t\t\tdeactivate();                                                                                                     // 1690\n\t\t\t}                                                                                                                  // 1691\n\t\t},                                                                                                                  // 1692\n\t                                                                                                                     // 1693\n\t\t/**                                                                                                                 // 1694\n\t\t * Triggered when the user rolls over                                                                               // 1695\n\t\t * an option in the autocomplete dropdown menu.                                                                     // 1696\n\t\t *                                                                                                                  // 1697\n\t\t * @param {object} e                                                                                                // 1698\n\t\t * @returns {boolean}                                                                                               // 1699\n\t\t */                                                                                                                 // 1700\n\t\tonOptionHover: function(e) {                                                                                        // 1701\n\t\t\tif (this.ignoreHover) return;                                                                                      // 1702\n\t\t\tthis.setActiveOption(e.currentTarget, false);                                                                      // 1703\n\t\t},                                                                                                                  // 1704\n\t                                                                                                                     // 1705\n\t\t/**                                                                                                                 // 1706\n\t\t * Triggered when the user clicks on an option                                                                      // 1707\n\t\t * in the autocomplete dropdown menu.                                                                               // 1708\n\t\t *                                                                                                                  // 1709\n\t\t * @param {object} e                                                                                                // 1710\n\t\t * @returns {boolean}                                                                                               // 1711\n\t\t */                                                                                                                 // 1712\n\t\tonOptionSelect: function(e) {                                                                                       // 1713\n\t\t\tvar value, $target, $option, self = this;                                                                          // 1714\n\t                                                                                                                     // 1715\n\t\t\tif (e.preventDefault) {                                                                                            // 1716\n\t\t\t\te.preventDefault();                                                                                               // 1717\n\t\t\t\te.stopPropagation();                                                                                              // 1718\n\t\t\t}                                                                                                                  // 1719\n\t                                                                                                                     // 1720\n\t\t\t$target = $(e.currentTarget);                                                                                      // 1721\n\t\t\tif ($target.hasClass('create')) {                                                                                  // 1722\n\t\t\t\tself.createItem(null, function() {                                                                                // 1723\n\t\t\t\t\tif (self.settings.closeAfterSelect) {                                                                            // 1724\n\t\t\t\t\t\tself.close();                                                                                                   // 1725\n\t\t\t\t\t}                                                                                                                // 1726\n\t\t\t\t});                                                                                                               // 1727\n\t\t\t} else {                                                                                                           // 1728\n\t\t\t\tvalue = $target.attr('data-value');                                                                               // 1729\n\t\t\t\tif (typeof value !== 'undefined') {                                                                               // 1730\n\t\t\t\t\tself.lastQuery = null;                                                                                           // 1731\n\t\t\t\t\tself.setTextboxValue('');                                                                                        // 1732\n\t\t\t\t\tself.addItem(value);                                                                                             // 1733\n\t\t\t\t\tif (self.settings.closeAfterSelect) {                                                                            // 1734\n\t\t\t\t\t\tself.close();                                                                                                   // 1735\n\t\t\t\t\t} else if (!self.settings.hideSelected && e.type && /mouse/.test(e.type)) {                                      // 1736\n\t\t\t\t\t\tself.setActiveOption(self.getOption(value));                                                                    // 1737\n\t\t\t\t\t}                                                                                                                // 1738\n\t\t\t\t}                                                                                                                 // 1739\n\t\t\t}                                                                                                                  // 1740\n\t\t},                                                                                                                  // 1741\n\t                                                                                                                     // 1742\n\t\t/**                                                                                                                 // 1743\n\t\t * Triggered when the user clicks on an item                                                                        // 1744\n\t\t * that has been selected.                                                                                          // 1745\n\t\t *                                                                                                                  // 1746\n\t\t * @param {object} e                                                                                                // 1747\n\t\t * @returns {boolean}                                                                                               // 1748\n\t\t */                                                                                                                 // 1749\n\t\tonItemSelect: function(e) {                                                                                         // 1750\n\t\t\tvar self = this;                                                                                                   // 1751\n\t                                                                                                                     // 1752\n\t\t\tif (self.isLocked) return;                                                                                         // 1753\n\t\t\tif (self.settings.mode === 'multi') {                                                                              // 1754\n\t\t\t\te.preventDefault();                                                                                               // 1755\n\t\t\t\tself.setActiveItem(e.currentTarget, e);                                                                           // 1756\n\t\t\t}                                                                                                                  // 1757\n\t\t},                                                                                                                  // 1758\n\t                                                                                                                     // 1759\n\t\t/**                                                                                                                 // 1760\n\t\t * Invokes the provided method that provides                                                                        // 1761\n\t\t * results to a callback---which are then added                                                                     // 1762\n\t\t * as options to the control.                                                                                       // 1763\n\t\t *                                                                                                                  // 1764\n\t\t * @param {function} fn                                                                                             // 1765\n\t\t */                                                                                                                 // 1766\n\t\tload: function(fn) {                                                                                                // 1767\n\t\t\tvar self = this;                                                                                                   // 1768\n\t\t\tvar $wrapper = self.$wrapper.addClass(self.settings.loadingClass);                                                 // 1769\n\t                                                                                                                     // 1770\n\t\t\tself.loading++;                                                                                                    // 1771\n\t\t\tfn.apply(self, [function(results) {                                                                                // 1772\n\t\t\t\tself.loading = Math.max(self.loading - 1, 0);                                                                     // 1773\n\t\t\t\tif (results && results.length) {                                                                                  // 1774\n\t\t\t\t\tself.addOption(results);                                                                                         // 1775\n\t\t\t\t\tself.refreshOptions(self.isFocused && !self.isInputHidden);                                                      // 1776\n\t\t\t\t}                                                                                                                 // 1777\n\t\t\t\tif (!self.loading) {                                                                                              // 1778\n\t\t\t\t\t$wrapper.removeClass(self.settings.loadingClass);                                                                // 1779\n\t\t\t\t}                                                                                                                 // 1780\n\t\t\t\tself.trigger('load', results);                                                                                    // 1781\n\t\t\t}]);                                                                                                               // 1782\n\t\t},                                                                                                                  // 1783\n\t                                                                                                                     // 1784\n\t\t/**                                                                                                                 // 1785\n\t\t * Sets the input field of the control to the specified value.                                                      // 1786\n\t\t *                                                                                                                  // 1787\n\t\t * @param {string} value                                                                                            // 1788\n\t\t */                                                                                                                 // 1789\n\t\tsetTextboxValue: function(value) {                                                                                  // 1790\n\t\t\tvar $input = this.$control_input;                                                                                  // 1791\n\t\t\tvar changed = $input.val() !== value;                                                                              // 1792\n\t\t\tif (changed) {                                                                                                     // 1793\n\t\t\t\t$input.val(value).triggerHandler('update');                                                                       // 1794\n\t\t\t\tthis.lastValue = value;                                                                                           // 1795\n\t\t\t}                                                                                                                  // 1796\n\t\t},                                                                                                                  // 1797\n\t                                                                                                                     // 1798\n\t\t/**                                                                                                                 // 1799\n\t\t * Returns the value of the control. If multiple items                                                              // 1800\n\t\t * can be selected (e.g. <select multiple>), this returns                                                           // 1801\n\t\t * an array. If only one item can be selected, this                                                                 // 1802\n\t\t * returns a string.                                                                                                // 1803\n\t\t *                                                                                                                  // 1804\n\t\t * @returns {mixed}                                                                                                 // 1805\n\t\t */                                                                                                                 // 1806\n\t\tgetValue: function() {                                                                                              // 1807\n\t\t\tif (this.tagType === TAG_SELECT && this.$input.attr('multiple')) {                                                 // 1808\n\t\t\t\treturn this.items;                                                                                                // 1809\n\t\t\t} else {                                                                                                           // 1810\n\t\t\t\treturn this.items.join(this.settings.delimiter);                                                                  // 1811\n\t\t\t}                                                                                                                  // 1812\n\t\t},                                                                                                                  // 1813\n\t                                                                                                                     // 1814\n\t\t/**                                                                                                                 // 1815\n\t\t * Resets the selected items to the given value.                                                                    // 1816\n\t\t *                                                                                                                  // 1817\n\t\t * @param {mixed} value                                                                                             // 1818\n\t\t */                                                                                                                 // 1819\n\t\tsetValue: function(value, silent) {                                                                                 // 1820\n\t\t\tvar events = silent ? [] : ['change'];                                                                             // 1821\n\t                                                                                                                     // 1822\n\t\t\tdebounce_events(this, events, function() {                                                                         // 1823\n\t\t\t\tthis.clear(silent);                                                                                               // 1824\n\t\t\t\tthis.addItems(value, silent);                                                                                     // 1825\n\t\t\t});                                                                                                                // 1826\n\t\t},                                                                                                                  // 1827\n\t                                                                                                                     // 1828\n\t\t/**                                                                                                                 // 1829\n\t\t * Sets the selected item.                                                                                          // 1830\n\t\t *                                                                                                                  // 1831\n\t\t * @param {object} $item                                                                                            // 1832\n\t\t * @param {object} e (optional)                                                                                     // 1833\n\t\t */                                                                                                                 // 1834\n\t\tsetActiveItem: function($item, e) {                                                                                 // 1835\n\t\t\tvar self = this;                                                                                                   // 1836\n\t\t\tvar eventName;                                                                                                     // 1837\n\t\t\tvar i, idx, begin, end, item, swap;                                                                                // 1838\n\t\t\tvar $last;                                                                                                         // 1839\n\t                                                                                                                     // 1840\n\t\t\tif (self.settings.mode === 'single') return;                                                                       // 1841\n\t\t\t$item = $($item);                                                                                                  // 1842\n\t                                                                                                                     // 1843\n\t\t\t// clear the active selection                                                                                      // 1844\n\t\t\tif (!$item.length) {                                                                                               // 1845\n\t\t\t\t$(self.$activeItems).removeClass('active');                                                                       // 1846\n\t\t\t\tself.$activeItems = [];                                                                                           // 1847\n\t\t\t\tif (self.isFocused) {                                                                                             // 1848\n\t\t\t\t\tself.showInput();                                                                                                // 1849\n\t\t\t\t}                                                                                                                 // 1850\n\t\t\t\treturn;                                                                                                           // 1851\n\t\t\t}                                                                                                                  // 1852\n\t                                                                                                                     // 1853\n\t\t\t// modify selection                                                                                                // 1854\n\t\t\teventName = e && e.type.toLowerCase();                                                                             // 1855\n\t                                                                                                                     // 1856\n\t\t\tif (eventName === 'mousedown' && self.isShiftDown && self.$activeItems.length) {                                   // 1857\n\t\t\t\t$last = self.$control.children('.active:last');                                                                   // 1858\n\t\t\t\tbegin = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$last[0]]);                                   // 1859\n\t\t\t\tend   = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$item[0]]);                                   // 1860\n\t\t\t\tif (begin > end) {                                                                                                // 1861\n\t\t\t\t\tswap  = begin;                                                                                                   // 1862\n\t\t\t\t\tbegin = end;                                                                                                     // 1863\n\t\t\t\t\tend   = swap;                                                                                                    // 1864\n\t\t\t\t}                                                                                                                 // 1865\n\t\t\t\tfor (i = begin; i <= end; i++) {                                                                                  // 1866\n\t\t\t\t\titem = self.$control[0].childNodes[i];                                                                           // 1867\n\t\t\t\t\tif (self.$activeItems.indexOf(item) === -1) {                                                                    // 1868\n\t\t\t\t\t\t$(item).addClass('active');                                                                                     // 1869\n\t\t\t\t\t\tself.$activeItems.push(item);                                                                                   // 1870\n\t\t\t\t\t}                                                                                                                // 1871\n\t\t\t\t}                                                                                                                 // 1872\n\t\t\t\te.preventDefault();                                                                                               // 1873\n\t\t\t} else if ((eventName === 'mousedown' && self.isCtrlDown) || (eventName === 'keydown' && this.isShiftDown)) {      // 1874\n\t\t\t\tif ($item.hasClass('active')) {                                                                                   // 1875\n\t\t\t\t\tidx = self.$activeItems.indexOf($item[0]);                                                                       // 1876\n\t\t\t\t\tself.$activeItems.splice(idx, 1);                                                                                // 1877\n\t\t\t\t\t$item.removeClass('active');                                                                                     // 1878\n\t\t\t\t} else {                                                                                                          // 1879\n\t\t\t\t\tself.$activeItems.push($item.addClass('active')[0]);                                                             // 1880\n\t\t\t\t}                                                                                                                 // 1881\n\t\t\t} else {                                                                                                           // 1882\n\t\t\t\t$(self.$activeItems).removeClass('active');                                                                       // 1883\n\t\t\t\tself.$activeItems = [$item.addClass('active')[0]];                                                                // 1884\n\t\t\t}                                                                                                                  // 1885\n\t                                                                                                                     // 1886\n\t\t\t// ensure control has focus                                                                                        // 1887\n\t\t\tself.hideInput();                                                                                                  // 1888\n\t\t\tif (!this.isFocused) {                                                                                             // 1889\n\t\t\t\tself.focus();                                                                                                     // 1890\n\t\t\t}                                                                                                                  // 1891\n\t\t},                                                                                                                  // 1892\n\t                                                                                                                     // 1893\n\t\t/**                                                                                                                 // 1894\n\t\t * Sets the selected item in the dropdown menu                                                                      // 1895\n\t\t * of available options.                                                                                            // 1896\n\t\t *                                                                                                                  // 1897\n\t\t * @param {object} $object                                                                                          // 1898\n\t\t * @param {boolean} scroll                                                                                          // 1899\n\t\t * @param {boolean} animate                                                                                         // 1900\n\t\t */                                                                                                                 // 1901\n\t\tsetActiveOption: function($option, scroll, animate) {                                                               // 1902\n\t\t\tvar height_menu, height_item, y;                                                                                   // 1903\n\t\t\tvar scroll_top, scroll_bottom;                                                                                     // 1904\n\t\t\tvar self = this;                                                                                                   // 1905\n\t                                                                                                                     // 1906\n\t\t\tif (self.$activeOption) self.$activeOption.removeClass('active');                                                  // 1907\n\t\t\tself.$activeOption = null;                                                                                         // 1908\n\t                                                                                                                     // 1909\n\t\t\t$option = $($option);                                                                                              // 1910\n\t\t\tif (!$option.length) return;                                                                                       // 1911\n\t                                                                                                                     // 1912\n\t\t\tself.$activeOption = $option.addClass('active');                                                                   // 1913\n\t                                                                                                                     // 1914\n\t\t\tif (scroll || !isset(scroll)) {                                                                                    // 1915\n\t                                                                                                                     // 1916\n\t\t\t\theight_menu   = self.$dropdown_content.height();                                                                  // 1917\n\t\t\t\theight_item   = self.$activeOption.outerHeight(true);                                                             // 1918\n\t\t\t\tscroll        = self.$dropdown_content.scrollTop() || 0;                                                          // 1919\n\t\t\t\ty             = self.$activeOption.offset().top - self.$dropdown_content.offset().top + scroll;                   // 1920\n\t\t\t\tscroll_top    = y;                                                                                                // 1921\n\t\t\t\tscroll_bottom = y - height_menu + height_item;                                                                    // 1922\n\t                                                                                                                     // 1923\n\t\t\t\tif (y + height_item > height_menu + scroll) {                                                                     // 1924\n\t\t\t\t\tself.$dropdown_content.stop().animate({scrollTop: scroll_bottom}, animate ? self.settings.scrollDuration : 0);   // 1925\n\t\t\t\t} else if (y < scroll) {                                                                                          // 1926\n\t\t\t\t\tself.$dropdown_content.stop().animate({scrollTop: scroll_top}, animate ? self.settings.scrollDuration : 0);      // 1927\n\t\t\t\t}                                                                                                                 // 1928\n\t                                                                                                                     // 1929\n\t\t\t}                                                                                                                  // 1930\n\t\t},                                                                                                                  // 1931\n\t                                                                                                                     // 1932\n\t\t/**                                                                                                                 // 1933\n\t\t * Selects all items (CTRL + A).                                                                                    // 1934\n\t\t */                                                                                                                 // 1935\n\t\tselectAll: function() {                                                                                             // 1936\n\t\t\tvar self = this;                                                                                                   // 1937\n\t\t\tif (self.settings.mode === 'single') return;                                                                       // 1938\n\t                                                                                                                     // 1939\n\t\t\tself.$activeItems = Array.prototype.slice.apply(self.$control.children(':not(input)').addClass('active'));         // 1940\n\t\t\tif (self.$activeItems.length) {                                                                                    // 1941\n\t\t\t\tself.hideInput();                                                                                                 // 1942\n\t\t\t\tself.close();                                                                                                     // 1943\n\t\t\t}                                                                                                                  // 1944\n\t\t\tself.focus();                                                                                                      // 1945\n\t\t},                                                                                                                  // 1946\n\t                                                                                                                     // 1947\n\t\t/**                                                                                                                 // 1948\n\t\t * Hides the input element out of view, while                                                                       // 1949\n\t\t * retaining its focus.                                                                                             // 1950\n\t\t */                                                                                                                 // 1951\n\t\thideInput: function() {                                                                                             // 1952\n\t\t\tvar self = this;                                                                                                   // 1953\n\t                                                                                                                     // 1954\n\t\t\tself.setTextboxValue('');                                                                                          // 1955\n\t\t\tself.$control_input.css({opacity: 0, position: 'absolute', left: self.rtl ? 10000 : -10000});                      // 1956\n\t\t\tself.isInputHidden = true;                                                                                         // 1957\n\t\t},                                                                                                                  // 1958\n\t                                                                                                                     // 1959\n\t\t/**                                                                                                                 // 1960\n\t\t * Restores input visibility.                                                                                       // 1961\n\t\t */                                                                                                                 // 1962\n\t\tshowInput: function() {                                                                                             // 1963\n\t\t\tthis.$control_input.css({opacity: 1, position: 'relative', left: 0});                                              // 1964\n\t\t\tthis.isInputHidden = false;                                                                                        // 1965\n\t\t},                                                                                                                  // 1966\n\t                                                                                                                     // 1967\n\t\t/**                                                                                                                 // 1968\n\t\t * Gives the control focus.                                                                                         // 1969\n\t\t */                                                                                                                 // 1970\n\t\tfocus: function() {                                                                                                 // 1971\n\t\t\tvar self = this;                                                                                                   // 1972\n\t\t\tif (self.isDisabled) return;                                                                                       // 1973\n\t                                                                                                                     // 1974\n\t\t\tself.ignoreFocus = true;                                                                                           // 1975\n\t\t\tself.$control_input[0].focus();                                                                                    // 1976\n\t\t\twindow.setTimeout(function() {                                                                                     // 1977\n\t\t\t\tself.ignoreFocus = false;                                                                                         // 1978\n\t\t\t\tself.onFocus();                                                                                                   // 1979\n\t\t\t}, 0);                                                                                                             // 1980\n\t\t},                                                                                                                  // 1981\n\t                                                                                                                     // 1982\n\t\t/**                                                                                                                 // 1983\n\t\t * Forces the control out of focus.                                                                                 // 1984\n\t\t *                                                                                                                  // 1985\n\t\t * @param {Element} dest                                                                                            // 1986\n\t\t */                                                                                                                 // 1987\n\t\tblur: function(dest) {                                                                                              // 1988\n\t\t\tthis.$control_input[0].blur();                                                                                     // 1989\n\t\t\tthis.onBlur(null, dest);                                                                                           // 1990\n\t\t},                                                                                                                  // 1991\n\t                                                                                                                     // 1992\n\t\t/**                                                                                                                 // 1993\n\t\t * Returns a function that scores an object                                                                         // 1994\n\t\t * to show how good of a match it is to the                                                                         // 1995\n\t\t * provided query.                                                                                                  // 1996\n\t\t *                                                                                                                  // 1997\n\t\t * @param {string} query                                                                                            // 1998\n\t\t * @param {object} options                                                                                          // 1999\n\t\t * @return {function}                                                                                               // 2000\n\t\t */                                                                                                                 // 2001\n\t\tgetScoreFunction: function(query) {                                                                                 // 2002\n\t\t\treturn this.sifter.getScoreFunction(query, this.getSearchOptions());                                               // 2003\n\t\t},                                                                                                                  // 2004\n\t                                                                                                                     // 2005\n\t\t/**                                                                                                                 // 2006\n\t\t * Returns search options for sifter (the system                                                                    // 2007\n\t\t * for scoring and sorting results).                                                                                // 2008\n\t\t *                                                                                                                  // 2009\n\t\t * @see https://github.com/brianreavis/sifter.js                                                                    // 2010\n\t\t * @return {object}                                                                                                 // 2011\n\t\t */                                                                                                                 // 2012\n\t\tgetSearchOptions: function() {                                                                                      // 2013\n\t\t\tvar settings = this.settings;                                                                                      // 2014\n\t\t\tvar sort = settings.sortField;                                                                                     // 2015\n\t\t\tif (typeof sort === 'string') {                                                                                    // 2016\n\t\t\t\tsort = [{field: sort}];                                                                                           // 2017\n\t\t\t}                                                                                                                  // 2018\n\t                                                                                                                     // 2019\n\t\t\treturn {                                                                                                           // 2020\n\t\t\t\tfields      : settings.searchField,                                                                               // 2021\n\t\t\t\tconjunction : settings.searchConjunction,                                                                         // 2022\n\t\t\t\tsort        : sort                                                                                                // 2023\n\t\t\t};                                                                                                                 // 2024\n\t\t},                                                                                                                  // 2025\n\t                                                                                                                     // 2026\n\t\t/**                                                                                                                 // 2027\n\t\t * Searches through available options and returns                                                                   // 2028\n\t\t * a sorted array of matches.                                                                                       // 2029\n\t\t *                                                                                                                  // 2030\n\t\t * Returns an object containing:                                                                                    // 2031\n\t\t *                                                                                                                  // 2032\n\t\t *   - query {string}                                                                                               // 2033\n\t\t *   - tokens {array}                                                                                               // 2034\n\t\t *   - total {int}                                                                                                  // 2035\n\t\t *   - items {array}                                                                                                // 2036\n\t\t *                                                                                                                  // 2037\n\t\t * @param {string} query                                                                                            // 2038\n\t\t * @returns {object}                                                                                                // 2039\n\t\t */                                                                                                                 // 2040\n\t\tsearch: function(query) {                                                                                           // 2041\n\t\t\tvar i, value, score, result, calculateScore;                                                                       // 2042\n\t\t\tvar self     = this;                                                                                               // 2043\n\t\t\tvar settings = self.settings;                                                                                      // 2044\n\t\t\tvar options  = this.getSearchOptions();                                                                            // 2045\n\t                                                                                                                     // 2046\n\t\t\t// validate user-provided result scoring function                                                                  // 2047\n\t\t\tif (settings.score) {                                                                                              // 2048\n\t\t\t\tcalculateScore = self.settings.score.apply(this, [query]);                                                        // 2049\n\t\t\t\tif (typeof calculateScore !== 'function') {                                                                       // 2050\n\t\t\t\t\tthrow new Error('Selectize \"score\" setting must be a function that returns a function');                         // 2051\n\t\t\t\t}                                                                                                                 // 2052\n\t\t\t}                                                                                                                  // 2053\n\t                                                                                                                     // 2054\n\t\t\t// perform search                                                                                                  // 2055\n\t\t\tif (query !== self.lastQuery) {                                                                                    // 2056\n\t\t\t\tself.lastQuery = query;                                                                                           // 2057\n\t\t\t\tresult = self.sifter.search(query, $.extend(options, {score: calculateScore}));                                   // 2058\n\t\t\t\tself.currentResults = result;                                                                                     // 2059\n\t\t\t} else {                                                                                                           // 2060\n\t\t\t\tresult = $.extend(true, {}, self.currentResults);                                                                 // 2061\n\t\t\t}                                                                                                                  // 2062\n\t                                                                                                                     // 2063\n\t\t\t// filter out selected items                                                                                       // 2064\n\t\t\tif (settings.hideSelected) {                                                                                       // 2065\n\t\t\t\tfor (i = result.items.length - 1; i >= 0; i--) {                                                                  // 2066\n\t\t\t\t\tif (self.items.indexOf(hash_key(result.items[i].id)) !== -1) {                                                   // 2067\n\t\t\t\t\t\tresult.items.splice(i, 1);                                                                                      // 2068\n\t\t\t\t\t}                                                                                                                // 2069\n\t\t\t\t}                                                                                                                 // 2070\n\t\t\t}                                                                                                                  // 2071\n\t                                                                                                                     // 2072\n\t\t\treturn result;                                                                                                     // 2073\n\t\t},                                                                                                                  // 2074\n\t                                                                                                                     // 2075\n\t\t/**                                                                                                                 // 2076\n\t\t * Refreshes the list of available options shown                                                                    // 2077\n\t\t * in the autocomplete dropdown menu.                                                                               // 2078\n\t\t *                                                                                                                  // 2079\n\t\t * @param {boolean} triggerDropdown                                                                                 // 2080\n\t\t */                                                                                                                 // 2081\n\t\trefreshOptions: function(triggerDropdown) {                                                                         // 2082\n\t\t\tvar i, j, k, n, groups, groups_order, option, option_html, optgroup, optgroups, html, html_children, has_create_option;\n\t\t\tvar $active, $active_before, $create;                                                                              // 2084\n\t                                                                                                                     // 2085\n\t\t\tif (typeof triggerDropdown === 'undefined') {                                                                      // 2086\n\t\t\t\ttriggerDropdown = true;                                                                                           // 2087\n\t\t\t}                                                                                                                  // 2088\n\t                                                                                                                     // 2089\n\t\t\tvar self              = this;                                                                                      // 2090\n\t\t\tvar query             = $.trim(self.$control_input.val());                                                         // 2091\n\t\t\tvar results           = self.search(query);                                                                        // 2092\n\t\t\tvar $dropdown_content = self.$dropdown_content;                                                                    // 2093\n\t\t\tvar active_before     = self.$activeOption && hash_key(self.$activeOption.attr('data-value'));                     // 2094\n\t                                                                                                                     // 2095\n\t\t\t// build markup                                                                                                    // 2096\n\t\t\tn = results.items.length;                                                                                          // 2097\n\t\t\tif (typeof self.settings.maxOptions === 'number') {                                                                // 2098\n\t\t\t\tn = Math.min(n, self.settings.maxOptions);                                                                        // 2099\n\t\t\t}                                                                                                                  // 2100\n\t                                                                                                                     // 2101\n\t\t\t// render and group available options individually                                                                 // 2102\n\t\t\tgroups = {};                                                                                                       // 2103\n\t\t\tgroups_order = [];                                                                                                 // 2104\n\t                                                                                                                     // 2105\n\t\t\tfor (i = 0; i < n; i++) {                                                                                          // 2106\n\t\t\t\toption      = self.options[results.items[i].id];                                                                  // 2107\n\t\t\t\toption_html = self.render('option', option);                                                                      // 2108\n\t\t\t\toptgroup    = option[self.settings.optgroupField] || '';                                                          // 2109\n\t\t\t\toptgroups   = $.isArray(optgroup) ? optgroup : [optgroup];                                                        // 2110\n\t                                                                                                                     // 2111\n\t\t\t\tfor (j = 0, k = optgroups && optgroups.length; j < k; j++) {                                                      // 2112\n\t\t\t\t\toptgroup = optgroups[j];                                                                                         // 2113\n\t\t\t\t\tif (!self.optgroups.hasOwnProperty(optgroup)) {                                                                  // 2114\n\t\t\t\t\t\toptgroup = '';                                                                                                  // 2115\n\t\t\t\t\t}                                                                                                                // 2116\n\t\t\t\t\tif (!groups.hasOwnProperty(optgroup)) {                                                                          // 2117\n\t\t\t\t\t\tgroups[optgroup] = [];                                                                                          // 2118\n\t\t\t\t\t\tgroups_order.push(optgroup);                                                                                    // 2119\n\t\t\t\t\t}                                                                                                                // 2120\n\t\t\t\t\tgroups[optgroup].push(option_html);                                                                              // 2121\n\t\t\t\t}                                                                                                                 // 2122\n\t\t\t}                                                                                                                  // 2123\n\t                                                                                                                     // 2124\n\t\t\t// sort optgroups                                                                                                  // 2125\n\t\t\tif (this.settings.lockOptgroupOrder) {                                                                             // 2126\n\t\t\t\tgroups_order.sort(function(a, b) {                                                                                // 2127\n\t\t\t\t\tvar a_order = self.optgroups[a].$order || 0;                                                                     // 2128\n\t\t\t\t\tvar b_order = self.optgroups[b].$order || 0;                                                                     // 2129\n\t\t\t\t\treturn a_order - b_order;                                                                                        // 2130\n\t\t\t\t});                                                                                                               // 2131\n\t\t\t}                                                                                                                  // 2132\n\t                                                                                                                     // 2133\n\t\t\t// render optgroup headers & join groups                                                                           // 2134\n\t\t\thtml = [];                                                                                                         // 2135\n\t\t\tfor (i = 0, n = groups_order.length; i < n; i++) {                                                                 // 2136\n\t\t\t\toptgroup = groups_order[i];                                                                                       // 2137\n\t\t\t\tif (self.optgroups.hasOwnProperty(optgroup) && groups[optgroup].length) {                                         // 2138\n\t\t\t\t\t// render the optgroup header and options within it,                                                             // 2139\n\t\t\t\t\t// then pass it to the wrapper template                                                                          // 2140\n\t\t\t\t\thtml_children = self.render('optgroup_header', self.optgroups[optgroup]) || '';                                  // 2141\n\t\t\t\t\thtml_children += groups[optgroup].join('');                                                                      // 2142\n\t\t\t\t\thtml.push(self.render('optgroup', $.extend({}, self.optgroups[optgroup], {                                       // 2143\n\t\t\t\t\t\thtml: html_children                                                                                             // 2144\n\t\t\t\t\t})));                                                                                                            // 2145\n\t\t\t\t} else {                                                                                                          // 2146\n\t\t\t\t\thtml.push(groups[optgroup].join(''));                                                                            // 2147\n\t\t\t\t}                                                                                                                 // 2148\n\t\t\t}                                                                                                                  // 2149\n\t                                                                                                                     // 2150\n\t\t\t$dropdown_content.html(html.join(''));                                                                             // 2151\n\t                                                                                                                     // 2152\n\t\t\t// highlight matching terms inline                                                                                 // 2153\n\t\t\tif (self.settings.highlight && results.query.length && results.tokens.length) {                                    // 2154\n\t\t\t\tfor (i = 0, n = results.tokens.length; i < n; i++) {                                                              // 2155\n\t\t\t\t\thighlight($dropdown_content, results.tokens[i].regex);                                                           // 2156\n\t\t\t\t}                                                                                                                 // 2157\n\t\t\t}                                                                                                                  // 2158\n\t                                                                                                                     // 2159\n\t\t\t// add \"selected\" class to selected options                                                                        // 2160\n\t\t\tif (!self.settings.hideSelected) {                                                                                 // 2161\n\t\t\t\tfor (i = 0, n = self.items.length; i < n; i++) {                                                                  // 2162\n\t\t\t\t\tself.getOption(self.items[i]).addClass('selected');                                                              // 2163\n\t\t\t\t}                                                                                                                 // 2164\n\t\t\t}                                                                                                                  // 2165\n\t                                                                                                                     // 2166\n\t\t\t// add create option                                                                                               // 2167\n\t\t\thas_create_option = self.canCreate(query);                                                                         // 2168\n\t\t\tif (has_create_option) {                                                                                           // 2169\n\t\t\t\t$dropdown_content.prepend(self.render('option_create', {input: query}));                                          // 2170\n\t\t\t\t$create = $($dropdown_content[0].childNodes[0]);                                                                  // 2171\n\t\t\t}                                                                                                                  // 2172\n\t                                                                                                                     // 2173\n\t\t\t// activate                                                                                                        // 2174\n\t\t\tself.hasOptions = results.items.length > 0 || has_create_option;                                                   // 2175\n\t\t\tif (self.hasOptions) {                                                                                             // 2176\n\t\t\t\tif (results.items.length > 0) {                                                                                   // 2177\n\t\t\t\t\t$active_before = active_before && self.getOption(active_before);                                                 // 2178\n\t\t\t\t\tif ($active_before && $active_before.length) {                                                                   // 2179\n\t\t\t\t\t\t$active = $active_before;                                                                                       // 2180\n\t\t\t\t\t} else if (self.settings.mode === 'single' && self.items.length) {                                               // 2181\n\t\t\t\t\t\t$active = self.getOption(self.items[0]);                                                                        // 2182\n\t\t\t\t\t}                                                                                                                // 2183\n\t\t\t\t\tif (!$active || !$active.length) {                                                                               // 2184\n\t\t\t\t\t\tif ($create && !self.settings.addPrecedence) {                                                                  // 2185\n\t\t\t\t\t\t\t$active = self.getAdjacentOption($create, 1);                                                                  // 2186\n\t\t\t\t\t\t} else {                                                                                                        // 2187\n\t\t\t\t\t\t\t$active = $dropdown_content.find('[data-selectable]:first');                                                   // 2188\n\t\t\t\t\t\t}                                                                                                               // 2189\n\t\t\t\t\t}                                                                                                                // 2190\n\t\t\t\t} else {                                                                                                          // 2191\n\t\t\t\t\t$active = $create;                                                                                               // 2192\n\t\t\t\t}                                                                                                                 // 2193\n\t\t\t\tself.setActiveOption($active);                                                                                    // 2194\n\t\t\t\tif (triggerDropdown && !self.isOpen) { self.open(); }                                                             // 2195\n\t\t\t} else {                                                                                                           // 2196\n\t\t\t\tself.setActiveOption(null);                                                                                       // 2197\n\t\t\t\tif (triggerDropdown && self.isOpen) { self.close(); }                                                             // 2198\n\t\t\t}                                                                                                                  // 2199\n\t\t},                                                                                                                  // 2200\n\t                                                                                                                     // 2201\n\t\t/**                                                                                                                 // 2202\n\t\t * Adds an available option. If it already exists,                                                                  // 2203\n\t\t * nothing will happen. Note: this does not refresh                                                                 // 2204\n\t\t * the options list dropdown (use `refreshOptions`                                                                  // 2205\n\t\t * for that).                                                                                                       // 2206\n\t\t *                                                                                                                  // 2207\n\t\t * Usage:                                                                                                           // 2208\n\t\t *                                                                                                                  // 2209\n\t\t *   this.addOption(data)                                                                                           // 2210\n\t\t *                                                                                                                  // 2211\n\t\t * @param {object|array} data                                                                                       // 2212\n\t\t */                                                                                                                 // 2213\n\t\taddOption: function(data) {                                                                                         // 2214\n\t\t\tvar i, n, value, self = this;                                                                                      // 2215\n\t                                                                                                                     // 2216\n\t\t\tif ($.isArray(data)) {                                                                                             // 2217\n\t\t\t\tfor (i = 0, n = data.length; i < n; i++) {                                                                        // 2218\n\t\t\t\t\tself.addOption(data[i]);                                                                                         // 2219\n\t\t\t\t}                                                                                                                 // 2220\n\t\t\t\treturn;                                                                                                           // 2221\n\t\t\t}                                                                                                                  // 2222\n\t                                                                                                                     // 2223\n\t\t\tif (value = self.registerOption(data)) {                                                                           // 2224\n\t\t\t\tself.userOptions[value] = true;                                                                                   // 2225\n\t\t\t\tself.lastQuery = null;                                                                                            // 2226\n\t\t\t\tself.trigger('option_add', value, data);                                                                          // 2227\n\t\t\t}                                                                                                                  // 2228\n\t\t},                                                                                                                  // 2229\n\t                                                                                                                     // 2230\n\t\t/**                                                                                                                 // 2231\n\t\t * Registers an option to the pool of options.                                                                      // 2232\n\t\t *                                                                                                                  // 2233\n\t\t * @param {object} data                                                                                             // 2234\n\t\t * @return {boolean|string}                                                                                         // 2235\n\t\t */                                                                                                                 // 2236\n\t\tregisterOption: function(data) {                                                                                    // 2237\n\t\t\tvar key = hash_key(data[this.settings.valueField]);                                                                // 2238\n\t\t\tif (!key || this.options.hasOwnProperty(key)) return false;                                                        // 2239\n\t\t\tdata.$order = data.$order || ++this.order;                                                                         // 2240\n\t\t\tthis.options[key] = data;                                                                                          // 2241\n\t\t\treturn key;                                                                                                        // 2242\n\t\t},                                                                                                                  // 2243\n\t                                                                                                                     // 2244\n\t\t/**                                                                                                                 // 2245\n\t\t * Registers an option group to the pool of option groups.                                                          // 2246\n\t\t *                                                                                                                  // 2247\n\t\t * @param {object} data                                                                                             // 2248\n\t\t * @return {boolean|string}                                                                                         // 2249\n\t\t */                                                                                                                 // 2250\n\t\tregisterOptionGroup: function(data) {                                                                               // 2251\n\t\t\tvar key = hash_key(data[this.settings.optgroupValueField]);                                                        // 2252\n\t\t\tif (!key) return false;                                                                                            // 2253\n\t                                                                                                                     // 2254\n\t\t\tdata.$order = data.$order || ++this.order;                                                                         // 2255\n\t\t\tthis.optgroups[key] = data;                                                                                        // 2256\n\t\t\treturn key;                                                                                                        // 2257\n\t\t},                                                                                                                  // 2258\n\t                                                                                                                     // 2259\n\t\t/**                                                                                                                 // 2260\n\t\t * Registers a new optgroup for options                                                                             // 2261\n\t\t * to be bucketed into.                                                                                             // 2262\n\t\t *                                                                                                                  // 2263\n\t\t * @param {string} id                                                                                               // 2264\n\t\t * @param {object} data                                                                                             // 2265\n\t\t */                                                                                                                 // 2266\n\t\taddOptionGroup: function(id, data) {                                                                                // 2267\n\t\t\tdata[this.settings.optgroupValueField] = id;                                                                       // 2268\n\t\t\tif (id = this.registerOptionGroup(data)) {                                                                         // 2269\n\t\t\t\tthis.trigger('optgroup_add', id, data);                                                                           // 2270\n\t\t\t}                                                                                                                  // 2271\n\t\t},                                                                                                                  // 2272\n\t                                                                                                                     // 2273\n\t\t/**                                                                                                                 // 2274\n\t\t * Removes an existing option group.                                                                                // 2275\n\t\t *                                                                                                                  // 2276\n\t\t * @param {string} id                                                                                               // 2277\n\t\t */                                                                                                                 // 2278\n\t\tremoveOptionGroup: function(id) {                                                                                   // 2279\n\t\t\tif (this.optgroups.hasOwnProperty(id)) {                                                                           // 2280\n\t\t\t\tdelete this.optgroups[id];                                                                                        // 2281\n\t\t\t\tthis.renderCache = {};                                                                                            // 2282\n\t\t\t\tthis.trigger('optgroup_remove', id);                                                                              // 2283\n\t\t\t}                                                                                                                  // 2284\n\t\t},                                                                                                                  // 2285\n\t                                                                                                                     // 2286\n\t\t/**                                                                                                                 // 2287\n\t\t * Clears all existing option groups.                                                                               // 2288\n\t\t */                                                                                                                 // 2289\n\t\tclearOptionGroups: function() {                                                                                     // 2290\n\t\t\tthis.optgroups = {};                                                                                               // 2291\n\t\t\tthis.renderCache = {};                                                                                             // 2292\n\t\t\tthis.trigger('optgroup_clear');                                                                                    // 2293\n\t\t},                                                                                                                  // 2294\n\t                                                                                                                     // 2295\n\t\t/**                                                                                                                 // 2296\n\t\t * Updates an option available for selection. If                                                                    // 2297\n\t\t * it is visible in the selected items or options                                                                   // 2298\n\t\t * dropdown, it will be re-rendered automatically.                                                                  // 2299\n\t\t *                                                                                                                  // 2300\n\t\t * @param {string} value                                                                                            // 2301\n\t\t * @param {object} data                                                                                             // 2302\n\t\t */                                                                                                                 // 2303\n\t\tupdateOption: function(value, data) {                                                                               // 2304\n\t\t\tvar self = this;                                                                                                   // 2305\n\t\t\tvar $item, $item_new;                                                                                              // 2306\n\t\t\tvar value_new, index_item, cache_items, cache_options, order_old;                                                  // 2307\n\t                                                                                                                     // 2308\n\t\t\tvalue     = hash_key(value);                                                                                       // 2309\n\t\t\tvalue_new = hash_key(data[self.settings.valueField]);                                                              // 2310\n\t                                                                                                                     // 2311\n\t\t\t// sanity checks                                                                                                   // 2312\n\t\t\tif (value === null) return;                                                                                        // 2313\n\t\t\tif (!self.options.hasOwnProperty(value)) return;                                                                   // 2314\n\t\t\tif (typeof value_new !== 'string') throw new Error('Value must be set in option data');                            // 2315\n\t                                                                                                                     // 2316\n\t\t\torder_old = self.options[value].$order;                                                                            // 2317\n\t                                                                                                                     // 2318\n\t\t\t// update references                                                                                               // 2319\n\t\t\tif (value_new !== value) {                                                                                         // 2320\n\t\t\t\tdelete self.options[value];                                                                                       // 2321\n\t\t\t\tindex_item = self.items.indexOf(value);                                                                           // 2322\n\t\t\t\tif (index_item !== -1) {                                                                                          // 2323\n\t\t\t\t\tself.items.splice(index_item, 1, value_new);                                                                     // 2324\n\t\t\t\t}                                                                                                                 // 2325\n\t\t\t}                                                                                                                  // 2326\n\t\t\tdata.$order = data.$order || order_old;                                                                            // 2327\n\t\t\tself.options[value_new] = data;                                                                                    // 2328\n\t                                                                                                                     // 2329\n\t\t\t// invalidate render cache                                                                                         // 2330\n\t\t\tcache_items = self.renderCache['item'];                                                                            // 2331\n\t\t\tcache_options = self.renderCache['option'];                                                                        // 2332\n\t                                                                                                                     // 2333\n\t\t\tif (cache_items) {                                                                                                 // 2334\n\t\t\t\tdelete cache_items[value];                                                                                        // 2335\n\t\t\t\tdelete cache_items[value_new];                                                                                    // 2336\n\t\t\t}                                                                                                                  // 2337\n\t\t\tif (cache_options) {                                                                                               // 2338\n\t\t\t\tdelete cache_options[value];                                                                                      // 2339\n\t\t\t\tdelete cache_options[value_new];                                                                                  // 2340\n\t\t\t}                                                                                                                  // 2341\n\t                                                                                                                     // 2342\n\t\t\t// update the item if it's selected                                                                                // 2343\n\t\t\tif (self.items.indexOf(value_new) !== -1) {                                                                        // 2344\n\t\t\t\t$item = self.getItem(value);                                                                                      // 2345\n\t\t\t\t$item_new = $(self.render('item', data));                                                                         // 2346\n\t\t\t\tif ($item.hasClass('active')) $item_new.addClass('active');                                                       // 2347\n\t\t\t\t$item.replaceWith($item_new);                                                                                     // 2348\n\t\t\t}                                                                                                                  // 2349\n\t                                                                                                                     // 2350\n\t\t\t// invalidate last query because we might have updated the sortField                                               // 2351\n\t\t\tself.lastQuery = null;                                                                                             // 2352\n\t                                                                                                                     // 2353\n\t\t\t// update dropdown contents                                                                                        // 2354\n\t\t\tif (self.isOpen) {                                                                                                 // 2355\n\t\t\t\tself.refreshOptions(false);                                                                                       // 2356\n\t\t\t}                                                                                                                  // 2357\n\t\t},                                                                                                                  // 2358\n\t                                                                                                                     // 2359\n\t\t/**                                                                                                                 // 2360\n\t\t * Removes a single option.                                                                                         // 2361\n\t\t *                                                                                                                  // 2362\n\t\t * @param {string} value                                                                                            // 2363\n\t\t * @param {boolean} silent                                                                                          // 2364\n\t\t */                                                                                                                 // 2365\n\t\tremoveOption: function(value, silent) {                                                                             // 2366\n\t\t\tvar self = this;                                                                                                   // 2367\n\t\t\tvalue = hash_key(value);                                                                                           // 2368\n\t                                                                                                                     // 2369\n\t\t\tvar cache_items = self.renderCache['item'];                                                                        // 2370\n\t\t\tvar cache_options = self.renderCache['option'];                                                                    // 2371\n\t\t\tif (cache_items) delete cache_items[value];                                                                        // 2372\n\t\t\tif (cache_options) delete cache_options[value];                                                                    // 2373\n\t                                                                                                                     // 2374\n\t\t\tdelete self.userOptions[value];                                                                                    // 2375\n\t\t\tdelete self.options[value];                                                                                        // 2376\n\t\t\tself.lastQuery = null;                                                                                             // 2377\n\t\t\tself.trigger('option_remove', value);                                                                              // 2378\n\t\t\tself.removeItem(value, silent);                                                                                    // 2379\n\t\t},                                                                                                                  // 2380\n\t                                                                                                                     // 2381\n\t\t/**                                                                                                                 // 2382\n\t\t * Clears all options.                                                                                              // 2383\n\t\t */                                                                                                                 // 2384\n\t\tclearOptions: function() {                                                                                          // 2385\n\t\t\tvar self = this;                                                                                                   // 2386\n\t                                                                                                                     // 2387\n\t\t\tself.loadedSearches = {};                                                                                          // 2388\n\t\t\tself.userOptions = {};                                                                                             // 2389\n\t\t\tself.renderCache = {};                                                                                             // 2390\n\t\t\tself.options = self.sifter.items = {};                                                                             // 2391\n\t\t\tself.lastQuery = null;                                                                                             // 2392\n\t\t\tself.trigger('option_clear');                                                                                      // 2393\n\t\t\tself.clear();                                                                                                      // 2394\n\t\t},                                                                                                                  // 2395\n\t                                                                                                                     // 2396\n\t\t/**                                                                                                                 // 2397\n\t\t * Returns the jQuery element of the option                                                                         // 2398\n\t\t * matching the given value.                                                                                        // 2399\n\t\t *                                                                                                                  // 2400\n\t\t * @param {string} value                                                                                            // 2401\n\t\t * @returns {object}                                                                                                // 2402\n\t\t */                                                                                                                 // 2403\n\t\tgetOption: function(value) {                                                                                        // 2404\n\t\t\treturn this.getElementWithValue(value, this.$dropdown_content.find('[data-selectable]'));                          // 2405\n\t\t},                                                                                                                  // 2406\n\t                                                                                                                     // 2407\n\t\t/**                                                                                                                 // 2408\n\t\t * Returns the jQuery element of the next or                                                                        // 2409\n\t\t * previous selectable option.                                                                                      // 2410\n\t\t *                                                                                                                  // 2411\n\t\t * @param {object} $option                                                                                          // 2412\n\t\t * @param {int} direction  can be 1 for next or -1 for previous                                                     // 2413\n\t\t * @return {object}                                                                                                 // 2414\n\t\t */                                                                                                                 // 2415\n\t\tgetAdjacentOption: function($option, direction) {                                                                   // 2416\n\t\t\tvar $options = this.$dropdown.find('[data-selectable]');                                                           // 2417\n\t\t\tvar index    = $options.index($option) + direction;                                                                // 2418\n\t                                                                                                                     // 2419\n\t\t\treturn index >= 0 && index < $options.length ? $options.eq(index) : $();                                           // 2420\n\t\t},                                                                                                                  // 2421\n\t                                                                                                                     // 2422\n\t\t/**                                                                                                                 // 2423\n\t\t * Finds the first element with a \"data-value\" attribute                                                            // 2424\n\t\t * that matches the given value.                                                                                    // 2425\n\t\t *                                                                                                                  // 2426\n\t\t * @param {mixed} value                                                                                             // 2427\n\t\t * @param {object} $els                                                                                             // 2428\n\t\t * @return {object}                                                                                                 // 2429\n\t\t */                                                                                                                 // 2430\n\t\tgetElementWithValue: function(value, $els) {                                                                        // 2431\n\t\t\tvalue = hash_key(value);                                                                                           // 2432\n\t                                                                                                                     // 2433\n\t\t\tif (typeof value !== 'undefined' && value !== null) {                                                              // 2434\n\t\t\t\tfor (var i = 0, n = $els.length; i < n; i++) {                                                                    // 2435\n\t\t\t\t\tif ($els[i].getAttribute('data-value') === value) {                                                              // 2436\n\t\t\t\t\t\treturn $($els[i]);                                                                                              // 2437\n\t\t\t\t\t}                                                                                                                // 2438\n\t\t\t\t}                                                                                                                 // 2439\n\t\t\t}                                                                                                                  // 2440\n\t                                                                                                                     // 2441\n\t\t\treturn $();                                                                                                        // 2442\n\t\t},                                                                                                                  // 2443\n\t                                                                                                                     // 2444\n\t\t/**                                                                                                                 // 2445\n\t\t * Returns the jQuery element of the item                                                                           // 2446\n\t\t * matching the given value.                                                                                        // 2447\n\t\t *                                                                                                                  // 2448\n\t\t * @param {string} value                                                                                            // 2449\n\t\t * @returns {object}                                                                                                // 2450\n\t\t */                                                                                                                 // 2451\n\t\tgetItem: function(value) {                                                                                          // 2452\n\t\t\treturn this.getElementWithValue(value, this.$control.children());                                                  // 2453\n\t\t},                                                                                                                  // 2454\n\t                                                                                                                     // 2455\n\t\t/**                                                                                                                 // 2456\n\t\t * \"Selects\" multiple items at once. Adds them to the list                                                          // 2457\n\t\t * at the current caret position.                                                                                   // 2458\n\t\t *                                                                                                                  // 2459\n\t\t * @param {string} value                                                                                            // 2460\n\t\t * @param {boolean} silent                                                                                          // 2461\n\t\t */                                                                                                                 // 2462\n\t\taddItems: function(values, silent) {                                                                                // 2463\n\t\t\tvar items = $.isArray(values) ? values : [values];                                                                 // 2464\n\t\t\tfor (var i = 0, n = items.length; i < n; i++) {                                                                    // 2465\n\t\t\t\tthis.isPending = (i < n - 1);                                                                                     // 2466\n\t\t\t\tthis.addItem(items[i], silent);                                                                                   // 2467\n\t\t\t}                                                                                                                  // 2468\n\t\t},                                                                                                                  // 2469\n\t                                                                                                                     // 2470\n\t\t/**                                                                                                                 // 2471\n\t\t * \"Selects\" an item. Adds it to the list                                                                           // 2472\n\t\t * at the current caret position.                                                                                   // 2473\n\t\t *                                                                                                                  // 2474\n\t\t * @param {string} value                                                                                            // 2475\n\t\t * @param {boolean} silent                                                                                          // 2476\n\t\t */                                                                                                                 // 2477\n\t\taddItem: function(value, silent) {                                                                                  // 2478\n\t\t\tvar events = silent ? [] : ['change'];                                                                             // 2479\n\t                                                                                                                     // 2480\n\t\t\tdebounce_events(this, events, function() {                                                                         // 2481\n\t\t\t\tvar $item, $option, $options;                                                                                     // 2482\n\t\t\t\tvar self = this;                                                                                                  // 2483\n\t\t\t\tvar inputMode = self.settings.mode;                                                                               // 2484\n\t\t\t\tvar i, active, value_next, wasFull;                                                                               // 2485\n\t\t\t\tvalue = hash_key(value);                                                                                          // 2486\n\t                                                                                                                     // 2487\n\t\t\t\tif (self.items.indexOf(value) !== -1) {                                                                           // 2488\n\t\t\t\t\tif (inputMode === 'single') self.close();                                                                        // 2489\n\t\t\t\t\treturn;                                                                                                          // 2490\n\t\t\t\t}                                                                                                                 // 2491\n\t                                                                                                                     // 2492\n\t\t\t\tif (!self.options.hasOwnProperty(value)) return;                                                                  // 2493\n\t\t\t\tif (inputMode === 'single') self.clear(silent);                                                                   // 2494\n\t\t\t\tif (inputMode === 'multi' && self.isFull()) return;                                                               // 2495\n\t                                                                                                                     // 2496\n\t\t\t\t$item = $(self.render('item', self.options[value]));                                                              // 2497\n\t\t\t\twasFull = self.isFull();                                                                                          // 2498\n\t\t\t\tself.items.splice(self.caretPos, 0, value);                                                                       // 2499\n\t\t\t\tself.insertAtCaret($item);                                                                                        // 2500\n\t\t\t\tif (!self.isPending || (!wasFull && self.isFull())) {                                                             // 2501\n\t\t\t\t\tself.refreshState();                                                                                             // 2502\n\t\t\t\t}                                                                                                                 // 2503\n\t                                                                                                                     // 2504\n\t\t\t\tif (self.isSetup) {                                                                                               // 2505\n\t\t\t\t\t$options = self.$dropdown_content.find('[data-selectable]');                                                     // 2506\n\t                                                                                                                     // 2507\n\t\t\t\t\t// update menu / remove the option (if this is not one item being added as part of series)                       // 2508\n\t\t\t\t\tif (!self.isPending) {                                                                                           // 2509\n\t\t\t\t\t\t$option = self.getOption(value);                                                                                // 2510\n\t\t\t\t\t\tvalue_next = self.getAdjacentOption($option, 1).attr('data-value');                                             // 2511\n\t\t\t\t\t\tself.refreshOptions(self.isFocused && inputMode !== 'single');                                                  // 2512\n\t\t\t\t\t\tif (value_next) {                                                                                               // 2513\n\t\t\t\t\t\t\tself.setActiveOption(self.getOption(value_next));                                                              // 2514\n\t\t\t\t\t\t}                                                                                                               // 2515\n\t\t\t\t\t}                                                                                                                // 2516\n\t                                                                                                                     // 2517\n\t\t\t\t\t// hide the menu if the maximum number of items have been selected or no options are left                        // 2518\n\t\t\t\t\tif (!$options.length || self.isFull()) {                                                                         // 2519\n\t\t\t\t\t\tself.close();                                                                                                   // 2520\n\t\t\t\t\t} else {                                                                                                         // 2521\n\t\t\t\t\t\tself.positionDropdown();                                                                                        // 2522\n\t\t\t\t\t}                                                                                                                // 2523\n\t                                                                                                                     // 2524\n\t\t\t\t\tself.updatePlaceholder();                                                                                        // 2525\n\t\t\t\t\tself.trigger('item_add', value, $item);                                                                          // 2526\n\t\t\t\t\tself.updateOriginalInput({silent: silent});                                                                      // 2527\n\t\t\t\t}                                                                                                                 // 2528\n\t\t\t});                                                                                                                // 2529\n\t\t},                                                                                                                  // 2530\n\t                                                                                                                     // 2531\n\t\t/**                                                                                                                 // 2532\n\t\t * Removes the selected item matching                                                                               // 2533\n\t\t * the provided value.                                                                                              // 2534\n\t\t *                                                                                                                  // 2535\n\t\t * @param {string} value                                                                                            // 2536\n\t\t */                                                                                                                 // 2537\n\t\tremoveItem: function(value, silent) {                                                                               // 2538\n\t\t\tvar self = this;                                                                                                   // 2539\n\t\t\tvar $item, i, idx;                                                                                                 // 2540\n\t                                                                                                                     // 2541\n\t\t\t$item = (typeof value === 'object') ? value : self.getItem(value);                                                 // 2542\n\t\t\tvalue = hash_key($item.attr('data-value'));                                                                        // 2543\n\t\t\ti = self.items.indexOf(value);                                                                                     // 2544\n\t                                                                                                                     // 2545\n\t\t\tif (i !== -1) {                                                                                                    // 2546\n\t\t\t\t$item.remove();                                                                                                   // 2547\n\t\t\t\tif ($item.hasClass('active')) {                                                                                   // 2548\n\t\t\t\t\tidx = self.$activeItems.indexOf($item[0]);                                                                       // 2549\n\t\t\t\t\tself.$activeItems.splice(idx, 1);                                                                                // 2550\n\t\t\t\t}                                                                                                                 // 2551\n\t                                                                                                                     // 2552\n\t\t\t\tself.items.splice(i, 1);                                                                                          // 2553\n\t\t\t\tself.lastQuery = null;                                                                                            // 2554\n\t\t\t\tif (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {                                           // 2555\n\t\t\t\t\tself.removeOption(value, silent);                                                                                // 2556\n\t\t\t\t}                                                                                                                 // 2557\n\t                                                                                                                     // 2558\n\t\t\t\tif (i < self.caretPos) {                                                                                          // 2559\n\t\t\t\t\tself.setCaret(self.caretPos - 1);                                                                                // 2560\n\t\t\t\t}                                                                                                                 // 2561\n\t                                                                                                                     // 2562\n\t\t\t\tself.refreshState();                                                                                              // 2563\n\t\t\t\tself.updatePlaceholder();                                                                                         // 2564\n\t\t\t\tself.updateOriginalInput({silent: silent});                                                                       // 2565\n\t\t\t\tself.positionDropdown();                                                                                          // 2566\n\t\t\t\tself.trigger('item_remove', value, $item);                                                                        // 2567\n\t\t\t}                                                                                                                  // 2568\n\t\t},                                                                                                                  // 2569\n\t                                                                                                                     // 2570\n\t\t/**                                                                                                                 // 2571\n\t\t * Invokes the `create` method provided in the                                                                      // 2572\n\t\t * selectize options that should provide the data                                                                   // 2573\n\t\t * for the new item, given the user input.                                                                          // 2574\n\t\t *                                                                                                                  // 2575\n\t\t * Once this completes, it will be added                                                                            // 2576\n\t\t * to the item list.                                                                                                // 2577\n\t\t *                                                                                                                  // 2578\n\t\t * @param {string} value                                                                                            // 2579\n\t\t * @param {boolean} [triggerDropdown]                                                                               // 2580\n\t\t * @param {function} [callback]                                                                                     // 2581\n\t\t * @return {boolean}                                                                                                // 2582\n\t\t */                                                                                                                 // 2583\n\t\tcreateItem: function(input, triggerDropdown) {                                                                      // 2584\n\t\t\tvar self  = this;                                                                                                  // 2585\n\t\t\tvar caret = self.caretPos;                                                                                         // 2586\n\t\t\tinput = input || $.trim(self.$control_input.val() || '');                                                          // 2587\n\t                                                                                                                     // 2588\n\t\t\tvar callback = arguments[arguments.length - 1];                                                                    // 2589\n\t\t\tif (typeof callback !== 'function') callback = function() {};                                                      // 2590\n\t                                                                                                                     // 2591\n\t\t\tif (typeof triggerDropdown !== 'boolean') {                                                                        // 2592\n\t\t\t\ttriggerDropdown = true;                                                                                           // 2593\n\t\t\t}                                                                                                                  // 2594\n\t                                                                                                                     // 2595\n\t\t\tif (!self.canCreate(input)) {                                                                                      // 2596\n\t\t\t\tcallback();                                                                                                       // 2597\n\t\t\t\treturn false;                                                                                                     // 2598\n\t\t\t}                                                                                                                  // 2599\n\t                                                                                                                     // 2600\n\t\t\tself.lock();                                                                                                       // 2601\n\t                                                                                                                     // 2602\n\t\t\tvar setup = (typeof self.settings.create === 'function') ? this.settings.create : function(input) {                // 2603\n\t\t\t\tvar data = {};                                                                                                    // 2604\n\t\t\t\tdata[self.settings.labelField] = input;                                                                           // 2605\n\t\t\t\tdata[self.settings.valueField] = input;                                                                           // 2606\n\t\t\t\treturn data;                                                                                                      // 2607\n\t\t\t};                                                                                                                 // 2608\n\t                                                                                                                     // 2609\n\t\t\tvar create = once(function(data) {                                                                                 // 2610\n\t\t\t\tself.unlock();                                                                                                    // 2611\n\t                                                                                                                     // 2612\n\t\t\t\tif (!data || typeof data !== 'object') return callback();                                                         // 2613\n\t\t\t\tvar value = hash_key(data[self.settings.valueField]);                                                             // 2614\n\t\t\t\tif (typeof value !== 'string') return callback();                                                                 // 2615\n\t                                                                                                                     // 2616\n\t\t\t\tself.setTextboxValue('');                                                                                         // 2617\n\t\t\t\tself.addOption(data);                                                                                             // 2618\n\t\t\t\tself.setCaret(caret);                                                                                             // 2619\n\t\t\t\tself.addItem(value);                                                                                              // 2620\n\t\t\t\tself.refreshOptions(triggerDropdown && self.settings.mode !== 'single');                                          // 2621\n\t\t\t\tcallback(data);                                                                                                   // 2622\n\t\t\t});                                                                                                                // 2623\n\t                                                                                                                     // 2624\n\t\t\tvar output = setup.apply(this, [input, create]);                                                                   // 2625\n\t\t\tif (typeof output !== 'undefined') {                                                                               // 2626\n\t\t\t\tcreate(output);                                                                                                   // 2627\n\t\t\t}                                                                                                                  // 2628\n\t                                                                                                                     // 2629\n\t\t\treturn true;                                                                                                       // 2630\n\t\t},                                                                                                                  // 2631\n\t                                                                                                                     // 2632\n\t\t/**                                                                                                                 // 2633\n\t\t * Re-renders the selected item lists.                                                                              // 2634\n\t\t */                                                                                                                 // 2635\n\t\trefreshItems: function() {                                                                                          // 2636\n\t\t\tthis.lastQuery = null;                                                                                             // 2637\n\t                                                                                                                     // 2638\n\t\t\tif (this.isSetup) {                                                                                                // 2639\n\t\t\t\tthis.addItem(this.items);                                                                                         // 2640\n\t\t\t}                                                                                                                  // 2641\n\t                                                                                                                     // 2642\n\t\t\tthis.refreshState();                                                                                               // 2643\n\t\t\tthis.updateOriginalInput();                                                                                        // 2644\n\t\t},                                                                                                                  // 2645\n\t                                                                                                                     // 2646\n\t\t/**                                                                                                                 // 2647\n\t\t * Updates all state-dependent attributes                                                                           // 2648\n\t\t * and CSS classes.                                                                                                 // 2649\n\t\t */                                                                                                                 // 2650\n\t\trefreshState: function() {                                                                                          // 2651\n\t\t\tvar invalid, self = this;                                                                                          // 2652\n\t\t\tif (self.isRequired) {                                                                                             // 2653\n\t\t\t\tif (self.items.length) self.isInvalid = false;                                                                    // 2654\n\t\t\t\tself.$control_input.prop('required', invalid);                                                                    // 2655\n\t\t\t}                                                                                                                  // 2656\n\t\t\tself.refreshClasses();                                                                                             // 2657\n\t\t},                                                                                                                  // 2658\n\t                                                                                                                     // 2659\n\t\t/**                                                                                                                 // 2660\n\t\t * Updates all state-dependent CSS classes.                                                                         // 2661\n\t\t */                                                                                                                 // 2662\n\t\trefreshClasses: function() {                                                                                        // 2663\n\t\t\tvar self     = this;                                                                                               // 2664\n\t\t\tvar isFull   = self.isFull();                                                                                      // 2665\n\t\t\tvar isLocked = self.isLocked;                                                                                      // 2666\n\t                                                                                                                     // 2667\n\t\t\tself.$wrapper                                                                                                      // 2668\n\t\t\t\t.toggleClass('rtl', self.rtl);                                                                                    // 2669\n\t                                                                                                                     // 2670\n\t\t\tself.$control                                                                                                      // 2671\n\t\t\t\t.toggleClass('focus', self.isFocused)                                                                             // 2672\n\t\t\t\t.toggleClass('disabled', self.isDisabled)                                                                         // 2673\n\t\t\t\t.toggleClass('required', self.isRequired)                                                                         // 2674\n\t\t\t\t.toggleClass('invalid', self.isInvalid)                                                                           // 2675\n\t\t\t\t.toggleClass('locked', isLocked)                                                                                  // 2676\n\t\t\t\t.toggleClass('full', isFull).toggleClass('not-full', !isFull)                                                     // 2677\n\t\t\t\t.toggleClass('input-active', self.isFocused && !self.isInputHidden)                                               // 2678\n\t\t\t\t.toggleClass('dropdown-active', self.isOpen)                                                                      // 2679\n\t\t\t\t.toggleClass('has-options', !$.isEmptyObject(self.options))                                                       // 2680\n\t\t\t\t.toggleClass('has-items', self.items.length > 0);                                                                 // 2681\n\t                                                                                                                     // 2682\n\t\t\tself.$control_input.data('grow', !isFull && !isLocked);                                                            // 2683\n\t\t},                                                                                                                  // 2684\n\t                                                                                                                     // 2685\n\t\t/**                                                                                                                 // 2686\n\t\t * Determines whether or not more items can be added                                                                // 2687\n\t\t * to the control without exceeding the user-defined maximum.                                                       // 2688\n\t\t *                                                                                                                  // 2689\n\t\t * @returns {boolean}                                                                                               // 2690\n\t\t */                                                                                                                 // 2691\n\t\tisFull: function() {                                                                                                // 2692\n\t\t\treturn this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;                             // 2693\n\t\t},                                                                                                                  // 2694\n\t                                                                                                                     // 2695\n\t\t/**                                                                                                                 // 2696\n\t\t * Refreshes the original <select> or <input>                                                                       // 2697\n\t\t * element to reflect the current state.                                                                            // 2698\n\t\t */                                                                                                                 // 2699\n\t\tupdateOriginalInput: function(opts) {                                                                               // 2700\n\t\t\tvar i, n, options, label, self = this;                                                                             // 2701\n\t\t\topts = opts || {};                                                                                                 // 2702\n\t                                                                                                                     // 2703\n\t\t\tif (self.tagType === TAG_SELECT) {                                                                                 // 2704\n\t\t\t\toptions = [];                                                                                                     // 2705\n\t\t\t\tfor (i = 0, n = self.items.length; i < n; i++) {                                                                  // 2706\n\t\t\t\t\tlabel = self.options[self.items[i]][self.settings.labelField] || '';                                             // 2707\n\t\t\t\t\toptions.push('<option value=\"' + escape_html(self.items[i]) + '\" selected=\"selected\">' + escape_html(label) + '</option>');\n\t\t\t\t}                                                                                                                 // 2709\n\t\t\t\tif (!options.length && !this.$input.attr('multiple')) {                                                           // 2710\n\t\t\t\t\toptions.push('<option value=\"\" selected=\"selected\"></option>');                                                  // 2711\n\t\t\t\t}                                                                                                                 // 2712\n\t\t\t\tself.$input.html(options.join(''));                                                                               // 2713\n\t\t\t} else {                                                                                                           // 2714\n\t\t\t\tself.$input.val(self.getValue());                                                                                 // 2715\n\t\t\t\tself.$input.attr('value',self.$input.val());                                                                      // 2716\n\t\t\t}                                                                                                                  // 2717\n\t                                                                                                                     // 2718\n\t\t\tif (self.isSetup) {                                                                                                // 2719\n\t\t\t\tif (!opts.silent) {                                                                                               // 2720\n\t\t\t\t\tself.trigger('change', self.$input.val());                                                                       // 2721\n\t\t\t\t}                                                                                                                 // 2722\n\t\t\t}                                                                                                                  // 2723\n\t\t},                                                                                                                  // 2724\n\t                                                                                                                     // 2725\n\t\t/**                                                                                                                 // 2726\n\t\t * Shows/hide the input placeholder depending                                                                       // 2727\n\t\t * on if there items in the list already.                                                                           // 2728\n\t\t */                                                                                                                 // 2729\n\t\tupdatePlaceholder: function() {                                                                                     // 2730\n\t\t\tif (!this.settings.placeholder) return;                                                                            // 2731\n\t\t\tvar $input = this.$control_input;                                                                                  // 2732\n\t                                                                                                                     // 2733\n\t\t\tif (this.items.length) {                                                                                           // 2734\n\t\t\t\t$input.removeAttr('placeholder');                                                                                 // 2735\n\t\t\t} else {                                                                                                           // 2736\n\t\t\t\t$input.attr('placeholder', this.settings.placeholder);                                                            // 2737\n\t\t\t}                                                                                                                  // 2738\n\t\t\t$input.triggerHandler('update', {force: true});                                                                    // 2739\n\t\t},                                                                                                                  // 2740\n\t                                                                                                                     // 2741\n\t\t/**                                                                                                                 // 2742\n\t\t * Shows the autocomplete dropdown containing                                                                       // 2743\n\t\t * the available options.                                                                                           // 2744\n\t\t */                                                                                                                 // 2745\n\t\topen: function() {                                                                                                  // 2746\n\t\t\tvar self = this;                                                                                                   // 2747\n\t                                                                                                                     // 2748\n\t\t\tif (self.isLocked || self.isOpen || (self.settings.mode === 'multi' && self.isFull())) return;                     // 2749\n\t\t\tself.focus();                                                                                                      // 2750\n\t\t\tself.isOpen = true;                                                                                                // 2751\n\t\t\tself.refreshState();                                                                                               // 2752\n\t\t\tself.$dropdown.css({visibility: 'hidden', display: 'block'});                                                      // 2753\n\t\t\tself.positionDropdown();                                                                                           // 2754\n\t\t\tself.$dropdown.css({visibility: 'visible'});                                                                       // 2755\n\t\t\tself.trigger('dropdown_open', self.$dropdown);                                                                     // 2756\n\t\t},                                                                                                                  // 2757\n\t                                                                                                                     // 2758\n\t\t/**                                                                                                                 // 2759\n\t\t * Closes the autocomplete dropdown menu.                                                                           // 2760\n\t\t */                                                                                                                 // 2761\n\t\tclose: function() {                                                                                                 // 2762\n\t\t\tvar self = this;                                                                                                   // 2763\n\t\t\tvar trigger = self.isOpen;                                                                                         // 2764\n\t                                                                                                                     // 2765\n\t\t\tif (self.settings.mode === 'single' && self.items.length) {                                                        // 2766\n\t\t\t\tself.hideInput();                                                                                                 // 2767\n\t\t\t}                                                                                                                  // 2768\n\t                                                                                                                     // 2769\n\t\t\tself.isOpen = false;                                                                                               // 2770\n\t\t\tself.$dropdown.hide();                                                                                             // 2771\n\t\t\tself.setActiveOption(null);                                                                                        // 2772\n\t\t\tself.refreshState();                                                                                               // 2773\n\t                                                                                                                     // 2774\n\t\t\tif (trigger) self.trigger('dropdown_close', self.$dropdown);                                                       // 2775\n\t\t},                                                                                                                  // 2776\n\t                                                                                                                     // 2777\n\t\t/**                                                                                                                 // 2778\n\t\t * Calculates and applies the appropriate                                                                           // 2779\n\t\t * position of the dropdown.                                                                                        // 2780\n\t\t */                                                                                                                 // 2781\n\t\tpositionDropdown: function() {                                                                                      // 2782\n\t\t\tvar $control = this.$control;                                                                                      // 2783\n\t\t\tvar offset = this.settings.dropdownParent === 'body' ? $control.offset() : $control.position();                    // 2784\n\t\t\toffset.top += $control.outerHeight(true);                                                                          // 2785\n\t                                                                                                                     // 2786\n\t\t\tthis.$dropdown.css({                                                                                               // 2787\n\t\t\t\twidth : $control.outerWidth(),                                                                                    // 2788\n\t\t\t\ttop   : offset.top,                                                                                               // 2789\n\t\t\t\tleft  : offset.left                                                                                               // 2790\n\t\t\t});                                                                                                                // 2791\n\t\t},                                                                                                                  // 2792\n\t                                                                                                                     // 2793\n\t\t/**                                                                                                                 // 2794\n\t\t * Resets / clears all selected items                                                                               // 2795\n\t\t * from the control.                                                                                                // 2796\n\t\t *                                                                                                                  // 2797\n\t\t * @param {boolean} silent                                                                                          // 2798\n\t\t */                                                                                                                 // 2799\n\t\tclear: function(silent) {                                                                                           // 2800\n\t\t\tvar self = this;                                                                                                   // 2801\n\t                                                                                                                     // 2802\n\t\t\tif (!self.items.length) return;                                                                                    // 2803\n\t\t\tself.$control.children(':not(input)').remove();                                                                    // 2804\n\t\t\tself.items = [];                                                                                                   // 2805\n\t\t\tself.lastQuery = null;                                                                                             // 2806\n\t\t\tself.setCaret(0);                                                                                                  // 2807\n\t\t\tself.setActiveItem(null);                                                                                          // 2808\n\t\t\tself.updatePlaceholder();                                                                                          // 2809\n\t\t\tself.updateOriginalInput({silent: silent});                                                                        // 2810\n\t\t\tself.refreshState();                                                                                               // 2811\n\t\t\tself.showInput();                                                                                                  // 2812\n\t\t\tself.trigger('clear');                                                                                             // 2813\n\t\t},                                                                                                                  // 2814\n\t                                                                                                                     // 2815\n\t\t/**                                                                                                                 // 2816\n\t\t * A helper method for inserting an element                                                                         // 2817\n\t\t * at the current caret position.                                                                                   // 2818\n\t\t *                                                                                                                  // 2819\n\t\t * @param {object} $el                                                                                              // 2820\n\t\t */                                                                                                                 // 2821\n\t\tinsertAtCaret: function($el) {                                                                                      // 2822\n\t\t\tvar caret = Math.min(this.caretPos, this.items.length);                                                            // 2823\n\t\t\tif (caret === 0) {                                                                                                 // 2824\n\t\t\t\tthis.$control.prepend($el);                                                                                       // 2825\n\t\t\t} else {                                                                                                           // 2826\n\t\t\t\t$(this.$control[0].childNodes[caret]).before($el);                                                                // 2827\n\t\t\t}                                                                                                                  // 2828\n\t\t\tthis.setCaret(caret + 1);                                                                                          // 2829\n\t\t},                                                                                                                  // 2830\n\t                                                                                                                     // 2831\n\t\t/**                                                                                                                 // 2832\n\t\t * Removes the current selected item(s).                                                                            // 2833\n\t\t *                                                                                                                  // 2834\n\t\t * @param {object} e (optional)                                                                                     // 2835\n\t\t * @returns {boolean}                                                                                               // 2836\n\t\t */                                                                                                                 // 2837\n\t\tdeleteSelection: function(e) {                                                                                      // 2838\n\t\t\tvar i, n, direction, selection, values, caret, option_select, $option_select, $tail;                               // 2839\n\t\t\tvar self = this;                                                                                                   // 2840\n\t                                                                                                                     // 2841\n\t\t\tdirection = (e && e.keyCode === KEY_BACKSPACE) ? -1 : 1;                                                           // 2842\n\t\t\tselection = getSelection(self.$control_input[0]);                                                                  // 2843\n\t                                                                                                                     // 2844\n\t\t\tif (self.$activeOption && !self.settings.hideSelected) {                                                           // 2845\n\t\t\t\toption_select = self.getAdjacentOption(self.$activeOption, -1).attr('data-value');                                // 2846\n\t\t\t}                                                                                                                  // 2847\n\t                                                                                                                     // 2848\n\t\t\t// determine items that will be removed                                                                            // 2849\n\t\t\tvalues = [];                                                                                                       // 2850\n\t                                                                                                                     // 2851\n\t\t\tif (self.$activeItems.length) {                                                                                    // 2852\n\t\t\t\t$tail = self.$control.children('.active:' + (direction > 0 ? 'last' : 'first'));                                  // 2853\n\t\t\t\tcaret = self.$control.children(':not(input)').index($tail);                                                       // 2854\n\t\t\t\tif (direction > 0) { caret++; }                                                                                   // 2855\n\t                                                                                                                     // 2856\n\t\t\t\tfor (i = 0, n = self.$activeItems.length; i < n; i++) {                                                           // 2857\n\t\t\t\t\tvalues.push($(self.$activeItems[i]).attr('data-value'));                                                         // 2858\n\t\t\t\t}                                                                                                                 // 2859\n\t\t\t\tif (e) {                                                                                                          // 2860\n\t\t\t\t\te.preventDefault();                                                                                              // 2861\n\t\t\t\t\te.stopPropagation();                                                                                             // 2862\n\t\t\t\t}                                                                                                                 // 2863\n\t\t\t} else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {                             // 2864\n\t\t\t\tif (direction < 0 && selection.start === 0 && selection.length === 0) {                                           // 2865\n\t\t\t\t\tvalues.push(self.items[self.caretPos - 1]);                                                                      // 2866\n\t\t\t\t} else if (direction > 0 && selection.start === self.$control_input.val().length) {                               // 2867\n\t\t\t\t\tvalues.push(self.items[self.caretPos]);                                                                          // 2868\n\t\t\t\t}                                                                                                                 // 2869\n\t\t\t}                                                                                                                  // 2870\n\t                                                                                                                     // 2871\n\t\t\t// allow the callback to abort                                                                                     // 2872\n\t\t\tif (!values.length || (typeof self.settings.onDelete === 'function' && self.settings.onDelete.apply(self, [values]) === false)) {\n\t\t\t\treturn false;                                                                                                     // 2874\n\t\t\t}                                                                                                                  // 2875\n\t                                                                                                                     // 2876\n\t\t\t// perform removal                                                                                                 // 2877\n\t\t\tif (typeof caret !== 'undefined') {                                                                                // 2878\n\t\t\t\tself.setCaret(caret);                                                                                             // 2879\n\t\t\t}                                                                                                                  // 2880\n\t\t\twhile (values.length) {                                                                                            // 2881\n\t\t\t\tself.removeItem(values.pop());                                                                                    // 2882\n\t\t\t}                                                                                                                  // 2883\n\t                                                                                                                     // 2884\n\t\t\tself.showInput();                                                                                                  // 2885\n\t\t\tself.positionDropdown();                                                                                           // 2886\n\t\t\tself.refreshOptions(true);                                                                                         // 2887\n\t                                                                                                                     // 2888\n\t\t\t// select previous option                                                                                          // 2889\n\t\t\tif (option_select) {                                                                                               // 2890\n\t\t\t\t$option_select = self.getOption(option_select);                                                                   // 2891\n\t\t\t\tif ($option_select.length) {                                                                                      // 2892\n\t\t\t\t\tself.setActiveOption($option_select);                                                                            // 2893\n\t\t\t\t}                                                                                                                 // 2894\n\t\t\t}                                                                                                                  // 2895\n\t                                                                                                                     // 2896\n\t\t\treturn true;                                                                                                       // 2897\n\t\t},                                                                                                                  // 2898\n\t                                                                                                                     // 2899\n\t\t/**                                                                                                                 // 2900\n\t\t * Selects the previous / next item (depending                                                                      // 2901\n\t\t * on the `direction` argument).                                                                                    // 2902\n\t\t *                                                                                                                  // 2903\n\t\t * > 0 - right                                                                                                      // 2904\n\t\t * < 0 - left                                                                                                       // 2905\n\t\t *                                                                                                                  // 2906\n\t\t * @param {int} direction                                                                                           // 2907\n\t\t * @param {object} e (optional)                                                                                     // 2908\n\t\t */                                                                                                                 // 2909\n\t\tadvanceSelection: function(direction, e) {                                                                          // 2910\n\t\t\tvar tail, selection, idx, valueLength, cursorAtEdge, $tail;                                                        // 2911\n\t\t\tvar self = this;                                                                                                   // 2912\n\t                                                                                                                     // 2913\n\t\t\tif (direction === 0) return;                                                                                       // 2914\n\t\t\tif (self.rtl) direction *= -1;                                                                                     // 2915\n\t                                                                                                                     // 2916\n\t\t\ttail = direction > 0 ? 'last' : 'first';                                                                           // 2917\n\t\t\tselection = getSelection(self.$control_input[0]);                                                                  // 2918\n\t                                                                                                                     // 2919\n\t\t\tif (self.isFocused && !self.isInputHidden) {                                                                       // 2920\n\t\t\t\tvalueLength = self.$control_input.val().length;                                                                   // 2921\n\t\t\t\tcursorAtEdge = direction < 0                                                                                      // 2922\n\t\t\t\t\t? selection.start === 0 && selection.length === 0                                                                // 2923\n\t\t\t\t\t: selection.start === valueLength;                                                                               // 2924\n\t                                                                                                                     // 2925\n\t\t\t\tif (cursorAtEdge && !valueLength) {                                                                               // 2926\n\t\t\t\t\tself.advanceCaret(direction, e);                                                                                 // 2927\n\t\t\t\t}                                                                                                                 // 2928\n\t\t\t} else {                                                                                                           // 2929\n\t\t\t\t$tail = self.$control.children('.active:' + tail);                                                                // 2930\n\t\t\t\tif ($tail.length) {                                                                                               // 2931\n\t\t\t\t\tidx = self.$control.children(':not(input)').index($tail);                                                        // 2932\n\t\t\t\t\tself.setActiveItem(null);                                                                                        // 2933\n\t\t\t\t\tself.setCaret(direction > 0 ? idx + 1 : idx);                                                                    // 2934\n\t\t\t\t}                                                                                                                 // 2935\n\t\t\t}                                                                                                                  // 2936\n\t\t},                                                                                                                  // 2937\n\t                                                                                                                     // 2938\n\t\t/**                                                                                                                 // 2939\n\t\t * Moves the caret left / right.                                                                                    // 2940\n\t\t *                                                                                                                  // 2941\n\t\t * @param {int} direction                                                                                           // 2942\n\t\t * @param {object} e (optional)                                                                                     // 2943\n\t\t */                                                                                                                 // 2944\n\t\tadvanceCaret: function(direction, e) {                                                                              // 2945\n\t\t\tvar self = this, fn, $adj;                                                                                         // 2946\n\t                                                                                                                     // 2947\n\t\t\tif (direction === 0) return;                                                                                       // 2948\n\t                                                                                                                     // 2949\n\t\t\tfn = direction > 0 ? 'next' : 'prev';                                                                              // 2950\n\t\t\tif (self.isShiftDown) {                                                                                            // 2951\n\t\t\t\t$adj = self.$control_input[fn]();                                                                                 // 2952\n\t\t\t\tif ($adj.length) {                                                                                                // 2953\n\t\t\t\t\tself.hideInput();                                                                                                // 2954\n\t\t\t\t\tself.setActiveItem($adj);                                                                                        // 2955\n\t\t\t\t\te && e.preventDefault();                                                                                         // 2956\n\t\t\t\t}                                                                                                                 // 2957\n\t\t\t} else {                                                                                                           // 2958\n\t\t\t\tself.setCaret(self.caretPos + direction);                                                                         // 2959\n\t\t\t}                                                                                                                  // 2960\n\t\t},                                                                                                                  // 2961\n\t                                                                                                                     // 2962\n\t\t/**                                                                                                                 // 2963\n\t\t * Moves the caret to the specified index.                                                                          // 2964\n\t\t *                                                                                                                  // 2965\n\t\t * @param {int} i                                                                                                   // 2966\n\t\t */                                                                                                                 // 2967\n\t\tsetCaret: function(i) {                                                                                             // 2968\n\t\t\tvar self = this;                                                                                                   // 2969\n\t                                                                                                                     // 2970\n\t\t\tif (self.settings.mode === 'single') {                                                                             // 2971\n\t\t\t\ti = self.items.length;                                                                                            // 2972\n\t\t\t} else {                                                                                                           // 2973\n\t\t\t\ti = Math.max(0, Math.min(self.items.length, i));                                                                  // 2974\n\t\t\t}                                                                                                                  // 2975\n\t                                                                                                                     // 2976\n\t\t\tif(!self.isPending) {                                                                                              // 2977\n\t\t\t\t// the input must be moved by leaving it in place and moving the                                                  // 2978\n\t\t\t\t// siblings, due to the fact that focus cannot be restored once lost                                              // 2979\n\t\t\t\t// on mobile webkit devices                                                                                       // 2980\n\t\t\t\tvar j, n, fn, $children, $child;                                                                                  // 2981\n\t\t\t\t$children = self.$control.children(':not(input)');                                                                // 2982\n\t\t\t\tfor (j = 0, n = $children.length; j < n; j++) {                                                                   // 2983\n\t\t\t\t\t$child = $($children[j]).detach();                                                                               // 2984\n\t\t\t\t\tif (j <  i) {                                                                                                    // 2985\n\t\t\t\t\t\tself.$control_input.before($child);                                                                             // 2986\n\t\t\t\t\t} else {                                                                                                         // 2987\n\t\t\t\t\t\tself.$control.append($child);                                                                                   // 2988\n\t\t\t\t\t}                                                                                                                // 2989\n\t\t\t\t}                                                                                                                 // 2990\n\t\t\t}                                                                                                                  // 2991\n\t                                                                                                                     // 2992\n\t\t\tself.caretPos = i;                                                                                                 // 2993\n\t\t},                                                                                                                  // 2994\n\t                                                                                                                     // 2995\n\t\t/**                                                                                                                 // 2996\n\t\t * Disables user input on the control. Used while                                                                   // 2997\n\t\t * items are being asynchronously created.                                                                          // 2998\n\t\t */                                                                                                                 // 2999\n\t\tlock: function() {                                                                                                  // 3000\n\t\t\tthis.close();                                                                                                      // 3001\n\t\t\tthis.isLocked = true;                                                                                              // 3002\n\t\t\tthis.refreshState();                                                                                               // 3003\n\t\t},                                                                                                                  // 3004\n\t                                                                                                                     // 3005\n\t\t/**                                                                                                                 // 3006\n\t\t * Re-enables user input on the control.                                                                            // 3007\n\t\t */                                                                                                                 // 3008\n\t\tunlock: function() {                                                                                                // 3009\n\t\t\tthis.isLocked = false;                                                                                             // 3010\n\t\t\tthis.refreshState();                                                                                               // 3011\n\t\t},                                                                                                                  // 3012\n\t                                                                                                                     // 3013\n\t\t/**                                                                                                                 // 3014\n\t\t * Disables user input on the control completely.                                                                   // 3015\n\t\t * While disabled, it cannot receive focus.                                                                         // 3016\n\t\t */                                                                                                                 // 3017\n\t\tdisable: function() {                                                                                               // 3018\n\t\t\tvar self = this;                                                                                                   // 3019\n\t\t\tself.$input.prop('disabled', true);                                                                                // 3020\n\t\t\tself.$control_input.prop('disabled', true).prop('tabindex', -1);                                                   // 3021\n\t\t\tself.isDisabled = true;                                                                                            // 3022\n\t\t\tself.lock();                                                                                                       // 3023\n\t\t},                                                                                                                  // 3024\n\t                                                                                                                     // 3025\n\t\t/**                                                                                                                 // 3026\n\t\t * Enables the control so that it can respond                                                                       // 3027\n\t\t * to focus and user input.                                                                                         // 3028\n\t\t */                                                                                                                 // 3029\n\t\tenable: function() {                                                                                                // 3030\n\t\t\tvar self = this;                                                                                                   // 3031\n\t\t\tself.$input.prop('disabled', false);                                                                               // 3032\n\t\t\tself.$control_input.prop('disabled', false).prop('tabindex', self.tabIndex);                                       // 3033\n\t\t\tself.isDisabled = false;                                                                                           // 3034\n\t\t\tself.unlock();                                                                                                     // 3035\n\t\t},                                                                                                                  // 3036\n\t                                                                                                                     // 3037\n\t\t/**                                                                                                                 // 3038\n\t\t * Completely destroys the control and                                                                              // 3039\n\t\t * unbinds all event listeners so that it can                                                                       // 3040\n\t\t * be garbage collected.                                                                                            // 3041\n\t\t */                                                                                                                 // 3042\n\t\tdestroy: function() {                                                                                               // 3043\n\t\t\tvar self = this;                                                                                                   // 3044\n\t\t\tvar eventNS = self.eventNS;                                                                                        // 3045\n\t\t\tvar revertSettings = self.revertSettings;                                                                          // 3046\n\t                                                                                                                     // 3047\n\t\t\tself.trigger('destroy');                                                                                           // 3048\n\t\t\tself.off();                                                                                                        // 3049\n\t\t\tself.$wrapper.remove();                                                                                            // 3050\n\t\t\tself.$dropdown.remove();                                                                                           // 3051\n\t                                                                                                                     // 3052\n\t\t\tself.$input                                                                                                        // 3053\n\t\t\t\t.html('')                                                                                                         // 3054\n\t\t\t\t.append(revertSettings.$children)                                                                                 // 3055\n\t\t\t\t.removeAttr('tabindex')                                                                                           // 3056\n\t\t\t\t.removeClass('selectized')                                                                                        // 3057\n\t\t\t\t.attr({tabindex: revertSettings.tabindex})                                                                        // 3058\n\t\t\t\t.show();                                                                                                          // 3059\n\t                                                                                                                     // 3060\n\t\t\tself.$control_input.removeData('grow');                                                                            // 3061\n\t\t\tself.$input.removeData('selectize');                                                                               // 3062\n\t                                                                                                                     // 3063\n\t\t\t$(window).off(eventNS);                                                                                            // 3064\n\t\t\t$(document).off(eventNS);                                                                                          // 3065\n\t\t\t$(document.body).off(eventNS);                                                                                     // 3066\n\t                                                                                                                     // 3067\n\t\t\tdelete self.$input[0].selectize;                                                                                   // 3068\n\t\t},                                                                                                                  // 3069\n\t                                                                                                                     // 3070\n\t\t/**                                                                                                                 // 3071\n\t\t * A helper method for rendering \"item\" and                                                                         // 3072\n\t\t * \"option\" templates, given the data.                                                                              // 3073\n\t\t *                                                                                                                  // 3074\n\t\t * @param {string} templateName                                                                                     // 3075\n\t\t * @param {object} data                                                                                             // 3076\n\t\t * @returns {string}                                                                                                // 3077\n\t\t */                                                                                                                 // 3078\n\t\trender: function(templateName, data) {                                                                              // 3079\n\t\t\tvar value, id, label;                                                                                              // 3080\n\t\t\tvar html = '';                                                                                                     // 3081\n\t\t\tvar cache = false;                                                                                                 // 3082\n\t\t\tvar self = this;                                                                                                   // 3083\n\t\t\tvar regex_tag = /^[\\t \\r\\n]*<([a-z][a-z0-9\\-_]*(?:\\:[a-z][a-z0-9\\-_]*)?)/i;                                        // 3084\n\t                                                                                                                     // 3085\n\t\t\tif (templateName === 'option' || templateName === 'item') {                                                        // 3086\n\t\t\t\tvalue = hash_key(data[self.settings.valueField]);                                                                 // 3087\n\t\t\t\tcache = !!value;                                                                                                  // 3088\n\t\t\t}                                                                                                                  // 3089\n\t                                                                                                                     // 3090\n\t\t\t// pull markup from cache if it exists                                                                             // 3091\n\t\t\tif (cache) {                                                                                                       // 3092\n\t\t\t\tif (!isset(self.renderCache[templateName])) {                                                                     // 3093\n\t\t\t\t\tself.renderCache[templateName] = {};                                                                             // 3094\n\t\t\t\t}                                                                                                                 // 3095\n\t\t\t\tif (self.renderCache[templateName].hasOwnProperty(value)) {                                                       // 3096\n\t\t\t\t\treturn self.renderCache[templateName][value];                                                                    // 3097\n\t\t\t\t}                                                                                                                 // 3098\n\t\t\t}                                                                                                                  // 3099\n\t                                                                                                                     // 3100\n\t\t\t// render markup                                                                                                   // 3101\n\t\t\thtml = self.settings.render[templateName].apply(this, [data, escape_html]);                                        // 3102\n\t                                                                                                                     // 3103\n\t\t\t// add mandatory attributes                                                                                        // 3104\n\t\t\tif (templateName === 'option' || templateName === 'option_create') {                                               // 3105\n\t\t\t\thtml = html.replace(regex_tag, '<$1 data-selectable');                                                            // 3106\n\t\t\t}                                                                                                                  // 3107\n\t\t\tif (templateName === 'optgroup') {                                                                                 // 3108\n\t\t\t\tid = data[self.settings.optgroupValueField] || '';                                                                // 3109\n\t\t\t\thtml = html.replace(regex_tag, '<$1 data-group=\"' + escape_replace(escape_html(id)) + '\"');                       // 3110\n\t\t\t}                                                                                                                  // 3111\n\t\t\tif (templateName === 'option' || templateName === 'item') {                                                        // 3112\n\t\t\t\thtml = html.replace(regex_tag, '<$1 data-value=\"' + escape_replace(escape_html(value || '')) + '\"');              // 3113\n\t\t\t}                                                                                                                  // 3114\n\t                                                                                                                     // 3115\n\t\t\t// update cache                                                                                                    // 3116\n\t\t\tif (cache) {                                                                                                       // 3117\n\t\t\t\tself.renderCache[templateName][value] = html;                                                                     // 3118\n\t\t\t}                                                                                                                  // 3119\n\t                                                                                                                     // 3120\n\t\t\treturn html;                                                                                                       // 3121\n\t\t},                                                                                                                  // 3122\n\t                                                                                                                     // 3123\n\t\t/**                                                                                                                 // 3124\n\t\t * Clears the render cache for a template. If                                                                       // 3125\n\t\t * no template is given, clears all render                                                                          // 3126\n\t\t * caches.                                                                                                          // 3127\n\t\t *                                                                                                                  // 3128\n\t\t * @param {string} templateName                                                                                     // 3129\n\t\t */                                                                                                                 // 3130\n\t\tclearCache: function(templateName) {                                                                                // 3131\n\t\t\tvar self = this;                                                                                                   // 3132\n\t\t\tif (typeof templateName === 'undefined') {                                                                         // 3133\n\t\t\t\tself.renderCache = {};                                                                                            // 3134\n\t\t\t} else {                                                                                                           // 3135\n\t\t\t\tdelete self.renderCache[templateName];                                                                            // 3136\n\t\t\t}                                                                                                                  // 3137\n\t\t},                                                                                                                  // 3138\n\t                                                                                                                     // 3139\n\t\t/**                                                                                                                 // 3140\n\t\t * Determines whether or not to display the                                                                         // 3141\n\t\t * create item prompt, given a user input.                                                                          // 3142\n\t\t *                                                                                                                  // 3143\n\t\t * @param {string} input                                                                                            // 3144\n\t\t * @return {boolean}                                                                                                // 3145\n\t\t */                                                                                                                 // 3146\n\t\tcanCreate: function(input) {                                                                                        // 3147\n\t\t\tvar self = this;                                                                                                   // 3148\n\t\t\tif (!self.settings.create) return false;                                                                           // 3149\n\t\t\tvar filter = self.settings.createFilter;                                                                           // 3150\n\t\t\treturn input.length                                                                                                // 3151\n\t\t\t\t&& (typeof filter !== 'function' || filter.apply(self, [input]))                                                  // 3152\n\t\t\t\t&& (typeof filter !== 'string' || new RegExp(filter).test(input))                                                 // 3153\n\t\t\t\t&& (!(filter instanceof RegExp) || filter.test(input));                                                           // 3154\n\t\t}                                                                                                                   // 3155\n\t                                                                                                                     // 3156\n\t});                                                                                                                  // 3157\n\t                                                                                                                     // 3158\n\t                                                                                                                     // 3159\n\tSelectize.count = 0;                                                                                                 // 3160\n\tSelectize.defaults = {                                                                                               // 3161\n\t\toptions: [],                                                                                                        // 3162\n\t\toptgroups: [],                                                                                                      // 3163\n\t                                                                                                                     // 3164\n\t\tplugins: [],                                                                                                        // 3165\n\t\tdelimiter: ',',                                                                                                     // 3166\n\t\tsplitOn: null, // regexp or string for splitting up values from a paste command                                     // 3167\n\t\tpersist: true,                                                                                                      // 3168\n\t\tdiacritics: true,                                                                                                   // 3169\n\t\tcreate: false,                                                                                                      // 3170\n\t\tcreateOnBlur: false,                                                                                                // 3171\n\t\tcreateFilter: null,                                                                                                 // 3172\n\t\thighlight: true,                                                                                                    // 3173\n\t\topenOnFocus: true,                                                                                                  // 3174\n\t\tmaxOptions: 1000,                                                                                                   // 3175\n\t\tmaxItems: null,                                                                                                     // 3176\n\t\thideSelected: null,                                                                                                 // 3177\n\t\taddPrecedence: false,                                                                                               // 3178\n\t\tselectOnTab: false,                                                                                                 // 3179\n\t\tpreload: false,                                                                                                     // 3180\n\t\tallowEmptyOption: false,                                                                                            // 3181\n\t\tcloseAfterSelect: false,                                                                                            // 3182\n\t                                                                                                                     // 3183\n\t\tscrollDuration: 60,                                                                                                 // 3184\n\t\tloadThrottle: 300,                                                                                                  // 3185\n\t\tloadingClass: 'loading',                                                                                            // 3186\n\t                                                                                                                     // 3187\n\t\tdataAttr: 'data-data',                                                                                              // 3188\n\t\toptgroupField: 'optgroup',                                                                                          // 3189\n\t\tvalueField: 'value',                                                                                                // 3190\n\t\tlabelField: 'text',                                                                                                 // 3191\n\t\toptgroupLabelField: 'label',                                                                                        // 3192\n\t\toptgroupValueField: 'value',                                                                                        // 3193\n\t\tlockOptgroupOrder: false,                                                                                           // 3194\n\t                                                                                                                     // 3195\n\t\tsortField: '$order',                                                                                                // 3196\n\t\tsearchField: ['text'],                                                                                              // 3197\n\t\tsearchConjunction: 'and',                                                                                           // 3198\n\t                                                                                                                     // 3199\n\t\tmode: null,                                                                                                         // 3200\n\t\twrapperClass: 'selectize-control',                                                                                  // 3201\n\t\tinputClass: 'selectize-input',                                                                                      // 3202\n\t\tdropdownClass: 'selectize-dropdown',                                                                                // 3203\n\t\tdropdownContentClass: 'selectize-dropdown-content',                                                                 // 3204\n\t                                                                                                                     // 3205\n\t\tdropdownParent: null,                                                                                               // 3206\n\t                                                                                                                     // 3207\n\t\tcopyClassesToDropdown: true,                                                                                        // 3208\n\t                                                                                                                     // 3209\n\t\t/*                                                                                                                  // 3210\n\t\tload                 : null, // function(query, callback) { ... }                                                   // 3211\n\t\tscore                : null, // function(search) { ... }                                                            // 3212\n\t\tonInitialize         : null, // function() { ... }                                                                  // 3213\n\t\tonChange             : null, // function(value) { ... }                                                             // 3214\n\t\tonItemAdd            : null, // function(value, $item) { ... }                                                      // 3215\n\t\tonItemRemove         : null, // function(value) { ... }                                                             // 3216\n\t\tonClear              : null, // function() { ... }                                                                  // 3217\n\t\tonOptionAdd          : null, // function(value, data) { ... }                                                       // 3218\n\t\tonOptionRemove       : null, // function(value) { ... }                                                             // 3219\n\t\tonOptionClear        : null, // function() { ... }                                                                  // 3220\n\t\tonOptionGroupAdd     : null, // function(id, data) { ... }                                                          // 3221\n\t\tonOptionGroupRemove  : null, // function(id) { ... }                                                                // 3222\n\t\tonOptionGroupClear   : null, // function() { ... }                                                                  // 3223\n\t\tonDropdownOpen       : null, // function($dropdown) { ... }                                                         // 3224\n\t\tonDropdownClose      : null, // function($dropdown) { ... }                                                         // 3225\n\t\tonType               : null, // function(str) { ... }                                                               // 3226\n\t\tonDelete             : null, // function(values) { ... }                                                            // 3227\n\t\t*/                                                                                                                  // 3228\n\t                                                                                                                     // 3229\n\t\trender: {                                                                                                           // 3230\n\t\t\t/*                                                                                                                 // 3231\n\t\t\titem: null,                                                                                                        // 3232\n\t\t\toptgroup: null,                                                                                                    // 3233\n\t\t\toptgroup_header: null,                                                                                             // 3234\n\t\t\toption: null,                                                                                                      // 3235\n\t\t\toption_create: null                                                                                                // 3236\n\t\t\t*/                                                                                                                 // 3237\n\t\t}                                                                                                                   // 3238\n\t};                                                                                                                   // 3239\n\t                                                                                                                     // 3240\n\t                                                                                                                     // 3241\n\t$.fn.selectize = function(settings_user) {                                                                           // 3242\n\t\tvar defaults             = $.fn.selectize.defaults;                                                                 // 3243\n\t\tvar settings             = $.extend({}, defaults, settings_user);                                                   // 3244\n\t\tvar attr_data            = settings.dataAttr;                                                                       // 3245\n\t\tvar field_label          = settings.labelField;                                                                     // 3246\n\t\tvar field_value          = settings.valueField;                                                                     // 3247\n\t\tvar field_optgroup       = settings.optgroupField;                                                                  // 3248\n\t\tvar field_optgroup_label = settings.optgroupLabelField;                                                             // 3249\n\t\tvar field_optgroup_value = settings.optgroupValueField;                                                             // 3250\n\t                                                                                                                     // 3251\n\t\t/**                                                                                                                 // 3252\n\t\t * Initializes selectize from a <input type=\"text\"> element.                                                        // 3253\n\t\t *                                                                                                                  // 3254\n\t\t * @param {object} $input                                                                                           // 3255\n\t\t * @param {object} settings_element                                                                                 // 3256\n\t\t */                                                                                                                 // 3257\n\t\tvar init_textbox = function($input, settings_element) {                                                             // 3258\n\t\t\tvar i, n, values, option;                                                                                          // 3259\n\t                                                                                                                     // 3260\n\t\t\tvar data_raw = $input.attr(attr_data);                                                                             // 3261\n\t                                                                                                                     // 3262\n\t\t\tif (!data_raw) {                                                                                                   // 3263\n\t\t\t\tvar value = $.trim($input.val() || '');                                                                           // 3264\n\t\t\t\tif (!settings.allowEmptyOption && !value.length) return;                                                          // 3265\n\t\t\t\tvalues = value.split(settings.delimiter);                                                                         // 3266\n\t\t\t\tfor (i = 0, n = values.length; i < n; i++) {                                                                      // 3267\n\t\t\t\t\toption = {};                                                                                                     // 3268\n\t\t\t\t\toption[field_label] = values[i];                                                                                 // 3269\n\t\t\t\t\toption[field_value] = values[i];                                                                                 // 3270\n\t\t\t\t\tsettings_element.options.push(option);                                                                           // 3271\n\t\t\t\t}                                                                                                                 // 3272\n\t\t\t\tsettings_element.items = values;                                                                                  // 3273\n\t\t\t} else {                                                                                                           // 3274\n\t\t\t\tsettings_element.options = JSON.parse(data_raw);                                                                  // 3275\n\t\t\t\tfor (i = 0, n = settings_element.options.length; i < n; i++) {                                                    // 3276\n\t\t\t\t\tsettings_element.items.push(settings_element.options[i][field_value]);                                           // 3277\n\t\t\t\t}                                                                                                                 // 3278\n\t\t\t}                                                                                                                  // 3279\n\t\t};                                                                                                                  // 3280\n\t                                                                                                                     // 3281\n\t\t/**                                                                                                                 // 3282\n\t\t * Initializes selectize from a <select> element.                                                                   // 3283\n\t\t *                                                                                                                  // 3284\n\t\t * @param {object} $input                                                                                           // 3285\n\t\t * @param {object} settings_element                                                                                 // 3286\n\t\t */                                                                                                                 // 3287\n\t\tvar init_select = function($input, settings_element) {                                                              // 3288\n\t\t\tvar i, n, tagName, $children, order = 0;                                                                           // 3289\n\t\t\tvar options = settings_element.options;                                                                            // 3290\n\t\t\tvar optionsMap = {};                                                                                               // 3291\n\t                                                                                                                     // 3292\n\t\t\tvar readData = function($el) {                                                                                     // 3293\n\t\t\t\tvar data = attr_data && $el.attr(attr_data);                                                                      // 3294\n\t\t\t\tif (typeof data === 'string' && data.length) {                                                                    // 3295\n\t\t\t\t\treturn JSON.parse(data);                                                                                         // 3296\n\t\t\t\t}                                                                                                                 // 3297\n\t\t\t\treturn null;                                                                                                      // 3298\n\t\t\t};                                                                                                                 // 3299\n\t                                                                                                                     // 3300\n\t\t\tvar addOption = function($option, group) {                                                                         // 3301\n\t\t\t\t$option = $($option);                                                                                             // 3302\n\t                                                                                                                     // 3303\n\t\t\t\tvar value = hash_key($option.attr('value'));                                                                      // 3304\n\t\t\t\tif (!value && !settings.allowEmptyOption) return;                                                                 // 3305\n\t                                                                                                                     // 3306\n\t\t\t\t// if the option already exists, it's probably been                                                               // 3307\n\t\t\t\t// duplicated in another optgroup. in this case, push                                                             // 3308\n\t\t\t\t// the current group to the \"optgroup\" property on the                                                            // 3309\n\t\t\t\t// existing option so that it's rendered in both places.                                                          // 3310\n\t\t\t\tif (optionsMap.hasOwnProperty(value)) {                                                                           // 3311\n\t\t\t\t\tif (group) {                                                                                                     // 3312\n\t\t\t\t\t\tvar arr = optionsMap[value][field_optgroup];                                                                    // 3313\n\t\t\t\t\t\tif (!arr) {                                                                                                     // 3314\n\t\t\t\t\t\t\toptionsMap[value][field_optgroup] = group;                                                                     // 3315\n\t\t\t\t\t\t} else if (!$.isArray(arr)) {                                                                                   // 3316\n\t\t\t\t\t\t\toptionsMap[value][field_optgroup] = [arr, group];                                                              // 3317\n\t\t\t\t\t\t} else {                                                                                                        // 3318\n\t\t\t\t\t\t\tarr.push(group);                                                                                               // 3319\n\t\t\t\t\t\t}                                                                                                               // 3320\n\t\t\t\t\t}                                                                                                                // 3321\n\t\t\t\t\treturn;                                                                                                          // 3322\n\t\t\t\t}                                                                                                                 // 3323\n\t                                                                                                                     // 3324\n\t\t\t\tvar option             = readData($option) || {};                                                                 // 3325\n\t\t\t\toption[field_label]    = option[field_label] || $option.text();                                                   // 3326\n\t\t\t\toption[field_value]    = option[field_value] || value;                                                            // 3327\n\t\t\t\toption[field_optgroup] = option[field_optgroup] || group;                                                         // 3328\n\t                                                                                                                     // 3329\n\t\t\t\toptionsMap[value] = option;                                                                                       // 3330\n\t\t\t\toptions.push(option);                                                                                             // 3331\n\t                                                                                                                     // 3332\n\t\t\t\tif ($option.is(':selected')) {                                                                                    // 3333\n\t\t\t\t\tsettings_element.items.push(value);                                                                              // 3334\n\t\t\t\t}                                                                                                                 // 3335\n\t\t\t};                                                                                                                 // 3336\n\t                                                                                                                     // 3337\n\t\t\tvar addGroup = function($optgroup) {                                                                               // 3338\n\t\t\t\tvar i, n, id, optgroup, $options;                                                                                 // 3339\n\t                                                                                                                     // 3340\n\t\t\t\t$optgroup = $($optgroup);                                                                                         // 3341\n\t\t\t\tid = $optgroup.attr('label');                                                                                     // 3342\n\t                                                                                                                     // 3343\n\t\t\t\tif (id) {                                                                                                         // 3344\n\t\t\t\t\toptgroup = readData($optgroup) || {};                                                                            // 3345\n\t\t\t\t\toptgroup[field_optgroup_label] = id;                                                                             // 3346\n\t\t\t\t\toptgroup[field_optgroup_value] = id;                                                                             // 3347\n\t\t\t\t\tsettings_element.optgroups.push(optgroup);                                                                       // 3348\n\t\t\t\t}                                                                                                                 // 3349\n\t                                                                                                                     // 3350\n\t\t\t\t$options = $('option', $optgroup);                                                                                // 3351\n\t\t\t\tfor (i = 0, n = $options.length; i < n; i++) {                                                                    // 3352\n\t\t\t\t\taddOption($options[i], id);                                                                                      // 3353\n\t\t\t\t}                                                                                                                 // 3354\n\t\t\t};                                                                                                                 // 3355\n\t                                                                                                                     // 3356\n\t\t\tsettings_element.maxItems = $input.attr('multiple') ? null : 1;                                                    // 3357\n\t                                                                                                                     // 3358\n\t\t\t$children = $input.children();                                                                                     // 3359\n\t\t\tfor (i = 0, n = $children.length; i < n; i++) {                                                                    // 3360\n\t\t\t\ttagName = $children[i].tagName.toLowerCase();                                                                     // 3361\n\t\t\t\tif (tagName === 'optgroup') {                                                                                     // 3362\n\t\t\t\t\taddGroup($children[i]);                                                                                          // 3363\n\t\t\t\t} else if (tagName === 'option') {                                                                                // 3364\n\t\t\t\t\taddOption($children[i]);                                                                                         // 3365\n\t\t\t\t}                                                                                                                 // 3366\n\t\t\t}                                                                                                                  // 3367\n\t\t};                                                                                                                  // 3368\n\t                                                                                                                     // 3369\n\t\treturn this.each(function() {                                                                                       // 3370\n\t\t\tif (this.selectize) return;                                                                                        // 3371\n\t                                                                                                                     // 3372\n\t\t\tvar instance;                                                                                                      // 3373\n\t\t\tvar $input = $(this);                                                                                              // 3374\n\t\t\tvar tag_name = this.tagName.toLowerCase();                                                                         // 3375\n\t\t\tvar placeholder = $input.attr('placeholder') || $input.attr('data-placeholder');                                   // 3376\n\t\t\tif (!placeholder && !settings.allowEmptyOption) {                                                                  // 3377\n\t\t\t\tplaceholder = $input.children('option[value=\"\"]').text();                                                         // 3378\n\t\t\t}                                                                                                                  // 3379\n\t                                                                                                                     // 3380\n\t\t\tvar settings_element = {                                                                                           // 3381\n\t\t\t\t'placeholder' : placeholder,                                                                                      // 3382\n\t\t\t\t'options'     : [],                                                                                               // 3383\n\t\t\t\t'optgroups'   : [],                                                                                               // 3384\n\t\t\t\t'items'       : []                                                                                                // 3385\n\t\t\t};                                                                                                                 // 3386\n\t                                                                                                                     // 3387\n\t\t\tif (tag_name === 'select') {                                                                                       // 3388\n\t\t\t\tinit_select($input, settings_element);                                                                            // 3389\n\t\t\t} else {                                                                                                           // 3390\n\t\t\t\tinit_textbox($input, settings_element);                                                                           // 3391\n\t\t\t}                                                                                                                  // 3392\n\t                                                                                                                     // 3393\n\t\t\tinstance = new Selectize($input, $.extend(true, {}, defaults, settings_element, settings_user));                   // 3394\n\t\t});                                                                                                                 // 3395\n\t};                                                                                                                   // 3396\n\t                                                                                                                     // 3397\n\t$.fn.selectize.defaults = Selectize.defaults;                                                                        // 3398\n\t$.fn.selectize.support = {                                                                                           // 3399\n\t\tvalidity: SUPPORTS_VALIDITY_API                                                                                     // 3400\n\t};                                                                                                                   // 3401\n\t                                                                                                                     // 3402\n\t                                                                                                                     // 3403\n\tSelectize.define('drag_drop', function(options) {                                                                    // 3404\n\t\tif (!$.fn.sortable) throw new Error('The \"drag_drop\" plugin requires jQuery UI \"sortable\".');                       // 3405\n\t\tif (this.settings.mode !== 'multi') return;                                                                         // 3406\n\t\tvar self = this;                                                                                                    // 3407\n\t                                                                                                                     // 3408\n\t\tself.lock = (function() {                                                                                           // 3409\n\t\t\tvar original = self.lock;                                                                                          // 3410\n\t\t\treturn function() {                                                                                                // 3411\n\t\t\t\tvar sortable = self.$control.data('sortable');                                                                    // 3412\n\t\t\t\tif (sortable) sortable.disable();                                                                                 // 3413\n\t\t\t\treturn original.apply(self, arguments);                                                                           // 3414\n\t\t\t};                                                                                                                 // 3415\n\t\t})();                                                                                                               // 3416\n\t                                                                                                                     // 3417\n\t\tself.unlock = (function() {                                                                                         // 3418\n\t\t\tvar original = self.unlock;                                                                                        // 3419\n\t\t\treturn function() {                                                                                                // 3420\n\t\t\t\tvar sortable = self.$control.data('sortable');                                                                    // 3421\n\t\t\t\tif (sortable) sortable.enable();                                                                                  // 3422\n\t\t\t\treturn original.apply(self, arguments);                                                                           // 3423\n\t\t\t};                                                                                                                 // 3424\n\t\t})();                                                                                                               // 3425\n\t                                                                                                                     // 3426\n\t\tself.setup = (function() {                                                                                          // 3427\n\t\t\tvar original = self.setup;                                                                                         // 3428\n\t\t\treturn function() {                                                                                                // 3429\n\t\t\t\toriginal.apply(this, arguments);                                                                                  // 3430\n\t                                                                                                                     // 3431\n\t\t\t\tvar $control = self.$control.sortable({                                                                           // 3432\n\t\t\t\t\titems: '[data-value]',                                                                                           // 3433\n\t\t\t\t\tforcePlaceholderSize: true,                                                                                      // 3434\n\t\t\t\t\tdisabled: self.isLocked,                                                                                         // 3435\n\t\t\t\t\tstart: function(e, ui) {                                                                                         // 3436\n\t\t\t\t\t\tui.placeholder.css('width', ui.helper.css('width'));                                                            // 3437\n\t\t\t\t\t\t$control.css({overflow: 'visible'});                                                                            // 3438\n\t\t\t\t\t},                                                                                                               // 3439\n\t\t\t\t\tstop: function() {                                                                                               // 3440\n\t\t\t\t\t\t$control.css({overflow: 'hidden'});                                                                             // 3441\n\t\t\t\t\t\tvar active = self.$activeItems ? self.$activeItems.slice() : null;                                              // 3442\n\t\t\t\t\t\tvar values = [];                                                                                                // 3443\n\t\t\t\t\t\t$control.children('[data-value]').each(function() {                                                             // 3444\n\t\t\t\t\t\t\tvalues.push($(this).attr('data-value'));                                                                       // 3445\n\t\t\t\t\t\t});                                                                                                             // 3446\n\t\t\t\t\t\tself.setValue(values);                                                                                          // 3447\n\t\t\t\t\t\tself.setActiveItem(active);                                                                                     // 3448\n\t\t\t\t\t}                                                                                                                // 3449\n\t\t\t\t});                                                                                                               // 3450\n\t\t\t};                                                                                                                 // 3451\n\t\t})();                                                                                                               // 3452\n\t                                                                                                                     // 3453\n\t});                                                                                                                  // 3454\n\t                                                                                                                     // 3455\n\tSelectize.define('dropdown_header', function(options) {                                                              // 3456\n\t\tvar self = this;                                                                                                    // 3457\n\t                                                                                                                     // 3458\n\t\toptions = $.extend({                                                                                                // 3459\n\t\t\ttitle         : 'Untitled',                                                                                        // 3460\n\t\t\theaderClass   : 'selectize-dropdown-header',                                                                       // 3461\n\t\t\ttitleRowClass : 'selectize-dropdown-header-title',                                                                 // 3462\n\t\t\tlabelClass    : 'selectize-dropdown-header-label',                                                                 // 3463\n\t\t\tcloseClass    : 'selectize-dropdown-header-close',                                                                 // 3464\n\t                                                                                                                     // 3465\n\t\t\thtml: function(data) {                                                                                             // 3466\n\t\t\t\treturn (                                                                                                          // 3467\n\t\t\t\t\t'<div class=\"' + data.headerClass + '\">' +                                                                       // 3468\n\t\t\t\t\t\t'<div class=\"' + data.titleRowClass + '\">' +                                                                    // 3469\n\t\t\t\t\t\t\t'<span class=\"' + data.labelClass + '\">' + data.title + '</span>' +                                            // 3470\n\t\t\t\t\t\t\t'<a href=\"javascript:void(0)\" class=\"' + data.closeClass + '\">&times;</a>' +                                   // 3471\n\t\t\t\t\t\t'</div>' +                                                                                                      // 3472\n\t\t\t\t\t'</div>'                                                                                                         // 3473\n\t\t\t\t);                                                                                                                // 3474\n\t\t\t}                                                                                                                  // 3475\n\t\t}, options);                                                                                                        // 3476\n\t                                                                                                                     // 3477\n\t\tself.setup = (function() {                                                                                          // 3478\n\t\t\tvar original = self.setup;                                                                                         // 3479\n\t\t\treturn function() {                                                                                                // 3480\n\t\t\t\toriginal.apply(self, arguments);                                                                                  // 3481\n\t\t\t\tself.$dropdown_header = $(options.html(options));                                                                 // 3482\n\t\t\t\tself.$dropdown.prepend(self.$dropdown_header);                                                                    // 3483\n\t\t\t};                                                                                                                 // 3484\n\t\t})();                                                                                                               // 3485\n\t                                                                                                                     // 3486\n\t});                                                                                                                  // 3487\n\t                                                                                                                     // 3488\n\tSelectize.define('optgroup_columns', function(options) {                                                             // 3489\n\t\tvar self = this;                                                                                                    // 3490\n\t                                                                                                                     // 3491\n\t\toptions = $.extend({                                                                                                // 3492\n\t\t\tequalizeWidth  : true,                                                                                             // 3493\n\t\t\tequalizeHeight : true                                                                                              // 3494\n\t\t}, options);                                                                                                        // 3495\n\t                                                                                                                     // 3496\n\t\tthis.getAdjacentOption = function($option, direction) {                                                             // 3497\n\t\t\tvar $options = $option.closest('[data-group]').find('[data-selectable]');                                          // 3498\n\t\t\tvar index    = $options.index($option) + direction;                                                                // 3499\n\t                                                                                                                     // 3500\n\t\t\treturn index >= 0 && index < $options.length ? $options.eq(index) : $();                                           // 3501\n\t\t};                                                                                                                  // 3502\n\t                                                                                                                     // 3503\n\t\tthis.onKeyDown = (function() {                                                                                      // 3504\n\t\t\tvar original = self.onKeyDown;                                                                                     // 3505\n\t\t\treturn function(e) {                                                                                               // 3506\n\t\t\t\tvar index, $option, $options, $optgroup;                                                                          // 3507\n\t                                                                                                                     // 3508\n\t\t\t\tif (this.isOpen && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)) {                                         // 3509\n\t\t\t\t\tself.ignoreHover = true;                                                                                         // 3510\n\t\t\t\t\t$optgroup = this.$activeOption.closest('[data-group]');                                                          // 3511\n\t\t\t\t\tindex = $optgroup.find('[data-selectable]').index(this.$activeOption);                                           // 3512\n\t                                                                                                                     // 3513\n\t\t\t\t\tif(e.keyCode === KEY_LEFT) {                                                                                     // 3514\n\t\t\t\t\t\t$optgroup = $optgroup.prev('[data-group]');                                                                     // 3515\n\t\t\t\t\t} else {                                                                                                         // 3516\n\t\t\t\t\t\t$optgroup = $optgroup.next('[data-group]');                                                                     // 3517\n\t\t\t\t\t}                                                                                                                // 3518\n\t                                                                                                                     // 3519\n\t\t\t\t\t$options = $optgroup.find('[data-selectable]');                                                                  // 3520\n\t\t\t\t\t$option  = $options.eq(Math.min($options.length - 1, index));                                                    // 3521\n\t\t\t\t\tif ($option.length) {                                                                                            // 3522\n\t\t\t\t\t\tthis.setActiveOption($option);                                                                                  // 3523\n\t\t\t\t\t}                                                                                                                // 3524\n\t\t\t\t\treturn;                                                                                                          // 3525\n\t\t\t\t}                                                                                                                 // 3526\n\t                                                                                                                     // 3527\n\t\t\t\treturn original.apply(this, arguments);                                                                           // 3528\n\t\t\t};                                                                                                                 // 3529\n\t\t})();                                                                                                               // 3530\n\t                                                                                                                     // 3531\n\t\tvar getScrollbarWidth = function() {                                                                                // 3532\n\t\t\tvar div;                                                                                                           // 3533\n\t\t\tvar width = getScrollbarWidth.width;                                                                               // 3534\n\t\t\tvar doc = document;                                                                                                // 3535\n\t                                                                                                                     // 3536\n\t\t\tif (typeof width === 'undefined') {                                                                                // 3537\n\t\t\t\tdiv = doc.createElement('div');                                                                                   // 3538\n\t\t\t\tdiv.innerHTML = '<div style=\"width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;\"><div style=\"width:1px;height:100px;\"></div></div>';\n\t\t\t\tdiv = div.firstChild;                                                                                             // 3540\n\t\t\t\tdoc.body.appendChild(div);                                                                                        // 3541\n\t\t\t\twidth = getScrollbarWidth.width = div.offsetWidth - div.clientWidth;                                              // 3542\n\t\t\t\tdoc.body.removeChild(div);                                                                                        // 3543\n\t\t\t}                                                                                                                  // 3544\n\t\t\treturn width;                                                                                                      // 3545\n\t\t};                                                                                                                  // 3546\n\t                                                                                                                     // 3547\n\t\tvar equalizeSizes = function() {                                                                                    // 3548\n\t\t\tvar i, n, height_max, width, width_last, width_parent, $optgroups;                                                 // 3549\n\t                                                                                                                     // 3550\n\t\t\t$optgroups = $('[data-group]', self.$dropdown_content);                                                            // 3551\n\t\t\tn = $optgroups.length;                                                                                             // 3552\n\t\t\tif (!n || !self.$dropdown_content.width()) return;                                                                 // 3553\n\t                                                                                                                     // 3554\n\t\t\tif (options.equalizeHeight) {                                                                                      // 3555\n\t\t\t\theight_max = 0;                                                                                                   // 3556\n\t\t\t\tfor (i = 0; i < n; i++) {                                                                                         // 3557\n\t\t\t\t\theight_max = Math.max(height_max, $optgroups.eq(i).height());                                                    // 3558\n\t\t\t\t}                                                                                                                 // 3559\n\t\t\t\t$optgroups.css({height: height_max});                                                                             // 3560\n\t\t\t}                                                                                                                  // 3561\n\t                                                                                                                     // 3562\n\t\t\tif (options.equalizeWidth) {                                                                                       // 3563\n\t\t\t\twidth_parent = self.$dropdown_content.innerWidth() - getScrollbarWidth();                                         // 3564\n\t\t\t\twidth = Math.round(width_parent / n);                                                                             // 3565\n\t\t\t\t$optgroups.css({width: width});                                                                                   // 3566\n\t\t\t\tif (n > 1) {                                                                                                      // 3567\n\t\t\t\t\twidth_last = width_parent - width * (n - 1);                                                                     // 3568\n\t\t\t\t\t$optgroups.eq(n - 1).css({width: width_last});                                                                   // 3569\n\t\t\t\t}                                                                                                                 // 3570\n\t\t\t}                                                                                                                  // 3571\n\t\t};                                                                                                                  // 3572\n\t                                                                                                                     // 3573\n\t\tif (options.equalizeHeight || options.equalizeWidth) {                                                              // 3574\n\t\t\thook.after(this, 'positionDropdown', equalizeSizes);                                                               // 3575\n\t\t\thook.after(this, 'refreshOptions', equalizeSizes);                                                                 // 3576\n\t\t}                                                                                                                   // 3577\n\t                                                                                                                     // 3578\n\t                                                                                                                     // 3579\n\t});                                                                                                                  // 3580\n\t                                                                                                                     // 3581\n\tSelectize.define('remove_button', function(options) {                                                                // 3582\n\t\tif (this.settings.mode === 'single') return;                                                                        // 3583\n\t                                                                                                                     // 3584\n\t\toptions = $.extend({                                                                                                // 3585\n\t\t\tlabel     : '&times;',                                                                                             // 3586\n\t\t\ttitle     : 'Remove',                                                                                              // 3587\n\t\t\tclassName : 'remove',                                                                                              // 3588\n\t\t\tappend    : true                                                                                                   // 3589\n\t\t}, options);                                                                                                        // 3590\n\t                                                                                                                     // 3591\n\t\tvar self = this;                                                                                                    // 3592\n\t\tvar html = '<a href=\"javascript:void(0)\" class=\"' + options.className + '\" tabindex=\"-1\" title=\"' + escape_html(options.title) + '\">' + options.label + '</a>';\n\t                                                                                                                     // 3594\n\t\t/**                                                                                                                 // 3595\n\t\t * Appends an element as a child (with raw HTML).                                                                   // 3596\n\t\t *                                                                                                                  // 3597\n\t\t * @param {string} html_container                                                                                   // 3598\n\t\t * @param {string} html_element                                                                                     // 3599\n\t\t * @return {string}                                                                                                 // 3600\n\t\t */                                                                                                                 // 3601\n\t\tvar append = function(html_container, html_element) {                                                               // 3602\n\t\t\tvar pos = html_container.search(/(<\\/[^>]+>\\s*)$/);                                                                // 3603\n\t\t\treturn html_container.substring(0, pos) + html_element + html_container.substring(pos);                            // 3604\n\t\t};                                                                                                                  // 3605\n\t                                                                                                                     // 3606\n\t\tthis.setup = (function() {                                                                                          // 3607\n\t\t\tvar original = self.setup;                                                                                         // 3608\n\t\t\treturn function() {                                                                                                // 3609\n\t\t\t\t// override the item rendering method to add the button to each                                                   // 3610\n\t\t\t\tif (options.append) {                                                                                             // 3611\n\t\t\t\t\tvar render_item = self.settings.render.item;                                                                     // 3612\n\t\t\t\t\tself.settings.render.item = function(data) {                                                                     // 3613\n\t\t\t\t\t\treturn append(render_item.apply(this, arguments), html);                                                        // 3614\n\t\t\t\t\t};                                                                                                               // 3615\n\t\t\t\t}                                                                                                                 // 3616\n\t                                                                                                                     // 3617\n\t\t\t\toriginal.apply(this, arguments);                                                                                  // 3618\n\t                                                                                                                     // 3619\n\t\t\t\t// add event listener                                                                                             // 3620\n\t\t\t\tthis.$control.on('click', '.' + options.className, function(e) {                                                  // 3621\n\t\t\t\t\te.preventDefault();                                                                                              // 3622\n\t\t\t\t\tif (self.isLocked) return;                                                                                       // 3623\n\t                                                                                                                     // 3624\n\t\t\t\t\tvar $item = $(e.currentTarget).parent();                                                                         // 3625\n\t\t\t\t\tself.setActiveItem($item);                                                                                       // 3626\n\t\t\t\t\tif (self.deleteSelection()) {                                                                                    // 3627\n\t\t\t\t\t\tself.setCaret(self.items.length);                                                                               // 3628\n\t\t\t\t\t}                                                                                                                // 3629\n\t\t\t\t});                                                                                                               // 3630\n\t                                                                                                                     // 3631\n\t\t\t};                                                                                                                 // 3632\n\t\t})();                                                                                                               // 3633\n\t                                                                                                                     // 3634\n\t});                                                                                                                  // 3635\n\t                                                                                                                     // 3636\n\tSelectize.define('restore_on_backspace', function(options) {                                                         // 3637\n\t\tvar self = this;                                                                                                    // 3638\n\t                                                                                                                     // 3639\n\t\toptions.text = options.text || function(option) {                                                                   // 3640\n\t\t\treturn option[this.settings.labelField];                                                                           // 3641\n\t\t};                                                                                                                  // 3642\n\t                                                                                                                     // 3643\n\t\tthis.onKeyDown = (function() {                                                                                      // 3644\n\t\t\tvar original = self.onKeyDown;                                                                                     // 3645\n\t\t\treturn function(e) {                                                                                               // 3646\n\t\t\t\tvar index, option;                                                                                                // 3647\n\t\t\t\tif (e.keyCode === KEY_BACKSPACE && this.$control_input.val() === '' && !this.$activeItems.length) {               // 3648\n\t\t\t\t\tindex = this.caretPos - 1;                                                                                       // 3649\n\t\t\t\t\tif (index >= 0 && index < this.items.length) {                                                                   // 3650\n\t\t\t\t\t\toption = this.options[this.items[index]];                                                                       // 3651\n\t\t\t\t\t\tif (this.deleteSelection(e)) {                                                                                  // 3652\n\t\t\t\t\t\t\tthis.setTextboxValue(options.text.apply(this, [option]));                                                      // 3653\n\t\t\t\t\t\t\tthis.refreshOptions(true);                                                                                     // 3654\n\t\t\t\t\t\t}                                                                                                               // 3655\n\t\t\t\t\t\te.preventDefault();                                                                                             // 3656\n\t\t\t\t\t\treturn;                                                                                                         // 3657\n\t\t\t\t\t}                                                                                                                // 3658\n\t\t\t\t}                                                                                                                 // 3659\n\t\t\t\treturn original.apply(this, arguments);                                                                           // 3660\n\t\t\t};                                                                                                                 // 3661\n\t\t})();                                                                                                               // 3662\n\t});                                                                                                                  // 3663\n\t                                                                                                                     // 3664\n                                                                                                                      // 3665\n\treturn Selectize;                                                                                                    // 3666\n}));                                                                                                                  // 3667\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['jamiecollinson:selectize-bootstrap'] = {};\n\n})();\n","servePath":"/packages/jamiecollinson_selectize-bootstrap.js","sourceMap":{"version":3,"sources":["/packages/jamiecollinson_selectize-bootstrap/selectize/dist/js/standalone/selectize.js"],"names":[],"mappingsfile":"/packages/jamiecollinson_selectize-bootstrap.js","sourcesContent":["/**\n * sifter.js\n * Copyright (c) 2013 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\n(function(root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine('sifter', factory);\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.Sifter = factory();\n\t}\n}(this, function() {\n\n\t/**\n\t * Textually searches arrays and hashes of objects\n\t * by property (or multiple properties). Designed\n\t * specifically for autocomplete.\n\t *\n\t * @constructor\n\t * @param {array|object} items\n\t * @param {object} items\n\t */\n\tvar Sifter = function(items, settings) {\n\t\tthis.items = items;\n\t\tthis.settings = settings || {diacritics: true};\n\t};\n\n\t/**\n\t * Splits a search string into an array of individual\n\t * regexps to be used to match results.\n\t *\n\t * @param {string} query\n\t * @returns {array}\n\t */\n\tSifter.prototype.tokenize = function(query) {\n\t\tquery = trim(String(query || '').toLowerCase());\n\t\tif (!query || !query.length) return [];\n\n\t\tvar i, n, regex, letter;\n\t\tvar tokens = [];\n\t\tvar words = query.split(/ +/);\n\n\t\tfor (i = 0, n = words.length; i < n; i++) {\n\t\t\tregex = escape_regex(words[i]);\n\t\t\tif (this.settings.diacritics) {\n\t\t\t\tfor (letter in DIACRITICS) {\n\t\t\t\t\tif (DIACRITICS.hasOwnProperty(letter)) {\n\t\t\t\t\t\tregex = regex.replace(new RegExp(letter, 'g'), DIACRITICS[letter]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttokens.push({\n\t\t\t\tstring : words[i],\n\t\t\t\tregex  : new RegExp(regex, 'i')\n\t\t\t});\n\t\t}\n\n\t\treturn tokens;\n\t};\n\n\t/**\n\t * Iterates over arrays and hashes.\n\t *\n\t * ```\n\t * this.iterator(this.items, function(item, id) {\n\t *    // invoked for each item\n\t * });\n\t * ```\n\t *\n\t * @param {array|object} object\n\t */\n\tSifter.prototype.iterator = function(object, callback) {\n\t\tvar iterator;\n\t\tif (is_array(object)) {\n\t\t\titerator = Array.prototype.forEach || function(callback) {\n\t\t\t\tfor (var i = 0, n = this.length; i < n; i++) {\n\t\t\t\t\tcallback(this[i], i, this);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\titerator = function(callback) {\n\t\t\t\tfor (var key in this) {\n\t\t\t\t\tif (this.hasOwnProperty(key)) {\n\t\t\t\t\t\tcallback(this[key], key, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\titerator.apply(object, [callback]);\n\t};\n\n\t/**\n\t * Returns a function to be used to score individual results.\n\t *\n\t * Good matches will have a higher score than poor matches.\n\t * If an item is not a match, 0 will be returned by the function.\n\t *\n\t * @param {object|string} search\n\t * @param {object} options (optional)\n\t * @returns {function}\n\t */\n\tSifter.prototype.getScoreFunction = function(search, options) {\n\t\tvar self, fields, tokens, token_count;\n\n\t\tself        = this;\n\t\tsearch      = self.prepareSearch(search, options);\n\t\ttokens      = search.tokens;\n\t\tfields      = search.options.fields;\n\t\ttoken_count = tokens.length;\n\n\t\t/**\n\t\t * Calculates how close of a match the\n\t\t * given value is against a search token.\n\t\t *\n\t\t * @param {mixed} value\n\t\t * @param {object} token\n\t\t * @return {number}\n\t\t */\n\t\tvar scoreValue = function(value, token) {\n\t\t\tvar score, pos;\n\n\t\t\tif (!value) return 0;\n\t\t\tvalue = String(value || '');\n\t\t\tpos = value.search(token.regex);\n\t\t\tif (pos === -1) return 0;\n\t\t\tscore = token.string.length / value.length;\n\t\t\tif (pos === 0) score += 0.5;\n\t\t\treturn score;\n\t\t};\n\n\t\t/**\n\t\t * Calculates the score of an object\n\t\t * against the search query.\n\t\t *\n\t\t * @param {object} token\n\t\t * @param {object} data\n\t\t * @return {number}\n\t\t */\n\t\tvar scoreObject = (function() {\n\t\t\tvar field_count = fields.length;\n\t\t\tif (!field_count) {\n\t\t\t\treturn function() { return 0; };\n\t\t\t}\n\t\t\tif (field_count === 1) {\n\t\t\t\treturn function(token, data) {\n\t\t\t\t\treturn scoreValue(data[fields[0]], token);\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn function(token, data) {\n\t\t\t\tfor (var i = 0, sum = 0; i < field_count; i++) {\n\t\t\t\t\tsum += scoreValue(data[fields[i]], token);\n\t\t\t\t}\n\t\t\t\treturn sum / field_count;\n\t\t\t};\n\t\t})();\n\n\t\tif (!token_count) {\n\t\t\treturn function() { return 0; };\n\t\t}\n\t\tif (token_count === 1) {\n\t\t\treturn function(data) {\n\t\t\t\treturn scoreObject(tokens[0], data);\n\t\t\t};\n\t\t}\n\n\t\tif (search.options.conjunction === 'and') {\n\t\t\treturn function(data) {\n\t\t\t\tvar score;\n\t\t\t\tfor (var i = 0, sum = 0; i < token_count; i++) {\n\t\t\t\t\tscore = scoreObject(tokens[i], data);\n\t\t\t\t\tif (score <= 0) return 0;\n\t\t\t\t\tsum += score;\n\t\t\t\t}\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(data) {\n\t\t\t\tfor (var i = 0, sum = 0; i < token_count; i++) {\n\t\t\t\t\tsum += scoreObject(tokens[i], data);\n\t\t\t\t}\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Returns a function that can be used to compare two\n\t * results, for sorting purposes. If no sorting should\n\t * be performed, `null` will be returned.\n\t *\n\t * @param {string|object} search\n\t * @param {object} options\n\t * @return function(a,b)\n\t */\n\tSifter.prototype.getSortFunction = function(search, options) {\n\t\tvar i, n, self, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;\n\n\t\tself   = this;\n\t\tsearch = self.prepareSearch(search, options);\n\t\tsort   = (!search.query && options.sort_empty) || options.sort;\n\n\t\t/**\n\t\t * Fetches the specified sort field value\n\t\t * from a search result item.\n\t\t *\n\t\t * @param  {string} name\n\t\t * @param  {object} result\n\t\t * @return {mixed}\n\t\t */\n\t\tget_field = function(name, result) {\n\t\t\tif (name === '$score') return result.score;\n\t\t\treturn self.items[result.id][name];\n\t\t};\n\n\t\t// parse options\n\t\tfields = [];\n\t\tif (sort) {\n\t\t\tfor (i = 0, n = sort.length; i < n; i++) {\n\t\t\t\tif (search.query || sort[i].field !== '$score') {\n\t\t\t\t\tfields.push(sort[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// the \"$score\" field is implied to be the primary\n\t\t// sort field, unless it's manually specified\n\t\tif (search.query) {\n\t\t\timplicit_score = true;\n\t\t\tfor (i = 0, n = fields.length; i < n; i++) {\n\t\t\t\tif (fields[i].field === '$score') {\n\t\t\t\t\timplicit_score = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (implicit_score) {\n\t\t\t\tfields.unshift({field: '$score', direction: 'desc'});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = 0, n = fields.length; i < n; i++) {\n\t\t\t\tif (fields[i].field === '$score') {\n\t\t\t\t\tfields.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmultipliers = [];\n\t\tfor (i = 0, n = fields.length; i < n; i++) {\n\t\t\tmultipliers.push(fields[i].direction === 'desc' ? -1 : 1);\n\t\t}\n\n\t\t// build function\n\t\tfields_count = fields.length;\n\t\tif (!fields_count) {\n\t\t\treturn null;\n\t\t} else if (fields_count === 1) {\n\t\t\tfield = fields[0].field;\n\t\t\tmultiplier = multipliers[0];\n\t\t\treturn function(a, b) {\n\t\t\t\treturn multiplier * cmp(\n\t\t\t\t\tget_field(field, a),\n\t\t\t\t\tget_field(field, b)\n\t\t\t\t);\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(a, b) {\n\t\t\t\tvar i, result, a_value, b_value, field;\n\t\t\t\tfor (i = 0; i < fields_count; i++) {\n\t\t\t\t\tfield = fields[i].field;\n\t\t\t\t\tresult = multipliers[i] * cmp(\n\t\t\t\t\t\tget_field(field, a),\n\t\t\t\t\t\tget_field(field, b)\n\t\t\t\t\t);\n\t\t\t\t\tif (result) return result;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Parses a search query and returns an object\n\t * with tokens and fields ready to be populated\n\t * with results.\n\t *\n\t * @param {string} query\n\t * @param {object} options\n\t * @returns {object}\n\t */\n\tSifter.prototype.prepareSearch = function(query, options) {\n\t\tif (typeof query === 'object') return query;\n\n\t\toptions = extend({}, options);\n\n\t\tvar option_fields     = options.fields;\n\t\tvar option_sort       = options.sort;\n\t\tvar option_sort_empty = options.sort_empty;\n\n\t\tif (option_fields && !is_array(option_fields)) options.fields = [option_fields];\n\t\tif (option_sort && !is_array(option_sort)) options.sort = [option_sort];\n\t\tif (option_sort_empty && !is_array(option_sort_empty)) options.sort_empty = [option_sort_empty];\n\n\t\treturn {\n\t\t\toptions : options,\n\t\t\tquery   : String(query || '').toLowerCase(),\n\t\t\ttokens  : this.tokenize(query),\n\t\t\ttotal   : 0,\n\t\t\titems   : []\n\t\t};\n\t};\n\n\t/**\n\t * Searches through all items and returns a sorted array of matches.\n\t *\n\t * The `options` parameter can contain:\n\t *\n\t *   - fields {string|array}\n\t *   - sort {array}\n\t *   - score {function}\n\t *   - filter {bool}\n\t *   - limit {integer}\n\t *\n\t * Returns an object containing:\n\t *\n\t *   - options {object}\n\t *   - query {string}\n\t *   - tokens {array}\n\t *   - total {int}\n\t *   - items {array}\n\t *\n\t * @param {string} query\n\t * @param {object} options\n\t * @returns {object}\n\t */\n\tSifter.prototype.search = function(query, options) {\n\t\tvar self = this, value, score, search, calculateScore;\n\t\tvar fn_sort;\n\t\tvar fn_score;\n\n\t\tsearch  = this.prepareSearch(query, options);\n\t\toptions = search.options;\n\t\tquery   = search.query;\n\n\t\t// generate result scoring function\n\t\tfn_score = options.score || self.getScoreFunction(search);\n\n\t\t// perform search and sort\n\t\tif (query.length) {\n\t\t\tself.iterator(self.items, function(item, id) {\n\t\t\t\tscore = fn_score(item);\n\t\t\t\tif (options.filter === false || score > 0) {\n\t\t\t\t\tsearch.items.push({'score': score, 'id': id});\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tself.iterator(self.items, function(item, id) {\n\t\t\t\tsearch.items.push({'score': 1, 'id': id});\n\t\t\t});\n\t\t}\n\n\t\tfn_sort = self.getSortFunction(search, options);\n\t\tif (fn_sort) search.items.sort(fn_sort);\n\n\t\t// apply limits\n\t\tsearch.total = search.items.length;\n\t\tif (typeof options.limit === 'number') {\n\t\t\tsearch.items = search.items.slice(0, options.limit);\n\t\t}\n\n\t\treturn search;\n\t};\n\n\t// utilities\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\tvar cmp = function(a, b) {\n\t\tif (typeof a === 'number' && typeof b === 'number') {\n\t\t\treturn a > b ? 1 : (a < b ? -1 : 0);\n\t\t}\n\t\ta = asciifold(String(a || ''));\n\t\tb = asciifold(String(b || ''));\n\t\tif (a > b) return 1;\n\t\tif (b > a) return -1;\n\t\treturn 0;\n\t};\n\n\tvar extend = function(a, b) {\n\t\tvar i, n, k, object;\n\t\tfor (i = 1, n = arguments.length; i < n; i++) {\n\t\t\tobject = arguments[i];\n\t\t\tif (!object) continue;\n\t\t\tfor (k in object) {\n\t\t\t\tif (object.hasOwnProperty(k)) {\n\t\t\t\t\ta[k] = object[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t};\n\n\tvar trim = function(str) {\n\t\treturn (str + '').replace(/^\\s+|\\s+$|/g, '');\n\t};\n\n\tvar escape_regex = function(str) {\n\t\treturn (str + '').replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n\t};\n\n\tvar is_array = Array.isArray || ($ && $.isArray) || function(object) {\n\t\treturn Object.prototype.toString.call(object) === '[object Array]';\n\t};\n\n\tvar DIACRITICS = {\n\t\t'a': '[aÀÁÂÃÄÅàáâãäåĀāąĄ]',\n\t\t'c': '[cÇçćĆčČ]',\n\t\t'd': '[dđĐďĎ]',\n\t\t'e': '[eÈÉÊËèéêëěĚĒēęĘ]',\n\t\t'i': '[iÌÍÎÏìíîïĪī]',\n\t\t'l': '[lłŁ]',\n\t\t'n': '[nÑñňŇńŃ]',\n\t\t'o': '[oÒÓÔÕÕÖØòóôõöøŌō]',\n\t\t'r': '[rřŘ]',\n\t\t's': '[sŠšśŚ]',\n\t\t't': '[tťŤ]',\n\t\t'u': '[uÙÚÛÜùúûüůŮŪū]',\n\t\t'y': '[yŸÿýÝ]',\n\t\t'z': '[zŽžżŻźŹ]'\n\t};\n\n\tvar asciifold = (function() {\n\t\tvar i, n, k, chunk;\n\t\tvar foreignletters = '';\n\t\tvar lookup = {};\n\t\tfor (k in DIACRITICS) {\n\t\t\tif (DIACRITICS.hasOwnProperty(k)) {\n\t\t\t\tchunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);\n\t\t\t\tforeignletters += chunk;\n\t\t\t\tfor (i = 0, n = chunk.length; i < n; i++) {\n\t\t\t\t\tlookup[chunk.charAt(i)] = k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar regexp = new RegExp('[' +  foreignletters + ']', 'g');\n\t\treturn function(str) {\n\t\t\treturn str.replace(regexp, function(foreignletter) {\n\t\t\t\treturn lookup[foreignletter];\n\t\t\t}).toLowerCase();\n\t\t};\n\t})();\n\n\n\t// export\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\treturn Sifter;\n}));\n\n\n\n/**\n * microplugin.js\n * Copyright (c) 2013 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\n(function(root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine('microplugin', factory);\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.MicroPlugin = factory();\n\t}\n}(this, function() {\n\tvar MicroPlugin = {};\n\n\tMicroPlugin.mixin = function(Interface) {\n\t\tInterface.plugins = {};\n\n\t\t/**\n\t\t * Initializes the listed plugins (with options).\n\t\t * Acceptable formats:\n\t\t *\n\t\t * List (without options):\n\t\t *   ['a', 'b', 'c']\n\t\t *\n\t\t * List (with options):\n\t\t *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]\n\t\t *\n\t\t * Hash (with options):\n\t\t *   {'a': { ... }, 'b': { ... }, 'c': { ... }}\n\t\t *\n\t\t * @param {mixed} plugins\n\t\t */\n\t\tInterface.prototype.initializePlugins = function(plugins) {\n\t\t\tvar i, n, key;\n\t\t\tvar self  = this;\n\t\t\tvar queue = [];\n\n\t\t\tself.plugins = {\n\t\t\t\tnames     : [],\n\t\t\t\tsettings  : {},\n\t\t\t\trequested : {},\n\t\t\t\tloaded    : {}\n\t\t\t};\n\n\t\t\tif (utils.isArray(plugins)) {\n\t\t\t\tfor (i = 0, n = plugins.length; i < n; i++) {\n\t\t\t\t\tif (typeof plugins[i] === 'string') {\n\t\t\t\t\t\tqueue.push(plugins[i]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.plugins.settings[plugins[i].name] = plugins[i].options;\n\t\t\t\t\t\tqueue.push(plugins[i].name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (plugins) {\n\t\t\t\tfor (key in plugins) {\n\t\t\t\t\tif (plugins.hasOwnProperty(key)) {\n\t\t\t\t\t\tself.plugins.settings[key] = plugins[key];\n\t\t\t\t\t\tqueue.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (queue.length) {\n\t\t\t\tself.require(queue.shift());\n\t\t\t}\n\t\t};\n\n\t\tInterface.prototype.loadPlugin = function(name) {\n\t\t\tvar self    = this;\n\t\t\tvar plugins = self.plugins;\n\t\t\tvar plugin  = Interface.plugins[name];\n\n\t\t\tif (!Interface.plugins.hasOwnProperty(name)) {\n\t\t\t\tthrow new Error('Unable to find \"' +  name + '\" plugin');\n\t\t\t}\n\n\t\t\tplugins.requested[name] = true;\n\t\t\tplugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);\n\t\t\tplugins.names.push(name);\n\t\t};\n\n\t\t/**\n\t\t * Initializes a plugin.\n\t\t *\n\t\t * @param {string} name\n\t\t */\n\t\tInterface.prototype.require = function(name) {\n\t\t\tvar self = this;\n\t\t\tvar plugins = self.plugins;\n\n\t\t\tif (!self.plugins.loaded.hasOwnProperty(name)) {\n\t\t\t\tif (plugins.requested[name]) {\n\t\t\t\t\tthrow new Error('Plugin has circular dependency (\"' + name + '\")');\n\t\t\t\t}\n\t\t\t\tself.loadPlugin(name);\n\t\t\t}\n\n\t\t\treturn plugins.loaded[name];\n\t\t};\n\n\t\t/**\n\t\t * Registers a plugin.\n\t\t *\n\t\t * @param {string} name\n\t\t * @param {function} fn\n\t\t */\n\t\tInterface.define = function(name, fn) {\n\t\t\tInterface.plugins[name] = {\n\t\t\t\t'name' : name,\n\t\t\t\t'fn'   : fn\n\t\t\t};\n\t\t};\n\t};\n\n\tvar utils = {\n\t\tisArray: Array.isArray || function(vArg) {\n\t\t\treturn Object.prototype.toString.call(vArg) === '[object Array]';\n\t\t}\n\t};\n\n\treturn MicroPlugin;\n}));\n\n/**\n * selectize.js (v0.12.1)\n * Copyright (c) 2013–2015 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\n/*jshint curly:false */\n/*jshint browser:true */\n\n(function(root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine('selectize', ['jquery','sifter','microplugin'], factory);\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory(require('jquery'), require('sifter'), require('microplugin'));\n\t} else {\n\t\troot.Selectize = factory(root.jQuery, root.Sifter, root.MicroPlugin);\n\t}\n}(this, function($, Sifter, MicroPlugin) {\n\t'use strict';\n\n\tvar highlight = function($element, pattern) {\n\t\tif (typeof pattern === 'string' && !pattern.length) return;\n\t\tvar regex = (typeof pattern === 'string') ? new RegExp(pattern, 'i') : pattern;\n\t\n\t\tvar highlight = function(node) {\n\t\t\tvar skip = 0;\n\t\t\tif (node.nodeType === 3) {\n\t\t\t\tvar pos = node.data.search(regex);\n\t\t\t\tif (pos >= 0 && node.data.length > 0) {\n\t\t\t\t\tvar match = node.data.match(regex);\n\t\t\t\t\tvar spannode = document.createElement('span');\n\t\t\t\t\tspannode.className = 'highlight';\n\t\t\t\t\tvar middlebit = node.splitText(pos);\n\t\t\t\t\tvar endbit = middlebit.splitText(match[0].length);\n\t\t\t\t\tvar middleclone = middlebit.cloneNode(true);\n\t\t\t\t\tspannode.appendChild(middleclone);\n\t\t\t\t\tmiddlebit.parentNode.replaceChild(spannode, middlebit);\n\t\t\t\t\tskip = 1;\n\t\t\t\t}\n\t\t\t} else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {\n\t\t\t\tfor (var i = 0; i < node.childNodes.length; ++i) {\n\t\t\t\t\ti += highlight(node.childNodes[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn skip;\n\t\t};\n\t\n\t\treturn $element.each(function() {\n\t\t\thighlight(this);\n\t\t});\n\t};\n\t\n\tvar MicroEvent = function() {};\n\tMicroEvent.prototype = {\n\t\ton: function(event, fct){\n\t\t\tthis._events = this._events || {};\n\t\t\tthis._events[event] = this._events[event] || [];\n\t\t\tthis._events[event].push(fct);\n\t\t},\n\t\toff: function(event, fct){\n\t\t\tvar n = arguments.length;\n\t\t\tif (n === 0) return delete this._events;\n\t\t\tif (n === 1) return delete this._events[event];\n\t\n\t\t\tthis._events = this._events || {};\n\t\t\tif (event in this._events === false) return;\n\t\t\tthis._events[event].splice(this._events[event].indexOf(fct), 1);\n\t\t},\n\t\ttrigger: function(event /* , args... */){\n\t\t\tthis._events = this._events || {};\n\t\t\tif (event in this._events === false) return;\n\t\t\tfor (var i = 0; i < this._events[event].length; i++){\n\t\t\t\tthis._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t * Mixin will delegate all MicroEvent.js function in the destination object.\n\t *\n\t * - MicroEvent.mixin(Foobar) will make Foobar able to use MicroEvent\n\t *\n\t * @param {object} the object which will support MicroEvent\n\t */\n\tMicroEvent.mixin = function(destObject){\n\t\tvar props = ['on', 'off', 'trigger'];\n\t\tfor (var i = 0; i < props.length; i++){\n\t\t\tdestObject.prototype[props[i]] = MicroEvent.prototype[props[i]];\n\t\t}\n\t};\n\t\n\tvar IS_MAC        = /Mac/.test(navigator.userAgent);\n\t\n\tvar KEY_A         = 65;\n\tvar KEY_COMMA     = 188;\n\tvar KEY_RETURN    = 13;\n\tvar KEY_ESC       = 27;\n\tvar KEY_LEFT      = 37;\n\tvar KEY_UP        = 38;\n\tvar KEY_P         = 80;\n\tvar KEY_RIGHT     = 39;\n\tvar KEY_DOWN      = 40;\n\tvar KEY_N         = 78;\n\tvar KEY_BACKSPACE = 8;\n\tvar KEY_DELETE    = 46;\n\tvar KEY_SHIFT     = 16;\n\tvar KEY_CMD       = IS_MAC ? 91 : 17;\n\tvar KEY_CTRL      = IS_MAC ? 18 : 17;\n\tvar KEY_TAB       = 9;\n\t\n\tvar TAG_SELECT    = 1;\n\tvar TAG_INPUT     = 2;\n\t\n\t// for now, android support in general is too spotty to support validity\n\tvar SUPPORTS_VALIDITY_API = !/android/i.test(window.navigator.userAgent) && !!document.createElement('form').validity;\n\t\n\tvar isset = function(object) {\n\t\treturn typeof object !== 'undefined';\n\t};\n\t\n\t/**\n\t * Converts a scalar to its best string representation\n\t * for hash keys and HTML attribute values.\n\t *\n\t * Transformations:\n\t *   'str'     -> 'str'\n\t *   null      -> ''\n\t *   undefined -> ''\n\t *   true      -> '1'\n\t *   false     -> '0'\n\t *   0         -> '0'\n\t *   1         -> '1'\n\t *\n\t * @param {string} value\n\t * @returns {string|null}\n\t */\n\tvar hash_key = function(value) {\n\t\tif (typeof value === 'undefined' || value === null) return null;\n\t\tif (typeof value === 'boolean') return value ? '1' : '0';\n\t\treturn value + '';\n\t};\n\t\n\t/**\n\t * Escapes a string for use within HTML.\n\t *\n\t * @param {string} str\n\t * @returns {string}\n\t */\n\tvar escape_html = function(str) {\n\t\treturn (str + '')\n\t\t\t.replace(/&/g, '&amp;')\n\t\t\t.replace(/</g, '&lt;')\n\t\t\t.replace(/>/g, '&gt;')\n\t\t\t.replace(/\"/g, '&quot;');\n\t};\n\t\n\t/**\n\t * Escapes \"$\" characters in replacement strings.\n\t *\n\t * @param {string} str\n\t * @returns {string}\n\t */\n\tvar escape_replace = function(str) {\n\t\treturn (str + '').replace(/\\$/g, '$$$$');\n\t};\n\t\n\tvar hook = {};\n\t\n\t/**\n\t * Wraps `method` on `self` so that `fn`\n\t * is invoked before the original method.\n\t *\n\t * @param {object} self\n\t * @param {string} method\n\t * @param {function} fn\n\t */\n\thook.before = function(self, method, fn) {\n\t\tvar original = self[method];\n\t\tself[method] = function() {\n\t\t\tfn.apply(self, arguments);\n\t\t\treturn original.apply(self, arguments);\n\t\t};\n\t};\n\t\n\t/**\n\t * Wraps `method` on `self` so that `fn`\n\t * is invoked after the original method.\n\t *\n\t * @param {object} self\n\t * @param {string} method\n\t * @param {function} fn\n\t */\n\thook.after = function(self, method, fn) {\n\t\tvar original = self[method];\n\t\tself[method] = function() {\n\t\t\tvar result = original.apply(self, arguments);\n\t\t\tfn.apply(self, arguments);\n\t\t\treturn result;\n\t\t};\n\t};\n\t\n\t/**\n\t * Wraps `fn` so that it can only be invoked once.\n\t *\n\t * @param {function} fn\n\t * @returns {function}\n\t */\n\tvar once = function(fn) {\n\t\tvar called = false;\n\t\treturn function() {\n\t\t\tif (called) return;\n\t\t\tcalled = true;\n\t\t\tfn.apply(this, arguments);\n\t\t};\n\t};\n\t\n\t/**\n\t * Wraps `fn` so that it can only be called once\n\t * every `delay` milliseconds (invoked on the falling edge).\n\t *\n\t * @param {function} fn\n\t * @param {int} delay\n\t * @returns {function}\n\t */\n\tvar debounce = function(fn, delay) {\n\t\tvar timeout;\n\t\treturn function() {\n\t\t\tvar self = this;\n\t\t\tvar args = arguments;\n\t\t\twindow.clearTimeout(timeout);\n\t\t\ttimeout = window.setTimeout(function() {\n\t\t\t\tfn.apply(self, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n\t\n\t/**\n\t * Debounce all fired events types listed in `types`\n\t * while executing the provided `fn`.\n\t *\n\t * @param {object} self\n\t * @param {array} types\n\t * @param {function} fn\n\t */\n\tvar debounce_events = function(self, types, fn) {\n\t\tvar type;\n\t\tvar trigger = self.trigger;\n\t\tvar event_args = {};\n\t\n\t\t// override trigger method\n\t\tself.trigger = function() {\n\t\t\tvar type = arguments[0];\n\t\t\tif (types.indexOf(type) !== -1) {\n\t\t\t\tevent_args[type] = arguments;\n\t\t\t} else {\n\t\t\t\treturn trigger.apply(self, arguments);\n\t\t\t}\n\t\t};\n\t\n\t\t// invoke provided function\n\t\tfn.apply(self, []);\n\t\tself.trigger = trigger;\n\t\n\t\t// trigger queued events\n\t\tfor (type in event_args) {\n\t\t\tif (event_args.hasOwnProperty(type)) {\n\t\t\t\ttrigger.apply(self, event_args[type]);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t * A workaround for http://bugs.jquery.com/ticket/6696\n\t *\n\t * @param {object} $parent - Parent element to listen on.\n\t * @param {string} event - Event name.\n\t * @param {string} selector - Descendant selector to filter by.\n\t * @param {function} fn - Event handler.\n\t */\n\tvar watchChildEvent = function($parent, event, selector, fn) {\n\t\t$parent.on(event, selector, function(e) {\n\t\t\tvar child = e.target;\n\t\t\twhile (child && child.parentNode !== $parent[0]) {\n\t\t\t\tchild = child.parentNode;\n\t\t\t}\n\t\t\te.currentTarget = child;\n\t\t\treturn fn.apply(this, [e]);\n\t\t});\n\t};\n\t\n\t/**\n\t * Determines the current selection within a text input control.\n\t * Returns an object containing:\n\t *   - start\n\t *   - length\n\t *\n\t * @param {object} input\n\t * @returns {object}\n\t */\n\tvar getSelection = function(input) {\n\t\tvar result = {};\n\t\tif ('selectionStart' in input) {\n\t\t\tresult.start = input.selectionStart;\n\t\t\tresult.length = input.selectionEnd - result.start;\n\t\t} else if (document.selection) {\n\t\t\tinput.focus();\n\t\t\tvar sel = document.selection.createRange();\n\t\t\tvar selLen = document.selection.createRange().text.length;\n\t\t\tsel.moveStart('character', -input.value.length);\n\t\t\tresult.start = sel.text.length - selLen;\n\t\t\tresult.length = selLen;\n\t\t}\n\t\treturn result;\n\t};\n\t\n\t/**\n\t * Copies CSS properties from one element to another.\n\t *\n\t * @param {object} $from\n\t * @param {object} $to\n\t * @param {array} properties\n\t */\n\tvar transferStyles = function($from, $to, properties) {\n\t\tvar i, n, styles = {};\n\t\tif (properties) {\n\t\t\tfor (i = 0, n = properties.length; i < n; i++) {\n\t\t\t\tstyles[properties[i]] = $from.css(properties[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tstyles = $from.css();\n\t\t}\n\t\t$to.css(styles);\n\t};\n\t\n\t/**\n\t * Measures the width of a string within a\n\t * parent element (in pixels).\n\t *\n\t * @param {string} str\n\t * @param {object} $parent\n\t * @returns {int}\n\t */\n\tvar measureString = function(str, $parent) {\n\t\tif (!str) {\n\t\t\treturn 0;\n\t\t}\n\t\n\t\tvar $test = $('<test>').css({\n\t\t\tposition: 'absolute',\n\t\t\ttop: -99999,\n\t\t\tleft: -99999,\n\t\t\twidth: 'auto',\n\t\t\tpadding: 0,\n\t\t\twhiteSpace: 'pre'\n\t\t}).text(str).appendTo('body');\n\t\n\t\ttransferStyles($parent, $test, [\n\t\t\t'letterSpacing',\n\t\t\t'fontSize',\n\t\t\t'fontFamily',\n\t\t\t'fontWeight',\n\t\t\t'textTransform'\n\t\t]);\n\t\n\t\tvar width = $test.width();\n\t\t$test.remove();\n\t\n\t\treturn width;\n\t};\n\t\n\t/**\n\t * Sets up an input to grow horizontally as the user\n\t * types. If the value is changed manually, you can\n\t * trigger the \"update\" handler to resize:\n\t *\n\t * $input.trigger('update');\n\t *\n\t * @param {object} $input\n\t */\n\tvar autoGrow = function($input) {\n\t\tvar currentWidth = null;\n\t\n\t\tvar update = function(e, options) {\n\t\t\tvar value, keyCode, printable, placeholder, width;\n\t\t\tvar shift, character, selection;\n\t\t\te = e || window.event || {};\n\t\t\toptions = options || {};\n\t\n\t\t\tif (e.metaKey || e.altKey) return;\n\t\t\tif (!options.force && $input.data('grow') === false) return;\n\t\n\t\t\tvalue = $input.val();\n\t\t\tif (e.type && e.type.toLowerCase() === 'keydown') {\n\t\t\t\tkeyCode = e.keyCode;\n\t\t\t\tprintable = (\n\t\t\t\t\t(keyCode >= 97 && keyCode <= 122) || // a-z\n\t\t\t\t\t(keyCode >= 65 && keyCode <= 90)  || // A-Z\n\t\t\t\t\t(keyCode >= 48 && keyCode <= 57)  || // 0-9\n\t\t\t\t\tkeyCode === 32 // space\n\t\t\t\t);\n\t\n\t\t\t\tif (keyCode === KEY_DELETE || keyCode === KEY_BACKSPACE) {\n\t\t\t\t\tselection = getSelection($input[0]);\n\t\t\t\t\tif (selection.length) {\n\t\t\t\t\t\tvalue = value.substring(0, selection.start) + value.substring(selection.start + selection.length);\n\t\t\t\t\t} else if (keyCode === KEY_BACKSPACE && selection.start) {\n\t\t\t\t\t\tvalue = value.substring(0, selection.start - 1) + value.substring(selection.start + 1);\n\t\t\t\t\t} else if (keyCode === KEY_DELETE && typeof selection.start !== 'undefined') {\n\t\t\t\t\t\tvalue = value.substring(0, selection.start) + value.substring(selection.start + 1);\n\t\t\t\t\t}\n\t\t\t\t} else if (printable) {\n\t\t\t\t\tshift = e.shiftKey;\n\t\t\t\t\tcharacter = String.fromCharCode(e.keyCode);\n\t\t\t\t\tif (shift) character = character.toUpperCase();\n\t\t\t\t\telse character = character.toLowerCase();\n\t\t\t\t\tvalue += character;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tplaceholder = $input.attr('placeholder');\n\t\t\tif (!value && placeholder) {\n\t\t\t\tvalue = placeholder;\n\t\t\t}\n\t\n\t\t\twidth = measureString(value, $input) + 4;\n\t\t\tif (width !== currentWidth) {\n\t\t\t\tcurrentWidth = width;\n\t\t\t\t$input.width(width);\n\t\t\t\t$input.triggerHandler('resize');\n\t\t\t}\n\t\t};\n\t\n\t\t$input.on('keydown keyup update blur', update);\n\t\tupdate();\n\t};\n\t\n\tvar Selectize = function($input, settings) {\n\t\tvar key, i, n, dir, input, self = this;\n\t\tinput = $input[0];\n\t\tinput.selectize = self;\n\t\n\t\t// detect rtl environment\n\t\tvar computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);\n\t\tdir = computedStyle ? computedStyle.getPropertyValue('direction') : input.currentStyle && input.currentStyle.direction;\n\t\tdir = dir || $input.parents('[dir]:first').attr('dir') || '';\n\t\n\t\t// setup default state\n\t\t$.extend(self, {\n\t\t\torder            : 0,\n\t\t\tsettings         : settings,\n\t\t\t$input           : $input,\n\t\t\ttabIndex         : $input.attr('tabindex') || '',\n\t\t\ttagType          : input.tagName.toLowerCase() === 'select' ? TAG_SELECT : TAG_INPUT,\n\t\t\trtl              : /rtl/i.test(dir),\n\t\n\t\t\teventNS          : '.selectize' + (++Selectize.count),\n\t\t\thighlightedValue : null,\n\t\t\tisOpen           : false,\n\t\t\tisDisabled       : false,\n\t\t\tisRequired       : $input.is('[required]'),\n\t\t\tisInvalid        : false,\n\t\t\tisLocked         : false,\n\t\t\tisFocused        : false,\n\t\t\tisInputHidden    : false,\n\t\t\tisSetup          : false,\n\t\t\tisShiftDown      : false,\n\t\t\tisCmdDown        : false,\n\t\t\tisCtrlDown       : false,\n\t\t\tignoreFocus      : false,\n\t\t\tignoreBlur       : false,\n\t\t\tignoreHover      : false,\n\t\t\thasOptions       : false,\n\t\t\tcurrentResults   : null,\n\t\t\tlastValue        : '',\n\t\t\tcaretPos         : 0,\n\t\t\tloading          : 0,\n\t\t\tloadedSearches   : {},\n\t\n\t\t\t$activeOption    : null,\n\t\t\t$activeItems     : [],\n\t\n\t\t\toptgroups        : {},\n\t\t\toptions          : {},\n\t\t\tuserOptions      : {},\n\t\t\titems            : [],\n\t\t\trenderCache      : {},\n\t\t\tonSearchChange   : settings.loadThrottle === null ? self.onSearchChange : debounce(self.onSearchChange, settings.loadThrottle)\n\t\t});\n\t\n\t\t// search system\n\t\tself.sifter = new Sifter(this.options, {diacritics: settings.diacritics});\n\t\n\t\t// build options table\n\t\tif (self.settings.options) {\n\t\t\tfor (i = 0, n = self.settings.options.length; i < n; i++) {\n\t\t\t\tself.registerOption(self.settings.options[i]);\n\t\t\t}\n\t\t\tdelete self.settings.options;\n\t\t}\n\t\n\t\t// build optgroup table\n\t\tif (self.settings.optgroups) {\n\t\t\tfor (i = 0, n = self.settings.optgroups.length; i < n; i++) {\n\t\t\t\tself.registerOptionGroup(self.settings.optgroups[i]);\n\t\t\t}\n\t\t\tdelete self.settings.optgroups;\n\t\t}\n\t\n\t\t// option-dependent defaults\n\t\tself.settings.mode = self.settings.mode || (self.settings.maxItems === 1 ? 'single' : 'multi');\n\t\tif (typeof self.settings.hideSelected !== 'boolean') {\n\t\t\tself.settings.hideSelected = self.settings.mode === 'multi';\n\t\t}\n\t\n\t\tself.initializePlugins(self.settings.plugins);\n\t\tself.setupCallbacks();\n\t\tself.setupTemplates();\n\t\tself.setup();\n\t};\n\t\n\t// mixins\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\tMicroEvent.mixin(Selectize);\n\tMicroPlugin.mixin(Selectize);\n\t\n\t// methods\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\t$.extend(Selectize.prototype, {\n\t\n\t\t/**\n\t\t * Creates all elements and sets up event bindings.\n\t\t */\n\t\tsetup: function() {\n\t\t\tvar self      = this;\n\t\t\tvar settings  = self.settings;\n\t\t\tvar eventNS   = self.eventNS;\n\t\t\tvar $window   = $(window);\n\t\t\tvar $document = $(document);\n\t\t\tvar $input    = self.$input;\n\t\n\t\t\tvar $wrapper;\n\t\t\tvar $control;\n\t\t\tvar $control_input;\n\t\t\tvar $dropdown;\n\t\t\tvar $dropdown_content;\n\t\t\tvar $dropdown_parent;\n\t\t\tvar inputMode;\n\t\t\tvar timeout_blur;\n\t\t\tvar timeout_focus;\n\t\t\tvar classes;\n\t\t\tvar classes_plugins;\n\t\n\t\t\tinputMode         = self.settings.mode;\n\t\t\tclasses           = $input.attr('class') || '';\n\t\n\t\t\t$wrapper          = $('<div>').addClass(settings.wrapperClass).addClass(classes).addClass(inputMode);\n\t\t\t$control          = $('<div>').addClass(settings.inputClass).addClass('items').appendTo($wrapper);\n\t\t\t$control_input    = $('<input type=\"text\" autocomplete=\"off\" />').appendTo($control).attr('tabindex', $input.is(':disabled') ? '-1' : self.tabIndex);\n\t\t\t$dropdown_parent  = $(settings.dropdownParent || $wrapper);\n\t\t\t$dropdown         = $('<div>').addClass(settings.dropdownClass).addClass(inputMode).hide().appendTo($dropdown_parent);\n\t\t\t$dropdown_content = $('<div>').addClass(settings.dropdownContentClass).appendTo($dropdown);\n\t\n\t\t\tif(self.settings.copyClassesToDropdown) {\n\t\t\t\t$dropdown.addClass(classes);\n\t\t\t}\n\t\n\t\t\t$wrapper.css({\n\t\t\t\twidth: $input[0].style.width\n\t\t\t});\n\t\n\t\t\tif (self.plugins.names.length) {\n\t\t\t\tclasses_plugins = 'plugin-' + self.plugins.names.join(' plugin-');\n\t\t\t\t$wrapper.addClass(classes_plugins);\n\t\t\t\t$dropdown.addClass(classes_plugins);\n\t\t\t}\n\t\n\t\t\tif ((settings.maxItems === null || settings.maxItems > 1) && self.tagType === TAG_SELECT) {\n\t\t\t\t$input.attr('multiple', 'multiple');\n\t\t\t}\n\t\n\t\t\tif (self.settings.placeholder) {\n\t\t\t\t$control_input.attr('placeholder', settings.placeholder);\n\t\t\t}\n\t\n\t\t\t// if splitOn was not passed in, construct it from the delimiter to allow pasting universally\n\t\t\tif (!self.settings.splitOn && self.settings.delimiter) {\n\t\t\t\tvar delimiterEscaped = self.settings.delimiter.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\t\t\t\tself.settings.splitOn = new RegExp('\\\\s*' + delimiterEscaped + '+\\\\s*');\n\t\t\t}\n\t\n\t\t\tif ($input.attr('autocorrect')) {\n\t\t\t\t$control_input.attr('autocorrect', $input.attr('autocorrect'));\n\t\t\t}\n\t\n\t\t\tif ($input.attr('autocapitalize')) {\n\t\t\t\t$control_input.attr('autocapitalize', $input.attr('autocapitalize'));\n\t\t\t}\n\t\n\t\t\tself.$wrapper          = $wrapper;\n\t\t\tself.$control          = $control;\n\t\t\tself.$control_input    = $control_input;\n\t\t\tself.$dropdown         = $dropdown;\n\t\t\tself.$dropdown_content = $dropdown_content;\n\t\n\t\t\t$dropdown.on('mouseenter', '[data-selectable]', function() { return self.onOptionHover.apply(self, arguments); });\n\t\t\t$dropdown.on('mousedown click', '[data-selectable]', function() { return self.onOptionSelect.apply(self, arguments); });\n\t\t\twatchChildEvent($control, 'mousedown', '*:not(input)', function() { return self.onItemSelect.apply(self, arguments); });\n\t\t\tautoGrow($control_input);\n\t\n\t\t\t$control.on({\n\t\t\t\tmousedown : function() { return self.onMouseDown.apply(self, arguments); },\n\t\t\t\tclick     : function() { return self.onClick.apply(self, arguments); }\n\t\t\t});\n\t\n\t\t\t$control_input.on({\n\t\t\t\tmousedown : function(e) { e.stopPropagation(); },\n\t\t\t\tkeydown   : function() { return self.onKeyDown.apply(self, arguments); },\n\t\t\t\tkeyup     : function() { return self.onKeyUp.apply(self, arguments); },\n\t\t\t\tkeypress  : function() { return self.onKeyPress.apply(self, arguments); },\n\t\t\t\tresize    : function() { self.positionDropdown.apply(self, []); },\n\t\t\t\tblur      : function() { return self.onBlur.apply(self, arguments); },\n\t\t\t\tfocus     : function() { self.ignoreBlur = false; return self.onFocus.apply(self, arguments); },\n\t\t\t\tpaste     : function() { return self.onPaste.apply(self, arguments); }\n\t\t\t});\n\t\n\t\t\t$document.on('keydown' + eventNS, function(e) {\n\t\t\t\tself.isCmdDown = e[IS_MAC ? 'metaKey' : 'ctrlKey'];\n\t\t\t\tself.isCtrlDown = e[IS_MAC ? 'altKey' : 'ctrlKey'];\n\t\t\t\tself.isShiftDown = e.shiftKey;\n\t\t\t});\n\t\n\t\t\t$document.on('keyup' + eventNS, function(e) {\n\t\t\t\tif (e.keyCode === KEY_CTRL) self.isCtrlDown = false;\n\t\t\t\tif (e.keyCode === KEY_SHIFT) self.isShiftDown = false;\n\t\t\t\tif (e.keyCode === KEY_CMD) self.isCmdDown = false;\n\t\t\t});\n\t\n\t\t\t$document.on('mousedown' + eventNS, function(e) {\n\t\t\t\tif (self.isFocused) {\n\t\t\t\t\t// prevent events on the dropdown scrollbar from causing the control to blur\n\t\t\t\t\tif (e.target === self.$dropdown[0] || e.target.parentNode === self.$dropdown[0]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t// blur on click outside\n\t\t\t\t\tif (!self.$control.has(e.target).length && e.target !== self.$control[0]) {\n\t\t\t\t\t\tself.blur(e.target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\t$window.on(['scroll' + eventNS, 'resize' + eventNS].join(' '), function() {\n\t\t\t\tif (self.isOpen) {\n\t\t\t\t\tself.positionDropdown.apply(self, arguments);\n\t\t\t\t}\n\t\t\t});\n\t\t\t$window.on('mousemove' + eventNS, function() {\n\t\t\t\tself.ignoreHover = false;\n\t\t\t});\n\t\n\t\t\t// store original children and tab index so that they can be\n\t\t\t// restored when the destroy() method is called.\n\t\t\tthis.revertSettings = {\n\t\t\t\t$children : $input.children().detach(),\n\t\t\t\ttabindex  : $input.attr('tabindex')\n\t\t\t};\n\t\n\t\t\t$input.attr('tabindex', -1).hide().after(self.$wrapper);\n\t\n\t\t\tif ($.isArray(settings.items)) {\n\t\t\t\tself.setValue(settings.items);\n\t\t\t\tdelete settings.items;\n\t\t\t}\n\t\n\t\t\t// feature detect for the validation API\n\t\t\tif (SUPPORTS_VALIDITY_API) {\n\t\t\t\t$input.on('invalid' + eventNS, function(e) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tself.isInvalid = true;\n\t\t\t\t\tself.refreshState();\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tself.updateOriginalInput();\n\t\t\tself.refreshItems();\n\t\t\tself.refreshState();\n\t\t\tself.updatePlaceholder();\n\t\t\tself.isSetup = true;\n\t\n\t\t\tif ($input.is(':disabled')) {\n\t\t\t\tself.disable();\n\t\t\t}\n\t\n\t\t\tself.on('change', this.onChange);\n\t\n\t\t\t$input.data('selectize', self);\n\t\t\t$input.addClass('selectized');\n\t\t\tself.trigger('initialize');\n\t\n\t\t\t// preload options\n\t\t\tif (settings.preload === true) {\n\t\t\t\tself.onSearchChange('');\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t/**\n\t\t * Sets up default rendering functions.\n\t\t */\n\t\tsetupTemplates: function() {\n\t\t\tvar self = this;\n\t\t\tvar field_label = self.settings.labelField;\n\t\t\tvar field_optgroup = self.settings.optgroupLabelField;\n\t\n\t\t\tvar templates = {\n\t\t\t\t'optgroup': function(data) {\n\t\t\t\t\treturn '<div class=\"optgroup\">' + data.html + '</div>';\n\t\t\t\t},\n\t\t\t\t'optgroup_header': function(data, escape) {\n\t\t\t\t\treturn '<div class=\"optgroup-header\">' + escape(data[field_optgroup]) + '</div>';\n\t\t\t\t},\n\t\t\t\t'option': function(data, escape) {\n\t\t\t\t\treturn '<div class=\"option\">' + escape(data[field_label]) + '</div>';\n\t\t\t\t},\n\t\t\t\t'item': function(data, escape) {\n\t\t\t\t\treturn '<div class=\"item\">' + escape(data[field_label]) + '</div>';\n\t\t\t\t},\n\t\t\t\t'option_create': function(data, escape) {\n\t\t\t\t\treturn '<div class=\"create\">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>';\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tself.settings.render = $.extend({}, templates, self.settings.render);\n\t\t},\n\t\n\t\t/**\n\t\t * Maps fired events to callbacks provided\n\t\t * in the settings used when creating the control.\n\t\t */\n\t\tsetupCallbacks: function() {\n\t\t\tvar key, fn, callbacks = {\n\t\t\t\t'initialize'      : 'onInitialize',\n\t\t\t\t'change'          : 'onChange',\n\t\t\t\t'item_add'        : 'onItemAdd',\n\t\t\t\t'item_remove'     : 'onItemRemove',\n\t\t\t\t'clear'           : 'onClear',\n\t\t\t\t'option_add'      : 'onOptionAdd',\n\t\t\t\t'option_remove'   : 'onOptionRemove',\n\t\t\t\t'option_clear'    : 'onOptionClear',\n\t\t\t\t'optgroup_add'    : 'onOptionGroupAdd',\n\t\t\t\t'optgroup_remove' : 'onOptionGroupRemove',\n\t\t\t\t'optgroup_clear'  : 'onOptionGroupClear',\n\t\t\t\t'dropdown_open'   : 'onDropdownOpen',\n\t\t\t\t'dropdown_close'  : 'onDropdownClose',\n\t\t\t\t'type'            : 'onType',\n\t\t\t\t'load'            : 'onLoad',\n\t\t\t\t'focus'           : 'onFocus',\n\t\t\t\t'blur'            : 'onBlur'\n\t\t\t};\n\t\n\t\t\tfor (key in callbacks) {\n\t\t\t\tif (callbacks.hasOwnProperty(key)) {\n\t\t\t\t\tfn = this.settings[callbacks[key]];\n\t\t\t\t\tif (fn) this.on(key, fn);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the main control element\n\t\t * has a click event.\n\t\t *\n\t\t * @param {object} e\n\t\t * @return {boolean}\n\t\t */\n\t\tonClick: function(e) {\n\t\t\tvar self = this;\n\t\n\t\t\t// necessary for mobile webkit devices (manual focus triggering\n\t\t\t// is ignored unless invoked within a click event)\n\t\t\tif (!self.isFocused) {\n\t\t\t\tself.focus();\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the main control element\n\t\t * has a mouse down event.\n\t\t *\n\t\t * @param {object} e\n\t\t * @return {boolean}\n\t\t */\n\t\tonMouseDown: function(e) {\n\t\t\tvar self = this;\n\t\t\tvar defaultPrevented = e.isDefaultPrevented();\n\t\t\tvar $target = $(e.target);\n\t\n\t\t\tif (self.isFocused) {\n\t\t\t\t// retain focus by preventing native handling. if the\n\t\t\t\t// event target is the input it should not be modified.\n\t\t\t\t// otherwise, text selection within the input won't work.\n\t\t\t\tif (e.target !== self.$control_input[0]) {\n\t\t\t\t\tif (self.settings.mode === 'single') {\n\t\t\t\t\t\t// toggle dropdown\n\t\t\t\t\t\tself.isOpen ? self.close() : self.open();\n\t\t\t\t\t} else if (!defaultPrevented) {\n\t\t\t\t\t\tself.setActiveItem(null);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// give control focus\n\t\t\t\tif (!defaultPrevented) {\n\t\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\t\tself.focus();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the value of the control has been changed.\n\t\t * This should propagate the event to the original DOM\n\t\t * input / select element.\n\t\t */\n\t\tonChange: function() {\n\t\t\tthis.$input.trigger('change');\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> paste.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonPaste: function(e) {\n\t\t\tvar self = this;\n\t\t\tif (self.isFull() || self.isInputHidden || self.isLocked) {\n\t\t\t\te.preventDefault();\n\t\t\t} else {\n\t\t\t\t// If a regex or string is included, this will split the pasted\n\t\t\t\t// input and create Items for each separate value\n\t\t\t\tif (self.settings.splitOn) {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tvar splitInput = $.trim(self.$control_input.val() || '').split(self.settings.splitOn);\n\t\t\t\t\t\tfor (var i = 0, n = splitInput.length; i < n; i++) {\n\t\t\t\t\t\t\tself.createItem(splitInput[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> keypress.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonKeyPress: function(e) {\n\t\t\tif (this.isLocked) return e && e.preventDefault();\n\t\t\tvar character = String.fromCharCode(e.keyCode || e.which);\n\t\t\tif (this.settings.create && this.settings.mode === 'multi' && character === this.settings.delimiter) {\n\t\t\t\tthis.createItem();\n\t\t\t\te.preventDefault();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> keydown.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonKeyDown: function(e) {\n\t\t\tvar isInput = e.target === this.$control_input[0];\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.isLocked) {\n\t\t\t\tif (e.keyCode !== KEY_TAB) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tswitch (e.keyCode) {\n\t\t\t\tcase KEY_A:\n\t\t\t\t\tif (self.isCmdDown) {\n\t\t\t\t\t\tself.selectAll();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase KEY_ESC:\n\t\t\t\t\tif (self.isOpen) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_N:\n\t\t\t\t\tif (!e.ctrlKey || e.altKey) break;\n\t\t\t\tcase KEY_DOWN:\n\t\t\t\t\tif (!self.isOpen && self.hasOptions) {\n\t\t\t\t\t\tself.open();\n\t\t\t\t\t} else if (self.$activeOption) {\n\t\t\t\t\t\tself.ignoreHover = true;\n\t\t\t\t\t\tvar $next = self.getAdjacentOption(self.$activeOption, 1);\n\t\t\t\t\t\tif ($next.length) self.setActiveOption($next, true, true);\n\t\t\t\t\t}\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_P:\n\t\t\t\t\tif (!e.ctrlKey || e.altKey) break;\n\t\t\t\tcase KEY_UP:\n\t\t\t\t\tif (self.$activeOption) {\n\t\t\t\t\t\tself.ignoreHover = true;\n\t\t\t\t\t\tvar $prev = self.getAdjacentOption(self.$activeOption, -1);\n\t\t\t\t\t\tif ($prev.length) self.setActiveOption($prev, true, true);\n\t\t\t\t\t}\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_RETURN:\n\t\t\t\t\tif (self.isOpen && self.$activeOption) {\n\t\t\t\t\t\tself.onOptionSelect({currentTarget: self.$activeOption});\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_LEFT:\n\t\t\t\t\tself.advanceSelection(-1, e);\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_RIGHT:\n\t\t\t\t\tself.advanceSelection(1, e);\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_TAB:\n\t\t\t\t\tif (self.settings.selectOnTab && self.isOpen && self.$activeOption) {\n\t\t\t\t\t\tself.onOptionSelect({currentTarget: self.$activeOption});\n\t\n\t\t\t\t\t\t// Default behaviour is to jump to the next field, we only want this\n\t\t\t\t\t\t// if the current field doesn't accept any more entries\n\t\t\t\t\t\tif (!self.isFull()) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (self.settings.create && self.createItem()) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_BACKSPACE:\n\t\t\t\tcase KEY_DELETE:\n\t\t\t\t\tself.deleteSelection(e);\n\t\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif ((self.isFull() || self.isInputHidden) && !(IS_MAC ? e.metaKey : e.ctrlKey)) {\n\t\t\t\te.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> keyup.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonKeyUp: function(e) {\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.isLocked) return e && e.preventDefault();\n\t\t\tvar value = self.$control_input.val() || '';\n\t\t\tif (self.lastValue !== value) {\n\t\t\t\tself.lastValue = value;\n\t\t\t\tself.onSearchChange(value);\n\t\t\t\tself.refreshOptions();\n\t\t\t\tself.trigger('type', value);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Invokes the user-provide option provider / loader.\n\t\t *\n\t\t * Note: this function is debounced in the Selectize\n\t\t * constructor (by `settings.loadDelay` milliseconds)\n\t\t *\n\t\t * @param {string} value\n\t\t */\n\t\tonSearchChange: function(value) {\n\t\t\tvar self = this;\n\t\t\tvar fn = self.settings.load;\n\t\t\tif (!fn) return;\n\t\t\tif (self.loadedSearches.hasOwnProperty(value)) return;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tself.load(function(callback) {\n\t\t\t\tfn.apply(self, [value, callback]);\n\t\t\t});\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> focus.\n\t\t *\n\t\t * @param {object} e (optional)\n\t\t * @returns {boolean}\n\t\t */\n\t\tonFocus: function(e) {\n\t\t\tvar self = this;\n\t\t\tvar wasFocused = self.isFocused;\n\t\n\t\t\tif (self.isDisabled) {\n\t\t\t\tself.blur();\n\t\t\t\te && e.preventDefault();\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif (self.ignoreFocus) return;\n\t\t\tself.isFocused = true;\n\t\t\tif (self.settings.preload === 'focus') self.onSearchChange('');\n\t\n\t\t\tif (!wasFocused) self.trigger('focus');\n\t\n\t\t\tif (!self.$activeItems.length) {\n\t\t\t\tself.showInput();\n\t\t\t\tself.setActiveItem(null);\n\t\t\t\tself.refreshOptions(!!self.settings.openOnFocus);\n\t\t\t}\n\t\n\t\t\tself.refreshState();\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> blur.\n\t\t *\n\t\t * @param {object} e\n\t\t * @param {Element} dest\n\t\t */\n\t\tonBlur: function(e, dest) {\n\t\t\tvar self = this;\n\t\t\tif (!self.isFocused) return;\n\t\t\tself.isFocused = false;\n\t\n\t\t\tif (self.ignoreFocus) {\n\t\t\t\treturn;\n\t\t\t} else if (!self.ignoreBlur && document.activeElement === self.$dropdown_content[0]) {\n\t\t\t\t// necessary to prevent IE closing the dropdown when the scrollbar is clicked\n\t\t\t\tself.ignoreBlur = true;\n\t\t\t\tself.onFocus(e);\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar deactivate = function() {\n\t\t\t\tself.close();\n\t\t\t\tself.setTextboxValue('');\n\t\t\t\tself.setActiveItem(null);\n\t\t\t\tself.setActiveOption(null);\n\t\t\t\tself.setCaret(self.items.length);\n\t\t\t\tself.refreshState();\n\t\n\t\t\t\t// IE11 bug: element still marked as active\n\t\t\t\t(dest || document.body).focus();\n\t\n\t\t\t\tself.ignoreFocus = false;\n\t\t\t\tself.trigger('blur');\n\t\t\t};\n\t\n\t\t\tself.ignoreFocus = true;\n\t\t\tif (self.settings.create && self.settings.createOnBlur) {\n\t\t\t\tself.createItem(null, false, deactivate);\n\t\t\t} else {\n\t\t\t\tdeactivate();\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the user rolls over\n\t\t * an option in the autocomplete dropdown menu.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonOptionHover: function(e) {\n\t\t\tif (this.ignoreHover) return;\n\t\t\tthis.setActiveOption(e.currentTarget, false);\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the user clicks on an option\n\t\t * in the autocomplete dropdown menu.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonOptionSelect: function(e) {\n\t\t\tvar value, $target, $option, self = this;\n\t\n\t\t\tif (e.preventDefault) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\n\t\t\t$target = $(e.currentTarget);\n\t\t\tif ($target.hasClass('create')) {\n\t\t\t\tself.createItem(null, function() {\n\t\t\t\t\tif (self.settings.closeAfterSelect) {\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvalue = $target.attr('data-value');\n\t\t\t\tif (typeof value !== 'undefined') {\n\t\t\t\t\tself.lastQuery = null;\n\t\t\t\t\tself.setTextboxValue('');\n\t\t\t\t\tself.addItem(value);\n\t\t\t\t\tif (self.settings.closeAfterSelect) {\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t} else if (!self.settings.hideSelected && e.type && /mouse/.test(e.type)) {\n\t\t\t\t\t\tself.setActiveOption(self.getOption(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the user clicks on an item\n\t\t * that has been selected.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonItemSelect: function(e) {\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.isLocked) return;\n\t\t\tif (self.settings.mode === 'multi') {\n\t\t\t\te.preventDefault();\n\t\t\t\tself.setActiveItem(e.currentTarget, e);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Invokes the provided method that provides\n\t\t * results to a callback---which are then added\n\t\t * as options to the control.\n\t\t *\n\t\t * @param {function} fn\n\t\t */\n\t\tload: function(fn) {\n\t\t\tvar self = this;\n\t\t\tvar $wrapper = self.$wrapper.addClass(self.settings.loadingClass);\n\t\n\t\t\tself.loading++;\n\t\t\tfn.apply(self, [function(results) {\n\t\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\t\tif (results && results.length) {\n\t\t\t\t\tself.addOption(results);\n\t\t\t\t\tself.refreshOptions(self.isFocused && !self.isInputHidden);\n\t\t\t\t}\n\t\t\t\tif (!self.loading) {\n\t\t\t\t\t$wrapper.removeClass(self.settings.loadingClass);\n\t\t\t\t}\n\t\t\t\tself.trigger('load', results);\n\t\t\t}]);\n\t\t},\n\t\n\t\t/**\n\t\t * Sets the input field of the control to the specified value.\n\t\t *\n\t\t * @param {string} value\n\t\t */\n\t\tsetTextboxValue: function(value) {\n\t\t\tvar $input = this.$control_input;\n\t\t\tvar changed = $input.val() !== value;\n\t\t\tif (changed) {\n\t\t\t\t$input.val(value).triggerHandler('update');\n\t\t\t\tthis.lastValue = value;\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Returns the value of the control. If multiple items\n\t\t * can be selected (e.g. <select multiple>), this returns\n\t\t * an array. If only one item can be selected, this\n\t\t * returns a string.\n\t\t *\n\t\t * @returns {mixed}\n\t\t */\n\t\tgetValue: function() {\n\t\t\tif (this.tagType === TAG_SELECT && this.$input.attr('multiple')) {\n\t\t\t\treturn this.items;\n\t\t\t} else {\n\t\t\t\treturn this.items.join(this.settings.delimiter);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Resets the selected items to the given value.\n\t\t *\n\t\t * @param {mixed} value\n\t\t */\n\t\tsetValue: function(value, silent) {\n\t\t\tvar events = silent ? [] : ['change'];\n\t\n\t\t\tdebounce_events(this, events, function() {\n\t\t\t\tthis.clear(silent);\n\t\t\t\tthis.addItems(value, silent);\n\t\t\t});\n\t\t},\n\t\n\t\t/**\n\t\t * Sets the selected item.\n\t\t *\n\t\t * @param {object} $item\n\t\t * @param {object} e (optional)\n\t\t */\n\t\tsetActiveItem: function($item, e) {\n\t\t\tvar self = this;\n\t\t\tvar eventName;\n\t\t\tvar i, idx, begin, end, item, swap;\n\t\t\tvar $last;\n\t\n\t\t\tif (self.settings.mode === 'single') return;\n\t\t\t$item = $($item);\n\t\n\t\t\t// clear the active selection\n\t\t\tif (!$item.length) {\n\t\t\t\t$(self.$activeItems).removeClass('active');\n\t\t\t\tself.$activeItems = [];\n\t\t\t\tif (self.isFocused) {\n\t\t\t\t\tself.showInput();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// modify selection\n\t\t\teventName = e && e.type.toLowerCase();\n\t\n\t\t\tif (eventName === 'mousedown' && self.isShiftDown && self.$activeItems.length) {\n\t\t\t\t$last = self.$control.children('.active:last');\n\t\t\t\tbegin = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$last[0]]);\n\t\t\t\tend   = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$item[0]]);\n\t\t\t\tif (begin > end) {\n\t\t\t\t\tswap  = begin;\n\t\t\t\t\tbegin = end;\n\t\t\t\t\tend   = swap;\n\t\t\t\t}\n\t\t\t\tfor (i = begin; i <= end; i++) {\n\t\t\t\t\titem = self.$control[0].childNodes[i];\n\t\t\t\t\tif (self.$activeItems.indexOf(item) === -1) {\n\t\t\t\t\t\t$(item).addClass('active');\n\t\t\t\t\t\tself.$activeItems.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\te.preventDefault();\n\t\t\t} else if ((eventName === 'mousedown' && self.isCtrlDown) || (eventName === 'keydown' && this.isShiftDown)) {\n\t\t\t\tif ($item.hasClass('active')) {\n\t\t\t\t\tidx = self.$activeItems.indexOf($item[0]);\n\t\t\t\t\tself.$activeItems.splice(idx, 1);\n\t\t\t\t\t$item.removeClass('active');\n\t\t\t\t} else {\n\t\t\t\t\tself.$activeItems.push($item.addClass('active')[0]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$(self.$activeItems).removeClass('active');\n\t\t\t\tself.$activeItems = [$item.addClass('active')[0]];\n\t\t\t}\n\t\n\t\t\t// ensure control has focus\n\t\t\tself.hideInput();\n\t\t\tif (!this.isFocused) {\n\t\t\t\tself.focus();\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Sets the selected item in the dropdown menu\n\t\t * of available options.\n\t\t *\n\t\t * @param {object} $object\n\t\t * @param {boolean} scroll\n\t\t * @param {boolean} animate\n\t\t */\n\t\tsetActiveOption: function($option, scroll, animate) {\n\t\t\tvar height_menu, height_item, y;\n\t\t\tvar scroll_top, scroll_bottom;\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.$activeOption) self.$activeOption.removeClass('active');\n\t\t\tself.$activeOption = null;\n\t\n\t\t\t$option = $($option);\n\t\t\tif (!$option.length) return;\n\t\n\t\t\tself.$activeOption = $option.addClass('active');\n\t\n\t\t\tif (scroll || !isset(scroll)) {\n\t\n\t\t\t\theight_menu   = self.$dropdown_content.height();\n\t\t\t\theight_item   = self.$activeOption.outerHeight(true);\n\t\t\t\tscroll        = self.$dropdown_content.scrollTop() || 0;\n\t\t\t\ty             = self.$activeOption.offset().top - self.$dropdown_content.offset().top + scroll;\n\t\t\t\tscroll_top    = y;\n\t\t\t\tscroll_bottom = y - height_menu + height_item;\n\t\n\t\t\t\tif (y + height_item > height_menu + scroll) {\n\t\t\t\t\tself.$dropdown_content.stop().animate({scrollTop: scroll_bottom}, animate ? self.settings.scrollDuration : 0);\n\t\t\t\t} else if (y < scroll) {\n\t\t\t\t\tself.$dropdown_content.stop().animate({scrollTop: scroll_top}, animate ? self.settings.scrollDuration : 0);\n\t\t\t\t}\n\t\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Selects all items (CTRL + A).\n\t\t */\n\t\tselectAll: function() {\n\t\t\tvar self = this;\n\t\t\tif (self.settings.mode === 'single') return;\n\t\n\t\t\tself.$activeItems = Array.prototype.slice.apply(self.$control.children(':not(input)').addClass('active'));\n\t\t\tif (self.$activeItems.length) {\n\t\t\t\tself.hideInput();\n\t\t\t\tself.close();\n\t\t\t}\n\t\t\tself.focus();\n\t\t},\n\t\n\t\t/**\n\t\t * Hides the input element out of view, while\n\t\t * retaining its focus.\n\t\t */\n\t\thideInput: function() {\n\t\t\tvar self = this;\n\t\n\t\t\tself.setTextboxValue('');\n\t\t\tself.$control_input.css({opacity: 0, position: 'absolute', left: self.rtl ? 10000 : -10000});\n\t\t\tself.isInputHidden = true;\n\t\t},\n\t\n\t\t/**\n\t\t * Restores input visibility.\n\t\t */\n\t\tshowInput: function() {\n\t\t\tthis.$control_input.css({opacity: 1, position: 'relative', left: 0});\n\t\t\tthis.isInputHidden = false;\n\t\t},\n\t\n\t\t/**\n\t\t * Gives the control focus.\n\t\t */\n\t\tfocus: function() {\n\t\t\tvar self = this;\n\t\t\tif (self.isDisabled) return;\n\t\n\t\t\tself.ignoreFocus = true;\n\t\t\tself.$control_input[0].focus();\n\t\t\twindow.setTimeout(function() {\n\t\t\t\tself.ignoreFocus = false;\n\t\t\t\tself.onFocus();\n\t\t\t}, 0);\n\t\t},\n\t\n\t\t/**\n\t\t * Forces the control out of focus.\n\t\t *\n\t\t * @param {Element} dest\n\t\t */\n\t\tblur: function(dest) {\n\t\t\tthis.$control_input[0].blur();\n\t\t\tthis.onBlur(null, dest);\n\t\t},\n\t\n\t\t/**\n\t\t * Returns a function that scores an object\n\t\t * to show how good of a match it is to the\n\t\t * provided query.\n\t\t *\n\t\t * @param {string} query\n\t\t * @param {object} options\n\t\t * @return {function}\n\t\t */\n\t\tgetScoreFunction: function(query) {\n\t\t\treturn this.sifter.getScoreFunction(query, this.getSearchOptions());\n\t\t},\n\t\n\t\t/**\n\t\t * Returns search options for sifter (the system\n\t\t * for scoring and sorting results).\n\t\t *\n\t\t * @see https://github.com/brianreavis/sifter.js\n\t\t * @return {object}\n\t\t */\n\t\tgetSearchOptions: function() {\n\t\t\tvar settings = this.settings;\n\t\t\tvar sort = settings.sortField;\n\t\t\tif (typeof sort === 'string') {\n\t\t\t\tsort = [{field: sort}];\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tfields      : settings.searchField,\n\t\t\t\tconjunction : settings.searchConjunction,\n\t\t\t\tsort        : sort\n\t\t\t};\n\t\t},\n\t\n\t\t/**\n\t\t * Searches through available options and returns\n\t\t * a sorted array of matches.\n\t\t *\n\t\t * Returns an object containing:\n\t\t *\n\t\t *   - query {string}\n\t\t *   - tokens {array}\n\t\t *   - total {int}\n\t\t *   - items {array}\n\t\t *\n\t\t * @param {string} query\n\t\t * @returns {object}\n\t\t */\n\t\tsearch: function(query) {\n\t\t\tvar i, value, score, result, calculateScore;\n\t\t\tvar self     = this;\n\t\t\tvar settings = self.settings;\n\t\t\tvar options  = this.getSearchOptions();\n\t\n\t\t\t// validate user-provided result scoring function\n\t\t\tif (settings.score) {\n\t\t\t\tcalculateScore = self.settings.score.apply(this, [query]);\n\t\t\t\tif (typeof calculateScore !== 'function') {\n\t\t\t\t\tthrow new Error('Selectize \"score\" setting must be a function that returns a function');\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// perform search\n\t\t\tif (query !== self.lastQuery) {\n\t\t\t\tself.lastQuery = query;\n\t\t\t\tresult = self.sifter.search(query, $.extend(options, {score: calculateScore}));\n\t\t\t\tself.currentResults = result;\n\t\t\t} else {\n\t\t\t\tresult = $.extend(true, {}, self.currentResults);\n\t\t\t}\n\t\n\t\t\t// filter out selected items\n\t\t\tif (settings.hideSelected) {\n\t\t\t\tfor (i = result.items.length - 1; i >= 0; i--) {\n\t\t\t\t\tif (self.items.indexOf(hash_key(result.items[i].id)) !== -1) {\n\t\t\t\t\t\tresult.items.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\t},\n\t\n\t\t/**\n\t\t * Refreshes the list of available options shown\n\t\t * in the autocomplete dropdown menu.\n\t\t *\n\t\t * @param {boolean} triggerDropdown\n\t\t */\n\t\trefreshOptions: function(triggerDropdown) {\n\t\t\tvar i, j, k, n, groups, groups_order, option, option_html, optgroup, optgroups, html, html_children, has_create_option;\n\t\t\tvar $active, $active_before, $create;\n\t\n\t\t\tif (typeof triggerDropdown === 'undefined') {\n\t\t\t\ttriggerDropdown = true;\n\t\t\t}\n\t\n\t\t\tvar self              = this;\n\t\t\tvar query             = $.trim(self.$control_input.val());\n\t\t\tvar results           = self.search(query);\n\t\t\tvar $dropdown_content = self.$dropdown_content;\n\t\t\tvar active_before     = self.$activeOption && hash_key(self.$activeOption.attr('data-value'));\n\t\n\t\t\t// build markup\n\t\t\tn = results.items.length;\n\t\t\tif (typeof self.settings.maxOptions === 'number') {\n\t\t\t\tn = Math.min(n, self.settings.maxOptions);\n\t\t\t}\n\t\n\t\t\t// render and group available options individually\n\t\t\tgroups = {};\n\t\t\tgroups_order = [];\n\t\n\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\toption      = self.options[results.items[i].id];\n\t\t\t\toption_html = self.render('option', option);\n\t\t\t\toptgroup    = option[self.settings.optgroupField] || '';\n\t\t\t\toptgroups   = $.isArray(optgroup) ? optgroup : [optgroup];\n\t\n\t\t\t\tfor (j = 0, k = optgroups && optgroups.length; j < k; j++) {\n\t\t\t\t\toptgroup = optgroups[j];\n\t\t\t\t\tif (!self.optgroups.hasOwnProperty(optgroup)) {\n\t\t\t\t\t\toptgroup = '';\n\t\t\t\t\t}\n\t\t\t\t\tif (!groups.hasOwnProperty(optgroup)) {\n\t\t\t\t\t\tgroups[optgroup] = [];\n\t\t\t\t\t\tgroups_order.push(optgroup);\n\t\t\t\t\t}\n\t\t\t\t\tgroups[optgroup].push(option_html);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// sort optgroups\n\t\t\tif (this.settings.lockOptgroupOrder) {\n\t\t\t\tgroups_order.sort(function(a, b) {\n\t\t\t\t\tvar a_order = self.optgroups[a].$order || 0;\n\t\t\t\t\tvar b_order = self.optgroups[b].$order || 0;\n\t\t\t\t\treturn a_order - b_order;\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t// render optgroup headers & join groups\n\t\t\thtml = [];\n\t\t\tfor (i = 0, n = groups_order.length; i < n; i++) {\n\t\t\t\toptgroup = groups_order[i];\n\t\t\t\tif (self.optgroups.hasOwnProperty(optgroup) && groups[optgroup].length) {\n\t\t\t\t\t// render the optgroup header and options within it,\n\t\t\t\t\t// then pass it to the wrapper template\n\t\t\t\t\thtml_children = self.render('optgroup_header', self.optgroups[optgroup]) || '';\n\t\t\t\t\thtml_children += groups[optgroup].join('');\n\t\t\t\t\thtml.push(self.render('optgroup', $.extend({}, self.optgroups[optgroup], {\n\t\t\t\t\t\thtml: html_children\n\t\t\t\t\t})));\n\t\t\t\t} else {\n\t\t\t\t\thtml.push(groups[optgroup].join(''));\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t$dropdown_content.html(html.join(''));\n\t\n\t\t\t// highlight matching terms inline\n\t\t\tif (self.settings.highlight && results.query.length && results.tokens.length) {\n\t\t\t\tfor (i = 0, n = results.tokens.length; i < n; i++) {\n\t\t\t\t\thighlight($dropdown_content, results.tokens[i].regex);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// add \"selected\" class to selected options\n\t\t\tif (!self.settings.hideSelected) {\n\t\t\t\tfor (i = 0, n = self.items.length; i < n; i++) {\n\t\t\t\t\tself.getOption(self.items[i]).addClass('selected');\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// add create option\n\t\t\thas_create_option = self.canCreate(query);\n\t\t\tif (has_create_option) {\n\t\t\t\t$dropdown_content.prepend(self.render('option_create', {input: query}));\n\t\t\t\t$create = $($dropdown_content[0].childNodes[0]);\n\t\t\t}\n\t\n\t\t\t// activate\n\t\t\tself.hasOptions = results.items.length > 0 || has_create_option;\n\t\t\tif (self.hasOptions) {\n\t\t\t\tif (results.items.length > 0) {\n\t\t\t\t\t$active_before = active_before && self.getOption(active_before);\n\t\t\t\t\tif ($active_before && $active_before.length) {\n\t\t\t\t\t\t$active = $active_before;\n\t\t\t\t\t} else if (self.settings.mode === 'single' && self.items.length) {\n\t\t\t\t\t\t$active = self.getOption(self.items[0]);\n\t\t\t\t\t}\n\t\t\t\t\tif (!$active || !$active.length) {\n\t\t\t\t\t\tif ($create && !self.settings.addPrecedence) {\n\t\t\t\t\t\t\t$active = self.getAdjacentOption($create, 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$active = $dropdown_content.find('[data-selectable]:first');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$active = $create;\n\t\t\t\t}\n\t\t\t\tself.setActiveOption($active);\n\t\t\t\tif (triggerDropdown && !self.isOpen) { self.open(); }\n\t\t\t} else {\n\t\t\t\tself.setActiveOption(null);\n\t\t\t\tif (triggerDropdown && self.isOpen) { self.close(); }\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Adds an available option. If it already exists,\n\t\t * nothing will happen. Note: this does not refresh\n\t\t * the options list dropdown (use `refreshOptions`\n\t\t * for that).\n\t\t *\n\t\t * Usage:\n\t\t *\n\t\t *   this.addOption(data)\n\t\t *\n\t\t * @param {object|array} data\n\t\t */\n\t\taddOption: function(data) {\n\t\t\tvar i, n, value, self = this;\n\t\n\t\t\tif ($.isArray(data)) {\n\t\t\t\tfor (i = 0, n = data.length; i < n; i++) {\n\t\t\t\t\tself.addOption(data[i]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (value = self.registerOption(data)) {\n\t\t\t\tself.userOptions[value] = true;\n\t\t\t\tself.lastQuery = null;\n\t\t\t\tself.trigger('option_add', value, data);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Registers an option to the pool of options.\n\t\t *\n\t\t * @param {object} data\n\t\t * @return {boolean|string}\n\t\t */\n\t\tregisterOption: function(data) {\n\t\t\tvar key = hash_key(data[this.settings.valueField]);\n\t\t\tif (!key || this.options.hasOwnProperty(key)) return false;\n\t\t\tdata.$order = data.$order || ++this.order;\n\t\t\tthis.options[key] = data;\n\t\t\treturn key;\n\t\t},\n\t\n\t\t/**\n\t\t * Registers an option group to the pool of option groups.\n\t\t *\n\t\t * @param {object} data\n\t\t * @return {boolean|string}\n\t\t */\n\t\tregisterOptionGroup: function(data) {\n\t\t\tvar key = hash_key(data[this.settings.optgroupValueField]);\n\t\t\tif (!key) return false;\n\t\n\t\t\tdata.$order = data.$order || ++this.order;\n\t\t\tthis.optgroups[key] = data;\n\t\t\treturn key;\n\t\t},\n\t\n\t\t/**\n\t\t * Registers a new optgroup for options\n\t\t * to be bucketed into.\n\t\t *\n\t\t * @param {string} id\n\t\t * @param {object} data\n\t\t */\n\t\taddOptionGroup: function(id, data) {\n\t\t\tdata[this.settings.optgroupValueField] = id;\n\t\t\tif (id = this.registerOptionGroup(data)) {\n\t\t\t\tthis.trigger('optgroup_add', id, data);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Removes an existing option group.\n\t\t *\n\t\t * @param {string} id\n\t\t */\n\t\tremoveOptionGroup: function(id) {\n\t\t\tif (this.optgroups.hasOwnProperty(id)) {\n\t\t\t\tdelete this.optgroups[id];\n\t\t\t\tthis.renderCache = {};\n\t\t\t\tthis.trigger('optgroup_remove', id);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Clears all existing option groups.\n\t\t */\n\t\tclearOptionGroups: function() {\n\t\t\tthis.optgroups = {};\n\t\t\tthis.renderCache = {};\n\t\t\tthis.trigger('optgroup_clear');\n\t\t},\n\t\n\t\t/**\n\t\t * Updates an option available for selection. If\n\t\t * it is visible in the selected items or options\n\t\t * dropdown, it will be re-rendered automatically.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {object} data\n\t\t */\n\t\tupdateOption: function(value, data) {\n\t\t\tvar self = this;\n\t\t\tvar $item, $item_new;\n\t\t\tvar value_new, index_item, cache_items, cache_options, order_old;\n\t\n\t\t\tvalue     = hash_key(value);\n\t\t\tvalue_new = hash_key(data[self.settings.valueField]);\n\t\n\t\t\t// sanity checks\n\t\t\tif (value === null) return;\n\t\t\tif (!self.options.hasOwnProperty(value)) return;\n\t\t\tif (typeof value_new !== 'string') throw new Error('Value must be set in option data');\n\t\n\t\t\torder_old = self.options[value].$order;\n\t\n\t\t\t// update references\n\t\t\tif (value_new !== value) {\n\t\t\t\tdelete self.options[value];\n\t\t\t\tindex_item = self.items.indexOf(value);\n\t\t\t\tif (index_item !== -1) {\n\t\t\t\t\tself.items.splice(index_item, 1, value_new);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdata.$order = data.$order || order_old;\n\t\t\tself.options[value_new] = data;\n\t\n\t\t\t// invalidate render cache\n\t\t\tcache_items = self.renderCache['item'];\n\t\t\tcache_options = self.renderCache['option'];\n\t\n\t\t\tif (cache_items) {\n\t\t\t\tdelete cache_items[value];\n\t\t\t\tdelete cache_items[value_new];\n\t\t\t}\n\t\t\tif (cache_options) {\n\t\t\t\tdelete cache_options[value];\n\t\t\t\tdelete cache_options[value_new];\n\t\t\t}\n\t\n\t\t\t// update the item if it's selected\n\t\t\tif (self.items.indexOf(value_new) !== -1) {\n\t\t\t\t$item = self.getItem(value);\n\t\t\t\t$item_new = $(self.render('item', data));\n\t\t\t\tif ($item.hasClass('active')) $item_new.addClass('active');\n\t\t\t\t$item.replaceWith($item_new);\n\t\t\t}\n\t\n\t\t\t// invalidate last query because we might have updated the sortField\n\t\t\tself.lastQuery = null;\n\t\n\t\t\t// update dropdown contents\n\t\t\tif (self.isOpen) {\n\t\t\t\tself.refreshOptions(false);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Removes a single option.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} silent\n\t\t */\n\t\tremoveOption: function(value, silent) {\n\t\t\tvar self = this;\n\t\t\tvalue = hash_key(value);\n\t\n\t\t\tvar cache_items = self.renderCache['item'];\n\t\t\tvar cache_options = self.renderCache['option'];\n\t\t\tif (cache_items) delete cache_items[value];\n\t\t\tif (cache_options) delete cache_options[value];\n\t\n\t\t\tdelete self.userOptions[value];\n\t\t\tdelete self.options[value];\n\t\t\tself.lastQuery = null;\n\t\t\tself.trigger('option_remove', value);\n\t\t\tself.removeItem(value, silent);\n\t\t},\n\t\n\t\t/**\n\t\t * Clears all options.\n\t\t */\n\t\tclearOptions: function() {\n\t\t\tvar self = this;\n\t\n\t\t\tself.loadedSearches = {};\n\t\t\tself.userOptions = {};\n\t\t\tself.renderCache = {};\n\t\t\tself.options = self.sifter.items = {};\n\t\t\tself.lastQuery = null;\n\t\t\tself.trigger('option_clear');\n\t\t\tself.clear();\n\t\t},\n\t\n\t\t/**\n\t\t * Returns the jQuery element of the option\n\t\t * matching the given value.\n\t\t *\n\t\t * @param {string} value\n\t\t * @returns {object}\n\t\t */\n\t\tgetOption: function(value) {\n\t\t\treturn this.getElementWithValue(value, this.$dropdown_content.find('[data-selectable]'));\n\t\t},\n\t\n\t\t/**\n\t\t * Returns the jQuery element of the next or\n\t\t * previous selectable option.\n\t\t *\n\t\t * @param {object} $option\n\t\t * @param {int} direction  can be 1 for next or -1 for previous\n\t\t * @return {object}\n\t\t */\n\t\tgetAdjacentOption: function($option, direction) {\n\t\t\tvar $options = this.$dropdown.find('[data-selectable]');\n\t\t\tvar index    = $options.index($option) + direction;\n\t\n\t\t\treturn index >= 0 && index < $options.length ? $options.eq(index) : $();\n\t\t},\n\t\n\t\t/**\n\t\t * Finds the first element with a \"data-value\" attribute\n\t\t * that matches the given value.\n\t\t *\n\t\t * @param {mixed} value\n\t\t * @param {object} $els\n\t\t * @return {object}\n\t\t */\n\t\tgetElementWithValue: function(value, $els) {\n\t\t\tvalue = hash_key(value);\n\t\n\t\t\tif (typeof value !== 'undefined' && value !== null) {\n\t\t\t\tfor (var i = 0, n = $els.length; i < n; i++) {\n\t\t\t\t\tif ($els[i].getAttribute('data-value') === value) {\n\t\t\t\t\t\treturn $($els[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn $();\n\t\t},\n\t\n\t\t/**\n\t\t * Returns the jQuery element of the item\n\t\t * matching the given value.\n\t\t *\n\t\t * @param {string} value\n\t\t * @returns {object}\n\t\t */\n\t\tgetItem: function(value) {\n\t\t\treturn this.getElementWithValue(value, this.$control.children());\n\t\t},\n\t\n\t\t/**\n\t\t * \"Selects\" multiple items at once. Adds them to the list\n\t\t * at the current caret position.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} silent\n\t\t */\n\t\taddItems: function(values, silent) {\n\t\t\tvar items = $.isArray(values) ? values : [values];\n\t\t\tfor (var i = 0, n = items.length; i < n; i++) {\n\t\t\t\tthis.isPending = (i < n - 1);\n\t\t\t\tthis.addItem(items[i], silent);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * \"Selects\" an item. Adds it to the list\n\t\t * at the current caret position.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} silent\n\t\t */\n\t\taddItem: function(value, silent) {\n\t\t\tvar events = silent ? [] : ['change'];\n\t\n\t\t\tdebounce_events(this, events, function() {\n\t\t\t\tvar $item, $option, $options;\n\t\t\t\tvar self = this;\n\t\t\t\tvar inputMode = self.settings.mode;\n\t\t\t\tvar i, active, value_next, wasFull;\n\t\t\t\tvalue = hash_key(value);\n\t\n\t\t\t\tif (self.items.indexOf(value) !== -1) {\n\t\t\t\t\tif (inputMode === 'single') self.close();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tif (!self.options.hasOwnProperty(value)) return;\n\t\t\t\tif (inputMode === 'single') self.clear(silent);\n\t\t\t\tif (inputMode === 'multi' && self.isFull()) return;\n\t\n\t\t\t\t$item = $(self.render('item', self.options[value]));\n\t\t\t\twasFull = self.isFull();\n\t\t\t\tself.items.splice(self.caretPos, 0, value);\n\t\t\t\tself.insertAtCaret($item);\n\t\t\t\tif (!self.isPending || (!wasFull && self.isFull())) {\n\t\t\t\t\tself.refreshState();\n\t\t\t\t}\n\t\n\t\t\t\tif (self.isSetup) {\n\t\t\t\t\t$options = self.$dropdown_content.find('[data-selectable]');\n\t\n\t\t\t\t\t// update menu / remove the option (if this is not one item being added as part of series)\n\t\t\t\t\tif (!self.isPending) {\n\t\t\t\t\t\t$option = self.getOption(value);\n\t\t\t\t\t\tvalue_next = self.getAdjacentOption($option, 1).attr('data-value');\n\t\t\t\t\t\tself.refreshOptions(self.isFocused && inputMode !== 'single');\n\t\t\t\t\t\tif (value_next) {\n\t\t\t\t\t\t\tself.setActiveOption(self.getOption(value_next));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// hide the menu if the maximum number of items have been selected or no options are left\n\t\t\t\t\tif (!$options.length || self.isFull()) {\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.positionDropdown();\n\t\t\t\t\t}\n\t\n\t\t\t\t\tself.updatePlaceholder();\n\t\t\t\t\tself.trigger('item_add', value, $item);\n\t\t\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\n\t\t/**\n\t\t * Removes the selected item matching\n\t\t * the provided value.\n\t\t *\n\t\t * @param {string} value\n\t\t */\n\t\tremoveItem: function(value, silent) {\n\t\t\tvar self = this;\n\t\t\tvar $item, i, idx;\n\t\n\t\t\t$item = (typeof value === 'object') ? value : self.getItem(value);\n\t\t\tvalue = hash_key($item.attr('data-value'));\n\t\t\ti = self.items.indexOf(value);\n\t\n\t\t\tif (i !== -1) {\n\t\t\t\t$item.remove();\n\t\t\t\tif ($item.hasClass('active')) {\n\t\t\t\t\tidx = self.$activeItems.indexOf($item[0]);\n\t\t\t\t\tself.$activeItems.splice(idx, 1);\n\t\t\t\t}\n\t\n\t\t\t\tself.items.splice(i, 1);\n\t\t\t\tself.lastQuery = null;\n\t\t\t\tif (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {\n\t\t\t\t\tself.removeOption(value, silent);\n\t\t\t\t}\n\t\n\t\t\t\tif (i < self.caretPos) {\n\t\t\t\t\tself.setCaret(self.caretPos - 1);\n\t\t\t\t}\n\t\n\t\t\t\tself.refreshState();\n\t\t\t\tself.updatePlaceholder();\n\t\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\t\tself.positionDropdown();\n\t\t\t\tself.trigger('item_remove', value, $item);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Invokes the `create` method provided in the\n\t\t * selectize options that should provide the data\n\t\t * for the new item, given the user input.\n\t\t *\n\t\t * Once this completes, it will be added\n\t\t * to the item list.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} [triggerDropdown]\n\t\t * @param {function} [callback]\n\t\t * @return {boolean}\n\t\t */\n\t\tcreateItem: function(input, triggerDropdown) {\n\t\t\tvar self  = this;\n\t\t\tvar caret = self.caretPos;\n\t\t\tinput = input || $.trim(self.$control_input.val() || '');\n\t\n\t\t\tvar callback = arguments[arguments.length - 1];\n\t\t\tif (typeof callback !== 'function') callback = function() {};\n\t\n\t\t\tif (typeof triggerDropdown !== 'boolean') {\n\t\t\t\ttriggerDropdown = true;\n\t\t\t}\n\t\n\t\t\tif (!self.canCreate(input)) {\n\t\t\t\tcallback();\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tself.lock();\n\t\n\t\t\tvar setup = (typeof self.settings.create === 'function') ? this.settings.create : function(input) {\n\t\t\t\tvar data = {};\n\t\t\t\tdata[self.settings.labelField] = input;\n\t\t\t\tdata[self.settings.valueField] = input;\n\t\t\t\treturn data;\n\t\t\t};\n\t\n\t\t\tvar create = once(function(data) {\n\t\t\t\tself.unlock();\n\t\n\t\t\t\tif (!data || typeof data !== 'object') return callback();\n\t\t\t\tvar value = hash_key(data[self.settings.valueField]);\n\t\t\t\tif (typeof value !== 'string') return callback();\n\t\n\t\t\t\tself.setTextboxValue('');\n\t\t\t\tself.addOption(data);\n\t\t\t\tself.setCaret(caret);\n\t\t\t\tself.addItem(value);\n\t\t\t\tself.refreshOptions(triggerDropdown && self.settings.mode !== 'single');\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\n\t\t\tvar output = setup.apply(this, [input, create]);\n\t\t\tif (typeof output !== 'undefined') {\n\t\t\t\tcreate(output);\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\t},\n\t\n\t\t/**\n\t\t * Re-renders the selected item lists.\n\t\t */\n\t\trefreshItems: function() {\n\t\t\tthis.lastQuery = null;\n\t\n\t\t\tif (this.isSetup) {\n\t\t\t\tthis.addItem(this.items);\n\t\t\t}\n\t\n\t\t\tthis.refreshState();\n\t\t\tthis.updateOriginalInput();\n\t\t},\n\t\n\t\t/**\n\t\t * Updates all state-dependent attributes\n\t\t * and CSS classes.\n\t\t */\n\t\trefreshState: function() {\n\t\t\tvar invalid, self = this;\n\t\t\tif (self.isRequired) {\n\t\t\t\tif (self.items.length) self.isInvalid = false;\n\t\t\t\tself.$control_input.prop('required', invalid);\n\t\t\t}\n\t\t\tself.refreshClasses();\n\t\t},\n\t\n\t\t/**\n\t\t * Updates all state-dependent CSS classes.\n\t\t */\n\t\trefreshClasses: function() {\n\t\t\tvar self     = this;\n\t\t\tvar isFull   = self.isFull();\n\t\t\tvar isLocked = self.isLocked;\n\t\n\t\t\tself.$wrapper\n\t\t\t\t.toggleClass('rtl', self.rtl);\n\t\n\t\t\tself.$control\n\t\t\t\t.toggleClass('focus', self.isFocused)\n\t\t\t\t.toggleClass('disabled', self.isDisabled)\n\t\t\t\t.toggleClass('required', self.isRequired)\n\t\t\t\t.toggleClass('invalid', self.isInvalid)\n\t\t\t\t.toggleClass('locked', isLocked)\n\t\t\t\t.toggleClass('full', isFull).toggleClass('not-full', !isFull)\n\t\t\t\t.toggleClass('input-active', self.isFocused && !self.isInputHidden)\n\t\t\t\t.toggleClass('dropdown-active', self.isOpen)\n\t\t\t\t.toggleClass('has-options', !$.isEmptyObject(self.options))\n\t\t\t\t.toggleClass('has-items', self.items.length > 0);\n\t\n\t\t\tself.$control_input.data('grow', !isFull && !isLocked);\n\t\t},\n\t\n\t\t/**\n\t\t * Determines whether or not more items can be added\n\t\t * to the control without exceeding the user-defined maximum.\n\t\t *\n\t\t * @returns {boolean}\n\t\t */\n\t\tisFull: function() {\n\t\t\treturn this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;\n\t\t},\n\t\n\t\t/**\n\t\t * Refreshes the original <select> or <input>\n\t\t * element to reflect the current state.\n\t\t */\n\t\tupdateOriginalInput: function(opts) {\n\t\t\tvar i, n, options, label, self = this;\n\t\t\topts = opts || {};\n\t\n\t\t\tif (self.tagType === TAG_SELECT) {\n\t\t\t\toptions = [];\n\t\t\t\tfor (i = 0, n = self.items.length; i < n; i++) {\n\t\t\t\t\tlabel = self.options[self.items[i]][self.settings.labelField] || '';\n\t\t\t\t\toptions.push('<option value=\"' + escape_html(self.items[i]) + '\" selected=\"selected\">' + escape_html(label) + '</option>');\n\t\t\t\t}\n\t\t\t\tif (!options.length && !this.$input.attr('multiple')) {\n\t\t\t\t\toptions.push('<option value=\"\" selected=\"selected\"></option>');\n\t\t\t\t}\n\t\t\t\tself.$input.html(options.join(''));\n\t\t\t} else {\n\t\t\t\tself.$input.val(self.getValue());\n\t\t\t\tself.$input.attr('value',self.$input.val());\n\t\t\t}\n\t\n\t\t\tif (self.isSetup) {\n\t\t\t\tif (!opts.silent) {\n\t\t\t\t\tself.trigger('change', self.$input.val());\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Shows/hide the input placeholder depending\n\t\t * on if there items in the list already.\n\t\t */\n\t\tupdatePlaceholder: function() {\n\t\t\tif (!this.settings.placeholder) return;\n\t\t\tvar $input = this.$control_input;\n\t\n\t\t\tif (this.items.length) {\n\t\t\t\t$input.removeAttr('placeholder');\n\t\t\t} else {\n\t\t\t\t$input.attr('placeholder', this.settings.placeholder);\n\t\t\t}\n\t\t\t$input.triggerHandler('update', {force: true});\n\t\t},\n\t\n\t\t/**\n\t\t * Shows the autocomplete dropdown containing\n\t\t * the available options.\n\t\t */\n\t\topen: function() {\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.isLocked || self.isOpen || (self.settings.mode === 'multi' && self.isFull())) return;\n\t\t\tself.focus();\n\t\t\tself.isOpen = true;\n\t\t\tself.refreshState();\n\t\t\tself.$dropdown.css({visibility: 'hidden', display: 'block'});\n\t\t\tself.positionDropdown();\n\t\t\tself.$dropdown.css({visibility: 'visible'});\n\t\t\tself.trigger('dropdown_open', self.$dropdown);\n\t\t},\n\t\n\t\t/**\n\t\t * Closes the autocomplete dropdown menu.\n\t\t */\n\t\tclose: function() {\n\t\t\tvar self = this;\n\t\t\tvar trigger = self.isOpen;\n\t\n\t\t\tif (self.settings.mode === 'single' && self.items.length) {\n\t\t\t\tself.hideInput();\n\t\t\t}\n\t\n\t\t\tself.isOpen = false;\n\t\t\tself.$dropdown.hide();\n\t\t\tself.setActiveOption(null);\n\t\t\tself.refreshState();\n\t\n\t\t\tif (trigger) self.trigger('dropdown_close', self.$dropdown);\n\t\t},\n\t\n\t\t/**\n\t\t * Calculates and applies the appropriate\n\t\t * position of the dropdown.\n\t\t */\n\t\tpositionDropdown: function() {\n\t\t\tvar $control = this.$control;\n\t\t\tvar offset = this.settings.dropdownParent === 'body' ? $control.offset() : $control.position();\n\t\t\toffset.top += $control.outerHeight(true);\n\t\n\t\t\tthis.$dropdown.css({\n\t\t\t\twidth : $control.outerWidth(),\n\t\t\t\ttop   : offset.top,\n\t\t\t\tleft  : offset.left\n\t\t\t});\n\t\t},\n\t\n\t\t/**\n\t\t * Resets / clears all selected items\n\t\t * from the control.\n\t\t *\n\t\t * @param {boolean} silent\n\t\t */\n\t\tclear: function(silent) {\n\t\t\tvar self = this;\n\t\n\t\t\tif (!self.items.length) return;\n\t\t\tself.$control.children(':not(input)').remove();\n\t\t\tself.items = [];\n\t\t\tself.lastQuery = null;\n\t\t\tself.setCaret(0);\n\t\t\tself.setActiveItem(null);\n\t\t\tself.updatePlaceholder();\n\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\tself.refreshState();\n\t\t\tself.showInput();\n\t\t\tself.trigger('clear');\n\t\t},\n\t\n\t\t/**\n\t\t * A helper method for inserting an element\n\t\t * at the current caret position.\n\t\t *\n\t\t * @param {object} $el\n\t\t */\n\t\tinsertAtCaret: function($el) {\n\t\t\tvar caret = Math.min(this.caretPos, this.items.length);\n\t\t\tif (caret === 0) {\n\t\t\t\tthis.$control.prepend($el);\n\t\t\t} else {\n\t\t\t\t$(this.$control[0].childNodes[caret]).before($el);\n\t\t\t}\n\t\t\tthis.setCaret(caret + 1);\n\t\t},\n\t\n\t\t/**\n\t\t * Removes the current selected item(s).\n\t\t *\n\t\t * @param {object} e (optional)\n\t\t * @returns {boolean}\n\t\t */\n\t\tdeleteSelection: function(e) {\n\t\t\tvar i, n, direction, selection, values, caret, option_select, $option_select, $tail;\n\t\t\tvar self = this;\n\t\n\t\t\tdirection = (e && e.keyCode === KEY_BACKSPACE) ? -1 : 1;\n\t\t\tselection = getSelection(self.$control_input[0]);\n\t\n\t\t\tif (self.$activeOption && !self.settings.hideSelected) {\n\t\t\t\toption_select = self.getAdjacentOption(self.$activeOption, -1).attr('data-value');\n\t\t\t}\n\t\n\t\t\t// determine items that will be removed\n\t\t\tvalues = [];\n\t\n\t\t\tif (self.$activeItems.length) {\n\t\t\t\t$tail = self.$control.children('.active:' + (direction > 0 ? 'last' : 'first'));\n\t\t\t\tcaret = self.$control.children(':not(input)').index($tail);\n\t\t\t\tif (direction > 0) { caret++; }\n\t\n\t\t\t\tfor (i = 0, n = self.$activeItems.length; i < n; i++) {\n\t\t\t\t\tvalues.push($(self.$activeItems[i]).attr('data-value'));\n\t\t\t\t}\n\t\t\t\tif (e) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t} else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {\n\t\t\t\tif (direction < 0 && selection.start === 0 && selection.length === 0) {\n\t\t\t\t\tvalues.push(self.items[self.caretPos - 1]);\n\t\t\t\t} else if (direction > 0 && selection.start === self.$control_input.val().length) {\n\t\t\t\t\tvalues.push(self.items[self.caretPos]);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// allow the callback to abort\n\t\t\tif (!values.length || (typeof self.settings.onDelete === 'function' && self.settings.onDelete.apply(self, [values]) === false)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t// perform removal\n\t\t\tif (typeof caret !== 'undefined') {\n\t\t\t\tself.setCaret(caret);\n\t\t\t}\n\t\t\twhile (values.length) {\n\t\t\t\tself.removeItem(values.pop());\n\t\t\t}\n\t\n\t\t\tself.showInput();\n\t\t\tself.positionDropdown();\n\t\t\tself.refreshOptions(true);\n\t\n\t\t\t// select previous option\n\t\t\tif (option_select) {\n\t\t\t\t$option_select = self.getOption(option_select);\n\t\t\t\tif ($option_select.length) {\n\t\t\t\t\tself.setActiveOption($option_select);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\t},\n\t\n\t\t/**\n\t\t * Selects the previous / next item (depending\n\t\t * on the `direction` argument).\n\t\t *\n\t\t * > 0 - right\n\t\t * < 0 - left\n\t\t *\n\t\t * @param {int} direction\n\t\t * @param {object} e (optional)\n\t\t */\n\t\tadvanceSelection: function(direction, e) {\n\t\t\tvar tail, selection, idx, valueLength, cursorAtEdge, $tail;\n\t\t\tvar self = this;\n\t\n\t\t\tif (direction === 0) return;\n\t\t\tif (self.rtl) direction *= -1;\n\t\n\t\t\ttail = direction > 0 ? 'last' : 'first';\n\t\t\tselection = getSelection(self.$control_input[0]);\n\t\n\t\t\tif (self.isFocused && !self.isInputHidden) {\n\t\t\t\tvalueLength = self.$control_input.val().length;\n\t\t\t\tcursorAtEdge = direction < 0\n\t\t\t\t\t? selection.start === 0 && selection.length === 0\n\t\t\t\t\t: selection.start === valueLength;\n\t\n\t\t\t\tif (cursorAtEdge && !valueLength) {\n\t\t\t\t\tself.advanceCaret(direction, e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$tail = self.$control.children('.active:' + tail);\n\t\t\t\tif ($tail.length) {\n\t\t\t\t\tidx = self.$control.children(':not(input)').index($tail);\n\t\t\t\t\tself.setActiveItem(null);\n\t\t\t\t\tself.setCaret(direction > 0 ? idx + 1 : idx);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Moves the caret left / right.\n\t\t *\n\t\t * @param {int} direction\n\t\t * @param {object} e (optional)\n\t\t */\n\t\tadvanceCaret: function(direction, e) {\n\t\t\tvar self = this, fn, $adj;\n\t\n\t\t\tif (direction === 0) return;\n\t\n\t\t\tfn = direction > 0 ? 'next' : 'prev';\n\t\t\tif (self.isShiftDown) {\n\t\t\t\t$adj = self.$control_input[fn]();\n\t\t\t\tif ($adj.length) {\n\t\t\t\t\tself.hideInput();\n\t\t\t\t\tself.setActiveItem($adj);\n\t\t\t\t\te && e.preventDefault();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tself.setCaret(self.caretPos + direction);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Moves the caret to the specified index.\n\t\t *\n\t\t * @param {int} i\n\t\t */\n\t\tsetCaret: function(i) {\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.settings.mode === 'single') {\n\t\t\t\ti = self.items.length;\n\t\t\t} else {\n\t\t\t\ti = Math.max(0, Math.min(self.items.length, i));\n\t\t\t}\n\t\n\t\t\tif(!self.isPending) {\n\t\t\t\t// the input must be moved by leaving it in place and moving the\n\t\t\t\t// siblings, due to the fact that focus cannot be restored once lost\n\t\t\t\t// on mobile webkit devices\n\t\t\t\tvar j, n, fn, $children, $child;\n\t\t\t\t$children = self.$control.children(':not(input)');\n\t\t\t\tfor (j = 0, n = $children.length; j < n; j++) {\n\t\t\t\t\t$child = $($children[j]).detach();\n\t\t\t\t\tif (j <  i) {\n\t\t\t\t\t\tself.$control_input.before($child);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.$control.append($child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tself.caretPos = i;\n\t\t},\n\t\n\t\t/**\n\t\t * Disables user input on the control. Used while\n\t\t * items are being asynchronously created.\n\t\t */\n\t\tlock: function() {\n\t\t\tthis.close();\n\t\t\tthis.isLocked = true;\n\t\t\tthis.refreshState();\n\t\t},\n\t\n\t\t/**\n\t\t * Re-enables user input on the control.\n\t\t */\n\t\tunlock: function() {\n\t\t\tthis.isLocked = false;\n\t\t\tthis.refreshState();\n\t\t},\n\t\n\t\t/**\n\t\t * Disables user input on the control completely.\n\t\t * While disabled, it cannot receive focus.\n\t\t */\n\t\tdisable: function() {\n\t\t\tvar self = this;\n\t\t\tself.$input.prop('disabled', true);\n\t\t\tself.$control_input.prop('disabled', true).prop('tabindex', -1);\n\t\t\tself.isDisabled = true;\n\t\t\tself.lock();\n\t\t},\n\t\n\t\t/**\n\t\t * Enables the control so that it can respond\n\t\t * to focus and user input.\n\t\t */\n\t\tenable: function() {\n\t\t\tvar self = this;\n\t\t\tself.$input.prop('disabled', false);\n\t\t\tself.$control_input.prop('disabled', false).prop('tabindex', self.tabIndex);\n\t\t\tself.isDisabled = false;\n\t\t\tself.unlock();\n\t\t},\n\t\n\t\t/**\n\t\t * Completely destroys the control and\n\t\t * unbinds all event listeners so that it can\n\t\t * be garbage collected.\n\t\t */\n\t\tdestroy: function() {\n\t\t\tvar self = this;\n\t\t\tvar eventNS = self.eventNS;\n\t\t\tvar revertSettings = self.revertSettings;\n\t\n\t\t\tself.trigger('destroy');\n\t\t\tself.off();\n\t\t\tself.$wrapper.remove();\n\t\t\tself.$dropdown.remove();\n\t\n\t\t\tself.$input\n\t\t\t\t.html('')\n\t\t\t\t.append(revertSettings.$children)\n\t\t\t\t.removeAttr('tabindex')\n\t\t\t\t.removeClass('selectized')\n\t\t\t\t.attr({tabindex: revertSettings.tabindex})\n\t\t\t\t.show();\n\t\n\t\t\tself.$control_input.removeData('grow');\n\t\t\tself.$input.removeData('selectize');\n\t\n\t\t\t$(window).off(eventNS);\n\t\t\t$(document).off(eventNS);\n\t\t\t$(document.body).off(eventNS);\n\t\n\t\t\tdelete self.$input[0].selectize;\n\t\t},\n\t\n\t\t/**\n\t\t * A helper method for rendering \"item\" and\n\t\t * \"option\" templates, given the data.\n\t\t *\n\t\t * @param {string} templateName\n\t\t * @param {object} data\n\t\t * @returns {string}\n\t\t */\n\t\trender: function(templateName, data) {\n\t\t\tvar value, id, label;\n\t\t\tvar html = '';\n\t\t\tvar cache = false;\n\t\t\tvar self = this;\n\t\t\tvar regex_tag = /^[\\t \\r\\n]*<([a-z][a-z0-9\\-_]*(?:\\:[a-z][a-z0-9\\-_]*)?)/i;\n\t\n\t\t\tif (templateName === 'option' || templateName === 'item') {\n\t\t\t\tvalue = hash_key(data[self.settings.valueField]);\n\t\t\t\tcache = !!value;\n\t\t\t}\n\t\n\t\t\t// pull markup from cache if it exists\n\t\t\tif (cache) {\n\t\t\t\tif (!isset(self.renderCache[templateName])) {\n\t\t\t\t\tself.renderCache[templateName] = {};\n\t\t\t\t}\n\t\t\t\tif (self.renderCache[templateName].hasOwnProperty(value)) {\n\t\t\t\t\treturn self.renderCache[templateName][value];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// render markup\n\t\t\thtml = self.settings.render[templateName].apply(this, [data, escape_html]);\n\t\n\t\t\t// add mandatory attributes\n\t\t\tif (templateName === 'option' || templateName === 'option_create') {\n\t\t\t\thtml = html.replace(regex_tag, '<$1 data-selectable');\n\t\t\t}\n\t\t\tif (templateName === 'optgroup') {\n\t\t\t\tid = data[self.settings.optgroupValueField] || '';\n\t\t\t\thtml = html.replace(regex_tag, '<$1 data-group=\"' + escape_replace(escape_html(id)) + '\"');\n\t\t\t}\n\t\t\tif (templateName === 'option' || templateName === 'item') {\n\t\t\t\thtml = html.replace(regex_tag, '<$1 data-value=\"' + escape_replace(escape_html(value || '')) + '\"');\n\t\t\t}\n\t\n\t\t\t// update cache\n\t\t\tif (cache) {\n\t\t\t\tself.renderCache[templateName][value] = html;\n\t\t\t}\n\t\n\t\t\treturn html;\n\t\t},\n\t\n\t\t/**\n\t\t * Clears the render cache for a template. If\n\t\t * no template is given, clears all render\n\t\t * caches.\n\t\t *\n\t\t * @param {string} templateName\n\t\t */\n\t\tclearCache: function(templateName) {\n\t\t\tvar self = this;\n\t\t\tif (typeof templateName === 'undefined') {\n\t\t\t\tself.renderCache = {};\n\t\t\t} else {\n\t\t\t\tdelete self.renderCache[templateName];\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Determines whether or not to display the\n\t\t * create item prompt, given a user input.\n\t\t *\n\t\t * @param {string} input\n\t\t * @return {boolean}\n\t\t */\n\t\tcanCreate: function(input) {\n\t\t\tvar self = this;\n\t\t\tif (!self.settings.create) return false;\n\t\t\tvar filter = self.settings.createFilter;\n\t\t\treturn input.length\n\t\t\t\t&& (typeof filter !== 'function' || filter.apply(self, [input]))\n\t\t\t\t&& (typeof filter !== 'string' || new RegExp(filter).test(input))\n\t\t\t\t&& (!(filter instanceof RegExp) || filter.test(input));\n\t\t}\n\t\n\t});\n\t\n\t\n\tSelectize.count = 0;\n\tSelectize.defaults = {\n\t\toptions: [],\n\t\toptgroups: [],\n\t\n\t\tplugins: [],\n\t\tdelimiter: ',',\n\t\tsplitOn: null, // regexp or string for splitting up values from a paste command\n\t\tpersist: true,\n\t\tdiacritics: true,\n\t\tcreate: false,\n\t\tcreateOnBlur: false,\n\t\tcreateFilter: null,\n\t\thighlight: true,\n\t\topenOnFocus: true,\n\t\tmaxOptions: 1000,\n\t\tmaxItems: null,\n\t\thideSelected: null,\n\t\taddPrecedence: false,\n\t\tselectOnTab: false,\n\t\tpreload: false,\n\t\tallowEmptyOption: false,\n\t\tcloseAfterSelect: false,\n\t\n\t\tscrollDuration: 60,\n\t\tloadThrottle: 300,\n\t\tloadingClass: 'loading',\n\t\n\t\tdataAttr: 'data-data',\n\t\toptgroupField: 'optgroup',\n\t\tvalueField: 'value',\n\t\tlabelField: 'text',\n\t\toptgroupLabelField: 'label',\n\t\toptgroupValueField: 'value',\n\t\tlockOptgroupOrder: false,\n\t\n\t\tsortField: '$order',\n\t\tsearchField: ['text'],\n\t\tsearchConjunction: 'and',\n\t\n\t\tmode: null,\n\t\twrapperClass: 'selectize-control',\n\t\tinputClass: 'selectize-input',\n\t\tdropdownClass: 'selectize-dropdown',\n\t\tdropdownContentClass: 'selectize-dropdown-content',\n\t\n\t\tdropdownParent: null,\n\t\n\t\tcopyClassesToDropdown: true,\n\t\n\t\t/*\n\t\tload                 : null, // function(query, callback) { ... }\n\t\tscore                : null, // function(search) { ... }\n\t\tonInitialize         : null, // function() { ... }\n\t\tonChange             : null, // function(value) { ... }\n\t\tonItemAdd            : null, // function(value, $item) { ... }\n\t\tonItemRemove         : null, // function(value) { ... }\n\t\tonClear              : null, // function() { ... }\n\t\tonOptionAdd          : null, // function(value, data) { ... }\n\t\tonOptionRemove       : null, // function(value) { ... }\n\t\tonOptionClear        : null, // function() { ... }\n\t\tonOptionGroupAdd     : null, // function(id, data) { ... }\n\t\tonOptionGroupRemove  : null, // function(id) { ... }\n\t\tonOptionGroupClear   : null, // function() { ... }\n\t\tonDropdownOpen       : null, // function($dropdown) { ... }\n\t\tonDropdownClose      : null, // function($dropdown) { ... }\n\t\tonType               : null, // function(str) { ... }\n\t\tonDelete             : null, // function(values) { ... }\n\t\t*/\n\t\n\t\trender: {\n\t\t\t/*\n\t\t\titem: null,\n\t\t\toptgroup: null,\n\t\t\toptgroup_header: null,\n\t\t\toption: null,\n\t\t\toption_create: null\n\t\t\t*/\n\t\t}\n\t};\n\t\n\t\n\t$.fn.selectize = function(settings_user) {\n\t\tvar defaults             = $.fn.selectize.defaults;\n\t\tvar settings             = $.extend({}, defaults, settings_user);\n\t\tvar attr_data            = settings.dataAttr;\n\t\tvar field_label          = settings.labelField;\n\t\tvar field_value          = settings.valueField;\n\t\tvar field_optgroup       = settings.optgroupField;\n\t\tvar field_optgroup_label = settings.optgroupLabelField;\n\t\tvar field_optgroup_value = settings.optgroupValueField;\n\t\n\t\t/**\n\t\t * Initializes selectize from a <input type=\"text\"> element.\n\t\t *\n\t\t * @param {object} $input\n\t\t * @param {object} settings_element\n\t\t */\n\t\tvar init_textbox = function($input, settings_element) {\n\t\t\tvar i, n, values, option;\n\t\n\t\t\tvar data_raw = $input.attr(attr_data);\n\t\n\t\t\tif (!data_raw) {\n\t\t\t\tvar value = $.trim($input.val() || '');\n\t\t\t\tif (!settings.allowEmptyOption && !value.length) return;\n\t\t\t\tvalues = value.split(settings.delimiter);\n\t\t\t\tfor (i = 0, n = values.length; i < n; i++) {\n\t\t\t\t\toption = {};\n\t\t\t\t\toption[field_label] = values[i];\n\t\t\t\t\toption[field_value] = values[i];\n\t\t\t\t\tsettings_element.options.push(option);\n\t\t\t\t}\n\t\t\t\tsettings_element.items = values;\n\t\t\t} else {\n\t\t\t\tsettings_element.options = JSON.parse(data_raw);\n\t\t\t\tfor (i = 0, n = settings_element.options.length; i < n; i++) {\n\t\t\t\t\tsettings_element.items.push(settings_element.options[i][field_value]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Initializes selectize from a <select> element.\n\t\t *\n\t\t * @param {object} $input\n\t\t * @param {object} settings_element\n\t\t */\n\t\tvar init_select = function($input, settings_element) {\n\t\t\tvar i, n, tagName, $children, order = 0;\n\t\t\tvar options = settings_element.options;\n\t\t\tvar optionsMap = {};\n\t\n\t\t\tvar readData = function($el) {\n\t\t\t\tvar data = attr_data && $el.attr(attr_data);\n\t\t\t\tif (typeof data === 'string' && data.length) {\n\t\t\t\t\treturn JSON.parse(data);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t};\n\t\n\t\t\tvar addOption = function($option, group) {\n\t\t\t\t$option = $($option);\n\t\n\t\t\t\tvar value = hash_key($option.attr('value'));\n\t\t\t\tif (!value && !settings.allowEmptyOption) return;\n\t\n\t\t\t\t// if the option already exists, it's probably been\n\t\t\t\t// duplicated in another optgroup. in this case, push\n\t\t\t\t// the current group to the \"optgroup\" property on the\n\t\t\t\t// existing option so that it's rendered in both places.\n\t\t\t\tif (optionsMap.hasOwnProperty(value)) {\n\t\t\t\t\tif (group) {\n\t\t\t\t\t\tvar arr = optionsMap[value][field_optgroup];\n\t\t\t\t\t\tif (!arr) {\n\t\t\t\t\t\t\toptionsMap[value][field_optgroup] = group;\n\t\t\t\t\t\t} else if (!$.isArray(arr)) {\n\t\t\t\t\t\t\toptionsMap[value][field_optgroup] = [arr, group];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tarr.push(group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar option             = readData($option) || {};\n\t\t\t\toption[field_label]    = option[field_label] || $option.text();\n\t\t\t\toption[field_value]    = option[field_value] || value;\n\t\t\t\toption[field_optgroup] = option[field_optgroup] || group;\n\t\n\t\t\t\toptionsMap[value] = option;\n\t\t\t\toptions.push(option);\n\t\n\t\t\t\tif ($option.is(':selected')) {\n\t\t\t\t\tsettings_element.items.push(value);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tvar addGroup = function($optgroup) {\n\t\t\t\tvar i, n, id, optgroup, $options;\n\t\n\t\t\t\t$optgroup = $($optgroup);\n\t\t\t\tid = $optgroup.attr('label');\n\t\n\t\t\t\tif (id) {\n\t\t\t\t\toptgroup = readData($optgroup) || {};\n\t\t\t\t\toptgroup[field_optgroup_label] = id;\n\t\t\t\t\toptgroup[field_optgroup_value] = id;\n\t\t\t\t\tsettings_element.optgroups.push(optgroup);\n\t\t\t\t}\n\t\n\t\t\t\t$options = $('option', $optgroup);\n\t\t\t\tfor (i = 0, n = $options.length; i < n; i++) {\n\t\t\t\t\taddOption($options[i], id);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tsettings_element.maxItems = $input.attr('multiple') ? null : 1;\n\t\n\t\t\t$children = $input.children();\n\t\t\tfor (i = 0, n = $children.length; i < n; i++) {\n\t\t\t\ttagName = $children[i].tagName.toLowerCase();\n\t\t\t\tif (tagName === 'optgroup') {\n\t\t\t\t\taddGroup($children[i]);\n\t\t\t\t} else if (tagName === 'option') {\n\t\t\t\t\taddOption($children[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\treturn this.each(function() {\n\t\t\tif (this.selectize) return;\n\t\n\t\t\tvar instance;\n\t\t\tvar $input = $(this);\n\t\t\tvar tag_name = this.tagName.toLowerCase();\n\t\t\tvar placeholder = $input.attr('placeholder') || $input.attr('data-placeholder');\n\t\t\tif (!placeholder && !settings.allowEmptyOption) {\n\t\t\t\tplaceholder = $input.children('option[value=\"\"]').text();\n\t\t\t}\n\t\n\t\t\tvar settings_element = {\n\t\t\t\t'placeholder' : placeholder,\n\t\t\t\t'options'     : [],\n\t\t\t\t'optgroups'   : [],\n\t\t\t\t'items'       : []\n\t\t\t};\n\t\n\t\t\tif (tag_name === 'select') {\n\t\t\t\tinit_select($input, settings_element);\n\t\t\t} else {\n\t\t\t\tinit_textbox($input, settings_element);\n\t\t\t}\n\t\n\t\t\tinstance = new Selectize($input, $.extend(true, {}, defaults, settings_element, settings_user));\n\t\t});\n\t};\n\t\n\t$.fn.selectize.defaults = Selectize.defaults;\n\t$.fn.selectize.support = {\n\t\tvalidity: SUPPORTS_VALIDITY_API\n\t};\n\t\n\t\n\tSelectize.define('drag_drop', function(options) {\n\t\tif (!$.fn.sortable) throw new Error('The \"drag_drop\" plugin requires jQuery UI \"sortable\".');\n\t\tif (this.settings.mode !== 'multi') return;\n\t\tvar self = this;\n\t\n\t\tself.lock = (function() {\n\t\t\tvar original = self.lock;\n\t\t\treturn function() {\n\t\t\t\tvar sortable = self.$control.data('sortable');\n\t\t\t\tif (sortable) sortable.disable();\n\t\t\t\treturn original.apply(self, arguments);\n\t\t\t};\n\t\t})();\n\t\n\t\tself.unlock = (function() {\n\t\t\tvar original = self.unlock;\n\t\t\treturn function() {\n\t\t\t\tvar sortable = self.$control.data('sortable');\n\t\t\t\tif (sortable) sortable.enable();\n\t\t\t\treturn original.apply(self, arguments);\n\t\t\t};\n\t\t})();\n\t\n\t\tself.setup = (function() {\n\t\t\tvar original = self.setup;\n\t\t\treturn function() {\n\t\t\t\toriginal.apply(this, arguments);\n\t\n\t\t\t\tvar $control = self.$control.sortable({\n\t\t\t\t\titems: '[data-value]',\n\t\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\t\tdisabled: self.isLocked,\n\t\t\t\t\tstart: function(e, ui) {\n\t\t\t\t\t\tui.placeholder.css('width', ui.helper.css('width'));\n\t\t\t\t\t\t$control.css({overflow: 'visible'});\n\t\t\t\t\t},\n\t\t\t\t\tstop: function() {\n\t\t\t\t\t\t$control.css({overflow: 'hidden'});\n\t\t\t\t\t\tvar active = self.$activeItems ? self.$activeItems.slice() : null;\n\t\t\t\t\t\tvar values = [];\n\t\t\t\t\t\t$control.children('[data-value]').each(function() {\n\t\t\t\t\t\t\tvalues.push($(this).attr('data-value'));\n\t\t\t\t\t\t});\n\t\t\t\t\t\tself.setValue(values);\n\t\t\t\t\t\tself.setActiveItem(active);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t})();\n\t\n\t});\n\t\n\tSelectize.define('dropdown_header', function(options) {\n\t\tvar self = this;\n\t\n\t\toptions = $.extend({\n\t\t\ttitle         : 'Untitled',\n\t\t\theaderClass   : 'selectize-dropdown-header',\n\t\t\ttitleRowClass : 'selectize-dropdown-header-title',\n\t\t\tlabelClass    : 'selectize-dropdown-header-label',\n\t\t\tcloseClass    : 'selectize-dropdown-header-close',\n\t\n\t\t\thtml: function(data) {\n\t\t\t\treturn (\n\t\t\t\t\t'<div class=\"' + data.headerClass + '\">' +\n\t\t\t\t\t\t'<div class=\"' + data.titleRowClass + '\">' +\n\t\t\t\t\t\t\t'<span class=\"' + data.labelClass + '\">' + data.title + '</span>' +\n\t\t\t\t\t\t\t'<a href=\"javascript:void(0)\" class=\"' + data.closeClass + '\">&times;</a>' +\n\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t'</div>'\n\t\t\t\t);\n\t\t\t}\n\t\t}, options);\n\t\n\t\tself.setup = (function() {\n\t\t\tvar original = self.setup;\n\t\t\treturn function() {\n\t\t\t\toriginal.apply(self, arguments);\n\t\t\t\tself.$dropdown_header = $(options.html(options));\n\t\t\t\tself.$dropdown.prepend(self.$dropdown_header);\n\t\t\t};\n\t\t})();\n\t\n\t});\n\t\n\tSelectize.define('optgroup_columns', function(options) {\n\t\tvar self = this;\n\t\n\t\toptions = $.extend({\n\t\t\tequalizeWidth  : true,\n\t\t\tequalizeHeight : true\n\t\t}, options);\n\t\n\t\tthis.getAdjacentOption = function($option, direction) {\n\t\t\tvar $options = $option.closest('[data-group]').find('[data-selectable]');\n\t\t\tvar index    = $options.index($option) + direction;\n\t\n\t\t\treturn index >= 0 && index < $options.length ? $options.eq(index) : $();\n\t\t};\n\t\n\t\tthis.onKeyDown = (function() {\n\t\t\tvar original = self.onKeyDown;\n\t\t\treturn function(e) {\n\t\t\t\tvar index, $option, $options, $optgroup;\n\t\n\t\t\t\tif (this.isOpen && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)) {\n\t\t\t\t\tself.ignoreHover = true;\n\t\t\t\t\t$optgroup = this.$activeOption.closest('[data-group]');\n\t\t\t\t\tindex = $optgroup.find('[data-selectable]').index(this.$activeOption);\n\t\n\t\t\t\t\tif(e.keyCode === KEY_LEFT) {\n\t\t\t\t\t\t$optgroup = $optgroup.prev('[data-group]');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$optgroup = $optgroup.next('[data-group]');\n\t\t\t\t\t}\n\t\n\t\t\t\t\t$options = $optgroup.find('[data-selectable]');\n\t\t\t\t\t$option  = $options.eq(Math.min($options.length - 1, index));\n\t\t\t\t\tif ($option.length) {\n\t\t\t\t\t\tthis.setActiveOption($option);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\treturn original.apply(this, arguments);\n\t\t\t};\n\t\t})();\n\t\n\t\tvar getScrollbarWidth = function() {\n\t\t\tvar div;\n\t\t\tvar width = getScrollbarWidth.width;\n\t\t\tvar doc = document;\n\t\n\t\t\tif (typeof width === 'undefined') {\n\t\t\t\tdiv = doc.createElement('div');\n\t\t\t\tdiv.innerHTML = '<div style=\"width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;\"><div style=\"width:1px;height:100px;\"></div></div>';\n\t\t\t\tdiv = div.firstChild;\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t\twidth = getScrollbarWidth.width = div.offsetWidth - div.clientWidth;\n\t\t\t\tdoc.body.removeChild(div);\n\t\t\t}\n\t\t\treturn width;\n\t\t};\n\t\n\t\tvar equalizeSizes = function() {\n\t\t\tvar i, n, height_max, width, width_last, width_parent, $optgroups;\n\t\n\t\t\t$optgroups = $('[data-group]', self.$dropdown_content);\n\t\t\tn = $optgroups.length;\n\t\t\tif (!n || !self.$dropdown_content.width()) return;\n\t\n\t\t\tif (options.equalizeHeight) {\n\t\t\t\theight_max = 0;\n\t\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\t\theight_max = Math.max(height_max, $optgroups.eq(i).height());\n\t\t\t\t}\n\t\t\t\t$optgroups.css({height: height_max});\n\t\t\t}\n\t\n\t\t\tif (options.equalizeWidth) {\n\t\t\t\twidth_parent = self.$dropdown_content.innerWidth() - getScrollbarWidth();\n\t\t\t\twidth = Math.round(width_parent / n);\n\t\t\t\t$optgroups.css({width: width});\n\t\t\t\tif (n > 1) {\n\t\t\t\t\twidth_last = width_parent - width * (n - 1);\n\t\t\t\t\t$optgroups.eq(n - 1).css({width: width_last});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\tif (options.equalizeHeight || options.equalizeWidth) {\n\t\t\thook.after(this, 'positionDropdown', equalizeSizes);\n\t\t\thook.after(this, 'refreshOptions', equalizeSizes);\n\t\t}\n\t\n\t\n\t});\n\t\n\tSelectize.define('remove_button', function(options) {\n\t\tif (this.settings.mode === 'single') return;\n\t\n\t\toptions = $.extend({\n\t\t\tlabel     : '&times;',\n\t\t\ttitle     : 'Remove',\n\t\t\tclassName : 'remove',\n\t\t\tappend    : true\n\t\t}, options);\n\t\n\t\tvar self = this;\n\t\tvar html = '<a href=\"javascript:void(0)\" class=\"' + options.className + '\" tabindex=\"-1\" title=\"' + escape_html(options.title) + '\">' + options.label + '</a>';\n\t\n\t\t/**\n\t\t * Appends an element as a child (with raw HTML).\n\t\t *\n\t\t * @param {string} html_container\n\t\t * @param {string} html_element\n\t\t * @return {string}\n\t\t */\n\t\tvar append = function(html_container, html_element) {\n\t\t\tvar pos = html_container.search(/(<\\/[^>]+>\\s*)$/);\n\t\t\treturn html_container.substring(0, pos) + html_element + html_container.substring(pos);\n\t\t};\n\t\n\t\tthis.setup = (function() {\n\t\t\tvar original = self.setup;\n\t\t\treturn function() {\n\t\t\t\t// override the item rendering method to add the button to each\n\t\t\t\tif (options.append) {\n\t\t\t\t\tvar render_item = self.settings.render.item;\n\t\t\t\t\tself.settings.render.item = function(data) {\n\t\t\t\t\t\treturn append(render_item.apply(this, arguments), html);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\n\t\t\t\toriginal.apply(this, arguments);\n\t\n\t\t\t\t// add event listener\n\t\t\t\tthis.$control.on('click', '.' + options.className, function(e) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tif (self.isLocked) return;\n\t\n\t\t\t\t\tvar $item = $(e.currentTarget).parent();\n\t\t\t\t\tself.setActiveItem($item);\n\t\t\t\t\tif (self.deleteSelection()) {\n\t\t\t\t\t\tself.setCaret(self.items.length);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t};\n\t\t})();\n\t\n\t});\n\t\n\tSelectize.define('restore_on_backspace', function(options) {\n\t\tvar self = this;\n\t\n\t\toptions.text = options.text || function(option) {\n\t\t\treturn option[this.settings.labelField];\n\t\t};\n\t\n\t\tthis.onKeyDown = (function() {\n\t\t\tvar original = self.onKeyDown;\n\t\t\treturn function(e) {\n\t\t\t\tvar index, option;\n\t\t\t\tif (e.keyCode === KEY_BACKSPACE && this.$control_input.val() === '' && !this.$activeItems.length) {\n\t\t\t\t\tindex = this.caretPos - 1;\n\t\t\t\t\tif (index >= 0 && index < this.items.length) {\n\t\t\t\t\t\toption = this.options[this.items[index]];\n\t\t\t\t\t\tif (this.deleteSelection(e)) {\n\t\t\t\t\t\t\tthis.setTextboxValue(options.text.apply(this, [option]));\n\t\t\t\t\t\t\tthis.refreshOptions(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn original.apply(this, arguments);\n\t\t\t};\n\t\t})();\n\t});\n\t\n\n\treturn Selectize;\n}));"]}}]