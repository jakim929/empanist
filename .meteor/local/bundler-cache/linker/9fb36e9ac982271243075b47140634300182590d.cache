[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar async = Package['peerlibrary:async'].async;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar MongoModifier, MongoQuery, Relation, Model, OldModel, isModel, Graviton;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"emmerge:graviton\":{\"lib\":{\"mongo-query.js\":[\"babel-runtime/helpers/createClass\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"babel-runtime/helpers/classCallCheck\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/emmerge_graviton/lib/mongo-query.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _createClass2 = require('babel-runtime/helpers/createClass');                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\n// simple linked-list used to flatten complex object trees                                                             //\n                                                                                                                       //\nvar Link = function () {                                                                                               //\n  function Link(key, parent) {                                                                                         // 3\n    (0, _classCallCheck3['default'])(this, Link);                                                                      //\n                                                                                                                       //\n    this.result = parent && parent.result || {};                                                                       // 4\n    this.parent = parent;                                                                                              // 5\n    this.key = key;                                                                                                    // 6\n  }                                                                                                                    //\n                                                                                                                       //\n  // traverse up the tree and build a dot-delimited string                                                             //\n                                                                                                                       //\n                                                                                                                       //\n  Link.prototype.chainKey = function () {                                                                              // 2\n    function chainKey() {                                                                                              //\n      var links = [this.key];                                                                                          // 11\n      var parent = this.parent;                                                                                        // 12\n      while (parent) {                                                                                                 // 13\n        if (parent.key) links.unshift(parent.key);                                                                     // 14\n        parent = parent.parent;                                                                                        // 16\n      }                                                                                                                //\n      return links.join('.');                                                                                          // 18\n    }                                                                                                                  //\n                                                                                                                       //\n    return chainKey;                                                                                                   //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // take an object of any depth and return an object with only one level                                              //\n  // build linked-lists by traversing object tree                                                                      //\n                                                                                                                       //\n                                                                                                                       //\n  Link.prototype.flattenObject = function () {                                                                         // 2\n    function flattenObject(obj) {                                                                                      //\n      if (!_.isObject(obj)) {                                                                                          // 24\n        // found a leaf, save the key/value in result                                                                  //\n        var key = this.chainKey();                                                                                     // 26\n        this.result[key] = obj;                                                                                        // 27\n        return;                                                                                                        // 28\n      }                                                                                                                //\n      for (var _iterator = Object.keys(obj), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;                                                                                                      //\n                                                                                                                       //\n        if (_isArray) {                                                                                                //\n          if (_i >= _iterator.length) break;                                                                           //\n          _ref = _iterator[_i++];                                                                                      //\n        } else {                                                                                                       //\n          _i = _iterator.next();                                                                                       //\n          if (_i.done) break;                                                                                          //\n          _ref = _i.value;                                                                                             //\n        }                                                                                                              //\n                                                                                                                       //\n        var _key = _ref;                                                                                               //\n                                                                                                                       //\n        new Link(_key, this).flattenObject(obj[_key]);                                                                 // 31\n      }                                                                                                                //\n      return this.result;                                                                                              // 33\n    }                                                                                                                  //\n                                                                                                                       //\n    return flattenObject;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return Link;                                                                                                         //\n}();                                                                                                                   //\n                                                                                                                       //\nvar updateOperators = ['$set', '$unset', '$addToSet', '$push', '$pull', '$pop', '$inc'];                               // 37\n                                                                                                                       //\nfunction _keysOverlap(a, b) {                                                                                          // 47\n  if (a === b) return false;                                                                                           // 48\n  return _.first(a.split('.')) === _.first(b.split('.'));                                                              // 49\n}                                                                                                                      //\n                                                                                                                       //\n// extend two flat objects but discard keys that are contained within another                                          //\nfunction _mongoExtend(objA, objB) {                                                                                    // 54\n  for (var _iterator2 = Object.keys(objB), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref2;                                                                                                         //\n                                                                                                                       //\n    if (_isArray2) {                                                                                                   //\n      if (_i2 >= _iterator2.length) break;                                                                             //\n      _ref2 = _iterator2[_i2++];                                                                                       //\n    } else {                                                                                                           //\n      _i2 = _iterator2.next();                                                                                         //\n      if (_i2.done) break;                                                                                             //\n      _ref2 = _i2.value;                                                                                               //\n    }                                                                                                                  //\n                                                                                                                       //\n    var keyB = _ref2;                                                                                                  //\n                                                                                                                       //\n    for (var _iterator3 = Object.keys(objA), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;                                                                                                       //\n                                                                                                                       //\n      if (_isArray3) {                                                                                                 //\n        if (_i3 >= _iterator3.length) break;                                                                           //\n        _ref3 = _iterator3[_i3++];                                                                                     //\n      } else {                                                                                                         //\n        _i3 = _iterator3.next();                                                                                       //\n        if (_i3.done) break;                                                                                           //\n        _ref3 = _i3.value;                                                                                             //\n      }                                                                                                                //\n                                                                                                                       //\n      var keyA = _ref3;                                                                                                //\n                                                                                                                       //\n      if (MongoModifier.keysConflict(keyB, keyA)) {                                                                    // 57\n        throw new Error(\"Cannot apply this modification because it conflicts with unsaved ones. Please save first or re-write update.\");\n      }                                                                                                                //\n    }                                                                                                                  //\n  }                                                                                                                    //\n  return _.extend(objA, objB);                                                                                         // 62\n}                                                                                                                      //\n                                                                                                                       //\nMongoModifier = function () {                                                                                          // 65\n  MongoModifier.flattenObject = function () {                                                                          // 65\n    function flattenObject(keyOrObj, value) {                                                                          //\n      if (_.isString(keyOrObj)) {                                                                                      // 68\n        var _ref4;                                                                                                     //\n                                                                                                                       //\n        return _ref4 = {}, _ref4[keyOrObj] = value, _ref4;                                                             // 69\n      } else if (_.isObject(keyOrObj)) {                                                                               //\n        return new Link().flattenObject(keyOrObj);                                                                     // 72\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return flattenObject;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // is one key fully-contained in the other?                                                                          //\n                                                                                                                       //\n                                                                                                                       //\n  MongoModifier.keysConflict = function () {                                                                           // 65\n    function keysConflict(a, b) {                                                                                      //\n      if (a === b) return false;                                                                                       // 78\n      var arrA = a.split('.');                                                                                         // 79\n      var arrB = b.split('.');                                                                                         // 80\n      if (arrA.length === arrB.length) return false;                                                                   // 81\n      do {                                                                                                             // 82\n        if (arrA.shift() !== arrB.shift()) {                                                                           // 83\n          return false;                                                                                                // 84\n        }                                                                                                              //\n      } while (arrA.length && arrB.length);                                                                            //\n      return true;                                                                                                     // 87\n    }                                                                                                                  //\n                                                                                                                       //\n    return keysConflict;                                                                                               //\n  }();                                                                                                                 //\n                                                                                                                       //\n  function MongoModifier() {                                                                                           // 90\n    var defaults = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                            //\n    (0, _classCallCheck3['default'])(this, MongoModifier);                                                             //\n                                                                                                                       //\n    for (var _iterator4 = updateOperators, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref5;                                                                                                       //\n                                                                                                                       //\n      if (_isArray4) {                                                                                                 //\n        if (_i4 >= _iterator4.length) break;                                                                           //\n        _ref5 = _iterator4[_i4++];                                                                                     //\n      } else {                                                                                                         //\n        _i4 = _iterator4.next();                                                                                       //\n        if (_i4.done) break;                                                                                           //\n        _ref5 = _i4.value;                                                                                             //\n      }                                                                                                                //\n                                                                                                                       //\n      var type = _ref5;                                                                                                //\n                                                                                                                       //\n      this[type] = defaults[type] || {};                                                                               // 92\n    }                                                                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  MongoModifier.prototype.reset = function () {                                                                        // 65\n    function reset() {                                                                                                 //\n      for (var _iterator5 = updateOperators, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n        var _ref6;                                                                                                     //\n                                                                                                                       //\n        if (_isArray5) {                                                                                               //\n          if (_i5 >= _iterator5.length) break;                                                                         //\n          _ref6 = _iterator5[_i5++];                                                                                   //\n        } else {                                                                                                       //\n          _i5 = _iterator5.next();                                                                                     //\n          if (_i5.done) break;                                                                                         //\n          _ref6 = _i5.value;                                                                                           //\n        }                                                                                                              //\n                                                                                                                       //\n        var type = _ref6;                                                                                              //\n                                                                                                                       //\n        this[type] = {};                                                                                               // 98\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return reset;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoModifier.prototype.modObject = function () {                                                                    // 65\n    function modObject() {                                                                                             //\n      var mod = {};                                                                                                    // 103\n      for (var _iterator6 = updateOperators, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n        var _ref7;                                                                                                     //\n                                                                                                                       //\n        if (_isArray6) {                                                                                               //\n          if (_i6 >= _iterator6.length) break;                                                                         //\n          _ref7 = _iterator6[_i6++];                                                                                   //\n        } else {                                                                                                       //\n          _i6 = _iterator6.next();                                                                                     //\n          if (_i6.done) break;                                                                                         //\n          _ref7 = _i6.value;                                                                                           //\n        }                                                                                                              //\n                                                                                                                       //\n        var type = _ref7;                                                                                              //\n                                                                                                                       //\n        if (!_.isEmpty(this[type])) {                                                                                  // 105\n          mod[type] = this[type];                                                                                      // 106\n        }                                                                                                              //\n      }                                                                                                                //\n      return mod;                                                                                                      // 109\n    }                                                                                                                  //\n                                                                                                                       //\n    return modObject;                                                                                                  //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // merge a mongo update statement into the modifier                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  MongoModifier.prototype.mergeUpdate = function () {                                                                  // 65\n    function mergeUpdate(mongoUpdate) {                                                                                //\n      for (var _iterator7 = updateOperators, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {\n        var _ref8;                                                                                                     //\n                                                                                                                       //\n        if (_isArray7) {                                                                                               //\n          if (_i7 >= _iterator7.length) break;                                                                         //\n          _ref8 = _iterator7[_i7++];                                                                                   //\n        } else {                                                                                                       //\n          _i7 = _iterator7.next();                                                                                     //\n          if (_i7.done) break;                                                                                         //\n          _ref8 = _i7.value;                                                                                           //\n        }                                                                                                              //\n                                                                                                                       //\n        var type = _ref8;                                                                                              //\n                                                                                                                       //\n        if (_.isObject(mongoUpdate[type])) {                                                                           // 115\n          var obj = MongoModifier.flattenObject(mongoUpdate[type]);                                                    // 116\n          _mongoExtend(this[type], obj);                                                                               // 117\n        }                                                                                                              //\n      }                                                                                                                //\n      return this;                                                                                                     // 120\n    }                                                                                                                  //\n                                                                                                                       //\n    return mergeUpdate;                                                                                                //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoModifier.prototype.set = function () {                                                                          // 65\n    function set(keyOrObj, value) {                                                                                    //\n      var obj = MongoModifier.flattenObject(keyOrObj, value);                                                          // 124\n      _mongoExtend(this.$set, obj);                                                                                    // 125\n      return { $set: obj };                                                                                            // 126\n    }                                                                                                                  //\n                                                                                                                       //\n    return set;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoModifier.prototype.unset = function () {                                                                        // 65\n    function unset(keyOrObj) {                                                                                         //\n      var obj = MongoModifier.flattenObject(keyOrObj, \"\");                                                             // 130\n      _mongoExtend(this.$unset, obj);                                                                                  // 131\n      return { $unset: obj };                                                                                          // 132\n    }                                                                                                                  //\n                                                                                                                       //\n    return unset;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoModifier.prototype.addToSet = function () {                                                                     // 65\n    function addToSet(keyOrObj, value) {                                                                               //\n      var obj = MongoModifier.flattenObject(keyOrObj, value);                                                          // 136\n      _mongoExtend(this.$addToSet, obj);                                                                               // 137\n      return { $addToSet: obj };                                                                                       // 138\n    }                                                                                                                  //\n                                                                                                                       //\n    return addToSet;                                                                                                   //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoModifier.prototype.push = function () {                                                                         // 65\n    function push(keyOrObj, value) {                                                                                   //\n      var obj = MongoModifier.flattenObject(keyOrObj, value);                                                          // 142\n      _mongoExtend(this.$push, obj);                                                                                   // 143\n      return { $push: obj };                                                                                           // 144\n    }                                                                                                                  //\n                                                                                                                       //\n    return push;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoModifier.prototype.pull = function () {                                                                         // 65\n    function pull(keyOrObj, value) {                                                                                   //\n      var obj = MongoModifier.flattenObject(keyOrObj, value);                                                          // 148\n      _mongoExtend(this.$pull, obj);                                                                                   // 149\n      return { $pull: obj };                                                                                           // 150\n    }                                                                                                                  //\n                                                                                                                       //\n    return pull;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoModifier.prototype.inc = function () {                                                                          // 65\n    function inc(keyOrObj) {                                                                                           //\n      var value = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];                              //\n                                                                                                                       //\n      var obj = MongoModifier.flattenObject(keyOrObj, value);                                                          // 154\n      _mongoExtend(this.$inc, obj);                                                                                    // 155\n      return { $inc: obj };                                                                                            // 156\n    }                                                                                                                  //\n                                                                                                                       //\n    return inc;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoModifier.prototype.pop = function () {                                                                          // 65\n    function pop(keyOrObj) {                                                                                           //\n      var obj = MongoModifier.flattenObject(keyOrObj, 1);                                                              // 160\n      _mongoExtend(this.$pop, obj);                                                                                    // 161\n      return { $pop: obj };                                                                                            // 162\n    }                                                                                                                  //\n                                                                                                                       //\n    return pop;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoModifier.prototype.shift = function () {                                                                        // 65\n    function shift(keyOrObj) {                                                                                         //\n      var obj = MongoModifier.flattenObject(keyOrObj, -1);                                                             // 166\n      _mongoExtend(this.$pop, obj);                                                                                    // 167\n      return { $pop: obj };                                                                                            // 168\n    }                                                                                                                  //\n                                                                                                                       //\n    return shift;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return MongoModifier;                                                                                                //\n}();                                                                                                                   //\n                                                                                                                       //\n/**                                                                                                                    //\n * A MongoModifier with a collection                                                                                   //\n * Provides methods for interacting with a collection via a MongoModifier                                              //\n * Contained by models and base class for many relations                                                               //\n */                                                                                                                    //\nMongoQuery = function (_MongoModifier) {                                                                               // 177\n  (0, _inherits3['default'])(MongoQuery, _MongoModifier);                                                              //\n                                                                                                                       //\n  function MongoQuery(collection) {                                                                                    // 179\n    var selector = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                            //\n    var modifier = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];                            //\n    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];                             //\n    (0, _classCallCheck3['default'])(this, MongoQuery);                                                                //\n                                                                                                                       //\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _MongoModifier.call(this, modifier));                //\n                                                                                                                       //\n    _this.collection = collection;                                                                                     // 181\n    _this.options = options;                                                                                           // 182\n    _this._selector = selector;                                                                                        // 183\n    return _this;                                                                                                      //\n  }                                                                                                                    //\n                                                                                                                       //\n  MongoQuery.prototype.find = function () {                                                                            // 177\n    function find() {                                                                                                  //\n      var selector = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          //\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                           //\n                                                                                                                       //\n      _.defaults(options, this.options);                                                                               // 195\n      _.extend(selector, this.selector);                                                                               // 196\n      return this.collection.find(selector, options);                                                                  // 197\n    }                                                                                                                  //\n                                                                                                                       //\n    return find;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoQuery.prototype.findOne = function () {                                                                         // 177\n    function findOne() {                                                                                               //\n      var selector = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          //\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                           //\n                                                                                                                       //\n      _.defaults(options, this.options);                                                                               // 201\n      _.extend(selector, this.selector);                                                                               // 202\n      return this.collection.findOne(selector, options);                                                               // 203\n    }                                                                                                                  //\n                                                                                                                       //\n    return findOne;                                                                                                    //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoQuery.prototype.and = function () {                                                                             // 177\n    function and(mongoQuery) {                                                                                         //\n      if (mongoQuery.collection !== this.collection) {                                                                 // 207\n        throw new Error(\"Cannot combine mongo queries with different collections.\");                                   // 208\n      }                                                                                                                //\n      var selector;                                                                                                    // 210\n      if (_keysHaveDollars(mongoQuery._selector) || _keysHaveDollars(this._selector)) {                                // 211\n        selector = { $and: [this._selector, mongoQuery._selector] };                                                   // 212\n      } else {                                                                                                         //\n        selector = _.extend({}, this._selector, mongoQuery._selector);                                                 // 214\n      }                                                                                                                //\n      return new MongoQuery(this.collection, selector);                                                                // 216\n    }                                                                                                                  //\n                                                                                                                       //\n    return and;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoQuery.prototype.or = function () {                                                                              // 177\n    function or(mongoQuery) {                                                                                          //\n      if (mongoQuery.collection !== this.collection) {                                                                 // 220\n        throw new Error(\"Cannot combine mongo queries with different collections.\");                                   // 221\n      }                                                                                                                //\n      var selector;                                                                                                    // 223\n      if (Object.keys(this._selector).length === 1 && this._selector.$or) {                                            // 224\n        selector = EJSON.clone(this._selector);                                                                        // 225\n        selector.$or.push(mongoQuery._selector);                                                                       // 226\n      } else {                                                                                                         //\n        selector = { $or: [this._selector, mongoQuery._selector] };                                                    // 228\n      }                                                                                                                //\n      return new MongoQuery(this.collection, selector);                                                                // 230\n    }                                                                                                                  //\n                                                                                                                       //\n    return or;                                                                                                         //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoQuery.prototype.all = function () {                                                                             // 177\n    function all() {                                                                                                   //\n      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                           //\n                                                                                                                       //\n      _.defaults(options, this.options);                                                                               // 234\n      return this.collection.find({}, options).fetch();                                                                // 235\n    }                                                                                                                  //\n                                                                                                                       //\n    return all;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // apply this modifier to an object                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  MongoQuery.prototype.applyModifier = function () {                                                                   // 177\n    function applyModifier() {                                                                                         //\n      var obj = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                               //\n                                                                                                                       //\n      LocalCollection._modify(obj, this.modObject());                                                                  // 240\n      return obj;                                                                                                      // 241\n    }                                                                                                                  //\n                                                                                                                       //\n    return applyModifier;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoQuery.prototype.insert = function () {                                                                          // 177\n    function insert() {                                                                                                //\n      var attributes = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                        //\n      var callback = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];                   //\n                                                                                                                       //\n      attributes._id = this.collection.insert(attributes, callback);                                                   // 245\n      return attributes._id;                                                                                           // 246\n    }                                                                                                                  //\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoQuery.prototype.create = function () {                                                                          // 177\n    function create() {                                                                                                //\n      var attributes = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                        //\n      var callback = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];                   //\n                                                                                                                       //\n      if (this.collection.create) {                                                                                    // 250\n        return this.collection.create(attributes, callback);                                                           // 251\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return create;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoQuery.prototype.update = function () {                                                                          // 177\n    function update() {                                                                                                //\n      var selector = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          //\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                           //\n      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];                   //\n                                                                                                                       //\n      _.defaults(options, this.options);                                                                               // 256\n      _.extend(selector, this.selector);                                                                               // 257\n      var mod = this.modObject();                                                                                      // 258\n      if (!_.isEmpty(mod)) {                                                                                           // 259\n        return this.collection.update(selector, this.modObject(), options, callback);                                  // 260\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return update;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  MongoQuery.prototype.remove = function () {                                                                          // 177\n    function remove() {                                                                                                //\n      var selector = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                          //\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                           //\n      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];                   //\n                                                                                                                       //\n      _.defaults(options, this.options);                                                                               // 265\n      _.extend(selector, this.selector);                                                                               // 266\n      return this.collection.remove(selector, options, callback);                                                      // 267\n    }                                                                                                                  //\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  (0, _createClass3['default'])(MongoQuery, [{                                                                         //\n    key: 'selector',                                                                                                   //\n    get: function () {                                                                                                 //\n      function get() {                                                                                                 //\n        return this._selector;                                                                                         // 187\n      }                                                                                                                //\n                                                                                                                       //\n      return get;                                                                                                      //\n    }(),                                                                                                               //\n    set: function () {                                                                                                 //\n      function set(val) {                                                                                              //\n        this._selector = val;                                                                                          // 191\n      }                                                                                                                //\n                                                                                                                       //\n      return set;                                                                                                      //\n    }()                                                                                                                //\n  }]);                                                                                                                 //\n  return MongoQuery;                                                                                                   //\n}(MongoModifier);                                                                                                      //\n                                                                                                                       //\nfunction _keysHaveDollars(obj) {                                                                                       // 271\n  for (var key in meteorBabelHelpers.sanitizeForInObject(Object.keys(obj))) {                                          // 272\n    if (key.substr(0, 1) === '$') {                                                                                    // 273\n      return true;                                                                                                     // 274\n    }                                                                                                                  //\n  }                                                                                                                    //\n  return false;                                                                                                        // 277\n}                                                                                                                      //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"relations.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/createClass\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/emmerge_graviton/lib/relations.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require('babel-runtime/helpers/createClass');                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\nfunction BelongsTo(model) {                                                                                            // 1\n  var _this = this;                                                                                                    //\n                                                                                                                       //\n  return function () {                                                                                                 // 2\n    return Graviton.getCollection(_this).findOne({                                                                     // 3\n      _id: model.get(_this.field)                                                                                      // 4\n    });                                                                                                                //\n  };                                                                                                                   //\n}                                                                                                                      //\n                                                                                                                       //\nfunction HasOne(model) {                                                                                               // 9\n  var _this2 = this;                                                                                                   //\n                                                                                                                       //\n  return function () {                                                                                                 // 10\n    var _Graviton$getCollecti;                                                                                         //\n                                                                                                                       //\n    return Graviton.getCollection(_this2).findOne((_Graviton$getCollecti = {}, _Graviton$getCollecti[_this2.foreignKey] = model._id, _Graviton$getCollecti));\n  };                                                                                                                   //\n}                                                                                                                      //\n                                                                                                                       //\nvar relationGenerators = {                                                                                             // 17\n  belongsTo: BelongsTo,                                                                                                // 18\n  hasOne: HasOne,                                                                                                      // 19\n  hasMany: function () {                                                                                               // 20\n    function hasMany(mdl) {                                                                                            // 20\n      return new HasMany(mdl, this);                                                                                   // 20\n    }                                                                                                                  //\n                                                                                                                       //\n    return hasMany;                                                                                                    //\n  }(),                                                                                                                 //\n  belongsToMany: function () {                                                                                         // 21\n    function belongsToMany(mdl) {                                                                                      // 21\n      return new BelongsToMany(mdl, this);                                                                             // 21\n    }                                                                                                                  //\n                                                                                                                       //\n    return belongsToMany;                                                                                              //\n  }(),                                                                                                                 //\n  manyToMany: function () {                                                                                            // 22\n    function manyToMany(mdl) {                                                                                         // 22\n      return new ManyToMany(mdl, this);                                                                                // 22\n    }                                                                                                                  //\n                                                                                                                       //\n    return manyToMany;                                                                                                 //\n  }(),                                                                                                                 //\n  hasAndBelongsToMany: function () {                                                                                   // 23\n    function hasAndBelongsToMany(mdl) {                                                                                // 23\n      return new HasAndBelongsToMany(mdl, this);                                                                       // 23\n    }                                                                                                                  //\n                                                                                                                       //\n    return hasAndBelongsToMany;                                                                                        //\n  }(),                                                                                                                 //\n  embed: function () {                                                                                                 // 24\n    function embed(mdl) {                                                                                              // 24\n      return new Embedded(mdl, this);                                                                                  // 24\n    }                                                                                                                  //\n                                                                                                                       //\n    return embed;                                                                                                      //\n  }()                                                                                                                  //\n};                                                                                                                     //\nrelationGenerators.embeds = relationGenerators.embed;                                                                  // 26\nrelationGenerators.embedsMany = relationGenerators.embed;                                                              // 27\n                                                                                                                       //\nRelation = function (_MongoQuery) {                                                                                    // 29\n  (0, _inherits3['default'])(Relation, _MongoQuery);                                                                   //\n                                                                                                                       //\n  function Relation(model, config) {                                                                                   // 30\n    (0, _classCallCheck3['default'])(this, Relation);                                                                  //\n                                                                                                                       //\n    var _this3 = (0, _possibleConstructorReturn3['default'])(this, _MongoQuery.call(this, Graviton.getCollection(config)));\n                                                                                                                       //\n    _this3.model = model;                                                                                              // 32\n    _this3.config = config;                                                                                            // 33\n    return _this3;                                                                                                     //\n  }                                                                                                                    //\n                                                                                                                       //\n  Relation.getGenerator = function () {                                                                                // 29\n    function getGenerator(type) {                                                                                      //\n      return relationGenerators[type];                                                                                 // 49\n    }                                                                                                                  //\n                                                                                                                       //\n    return getGenerator;                                                                                               //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Relation.supportedTypes = function () {                                                                              // 29\n    function supportedTypes() {                                                                                        //\n      return Object.keys(relationGenerators);                                                                          // 53\n    }                                                                                                                  //\n                                                                                                                       //\n    return supportedTypes;                                                                                             //\n  }();                                                                                                                 //\n                                                                                                                       //\n  (0, _createClass3['default'])(Relation, [{                                                                           //\n    key: 'field',                                                                                                      //\n    get: function () {                                                                                                 //\n      function get() {                                                                                                 //\n        return this.config.field || '_id';                                                                             // 37\n      }                                                                                                                //\n                                                                                                                       //\n      return get;                                                                                                      //\n    }()                                                                                                                //\n  }, {                                                                                                                 //\n    key: 'fieldValue',                                                                                                 //\n    get: function () {                                                                                                 //\n      function get() {                                                                                                 //\n        return this.model.get(this.field);                                                                             // 41\n      }                                                                                                                //\n                                                                                                                       //\n      return get;                                                                                                      //\n    }()                                                                                                                //\n  }, {                                                                                                                 //\n    key: 'foreignKey',                                                                                                 //\n    get: function () {                                                                                                 //\n      function get() {                                                                                                 //\n        return this.config.foreignKey || '_id';                                                                        // 45\n      }                                                                                                                //\n                                                                                                                       //\n      return get;                                                                                                      //\n    }()                                                                                                                //\n  }]);                                                                                                                 //\n  return Relation;                                                                                                     //\n}(MongoQuery);                                                                                                         //\n                                                                                                                       //\n// array on this side of the association                                                                               //\n                                                                                                                       //\nvar BelongsToMany = function (_Relation) {                                                                             //\n  (0, _inherits3['default'])(BelongsToMany, _Relation);                                                                //\n                                                                                                                       //\n  function BelongsToMany() {                                                                                           //\n    (0, _classCallCheck3['default'])(this, BelongsToMany);                                                             //\n    return (0, _possibleConstructorReturn3['default'])(this, _Relation.apply(this, arguments));                        //\n  }                                                                                                                    //\n                                                                                                                       //\n  BelongsToMany.prototype.add = function () {                                                                          //\n    function add(modelOrAttrs) {                                                                                       //\n      var related = _getModel.call(this, modelOrAttrs);                                                                // 64\n      this.model.addToSet(this.field, related.get(this.foreignKey)).save();                                            // 65\n      return related;                                                                                                  // 66\n    }                                                                                                                  //\n                                                                                                                       //\n    return add;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  (0, _createClass3['default'])(BelongsToMany, [{                                                                      //\n    key: 'selector',                                                                                                   //\n    get: function () {                                                                                                 //\n      function get() {                                                                                                 //\n        var _ref;                                                                                                      //\n                                                                                                                       //\n        return _ref = {}, _ref[this.field] = { $in: this.fieldValue }, _ref;                                           // 60\n      }                                                                                                                //\n                                                                                                                       //\n      return get;                                                                                                      //\n    }()                                                                                                                //\n  }]);                                                                                                                 //\n  return BelongsToMany;                                                                                                //\n}(Relation);                                                                                                           //\n                                                                                                                       //\n// foreign key                                                                                                         //\n                                                                                                                       //\n                                                                                                                       //\nvar HasMany = function (_Relation2) {                                                                                  //\n  (0, _inherits3['default'])(HasMany, _Relation2);                                                                     //\n                                                                                                                       //\n  function HasMany() {                                                                                                 //\n    (0, _classCallCheck3['default'])(this, HasMany);                                                                   //\n    return (0, _possibleConstructorReturn3['default'])(this, _Relation2.apply(this, arguments));                       //\n  }                                                                                                                    //\n                                                                                                                       //\n  HasMany.prototype.add = function () {                                                                                //\n    function add(modelOrAttrs) {                                                                                       //\n      var related = _getModel.call(this, modelOrAttrs);                                                                // 77\n      related.set(this.foreignKey, this.fieldValue).save();                                                            // 78\n      return related;                                                                                                  // 79\n    }                                                                                                                  //\n                                                                                                                       //\n    return add;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  (0, _createClass3['default'])(HasMany, [{                                                                            //\n    key: 'selector',                                                                                                   //\n    get: function () {                                                                                                 //\n      function get() {                                                                                                 //\n        var _ref2;                                                                                                     //\n                                                                                                                       //\n        return _ref2 = {}, _ref2[this.foreignKey] = this.fieldValue, _ref2;                                            // 73\n      }                                                                                                                //\n                                                                                                                       //\n      return get;                                                                                                      //\n    }()                                                                                                                //\n  }]);                                                                                                                 //\n  return HasMany;                                                                                                      //\n}(Relation);                                                                                                           //\n                                                                                                                       //\n// array on foreign side of relation                                                                                   //\n                                                                                                                       //\n                                                                                                                       //\nvar HasAndBelongsToMany = function (_Relation3) {                                                                      //\n  (0, _inherits3['default'])(HasAndBelongsToMany, _Relation3);                                                         //\n                                                                                                                       //\n  function HasAndBelongsToMany() {                                                                                     //\n    (0, _classCallCheck3['default'])(this, HasAndBelongsToMany);                                                       //\n    return (0, _possibleConstructorReturn3['default'])(this, _Relation3.apply(this, arguments));                       //\n  }                                                                                                                    //\n                                                                                                                       //\n  HasAndBelongsToMany.prototype.add = function () {                                                                    //\n    function add(modelOrAttrs) {                                                                                       //\n      var related = _getModel.call(this, modelOrAttrs);                                                                // 90\n      related.addToSet(this.foreignKey, this.fieldValue).save();                                                       // 91\n      return related;                                                                                                  // 92\n    }                                                                                                                  //\n                                                                                                                       //\n    return add;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  (0, _createClass3['default'])(HasAndBelongsToMany, [{                                                                //\n    key: 'selector',                                                                                                   //\n    get: function () {                                                                                                 //\n      function get() {                                                                                                 //\n        var _ref3;                                                                                                     //\n                                                                                                                       //\n        return _ref3 = {}, _ref3[this.foreignKey] = this.fieldValue, _ref3;                                            // 86\n      }                                                                                                                //\n                                                                                                                       //\n      return get;                                                                                                      //\n    }()                                                                                                                //\n  }]);                                                                                                                 //\n  return HasAndBelongsToMany;                                                                                          //\n}(Relation);                                                                                                           //\n                                                                                                                       //\n// array on both sides of relation                                                                                     //\n                                                                                                                       //\n                                                                                                                       //\nvar ManyToMany = function (_Relation4) {                                                                               //\n  (0, _inherits3['default'])(ManyToMany, _Relation4);                                                                  //\n                                                                                                                       //\n  function ManyToMany() {                                                                                              //\n    (0, _classCallCheck3['default'])(this, ManyToMany);                                                                //\n    return (0, _possibleConstructorReturn3['default'])(this, _Relation4.apply(this, arguments));                       //\n  }                                                                                                                    //\n                                                                                                                       //\n  ManyToMany.prototype.add = function () {                                                                             //\n    function add(modelOrAttrs, commonValue) {                                                                          //\n      var related = _getModel.call(this, modelOrAttrs);                                                                // 103\n      this.model.addToSet(this.field, commonValue).save();                                                             // 104\n      related.addToSet(this.foreignKey, commonValue).save();                                                           // 105\n      return related;                                                                                                  // 106\n    }                                                                                                                  //\n                                                                                                                       //\n    return add;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  (0, _createClass3['default'])(ManyToMany, [{                                                                         //\n    key: 'selector',                                                                                                   //\n    get: function () {                                                                                                 //\n      function get() {                                                                                                 //\n        var _ref4;                                                                                                     //\n                                                                                                                       //\n        return _ref4 = {}, _ref4[this.foreignKey] = { $in: this.fieldValue }, _ref4;                                   // 99\n      }                                                                                                                //\n                                                                                                                       //\n      return get;                                                                                                      //\n    }()                                                                                                                //\n  }]);                                                                                                                 //\n  return ManyToMany;                                                                                                   //\n}(Relation);                                                                                                           //\n                                                                                                                       //\nfunction _getModel(modelOrAttrs) {                                                                                     // 110\n  if (modelOrAttrs instanceof Graviton.Model) {                                                                        // 111\n    return modelOrAttrs;                                                                                               // 112\n  } else {                                                                                                             //\n    return this.collection.build(modelOrAttrs);                                                                        // 114\n  }                                                                                                                    //\n}                                                                                                                      //\n                                                                                                                       //\nvar Embedded = function () {                                                                                           //\n  function Embedded(model, config) {                                                                                   // 119\n    (0, _classCallCheck3['default'])(this, Embedded);                                                                  //\n                                                                                                                       //\n    this.collection = Graviton.getCollection(config);                                                                  // 120\n    this.model = model;                                                                                                // 121\n    this.config = config;                                                                                              // 122\n  }                                                                                                                    //\n                                                                                                                       //\n  Embedded.prototype.get = function () {                                                                               // 118\n    function get(index) {                                                                                              //\n      var _this8 = this;                                                                                               //\n                                                                                                                       //\n      var value = this.model.get(this.config.relationName);                                                            // 126\n      if (_.isEmpty(value)) return value;                                                                              // 127\n                                                                                                                       //\n      if (_.isArray(value)) {                                                                                          // 129\n        if (!_.isUndefined(index)) {                                                                                   // 130\n          value = value[index];                                                                                        // 131\n          value = this.collection.build(value);                                                                        // 132\n        } else {                                                                                                       //\n          value = _.map(value, function (obj) {                                                                        // 134\n            return _this8.collection.build(obj);                                                                       // 135\n          });                                                                                                          //\n        }                                                                                                              //\n      } else {                                                                                                         //\n        value = this.collection.build(value);                                                                          // 139\n      }                                                                                                                //\n      return value;                                                                                                    // 141\n    }                                                                                                                  //\n                                                                                                                       //\n    return get;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return Embedded;                                                                                                     //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"model.js\":[\"babel-runtime/helpers/toConsumableArray\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",\"babel-runtime/helpers/classCallCheck\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/emmerge_graviton/lib/model.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");                                          //\n                                                                                                                       //\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nModel = function () {                                                                                                  // 1\n  function Model(collection, obj) {                                                                                    // 2\n    (0, _classCallCheck3[\"default\"])(this, Model);                                                                     //\n                                                                                                                       //\n    if (!(collection instanceof Mongo.Collection)) throw new Error(\"Models must be instantiated with a Mongo.Collection\");\n                                                                                                                       //\n    if (!_.isObject(obj) || _.isFunction(obj)) {                                                                       // 6\n      obj = {};                                                                                                        // 7\n    } else {                                                                                                           //\n      obj = _deepClone(obj);                                                                                           // 9\n    }                                                                                                                  //\n                                                                                                                       //\n    if (obj._id) {                                                                                                     // 12\n      this._id = obj._id;                                                                                              // 13\n    }                                                                                                                  //\n                                                                                                                       //\n    this._collection = collection;                                                                                     // 16\n    this.attributes = _.defaults(obj, this.constructor._defaults);                                                     // 17\n                                                                                                                       //\n    for (var _iterator = Object.keys(this.constructor._relations), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;                                                                                                        //\n                                                                                                                       //\n      if (_isArray) {                                                                                                  //\n        if (_i >= _iterator.length) break;                                                                             //\n        _ref = _iterator[_i++];                                                                                        //\n      } else {                                                                                                         //\n        _i = _iterator.next();                                                                                         //\n        if (_i.done) break;                                                                                            //\n        _ref = _i.value;                                                                                               //\n      }                                                                                                                //\n                                                                                                                       //\n      var relName = _ref;                                                                                              //\n                                                                                                                       //\n      var rel = this.constructor._relations[relName];                                                                  // 20\n      this[relName] = rel.generate(this);                                                                              // 21\n    }                                                                                                                  //\n                                                                                                                       //\n    this._saveQuery = new MongoQuery(collection);                                                                      // 24\n  }                                                                                                                    //\n  /**                                                                                                                  //\n   * If merge == true, override and add to any inherited relations                                                     //\n   * Otherwise, completely re-define the relations for this class                                                      //\n   * Pass an empty object to clear all inherited relations                                                             //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Model.relations = function () {                                                                                      // 1\n    function relations(relationsObj) {                                                                                 //\n      var merge = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];                          //\n                                                                                                                       //\n      relationsObj = _deepClone(relationsObj);                                                                         // 32\n      var relations = {};                                                                                              // 33\n      for (var _iterator2 = Object.keys(relationsObj), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;                                                                                                     //\n                                                                                                                       //\n        if (_isArray2) {                                                                                               //\n          if (_i2 >= _iterator2.length) break;                                                                         //\n          _ref2 = _iterator2[_i2++];                                                                                   //\n        } else {                                                                                                       //\n          _i2 = _iterator2.next();                                                                                     //\n          if (_i2.done) break;                                                                                         //\n          _ref2 = _i2.value;                                                                                           //\n        }                                                                                                              //\n                                                                                                                       //\n        var relationType = _ref2;                                                                                      //\n                                                                                                                       //\n        var generator = Relation.getGenerator(relationType);                                                           // 35\n        if (!generator) {                                                                                              // 36\n          continue;                                                                                                    // 37\n        }                                                                                                              //\n        for (var _iterator3 = Object.keys(relationsObj[relationType]), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n          var _ref3;                                                                                                   //\n                                                                                                                       //\n          if (_isArray3) {                                                                                             //\n            if (_i3 >= _iterator3.length) break;                                                                       //\n            _ref3 = _iterator3[_i3++];                                                                                 //\n          } else {                                                                                                     //\n            _i3 = _iterator3.next();                                                                                   //\n            if (_i3.done) break;                                                                                       //\n            _ref3 = _i3.value;                                                                                         //\n          }                                                                                                            //\n                                                                                                                       //\n          var relationName = _ref3;                                                                                    //\n                                                                                                                       //\n          if (relations[relationName]) {                                                                               // 40\n            throw new Error(\"Trying to add a relation that already exists:\", relationName);                            // 41\n          }                                                                                                            //\n          var cfg = relationsObj[relationType][relationName];                                                          // 43\n          cfg.type = relationType;                                                                                     // 44\n          cfg.relationName = relationName;                                                                             // 45\n          cfg.generate = generator;                                                                                    // 46\n          relations[relationName] = cfg;                                                                               // 47\n        }                                                                                                              //\n      }                                                                                                                //\n      if (merge) {                                                                                                     // 50\n        _.extend(this._relations, relations);                                                                          // 51\n      } else {                                                                                                         //\n        this._relations = relations;                                                                                   // 53\n      }                                                                                                                //\n      return this;                                                                                                     // 55\n    }                                                                                                                  //\n                                                                                                                       //\n    return relations;                                                                                                  //\n  }();                                                                                                                 //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * If merge == true, override and add to any inherited defaults                                                      //\n   * Otherwise, completely re-define the defaults for this class                                                       //\n   * Pass an empty object to clear all inherited defaults                                                              //\n   * Must be serializable                                                                                              //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Model.defaults = function () {                                                                                       // 1\n    function defaults(defaultsObj) {                                                                                   //\n      var merge = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];                          //\n                                                                                                                       //\n      var defaults = _deepClone(defaultsObj);                                                                          // 65\n      if (merge) {                                                                                                     // 66\n        this._defaults = _.extend({}, this._defaults, defaults);                                                       // 67\n      } else {                                                                                                         //\n        this._defaults = defaults;                                                                                     // 69\n      }                                                                                                                //\n      return this;                                                                                                     // 71\n    }                                                                                                                  //\n                                                                                                                       //\n    return defaults;                                                                                                   //\n  }();                                                                                                                 //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Add another class's prototype, relations and defaults                                                             //\n   * Don't override anthing defined on this class                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Model.mixin = function () {                                                                                          // 1\n    function mixin(modelClass) {                                                                                       //\n      _.defaults(this.prototype, modelClass.prototype);                                                                // 79\n      _.defaults(this._defaults, modelClass._defaults);                                                                // 80\n      for (var _iterator4 = Object.keys(modelClass._relations), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n        var _ref4;                                                                                                     //\n                                                                                                                       //\n        if (_isArray4) {                                                                                               //\n          if (_i4 >= _iterator4.length) break;                                                                         //\n          _ref4 = _iterator4[_i4++];                                                                                   //\n        } else {                                                                                                       //\n          _i4 = _iterator4.next();                                                                                     //\n          if (_i4.done) break;                                                                                         //\n          _ref4 = _i4.value;                                                                                           //\n        }                                                                                                              //\n                                                                                                                       //\n        var relName = _ref4;                                                                                           //\n                                                                                                                       //\n        if (!this._relations[relName]) {                                                                               // 82\n          this._relations[relName] = modelClass._relations[relName];                                                   // 83\n        }                                                                                                              //\n      }                                                                                                                //\n      return this;                                                                                                     // 86\n    }                                                                                                                  //\n                                                                                                                       //\n    return mixin;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Legacy API support                                                                                                //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Model.extend = function () {                                                                                         // 1\n    function extend(modelClassOrOptions, proto) {                                                                      //\n      var Mdl;                                                                                                         // 93\n      if (modelClassOrOptions.prototype instanceof Graviton.Model) {                                                   // 94\n        Mdl = function (_ref5) {                                                                                       // 95\n          (0, _inherits3[\"default\"])(_class, _ref5);                                                                   //\n                                                                                                                       //\n          function _class() {                                                                                          //\n            (0, _classCallCheck3[\"default\"])(this, _class);                                                            //\n            return (0, _possibleConstructorReturn3[\"default\"])(this, _ref5.apply(this, arguments));                    //\n          }                                                                                                            //\n                                                                                                                       //\n          return _class;                                                                                               //\n        }(this).mixin(modelClassOrOptions);                                                                            //\n      } else {                                                                                                         //\n        var BaseClass = _modelClassFromOptions(this, modelClassOrOptions, proto);                                      // 97\n        Mdl = function (_BaseClass) {                                                                                  // 98\n          (0, _inherits3[\"default\"])(Mdl, _BaseClass);                                                                 //\n                                                                                                                       //\n          function Mdl() {                                                                                             //\n            (0, _classCallCheck3[\"default\"])(this, Mdl);                                                               //\n            return (0, _possibleConstructorReturn3[\"default\"])(this, _BaseClass.apply(this, arguments));               //\n          }                                                                                                            //\n                                                                                                                       //\n          return Mdl;                                                                                                  //\n        }(BaseClass);                                                                                                  //\n      }                                                                                                                //\n      return Mdl;                                                                                                      // 100\n    }                                                                                                                  //\n                                                                                                                       //\n    return extend;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // alter the attributes using dot-delimited key                                                                      //\n                                                                                                                       //\n                                                                                                                       //\n  Model.prototype._setProperty = function () {                                                                         // 1\n    function _setProperty(key, value) {                                                                                //\n      return Graviton.setProperty(this.attributes, key, value);                                                        // 105\n    }                                                                                                                  //\n                                                                                                                       //\n    return _setProperty;                                                                                               //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.setId = function () {                                                                                // 1\n    function setId(id) {                                                                                               //\n      this._id = id;                                                                                                   // 109\n      this._setProperty('_id', id);                                                                                    // 110\n      return this;                                                                                                     // 111\n    }                                                                                                                  //\n                                                                                                                       //\n    return setId;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // take a mongo update statement and modify the model attributes with it                                             //\n  // doesn't alter pending save                                                                                        //\n                                                                                                                       //\n                                                                                                                       //\n  Model.prototype._applyUpdate = function () {                                                                         // 1\n    function _applyUpdate(update) {                                                                                    //\n      LocalCollection._modify(this.attributes, update);                                                                // 117\n    }                                                                                                                  //\n                                                                                                                       //\n    return _applyUpdate;                                                                                               //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.get = function () {                                                                                  // 1\n    function get(key) {                                                                                                //\n      return _deepClone(Graviton.getProperty(this.attributes, key));                                                   // 121\n    }                                                                                                                  //\n                                                                                                                       //\n    return get;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.set = function () {                                                                                  // 1\n    function set(keyOrObj, value) {                                                                                    //\n      this._applyUpdate(this._saveQuery.set(keyOrObj, value));                                                         // 125\n      return this;                                                                                                     // 126\n    }                                                                                                                  //\n                                                                                                                       //\n    return set;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.unset = function () {                                                                                // 1\n    function unset(keyOrObj) {                                                                                         //\n      this._applyUpdate(this._saveQuery.unset(keyOrObj));                                                              // 130\n      return this;                                                                                                     // 131\n    }                                                                                                                  //\n                                                                                                                       //\n    return unset;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.inc = function () {                                                                                  // 1\n    function inc(keyOrObj, value) {                                                                                    //\n      this._applyUpdate(this._saveQuery.inc(keyOrObj, value));                                                         // 135\n      return this;                                                                                                     // 136\n    }                                                                                                                  //\n                                                                                                                       //\n    return inc;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.push = function () {                                                                                 // 1\n    function push(keyOrObj, value) {                                                                                   //\n      this._applyUpdate(this._saveQuery.push(keyOrObj, value));                                                        // 140\n      return this;                                                                                                     // 141\n    }                                                                                                                  //\n                                                                                                                       //\n    return push;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.pull = function () {                                                                                 // 1\n    function pull(keyOrObj, value) {                                                                                   //\n      this._applyUpdate(this._saveQuery.unset(keyOrObj, value));                                                       // 145\n      return this;                                                                                                     // 146\n    }                                                                                                                  //\n                                                                                                                       //\n    return pull;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.addToSet = function () {                                                                             // 1\n    function addToSet(keyOrObj, value) {                                                                               //\n      this._applyUpdate(this._saveQuery.addToSet(keyOrObj, value));                                                    // 150\n      return this;                                                                                                     // 151\n    }                                                                                                                  //\n                                                                                                                       //\n    return addToSet;                                                                                                   //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.pop = function () {                                                                                  // 1\n    function pop(keyOrObj) {                                                                                           //\n      this._applyUpdate(this._saveQuery.pop(keyOrObj));                                                                // 155\n      return this;                                                                                                     // 156\n    }                                                                                                                  //\n                                                                                                                       //\n    return pop;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.shift = function () {                                                                                // 1\n    function shift(keyOrObj) {                                                                                         //\n      this._applyUpdate(this._saveQuery.shift(keyOrObj));                                                              // 160\n      return this;                                                                                                     // 161\n    }                                                                                                                  //\n                                                                                                                       //\n    return shift;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // given a mongo update statement, make the modification to                                                          //\n  // the model's attributes and add to pending modifications to save                                                   //\n                                                                                                                       //\n                                                                                                                       //\n  Model.prototype.modify = function () {                                                                               // 1\n    function modify(update) {                                                                                          //\n      this._saveQuery.mergeUpdate(update);                                                                             // 167\n      this._applyUpdate(update);                                                                                       // 168\n      return this;                                                                                                     // 169\n    }                                                                                                                  //\n                                                                                                                       //\n    return modify;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.update = function () {                                                                               // 1\n    function update(_update, callback) {                                                                               //\n      if (!this._id) {                                                                                                 // 173\n        throw new Error(\"Can't update model. It has no _id.\");                                                         // 174\n      }                                                                                                                //\n      this.modify(_update);                                                                                            // 176\n      this.save(callback);                                                                                             // 177\n    }                                                                                                                  //\n                                                                                                                       //\n    return update;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.save = function () {                                                                                 // 1\n    function save(callback) {                                                                                          //\n      if (this._id) {                                                                                                  // 181\n        this._saveQuery.selector = { _id: this._id };                                                                  // 182\n        _performUpdate.call(this, 'update', callback);                                                                 // 183\n      } else {                                                                                                         //\n        this._id = _performUpdate.call(this, 'insert', this.attributes, callback);                                     // 185\n      }                                                                                                                //\n      return this;                                                                                                     // 187\n    }                                                                                                                  //\n                                                                                                                       //\n    return save;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Model.prototype.remove = function () {                                                                               // 1\n    function remove(callback) {                                                                                        //\n      if (this._id) {                                                                                                  // 191\n        this._saveQuery.selector = { _id: this._id };                                                                  // 192\n        return _performUpdate.call(this, 'remove', callback);                                                          // 193\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return Model;                                                                                                        //\n}();                                                                                                                   //\nModel._relations = [];                                                                                                 // 197\nModel._defaults = {};                                                                                                  // 198\n                                                                                                                       //\n// handle async vs. sync                                                                                               //\nfunction _performUpdate() {                                                                                            // 201\n  var _this3 = this,                                                                                                   //\n      _arguments = arguments;                                                                                          //\n                                                                                                                       //\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                               //\n    args[_key] = arguments[_key];                                                                                      //\n  }                                                                                                                    //\n                                                                                                                       //\n  var method = args.shift();                                                                                           // 202\n  var callback = _.isFunction(_.last(args)) ? args.pop() : undefined;                                                  // 203\n                                                                                                                       //\n  if (callback) {                                                                                                      // 205\n    var _saveQuery;                                                                                                    //\n                                                                                                                       //\n    (_saveQuery = this._saveQuery)[method].apply(_saveQuery, args.concat([function (err) {                             // 206\n      if (!err) {                                                                                                      // 207\n        _this3._saveQuery.reset();                                                                                     // 208\n      }                                                                                                                //\n      callback.apply(_this3, _arguments);                                                                              // 210\n    }]));                                                                                                              //\n  } else {                                                                                                             //\n    var _saveQuery2;                                                                                                   //\n                                                                                                                       //\n    var result = (_saveQuery2 = this._saveQuery)[method].apply(_saveQuery2, args);                                     // 213\n    this._saveQuery.reset();                                                                                           // 214\n    return result;                                                                                                     // 215\n  }                                                                                                                    //\n}                                                                                                                      //\n                                                                                                                       //\nfunction _deepClone(obj) {                                                                                             // 219\n  if (!_.isObject(obj)) return obj;                                                                                    // 220\n  return JSON.parse(JSON.stringify(obj));                                                                              // 221\n}                                                                                                                      //\n                                                                                                                       //\nfunction _modelClassFromOptions(BaseClass) {                                                                           // 224\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                               //\n  var proto = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];                                 //\n                                                                                                                       //\n  var Mdl = function (_BaseClass2) {                                                                                   // 225\n    (0, _inherits3[\"default\"])(Mdl, _BaseClass2);                                                                      //\n                                                                                                                       //\n    function Mdl() {                                                                                                   // 226\n      (0, _classCallCheck3[\"default\"])(this, Mdl);                                                                     //\n                                                                                                                       //\n      var _this4 = (0, _possibleConstructorReturn3[\"default\"])(this, _BaseClass2.apply(this, arguments));              //\n                                                                                                                       //\n      if (options.initialize) {                                                                                        // 228\n        options.initialize.apply(_this4, arguments);                                                                   // 229\n      }                                                                                                                //\n      return _this4;                                                                                                   //\n    }                                                                                                                  //\n                                                                                                                       //\n    return Mdl;                                                                                                        //\n  }(BaseClass);                                                                                                        //\n  if (options.defaults) {                                                                                              // 233\n    Mdl.defaults(options.defaults, true);                                                                              // 234\n  }                                                                                                                    //\n  if (options.relations) {                                                                                             // 236\n    Mdl.relations(options.relations, true);                                                                            // 237\n  } else {                                                                                                             //\n    var _ref6;                                                                                                         //\n                                                                                                                       //\n    var relations = (_ref6 = _).pick.apply(_ref6, [options].concat((0, _toConsumableArray3[\"default\"])(Graviton.Relation.supportedTypes())));\n    if (!_.isEmpty(relations)) {                                                                                       // 240\n      Mdl.relations(relations);                                                                                        // 241\n    }                                                                                                                  //\n  }                                                                                                                    //\n  _.extend(Mdl.prototype, proto);                                                                                      // 244\n  return Mdl;                                                                                                          // 245\n}                                                                                                                      //\n                                                                                                                       //\n// constructor used by collection transform functions                                                                  //\n// Model classes are not tied to any particular collection                                                             //\n// model instances have a reference to the collection they came from                                                   //\n// relations are also defined with collections and added to models when they are instantiated                          //\nOldModel = function OldModel(collection, obj) {                                                                        // 270\n  if (!(collection instanceof Mongo.Collection)) throw new Error(\"Models must be instantiated with a Mongo.Collection\");\n                                                                                                                       //\n  if (!_.isObject(obj) || _.isFunction(obj)) obj = {};                                                                 // 274\n                                                                                                                       //\n  this._collection = collection;                                                                                       // 277\n                                                                                                                       //\n  this.attributes = obj;                                                                                               // 279\n  this._pendingMods = []; // fill with modifiers to run when save is called                                            // 280\n                                                                                                                       //\n  // new Gravition.Model will instantiate without any options                                                          //\n  // use OldModel.extend to create a constructor with defaults/initialize                                              //\n  _.defaults(this, {                                                                                                   // 270\n    _options: {}                                                                                                       // 285\n  });                                                                                                                  //\n                                                                                                                       //\n  var self = this;                                                                                                     // 288\n                                                                                                                       //\n  // new way of adding relations                                                                                       //\n  _.each(this._options.relations, function (relationsOfType, relationType) {                                           // 270\n    _.each(relationsOfType, function (cfg, relationName) {                                                             // 292\n      var relCls = ManyRelation._types[relationType];                                                                  // 293\n      if (relCls) {                                                                                                    // 294\n        cfg.relationName = relationName;                                                                               // 295\n        self[relationName] = new relCls(self, cfg);                                                                    // 296\n      }                                                                                                                //\n    });                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  // old way of adding relations                                                                                       //\n  var relations = this._collection._graviton.relations;                                                                // 270\n                                                                                                                       //\n  _.each(relations.hasMany, function (cfg, name) {                                                                     // 304\n    self[name] = new HasMany(self, cfg);                                                                               // 305\n  });                                                                                                                  //\n  _.each(relations.hasOne, function (cfg, name) {                                                                      // 307\n    self[name] = colHasOne(self, cfg);                                                                                 // 308\n  });                                                                                                                  //\n  _.each(relations.belongsTo, function (cfg, name) {                                                                   // 310\n    self[name] = colBelongsTo(self, cfg, name);                                                                        // 311\n  });                                                                                                                  //\n  _.each(relations.belongsToMany, function (cfg, name) {                                                               // 313\n    self[name] = new BelongsToMany(self, cfg);                                                                         // 314\n  });                                                                                                                  //\n  _.each(relations.embeds, function (cfg, name) {                                                                      // 316\n    self[name] = colEmbeds(self, cfg, name);                                                                           // 317\n  });                                                                                                                  //\n  _.each(relations.embedsMany, function (cfg, name) {                                                                  // 319\n    self[name] = new EmbeddedModels(self, cfg, name);                                                                  // 320\n  });                                                                                                                  //\n                                                                                                                       //\n  _.defaults(this.attributes, this._options.defaults);                                                                 // 323\n                                                                                                                       //\n  this.constructor.initialize.apply(this, arguments);                                                                  // 325\n};                                                                                                                     //\n                                                                                                                       //\nisModel = function isModel(obj) {                                                                                      // 328\n  return obj instanceof Graviton.Model || Graviton.OldModel.prototype.isPrototypeOf(obj);                              // 329\n};                                                                                                                     //\n                                                                                                                       //\nvar addSingularRelations = function addSingularRelations(proto, relations) {                                           // 332\n  _.each(relations, function (relationsOfType, relationType) {                                                         // 333\n    _.each(relationsOfType, function (cfg, relationName) {                                                             // 334\n      var relFn = Relation._types[relationType];                                                                       // 335\n      if (relFn) {                                                                                                     // 336\n        cfg.relationName = relationName;                                                                               // 337\n        proto[relationName] = relFn(cfg);                                                                              // 338\n      }                                                                                                                //\n    });                                                                                                                //\n  });                                                                                                                  //\n};                                                                                                                     //\n                                                                                                                       //\n// no-op initialize                                                                                                    //\nOldModel.initialize = function () {};                                                                                  // 345\n                                                                                                                       //\n// for creating a custom class to use for model transforms                                                             //\n// options:                                                                                                            //\n// * initialize - call when instances are created                                                                      //\n// * defaults - default values for attributes                                                                          //\nOldModel.extend = function (options, proto) {                                                                          // 351\n  var self = this;                                                                                                     // 352\n                                                                                                                       //\n  options = options || {};                                                                                             // 354\n                                                                                                                       //\n  // If we are extending another model constructor we will have stored the options from that model.                    //\n  // Use those options and use its prototype.                                                                          //\n  if (options._fullOptions) {                                                                                          // 351\n    proto = options.prototype;                                                                                         // 359\n    options = options._fullOptions;                                                                                    // 360\n  }                                                                                                                    //\n                                                                                                                       //\n  proto = proto || {};                                                                                                 // 363\n                                                                                                                       //\n  var relations = _.clone(this.relations) || {};                                                                       // 365\n                                                                                                                       //\n  _.each(relations, function (rel, relName) {                                                                          // 367\n    relations[relName] = _.extend({}, rel, options[relName]);                                                          // 368\n  });                                                                                                                  //\n  _.defaults(relations, _.pick(options, Relation.typeNames()));                                                        // 370\n                                                                                                                       //\n  var opts = {                                                                                                         // 372\n    defaults: _.extend({}, this.defaults, options.defaults),                                                           // 373\n    initialize: options.initialize || function () {}, // if no init is supplied, use a no-op                           // 374\n    relations: relations                                                                                               // 375\n  };                                                                                                                   //\n                                                                                                                       //\n  var Mdl = function Mdl(collection, obj) {                                                                            // 378\n    // we want any arbitrary options used to extend                                                                    //\n    this._options = _.extend(opts, _.omit(options, 'defaults', 'initialize', 'relations'));                            // 380\n    OldModel.call(this, collection, obj);                                                                              // 381\n  };                                                                                                                   //\n                                                                                                                       //\n  // store the full options object (including the 'defaults', 'initialize', 'relations') for use if we ever extend Mdl\n  Mdl._fullOptions = options;                                                                                          // 351\n                                                                                                                       //\n  Mdl.relations = opts.relations;                                                                                      // 387\n  Mdl.initialize = opts.initialize;                                                                                    // 388\n  Mdl.defaults = opts.defaults;                                                                                        // 389\n  Mdl.extend = this.extend;                                                                                            // 390\n  Mdl.prototype = Object.create(this.prototype);                                                                       // 391\n  Mdl.prototype.constructor = Mdl;                                                                                     // 392\n                                                                                                                       //\n  addSingularRelations(Mdl.prototype, opts.relations);                                                                 // 394\n                                                                                                                       //\n  _.extend(Mdl.prototype, proto);                                                                                      // 396\n                                                                                                                       //\n  return Mdl;                                                                                                          // 398\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype.get = function (key) {                                                                              // 401\n  return Graviton.getProperty(this.attributes, key);                                                                   // 402\n};                                                                                                                     //\n                                                                                                                       //\n// function _deepClone(obj) {                                                                                          //\n//   if (_.isObject(obj)) {                                                                                            //\n//     if (obj.constructor === Object) {                                                                               //\n//       var clone = {};                                                                                               //\n//       for (var k in obj) {                                                                                          //\n//         clone[k] = _deepClone(obj[k]);                                                                              //\n//       }                                                                                                             //\n//       return clone;                                                                                                 //\n//     } else {                                                                                                        //\n//       return obj;                                                                                                   //\n//     }                                                                                                               //\n//   }                                                                                                                 //\n//   return obj;                                                                                                       //\n// }                                                                                                                   //\n                                                                                                                       //\n// * thing - string or object                                                                                          //\n// * value - anything serializable. isn't used if thing is an object                                                   //\nOldModel.prototype.set = function (thing, value) {                                                                     // 422\n  if (_.isObject(thing)) {                                                                                             // 423\n    thing = _deepClone(thing);                                                                                         // 424\n    for (var k in meteorBabelHelpers.sanitizeForInObject(thing)) {                                                     // 425\n      this._setProperty(k, thing[k]);                                                                                  // 426\n    }                                                                                                                  //\n    this._pendingMods.push({ $set: thing });                                                                           // 428\n    return this;                                                                                                       // 429\n  }                                                                                                                    //\n  // else                                                                                                              //\n  value = _deepClone(value);                                                                                           // 422\n  this._setProperty(thing, value);                                                                                     // 433\n  var obj = {};                                                                                                        // 434\n  obj[thing] = value;                                                                                                  // 435\n  this._pendingMods.push({ $set: obj });                                                                               // 436\n  return this;                                                                                                         // 437\n};                                                                                                                     //\n                                                                                                                       //\n// Unset a single or set of keys in this object:                                                                       //\n//  unset(nameOfKey)                                                                                                   //\n//  unset(nameOfKey1, nameOfKey2, ...)                                                                                 //\n//  unset({key1:'', key2:'', ...})                                                                                     //\nOldModel.prototype.unset = function () {                                                                               // 444\n  var keysToUnset;                                                                                                     // 445\n  if (_.isObject(arguments[0])) keysToUnset = _.keys(arguments[0]);else keysToUnset = Array.prototype.slice.call(arguments);\n                                                                                                                       //\n  // Remove the property, then push the unset mod:                                                                     //\n  keysToUnset.forEach(function (key) {                                                                                 // 444\n    this._unsetProperty(key);                                                                                          // 452\n  }, this);                                                                                                            //\n  var mods = _.object(_.map(keysToUnset, function (k) {                                                                // 453\n    return [k, ''];                                                                                                    // 453\n  }));                                                                                                                 //\n  this._pendingMods.push({ $unset: mods });                                                                            // 454\n  return this;                                                                                                         // 455\n};                                                                                                                     //\n                                                                                                                       //\n/**                                                                                                                    //\n *                                                                                                                     //\n * @param thing {String} or {Object}                                                                                   //\n * @param increment {number}                                                                                           //\n * @returns {Model} updated model                                                                                      //\n */                                                                                                                    //\nOldModel.prototype.inc = function (thing, increment) {                                                                 // 464\n  var val;                                                                                                             // 465\n  if (_.isObject(thing)) {                                                                                             // 466\n    if (_.isObject(thing)) {                                                                                           // 467\n      for (var k in meteorBabelHelpers.sanitizeForInObject(thing)) {                                                   // 468\n        val = this.get(k) || 0;                                                                                        // 469\n        this._setProperty(k, val + thing[k]);                                                                          // 470\n      }                                                                                                                //\n      this._pendingMods.push({ $inc: thing });                                                                         // 472\n      return this;                                                                                                     // 473\n    }                                                                                                                  //\n  }                                                                                                                    //\n  // else                                                                                                              //\n  val = this.get(thing) || 0;                                                                                          // 464\n  this._setProperty(thing, val + increment);                                                                           // 478\n  var incObj = {};                                                                                                     // 479\n  incObj[thing] = increment;                                                                                           // 480\n  var $inc = { $inc: incObj };                                                                                         // 481\n  this._pendingMods.push($inc);                                                                                        // 482\n  return this;                                                                                                         // 483\n};                                                                                                                     //\n                                                                                                                       //\n/**                                                                                                                    //\n * _pushProperty                                                                                                       //\n *                                                                                                                     //\n * Takes an object or array value and pushes it to the model property found using `key`.                               //\n * Like Mongo $push, if there is no property for key, create a new array field using the value.                        //\n * Like Mongo $push, fails if the property found for the key is not an array.                                          //\n * Returns an object to be used in the Mongo `$push` operation.                                                        //\n *  - In the case of an {Object} value this is simply just the value.                                                  //\n *  - In the case of an {Array} value it will be an object containing an `$each` expression.                           //\n *                                                                                                                     //\n * @param key {String} the property key (must have an array value).                                                    //\n * @param value {Array} or {Object}                                                                                    //\n * @returns {Object}                                                                                                   //\n * @private                                                                                                            //\n */                                                                                                                    //\nOldModel.prototype._pushProperty = function (key, value) {                                                             // 501\n  var array = this.get(key);                                                                                           // 502\n  if (array && !_.isArray(array)) throw new Error(\"Trying to push a value onto a non-array property\");                 // 503\n  if (_.isArray(value)) {                                                                                              // 505\n    this._setProperty(key, array.concat(value));                                                                       // 506\n    return { $each: value };                                                                                           // 507\n  } else {                                                                                                             //\n    if (!array) this._setProperty(key, [value]);else array.push(value);                                                // 509\n    return value;                                                                                                      // 513\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype.push = function (thing, value) {                                                                    // 517\n  var push;                                                                                                            // 518\n  if (_.isObject(thing)) {                                                                                             // 519\n    for (var k in meteorBabelHelpers.sanitizeForInObject(thing)) {                                                     // 520\n      thing[k] = this._pushProperty(k, thing[k]);                                                                      // 521\n    }                                                                                                                  //\n    push = thing;                                                                                                      // 523\n  } else {                                                                                                             //\n    value = this._pushProperty(thing, value);                                                                          // 525\n    push = {};                                                                                                         // 526\n    push[thing] = value;                                                                                               // 527\n  }                                                                                                                    //\n  this._pendingMods.push({ $push: push });                                                                             // 529\n  return this;                                                                                                         // 530\n};                                                                                                                     //\n                                                                                                                       //\n/**                                                                                                                    //\n * _addToSetProperty                                                                                                   //\n *                                                                                                                     //\n * Takes an object or array value and adds it to the set for the model property found using `key`.                     //\n * Like Mongo $addToSet, if there is no property for key, create a new array field using the value.                    //\n * Like Mongo $addToSet, fails if the property found for the key is not an array.                                      //\n * Returns an object to be used in the Mongo `$addToSet` operation.                                                    //\n *  - In the case of an {Object} value this is simply just the value.                                                  //\n *  - In the case of an {Array} value it will be an object containing an `$each` expression.                           //\n *                                                                                                                     //\n *                                                                                                                     //\n * @param key {String} the property key (must have an array value).                                                    //\n * @param value {Array} or {Object}                                                                                    //\n * @returns {Object}                                                                                                   //\n * @private                                                                                                            //\n */                                                                                                                    //\nOldModel.prototype._addToSetProperty = function (key, value) {                                                         // 549\n  var array = this.get(key);                                                                                           // 550\n  if (array !== undefined && !_.isArray(array)) throw new Error(\"Trying to addToSet on a non-array property\");         // 551\n  if (_.isArray(value)) {                                                                                              // 553\n    if (!array) this._setProperty(key, value);                                                                         // 554\n    // this._setProperty(key, _.union(array || [], value))                                                             //\n    // because compacts the original array to a unique set, Mongo $addToSet does not change the existing array         //\n    else _.each(value, function (item) {                                                                               // 554\n        if (!_.contains(array, item)) array.push(item);                                                                // 560\n      });                                                                                                              //\n    return { $each: value };                                                                                           // 563\n  } else {                                                                                                             //\n    if (!array) this._setProperty(key, [value]);else if (!_.contains(array, value)) array.push(value);                 // 565\n    return value;                                                                                                      // 569\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype.addToSet = function (thing, value) {                                                                // 573\n  var addToSet;                                                                                                        // 574\n  if (_.isObject(thing)) {                                                                                             // 575\n    for (var k in meteorBabelHelpers.sanitizeForInObject(thing)) {                                                     // 576\n      thing[k] = this._addToSetProperty(k, thing[k]);                                                                  // 577\n    }                                                                                                                  //\n    addToSet = thing;                                                                                                  // 579\n  } else {                                                                                                             //\n    value = this._addToSetProperty(thing, value);                                                                      // 581\n    addToSet = {};                                                                                                     // 582\n    addToSet[thing] = value;                                                                                           // 583\n  }                                                                                                                    //\n  this._pendingMods.push({ $addToSet: addToSet });                                                                     // 585\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype._popProperty = function (key, first) {                                                              // 588\n  var array = this.get(key);                                                                                           // 589\n  if (!_.isArray(array)) throw new Error(\"Trying to pop a value from a non-array\");                                    // 590\n  if (first) {                                                                                                         // 591\n    return array.shift();                                                                                              // 592\n  } else {                                                                                                             //\n    return array.pop();                                                                                                // 594\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype._applyPop = function (keys, first) {                                                                // 598\n  var pop = {};                                                                                                        // 599\n  for (var i in meteorBabelHelpers.sanitizeForInObject(keys)) {                                                        // 600\n    pop[keys[i]] = first ? -1 : 1;                                                                                     // 601\n    this._popProperty(keys[i], first);                                                                                 // 602\n  }                                                                                                                    //\n  this._pendingMods.push({ $pop: pop });                                                                               // 604\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype.pop = function () {                                                                                 // 607\n  this._applyPop(_.toArray(arguments));                                                                                // 608\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype.shift = function (key) {                                                                            // 611\n  this._applyPop(_.toArray(arguments), true);                                                                          // 612\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype._setProperty = function (key, value) {                                                              // 615\n  Graviton.setProperty(this.attributes, key, value);                                                                   // 616\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype._unsetProperty = function (key) {                                                                   // 619\n  Graviton.unsetProperty(this.attributes, key);                                                                        // 620\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype.setId = function (id) {                                                                             // 623\n  this._id = id;                                                                                                       // 624\n  this._setProperty('_id', id);                                                                                        // 625\n};                                                                                                                     //\n                                                                                                                       //\n// deep clone of attributes                                                                                            //\nOldModel.prototype.plain = function () {                                                                               // 629\n  var str = JSON.stringify(this.attributes);                                                                           // 630\n  return JSON.parse(str);                                                                                              // 631\n};                                                                                                                     //\n                                                                                                                       //\n// deep equals of attributes                                                                                           //\n// designed to be overridden by subclasses                                                                             //\n// used by indexOf on relations                                                                                        //\nOldModel.prototype.equals = function (obj) {                                                                           // 637\n  if (Graviton.isModel(obj)) obj = obj.attributes;                                                                     // 638\n  return _.isEqual(obj, this.attributes);                                                                              // 639\n};                                                                                                                     //\n                                                                                                                       //\n/**                                                                                                                    //\n * Insert a doc if it has no _id. If it already had an _id, do nothing.                                                //\n * @param callback                                                                                                     //\n * @returns return new id if new doc was inserted, `false` if no doc was inserted                                      //\n */                                                                                                                    //\nOldModel.prototype.persist = function (callback) {                                                                     // 647\n  if (!this._id) {                                                                                                     // 648\n    var id = this._collection.insert.apply(this._collection, _.compact([this.attributes, callback]));                  // 649\n    this.setId(id);                                                                                                    // 650\n    this._pendingMods = [];                                                                                            // 651\n    return this._id;                                                                                                   // 652\n  }                                                                                                                    //\n  if (callback) callback(null, false);                                                                                 // 654\n  return false;                                                                                                        // 655\n};                                                                                                                     //\n                                                                                                                       //\n// applies a mongo modifier to the document                                                                            //\n// does not update the database until you call save                                                                    //\nOldModel.prototype.modify = function (modifier) {                                                                      // 660\n  if (!_.isObject(modifier)) throw new Error(\"Modifier must be an object.\");                                           // 661\n  LocalCollection._modify(this.attributes, modifier);                                                                  // 663\n  this._pendingMods.push(modifier);                                                                                    // 664\n  return this;                                                                                                         // 665\n};                                                                                                                     //\n                                                                                                                       //\n// does a modify with persistence                                                                                      //\nOldModel.prototype.update = function (modifier, callback) {                                                            // 669\n  var self = this;                                                                                                     // 670\n  LocalCollection._modify(this.attributes, modifier);                                                                  // 671\n                                                                                                                       //\n  if (callback) {                                                                                                      // 673\n    this.persist(function (err, id) {                                                                                  // 674\n      if (!err) {                                                                                                      // 675\n        self._collection.update(self._id, modifier, callback);                                                         // 676\n      } else {                                                                                                         //\n        callback(err);                                                                                                 // 678\n      }                                                                                                                //\n    });                                                                                                                //\n  } else {                                                                                                             //\n    if (!this.persist()) {                                                                                             // 682\n      this._collection.update(this._id, modifier);                                                                     // 683\n    }                                                                                                                  //\n  }                                                                                                                    //\n  return this;                                                                                                         // 686\n};                                                                                                                     //\n                                                                                                                       //\n// insert or execute pending modifiers added with modify                                                               //\nOldModel.prototype.save = function (callback) {                                                                        // 690\n  var self = this;                                                                                                     // 691\n  if (callback) {                                                                                                      // 692\n    this.persist(function (err, id) {                                                                                  // 693\n      if (!err) {                                                                                                      // 694\n        var updates = _.map(self._pendingMods, function (mod) {                                                        // 695\n          return function (cb) {                                                                                       // 696\n            self._collection.update(self._id, mod, function (err, res) {                                               // 697\n              if (!err) self._pendingMods.shift();                                                                     // 698\n              cb(err, res);                                                                                            // 699\n            });                                                                                                        //\n          };                                                                                                           //\n        });                                                                                                            //\n        var done = function done(err, res) {                                                                           // 703\n          callback(err, 1);                                                                                            // 704\n        };                                                                                                             //\n        async.series(updates, done);                                                                                   // 706\n      } else {                                                                                                         //\n        callback(err);                                                                                                 // 708\n      }                                                                                                                //\n    });                                                                                                                //\n  } else {                                                                                                             //\n    if (!this.persist()) {                                                                                             // 712\n      while (this._pendingMods.length > 0) {                                                                           // 713\n        var mod = this._pendingMods.shift();                                                                           // 714\n        try {                                                                                                          // 715\n          this._collection.update(this._id, mod);                                                                      // 716\n        } catch (x) {                                                                                                  //\n          this._pendingMods.unshift(mod);                                                                              // 719\n          throw x;                                                                                                     // 720\n        }                                                                                                              //\n      }                                                                                                                //\n    }                                                                                                                  //\n    return this;                                                                                                       // 724\n  }                                                                                                                    //\n};                                                                                                                     //\n                                                                                                                       //\nOldModel.prototype.remove = function (callback) {                                                                      // 728\n                                                                                                                       //\n  var removed_id = this._id;                                                                                           // 730\n  var self = this;                                                                                                     // 731\n  var relations;                                                                                                       // 732\n                                                                                                                       //\n  // find all the relations so that we can handle cascade options                                                      //\n  if (this._options.relations) {                                                                                       // 728\n    relations = _.pick(this._options.relations, ['hasMany', 'hasOne']);                                                // 736\n    relations = _.extend(relations.hasMany || {}, relations.hasOne);                                                   // 737\n  }                                                                                                                    //\n                                                                                                                       //\n  // before destroying the parent, check for relational restrictions                                                   //\n  var denyRelations = _.filter(relations, function (relation) {                                                        // 728\n    return relation.onRemove === 'deny';                                                                               // 742\n  });                                                                                                                  //\n  _.each(denyRelations, function (relation) {                                                                          // 744\n    //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'is on remove deny restricted');\n    //console.log('self[relation.relationName].findOne()',self[relation.relationName].findOne());                      //\n    if (self[relation.relationName].findOne()) throw Error('Cannot remove record, relation \\'' + relation.relationName + '\\' denies removal if child records exist.');\n  });                                                                                                                  //\n                                                                                                                       //\n  // remove the document from the collection itself                                                                    //\n  if (callback) {                                                                                                      // 728\n    this._collection.remove(this._id, function (err, res) {                                                            // 753\n      if (!err) self.setId(null);                                                                                      // 754\n      callback(err, res);                                                                                              // 755\n    });                                                                                                                //\n  } else {                                                                                                             //\n    this._collection.remove(this._id);                                                                                 // 758\n    this.setId(null);                                                                                                  // 759\n  }                                                                                                                    //\n                                                                                                                       //\n  // after destroying the parent, remove or nullify the children based on relational options                           //\n  _.each(relations, function (relation) {                                                                              // 728\n    self._id = removed_id; //mock up the model like it still exists to allow the relations to work naturally           // 764\n                                                                                                                       //\n    if (relation.onRemove == 'cascade') {                                                                              // 763\n      //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'should onRemove cascade');\n      _.each(self[relation.relationName].all(), function (child) {                                                     // 768\n        //console.log('child', relation.collection, 'to delete:', child._id);                                          //\n        child.remove();                                                                                                // 770\n      });                                                                                                              //\n    } else if (relation.onRemove == 'unset') {                                                                         //\n      //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'should remove reference');\n      _.each(self[relation.relationName].all(), function (child) {                                                     // 775\n        //console.log('child', relation.collection, 'to remove reference to:', child._id);                             //\n        var updateObj = {};                                                                                            // 777\n        updateObj.$unset = {};                                                                                         // 778\n        updateObj.$unset[relation.foreignKey] = true;                                                                  // 779\n        child.update(updateObj);                                                                                       // 780\n      });                                                                                                              //\n    }                                                                                                                  //\n                                                                                                                       //\n    self._id = null; //reset the removed model.                                                                        // 784\n  });                                                                                                                  // 763\n                                                                                                                       //\n  return this;                                                                                                         // 787\n};                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"graviton.js\":[\"babel-runtime/helpers/classCallCheck\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/emmerge_graviton/graviton.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nGraviton = function () {                                                                                               // 1\n  function Graviton() {                                                                                                //\n    (0, _classCallCheck3[\"default\"])(this, Graviton);                                                                  //\n  }                                                                                                                    //\n                                                                                                                       //\n  Graviton.getCollection = function () {                                                                               //\n    function getCollection(options) {                                                                                  //\n      var name;                                                                                                        // 4\n      if (_.isString(options)) {                                                                                       // 5\n        name = options;                                                                                                // 6\n      } else if (_.isObject(options)) {                                                                                //\n        name = options.collectionName || options.collection || options.klass || options.relationName;                  // 9\n      }                                                                                                                //\n      if (name) {                                                                                                      // 11\n        return Graviton._collections[name];                                                                            // 12\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return getCollection;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // use a period-delimited string to access a deeply-nested object                                                    //\n                                                                                                                       //\n                                                                                                                       //\n  Graviton.getProperty = function () {                                                                                 // 1\n    function getProperty(obj, string) {                                                                                //\n      var arr = string.split(\".\");                                                                                     // 18\n      while (obj && arr.length) {                                                                                      // 19\n        obj = obj[arr.shift()];                                                                                        // 20\n      }                                                                                                                //\n      if (arr.length === 0) {                                                                                          // 22\n        return obj;                                                                                                    // 23\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return getProperty;                                                                                                //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Graviton.setProperty = function () {                                                                                 // 1\n    function setProperty(obj, key, val) {                                                                              //\n      if (!key) throw new Error(\"Cannot setProperty with no key specified.\");                                          // 28\n      var arr = key.split(\".\");                                                                                        // 29\n      while (obj && arr.length > 1) {                                                                                  // 30\n        key = arr.shift();                                                                                             // 31\n        if (_.isUndefined(obj[key])) {                                                                                 // 32\n          obj[key] = {};                                                                                               // 33\n        }                                                                                                              //\n        obj = obj[key];                                                                                                // 35\n      }                                                                                                                //\n      if (arr.length === 1) {                                                                                          // 37\n        obj[arr[0]] = val;                                                                                             // 38\n        return val;                                                                                                    // 39\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return setProperty;                                                                                                //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Graviton.unsetProperty = function () {                                                                               // 1\n    function unsetProperty(obj, key) {                                                                                 //\n      if (!key) throw new Error(\"Cannot unsetProperty with no key specified\");                                         // 44\n      var arr = key.split(\".\");                                                                                        // 45\n      while (obj && arr.length > 1) {                                                                                  // 46\n        key = arr.shift();                                                                                             // 47\n        if (_.isUndefined(obj[key])) return; // The nested key can't possibly exist, it is already unset               // 48\n        obj = obj[key];                                                                                                // 46\n      }                                                                                                                //\n      if (arr.length == 1) {                                                                                           // 52\n        delete obj[arr[0]];                                                                                            // 53\n        return;                                                                                                        // 54\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return unsetProperty;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // currently mongo sanitize causes ambiguous / non-unique keys for some inputs such as...                            //\n  // '$#foo' vs '#foo'                                                                                                 //\n  // 'foo@.bar' vs 'foo.@bar'                                                                                          //\n  // 'foo..bar' vs 'foo@bar'                                                                                           //\n  // TODO: refactor to make non-ambiguous / unique keys - probably incorporating some other special characters         //\n                                                                                                                       //\n                                                                                                                       //\n  Graviton.mongoSanitize = function () {                                                                               // 1\n    function mongoSanitize(str) {                                                                                      //\n      if (/^\\#/.test(str)) {                                                                                           // 64\n        str = '##' + str.substr(1);                                                                                    // 65\n      }                                                                                                                //\n      if (/^\\$/.test(str)) {                                                                                           // 67\n        str = '#' + str.substr(1);                                                                                     // 68\n      }                                                                                                                //\n      if (/\\@/.test(str)) {                                                                                            // 70\n        str = str.replace(/\\@/g, '@@');                                                                                // 71\n      }                                                                                                                //\n      if (/\\./.test(str)) {                                                                                            // 73\n        str = str.replace(/\\./g, '@');                                                                                 // 74\n      }                                                                                                                //\n      return str;                                                                                                      // 76\n    }                                                                                                                  //\n                                                                                                                       //\n    return mongoSanitize;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Graviton.reverseMongoSanitize = function () {                                                                        // 1\n    function reverseMongoSanitize(sanitizedString) {                                                                   //\n      if (_.isString(sanitizedString)) {                                                                               // 80\n        // first replace all singular @ symbols (in js regex that means @ not followed by @ and proceeded by a the beginning of the string or by @)\n        return sanitizedString.replace(/(^|[^@])@(?!@)/g, '$1.')                                                       // 82\n        // then replace @@                                                                                             //\n        .replace(/@@/g, '@')                                                                                           //\n        // then replace starts with # (not followed by another #)                                                      //\n        .replace(/^\\#(?!\\#)/, '$')                                                                                     //\n        // then replace starts with ##                                                                                 //\n        .replace(/^\\#\\#/, '#');                                                                                        //\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return reverseMongoSanitize;                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // Helper function to deal with objects which may have keys which are illegal in mongo                               //\n  // 1. Mongo keys cannot start with $                                                                                 //\n  // -- convert starts with $ to starts with #                                                                         //\n  // -- also convert starts with # to starts with ## to avoid collisions                                               //\n  // 2. Mongo keys cannot contain .                                                                                    //\n  // -- convert . to @                                                                                                 //\n  // -- also convert @ to @@ to avoid collisions                                                                       //\n                                                                                                                       //\n                                                                                                                       //\n  Graviton.sanitizeKeysForMongo = function () {                                                                        // 1\n    function sanitizeKeysForMongo(obj) {                                                                               //\n      var nk;                                                                                                          // 100\n      for (var k in meteorBabelHelpers.sanitizeForInObject(obj)) {                                                     // 101\n        if (_.isObject(obj[k])) Graviton.sanitizeKeysForMongo(obj[k]);                                                 // 102\n        nk = Graviton.mongoSanitize(k);                                                                                // 103\n        if (nk !== k) {                                                                                                // 104\n          obj[nk] = obj[k];                                                                                            // 105\n          delete obj[k];                                                                                               // 106\n        }                                                                                                              //\n      }                                                                                                                //\n    }                                                                                                                  //\n                                                                                                                       //\n    return sanitizeKeysForMongo;                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  // declare new collections of models                                                                                 //\n  // options contain the relations etc.                                                                                //\n                                                                                                                       //\n                                                                                                                       //\n  Graviton.define = function () {                                                                                      // 1\n    function define(collectionName) {                                                                                  //\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                           //\n                                                                                                                       //\n      options = _.pick(options, 'persist', // if false, is backed by a local collection only                           // 114\n      'modelCls', // either model constructor or object containing model constructors                                  // 116\n      'defaultType', // used only when modelCls is an object                                                           // 117\n      'typeAttribute', // attribute to use for type instead of _type                                                   // 118\n      'registerCollection', // if true, saves this collection in Gravition._collections[collectionName]                // 119\n      'timestamps', // if true, use collection-hooks (if available) to generate createdAt and updatedAt timestamps     // 120\n      'name', // name of collection, optional                                                                          // 121\n      'timestampFormat' // set to 'number' to use old, integer timestamps                                              // 122\n      );                                                                                                               // 114\n                                                                                                                       //\n      _.defaults(options, {                                                                                            // 125\n        persist: true,                                                                                                 // 126\n        registerCollection: true,                                                                                      // 127\n        timestamps: true,                                                                                              // 128\n        timestampFormat: Graviton.timestampFormat                                                                      // 129\n      });                                                                                                              //\n                                                                                                                       //\n      options.model = function (obj) {                                                                                 // 132\n        var Model = _getModelClass(obj, options);                                                                      // 133\n        return new Model(collection, obj);                                                                             // 134\n      };                                                                                                               //\n                                                                                                                       //\n      var collection;                                                                                                  // 137\n                                                                                                                       //\n      if (collectionName === 'users') {                                                                                // 139\n        collection = Meteor.users;                                                                                     // 140\n      } else {                                                                                                         //\n        var colName = options.persist ? collectionName : null;                                                         // 142\n                                                                                                                       //\n        collection = new Mongo.Collection(colName, {                                                                   // 144\n          transform: options.model                                                                                     // 145\n        });                                                                                                            //\n                                                                                                                       //\n        // uses collection-hooks package                                                                               //\n        if (Meteor.isServer && options.timestamps && collection.before) {                                              // 141\n          collection.before.insert(function (userId, doc) {                                                            // 150\n            var now = options.timestampFormat == 'number' ? +new Date() : new Date();                                  // 151\n            doc.createdAt = now;                                                                                       // 152\n            doc.updatedAt = now;                                                                                       // 153\n          });                                                                                                          //\n          collection.before.update(function (userId, doc, fieldNames, modifier, options) {                             // 155\n            var now = options.timestampFormat == 'number' ? +new Date() : new Date();                                  // 156\n            modifier.$set = modifier.$set || {};                                                                       // 157\n            modifier.$set.updatedAt = now;                                                                             // 158\n          });                                                                                                          //\n        }                                                                                                              //\n      }                                                                                                                //\n                                                                                                                       //\n      if (options.registerCollection) {                                                                                // 163\n        this._collections[collectionName] = collection;                                                                // 164\n      }                                                                                                                //\n      collection._graviton = options;                                                                                  // 166\n                                                                                                                       //\n      return collection;                                                                                               // 168\n    }                                                                                                                  //\n                                                                                                                       //\n    return define;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Graviton.registerCollection = function () {                                                                          // 1\n    function registerCollection(collection) {                                                                          //\n      if (collection && collection instanceof Mongo.Collection && collection._name) this._collections[collection._name] = collection;\n    }                                                                                                                  //\n                                                                                                                       //\n    return registerCollection;                                                                                         //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return Graviton;                                                                                                     //\n}();                                                                                                                   //\n                                                                                                                       //\n// alias                                                                                                               //\nGraviton.defineCollection = Graviton.define;                                                                           // 178\n                                                                                                                       //\n_.extend(Graviton, {                                                                                                   // 180\n  MongoQuery: MongoQuery,                                                                                              // 181\n  MongoModifier: MongoModifier,                                                                                        // 182\n  Model: Model,                                                                                                        // 183\n  Relation: Relation,                                                                                                  // 184\n  timestampFormat: 'date', // set to 'number' for backwards compatibilty with old versions                             // 185\n  _collections: {}                                                                                                     // 186\n});                                                                                                                    //\n                                                                                                                       //\n// return model class given options                                                                                    //\nvar _getModelClass = function _getModelClass(obj, options) {                                                           // 191\n  if (_.isFunction(options.modelCls)) return options.modelCls;                                                         // 192\n  if (_.isObject(options.modelCls)) {                                                                                  // 193\n    var type = (options.typeAttribute ? obj[options.typeAttribute] : obj._type) || options.defaultType;                // 194\n    if (type) {                                                                                                        // 195\n      if (!options.modelCls[type]) throw new Error(\"Model class for type '\" + type + \"' was not found. Can't build model.\");\n      return options.modelCls[type];                                                                                   // 197\n    }                                                                                                                  //\n  }                                                                                                                    //\n  return Graviton.Model;                                                                                               // 200\n};                                                                                                                     //\n                                                                                                                       //\n/**                                                                                                                    //\n *                                                                                                                     //\n * Mongo.Collection.prototype                                                                                          //\n *                                                                                                                     //\n */                                                                                                                    //\n                                                                                                                       //\n// all() convenience method                                                                                            //\nMongo.Collection.prototype.all = function () {                                                                         // 210\n  return this.find({}).fetch();                                                                                        // 211\n};                                                                                                                     //\n                                                                                                                       //\n// build an instance of this collections model type but do not save it to the db                                       //\n// returns the built model.                                                                                            //\nMongo.Collection.prototype.build = function (obj) {                                                                    // 216\n  if (!_.isObject(obj)) obj = {};                                                                                      // 217\n  var mdl = this._graviton.model(obj);                                                                                 // 218\n  if (obj._id) {                                                                                                       // 219\n    mdl._id = obj._id;                                                                                                 // 220\n  }                                                                                                                    //\n  mdl._collection = this; // keep the collection this model came out of                                                // 222\n  return mdl;                                                                                                          // 216\n};                                                                                                                     //\n                                                                                                                       //\n// does an insert but builds a model first, returns the model instead of an id                                         //\nMongo.Collection.prototype.create = function (obj, callback) {                                                         // 227\n  var model = this.build(obj);                                                                                         // 228\n  if (callback) {                                                                                                      // 229\n    model.setId(this.insert(model.attributes, function (err) {                                                         // 230\n      callback(err, model);                                                                                            // 231\n    }));                                                                                                               //\n  } else {                                                                                                             //\n    model.setId(this.insert(model.attributes));                                                                        // 234\n  }                                                                                                                    //\n  return model; // model will have an _id even if this is called with a callback                                       // 236\n};                                                                                                                     // 227\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/emmerge:graviton/lib/mongo-query.js\");\nrequire(\"./node_modules/meteor/emmerge:graviton/lib/relations.js\");\nrequire(\"./node_modules/meteor/emmerge:graviton/lib/model.js\");\nrequire(\"./node_modules/meteor/emmerge:graviton/graviton.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['emmerge:graviton'] = {}, {\n  Graviton: Graviton\n});\n\n})();\n","servePath":"/packages/emmerge_graviton.js","sourceMap":{"version":3,"sources":["/packages/emmerge:graviton/lib/mongo-query.js","/packages/emmerge:graviton/lib/relations.js","/packages/emmerge:graviton/lib/model.js","/packages/emmerge:graviton/graviton.js"],"names":[],"mappings":"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","file":"/packages/emmerge_graviton.js","sourcesContent":["// simple linked-list used to flatten complex object trees\nclass Link {\n  constructor(key, parent) {\n    this.result = (parent && parent.result) || {};\n    this.parent = parent;\n    this.key = key;\n  }\n\n  // traverse up the tree and build a dot-delimited string\n  chainKey() {\n    var links = [this.key];\n    var parent = this.parent;\n    while(parent) {\n      if (parent.key)\n        links.unshift(parent.key);\n      parent = parent.parent;\n    }\n    return links.join('.');\n  }\n\n  // take an object of any depth and return an object with only one level\n  // build linked-lists by traversing object tree\n  flattenObject(obj) {\n    if (!_.isObject(obj)) {\n      // found a leaf, save the key/value in result\n      let key = this.chainKey();\n      this.result[key] = obj;\n      return;\n    }\n    for (let key of Object.keys(obj)) {\n      new Link(key, this).flattenObject(obj[key]);\n    }\n    return this.result;\n  }\n}\n\nconst updateOperators = [\n  '$set',\n  '$unset',\n  '$addToSet',\n  '$push',\n  '$pull',\n  '$pop',\n  '$inc'\n];\n\nfunction _keysOverlap(a, b) {\n  if (a === b) return false;\n  return (_.first(a.split('.')) === _.first(b.split('.')));\n}\n\n\n// extend two flat objects but discard keys that are contained within another\nfunction _mongoExtend(objA, objB) {\n  for (let keyB of Object.keys(objB)) {\n    for (let keyA of Object.keys(objA)) {\n      if (MongoModifier.keysConflict(keyB, keyA)) {\n        throw new Error(\"Cannot apply this modification because it conflicts with unsaved ones. Please save first or re-write update.\");\n      }\n    }\n  }\n  return _.extend(objA, objB);\n}\n\nMongoModifier = class MongoModifier {\n\n  static flattenObject(keyOrObj, value) {\n    if (_.isString(keyOrObj)) {\n      return {[keyOrObj]: value};\n    } else\n    if (_.isObject(keyOrObj)) {\n      return new Link().flattenObject(keyOrObj);\n    }\n  }\n\n  // is one key fully-contained in the other?\n  static keysConflict(a, b) {\n    if (a === b) return false;\n    var arrA = a.split('.');\n    var arrB = b.split('.');\n    if (arrA.length === arrB.length) return false;\n    do {\n      if (arrA.shift() !== arrB.shift()) {\n        return false;\n      }\n    } while (arrA.length && arrB.length);\n    return true;\n  }\n\n  constructor(defaults = {}) {\n    for (let type of updateOperators) {\n      this[type] = defaults[type] || {};\n    }\n  }\n\n  reset() {\n    for (let type of updateOperators) {\n      this[type] = {};\n    }\n  }\n\n  modObject() {\n    var mod = {};\n    for (let type of updateOperators) {\n      if (!_.isEmpty(this[type])) {\n        mod[type] = this[type];\n      }\n    }\n    return mod;\n  }\n\n  // merge a mongo update statement into the modifier\n  mergeUpdate(mongoUpdate) {\n    for (let type of updateOperators) {\n      if (_.isObject(mongoUpdate[type])) {\n        let obj = MongoModifier.flattenObject(mongoUpdate[type]);\n        _mongoExtend(this[type], obj);\n      }\n    }\n    return this;\n  }\n\n  set(keyOrObj, value) {\n    var obj = MongoModifier.flattenObject(keyOrObj, value);\n    _mongoExtend(this.$set, obj);\n    return {$set: obj};\n  }\n\n  unset(keyOrObj) {\n    var obj = MongoModifier.flattenObject(keyOrObj, \"\");\n    _mongoExtend(this.$unset, obj);\n    return {$unset: obj};\n  }\n\n  addToSet(keyOrObj, value) {\n    var obj = MongoModifier.flattenObject(keyOrObj, value);\n    _mongoExtend(this.$addToSet, obj);\n    return {$addToSet: obj};\n  }\n\n  push(keyOrObj, value) {\n    var obj = MongoModifier.flattenObject(keyOrObj, value);\n    _mongoExtend(this.$push, obj);\n    return {$push: obj};\n  }\n\n  pull(keyOrObj, value) {\n    var obj = MongoModifier.flattenObject(keyOrObj, value);\n    _mongoExtend(this.$pull, obj);\n    return {$pull: obj};\n  }\n\n  inc(keyOrObj, value = 1) {\n    var obj = MongoModifier.flattenObject(keyOrObj, value);\n    _mongoExtend(this.$inc, obj);\n    return {$inc: obj};\n  }\n\n  pop(keyOrObj) {\n    var obj = MongoModifier.flattenObject(keyOrObj, 1);\n    _mongoExtend(this.$pop, obj);\n    return {$pop: obj};\n  }\n\n  shift(keyOrObj) {\n    var obj = MongoModifier.flattenObject(keyOrObj, -1);\n    _mongoExtend(this.$pop, obj);\n    return {$pop: obj};\n  }\n};\n\n/**\n * A MongoModifier with a collection\n * Provides methods for interacting with a collection via a MongoModifier\n * Contained by models and base class for many relations\n */\nMongoQuery = class MongoQuery extends MongoModifier {\n\n  constructor(collection, selector = {}, modifier = {}, options = {}) {\n    super(modifier);\n    this.collection = collection;\n    this.options = options;\n    this._selector = selector;\n  }\n\n  get selector() {\n    return this._selector;\n  }\n\n  set selector(val) {\n    this._selector = val;\n  }\n\n  find(selector = {}, options = {}) {\n    _.defaults(options, this.options);\n    _.extend(selector, this.selector);\n    return this.collection.find(selector, options);\n  }\n\n  findOne(selector = {}, options = {}) {\n    _.defaults(options, this.options);\n    _.extend(selector, this.selector);\n    return this.collection.findOne(selector, options);\n  }\n\n  and(mongoQuery) {\n    if (mongoQuery.collection !== this.collection) {\n      throw new Error(\"Cannot combine mongo queries with different collections.\");\n    }\n    var selector;\n    if (_keysHaveDollars(mongoQuery._selector) || _keysHaveDollars(this._selector)) {\n      selector = {$and: [this._selector, mongoQuery._selector]};\n    } else {\n      selector = _.extend({}, this._selector, mongoQuery._selector);\n    }\n    return new MongoQuery(this.collection, selector);\n  }\n\n  or(mongoQuery) {\n    if (mongoQuery.collection !== this.collection) {\n      throw new Error(\"Cannot combine mongo queries with different collections.\");\n    }\n    var selector;\n    if (Object.keys(this._selector).length === 1 && this._selector.$or) {\n      selector = EJSON.clone(this._selector);\n      selector.$or.push(mongoQuery._selector);\n    } else {\n      selector = {$or: [this._selector, mongoQuery._selector]};\n    }\n    return new MongoQuery(this.collection, selector);\n  }\n\n  all(options = {}) {\n    _.defaults(options, this.options);\n    return this.collection.find({}, options).fetch();\n  }\n\n  // apply this modifier to an object\n  applyModifier(obj = {}) {\n    LocalCollection._modify(obj, this.modObject());\n    return obj;\n  }\n\n  insert(attributes = {}, callback = undefined) {\n    attributes._id = this.collection.insert(attributes, callback);\n    return attributes._id;\n  }\n\n  create(attributes = {}, callback = undefined) {\n    if (this.collection.create) {\n      return this.collection.create(attributes, callback);\n    }\n  }\n\n  update(selector = {}, options = {}, callback = undefined) {\n    _.defaults(options, this.options);\n    _.extend(selector, this.selector);\n    var mod = this.modObject();\n    if (!_.isEmpty(mod)) {\n      return this.collection.update(selector, this.modObject(), options, callback);\n    }\n  }\n\n  remove(selector = {}, options = {}, callback = undefined) {\n    _.defaults(options, this.options);\n    _.extend(selector, this.selector);\n    return this.collection.remove(selector, options, callback);\n  }\n};\n\nfunction _keysHaveDollars(obj) {\n  for (var key in Object.keys(obj)) {\n    if (key.substr(0, 1) === '$') {\n      return true;\n    }\n  }\n  return false;\n}\n","function BelongsTo(model) {\n  return () => {\n    return Graviton.getCollection(this).findOne({\n      _id: model.get(this.field)\n    });\n  };\n}\n\nfunction HasOne(model) {\n  return () => {\n    return Graviton.getCollection(this).findOne({\n      [this.foreignKey]: model._id\n    });\n  };\n}\n\nconst relationGenerators = {\n  belongsTo: BelongsTo,\n  hasOne: HasOne,\n  hasMany: function(mdl) { return new HasMany(mdl, this); },\n  belongsToMany: function(mdl) { return new BelongsToMany(mdl, this); },\n  manyToMany: function(mdl) { return new ManyToMany(mdl, this); },\n  hasAndBelongsToMany: function(mdl) { return new HasAndBelongsToMany(mdl, this); },\n  embed: function(mdl) { return new Embedded(mdl, this); }\n};\nrelationGenerators.embeds = relationGenerators.embed;\nrelationGenerators.embedsMany = relationGenerators.embed;\n\nRelation = class Relation extends MongoQuery {\n  constructor(model, config) {\n    super(Graviton.getCollection(config));\n    this.model = model;\n    this.config = config;\n  }\n\n  get field() {\n    return this.config.field || '_id';\n  }\n\n  get fieldValue() {\n    return this.model.get(this.field);\n  }\n\n  get foreignKey() {\n    return this.config.foreignKey || '_id';\n  }\n\n  static getGenerator(type) {\n    return relationGenerators[type];\n  }\n\n  static supportedTypes() {\n    return Object.keys(relationGenerators);\n  }\n};\n\n// array on this side of the association\nclass BelongsToMany extends Relation {\n  get selector() {\n    return {[this.field]: {$in: this.fieldValue}};\n  }\n\n  add(modelOrAttrs) {\n    var related = _getModel.call(this, modelOrAttrs);\n    this.model.addToSet(this.field, related.get(this.foreignKey)).save();\n    return related;\n  }\n}\n\n// foreign key\nclass HasMany extends Relation {\n  get selector() {\n    return {[this.foreignKey]: this.fieldValue};\n  }\n\n  add(modelOrAttrs) {\n    var related = _getModel.call(this, modelOrAttrs);\n    related.set(this.foreignKey, this.fieldValue).save();\n    return related;\n  }\n}\n\n// array on foreign side of relation\nclass HasAndBelongsToMany extends Relation {\n  get selector() {\n    return {[this.foreignKey]: this.fieldValue};\n  }\n\n  add(modelOrAttrs) {\n    var related = _getModel.call(this, modelOrAttrs);\n    related.addToSet(this.foreignKey, this.fieldValue).save();\n    return related;\n  }\n}\n\n// array on both sides of relation\nclass ManyToMany extends Relation {\n  get selector() {\n    return {[this.foreignKey]: {$in: this.fieldValue}};\n  }\n\n  add(modelOrAttrs, commonValue) {\n    var related = _getModel.call(this, modelOrAttrs);\n    this.model.addToSet(this.field, commonValue).save();\n    related.addToSet(this.foreignKey, commonValue).save();\n    return related;\n  }\n}\n\nfunction _getModel(modelOrAttrs) {\n  if (modelOrAttrs instanceof Graviton.Model) {\n    return modelOrAttrs;\n  } else {\n    return this.collection.build(modelOrAttrs);\n  }\n}\n\nclass Embedded {\n  constructor(model, config) {\n    this.collection = Graviton.getCollection(config);\n    this.model = model;\n    this.config = config;\n  }\n\n  get(index) {\n    var value = this.model.get(this.config.relationName);\n    if (_.isEmpty(value)) return value;\n\n    if (_.isArray(value)) {\n      if (!_.isUndefined(index)) {\n        value = value[index];\n        value = this.collection.build(value);\n      } else {\n        value = _.map(value, (obj) => {\n          return  this.collection.build(obj);\n        });\n      }\n    } else {\n      value = this.collection.build(value);\n    }\n    return value;\n  }\n}\n","Model = class Model {\n  constructor(collection, obj) {\n    if (!(collection instanceof Mongo.Collection))\n      throw new Error(\"Models must be instantiated with a Mongo.Collection\");\n\n    if (!_.isObject(obj) || _.isFunction(obj)) {\n      obj = {};\n    } else {\n      obj = _deepClone(obj);\n    }\n\n    if (obj._id) {\n      this._id = obj._id;\n    }\n\n    this._collection = collection;\n    this.attributes = _.defaults(obj, this.constructor._defaults);\n\n    for (let relName of Object.keys(this.constructor._relations)) {\n      let rel = this.constructor._relations[relName];\n      this[relName] = rel.generate(this);\n    }\n\n    this._saveQuery = new MongoQuery(collection);\n  }\n  /**\n   * If merge == true, override and add to any inherited relations\n   * Otherwise, completely re-define the relations for this class\n   * Pass an empty object to clear all inherited relations\n   */\n  static relations(relationsObj, merge = false) {\n    relationsObj = _deepClone(relationsObj);\n    var relations = {};\n    for (let relationType of Object.keys(relationsObj)) {\n      let generator = Relation.getGenerator(relationType);\n      if (!generator) {\n        continue;\n      }\n      for (let relationName of Object.keys(relationsObj[relationType])) {\n        if (relations[relationName]) {\n          throw new Error(\"Trying to add a relation that already exists:\", relationName);\n        }\n        let cfg = relationsObj[relationType][relationName];\n        cfg.type = relationType;\n        cfg.relationName = relationName;\n        cfg.generate = generator;\n        relations[relationName] = cfg;\n      }\n    }\n    if (merge) {\n      _.extend(this._relations, relations);\n    } else {\n      this._relations = relations;\n    }\n    return this;\n  }\n\n  /**\n   * If merge == true, override and add to any inherited defaults\n   * Otherwise, completely re-define the defaults for this class\n   * Pass an empty object to clear all inherited defaults\n   * Must be serializable\n   */\n  static defaults(defaultsObj, merge = false) {\n    var defaults = _deepClone(defaultsObj);\n    if (merge) {\n      this._defaults = _.extend({}, this._defaults, defaults);\n    } else {\n      this._defaults = defaults;\n    }\n    return this;\n  }\n\n  /**\n   * Add another class's prototype, relations and defaults\n   * Don't override anthing defined on this class\n   */\n  static mixin(modelClass) {\n    _.defaults(this.prototype, modelClass.prototype);\n    _.defaults(this._defaults, modelClass._defaults);\n    for (let relName of Object.keys(modelClass._relations)) {\n      if (!this._relations[relName]) {\n        this._relations[relName] = modelClass._relations[relName];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Legacy API support\n   */\n  static extend(modelClassOrOptions, proto) {\n    var Mdl;\n    if (modelClassOrOptions.prototype instanceof Graviton.Model) {\n      Mdl = class extends this { }.mixin(modelClassOrOptions);\n    } else {\n      var BaseClass = _modelClassFromOptions(this, modelClassOrOptions, proto);\n      Mdl = class extends BaseClass { };\n    }\n    return Mdl;\n  }\n\n  // alter the attributes using dot-delimited key\n  _setProperty(key, value) {\n    return Graviton.setProperty(this.attributes, key, value);\n  }\n\n  setId(id) {\n    this._id = id;\n    this._setProperty('_id', id);\n    return this;\n  }\n\n  // take a mongo update statement and modify the model attributes with it\n  // doesn't alter pending save\n  _applyUpdate(update) {\n    LocalCollection._modify(this.attributes, update);\n  }\n\n  get(key) {\n    return _deepClone(Graviton.getProperty(this.attributes, key));\n  }\n\n  set(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.set(keyOrObj, value));\n    return this;\n  }\n\n  unset(keyOrObj) {\n    this._applyUpdate(this._saveQuery.unset(keyOrObj));\n    return this;\n  }\n\n  inc(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.inc(keyOrObj, value));\n    return this;\n  }\n\n  push(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.push(keyOrObj, value));\n    return this;\n  }\n\n  pull(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.unset(keyOrObj, value));\n    return this;\n  }\n\n  addToSet(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.addToSet(keyOrObj, value));\n    return this;\n  }\n\n  pop(keyOrObj) {\n    this._applyUpdate(this._saveQuery.pop(keyOrObj));\n    return this;\n  }\n\n  shift(keyOrObj) {\n    this._applyUpdate(this._saveQuery.shift(keyOrObj));\n    return this;\n  }\n\n  // given a mongo update statement, make the modification to\n  // the model's attributes and add to pending modifications to save\n  modify(update) {\n    this._saveQuery.mergeUpdate(update);\n    this._applyUpdate(update);\n    return this;\n  }\n\n  update(update, callback) {\n    if (!this._id) {\n      throw new Error(\"Can't update model. It has no _id.\");\n    }\n    this.modify(update);\n    this.save(callback);\n  }\n\n  save(callback) {\n    if (this._id) {\n      this._saveQuery.selector = {_id: this._id};\n      _performUpdate.call(this, 'update', callback);\n    } else {\n      this._id = _performUpdate.call(this, 'insert', this.attributes, callback);\n    }\n    return this;\n  }\n\n  remove(callback) {\n    if (this._id) {\n      this._saveQuery.selector = {_id: this._id};\n      return _performUpdate.call(this, 'remove', callback);\n    }\n  }\n};\nModel._relations = [];\nModel._defaults = {};\n\n// handle async vs. sync\nfunction _performUpdate(...args) {\n  var method = args.shift();\n  var callback = (_.isFunction(_.last(args))) ? args.pop() : undefined;\n\n  if (callback) {\n    this._saveQuery[method](...args, (err) => {\n      if (!err) {\n        this._saveQuery.reset();\n      }\n      callback.apply(this, arguments);\n    });\n  } else {\n    var result = this._saveQuery[method](...args);\n    this._saveQuery.reset();\n    return result;\n  }\n}\n\nfunction _deepClone(obj) {\n  if (!_.isObject(obj)) return obj;\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction _modelClassFromOptions(BaseClass, options = {}, proto = {}) {\n  var Mdl = class extends BaseClass {\n    constructor() {\n      super(...arguments);\n      if (options.initialize) {\n        options.initialize.apply(this, arguments);\n      }\n    }\n  };\n  if (options.defaults) {\n    Mdl.defaults(options.defaults, true);\n  }\n  if (options.relations) {\n    Mdl.relations(options.relations, true);\n  } else {\n    let relations = _.pick(options, ...Graviton.Relation.supportedTypes());\n    if (!_.isEmpty(relations)) {\n      Mdl.relations(relations);\n    }\n  }\n  _.extend(Mdl.prototype, proto);\n  return Mdl;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// constructor used by collection transform functions\n// Model classes are not tied to any particular collection\n// model instances have a reference to the collection they came from\n// relations are also defined with collections and added to models when they are instantiated\nOldModel = function(collection, obj) {\n  if (!(collection instanceof Mongo.Collection))\n    throw new Error(\"Models must be instantiated with a Mongo.Collection\");\n\n  if (!_.isObject(obj) || _.isFunction(obj))\n    obj = {};\n\n  this._collection = collection;\n\n  this.attributes = obj;\n  this._pendingMods = []; // fill with modifiers to run when save is called\n\n  // new Gravition.Model will instantiate without any options\n  // use OldModel.extend to create a constructor with defaults/initialize\n  _.defaults(this, {\n    _options: {}\n  });\n\n  var self = this;\n\n  // new way of adding relations\n  _.each(this._options.relations, function(relationsOfType, relationType) {\n    _.each(relationsOfType, function(cfg, relationName) {\n      var relCls = ManyRelation._types[relationType];\n      if (relCls) {\n        cfg.relationName = relationName;\n        self[relationName] = new relCls(self, cfg);\n      }\n    });\n  });\n\n  // old way of adding relations\n  var relations = this._collection._graviton.relations;\n\n  _.each(relations.hasMany, function(cfg, name) {\n    self[name] = new HasMany(self, cfg);\n  });\n  _.each(relations.hasOne, function(cfg, name) {\n    self[name] = colHasOne(self, cfg);\n  });\n  _.each(relations.belongsTo, function(cfg, name) {\n    self[name] = colBelongsTo(self, cfg, name);\n  });\n  _.each(relations.belongsToMany, function(cfg, name) {\n    self[name] = new BelongsToMany(self, cfg);\n  });\n  _.each(relations.embeds, function(cfg, name) {\n    self[name] = colEmbeds(self, cfg, name);\n  });\n  _.each(relations.embedsMany, function(cfg, name) {\n    self[name] = new EmbeddedModels(self, cfg, name);\n  });\n\n  _.defaults(this.attributes, this._options.defaults);\n\n  this.constructor.initialize.apply(this, arguments);\n};\n\nisModel = function(obj) {\n  return (obj instanceof Graviton.Model || Graviton.OldModel.prototype.isPrototypeOf(obj));\n};\n\nvar addSingularRelations = function(proto, relations) {\n  _.each(relations, function(relationsOfType, relationType) {\n    _.each(relationsOfType, function(cfg, relationName) {\n      var relFn = Relation._types[relationType];\n      if (relFn) {\n        cfg.relationName = relationName;\n        proto[relationName] = relFn(cfg);\n      }\n    });\n  });\n};\n\n// no-op initialize\nOldModel.initialize = function() {};\n\n// for creating a custom class to use for model transforms\n// options:\n// * initialize - call when instances are created\n// * defaults - default values for attributes\nOldModel.extend = function(options, proto) {\n  var self = this;\n\n  options = options || {};\n\n  // If we are extending another model constructor we will have stored the options from that model.\n  // Use those options and use its prototype.\n  if (options._fullOptions) {\n    proto = options.prototype;\n    options = options._fullOptions;\n  }\n\n  proto = proto || {};\n\n  var relations = _.clone(this.relations) || {};\n\n  _.each(relations, function(rel, relName) {\n    relations[relName] = _.extend({}, rel, options[relName]);\n  });\n  _.defaults(relations, _.pick(options, Relation.typeNames()));\n\n  var opts = {\n    defaults: _.extend({}, this.defaults, options.defaults),\n    initialize: options.initialize || function() {}, // if no init is supplied, use a no-op\n    relations: relations\n  };\n\n  var Mdl = function(collection, obj) {\n    // we want any arbitrary options used to extend\n    this._options = _.extend(opts, _.omit(options, 'defaults', 'initialize', 'relations'));\n    OldModel.call(this, collection, obj);\n  };\n\n  // store the full options object (including the 'defaults', 'initialize', 'relations') for use if we ever extend Mdl\n  Mdl._fullOptions = options;\n\n  Mdl.relations = opts.relations;\n  Mdl.initialize = opts.initialize;\n  Mdl.defaults = opts.defaults;\n  Mdl.extend = this.extend;\n  Mdl.prototype = Object.create(this.prototype);\n  Mdl.prototype.constructor = Mdl;\n\n  addSingularRelations(Mdl.prototype, opts.relations);\n\n  _.extend(Mdl.prototype, proto);\n\n  return Mdl;\n};\n\nOldModel.prototype.get = function(key) {\n  return Graviton.getProperty(this.attributes, key);\n};\n\n// function _deepClone(obj) {\n//   if (_.isObject(obj)) {\n//     if (obj.constructor === Object) {\n//       var clone = {};\n//       for (var k in obj) {\n//         clone[k] = _deepClone(obj[k]);\n//       }\n//       return clone;\n//     } else {\n//       return obj;\n//     }\n//   }\n//   return obj;\n// }\n\n// * thing - string or object\n// * value - anything serializable. isn't used if thing is an object\nOldModel.prototype.set = function(thing, value) {\n  if (_.isObject(thing)) {\n    thing = _deepClone(thing);\n    for (var k in thing) {\n      this._setProperty(k, thing[k]);\n    }\n    this._pendingMods.push({$set: thing});\n    return this;\n  }\n  // else\n  value = _deepClone(value);\n  this._setProperty(thing, value);\n  var obj = {};\n  obj[thing] = value;\n  this._pendingMods.push({$set: obj});\n  return this;\n};\n\n// Unset a single or set of keys in this object:\n//  unset(nameOfKey)\n//  unset(nameOfKey1, nameOfKey2, ...)\n//  unset({key1:'', key2:'', ...})\nOldModel.prototype.unset = function() {\n  var keysToUnset;\n  if (_.isObject(arguments[0]))\n    keysToUnset = _.keys(arguments[0]);\n  else\n    keysToUnset = Array.prototype.slice.call(arguments);\n\n  // Remove the property, then push the unset mod:\n  keysToUnset.forEach(function(key) { this._unsetProperty(key); }, this);\n  var mods = _.object( _.map(keysToUnset, function(k){ return [k,'']; }) );\n  this._pendingMods.push({$unset: mods});\n  return this;\n};\n\n/**\n *\n * @param thing {String} or {Object}\n * @param increment {number}\n * @returns {Model} updated model\n */\nOldModel.prototype.inc = function(thing, increment) {\n  var val;\n  if (_.isObject(thing)) {\n    if (_.isObject(thing)) {\n      for (var k in thing) {\n        val = this.get(k) || 0;\n        this._setProperty(k, val + thing[k]);\n      }\n      this._pendingMods.push({$inc: thing});\n      return this;\n    }\n  }\n  // else\n  val = this.get(thing) || 0;\n  this._setProperty(thing, val + increment);\n  var incObj = {};\n  incObj[thing] = increment;\n  var $inc = {$inc: incObj};\n  this._pendingMods.push($inc);\n  return this;\n};\n\n/**\n * _pushProperty\n *\n * Takes an object or array value and pushes it to the model property found using `key`.\n * Like Mongo $push, if there is no property for key, create a new array field using the value.\n * Like Mongo $push, fails if the property found for the key is not an array.\n * Returns an object to be used in the Mongo `$push` operation.\n *  - In the case of an {Object} value this is simply just the value.\n *  - In the case of an {Array} value it will be an object containing an `$each` expression.\n *\n * @param key {String} the property key (must have an array value).\n * @param value {Array} or {Object}\n * @returns {Object}\n * @private\n */\nOldModel.prototype._pushProperty = function(key, value) {\n  var array = this.get(key);\n  if (array && !_.isArray(array))\n    throw new Error(\"Trying to push a value onto a non-array property\");\n  if (_.isArray(value)) {\n    this._setProperty(key, array.concat(value));\n    return {$each: value};\n  } else {\n    if (!array)\n      this._setProperty(key, [value]);\n    else\n      array.push(value);\n    return value;\n  }\n};\n\nOldModel.prototype.push = function(thing, value) {\n  var push;\n  if (_.isObject(thing)) {\n    for (var k in thing) {\n      thing[k] = this._pushProperty(k, thing[k]);\n    }\n    push = thing;\n  } else {\n    value = this._pushProperty(thing, value);\n    push = {};\n    push[thing] = value;\n  }\n  this._pendingMods.push({$push: push});\n  return this;\n};\n\n/**\n * _addToSetProperty\n *\n * Takes an object or array value and adds it to the set for the model property found using `key`.\n * Like Mongo $addToSet, if there is no property for key, create a new array field using the value.\n * Like Mongo $addToSet, fails if the property found for the key is not an array.\n * Returns an object to be used in the Mongo `$addToSet` operation.\n *  - In the case of an {Object} value this is simply just the value.\n *  - In the case of an {Array} value it will be an object containing an `$each` expression.\n *\n *\n * @param key {String} the property key (must have an array value).\n * @param value {Array} or {Object}\n * @returns {Object}\n * @private\n */\nOldModel.prototype._addToSetProperty = function(key, value) {\n  var array = this.get(key);\n  if (array !== undefined && !_.isArray(array))\n    throw new Error(\"Trying to addToSet on a non-array property\");\n  if (_.isArray(value)) {\n    if (!array)\n      this._setProperty(key, value);\n    // this._setProperty(key, _.union(array || [], value))\n    // because compacts the original array to a unique set, Mongo $addToSet does not change the existing array\n    else\n      _.each(value, function(item) {\n        if (!_.contains(array, item))\n          array.push(item);\n      });\n    return {$each: value};\n  } else {\n    if (!array)\n      this._setProperty(key, [value]);\n    else if (!_.contains(array, value))\n      array.push(value);\n    return value;\n  }\n};\n\nOldModel.prototype.addToSet = function(thing, value) {\n  var addToSet;\n  if (_.isObject(thing)) {\n    for (var k in thing) {\n      thing[k] = this._addToSetProperty(k, thing[k]);\n    }\n    addToSet = thing;\n  } else {\n    value = this._addToSetProperty(thing, value);\n    addToSet = {};\n    addToSet[thing] = value;\n  }\n  this._pendingMods.push({$addToSet: addToSet});\n};\n\nOldModel.prototype._popProperty = function(key, first) {\n  var array = this.get(key);\n  if (!_.isArray(array)) throw new Error(\"Trying to pop a value from a non-array\");\n  if (first) {\n    return array.shift();\n  } else {\n    return array.pop();\n  }\n};\n\nOldModel.prototype._applyPop = function(keys, first) {\n  var pop = {};\n  for (var i in keys) {\n    pop[keys[i]] = (first) ? -1 : 1;\n    this._popProperty(keys[i], first);\n  }\n  this._pendingMods.push({$pop: pop});\n};\n\nOldModel.prototype.pop = function() {\n  this._applyPop(_.toArray(arguments));\n};\n\nOldModel.prototype.shift = function(key) {\n  this._applyPop(_.toArray(arguments), true);\n};\n\nOldModel.prototype._setProperty = function(key, value) {\n  Graviton.setProperty(this.attributes, key, value);\n};\n\nOldModel.prototype._unsetProperty = function(key) {\n  Graviton.unsetProperty(this.attributes, key);\n};\n\nOldModel.prototype.setId = function(id) {\n  this._id = id;\n  this._setProperty('_id', id);\n};\n\n// deep clone of attributes\nOldModel.prototype.plain = function() {\n  var str = JSON.stringify(this.attributes);\n  return JSON.parse(str);\n};\n\n// deep equals of attributes\n// designed to be overridden by subclasses\n// used by indexOf on relations\nOldModel.prototype.equals = function(obj) {\n  if (Graviton.isModel(obj)) obj = obj.attributes;\n  return _.isEqual(obj, this.attributes);\n};\n\n/**\n * Insert a doc if it has no _id. If it already had an _id, do nothing.\n * @param callback\n * @returns return new id if new doc was inserted, `false` if no doc was inserted\n */\nOldModel.prototype.persist = function(callback) {\n  if (!this._id) {\n    var id = this._collection.insert.apply(this._collection, _.compact([this.attributes, callback]));\n    this.setId(id);\n    this._pendingMods = [];\n    return this._id;\n  }\n  if (callback) callback(null, false);\n  return false;\n};\n\n// applies a mongo modifier to the document\n// does not update the database until you call save\nOldModel.prototype.modify = function(modifier) {\n  if (! _.isObject(modifier))\n    throw new Error(\"Modifier must be an object.\");\n  LocalCollection._modify(this.attributes, modifier);\n  this._pendingMods.push(modifier);\n  return this;\n};\n\n// does a modify with persistence\nOldModel.prototype.update = function(modifier, callback) {\n  var self = this;\n  LocalCollection._modify(this.attributes, modifier);\n\n  if (callback) {\n    this.persist(function(err, id) {\n      if (!err) {\n        self._collection.update(self._id, modifier, callback);\n      } else {\n        callback(err);\n      }\n    });\n  } else {\n    if (!this.persist()) {\n      this._collection.update(this._id, modifier);\n    }\n  }\n  return this;\n};\n\n// insert or execute pending modifiers added with modify\nOldModel.prototype.save = function(callback) {\n  var self = this;\n  if (callback) {\n    this.persist(function(err, id) {\n      if (!err) {\n        var updates = _.map(self._pendingMods, function(mod) {\n          return function(cb) {\n            self._collection.update(self._id, mod, function(err, res) {\n              if (!err) self._pendingMods.shift();\n              cb(err, res);\n            });\n          };\n        });\n        var done = function(err, res) {\n          callback(err, 1);\n        };\n        async.series(updates, done);\n      } else {\n        callback(err);\n      }\n    });\n  } else {\n    if (!this.persist()) {\n      while (this._pendingMods.length > 0) {\n        var mod = this._pendingMods.shift();\n        try {\n          this._collection.update(this._id, mod);\n        }\n        catch (x) {\n          this._pendingMods.unshift(mod);\n          throw x;\n        }\n      }\n    }\n    return this;\n  }\n};\n\nOldModel.prototype.remove = function(callback) {\n\n  var removed_id = this._id;\n  var self = this;\n  var relations;\n\n  // find all the relations so that we can handle cascade options\n  if (this._options.relations) {\n    relations = _.pick(this._options.relations, ['hasMany', 'hasOne']);\n    relations = _.extend(relations.hasMany || {}, relations.hasOne);\n  }\n\n  // before destroying the parent, check for relational restrictions\n  var denyRelations = _.filter(relations, function(relation) {\n    return relation.onRemove === 'deny';\n  });\n  _.each(denyRelations, function(relation) {\n    //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'is on remove deny restricted');\n    //console.log('self[relation.relationName].findOne()',self[relation.relationName].findOne());\n    if (self[relation.relationName].findOne())\n      throw Error('Cannot remove record, relation \\''+relation.relationName+'\\' denies removal if child records exist.');\n  });\n\n  // remove the document from the collection itself\n  if (callback) {\n    this._collection.remove(this._id, function(err, res) {\n      if (!err) self.setId(null);\n      callback(err, res);\n    });\n  } else {\n    this._collection.remove(this._id);\n    this.setId(null);\n  }\n\n  // after destroying the parent, remove or nullify the children based on relational options\n  _.each(relations, function(relation) {\n    self._id = removed_id; //mock up the model like it still exists to allow the relations to work naturally\n\n    if (relation.onRemove == 'cascade') {\n      //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'should onRemove cascade');\n      _.each(self[relation.relationName].all(), function(child) {\n        //console.log('child', relation.collection, 'to delete:', child._id);\n        child.remove();\n      });\n    }\n    else if (relation.onRemove == 'unset') {\n      //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'should remove reference');\n      _.each(self[relation.relationName].all(), function(child) {\n        //console.log('child', relation.collection, 'to remove reference to:', child._id);\n        var updateObj = {};\n        updateObj.$unset = {};\n        updateObj.$unset[relation.foreignKey] = true;\n        child.update(updateObj);\n      });\n    }\n\n    self._id = null; //reset the removed model.\n  });\n\n  return this;\n};\n","Graviton = class Graviton {\n\n  static getCollection(options) {\n    var name;\n    if (_.isString(options)) {\n      name = options;\n    } else\n    if (_.isObject(options)) {\n      name = options.collectionName || options.collection || options.klass || options.relationName;\n    }\n    if (name) {\n      return Graviton._collections[name];\n    }\n  }\n\n  // use a period-delimited string to access a deeply-nested object\n  static getProperty(obj, string) {\n    var arr = string.split(\".\");\n    while (obj && arr.length) {\n      obj = obj[arr.shift()];\n    }\n    if (arr.length === 0) {\n      return obj;\n    }\n  }\n\n  static setProperty(obj, key, val) {\n    if (!key) throw new Error(\"Cannot setProperty with no key specified.\");\n    var arr = key.split(\".\");\n    while (obj && arr.length > 1) {\n      key = arr.shift();\n      if (_.isUndefined(obj[key])) {\n        obj[key] = {};\n      }\n      obj = obj[key];\n    }\n    if (arr.length === 1) {\n      obj[arr[0]] = val;\n      return val;\n    }\n  }\n\n  static unsetProperty(obj, key) {\n    if (!key) throw new Error(\"Cannot unsetProperty with no key specified\");\n    var arr = key.split(\".\");\n    while (obj && arr.length > 1) {\n      key = arr.shift();\n      if (_.isUndefined(obj[key]))\n        return;  // The nested key can't possibly exist, it is already unset\n      obj = obj[key];\n    }\n    if (arr.length == 1) {\n      delete obj[arr[0]];\n      return;\n    }\n  }\n\n  // currently mongo sanitize causes ambiguous / non-unique keys for some inputs such as...\n  // '$#foo' vs '#foo'\n  // 'foo@.bar' vs 'foo.@bar'\n  // 'foo..bar' vs 'foo@bar'\n  // TODO: refactor to make non-ambiguous / unique keys - probably incorporating some other special characters\n  static mongoSanitize(str) {\n    if (/^\\#/.test(str)) {\n      str = '##'+str.substr(1);\n    }\n    if (/^\\$/.test(str)) {\n      str = '#'+str.substr(1);\n    }\n    if (/\\@/.test(str)) {\n      str = str.replace(/\\@/g, '@@');\n    }\n    if (/\\./.test(str)) {\n      str = str.replace(/\\./g, '@');\n    }\n    return str;\n  }\n\n  static reverseMongoSanitize(sanitizedString) {\n    if (_.isString(sanitizedString)) {\n      // first replace all singular @ symbols (in js regex that means @ not followed by @ and proceeded by a the beginning of the string or by @)\n      return sanitizedString.replace(/(^|[^@])@(?!@)/g,'$1.')\n        // then replace @@\n        .replace(/@@/g,'@')\n        // then replace starts with # (not followed by another #)\n        .replace(/^\\#(?!\\#)/,'$')\n        // then replace starts with ##\n        .replace(/^\\#\\#/,'#');\n    }\n  }\n\n  // Helper function to deal with objects which may have keys which are illegal in mongo\n  // 1. Mongo keys cannot start with $\n  // -- convert starts with $ to starts with #\n  // -- also convert starts with # to starts with ## to avoid collisions\n  // 2. Mongo keys cannot contain .\n  // -- convert . to @\n  // -- also convert @ to @@ to avoid collisions\n  static sanitizeKeysForMongo(obj) {\n    var nk;\n    for (var k in obj) {\n      if (_.isObject(obj[k])) Graviton.sanitizeKeysForMongo(obj[k]);\n      nk = Graviton.mongoSanitize(k);\n      if (nk !== k) {\n        obj[nk] = obj[k];\n        delete obj[k];\n      }\n    }\n  }\n\n  // declare new collections of models\n  // options contain the relations etc.\n  static define(collectionName, options = {}) {\n    options = _.pick(options,\n      'persist',            // if false, is backed by a local collection only\n      'modelCls',           // either model constructor or object containing model constructors\n      'defaultType',        // used only when modelCls is an object\n      'typeAttribute',      // attribute to use for type instead of _type\n      'registerCollection', // if true, saves this collection in Gravition._collections[collectionName]\n      'timestamps',         // if true, use collection-hooks (if available) to generate createdAt and updatedAt timestamps\n      'name',               // name of collection, optional\n      'timestampFormat'     // set to 'number' to use old, integer timestamps\n    );\n\n    _.defaults(options, {\n      persist: true,\n      registerCollection: true,\n      timestamps: true,\n      timestampFormat: Graviton.timestampFormat\n    });\n\n    options.model = function(obj) {\n      var Model = _getModelClass(obj, options);\n      return new Model(collection, obj);\n    };\n\n    var collection;\n\n    if (collectionName === 'users') {\n      collection = Meteor.users;\n    } else {\n      var colName = (options.persist) ? collectionName : null;\n\n      collection = new Mongo.Collection(colName, {\n        transform: options.model\n      });\n\n      // uses collection-hooks package\n      if (Meteor.isServer && options.timestamps && collection.before) {\n        collection.before.insert(function(userId, doc) {\n          var now = (options.timestampFormat == 'number') ? +new Date() : new Date();\n          doc.createdAt = now;\n          doc.updatedAt = now;\n        });\n        collection.before.update(function(userId, doc, fieldNames, modifier, options) {\n          var now = (options.timestampFormat == 'number') ? +new Date() : new Date();\n          modifier.$set = modifier.$set || {};\n          modifier.$set.updatedAt = now;\n        });\n      }\n    }\n\n    if (options.registerCollection) {\n      this._collections[collectionName] = collection;\n    }\n    collection._graviton = options;\n\n    return collection;\n  }\n\n  static registerCollection(collection) {\n    if (collection && collection instanceof Mongo.Collection && collection._name)\n      this._collections[collection._name] = collection;\n  }\n};\n\n// alias\nGraviton.defineCollection = Graviton.define;\n\n_.extend(Graviton, {\n  MongoQuery: MongoQuery,\n  MongoModifier: MongoModifier,\n  Model: Model,\n  Relation: Relation,\n  timestampFormat: 'date', // set to 'number' for backwards compatibilty with old versions\n  _collections: {}\n});\n\n\n// return model class given options\nvar _getModelClass = function(obj, options) {\n  if (_.isFunction(options.modelCls)) return options.modelCls;\n  if (_.isObject(options.modelCls)) {\n    var type = ((options.typeAttribute) ? obj[options.typeAttribute] : obj._type) || options.defaultType;\n    if (type) {\n      if (!options.modelCls[type]) throw new Error(\"Model class for type '\"+type+\"' was not found. Can't build model.\");\n      return options.modelCls[type];\n    }\n  }\n  return Graviton.Model;\n};\n\n/**\n *\n * Mongo.Collection.prototype\n *\n */\n\n// all() convenience method\nMongo.Collection.prototype.all = function() {\n  return this.find({}).fetch();\n};\n\n// build an instance of this collections model type but do not save it to the db\n// returns the built model.\nMongo.Collection.prototype.build = function(obj) {\n  if (!_.isObject(obj)) obj = {};\n  var mdl = this._graviton.model(obj);\n  if (obj._id) {\n    mdl._id = obj._id;\n  }\n  mdl._collection = this; // keep the collection this model came out of\n  return mdl;\n};\n\n// does an insert but builds a model first, returns the model instead of an id\nMongo.Collection.prototype.create = function(obj, callback) {\n  var model = this.build(obj);\n  if (callback) {\n    model.setId(this.insert(model.attributes, function(err) {\n      callback(err, model);\n    }));\n  } else {\n    model.setId(this.insert(model.attributes));\n  }\n  return model; // model will have an _id even if this is called with a callback\n};\n"]}}]