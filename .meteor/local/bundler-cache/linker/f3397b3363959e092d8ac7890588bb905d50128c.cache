[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Template = Package.templating.Template;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\nvar DDP = Package['ddp-client'].DDP;\nvar getCaretCoordinates = Package['dandv:caret-position'].getCaretCoordinates;\nvar HTML = Package.htmljs.HTML;\nvar Spacebars = Package.spacebars.Spacebars;\n\n/* Package-scope variables */\nvar __coffeescriptShare, AutocompleteTest;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/mizzao_autocomplete/packages/mizzao_autocomplete.js                                             //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n(function () {                                                                                              // 1\n                                                                                                            // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mizzao:autocomplete/template.inputs.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n                                                                                                                      // 1\nTemplate.__checkName(\"inputAutocomplete\");                                                                            // 2\nTemplate[\"inputAutocomplete\"] = new Template(\"Template.inputAutocomplete\", (function() {                              // 3\n  var view = this;                                                                                                    // 4\n  return [ HTML.INPUT(HTML.Attrs({                                                                                    // 5\n    type: \"text\"                                                                                                      // 6\n  }, function() {                                                                                                     // 7\n    return Spacebars.attrMustache(view.lookup(\"attributes\"));                                                         // 8\n  })), \"\\n    \", Spacebars.include(view.lookupTemplate(\"autocompleteContainer\")) ];                                   // 9\n}));                                                                                                                  // 10\n                                                                                                                      // 11\nTemplate.__checkName(\"textareaAutocomplete\");                                                                         // 12\nTemplate[\"textareaAutocomplete\"] = new Template(\"Template.textareaAutocomplete\", (function() {                        // 13\n  var view = this;                                                                                                    // 14\n  return [ HTML.TEXTAREA(HTML.Attrs(function() {                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"attributes\"));                                                         // 16\n  }, {                                                                                                                // 17\n    value: function() {                                                                                               // 18\n      return Blaze._InOuterTemplateScope(view, function() {                                                           // 19\n        return Spacebars.include(function() {                                                                         // 20\n          return Spacebars.call(view.templateContentBlock);                                                           // 21\n        });                                                                                                           // 22\n      });                                                                                                             // 23\n    }                                                                                                                 // 24\n  })), \"\\n    \", Spacebars.include(view.lookupTemplate(\"autocompleteContainer\")) ];                                   // 25\n}));                                                                                                                  // 26\n                                                                                                                      // 27\nTemplate.__checkName(\"_autocompleteContainer\");                                                                       // 28\nTemplate[\"_autocompleteContainer\"] = new Template(\"Template._autocompleteContainer\", (function() {                    // 29\n  var view = this;                                                                                                    // 30\n  return Blaze.If(function() {                                                                                        // 31\n    return Spacebars.call(view.lookup(\"isShowing\"));                                                                  // 32\n  }, function() {                                                                                                     // 33\n    return [ \"\\n    \", HTML.DIV({                                                                                     // 34\n      \"class\": \"-autocomplete-container\"                                                                              // 35\n    }, \"\\n        \", Blaze.If(function() {                                                                            // 36\n      return Spacebars.call(view.lookup(\"isLoaded\"));                                                                 // 37\n    }, function() {                                                                                                   // 38\n      return [ \"\\n            \", Blaze.Unless(function() {                                                            // 39\n        return Spacebars.call(view.lookup(\"empty\"));                                                                  // 40\n      }, function() {                                                                                                 // 41\n        return [ \"\\n            \", HTML.UL({                                                                          // 42\n          \"class\": \"-autocomplete-list\"                                                                               // 43\n        }, \"\\n                \", Blaze.Each(function() {                                                              // 44\n          return Spacebars.call(view.lookup(\"filteredList\"));                                                         // 45\n        }, function() {                                                                                               // 46\n          return [ \"\\n                \", HTML.LI({                                                                    // 47\n            \"class\": \"-autocomplete-item\"                                                                             // 48\n          }, \"\\n                    \", Spacebars.With(function() {                                                    // 49\n            return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"currentTemplate\"));                               // 50\n          }, function() {                                                                                             // 51\n            return [ \"\\n                        \", Spacebars.With(function() {                                        // 52\n              return Spacebars.call(view.lookup(\"..\"));                                                               // 53\n            }, function() {                                                                                           // 54\n              return [ \"  \\n                            \", Spacebars.include(view.lookupTemplate(\"..\")), \"  \\n                        \" ];\n            }), \"\\n                    \" ];                                                                           // 56\n          }), \"\\n                \"), \"\\n                \" ];                                                          // 57\n        }), \"\\n            \"), \"\\n            \" ];                                                                    // 58\n      }, function() {                                                                                                 // 59\n        return [ \"\\n                \", Spacebars.include(view.lookupTemplate(\"noMatchTemplate\")), \"\\n            \" ]; // 60\n      }), \"\\n        \" ];                                                                                             // 61\n    }, function() {                                                                                                   // 62\n      return [ \"\\n            \", HTML.I(\"loading...\"), \"\\n        \" ];                                                // 63\n    }), \"\\n    \"), \"\\n    \" ];                                                                                        // 64\n  });                                                                                                                 // 65\n}));                                                                                                                  // 66\n                                                                                                                      // 67\nTemplate.__checkName(\"_noMatch\");                                                                                     // 68\nTemplate[\"_noMatch\"] = new Template(\"Template._noMatch\", (function() {                                                // 69\n  var view = this;                                                                                                    // 70\n  return HTML.Raw(\"(<i>no matches</i>)\");                                                                             // 71\n}));                                                                                                                  // 72\n                                                                                                                      // 73\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            // 83\n}).call(this);                                                                                              // 84\n                                                                                                            // 85\n                                                                                                            // 86\n                                                                                                            // 87\n                                                                                                            // 88\n                                                                                                            // 89\n                                                                                                            // 90\n(function () {                                                                                              // 91\n                                                                                                            // 92\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mizzao:autocomplete/autocomplete-client.coffee.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar AutoCompleteRecords, getField, getFindParams, getRegExp, isServerSearch, isWholeField, validateRule,                  \n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };                       // 101\n                                                                                                            // 102\nAutoCompleteRecords = new Mongo.Collection(\"autocompleteRecords\");                                          // 103\n                                                                                                            // 104\nisServerSearch = function(rule) {                                                                           // 105\n  return _.isString(rule.collection);                                                                       // 106\n};                                                                                                          // 107\n                                                                                                            // 108\nvalidateRule = function(rule) {                                                                             // 109\n  if ((rule.subscription != null) && !Match.test(rule.collection, String)) {                                // 110\n    throw new Error(\"Collection name must be specified as string for server-side search\");                  // 111\n  }                                                                                                         // 112\n  if (rule.callback != null) {                                                                              // 113\n    return console.warn(\"autocomplete no longer supports callbacks; use event listeners instead.\");         // 114\n  }                                                                                                         // 115\n};                                                                                                          // 116\n                                                                                                            // 117\nisWholeField = function(rule) {                                                                             // 118\n  return !rule.token;                                                                                       // 119\n};                                                                                                          // 120\n                                                                                                            // 121\ngetRegExp = function(rule) {                                                                                // 122\n  if (!isWholeField(rule)) {                                                                                // 123\n    return new RegExp('(^|\\\\b|\\\\s)' + rule.token + '([\\\\w.]*)$');                                           // 124\n  } else {                                                                                                  // 125\n    return new RegExp('(^)(.*)$');                                                                          // 126\n  }                                                                                                         // 127\n};                                                                                                          // 128\n                                                                                                            // 129\ngetFindParams = function(rule, filter, limit) {                                                             // 130\n  var options, selector, sortspec;                                                                          // 131\n  selector = _.extend({}, rule.filter || {});                                                               // 132\n  options = {                                                                                               // 133\n    limit: limit                                                                                            // 134\n  };                                                                                                        // 135\n  if (!filter) {                                                                                            // 136\n    return [selector, options];                                                                             // 137\n  }                                                                                                         // 138\n  if (rule.sort && rule.field) {                                                                            // 139\n    sortspec = {};                                                                                          // 140\n    sortspec[rule.field] = 1;                                                                               // 141\n    options.sort = sortspec;                                                                                // 142\n  }                                                                                                         // 143\n  if (_.isFunction(rule.selector)) {                                                                        // 144\n    _.extend(selector, rule.selector(filter));                                                              // 145\n  } else {                                                                                                  // 146\n    selector[rule.field] = {                                                                                // 147\n      $regex: rule.matchAll ? filter : \"^\" + filter,                                                        // 148\n      $options: typeof rule.options === 'undefined' ? 'i' : rule.options                                    // 149\n    };                                                                                                      // 150\n  }                                                                                                         // 151\n  return [selector, options];                                                                               // 152\n};                                                                                                          // 153\n                                                                                                            // 154\ngetField = function(obj, str) {                                                                             // 155\n  var key, _i, _len, _ref;                                                                                  // 156\n  _ref = str.split(\".\");                                                                                    // 157\n  for (_i = 0, _len = _ref.length; _i < _len; _i++) {                                                       // 158\n    key = _ref[_i];                                                                                         // 159\n    obj = obj[key];                                                                                         // 160\n  }                                                                                                         // 161\n  return obj;                                                                                               // 162\n};                                                                                                          // 163\n                                                                                                            // 164\nthis.AutoComplete = (function() {                                                                           // 165\n  AutoComplete.KEYS = [40, 38, 13, 27, 9];                                                                  // 166\n                                                                                                            // 167\n  function AutoComplete(settings) {                                                                         // 168\n    this.onItemClick = __bind(this.onItemClick, this);                                                      // 169\n    var rule, _i, _len, _ref;                                                                               // 170\n    this.limit = settings.limit || 5;                                                                       // 171\n    this.position = settings.position || \"bottom\";                                                          // 172\n    this.rules = settings.rules;                                                                            // 173\n    _ref = this.rules;                                                                                      // 174\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {                                                     // 175\n      rule = _ref[_i];                                                                                      // 176\n      validateRule(rule);                                                                                   // 177\n    }                                                                                                       // 178\n    this.expressions = (function() {                                                                        // 179\n      var _j, _len1, _ref1, _results;                                                                       // 180\n      _ref1 = this.rules;                                                                                   // 181\n      _results = [];                                                                                        // 182\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {                                                // 183\n        rule = _ref1[_j];                                                                                   // 184\n        _results.push(getRegExp(rule));                                                                     // 185\n      }                                                                                                     // 186\n      return _results;                                                                                      // 187\n    }).call(this);                                                                                          // 188\n    this.matched = -1;                                                                                      // 189\n    this.loaded = true;                                                                                     // 190\n    this.ruleDep = new Deps.Dependency;                                                                     // 191\n    this.filterDep = new Deps.Dependency;                                                                   // 192\n    this.loadingDep = new Deps.Dependency;                                                                  // 193\n    this.sub = null;                                                                                        // 194\n    this.comp = Deps.autorun((function(_this) {                                                             // 195\n      return function() {                                                                                   // 196\n        var filter, options, selector, subName, _ref1, _ref2;                                               // 197\n        if ((_ref1 = _this.sub) != null) {                                                                  // 198\n          _ref1.stop();                                                                                     // 199\n        }                                                                                                   // 200\n        if (!((rule = _this.matchedRule()) && (filter = _this.getFilter()) !== null)) {                     // 201\n          return;                                                                                           // 202\n        }                                                                                                   // 203\n        if (!isServerSearch(rule)) {                                                                        // 204\n          _this.setLoaded(true);                                                                            // 205\n          return;                                                                                           // 206\n        }                                                                                                   // 207\n        _ref2 = getFindParams(rule, filter, _this.limit), selector = _ref2[0], options = _ref2[1];          // 208\n        _this.setLoaded(false);                                                                             // 209\n        subName = rule.subscription || \"autocomplete-recordset\";                                            // 210\n        return _this.sub = Meteor.subscribe(subName, selector, options, rule.collection, function() {       // 211\n          return _this.setLoaded(true);                                                                     // 212\n        });                                                                                                 // 213\n      };                                                                                                    // 214\n    })(this));                                                                                              // 215\n  }                                                                                                         // 216\n                                                                                                            // 217\n  AutoComplete.prototype.teardown = function() {                                                            // 218\n    return this.comp.stop();                                                                                // 219\n  };                                                                                                        // 220\n                                                                                                            // 221\n  AutoComplete.prototype.matchedRule = function() {                                                         // 222\n    this.ruleDep.depend();                                                                                  // 223\n    if (this.matched >= 0) {                                                                                // 224\n      return this.rules[this.matched];                                                                      // 225\n    } else {                                                                                                // 226\n      return null;                                                                                          // 227\n    }                                                                                                       // 228\n  };                                                                                                        // 229\n                                                                                                            // 230\n  AutoComplete.prototype.setMatchedRule = function(i) {                                                     // 231\n    this.matched = i;                                                                                       // 232\n    return this.ruleDep.changed();                                                                          // 233\n  };                                                                                                        // 234\n                                                                                                            // 235\n  AutoComplete.prototype.getFilter = function() {                                                           // 236\n    this.filterDep.depend();                                                                                // 237\n    return this.filter;                                                                                     // 238\n  };                                                                                                        // 239\n                                                                                                            // 240\n  AutoComplete.prototype.setFilter = function(x) {                                                          // 241\n    this.filter = x;                                                                                        // 242\n    this.filterDep.changed();                                                                               // 243\n    return this.filter;                                                                                     // 244\n  };                                                                                                        // 245\n                                                                                                            // 246\n  AutoComplete.prototype.isLoaded = function() {                                                            // 247\n    this.loadingDep.depend();                                                                               // 248\n    return this.loaded;                                                                                     // 249\n  };                                                                                                        // 250\n                                                                                                            // 251\n  AutoComplete.prototype.setLoaded = function(val) {                                                        // 252\n    if (val === this.loaded) {                                                                              // 253\n      return;                                                                                               // 254\n    }                                                                                                       // 255\n    this.loaded = val;                                                                                      // 256\n    return this.loadingDep.changed();                                                                       // 257\n  };                                                                                                        // 258\n                                                                                                            // 259\n  AutoComplete.prototype.onKeyUp = function() {                                                             // 260\n    var breakLoop, i, matches, startpos, val, _results;                                                     // 261\n    if (!this.$element) {                                                                                   // 262\n      return;                                                                                               // 263\n    }                                                                                                       // 264\n    startpos = this.element.selectionStart;                                                                 // 265\n    val = this.getText().substring(0, startpos);                                                            // 266\n                                                                                                            // 267\n    /*                                                                                                      // 268\n      Matching on multiple expressions.                                                                     // 269\n      We always go from a matched state to an unmatched one                                                 // 270\n      before going to a different matched one.                                                              // 271\n     */                                                                                                     // 272\n    i = 0;                                                                                                  // 273\n    breakLoop = false;                                                                                      // 274\n    _results = [];                                                                                          // 275\n    while (i < this.expressions.length) {                                                                   // 276\n      matches = val.match(this.expressions[i]);                                                             // 277\n      if (!matches && this.matched === i) {                                                                 // 278\n        this.setMatchedRule(-1);                                                                            // 279\n        breakLoop = true;                                                                                   // 280\n      }                                                                                                     // 281\n      if (matches && this.matched === -1) {                                                                 // 282\n        this.setMatchedRule(i);                                                                             // 283\n        breakLoop = true;                                                                                   // 284\n      }                                                                                                     // 285\n      if (matches && this.filter !== matches[2]) {                                                          // 286\n        this.setFilter(matches[2]);                                                                         // 287\n        breakLoop = true;                                                                                   // 288\n      }                                                                                                     // 289\n      if (breakLoop) {                                                                                      // 290\n        break;                                                                                              // 291\n      }                                                                                                     // 292\n      _results.push(i++);                                                                                   // 293\n    }                                                                                                       // 294\n    return _results;                                                                                        // 295\n  };                                                                                                        // 296\n                                                                                                            // 297\n  AutoComplete.prototype.onKeyDown = function(e) {                                                          // 298\n    if (this.matched === -1 || (this.constructor.KEYS.indexOf(e.keyCode) < 0)) {                            // 299\n      return;                                                                                               // 300\n    }                                                                                                       // 301\n    switch (e.keyCode) {                                                                                    // 302\n      case 9:                                                                                               // 303\n      case 13:                                                                                              // 304\n        if (this.select()) {                                                                                // 305\n          e.preventDefault();                                                                               // 306\n          e.stopPropagation();                                                                              // 307\n        }                                                                                                   // 308\n        break;                                                                                              // 309\n      case 40:                                                                                              // 310\n        e.preventDefault();                                                                                 // 311\n        this.next();                                                                                        // 312\n        break;                                                                                              // 313\n      case 38:                                                                                              // 314\n        e.preventDefault();                                                                                 // 315\n        this.prev();                                                                                        // 316\n        break;                                                                                              // 317\n      case 27:                                                                                              // 318\n        this.$element.blur();                                                                               // 319\n        this.hideList();                                                                                    // 320\n    }                                                                                                       // 321\n  };                                                                                                        // 322\n                                                                                                            // 323\n  AutoComplete.prototype.onFocus = function() {                                                             // 324\n    return Meteor.defer((function(_this) {                                                                  // 325\n      return function() {                                                                                   // 326\n        return _this.onKeyUp();                                                                             // 327\n      };                                                                                                    // 328\n    })(this));                                                                                              // 329\n  };                                                                                                        // 330\n                                                                                                            // 331\n  AutoComplete.prototype.onBlur = function() {                                                              // 332\n    return Meteor.setTimeout((function(_this) {                                                             // 333\n      return function() {                                                                                   // 334\n        return _this.hideList();                                                                            // 335\n      };                                                                                                    // 336\n    })(this), 500);                                                                                         // 337\n  };                                                                                                        // 338\n                                                                                                            // 339\n  AutoComplete.prototype.onItemClick = function(doc, e) {                                                   // 340\n    return this.processSelection(doc, this.rules[this.matched]);                                            // 341\n  };                                                                                                        // 342\n                                                                                                            // 343\n  AutoComplete.prototype.onItemHover = function(doc, e) {                                                   // 344\n    this.tmplInst.$(\".-autocomplete-item\").removeClass(\"selected\");                                         // 345\n    return $(e.target).closest(\".-autocomplete-item\").addClass(\"selected\");                                 // 346\n  };                                                                                                        // 347\n                                                                                                            // 348\n  AutoComplete.prototype.filteredList = function() {                                                        // 349\n    var filter, options, rule, selector, _ref;                                                              // 350\n    filter = this.getFilter();                                                                              // 351\n    if (this.matched === -1) {                                                                              // 352\n      return null;                                                                                          // 353\n    }                                                                                                       // 354\n    rule = this.rules[this.matched];                                                                        // 355\n    if (!(rule.token || filter)) {                                                                          // 356\n      return null;                                                                                          // 357\n    }                                                                                                       // 358\n    _ref = getFindParams(rule, filter, this.limit), selector = _ref[0], options = _ref[1];                  // 359\n    Meteor.defer((function(_this) {                                                                         // 360\n      return function() {                                                                                   // 361\n        return _this.ensureSelection();                                                                     // 362\n      };                                                                                                    // 363\n    })(this));                                                                                              // 364\n    if (isServerSearch(rule)) {                                                                             // 365\n      return AutoCompleteRecords.find({}, options);                                                         // 366\n    }                                                                                                       // 367\n    return rule.collection.find(selector, options);                                                         // 368\n  };                                                                                                        // 369\n                                                                                                            // 370\n  AutoComplete.prototype.isShowing = function() {                                                           // 371\n    var rule, showing;                                                                                      // 372\n    rule = this.matchedRule();                                                                              // 373\n    showing = (rule != null) && (rule.token || this.getFilter());                                           // 374\n    if (showing) {                                                                                          // 375\n      Meteor.defer((function(_this) {                                                                       // 376\n        return function() {                                                                                 // 377\n          _this.positionContainer();                                                                        // 378\n          return _this.ensureSelection();                                                                   // 379\n        };                                                                                                  // 380\n      })(this));                                                                                            // 381\n    }                                                                                                       // 382\n    return showing;                                                                                         // 383\n  };                                                                                                        // 384\n                                                                                                            // 385\n  AutoComplete.prototype.select = function() {                                                              // 386\n    var doc, node;                                                                                          // 387\n    node = this.tmplInst.find(\".-autocomplete-item.selected\");                                              // 388\n    if (node == null) {                                                                                     // 389\n      return false;                                                                                         // 390\n    }                                                                                                       // 391\n    doc = Blaze.getData(node);                                                                              // 392\n    if (!doc) {                                                                                             // 393\n      return false;                                                                                         // 394\n    }                                                                                                       // 395\n    this.processSelection(doc, this.rules[this.matched]);                                                   // 396\n    return true;                                                                                            // 397\n  };                                                                                                        // 398\n                                                                                                            // 399\n  AutoComplete.prototype.processSelection = function(doc, rule) {                                           // 400\n    var replacement;                                                                                        // 401\n    replacement = getField(doc, rule.field);                                                                // 402\n    if (!isWholeField(rule)) {                                                                              // 403\n      this.replace(replacement, rule);                                                                      // 404\n      this.hideList();                                                                                      // 405\n    } else {                                                                                                // 406\n      this.setText(replacement);                                                                            // 407\n      this.onBlur();                                                                                        // 408\n    }                                                                                                       // 409\n    this.$element.trigger(\"autocompleteselect\", doc);                                                       // 410\n  };                                                                                                        // 411\n                                                                                                            // 412\n  AutoComplete.prototype.replace = function(replacement) {                                                  // 413\n    var finalFight, fullStuff, newPosition, posfix, separator, startpos, val;                               // 414\n    startpos = this.element.selectionStart;                                                                 // 415\n    fullStuff = this.getText();                                                                             // 416\n    val = fullStuff.substring(0, startpos);                                                                 // 417\n    val = val.replace(this.expressions[this.matched], \"$1\" + this.rules[this.matched].token + replacement);\n    posfix = fullStuff.substring(startpos, fullStuff.length);                                               // 419\n    separator = (posfix.match(/^\\s/) ? \"\" : \" \");                                                           // 420\n    finalFight = val + separator + posfix;                                                                  // 421\n    this.setText(finalFight);                                                                               // 422\n    newPosition = val.length + 1;                                                                           // 423\n    this.element.setSelectionRange(newPosition, newPosition);                                               // 424\n  };                                                                                                        // 425\n                                                                                                            // 426\n  AutoComplete.prototype.hideList = function() {                                                            // 427\n    this.setMatchedRule(-1);                                                                                // 428\n    return this.setFilter(null);                                                                            // 429\n  };                                                                                                        // 430\n                                                                                                            // 431\n  AutoComplete.prototype.getText = function() {                                                             // 432\n    return this.$element.val() || this.$element.text();                                                     // 433\n  };                                                                                                        // 434\n                                                                                                            // 435\n  AutoComplete.prototype.setText = function(text) {                                                         // 436\n    if (this.$element.is(\"input,textarea\")) {                                                               // 437\n      return this.$element.val(text);                                                                       // 438\n    } else {                                                                                                // 439\n      return this.$element.html(text);                                                                      // 440\n    }                                                                                                       // 441\n  };                                                                                                        // 442\n                                                                                                            // 443\n                                                                                                            // 444\n  /*                                                                                                        // 445\n    Rendering functions                                                                                     // 446\n   */                                                                                                       // 447\n                                                                                                            // 448\n  AutoComplete.prototype.positionContainer = function() {                                                   // 449\n    var offset, pos, position, rule;                                                                        // 450\n    position = this.$element.position();                                                                    // 451\n    rule = this.matchedRule();                                                                              // 452\n    offset = getCaretCoordinates(this.element, this.element.selectionStart);                                // 453\n    if ((rule != null) && isWholeField(rule)) {                                                             // 454\n      pos = {                                                                                               // 455\n        left: position.left,                                                                                // 456\n        width: this.$element.outerWidth()                                                                   // 457\n      };                                                                                                    // 458\n    } else {                                                                                                // 459\n      pos = {                                                                                               // 460\n        left: position.left + offset.left                                                                   // 461\n      };                                                                                                    // 462\n    }                                                                                                       // 463\n    if (this.position === \"top\") {                                                                          // 464\n      pos.bottom = this.$element.offsetParent().height() - position.top - offset.top;                       // 465\n    } else {                                                                                                // 466\n      pos.top = position.top + offset.top + parseInt(this.$element.css('font-size'));                       // 467\n    }                                                                                                       // 468\n    return this.tmplInst.$(\".-autocomplete-container\").css(pos);                                            // 469\n  };                                                                                                        // 470\n                                                                                                            // 471\n  AutoComplete.prototype.ensureSelection = function() {                                                     // 472\n    var selectedItem;                                                                                       // 473\n    selectedItem = this.tmplInst.$(\".-autocomplete-item.selected\");                                         // 474\n    if (!selectedItem.length) {                                                                             // 475\n      return this.tmplInst.$(\".-autocomplete-item:first-child\").addClass(\"selected\");                       // 476\n    }                                                                                                       // 477\n  };                                                                                                        // 478\n                                                                                                            // 479\n  AutoComplete.prototype.next = function() {                                                                // 480\n    var currentItem, next;                                                                                  // 481\n    currentItem = this.tmplInst.$(\".-autocomplete-item.selected\");                                          // 482\n    if (!currentItem.length) {                                                                              // 483\n      return;                                                                                               // 484\n    }                                                                                                       // 485\n    currentItem.removeClass(\"selected\");                                                                    // 486\n    next = currentItem.next();                                                                              // 487\n    if (next.length) {                                                                                      // 488\n      return next.addClass(\"selected\");                                                                     // 489\n    } else {                                                                                                // 490\n      return this.tmplInst.$(\".-autocomplete-item:first-child\").addClass(\"selected\");                       // 491\n    }                                                                                                       // 492\n  };                                                                                                        // 493\n                                                                                                            // 494\n  AutoComplete.prototype.prev = function() {                                                                // 495\n    var currentItem, prev;                                                                                  // 496\n    currentItem = this.tmplInst.$(\".-autocomplete-item.selected\");                                          // 497\n    if (!currentItem.length) {                                                                              // 498\n      return;                                                                                               // 499\n    }                                                                                                       // 500\n    currentItem.removeClass(\"selected\");                                                                    // 501\n    prev = currentItem.prev();                                                                              // 502\n    if (prev.length) {                                                                                      // 503\n      return prev.addClass(\"selected\");                                                                     // 504\n    } else {                                                                                                // 505\n      return this.tmplInst.$(\".-autocomplete-item:last-child\").addClass(\"selected\");                        // 506\n    }                                                                                                       // 507\n  };                                                                                                        // 508\n                                                                                                            // 509\n  AutoComplete.prototype.currentTemplate = function() {                                                     // 510\n    return this.rules[this.matched].template;                                                               // 511\n  };                                                                                                        // 512\n                                                                                                            // 513\n  return AutoComplete;                                                                                      // 514\n                                                                                                            // 515\n})();                                                                                                       // 516\n                                                                                                            // 517\nAutocompleteTest = {                                                                                        // 518\n  records: AutoCompleteRecords,                                                                             // 519\n  getRegExp: getRegExp,                                                                                     // 520\n  getFindParams: getFindParams                                                                              // 521\n};                                                                                                          // 522\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            // 524\n}).call(this);                                                                                              // 525\n                                                                                                            // 526\n                                                                                                            // 527\n                                                                                                            // 528\n                                                                                                            // 529\n                                                                                                            // 530\n                                                                                                            // 531\n(function () {                                                                                              // 532\n                                                                                                            // 533\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mizzao:autocomplete/templates.coffee.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar acEvents, attributes, autocompleteHelpers;                                                              // 541\n                                                                                                            // 542\nacEvents = {                                                                                                // 543\n  \"keydown\": function(e, t) {                                                                               // 544\n    return t.ac.onKeyDown(e);                                                                               // 545\n  },                                                                                                        // 546\n  \"keyup\": function(e, t) {                                                                                 // 547\n    return t.ac.onKeyUp(e);                                                                                 // 548\n  },                                                                                                        // 549\n  \"focus\": function(e, t) {                                                                                 // 550\n    return t.ac.onFocus(e);                                                                                 // 551\n  },                                                                                                        // 552\n  \"blur\": function(e, t) {                                                                                  // 553\n    return t.ac.onBlur(e);                                                                                  // 554\n  }                                                                                                         // 555\n};                                                                                                          // 556\n                                                                                                            // 557\nTemplate.inputAutocomplete.events(acEvents);                                                                // 558\n                                                                                                            // 559\nTemplate.textareaAutocomplete.events(acEvents);                                                             // 560\n                                                                                                            // 561\nattributes = function() {                                                                                   // 562\n  return _.omit(this, 'settings');                                                                          // 563\n};                                                                                                          // 564\n                                                                                                            // 565\nautocompleteHelpers = {                                                                                     // 566\n  attributes: attributes,                                                                                   // 567\n  autocompleteContainer: new Template('AutocompleteContainer', function() {                                 // 568\n    var ac;                                                                                                 // 569\n    ac = new AutoComplete(Blaze.getData().settings);                                                        // 570\n    this.parentView.templateInstance().ac = ac;                                                             // 571\n    this.onViewReady(function() {                                                                           // 572\n      ac.element = this.parentView.firstNode();                                                             // 573\n      return ac.$element = $(ac.element);                                                                   // 574\n    });                                                                                                     // 575\n    return Blaze.With(ac, function() {                                                                      // 576\n      return Template._autocompleteContainer;                                                               // 577\n    });                                                                                                     // 578\n  })                                                                                                        // 579\n};                                                                                                          // 580\n                                                                                                            // 581\nTemplate.inputAutocomplete.helpers(autocompleteHelpers);                                                    // 582\n                                                                                                            // 583\nTemplate.textareaAutocomplete.helpers(autocompleteHelpers);                                                 // 584\n                                                                                                            // 585\nTemplate._autocompleteContainer.rendered = function() {                                                     // 586\n  return this.data.tmplInst = this;                                                                         // 587\n};                                                                                                          // 588\n                                                                                                            // 589\nTemplate._autocompleteContainer.destroyed = function() {                                                    // 590\n  return this.data.teardown();                                                                              // 591\n};                                                                                                          // 592\n                                                                                                            // 593\n                                                                                                            // 594\n/*                                                                                                          // 595\n  List rendering helpers                                                                                    // 596\n */                                                                                                         // 597\n                                                                                                            // 598\nTemplate._autocompleteContainer.events({                                                                    // 599\n  \"click .-autocomplete-item\": function(e, t) {                                                             // 600\n    return t.data.onItemClick(this, e);                                                                     // 601\n  },                                                                                                        // 602\n  \"mouseenter .-autocomplete-item\": function(e, t) {                                                        // 603\n    return t.data.onItemHover(this, e);                                                                     // 604\n  }                                                                                                         // 605\n});                                                                                                         // 606\n                                                                                                            // 607\nTemplate._autocompleteContainer.helpers({                                                                   // 608\n  empty: function() {                                                                                       // 609\n    return this.filteredList().count() === 0;                                                               // 610\n  },                                                                                                        // 611\n  noMatchTemplate: function() {                                                                             // 612\n    return this.matchedRule().noMatchTemplate || Template._noMatch;                                         // 613\n  }                                                                                                         // 614\n});                                                                                                         // 615\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            // 617\n}).call(this);                                                                                              // 618\n                                                                                                            // 619\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['mizzao:autocomplete'] = {}, {\n  AutocompleteTest: AutocompleteTest\n});\n\n})();\n","servePath":"/packages/mizzao_autocomplete.js","sourceMap":{"version":3,"sources":["/packages/mizzao_autocomplete/packages/mizzao_autocomplete.js"],"names":[],"mappingskH","file":"/packages/mizzao_autocomplete.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mizzao:autocomplete/template.inputs.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n                                                                                                                      // 1\nTemplate.__checkName(\"inputAutocomplete\");                                                                            // 2\nTemplate[\"inputAutocomplete\"] = new Template(\"Template.inputAutocomplete\", (function() {                              // 3\n  var view = this;                                                                                                    // 4\n  return [ HTML.INPUT(HTML.Attrs({                                                                                    // 5\n    type: \"text\"                                                                                                      // 6\n  }, function() {                                                                                                     // 7\n    return Spacebars.attrMustache(view.lookup(\"attributes\"));                                                         // 8\n  })), \"\\n    \", Spacebars.include(view.lookupTemplate(\"autocompleteContainer\")) ];                                   // 9\n}));                                                                                                                  // 10\n                                                                                                                      // 11\nTemplate.__checkName(\"textareaAutocomplete\");                                                                         // 12\nTemplate[\"textareaAutocomplete\"] = new Template(\"Template.textareaAutocomplete\", (function() {                        // 13\n  var view = this;                                                                                                    // 14\n  return [ HTML.TEXTAREA(HTML.Attrs(function() {                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"attributes\"));                                                         // 16\n  }, {                                                                                                                // 17\n    value: function() {                                                                                               // 18\n      return Blaze._InOuterTemplateScope(view, function() {                                                           // 19\n        return Spacebars.include(function() {                                                                         // 20\n          return Spacebars.call(view.templateContentBlock);                                                           // 21\n        });                                                                                                           // 22\n      });                                                                                                             // 23\n    }                                                                                                                 // 24\n  })), \"\\n    \", Spacebars.include(view.lookupTemplate(\"autocompleteContainer\")) ];                                   // 25\n}));                                                                                                                  // 26\n                                                                                                                      // 27\nTemplate.__checkName(\"_autocompleteContainer\");                                                                       // 28\nTemplate[\"_autocompleteContainer\"] = new Template(\"Template._autocompleteContainer\", (function() {                    // 29\n  var view = this;                                                                                                    // 30\n  return Blaze.If(function() {                                                                                        // 31\n    return Spacebars.call(view.lookup(\"isShowing\"));                                                                  // 32\n  }, function() {                                                                                                     // 33\n    return [ \"\\n    \", HTML.DIV({                                                                                     // 34\n      \"class\": \"-autocomplete-container\"                                                                              // 35\n    }, \"\\n        \", Blaze.If(function() {                                                                            // 36\n      return Spacebars.call(view.lookup(\"isLoaded\"));                                                                 // 37\n    }, function() {                                                                                                   // 38\n      return [ \"\\n            \", Blaze.Unless(function() {                                                            // 39\n        return Spacebars.call(view.lookup(\"empty\"));                                                                  // 40\n      }, function() {                                                                                                 // 41\n        return [ \"\\n            \", HTML.UL({                                                                          // 42\n          \"class\": \"-autocomplete-list\"                                                                               // 43\n        }, \"\\n                \", Blaze.Each(function() {                                                              // 44\n          return Spacebars.call(view.lookup(\"filteredList\"));                                                         // 45\n        }, function() {                                                                                               // 46\n          return [ \"\\n                \", HTML.LI({                                                                    // 47\n            \"class\": \"-autocomplete-item\"                                                                             // 48\n          }, \"\\n                    \", Spacebars.With(function() {                                                    // 49\n            return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"currentTemplate\"));                               // 50\n          }, function() {                                                                                             // 51\n            return [ \"\\n                        \", Spacebars.With(function() {                                        // 52\n              return Spacebars.call(view.lookup(\"..\"));                                                               // 53\n            }, function() {                                                                                           // 54\n              return [ \"  \\n                            \", Spacebars.include(view.lookupTemplate(\"..\")), \"  \\n                        \" ];\n            }), \"\\n                    \" ];                                                                           // 56\n          }), \"\\n                \"), \"\\n                \" ];                                                          // 57\n        }), \"\\n            \"), \"\\n            \" ];                                                                    // 58\n      }, function() {                                                                                                 // 59\n        return [ \"\\n                \", Spacebars.include(view.lookupTemplate(\"noMatchTemplate\")), \"\\n            \" ]; // 60\n      }), \"\\n        \" ];                                                                                             // 61\n    }, function() {                                                                                                   // 62\n      return [ \"\\n            \", HTML.I(\"loading...\"), \"\\n        \" ];                                                // 63\n    }), \"\\n    \"), \"\\n    \" ];                                                                                        // 64\n  });                                                                                                                 // 65\n}));                                                                                                                  // 66\n                                                                                                                      // 67\nTemplate.__checkName(\"_noMatch\");                                                                                     // 68\nTemplate[\"_noMatch\"] = new Template(\"Template._noMatch\", (function() {                                                // 69\n  var view = this;                                                                                                    // 70\n  return HTML.Raw(\"(<i>no matches</i>)\");                                                                             // 71\n}));                                                                                                                  // 72\n                                                                                                                      // 73\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mizzao:autocomplete/autocomplete-client.coffee.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar AutoCompleteRecords, getField, getFindParams, getRegExp, isServerSearch, isWholeField, validateRule,                  \n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nAutoCompleteRecords = new Mongo.Collection(\"autocompleteRecords\");\n\nisServerSearch = function(rule) {\n  return _.isString(rule.collection);\n};\n\nvalidateRule = function(rule) {\n  if ((rule.subscription != null) && !Match.test(rule.collection, String)) {\n    throw new Error(\"Collection name must be specified as string for server-side search\");\n  }\n  if (rule.callback != null) {\n    return console.warn(\"autocomplete no longer supports callbacks; use event listeners instead.\");\n  }\n};\n\nisWholeField = function(rule) {\n  return !rule.token;\n};\n\ngetRegExp = function(rule) {\n  if (!isWholeField(rule)) {\n    return new RegExp('(^|\\\\b|\\\\s)' + rule.token + '([\\\\w.]*)$');\n  } else {\n    return new RegExp('(^)(.*)$');\n  }\n};\n\ngetFindParams = function(rule, filter, limit) {\n  var options, selector, sortspec;\n  selector = _.extend({}, rule.filter || {});\n  options = {\n    limit: limit\n  };\n  if (!filter) {\n    return [selector, options];\n  }\n  if (rule.sort && rule.field) {\n    sortspec = {};\n    sortspec[rule.field] = 1;\n    options.sort = sortspec;\n  }\n  if (_.isFunction(rule.selector)) {\n    _.extend(selector, rule.selector(filter));\n  } else {\n    selector[rule.field] = {\n      $regex: rule.matchAll ? filter : \"^\" + filter,\n      $options: typeof rule.options === 'undefined' ? 'i' : rule.options\n    };\n  }\n  return [selector, options];\n};\n\ngetField = function(obj, str) {\n  var key, _i, _len, _ref;\n  _ref = str.split(\".\");\n  for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n    key = _ref[_i];\n    obj = obj[key];\n  }\n  return obj;\n};\n\nthis.AutoComplete = (function() {\n  AutoComplete.KEYS = [40, 38, 13, 27, 9];\n\n  function AutoComplete(settings) {\n    this.onItemClick = __bind(this.onItemClick, this);\n    var rule, _i, _len, _ref;\n    this.limit = settings.limit || 5;\n    this.position = settings.position || \"bottom\";\n    this.rules = settings.rules;\n    _ref = this.rules;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      rule = _ref[_i];\n      validateRule(rule);\n    }\n    this.expressions = (function() {\n      var _j, _len1, _ref1, _results;\n      _ref1 = this.rules;\n      _results = [];\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n        rule = _ref1[_j];\n        _results.push(getRegExp(rule));\n      }\n      return _results;\n    }).call(this);\n    this.matched = -1;\n    this.loaded = true;\n    this.ruleDep = new Deps.Dependency;\n    this.filterDep = new Deps.Dependency;\n    this.loadingDep = new Deps.Dependency;\n    this.sub = null;\n    this.comp = Deps.autorun((function(_this) {\n      return function() {\n        var filter, options, selector, subName, _ref1, _ref2;\n        if ((_ref1 = _this.sub) != null) {\n          _ref1.stop();\n        }\n        if (!((rule = _this.matchedRule()) && (filter = _this.getFilter()) !== null)) {\n          return;\n        }\n        if (!isServerSearch(rule)) {\n          _this.setLoaded(true);\n          return;\n        }\n        _ref2 = getFindParams(rule, filter, _this.limit), selector = _ref2[0], options = _ref2[1];\n        _this.setLoaded(false);\n        subName = rule.subscription || \"autocomplete-recordset\";\n        return _this.sub = Meteor.subscribe(subName, selector, options, rule.collection, function() {\n          return _this.setLoaded(true);\n        });\n      };\n    })(this));\n  }\n\n  AutoComplete.prototype.teardown = function() {\n    return this.comp.stop();\n  };\n\n  AutoComplete.prototype.matchedRule = function() {\n    this.ruleDep.depend();\n    if (this.matched >= 0) {\n      return this.rules[this.matched];\n    } else {\n      return null;\n    }\n  };\n\n  AutoComplete.prototype.setMatchedRule = function(i) {\n    this.matched = i;\n    return this.ruleDep.changed();\n  };\n\n  AutoComplete.prototype.getFilter = function() {\n    this.filterDep.depend();\n    return this.filter;\n  };\n\n  AutoComplete.prototype.setFilter = function(x) {\n    this.filter = x;\n    this.filterDep.changed();\n    return this.filter;\n  };\n\n  AutoComplete.prototype.isLoaded = function() {\n    this.loadingDep.depend();\n    return this.loaded;\n  };\n\n  AutoComplete.prototype.setLoaded = function(val) {\n    if (val === this.loaded) {\n      return;\n    }\n    this.loaded = val;\n    return this.loadingDep.changed();\n  };\n\n  AutoComplete.prototype.onKeyUp = function() {\n    var breakLoop, i, matches, startpos, val, _results;\n    if (!this.$element) {\n      return;\n    }\n    startpos = this.element.selectionStart;\n    val = this.getText().substring(0, startpos);\n\n    /*\n      Matching on multiple expressions.\n      We always go from a matched state to an unmatched one\n      before going to a different matched one.\n     */\n    i = 0;\n    breakLoop = false;\n    _results = [];\n    while (i < this.expressions.length) {\n      matches = val.match(this.expressions[i]);\n      if (!matches && this.matched === i) {\n        this.setMatchedRule(-1);\n        breakLoop = true;\n      }\n      if (matches && this.matched === -1) {\n        this.setMatchedRule(i);\n        breakLoop = true;\n      }\n      if (matches && this.filter !== matches[2]) {\n        this.setFilter(matches[2]);\n        breakLoop = true;\n      }\n      if (breakLoop) {\n        break;\n      }\n      _results.push(i++);\n    }\n    return _results;\n  };\n\n  AutoComplete.prototype.onKeyDown = function(e) {\n    if (this.matched === -1 || (this.constructor.KEYS.indexOf(e.keyCode) < 0)) {\n      return;\n    }\n    switch (e.keyCode) {\n      case 9:\n      case 13:\n        if (this.select()) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n        break;\n      case 40:\n        e.preventDefault();\n        this.next();\n        break;\n      case 38:\n        e.preventDefault();\n        this.prev();\n        break;\n      case 27:\n        this.$element.blur();\n        this.hideList();\n    }\n  };\n\n  AutoComplete.prototype.onFocus = function() {\n    return Meteor.defer((function(_this) {\n      return function() {\n        return _this.onKeyUp();\n      };\n    })(this));\n  };\n\n  AutoComplete.prototype.onBlur = function() {\n    return Meteor.setTimeout((function(_this) {\n      return function() {\n        return _this.hideList();\n      };\n    })(this), 500);\n  };\n\n  AutoComplete.prototype.onItemClick = function(doc, e) {\n    return this.processSelection(doc, this.rules[this.matched]);\n  };\n\n  AutoComplete.prototype.onItemHover = function(doc, e) {\n    this.tmplInst.$(\".-autocomplete-item\").removeClass(\"selected\");\n    return $(e.target).closest(\".-autocomplete-item\").addClass(\"selected\");\n  };\n\n  AutoComplete.prototype.filteredList = function() {\n    var filter, options, rule, selector, _ref;\n    filter = this.getFilter();\n    if (this.matched === -1) {\n      return null;\n    }\n    rule = this.rules[this.matched];\n    if (!(rule.token || filter)) {\n      return null;\n    }\n    _ref = getFindParams(rule, filter, this.limit), selector = _ref[0], options = _ref[1];\n    Meteor.defer((function(_this) {\n      return function() {\n        return _this.ensureSelection();\n      };\n    })(this));\n    if (isServerSearch(rule)) {\n      return AutoCompleteRecords.find({}, options);\n    }\n    return rule.collection.find(selector, options);\n  };\n\n  AutoComplete.prototype.isShowing = function() {\n    var rule, showing;\n    rule = this.matchedRule();\n    showing = (rule != null) && (rule.token || this.getFilter());\n    if (showing) {\n      Meteor.defer((function(_this) {\n        return function() {\n          _this.positionContainer();\n          return _this.ensureSelection();\n        };\n      })(this));\n    }\n    return showing;\n  };\n\n  AutoComplete.prototype.select = function() {\n    var doc, node;\n    node = this.tmplInst.find(\".-autocomplete-item.selected\");\n    if (node == null) {\n      return false;\n    }\n    doc = Blaze.getData(node);\n    if (!doc) {\n      return false;\n    }\n    this.processSelection(doc, this.rules[this.matched]);\n    return true;\n  };\n\n  AutoComplete.prototype.processSelection = function(doc, rule) {\n    var replacement;\n    replacement = getField(doc, rule.field);\n    if (!isWholeField(rule)) {\n      this.replace(replacement, rule);\n      this.hideList();\n    } else {\n      this.setText(replacement);\n      this.onBlur();\n    }\n    this.$element.trigger(\"autocompleteselect\", doc);\n  };\n\n  AutoComplete.prototype.replace = function(replacement) {\n    var finalFight, fullStuff, newPosition, posfix, separator, startpos, val;\n    startpos = this.element.selectionStart;\n    fullStuff = this.getText();\n    val = fullStuff.substring(0, startpos);\n    val = val.replace(this.expressions[this.matched], \"$1\" + this.rules[this.matched].token + replacement);\n    posfix = fullStuff.substring(startpos, fullStuff.length);\n    separator = (posfix.match(/^\\s/) ? \"\" : \" \");\n    finalFight = val + separator + posfix;\n    this.setText(finalFight);\n    newPosition = val.length + 1;\n    this.element.setSelectionRange(newPosition, newPosition);\n  };\n\n  AutoComplete.prototype.hideList = function() {\n    this.setMatchedRule(-1);\n    return this.setFilter(null);\n  };\n\n  AutoComplete.prototype.getText = function() {\n    return this.$element.val() || this.$element.text();\n  };\n\n  AutoComplete.prototype.setText = function(text) {\n    if (this.$element.is(\"input,textarea\")) {\n      return this.$element.val(text);\n    } else {\n      return this.$element.html(text);\n    }\n  };\n\n\n  /*\n    Rendering functions\n   */\n\n  AutoComplete.prototype.positionContainer = function() {\n    var offset, pos, position, rule;\n    position = this.$element.position();\n    rule = this.matchedRule();\n    offset = getCaretCoordinates(this.element, this.element.selectionStart);\n    if ((rule != null) && isWholeField(rule)) {\n      pos = {\n        left: position.left,\n        width: this.$element.outerWidth()\n      };\n    } else {\n      pos = {\n        left: position.left + offset.left\n      };\n    }\n    if (this.position === \"top\") {\n      pos.bottom = this.$element.offsetParent().height() - position.top - offset.top;\n    } else {\n      pos.top = position.top + offset.top + parseInt(this.$element.css('font-size'));\n    }\n    return this.tmplInst.$(\".-autocomplete-container\").css(pos);\n  };\n\n  AutoComplete.prototype.ensureSelection = function() {\n    var selectedItem;\n    selectedItem = this.tmplInst.$(\".-autocomplete-item.selected\");\n    if (!selectedItem.length) {\n      return this.tmplInst.$(\".-autocomplete-item:first-child\").addClass(\"selected\");\n    }\n  };\n\n  AutoComplete.prototype.next = function() {\n    var currentItem, next;\n    currentItem = this.tmplInst.$(\".-autocomplete-item.selected\");\n    if (!currentItem.length) {\n      return;\n    }\n    currentItem.removeClass(\"selected\");\n    next = currentItem.next();\n    if (next.length) {\n      return next.addClass(\"selected\");\n    } else {\n      return this.tmplInst.$(\".-autocomplete-item:first-child\").addClass(\"selected\");\n    }\n  };\n\n  AutoComplete.prototype.prev = function() {\n    var currentItem, prev;\n    currentItem = this.tmplInst.$(\".-autocomplete-item.selected\");\n    if (!currentItem.length) {\n      return;\n    }\n    currentItem.removeClass(\"selected\");\n    prev = currentItem.prev();\n    if (prev.length) {\n      return prev.addClass(\"selected\");\n    } else {\n      return this.tmplInst.$(\".-autocomplete-item:last-child\").addClass(\"selected\");\n    }\n  };\n\n  AutoComplete.prototype.currentTemplate = function() {\n    return this.rules[this.matched].template;\n  };\n\n  return AutoComplete;\n\n})();\n\nAutocompleteTest = {\n  records: AutoCompleteRecords,\n  getRegExp: getRegExp,\n  getFindParams: getFindParams\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mizzao:autocomplete/templates.coffee.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar acEvents, attributes, autocompleteHelpers;\n\nacEvents = {\n  \"keydown\": function(e, t) {\n    return t.ac.onKeyDown(e);\n  },\n  \"keyup\": function(e, t) {\n    return t.ac.onKeyUp(e);\n  },\n  \"focus\": function(e, t) {\n    return t.ac.onFocus(e);\n  },\n  \"blur\": function(e, t) {\n    return t.ac.onBlur(e);\n  }\n};\n\nTemplate.inputAutocomplete.events(acEvents);\n\nTemplate.textareaAutocomplete.events(acEvents);\n\nattributes = function() {\n  return _.omit(this, 'settings');\n};\n\nautocompleteHelpers = {\n  attributes: attributes,\n  autocompleteContainer: new Template('AutocompleteContainer', function() {\n    var ac;\n    ac = new AutoComplete(Blaze.getData().settings);\n    this.parentView.templateInstance().ac = ac;\n    this.onViewReady(function() {\n      ac.element = this.parentView.firstNode();\n      return ac.$element = $(ac.element);\n    });\n    return Blaze.With(ac, function() {\n      return Template._autocompleteContainer;\n    });\n  })\n};\n\nTemplate.inputAutocomplete.helpers(autocompleteHelpers);\n\nTemplate.textareaAutocomplete.helpers(autocompleteHelpers);\n\nTemplate._autocompleteContainer.rendered = function() {\n  return this.data.tmplInst = this;\n};\n\nTemplate._autocompleteContainer.destroyed = function() {\n  return this.data.teardown();\n};\n\n\n/*\n  List rendering helpers\n */\n\nTemplate._autocompleteContainer.events({\n  \"click .-autocomplete-item\": function(e, t) {\n    return t.data.onItemClick(this, e);\n  },\n  \"mouseenter .-autocomplete-item\": function(e, t) {\n    return t.data.onItemHover(this, e);\n  }\n});\n\nTemplate._autocompleteContainer.helpers({\n  empty: function() {\n    return this.filteredList().count() === 0;\n  },\n  noMatchTemplate: function() {\n    return this.matchedRule().noMatchTemplate || Template._noMatch;\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]