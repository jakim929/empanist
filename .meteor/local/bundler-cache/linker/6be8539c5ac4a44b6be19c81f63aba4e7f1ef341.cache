[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\n\n/* Package-scope variables */\nvar __coffeescriptShare, ComputedField;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// packages/peerlibrary_computed-field/packages/peerlibrary_computed-fi //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n                                                                        //\n(function () {                                                          // 1\n                                                                        // 2\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/peerlibrary:computed-field/lib.coffee.js                 //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                                                                        // 10\n                                                                        // 11\nComputedField = (function() {                                           // 12\n  function ComputedField(func, equalsFunc) {                            // 13\n    var getter, handle, lastValue, startAutorun;                        // 14\n    handle = null;                                                      // 15\n    lastValue = null;                                                   // 16\n    startAutorun = function() {                                         // 17\n      var originalStop;                                                 // 18\n      handle = Tracker.autorun(function(computation) {                  // 19\n        var value;                                                      // 20\n        value = func();                                                 // 21\n        if (!lastValue) {                                               // 22\n          lastValue = new ReactiveVar(value, equalsFunc);               // 23\n        } else {                                                        // 24\n          lastValue.set(value);                                         // 25\n        }                                                               // 26\n        return Tracker.afterFlush(function() {                          // 27\n          if (!lastValue.dep.hasDependents()) {                         // 28\n            return getter.stop();                                       // 29\n          }                                                             // 30\n        });                                                             // 31\n      });                                                               // 32\n      if (handle.onStop) {                                              // 33\n        return handle.onStop(function() {                               // 34\n          return handle = null;                                         // 35\n        });                                                             // 36\n      } else {                                                          // 37\n        originalStop = handle.stop;                                     // 38\n        return handle.stop = function() {                               // 39\n          if (handle) {                                                 // 40\n            originalStop.call(handle);                                  // 41\n          }                                                             // 42\n          return handle = null;                                         // 43\n        };                                                              // 44\n      }                                                                 // 45\n    };                                                                  // 46\n    startAutorun();                                                     // 47\n    getter = function() {                                               // 48\n      getter.flush();                                                   // 49\n      return lastValue.get();                                           // 50\n    };                                                                  // 51\n    if (Object.setPrototypeOf) {                                        // 52\n      Object.setPrototypeOf(getter, this.constructor.prototype);        // 53\n    } else {                                                            // 54\n      getter.__proto__ = this.constructor.prototype;                    // 55\n    }                                                                   // 56\n    getter.toString = function() {                                      // 57\n      return \"ComputedField{\" + (this()) + \"}\";                         // 58\n    };                                                                  // 59\n    getter.apply = function() {                                         // 60\n      return getter();                                                  // 61\n    };                                                                  // 62\n    getter.call = function() {                                          // 63\n      return getter();                                                  // 64\n    };                                                                  // 65\n    getter.stop = function() {                                          // 66\n      if (handle != null) {                                             // 67\n        handle.stop();                                                  // 68\n      }                                                                 // 69\n      return handle = null;                                             // 70\n    };                                                                  // 71\n    getter._isRunning = function() {                                    // 72\n      return !!handle;                                                  // 73\n    };                                                                  // 74\n    getter.flush = function() {                                         // 75\n      return Tracker.nonreactive(function() {                           // 76\n        if (handle) {                                                   // 77\n          return handle._recompute();                                   // 78\n        } else {                                                        // 79\n          return startAutorun();                                        // 80\n        }                                                               // 81\n      });                                                               // 82\n    };                                                                  // 83\n    return getter;                                                      // 84\n  }                                                                     // 85\n                                                                        // 86\n  return ComputedField;                                                 // 87\n                                                                        // 88\n})();                                                                   // 89\n///////////////////////////////////////////////////////////////////////\n                                                                        // 91\n}).call(this);                                                          // 92\n                                                                        // 93\n//////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['peerlibrary:computed-field'] = {}, {\n  ComputedField: ComputedField\n});\n\n})();\n","servePath":"/packages/peerlibrary_computed-field.js","sourceMap":{"version":3,"sources":["/packages/peerlibrary_computed-field/packages/peerlibrary_computed-field.js"],"names":[],"mappingsfile":"/packages/peerlibrary_computed-field.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/peerlibrary:computed-field/lib.coffee.js                 //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n                  \n\nComputedField = (function() {\n  function ComputedField(func, equalsFunc) {\n    var getter, handle, lastValue, startAutorun;\n    handle = null;\n    lastValue = null;\n    startAutorun = function() {\n      var originalStop;\n      handle = Tracker.autorun(function(computation) {\n        var value;\n        value = func();\n        if (!lastValue) {\n          lastValue = new ReactiveVar(value, equalsFunc);\n        } else {\n          lastValue.set(value);\n        }\n        return Tracker.afterFlush(function() {\n          if (!lastValue.dep.hasDependents()) {\n            return getter.stop();\n          }\n        });\n      });\n      if (handle.onStop) {\n        return handle.onStop(function() {\n          return handle = null;\n        });\n      } else {\n        originalStop = handle.stop;\n        return handle.stop = function() {\n          if (handle) {\n            originalStop.call(handle);\n          }\n          return handle = null;\n        };\n      }\n    };\n    startAutorun();\n    getter = function() {\n      getter.flush();\n      return lastValue.get();\n    };\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(getter, this.constructor.prototype);\n    } else {\n      getter.__proto__ = this.constructor.prototype;\n    }\n    getter.toString = function() {\n      return \"ComputedField{\" + (this()) + \"}\";\n    };\n    getter.apply = function() {\n      return getter();\n    };\n    getter.call = function() {\n      return getter();\n    };\n    getter.stop = function() {\n      if (handle != null) {\n        handle.stop();\n      }\n      return handle = null;\n    };\n    getter._isRunning = function() {\n      return !!handle;\n    };\n    getter.flush = function() {\n      return Tracker.nonreactive(function() {\n        if (handle) {\n          return handle._recompute();\n        } else {\n          return startAutorun();\n        }\n      });\n    };\n    return getter;\n  }\n\n  return ComputedField;\n\n})();\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]