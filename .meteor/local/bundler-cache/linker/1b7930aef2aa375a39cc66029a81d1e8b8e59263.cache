[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Session = Package.session.Session;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar PersistentSession;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/u2622_persistent-session/lib/persistent_session.js                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// This file uses code direct from Meteor's reactive-dict package, mostly from                                  // 1\n// this file: https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js             // 2\n//                                                                                                              // 3\n// helpers: https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js#L1-L16        // 4\nvar stringify = function (value) {                                                                              // 5\n  if (value === undefined)                                                                                      // 6\n    return 'undefined';                                                                                         // 7\n  return EJSON.stringify(value);                                                                                // 8\n};                                                                                                              // 9\nvar parse = function (serialized) {                                                                             // 10\n  if (serialized === undefined || serialized === 'undefined')                                                   // 11\n    return undefined;                                                                                           // 12\n  return EJSON.parse(serialized);                                                                               // 13\n};                                                                                                              // 14\n                                                                                                                // 15\nvar changed = function (v) {                                                                                    // 16\n  v && v.changed();                                                                                             // 17\n};                                                                                                              // 18\n                                                                                                                // 19\n                                                                                                                // 20\nPersistentSession = function (dictName) {                                                                       // 21\n  if (_.isString(dictName)) {                                                                                   // 22\n    this._dictName = dictName;                                                                                  // 23\n                                                                                                                // 24\n    // when \"session\", use the existing dict                                                                    // 25\n    if (dictName == \"session\") {                                                                                // 26\n      this._dictName = \"\"   // we don't need a name for session                                                 // 27\n      this._dict = oldSession; // we also want to use the global (incase something was set previously)          // 28\n                                                                                                                // 29\n    // not session? create a new dict                                                                           // 30\n    } else {                                                                                                    // 31\n      this._dict = new ReactiveDict(dictName);                                                                  // 32\n    }                                                                                                           // 33\n                                                                                                                // 34\n  } else {                                                                                                      // 35\n    throw new Error(\"dictName must be a string\");                                                               // 36\n  }                                                                                                             // 37\n                                                                                                                // 38\n                                                                                                                // 39\n  /*                                                                                                            // 40\n   * Used to determine if we need to migrate how the data is stored.                                            // 41\n   * Each time the data format changes, change this number.                                                     // 42\n   *                                                                                                            // 43\n   * It should match the current major + minor version:                                                         // 44\n   * EG: 0.3 = 3, 1.2 = 12, 2.0 = 20, or for 0.3.x: 3, or 1.x: 10                                               // 45\n   *                                                                                                            // 46\n   */                                                                                                           // 47\n  var PSA_DATA_VERSION = 4;                                                                                     // 48\n                                                                                                                // 49\n  // === INITIALIZE KEY TRACKING ===                                                                            // 50\n  this.psKeys     = {};                                                                                         // 51\n  this.psKeyList  = [];                                                                                         // 52\n  this.psaKeys    = {};                                                                                         // 53\n  this.psaKeyList = [];                                                                                         // 54\n                                                                                                                // 55\n  // initialize default method setting                                                                          // 56\n  this.default_method = 'temporary'; // valid options: 'temporary', 'persistent', 'authenticated'               // 57\n  if (Meteor.settings &&                                                                                        // 58\n      Meteor.settings.public &&                                                                                 // 59\n      Meteor.settings.public.persistent_session) {                                                              // 60\n    this.default_method = Meteor.settings.public.persistent_session.default_method;                             // 61\n  }                                                                                                             // 62\n                                                                                                                // 63\n                                                                                                                // 64\n  var self = this;                                                                                              // 65\n                                                                                                                // 66\n  // === HOUSEKEEPING ===                                                                                       // 67\n  /*                                                                                                            // 68\n   * Converts previously stored values into EJSON compatible formats.                                           // 69\n   */                                                                                                           // 70\n  function migrateToEJSON() {                                                                                   // 71\n    if (amplify.store('__PSDATAVERSION__' + self._dictName) >= 1) {                                             // 72\n      return;                                                                                                   // 73\n    }                                                                                                           // 74\n                                                                                                                // 75\n    var psKeyList = amplify.store('__PSKEYS__' + self._dictName);                                               // 76\n    var psaKeyList = amplify.store('__PSAKEYS__' + self._dictName);                                             // 77\n                                                                                                                // 78\n    _.each([psKeyList, psaKeyList], function(list) {                                                            // 79\n      _.each(list, function(key) {                                                                              // 80\n        amplify.store(key, EJSON.stringify(amplify.store(key)));                                                // 81\n      });                                                                                                       // 82\n    });                                                                                                         // 83\n                                                                                                                // 84\n    amplify.store('__PSDATAVERSION__' + self._dictName, 2);                                                     // 85\n  };                                                                                                            // 86\n                                                                                                                // 87\n  function migrate3Xto4X() {                                                                                    // 88\n    if (amplify.store('__PSDATAVERSION__' + self._dictName) >= PSA_DATA_VERSION) {                              // 89\n      return;                                                                                                   // 90\n    }                                                                                                           // 91\n                                                                                                                // 92\n    var psKeyList = amplify.store('__PSKEYS__' + self._dictName);                                               // 93\n    var psaKeyList = amplify.store('__PSAKEYS__' + self._dictName);                                             // 94\n                                                                                                                // 95\n    _.each([psKeyList, psaKeyList], function(list) {                                                            // 96\n      _.each(list, function(key) {                                                                              // 97\n        var invalid = false;                                                                                    // 98\n        try {                                                                                                   // 99\n          EJSON.parse(amplify.store(self._dictName+key));                                                       // 100\n        } catch (error) {                                                                                       // 101\n          //The data is already in the format that we expect                                                    // 102\n          //Unfortunately there is no EJSON.canParse method                                                     // 103\n          invalid = true;                                                                                       // 104\n        }                                                                                                       // 105\n        if (!invalid) {                                                                                         // 106\n          var parsed = EJSON.parse(amplify.store(self._dictName+key));                                          // 107\n          var jsoned = EJSON.toJSONValue(parsed);                                                               // 108\n          amplify.store(self._dictName+key, jsoned);                                                            // 109\n        }                                                                                                       // 110\n      });                                                                                                       // 111\n    });                                                                                                         // 112\n                                                                                                                // 113\n    amplify.store('__PSDATAVERSION__' + self._dictName, 4);                                                     // 114\n  }                                                                                                             // 115\n                                                                                                                // 116\n  if (Meteor.isClient) {                                                                                        // 117\n                                                                                                                // 118\n    // --- on startup, load persistent data back into meteor session ---                                        // 119\n    Meteor.startup(function(){                                                                                  // 120\n      var val;                                                                                                  // 121\n                                                                                                                // 122\n      migrateToEJSON();                                                                                         // 123\n      migrate3Xto4X();                                                                                          // 124\n                                                                                                                // 125\n      // persistent data                                                                                        // 126\n      var psList = amplify.store('__PSKEYS__' + self._dictName);                                                // 127\n      if ( typeof psList == \"object\" && psList.length!==undefined ) {                                           // 128\n        for (var i=0; i<psList.length; i++) {                                                                   // 129\n          if (!_.has(self._dict.keys, psList[i])) {                                                             // 130\n            val = self.get(psList[i]);                                                                          // 131\n            self.set(psList[i], val, true, false);                                                              // 132\n          }                                                                                                     // 133\n        }                                                                                                       // 134\n      }                                                                                                         // 135\n                                                                                                                // 136\n      // authenticated data                                                                                     // 137\n      var psaList = amplify.store('__PSAKEYS__' + self._dictName);                                              // 138\n      if ( typeof psaList == \"object\" && psaList.length!==undefined ) {                                         // 139\n        for (var i=0; i<psaList.length; i++) {                                                                  // 140\n          if (!_.has(self._dict.keys, psaList[i])) {                                                            // 141\n            val = self.get(psaList[i]);                                                                         // 142\n            self.setAuth(psaList[i], val, true, true);                                                          // 143\n          }                                                                                                     // 144\n        }                                                                                                       // 145\n      }                                                                                                         // 146\n                                                                                                                // 147\n    });                                                                                                         // 148\n                                                                                                                // 149\n  };                                                                                                            // 150\n                                                                                                                // 151\n  Tracker.autorun(function () {                                                                                 // 152\n    // lazy check for accounts-base                                                                             // 153\n    if (Meteor.userId) {                                                                                        // 154\n      var userId = Meteor.userId()                                                                              // 155\n      if (userId) {                                                                                             // 156\n        // user is logged in, leave session in tacted                                                           // 157\n      } else {                                                                                                  // 158\n        // user is unset, clear authencated keys                                                                // 159\n        self.clearAuth()                                                                                        // 160\n      }                                                                                                         // 161\n    }                                                                                                           // 162\n  });                                                                                                           // 163\n                                                                                                                // 164\n  return this;                                                                                                  // 165\n};                                                                                                              // 166\n                                                                                                                // 167\n// === LOCAL STORAGE INTERACTION ===                                                                            // 168\nPersistentSession.prototype.store = function _psStore(type, key, value) {                                       // 169\n  // use dict name for uniqueness                                                                               // 170\n  this.psKeyList  = amplify.store('__PSKEYS__' + this._dictName) || [];                                         // 171\n  this.psaKeyList = amplify.store('__PSAKEYS__' + this._dictName)|| [];                                         // 172\n                                                                                                                // 173\n  if (type == 'get') {                                                                                          // 174\n    return amplify.store(this._dictName + key);                                                                 // 175\n  } else {                                                                                                      // 176\n                                                                                                                // 177\n    this.psKeyList  = _.without(this.psKeyList, key);                                                           // 178\n    this.psaKeyList = _.without(this.psaKeyList, key);                                                          // 179\n    delete this.psKeys[key];                                                                                    // 180\n    delete this.psaKeys[key];                                                                                   // 181\n                                                                                                                // 182\n    if (value===undefined || value===null || type=='temporary') {                                               // 183\n      value = null;                                                                                             // 184\n                                                                                                                // 185\n    } else if (type=='persistent') {                                                                            // 186\n      this.psKeys[key] = EJSON.toJSONValue(value);                                                              // 187\n      this.psKeyList = _.union(this.psKeyList, [key]);                                                          // 188\n                                                                                                                // 189\n    } else if (type=='authenticated') {                                                                         // 190\n      this.psaKeys[key] = EJSON.toJSONValue(value);                                                             // 191\n      this.psaKeyList = _.union(this.psaKeyList, [key]);                                                        // 192\n    }                                                                                                           // 193\n                                                                                                                // 194\n    amplify.store('__PSKEYS__', this.psKeyList);                                                                // 195\n    amplify.store('__PSAKEYS__', this.psaKeyList);                                                              // 196\n    amplify.store(this._dictName + key, EJSON.toJSONValue(value));                                              // 197\n  }                                                                                                             // 198\n};                                                                                                              // 199\n                                                                                                                // 200\n                                                                                                                // 201\n// === GET ===                                                                                                  // 202\n// keep for backwards compability, redirect to this._dict                                                       // 203\nPersistentSession.prototype.old_get = function (/* arguments */){                                               // 204\n  return this._dict.get.apply(this._dict, arguments);                                                           // 205\n};                                                                                                              // 206\nPersistentSession.prototype.get = function _psGet(key) {                                                        // 207\n  var val = this.old_get(key);                                                                                  // 208\n  var psVal;                                                                                                    // 209\n  var unparsedPsVal = this.store('get', key);                                                                   // 210\n  if (unparsedPsVal !== undefined) {                                                                            // 211\n    psVal = EJSON.fromJSONValue(this.store('get', key));                                                        // 212\n  }                                                                                                             // 213\n                                                                                                                // 214\n  /*                                                                                                            // 215\n   * We can't do `return psVal || val;` here, as when psVal = undefined and                                     // 216\n   * val = 0, it will return undefined, even though 0 is the correct value.                                     // 217\n   */                                                                                                           // 218\n  if (psVal === undefined || psVal === null) {                                                                  // 219\n    return val;                                                                                                 // 220\n  }                                                                                                             // 221\n  return psVal;                                                                                                 // 222\n};                                                                                                              // 223\n                                                                                                                // 224\n                                                                                                                // 225\n// === SET ===                                                                                                  // 226\nPersistentSession.prototype.old_set = function (/* arguments */){                                               // 227\n  // defaults to a persistent, non-authenticated variable                                                       // 228\n  return this._dict.set.apply(this._dict, arguments);                                                           // 229\n};                                                                                                              // 230\nPersistentSession.prototype.set = function _psSet(keyOrObject, value, persist, auth) {                          // 231\n                                                                                                                // 232\n  // Taken from https://github.com/meteor/meteor/blob/107d858/packages/reactive-dict/reactive-dict.js           // 233\n  if ((typeof keyOrObject === 'object') && (value === undefined)) {                                             // 234\n    this._setObject(keyOrObject, persist, auth);                                                                // 235\n    return;                                                                                                     // 236\n  }                                                                                                             // 237\n                                                                                                                // 238\n  var key = keyOrObject;                                                                                        // 239\n  var type = 'temporary';                                                                                       // 240\n  if (persist || (persist===undefined && (this.default_method=='persistent' || this.default_method=='authenticated'))) {\n    if (auth || (persist===undefined && auth===undefined && this.default_method=='authenticated')) {            // 242\n      type = 'authenticated';                                                                                   // 243\n    } else {                                                                                                    // 244\n      type = 'persistent';                                                                                      // 245\n    }                                                                                                           // 246\n  }                                                                                                             // 247\n  this.store(type, key, value);                                                                                 // 248\n  this.old_set(key, value);                                                                                     // 249\n};                                                                                                              // 250\n                                                                                                                // 251\n                                                                                                                // 252\n// Taken from https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js#L144-L151   // 253\n// Backwords compat:                                                                                            // 254\nPersistentSession.prototype.all = function _psAll() {                                                           // 255\n  if (this._dict.allDeps) {                                                                                     // 256\n    this._dict.allDeps.depend();                                                                                // 257\n  }                                                                                                             // 258\n  var ret = {};                                                                                                 // 259\n  _.each(this._dict.keys, function(value, key) {                                                                // 260\n    ret[key] = parse(value);                                                                                    // 261\n  });                                                                                                           // 262\n  return ret;                                                                                                   // 263\n}                                                                                                               // 264\n                                                                                                                // 265\nPersistentSession.prototype._setObject = function _psSetObject(object, persist, auth) {                         // 266\n  var self = this;                                                                                              // 267\n                                                                                                                // 268\n  _.each(object, function (value, key){                                                                         // 269\n    self.set(key, value, persist, auth);                                                                        // 270\n  });                                                                                                           // 271\n};                                                                                                              // 272\n                                                                                                                // 273\nPersistentSession.prototype._ensureKey = function _psEnsureKey(key) {                                           // 274\n  var self = this._dict;                                                                                        // 275\n  if (!(key in self.keyDeps)) {                                                                                 // 276\n    self.keyDeps[key] = new Tracker.Dependency;                                                                 // 277\n    self.keyValueDeps[key] = {};                                                                                // 278\n  }                                                                                                             // 279\n}                                                                                                               // 280\n                                                                                                                // 281\n// === EQUALS ===                                                                                               // 282\n// Taken from https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js#L93-L137    // 283\nPersistentSession.prototype.equals = function _psEquals(key, value) {                                           // 284\n                                                                                                                // 285\n  // Mongo.ObjectID is in the 'mongo' package                                                                   // 286\n  var ObjectID = null;                                                                                          // 287\n  if (Package.mongo) {                                                                                          // 288\n    ObjectID = Package.mongo.Mongo.ObjectID;                                                                    // 289\n  }                                                                                                             // 290\n                                                                                                                // 291\n  // We don't allow objects (or arrays that might include objects) for                                          // 292\n  // .equals, because JSON.stringify doesn't canonicalize object key                                            // 293\n  // order. (We can make equals have the right return value by parsing the                                      // 294\n  // current value and using EJSON.equals, but we won't have a canonical                                        // 295\n  // element of keyValueDeps[key] to store the dependency.) You can still use                                   // 296\n  // \"EJSON.equals(reactiveDict.get(key), value)\".                                                              // 297\n  //                                                                                                            // 298\n  // XXX we could allow arrays as long as we recursively check that there                                       // 299\n  // are no objects                                                                                             // 300\n  if (typeof value !== 'string' &&                                                                              // 301\n      typeof value !== 'number' &&                                                                              // 302\n      typeof value !== 'boolean' &&                                                                             // 303\n      typeof value !== 'undefined' &&                                                                           // 304\n      !(value instanceof Date) &&                                                                               // 305\n      !(ObjectID && value instanceof ObjectID) &&                                                               // 306\n      value !== null) {                                                                                         // 307\n    throw new Error(\"ReactiveDict.equals: value must be scalar\");                                               // 308\n  }                                                                                                             // 309\n  var serializedValue = stringify(value);                                                                       // 310\n                                                                                                                // 311\n  if (Tracker.active) {                                                                                         // 312\n    this._ensureKey(key);                                                                                       // 313\n                                                                                                                // 314\n    if (! _.has(this._dict.keyValueDeps[key], serializedValue))                                                 // 315\n      this._dict.keyValueDeps[key][serializedValue] = new Tracker.Dependency;                                   // 316\n                                                                                                                // 317\n    var isNew = this._dict.keyValueDeps[key][serializedValue].depend();                                         // 318\n    if (isNew) {                                                                                                // 319\n      var that = this;                                                                                          // 320\n      Tracker.onInvalidate(function () {                                                                        // 321\n        // clean up [key][serializedValue] if it's now empty, so we don't                                       // 322\n        // use O(n) memory for n = values seen ever                                                             // 323\n        if (! that._dict.keyValueDeps[key][serializedValue].hasDependents())                                    // 324\n          delete that._dict.keyValueDeps[key][serializedValue];                                                 // 325\n      });                                                                                                       // 326\n    }                                                                                                           // 327\n  }                                                                                                             // 328\n                                                                                                                // 329\n  var oldValue = this.get(key);                                                                                 // 330\n                                                                                                                // 331\n  return EJSON.equals(oldValue, value);                                                                         // 332\n};                                                                                                              // 333\n                                                                                                                // 334\n// === SET TEMPORARY ===                                                                                        // 335\n// alias to .set(); sets a non-persistent variable                                                              // 336\nPersistentSession.prototype.setTemporary = function _psSetTemp(keyOrObject, value) {                            // 337\n  this.set(keyOrObject, value, false, false);                                                                   // 338\n};                                                                                                              // 339\nPersistentSession.prototype.setTemp = function _psSetTemp(keyOrObject, value) {                                 // 340\n  this.set(keyOrObject, value, false, false);                                                                   // 341\n};                                                                                                              // 342\n                                                                                                                // 343\n// === SET PERSISTENT ===                                                                                       // 344\n// alias to .set(); sets a persistent variable                                                                  // 345\nPersistentSession.prototype.setPersistent = function _psSetPersistent(keyOrObject, value) {                     // 346\n  this.set(keyOrObject, value, true, false);                                                                    // 347\n};                                                                                                              // 348\n                                                                                                                // 349\n// === SET AUTHENTICATED ===                                                                                    // 350\n// alias to .set(); sets a persistent variable that will be removed on logout                                   // 351\nPersistentSession.prototype.setAuth = function _psSetAuth(keyOrObject, value) {                                 // 352\n  this.set(keyOrObject, value, true, true);                                                                     // 353\n};                                                                                                              // 354\n                                                                                                                // 355\n                                                                                                                // 356\n// === MAKE TEMP / PERSISTENT / AUTH ===                                                                        // 357\n// change the type of session var                                                                               // 358\nPersistentSession.prototype.makeTemp = function _psMakeTemp(key) {                                              // 359\n  this.store('temporary', key);                                                                                 // 360\n};                                                                                                              // 361\nPersistentSession.prototype.makePersistent = function _psMakePersistent(key) {                                  // 362\n  var val = this.get(key);                                                                                      // 363\n  this.store('persistent', key, val);                                                                           // 364\n};                                                                                                              // 365\nPersistentSession.prototype.makeAuth = function _psMakeAuth(key) {                                              // 366\n  var val = this.get(key);                                                                                      // 367\n  this.store('authenticated', key, val);                                                                        // 368\n};                                                                                                              // 369\n                                                                                                                // 370\n                                                                                                                // 371\n                                                                                                                // 372\n// === CLEAR ===                                                                                                // 373\nPersistentSession.prototype.old_clear = function (/* arguments */){                                             // 374\n  return this._dict.clear.apply(this._dict, arguments);                                                         // 375\n};                                                                                                              // 376\n                                                                                                                // 377\n// more or less how it's implemented in reactive dict, but add support for removing single or arrays of keys    // 378\n// Derived from https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js#L153-L167\nPersistentSession.prototype.clear = function _psClear(key, list) {                                              // 380\n  var self = this;                                                                                              // 381\n  var oldKeys = self._dict.keys;                                                                                // 382\n                                                                                                                // 383\n  if ((key === undefined) && (list === undefined)) {                                                            // 384\n    list = oldKeys;                                                                                             // 385\n  } else if (!(key === undefined)) {                                                                            // 386\n    list = [key]                                                                                                // 387\n  } else {                                                                                                      // 388\n    // list = list                                                                                              // 389\n  }                                                                                                             // 390\n                                                                                                                // 391\n  // okay, if it was an array of keys, find the old key pairings for reactivity                                 // 392\n  if (_.isArray(list)){                                                                                         // 393\n    var oldList = list;                                                                                         // 394\n    var list = {}                                                                                               // 395\n    _.each(oldList, function (key) {                                                                            // 396\n      list[key] = oldKeys[key];                                                                                 // 397\n    });                                                                                                         // 398\n  }                                                                                                             // 399\n                                                                                                                // 400\n  _.each(list, function(value, akey) {                                                                          // 401\n    self.set(akey, undefined, false, false);                                                                    // 402\n                                                                                                                // 403\n    changed(self._dict.keyDeps[akey]);                                                                          // 404\n    if (self._dict.keyValueDeps[akey]) {                                                                        // 405\n      changed(self._dict.keyValueDeps[akey][value]);                                                            // 406\n      changed(self._dict.keyValueDeps[akey]['undefined']);                                                      // 407\n    }                                                                                                           // 408\n                                                                                                                // 409\n    delete self._dict.keys[akey]; // remove the key                                                             // 410\n  });                                                                                                           // 411\n                                                                                                                // 412\n  // reactive-dict 1.1.0+                                                                                       // 413\n  if (self._dict.allDeps) {                                                                                     // 414\n    self._dict.allDeps.changed();                                                                               // 415\n  }                                                                                                             // 416\n};                                                                                                              // 417\n                                                                                                                // 418\n                                                                                                                // 419\n// === CLEAR TEMP ===                                                                                           // 420\n// clears all the temporary keys                                                                                // 421\nPersistentSession.prototype.clearTemp = function _psClearTemp() {                                               // 422\n  this.clear(undefined, _.keys(_.omit(this._dict.keys, this.psKeys, this.psaKeys)));                            // 423\n};                                                                                                              // 424\n                                                                                                                // 425\n// === CLEAR PERSISTENT ===                                                                                     // 426\n// clears all persistent keys                                                                                   // 427\nPersistentSession.prototype.clearPersistent = function _psClearPersistent() {                                   // 428\n  this.clear(undefined, this.psKeys);                                                                           // 429\n};                                                                                                              // 430\n                                                                                                                // 431\n// === CLEAR AUTH ===                                                                                           // 432\n// clears all authenticated keys                                                                                // 433\nPersistentSession.prototype.clearAuth = function _psClearAuth() {                                               // 434\n  this.clear(undefined, this.psaKeys);                                                                          // 435\n};                                                                                                              // 436\n                                                                                                                // 437\n                                                                                                                // 438\n                                                                                                                // 439\n                                                                                                                // 440\n// === UPDATE ===                                                                                               // 441\n// updates the value of a session var without changing its type                                                 // 442\nPersistentSession.prototype.update = function _psUpdate(key, value) {                                           // 443\n  var persist, auth;                                                                                            // 444\n  if ( _.indexOf(this.psaKeyList, key) >= 0 ) { auth = true; }                                                  // 445\n  if ( auth || _.indexOf(this.psKeyList, key) >= 0 ) { persist = true; }                                        // 446\n  this.set(key, value, persist, auth);                                                                          // 447\n};                                                                                                              // 448\n                                                                                                                // 449\n// === SET DEFAULT ===                                                                                          // 450\nPersistentSession.prototype.old_setDefault = function (/* arguments */){                                        // 451\n  return this._dict.setDefault.apply(this._dict, arguments);                                                    // 452\n};                                                                                                              // 453\nPersistentSession.prototype.setDefault = function _psSetDefault(keyOrObject, value, persist, auth) {            // 454\n  var self = this;                                                                                              // 455\n                                                                                                                // 456\n  if (_.isObject(keyOrObject)) {                                                                                // 457\n    _.each(keyOrObject, function(value, key) {                                                                  // 458\n      self.setDefault(key, value, persist, auth);                                                               // 459\n    });                                                                                                         // 460\n    return;                                                                                                     // 461\n  }                                                                                                             // 462\n                                                                                                                // 463\n  if ( this.get(keyOrObject) === undefined) {                                                                   // 464\n    this.set(keyOrObject, value, persist, auth);                                                                // 465\n  }                                                                                                             // 466\n};                                                                                                              // 467\n                                                                                                                // 468\n// === SET DEFAULT TEMP ===                                                                                     // 469\nPersistentSession.prototype.setDefaultTemp = function _psSetDefaultTemp(keyOrObject, value) {                   // 470\n                                                                                                                // 471\n  if (_.isObject(keyOrObject)) {                                                                                // 472\n    value = undefined;                                                                                          // 473\n  }                                                                                                             // 474\n                                                                                                                // 475\n  this.setDefault(keyOrObject, value, false, false);                                                            // 476\n};                                                                                                              // 477\n                                                                                                                // 478\n// === SET DEFAULT PERSISTENT ===                                                                               // 479\nPersistentSession.prototype.setDefaultPersistent = function _psSetDefaultPersistent(keyOrObject, value) {       // 480\n                                                                                                                // 481\n  if (_.isObject(keyOrObject)) {                                                                                // 482\n    value = undefined;                                                                                          // 483\n  }                                                                                                             // 484\n                                                                                                                // 485\n  this.setDefault(keyOrObject, value, true, false);                                                             // 486\n};                                                                                                              // 487\n                                                                                                                // 488\n// === SET DEFAULT AUTH ===                                                                                     // 489\nPersistentSession.prototype.setDefaultAuth = function _psSetDefaultAuth(keyOrObject, value) {                   // 490\n                                                                                                                // 491\n  if (_.isObject(keyOrObject)) {                                                                                // 492\n    value = undefined;                                                                                          // 493\n  }                                                                                                             // 494\n                                                                                                                // 495\n  this.setDefault(keyOrObject, value, true, true);                                                              // 496\n};                                                                                                              // 497\n                                                                                                                // 498\n// automatically apply PersistentSession to Session                                                             // 499\nvar oldSession = _.clone(Session);                                                                              // 500\n_.extend(Session, new PersistentSession(\"session\"))                                                             // 501\n                                                                                                                // 502\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['u2622:persistent-session'] = {}, {\n  PersistentSession: PersistentSession\n});\n\n})();\n","servePath":"/packages/u2622_persistent-session.js","sourceMap":{"version":3,"sources":["/packages/u2622_persistent-session/lib/persistent_session.js"],"names":[],"mappingssH","file":"/packages/u2622_persistent-session.js","sourcesContent":["// This file uses code direct from Meteor's reactive-dict package, mostly from\n// this file: https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js\n//\n// helpers: https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js#L1-L16\nvar stringify = function (value) {\n  if (value === undefined)\n    return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function (serialized) {\n  if (serialized === undefined || serialized === 'undefined')\n    return undefined;\n  return EJSON.parse(serialized);\n};\n\nvar changed = function (v) {\n  v && v.changed();\n};\n\n\nPersistentSession = function (dictName) {\n  if (_.isString(dictName)) {\n    this._dictName = dictName;\n\n    // when \"session\", use the existing dict\n    if (dictName == \"session\") {\n      this._dictName = \"\"   // we don't need a name for session\n      this._dict = oldSession; // we also want to use the global (incase something was set previously)\n\n    // not session? create a new dict\n    } else {\n      this._dict = new ReactiveDict(dictName);\n    }\n\n  } else {\n    throw new Error(\"dictName must be a string\");\n  }\n\n\n  /*\n   * Used to determine if we need to migrate how the data is stored.\n   * Each time the data format changes, change this number.\n   *\n   * It should match the current major + minor version:\n   * EG: 0.3 = 3, 1.2 = 12, 2.0 = 20, or for 0.3.x: 3, or 1.x: 10\n   *\n   */\n  var PSA_DATA_VERSION = 4;\n\n  // === INITIALIZE KEY TRACKING ===\n  this.psKeys     = {};\n  this.psKeyList  = [];\n  this.psaKeys    = {};\n  this.psaKeyList = [];\n\n  // initialize default method setting\n  this.default_method = 'temporary'; // valid options: 'temporary', 'persistent', 'authenticated'\n  if (Meteor.settings &&\n      Meteor.settings.public &&\n      Meteor.settings.public.persistent_session) {\n    this.default_method = Meteor.settings.public.persistent_session.default_method;\n  }\n\n\n  var self = this;\n\n  // === HOUSEKEEPING ===\n  /*\n   * Converts previously stored values into EJSON compatible formats.\n   */\n  function migrateToEJSON() {\n    if (amplify.store('__PSDATAVERSION__' + self._dictName) >= 1) {\n      return;\n    }\n\n    var psKeyList = amplify.store('__PSKEYS__' + self._dictName);\n    var psaKeyList = amplify.store('__PSAKEYS__' + self._dictName);\n\n    _.each([psKeyList, psaKeyList], function(list) {\n      _.each(list, function(key) {\n        amplify.store(key, EJSON.stringify(amplify.store(key)));\n      });\n    });\n\n    amplify.store('__PSDATAVERSION__' + self._dictName, 2);\n  };\n\n  function migrate3Xto4X() {\n    if (amplify.store('__PSDATAVERSION__' + self._dictName) >= PSA_DATA_VERSION) {\n      return;\n    }\n\n    var psKeyList = amplify.store('__PSKEYS__' + self._dictName);\n    var psaKeyList = amplify.store('__PSAKEYS__' + self._dictName);\n\n    _.each([psKeyList, psaKeyList], function(list) {\n      _.each(list, function(key) {\n        var invalid = false;\n        try {\n          EJSON.parse(amplify.store(self._dictName+key));\n        } catch (error) {\n          //The data is already in the format that we expect\n          //Unfortunately there is no EJSON.canParse method\n          invalid = true;\n        }\n        if (!invalid) {\n          var parsed = EJSON.parse(amplify.store(self._dictName+key));\n          var jsoned = EJSON.toJSONValue(parsed);\n          amplify.store(self._dictName+key, jsoned);\n        }\n      });\n    });\n\n    amplify.store('__PSDATAVERSION__' + self._dictName, 4);\n  }\n\n  if (Meteor.isClient) {\n\n    // --- on startup, load persistent data back into meteor session ---\n    Meteor.startup(function(){\n      var val;\n\n      migrateToEJSON();\n      migrate3Xto4X();\n\n      // persistent data\n      var psList = amplify.store('__PSKEYS__' + self._dictName);\n      if ( typeof psList == \"object\" && psList.length!==undefined ) {\n        for (var i=0; i<psList.length; i++) {\n          if (!_.has(self._dict.keys, psList[i])) {\n            val = self.get(psList[i]);\n            self.set(psList[i], val, true, false);\n          }\n        }\n      }\n\n      // authenticated data\n      var psaList = amplify.store('__PSAKEYS__' + self._dictName);\n      if ( typeof psaList == \"object\" && psaList.length!==undefined ) {\n        for (var i=0; i<psaList.length; i++) {\n          if (!_.has(self._dict.keys, psaList[i])) {\n            val = self.get(psaList[i]);\n            self.setAuth(psaList[i], val, true, true);\n          }\n        }\n      }\n\n    });\n\n  };\n\n  Tracker.autorun(function () {\n    // lazy check for accounts-base\n    if (Meteor.userId) {\n      var userId = Meteor.userId()\n      if (userId) {\n        // user is logged in, leave session in tacted\n      } else {\n        // user is unset, clear authencated keys\n        self.clearAuth()\n      }\n    }\n  });\n\n  return this;\n};\n\n// === LOCAL STORAGE INTERACTION ===\nPersistentSession.prototype.store = function _psStore(type, key, value) {\n  // use dict name for uniqueness\n  this.psKeyList  = amplify.store('__PSKEYS__' + this._dictName) || [];\n  this.psaKeyList = amplify.store('__PSAKEYS__' + this._dictName)|| [];\n\n  if (type == 'get') {\n    return amplify.store(this._dictName + key);\n  } else {\n\n    this.psKeyList  = _.without(this.psKeyList, key);\n    this.psaKeyList = _.without(this.psaKeyList, key);\n    delete this.psKeys[key];\n    delete this.psaKeys[key];\n\n    if (value===undefined || value===null || type=='temporary') {\n      value = null;\n\n    } else if (type=='persistent') {\n      this.psKeys[key] = EJSON.toJSONValue(value);\n      this.psKeyList = _.union(this.psKeyList, [key]);\n\n    } else if (type=='authenticated') {\n      this.psaKeys[key] = EJSON.toJSONValue(value);\n      this.psaKeyList = _.union(this.psaKeyList, [key]);\n    }\n\n    amplify.store('__PSKEYS__', this.psKeyList);\n    amplify.store('__PSAKEYS__', this.psaKeyList);\n    amplify.store(this._dictName + key, EJSON.toJSONValue(value));\n  }\n};\n\n\n// === GET ===\n// keep for backwards compability, redirect to this._dict\nPersistentSession.prototype.old_get = function (/* arguments */){\n  return this._dict.get.apply(this._dict, arguments);\n};\nPersistentSession.prototype.get = function _psGet(key) {\n  var val = this.old_get(key);\n  var psVal;\n  var unparsedPsVal = this.store('get', key);\n  if (unparsedPsVal !== undefined) {\n    psVal = EJSON.fromJSONValue(this.store('get', key));\n  }\n\n  /*\n   * We can't do `return psVal || val;` here, as when psVal = undefined and\n   * val = 0, it will return undefined, even though 0 is the correct value.\n   */\n  if (psVal === undefined || psVal === null) {\n    return val;\n  }\n  return psVal;\n};\n\n\n// === SET ===\nPersistentSession.prototype.old_set = function (/* arguments */){\n  // defaults to a persistent, non-authenticated variable\n  return this._dict.set.apply(this._dict, arguments);\n};\nPersistentSession.prototype.set = function _psSet(keyOrObject, value, persist, auth) {\n\n  // Taken from https://github.com/meteor/meteor/blob/107d858/packages/reactive-dict/reactive-dict.js\n  if ((typeof keyOrObject === 'object') && (value === undefined)) {\n    this._setObject(keyOrObject, persist, auth);\n    return;\n  }\n\n  var key = keyOrObject;\n  var type = 'temporary';\n  if (persist || (persist===undefined && (this.default_method=='persistent' || this.default_method=='authenticated'))) {\n    if (auth || (persist===undefined && auth===undefined && this.default_method=='authenticated')) {\n      type = 'authenticated';\n    } else {\n      type = 'persistent';\n    }\n  }\n  this.store(type, key, value);\n  this.old_set(key, value);\n};\n\n\n// Taken from https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js#L144-L151\n// Backwords compat:\nPersistentSession.prototype.all = function _psAll() {\n  if (this._dict.allDeps) {\n    this._dict.allDeps.depend();\n  }\n  var ret = {};\n  _.each(this._dict.keys, function(value, key) {\n    ret[key] = parse(value);\n  });\n  return ret;\n}\n\nPersistentSession.prototype._setObject = function _psSetObject(object, persist, auth) {\n  var self = this;\n\n  _.each(object, function (value, key){\n    self.set(key, value, persist, auth);\n  });\n};\n\nPersistentSession.prototype._ensureKey = function _psEnsureKey(key) {\n  var self = this._dict;\n  if (!(key in self.keyDeps)) {\n    self.keyDeps[key] = new Tracker.Dependency;\n    self.keyValueDeps[key] = {};\n  }\n}\n\n// === EQUALS ===\n// Taken from https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js#L93-L137\nPersistentSession.prototype.equals = function _psEquals(key, value) {\n\n  // Mongo.ObjectID is in the 'mongo' package\n  var ObjectID = null;\n  if (Package.mongo) {\n    ObjectID = Package.mongo.Mongo.ObjectID;\n  }\n\n  // We don't allow objects (or arrays that might include objects) for\n  // .equals, because JSON.stringify doesn't canonicalize object key\n  // order. (We can make equals have the right return value by parsing the\n  // current value and using EJSON.equals, but we won't have a canonical\n  // element of keyValueDeps[key] to store the dependency.) You can still use\n  // \"EJSON.equals(reactiveDict.get(key), value)\".\n  //\n  // XXX we could allow arrays as long as we recursively check that there\n  // are no objects\n  if (typeof value !== 'string' &&\n      typeof value !== 'number' &&\n      typeof value !== 'boolean' &&\n      typeof value !== 'undefined' &&\n      !(value instanceof Date) &&\n      !(ObjectID && value instanceof ObjectID) &&\n      value !== null) {\n    throw new Error(\"ReactiveDict.equals: value must be scalar\");\n  }\n  var serializedValue = stringify(value);\n\n  if (Tracker.active) {\n    this._ensureKey(key);\n\n    if (! _.has(this._dict.keyValueDeps[key], serializedValue))\n      this._dict.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n\n    var isNew = this._dict.keyValueDeps[key][serializedValue].depend();\n    if (isNew) {\n      var that = this;\n      Tracker.onInvalidate(function () {\n        // clean up [key][serializedValue] if it's now empty, so we don't\n        // use O(n) memory for n = values seen ever\n        if (! that._dict.keyValueDeps[key][serializedValue].hasDependents())\n          delete that._dict.keyValueDeps[key][serializedValue];\n      });\n    }\n  }\n\n  var oldValue = this.get(key);\n\n  return EJSON.equals(oldValue, value);\n};\n\n// === SET TEMPORARY ===\n// alias to .set(); sets a non-persistent variable\nPersistentSession.prototype.setTemporary = function _psSetTemp(keyOrObject, value) {\n  this.set(keyOrObject, value, false, false);\n};\nPersistentSession.prototype.setTemp = function _psSetTemp(keyOrObject, value) {\n  this.set(keyOrObject, value, false, false);\n};\n\n// === SET PERSISTENT ===\n// alias to .set(); sets a persistent variable\nPersistentSession.prototype.setPersistent = function _psSetPersistent(keyOrObject, value) {\n  this.set(keyOrObject, value, true, false);\n};\n\n// === SET AUTHENTICATED ===\n// alias to .set(); sets a persistent variable that will be removed on logout\nPersistentSession.prototype.setAuth = function _psSetAuth(keyOrObject, value) {\n  this.set(keyOrObject, value, true, true);\n};\n\n\n// === MAKE TEMP / PERSISTENT / AUTH ===\n// change the type of session var\nPersistentSession.prototype.makeTemp = function _psMakeTemp(key) {\n  this.store('temporary', key);\n};\nPersistentSession.prototype.makePersistent = function _psMakePersistent(key) {\n  var val = this.get(key);\n  this.store('persistent', key, val);\n};\nPersistentSession.prototype.makeAuth = function _psMakeAuth(key) {\n  var val = this.get(key);\n  this.store('authenticated', key, val);\n};\n\n\n\n// === CLEAR ===\nPersistentSession.prototype.old_clear = function (/* arguments */){\n  return this._dict.clear.apply(this._dict, arguments);\n};\n\n// more or less how it's implemented in reactive dict, but add support for removing single or arrays of keys\n// Derived from https://github.com/meteor/meteor/blob/0ef65cc/packages/reactive-dict/reactive-dict.js#L153-L167\nPersistentSession.prototype.clear = function _psClear(key, list) {\n  var self = this;\n  var oldKeys = self._dict.keys;\n\n  if ((key === undefined) && (list === undefined)) {\n    list = oldKeys;\n  } else if (!(key === undefined)) {\n    list = [key]\n  } else {\n    // list = list\n  }\n\n  // okay, if it was an array of keys, find the old key pairings for reactivity\n  if (_.isArray(list)){\n    var oldList = list;\n    var list = {}\n    _.each(oldList, function (key) {\n      list[key] = oldKeys[key];\n    });\n  }\n\n  _.each(list, function(value, akey) {\n    self.set(akey, undefined, false, false);\n\n    changed(self._dict.keyDeps[akey]);\n    if (self._dict.keyValueDeps[akey]) {\n      changed(self._dict.keyValueDeps[akey][value]);\n      changed(self._dict.keyValueDeps[akey]['undefined']);\n    }\n\n    delete self._dict.keys[akey]; // remove the key\n  });\n\n  // reactive-dict 1.1.0+\n  if (self._dict.allDeps) {\n    self._dict.allDeps.changed();\n  }\n};\n\n\n// === CLEAR TEMP ===\n// clears all the temporary keys\nPersistentSession.prototype.clearTemp = function _psClearTemp() {\n  this.clear(undefined, _.keys(_.omit(this._dict.keys, this.psKeys, this.psaKeys)));\n};\n\n// === CLEAR PERSISTENT ===\n// clears all persistent keys\nPersistentSession.prototype.clearPersistent = function _psClearPersistent() {\n  this.clear(undefined, this.psKeys);\n};\n\n// === CLEAR AUTH ===\n// clears all authenticated keys\nPersistentSession.prototype.clearAuth = function _psClearAuth() {\n  this.clear(undefined, this.psaKeys);\n};\n\n\n\n\n// === UPDATE ===\n// updates the value of a session var without changing its type\nPersistentSession.prototype.update = function _psUpdate(key, value) {\n  var persist, auth;\n  if ( _.indexOf(this.psaKeyList, key) >= 0 ) { auth = true; }\n  if ( auth || _.indexOf(this.psKeyList, key) >= 0 ) { persist = true; }\n  this.set(key, value, persist, auth);\n};\n\n// === SET DEFAULT ===\nPersistentSession.prototype.old_setDefault = function (/* arguments */){\n  return this._dict.setDefault.apply(this._dict, arguments);\n};\nPersistentSession.prototype.setDefault = function _psSetDefault(keyOrObject, value, persist, auth) {\n  var self = this;\n\n  if (_.isObject(keyOrObject)) {\n    _.each(keyOrObject, function(value, key) {\n      self.setDefault(key, value, persist, auth);\n    });\n    return;\n  }\n\n  if ( this.get(keyOrObject) === undefined) {\n    this.set(keyOrObject, value, persist, auth);\n  }\n};\n\n// === SET DEFAULT TEMP ===\nPersistentSession.prototype.setDefaultTemp = function _psSetDefaultTemp(keyOrObject, value) {\n\n  if (_.isObject(keyOrObject)) {\n    value = undefined; \n  }\n\n  this.setDefault(keyOrObject, value, false, false);\n};\n\n// === SET DEFAULT PERSISTENT ===\nPersistentSession.prototype.setDefaultPersistent = function _psSetDefaultPersistent(keyOrObject, value) {\n\n  if (_.isObject(keyOrObject)) {\n    value = undefined; \n  }\n\n  this.setDefault(keyOrObject, value, true, false);\n};\n\n// === SET DEFAULT AUTH ===\nPersistentSession.prototype.setDefaultAuth = function _psSetDefaultAuth(keyOrObject, value) {\n\n  if (_.isObject(keyOrObject)) {\n    value = undefined; \n  }\n\n  this.setDefault(keyOrObject, value, true, true);\n};\n\n// automatically apply PersistentSession to Session\nvar oldSession = _.clone(Session);\n_.extend(Session, new PersistentSession(\"session\"))\n"]}}]