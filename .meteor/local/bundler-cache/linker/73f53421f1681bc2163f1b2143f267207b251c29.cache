[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar AutoForm = Package['aldeed:autoform'].AutoForm;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar notoriiArray = Package['notorii:array'].notoriiArray;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\n\n/* Package-scope variables */\nvar lmAfAutocomplete;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lukemadera_autoform-autocomplete/template.autoform-autocomplete.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afAutocomplete\");                                                                                // 2\nTemplate[\"afAutocomplete\"] = new Template(\"Template.afAutocomplete\", (function() {                                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"lm-autoform-autocomplete-input-cont\"                                                                     // 6\n  }, \"\\n\\n    \", Blaze.If(function() {                                                                                 // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\"opts\"), \"multi\"));                                                // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n      \", HTML.DIV({                                                                                    // 10\n      \"class\": \"lm-autoform-autocomplete-input-multi-cont\"                                                             // 11\n    }, \"\\n        \", Blaze.Each(function() {                                                                           // 12\n      return Spacebars.call(view.lookup(\"values\"));                                                                    // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n          \", HTML.DIV({                                                                              // 15\n        \"class\": \"lm-autoform-autocomplete-selected-value\"                                                             // 16\n      }, \"\\n            \", HTML.Comment(\" <div class='lm-autoform-autocomplete-selected-value-remove'>x</div> \"), \"\\n            \", Blaze.If(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));                                         // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n              \", Blaze.View(\"lookup:xDisplay.name\", function() {                                   // 20\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));                                   // 21\n        }), \"\\n            \" ];                                                                                        // 22\n      }, function() {                                                                                                  // 23\n        return [ \"\\n              \", Blaze.View(\"lookup:name\", function() {                                            // 24\n          return Spacebars.mustache(view.lookup(\"name\"));                                                              // 25\n        }), \"\\n            \" ];                                                                                        // 26\n      }), \"\\n          \"), \"\\n        \" ];                                                                             // 27\n    }), \"\\n        \", HTML.INPUT(HTML.Attrs({                                                                          // 28\n      type: \"text\",                                                                                                    // 29\n      \"class\": \"lm-autoform-autocomplete-input\"                                                                        // 30\n    }, function() {                                                                                                    // 31\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 32\n    })), \"\\n      \"), \"\\n    \" ];                                                                                      // 33\n  }, function() {                                                                                                      // 34\n    return [ \"\\n      \", HTML.INPUT(HTML.Attrs({                                                                       // 35\n      type: \"text\",                                                                                                    // 36\n      \"class\": \"lm-autoform-autocomplete-input\"                                                                        // 37\n    }, function() {                                                                                                    // 38\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 39\n    })), \"\\n    \" ];                                                                                                   // 40\n  }), \"\\n    \\n    \", HTML.DIV({                                                                                       // 41\n    \"class\": function() {                                                                                              // 42\n      return [ \"lm-autoform-autocomplete-predictions \", Spacebars.mustache(Spacebars.dot(view.lookup(\"classes\"), \"predictions\")) ];\n    }                                                                                                                  // 44\n  }, \"\\n      \", Blaze.Each(function() {                                                                               // 45\n    return Spacebars.call(view.lookup(\"predictions\"));                                                                 // 46\n  }, function() {                                                                                                      // 47\n    return [ \"\\n        \", HTML.DIV({                                                                                  // 48\n      \"class\": \"lm-autoform-autocomplete-prediction-item\"                                                              // 49\n    }, \"\\n          \", Blaze.If(function() {                                                                           // 50\n      return Spacebars.call(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));                                           // 51\n    }, function() {                                                                                                    // 52\n      return [ \"\\n            \", Blaze.View(\"lookup:xDisplay.name\", function() {                                       // 53\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));                                     // 54\n      }), \"\\n          \" ];                                                                                            // 55\n    }, function() {                                                                                                    // 56\n      return [ \"\\n            \", Blaze.View(\"lookup:name\", function() {                                                // 57\n        return Spacebars.mustache(view.lookup(\"name\"));                                                                // 58\n      }), \"\\n          \" ];                                                                                            // 59\n    }), \"\\n        \"), \"\\n      \" ];                                                                                   // 60\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 61\n}));                                                                                                                   // 62\n                                                                                                                       // 63\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/lukemadera_autoform-autocomplete/autoform-autocomplete.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n@param {Object} [atts.opts]                                                                                            // 2\n  @param {String} [instid] Required to use any external API calls                                                      // 3\n  @param {Number} [multi =0] Set to 1 to make a multi select rather than a normal select                               // 4\n  @param {Boolean} [createNew =false] True to allow creating a new value (instead of \"no results\" being displayed, the entered value will be displayed and will be given a value of newNamePrefix+name for uniquely identifying and then (optionally) using to create / save this new value to the database for next time)\n  @param {String} [newNamePrefix ='__'] The prefix that will be used for creating a new name (if no match)             // 6\n  @param {Function} getPredictions The function to call to look up predictions for the autocomplete. It is passed:     // 7\n    @param {String} name The text input by the user to look up / match to                                              // 8\n    @param {Object} [params]                                                                                           // 9\n    @return {Object}                                                                                                   // 10\n      @param {Array} predictions Array of objects with the predictions. Each object should have:                       // 11\n        @param {String} value                                                                                          // 12\n        @param {String} name                                                                                           // 13\n  @param {Function} [onUpdateVals] A function to call every time value(s) are updated (set, added, removed). It is passed either an array of objects (if multi) or just one object.\n    @param {String} optsInstid The same atts.opts.instid that was passed in (to uniquely identify)                     // 15\n    @param {Object|Array} vals Array if multi is set, object otherwise of:                                             // 16\n      @param {String} value                                                                                            // 17\n      @param {String} name Set if multi                                                                                // 18\n                                                                                                                       // 19\n                                                                                                                       // 20\nAPI is all the lmAfAutocomplete functions (see below)                                                                  // 21\n                                                                                                                       // 22\n                                                                                                                       // 23\n@toc                                                                                                                   // 24\nlmAfAutocomplete.                                                                                                      // 25\n  3. setVals                                                                                                           // 26\n  15. removeVals                                                                                                       // 27\n  16. addVals                                                                                                          // 28\n  18. removeAllVals                                                                                                    // 29\nlmAfAutocompletePrivate.                                                                                               // 30\n  17. onUpdateVals                                                                                                     // 31\n  19. focusInput                                                                                                       // 32\n  12. getTemplateInst                                                                                                  // 33\n  1. init                                                                                                              // 34\n  13. destroy                                                                                                          // 35\n  2. initOpts                                                                                                          // 36\n  4. getPredictions                                                                                                    // 37\n  5. hide                                                                                                              // 38\n  6. show                                                                                                              // 39\n7. AutoForm.addInputType(\"lmautocomplete\",..                                                                           // 40\nTemplate.afAutocomplete.                                                                                               // 41\n  8. created                                                                                                           // 42\n  9. rendered                                                                                                          // 43\n  14. destroyed                                                                                                        // 44\n  10. helpers                                                                                                          // 45\n  11. events                                                                                                           // 46\n*/                                                                                                                     // 47\n                                                                                                                       // 48\nlmAfAutocomplete ={};                                                                                                  // 49\n                                                                                                                       // 50\nvar lmAfAutocompletePrivate ={};                                                                                       // 51\n                                                                                                                       // 52\n/**                                                                                                                    // 53\n//for external calls in, need to store reference to template instance to get the correct one so for EACH instance of this package / template, will store two values: a passed in instid (for external reference) as a key and that is an object with the internal template instance. This will allow going back and forth between the two and allow external interaction with the proper template instance.\n@example                                                                                                               // 55\n  lmAfAutocompletePrivate.inst ={                                                                                      // 56\n    'inst1': {                                                                                                         // 57\n      templateInst: templateInst1,                                                                                     // 58\n      optsInstid: '',                                                                                                  // 59\n      values: [{value: 'val1', name:'name1'}],                                                                         // 60\n      multi: 0                                                                                                         // 61\n    },                                                                                                                 // 62\n    'inst2': {                                                                                                         // 63\n      templateInst: templateInst2,                                                                                     // 64\n      optsInstid: 'asfdlkjl3lajkf',                                                                                    // 65\n      values: [{value: 'val2', name:'name2'}],                                                                         // 66\n      multi: 1                                                                                                         // 67\n    }                                                                                                                  // 68\n  };                                                                                                                   // 69\n*/                                                                                                                     // 70\nlmAfAutocompletePrivate.inst ={};                                                                                      // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n@toc 3.                                                                                                                // 74\n@param {Array|Object} vals Array of objects (or one single object) to set, each object has:                            // 75\n  @param {String} [value] If not set, will be assumed it is a NEW value to add                                         // 76\n  @param {String} name The display text                                                                                // 77\n@param {Object} params                                                                                                 // 78\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required                  // 79\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)                  // 80\n*/                                                                                                                     // 81\nlmAfAutocomplete.setVals =function(vals, params) {                                                                     // 82\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {                      // 83\n    vals =[vals];                                                                                                      // 84\n  }                                                                                                                    // 85\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);                                                   // 86\n  if(templateInst) {                                                                                                   // 87\n    var instid =templateInst.data.atts['data-schema-key'];                                                             // 88\n                                                                                                                       // 89\n    //if no multi, only set/add ONE                                                                                    // 90\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {                                                                  // 91\n      vals =vals.slice(0, 1);                                                                                          // 92\n    }                                                                                                                  // 93\n                                                                                                                       // 94\n    var opts =templateInst.opts.get();                                                                                 // 95\n    var ii;                                                                                                            // 96\n    for(ii =0; ii<vals.length; ii++) {                                                                                 // 97\n      if(vals[ii].value ===undefined || !vals[ii].value) {                                                             // 98\n        vals[ii].value =opts.newNamePrefix+vals[ii].name;                                                              // 99\n      }                                                                                                                // 100\n    }                                                                                                                  // 101\n                                                                                                                       // 102\n    lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, vals, {});                                              // 103\n  }                                                                                                                    // 104\n};                                                                                                                     // 105\n                                                                                                                       // 106\n/**                                                                                                                    // 107\n@toc 15.                                                                                                               // 108\n@param {Array|Object} vals Array of objects (or one single object) to remove, each object has:                         // 109\n  @param {String} value                                                                                                // 110\n@param {Object} params                                                                                                 // 111\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required                  // 112\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)                  // 113\n  // @param {Boolean} [noOnUpdate] True to NOT run the on update (i.e. if just using this to remove all values befor ea set, do not want to call it twice)\n*/                                                                                                                     // 115\nlmAfAutocomplete.removeVals =function(vals, params) {                                                                  // 116\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {                      // 117\n    vals =[vals];                                                                                                      // 118\n  }                                                                                                                    // 119\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);                                                   // 120\n  if(templateInst) {                                                                                                   // 121\n    var instid =templateInst.data.atts['data-schema-key'];                                                             // 122\n    var curVals =lmAfAutocompletePrivate.inst[instid].values;                                                          // 123\n    var ii, index1;                                                                                                    // 124\n    //have to go through from the END since removing elements and do not want to mess up indices                       // 125\n    for(ii =(curVals.length-1); ii>=0; ii--) {                                                                         // 126\n      index1 =notoriiArray.findArrayIndex(vals, 'value', curVals[ii].value, {});                                       // 127\n      if(index1 >-1) {                                                                                                 // 128\n        curVals =notoriiArray.remove(curVals, ii);                                                                     // 129\n      }                                                                                                                // 130\n    }                                                                                                                  // 131\n                                                                                                                       // 132\n    // if(params.noOnUpdate ===undefined || !params.noOnUpdate) {                                                      // 133\n      lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, curVals, {});                                         // 134\n    // }                                                                                                               // 135\n  }                                                                                                                    // 136\n};                                                                                                                     // 137\n                                                                                                                       // 138\n/**                                                                                                                    // 139\n@toc 16.                                                                                                               // 140\n@param {Array|Object} vals Array of objects (or one single object) to add, each object has:                            // 141\n  @param {String} value                                                                                                // 142\n@param {Object} params                                                                                                 // 143\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required                  // 144\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)                  // 145\n*/                                                                                                                     // 146\nlmAfAutocomplete.addVals =function(vals, params) {                                                                     // 147\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {                      // 148\n    vals =[vals];                                                                                                      // 149\n  }                                                                                                                    // 150\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);                                                   // 151\n  if(templateInst) {                                                                                                   // 152\n    var instid =templateInst.data.atts['data-schema-key'];                                                             // 153\n                                                                                                                       // 154\n    //if no multi, clear out first and only set/add ONE                                                                // 155\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {                                                                  // 156\n      lmAfAutocomplete.removeAllVals(params);                                                                          // 157\n      vals =vals.slice(0, 1);                                                                                          // 158\n    }                                                                                                                  // 159\n                                                                                                                       // 160\n    var curVals =lmAfAutocompletePrivate.inst[instid].values;                                                          // 161\n    var ii, index1;                                                                                                    // 162\n    for(ii =0; ii<vals.length; ii++) {                                                                                 // 163\n      index1 =notoriiArray.findArrayIndex(curVals, 'value', vals[ii].value, {});                                       // 164\n      if(index1 <0) {                                                                                                  // 165\n        curVals.push(vals[ii]);                                                                                        // 166\n      }                                                                                                                // 167\n    }                                                                                                                  // 168\n                                                                                                                       // 169\n    lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, curVals, {});                                           // 170\n  }                                                                                                                    // 171\n};                                                                                                                     // 172\n                                                                                                                       // 173\n/**                                                                                                                    // 174\n@toc 18.                                                                                                               // 175\n@param {Object} params                                                                                                 // 176\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required                  // 177\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)                  // 178\n  // @param {Boolean} [noOnUpdate] True to NOT run the on update (i.e. if just using this to remove all values befor ea set, do not want to call it twice)\n*/                                                                                                                     // 180\nlmAfAutocomplete.removeAllVals =function(params) {                                                                     // 181\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);                                                   // 182\n  if(templateInst) {                                                                                                   // 183\n    var instid =templateInst.data.atts['data-schema-key'];                                                             // 184\n    var curVals =[];                                                                                                   // 185\n    lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, curVals, {});                                           // 186\n  }                                                                                                                    // 187\n};                                                                                                                     // 188\n                                                                                                                       // 189\n                                                                                                                       // 190\n                                                                                                                       // 191\n/**                                                                                                                    // 192\n@toc 17.                                                                                                               // 193\n*/                                                                                                                     // 194\nlmAfAutocompletePrivate.onUpdateVals =function(instid, templateInst, vals, params) {                                   // 195\n  //update UI too                                                                                                      // 196\n  var ele =templateInst.find('input.lm-autoform-autocomplete-input');                                                  // 197\n  if(lmAfAutocompletePrivate.inst[instid].multi) {                                                                     // 198\n    ele.value ='';    //blank out                                                                                      // 199\n  }                                                                                                                    // 200\n  else if(vals.length) {                                                                                               // 201\n    ele.value =vals[0].name;                                                                                           // 202\n  }                                                                                                                    // 203\n                                                                                                                       // 204\n  lmAfAutocompletePrivate.inst[instid].values =vals;                                                                   // 205\n  templateInst.values.set(vals);                                                                                       // 206\n  lmAfAutocompletePrivate.hide(templateInst, {});                                                                      // 207\n                                                                                                                       // 208\n  if(vals.length && templateInst.data.atts.opts.instid !==undefined && templateInst.data.atts.opts.onUpdateVals !==undefined) {\n    var valToSend =vals;                                                                                               // 210\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {                                                                  // 211\n      valToSend =valToSend[0];                                                                                         // 212\n    }                                                                                                                  // 213\n    templateInst.data.atts.opts.onUpdateVals.call(templateInst, templateInst.data.atts.opts.instid, valToSend, {});    // 214\n  }                                                                                                                    // 215\n};                                                                                                                     // 216\n                                                                                                                       // 217\n/**                                                                                                                    // 218\n@toc 19.                                                                                                               // 219\n*/                                                                                                                     // 220\nlmAfAutocompletePrivate.focusInput =function(templateInst, params) {                                                   // 221\n  var ele =templateInst.find('input.lm-autoform-autocomplete-input');                                                  // 222\n  ele.focus();                                                                                                         // 223\n};                                                                                                                     // 224\n                                                                                                                       // 225\n/**                                                                                                                    // 226\n@toc 12.                                                                                                               // 227\n@param {Object} params                                                                                                 // 228\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required                  // 229\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)                  // 230\n*/                                                                                                                     // 231\nlmAfAutocompletePrivate.getTemplateInst =function(params) {                                                            // 232\n  var templateInst =false;                                                                                             // 233\n  if(params.templateInst) {                                                                                            // 234\n    templateInst =params.templateInst;                                                                                 // 235\n  }                                                                                                                    // 236\n  else if(params.instid) {                                                                                             // 237\n    if(lmAfAutocompletePrivate.inst[params.instid] !==undefined) {                                                     // 238\n      templateInst =lmAfAutocompletePrivate.inst[params.instid].templateInst;                                          // 239\n    }                                                                                                                  // 240\n  }                                                                                                                    // 241\n  else if(params.optsInstid) {                                                                                         // 242\n    var xx;                                                                                                            // 243\n    for(xx in lmAfAutocompletePrivate.inst) {                                                                          // 244\n      if(lmAfAutocompletePrivate.inst[xx].optsInstid ===params.optsInstid) {                                           // 245\n        templateInst =lmAfAutocompletePrivate.inst[xx].templateInst;                                                   // 246\n        break;                                                                                                         // 247\n      }                                                                                                                // 248\n    }                                                                                                                  // 249\n  }                                                                                                                    // 250\n  return templateInst;                                                                                                 // 251\n}                                                                                                                      // 252\n                                                                                                                       // 253\n/**                                                                                                                    // 254\n@toc 1.                                                                                                                // 255\n*/                                                                                                                     // 256\nlmAfAutocompletePrivate.init =function(templateInst, params) {                                                         // 257\n  this.initOpts(templateInst, params);                                                                                 // 258\n                                                                                                                       // 259\n  var vals =templateInst.data.value;                                                                                   // 260\n  if(vals ===undefined || !vals) {                                                                                     // 261\n    vals =[];                                                                                                          // 262\n  }                                                                                                                    // 263\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {                      // 264\n    vals =[vals];                                                                                                      // 265\n  }                                                                                                                    // 266\n                                                                                                                       // 267\n  lmAfAutocomplete.setVals(vals, {templateInst:templateInst});                                                         // 268\n};                                                                                                                     // 269\n                                                                                                                       // 270\n/**                                                                                                                    // 271\n@toc 13.                                                                                                               // 272\n*/                                                                                                                     // 273\nlmAfAutocompletePrivate.destroy =function(templateInst, params) {                                                      // 274\n  //remove instid id key                                                                                               // 275\n  var xx;                                                                                                              // 276\n  for(xx in lmAfAutocompletePrivate.inst) {                                                                            // 277\n    if(lmAfAutocompletePrivate.inst[xx].templateInst ===templateInst) {                                                // 278\n      delete lmAfAutocompletePrivate.inst[xx];                                                                         // 279\n      break;                                                                                                           // 280\n    }                                                                                                                  // 281\n  }                                                                                                                    // 282\n};                                                                                                                     // 283\n                                                                                                                       // 284\n/**                                                                                                                    // 285\n@toc 2.                                                                                                                // 286\n*/                                                                                                                     // 287\nlmAfAutocompletePrivate.initOpts =function(templateInst, params) {                                                     // 288\n  var optsDefault ={                                                                                                   // 289\n    newNamePrefix: '__',                                                                                               // 290\n    multi: 0,                                                                                                          // 291\n    createNew: false                                                                                                   // 292\n  };                                                                                                                   // 293\n  var xx, opts;                                                                                                        // 294\n  opts =EJSON.clone(templateInst.data.atts.opts);                                                                      // 295\n  if(opts ===undefined) {                                                                                              // 296\n    opts =EJSON.clone(optsDefault);                                                                                    // 297\n  }                                                                                                                    // 298\n  else {                                                                                                               // 299\n    //extend                                                                                                           // 300\n    for(xx in optsDefault) {                                                                                           // 301\n      if(opts[xx] ===undefined) {                                                                                      // 302\n        opts[xx] =optsDefault[xx];                                                                                     // 303\n      }                                                                                                                // 304\n    }                                                                                                                  // 305\n  }                                                                                                                    // 306\n  opts.multi =parseInt(opts.multi, 10);                                                                                // 307\n                                                                                                                       // 308\n  if(opts.instid ===undefined) {                                                                                       // 309\n    console.log('lmAfAutocomplete: opts.instid not set (it is required if you want to use any (external) api calls)');\n    opts.instid =false;                                                                                                // 311\n  }                                                                                                                    // 312\n  var instid =templateInst.data.atts['data-schema-key'];                                                               // 313\n  lmAfAutocompletePrivate.inst[instid] ={                                                                              // 314\n    templateInst: templateInst,                                                                                        // 315\n    optsInstid: opts.instid,                                                                                           // 316\n    multi: opts.multi,                                                                                                 // 317\n    values: []                                                                                                         // 318\n  };                                                                                                                   // 319\n                                                                                                                       // 320\n  templateInst.opts.set(opts);                                                                                         // 321\n};                                                                                                                     // 322\n                                                                                                                       // 323\n/**                                                                                                                    // 324\n@toc 4.                                                                                                                // 325\n@param {Object} params                                                                                                 // 326\n  @param {Boolean} [noShow] True to NOT display predictions                                                            // 327\n*/                                                                                                                     // 328\nlmAfAutocompletePrivate.getPredictions =function(templateInst, val, params) {                                          // 329\n  var predictions =[];                                                                                                 // 330\n  var retPredictions =templateInst.data.atts.opts.getPredictions.call(templateInst, val, {});                          // 331\n  predictions =retPredictions.predictions;                                                                             // 332\n  if(!predictions.length) {                                                                                            // 333\n    //if none and allow create new, show the val for allowing creation                                                 // 334\n    if(templateInst.data.atts.opts.createNew) {                                                                        // 335\n      predictions =[                                                                                                   // 336\n        {                                                                                                              // 337\n          name: val,                                                                                                   // 338\n          value: '',                                                                                                   // 339\n          xDisplay: {                                                                                                  // 340\n            name: '*'+val                                                                                              // 341\n          }                                                                                                            // 342\n        }                                                                                                              // 343\n      ];                                                                                                               // 344\n    }                                                                                                                  // 345\n  }                                                                                                                    // 346\n  else {                                                                                                               // 347\n    //filter out already selected values                                                                               // 348\n    var instid =templateInst.data.atts['data-schema-key'];                                                             // 349\n    var curVals =lmAfAutocompletePrivate.inst[instid].values;                                                          // 350\n    var ii, index1;                                                                                                    // 351\n    for(ii =(predictions.length-1); ii>=0; ii--) {                                                                     // 352\n      index1 =notoriiArray.findArrayIndex(curVals, 'value', predictions[ii].value, {});                                // 353\n      if(index1 >-1) {                                                                                                 // 354\n        predictions =notoriiArray.remove(predictions, ii);                                                             // 355\n      }                                                                                                                // 356\n    }                                                                                                                  // 357\n  }                                                                                                                    // 358\n  templateInst.predictions.set(predictions);                                                                           // 359\n  if(params.noShow ===undefined || !params.noShow) {                                                                   // 360\n    this.show(templateInst, {});                                                                                       // 361\n  }                                                                                                                    // 362\n};                                                                                                                     // 363\n                                                                                                                       // 364\n/**                                                                                                                    // 365\n@toc 5.                                                                                                                // 366\n*/                                                                                                                     // 367\nlmAfAutocompletePrivate.hide =function(templateInst, params) {                                                         // 368\n  var classes =templateInst.classes.get();                                                                             // 369\n  classes.predictions ='hidden';                                                                                       // 370\n  templateInst.classes.set(classes);                                                                                   // 371\n};                                                                                                                     // 372\n                                                                                                                       // 373\n/**                                                                                                                    // 374\n@toc 6.                                                                                                                // 375\n*/                                                                                                                     // 376\nlmAfAutocompletePrivate.show =function(templateInst, params) {                                                         // 377\n  var classes =templateInst.classes.get();                                                                             // 378\n  classes.predictions ='visible';                                                                                      // 379\n  templateInst.classes.set(classes);                                                                                   // 380\n};                                                                                                                     // 381\n                                                                                                                       // 382\n/**                                                                                                                    // 383\n@toc 7.                                                                                                                // 384\n*/                                                                                                                     // 385\nAutoForm.addInputType(\"lmautocomplete\", {                                                                              // 386\n  template: \"afAutocomplete\",                                                                                          // 387\n  valueIn: function(val) {                                                                                             // 388\n    //will convert to display value later after set / extend opts                                                      // 389\n    return val;                                                                                                        // 390\n  },                                                                                                                   // 391\n  valueOut: function() {                                                                                               // 392\n    var instid =this.attr('data-schema-key');                                                                          // 393\n    var valOut =lmAfAutocompletePrivate.inst[instid].values;                                                           // 394\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {                                                                  // 395\n      valOut =valOut[0];                                                                                               // 396\n    }                                                                                                                  // 397\n    return valOut;                                                                                                     // 398\n  }                                                                                                                    // 399\n});                                                                                                                    // 400\n                                                                                                                       // 401\n/**                                                                                                                    // 402\n@toc 8.                                                                                                                // 403\n*/                                                                                                                     // 404\nTemplate.afAutocomplete.created =function() {                                                                          // 405\n  this.opts =new ReactiveVar({});                                                                                      // 406\n                                                                                                                       // 407\n  this.predictions =new ReactiveVar([]);                                                                               // 408\n  this.classes =new ReactiveVar({                                                                                      // 409\n    predictions: 'hidden'                                                                                              // 410\n  });                                                                                                                  // 411\n                                                                                                                       // 412\n  this.values =new ReactiveVar([]);                                                                                    // 413\n};                                                                                                                     // 414\n                                                                                                                       // 415\n/**                                                                                                                    // 416\n@toc 9.                                                                                                                // 417\n*/                                                                                                                     // 418\nTemplate.afAutocomplete.rendered =function() {                                                                         // 419\n  //LAME! need timeout otherwise current value sometimes is not set yet..   //@todo - fix this                         // 420\n  var templateInst =this;                                                                                              // 421\n  lmAfAutocompletePrivate.init(templateInst, {});                                                                      // 422\n  setTimeout(function() {                                                                                              // 423\n    lmAfAutocompletePrivate.init(templateInst, {});                                                                    // 424\n  }, 750);                                                                                                             // 425\n};                                                                                                                     // 426\n                                                                                                                       // 427\n/**                                                                                                                    // 428\n@toc 14.                                                                                                               // 429\n*/                                                                                                                     // 430\nTemplate.afAutocomplete.destroyed =function() {                                                                        // 431\n  lmAfAutocompletePrivate.destroy(this, {});                                                                           // 432\n};                                                                                                                     // 433\n                                                                                                                       // 434\n/**                                                                                                                    // 435\n@toc 10.                                                                                                               // 436\n*/                                                                                                                     // 437\nTemplate.afAutocomplete.helpers({                                                                                      // 438\n  //fix to avoid error for passed in object                                                                            // 439\n  // - https://github.com/aldeed/meteor-autoform-bs-datepicker/issues/3                                                // 440\n  // - https://github.com/aldeed/meteor-autoform-bs-datepicker/commit/3977aa69b61152cf8c0f731a11676b087d2ec9df         // 441\n  atts: function() {                                                                                                   // 442\n    var atts =EJSON.clone(this.atts);                                                                                  // 443\n    delete atts.opts;                                                                                                  // 444\n    return atts;                                                                                                       // 445\n  },                                                                                                                   // 446\n  classes: function() {                                                                                                // 447\n    return Template.instance().classes.get();                                                                          // 448\n  },                                                                                                                   // 449\n  predictions: function() {                                                                                            // 450\n    return Template.instance().predictions.get();                                                                      // 451\n  },                                                                                                                   // 452\n  values: function() {                                                                                                 // 453\n    return Template.instance().values.get();                                                                           // 454\n  },                                                                                                                   // 455\n  opts: function() {                                                                                                   // 456\n    return Template.instance().opts.get();                                                                             // 457\n  }                                                                                                                    // 458\n});                                                                                                                    // 459\n                                                                                                                       // 460\n/**                                                                                                                    // 461\n@toc 11.                                                                                                               // 462\n*/                                                                                                                     // 463\nTemplate.afAutocomplete.events({                                                                                       // 464\n  'keyup .lm-autoform-autocomplete-input': function(evt, template) {                                                   // 465\n    lmAfAutocompletePrivate.getPredictions(template, evt.target.value, {});                                            // 466\n  },                                                                                                                   // 467\n  'click .lm-autoform-autocomplete-prediction-item': function(evt, template) {                                         // 468\n    lmAfAutocomplete.addVals([this], {templateInst:template});                                                         // 469\n    lmAfAutocompletePrivate.focusInput(template, {});                                                                  // 470\n  },                                                                                                                   // 471\n  'click .lm-autoform-autocomplete-selected-value': function(evt, template) {                                          // 472\n    lmAfAutocomplete.removeVals([this], {templateInst:template});                                                      // 473\n  },                                                                                                                   // 474\n  'click .lm-autoform-autocomplete-input-multi-cont': function(evt, template) {                                        // 475\n    lmAfAutocompletePrivate.focusInput(template, {});                                                                  // 476\n  }                                                                                                                    // 477\n});                                                                                                                    // 478\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['lukemadera:autoform-autocomplete'] = {}, {\n  lmAfAutocomplete: lmAfAutocomplete\n});\n\n})();\n","servePath":"/packages/lukemadera_autoform-autocomplete.js","sourceMap":{"version":3,"sources":["/packages/lukemadera_autoform-autocomplete/template.autoform-autocomplete.js","/packages/lukemadera_autoform-autocomplete/autoform-autocomplete.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H","file":"/packages/lukemadera_autoform-autocomplete.js","sourcesContent":["\nTemplate.__checkName(\"afAutocomplete\");\nTemplate[\"afAutocomplete\"] = new Template(\"Template.afAutocomplete\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"lm-autoform-autocomplete-input-cont\"\n  }, \"\\n\\n    \", Blaze.If(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\"opts\"), \"multi\"));\n  }, function() {\n    return [ \"\\n      \", HTML.DIV({\n      \"class\": \"lm-autoform-autocomplete-input-multi-cont\"\n    }, \"\\n        \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"values\"));\n    }, function() {\n      return [ \"\\n          \", HTML.DIV({\n        \"class\": \"lm-autoform-autocomplete-selected-value\"\n      }, \"\\n            \", HTML.Comment(\" <div class='lm-autoform-autocomplete-selected-value-remove'>x</div> \"), \"\\n            \", Blaze.If(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));\n      }, function() {\n        return [ \"\\n              \", Blaze.View(\"lookup:xDisplay.name\", function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));\n        }), \"\\n            \" ];\n      }, function() {\n        return [ \"\\n              \", Blaze.View(\"lookup:name\", function() {\n          return Spacebars.mustache(view.lookup(\"name\"));\n        }), \"\\n            \" ];\n      }), \"\\n          \"), \"\\n        \" ];\n    }), \"\\n        \", HTML.INPUT(HTML.Attrs({\n      type: \"text\",\n      \"class\": \"lm-autoform-autocomplete-input\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n      \"), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n      \", HTML.INPUT(HTML.Attrs({\n      type: \"text\",\n      \"class\": \"lm-autoform-autocomplete-input\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n    \" ];\n  }), \"\\n    \\n    \", HTML.DIV({\n    \"class\": function() {\n      return [ \"lm-autoform-autocomplete-predictions \", Spacebars.mustache(Spacebars.dot(view.lookup(\"classes\"), \"predictions\")) ];\n    }\n  }, \"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"predictions\"));\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"lm-autoform-autocomplete-prediction-item\"\n    }, \"\\n          \", Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));\n    }, function() {\n      return [ \"\\n            \", Blaze.View(\"lookup:xDisplay.name\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));\n      }), \"\\n          \" ];\n    }, function() {\n      return [ \"\\n            \", Blaze.View(\"lookup:name\", function() {\n        return Spacebars.mustache(view.lookup(\"name\"));\n      }), \"\\n          \" ];\n    }), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n","/**\n@param {Object} [atts.opts]\n  @param {String} [instid] Required to use any external API calls\n  @param {Number} [multi =0] Set to 1 to make a multi select rather than a normal select\n  @param {Boolean} [createNew =false] True to allow creating a new value (instead of \"no results\" being displayed, the entered value will be displayed and will be given a value of newNamePrefix+name for uniquely identifying and then (optionally) using to create / save this new value to the database for next time)\n  @param {String} [newNamePrefix ='__'] The prefix that will be used for creating a new name (if no match)\n  @param {Function} getPredictions The function to call to look up predictions for the autocomplete. It is passed:\n    @param {String} name The text input by the user to look up / match to\n    @param {Object} [params]\n    @return {Object}\n      @param {Array} predictions Array of objects with the predictions. Each object should have:\n        @param {String} value\n        @param {String} name\n  @param {Function} [onUpdateVals] A function to call every time value(s) are updated (set, added, removed). It is passed either an array of objects (if multi) or just one object.\n    @param {String} optsInstid The same atts.opts.instid that was passed in (to uniquely identify)\n    @param {Object|Array} vals Array if multi is set, object otherwise of:\n      @param {String} value\n      @param {String} name Set if multi\n\n\nAPI is all the lmAfAutocomplete functions (see below)\n\n\n@toc\nlmAfAutocomplete.\n  3. setVals\n  15. removeVals\n  16. addVals\n  18. removeAllVals\nlmAfAutocompletePrivate.\n  17. onUpdateVals\n  19. focusInput\n  12. getTemplateInst\n  1. init\n  13. destroy\n  2. initOpts\n  4. getPredictions\n  5. hide\n  6. show\n7. AutoForm.addInputType(\"lmautocomplete\",..\nTemplate.afAutocomplete.\n  8. created\n  9. rendered\n  14. destroyed\n  10. helpers\n  11. events\n*/\n\nlmAfAutocomplete ={};\n\nvar lmAfAutocompletePrivate ={};\n\n/**\n//for external calls in, need to store reference to template instance to get the correct one so for EACH instance of this package / template, will store two values: a passed in instid (for external reference) as a key and that is an object with the internal template instance. This will allow going back and forth between the two and allow external interaction with the proper template instance.\n@example\n  lmAfAutocompletePrivate.inst ={\n    'inst1': {\n      templateInst: templateInst1,\n      optsInstid: '',\n      values: [{value: 'val1', name:'name1'}],\n      multi: 0\n    },\n    'inst2': {\n      templateInst: templateInst2,\n      optsInstid: 'asfdlkjl3lajkf',\n      values: [{value: 'val2', name:'name2'}],\n      multi: 1\n    }\n  };\n*/\nlmAfAutocompletePrivate.inst ={};\n\n/**\n@toc 3.\n@param {Array|Object} vals Array of objects (or one single object) to set, each object has:\n  @param {String} [value] If not set, will be assumed it is a NEW value to add\n  @param {String} name The display text\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n*/\nlmAfAutocomplete.setVals =function(vals, params) {\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {\n    vals =[vals];\n  }\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);\n  if(templateInst) {\n    var instid =templateInst.data.atts['data-schema-key'];\n\n    //if no multi, only set/add ONE\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {\n      vals =vals.slice(0, 1);\n    }\n\n    var opts =templateInst.opts.get();\n    var ii;\n    for(ii =0; ii<vals.length; ii++) {\n      if(vals[ii].value ===undefined || !vals[ii].value) {\n        vals[ii].value =opts.newNamePrefix+vals[ii].name;\n      }\n    }\n\n    lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, vals, {});\n  }\n};\n\n/**\n@toc 15.\n@param {Array|Object} vals Array of objects (or one single object) to remove, each object has:\n  @param {String} value\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n  // @param {Boolean} [noOnUpdate] True to NOT run the on update (i.e. if just using this to remove all values befor ea set, do not want to call it twice)\n*/\nlmAfAutocomplete.removeVals =function(vals, params) {\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {\n    vals =[vals];\n  }\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);\n  if(templateInst) {\n    var instid =templateInst.data.atts['data-schema-key'];\n    var curVals =lmAfAutocompletePrivate.inst[instid].values;\n    var ii, index1;\n    //have to go through from the END since removing elements and do not want to mess up indices\n    for(ii =(curVals.length-1); ii>=0; ii--) {\n      index1 =notoriiArray.findArrayIndex(vals, 'value', curVals[ii].value, {});\n      if(index1 >-1) {\n        curVals =notoriiArray.remove(curVals, ii);\n      }\n    }\n\n    // if(params.noOnUpdate ===undefined || !params.noOnUpdate) {\n      lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, curVals, {});\n    // }\n  }\n};\n\n/**\n@toc 16.\n@param {Array|Object} vals Array of objects (or one single object) to add, each object has:\n  @param {String} value\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n*/\nlmAfAutocomplete.addVals =function(vals, params) {\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {\n    vals =[vals];\n  }\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);\n  if(templateInst) {\n    var instid =templateInst.data.atts['data-schema-key'];\n    \n    //if no multi, clear out first and only set/add ONE\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {\n      lmAfAutocomplete.removeAllVals(params);\n      vals =vals.slice(0, 1);\n    }\n\n    var curVals =lmAfAutocompletePrivate.inst[instid].values;\n    var ii, index1;\n    for(ii =0; ii<vals.length; ii++) {\n      index1 =notoriiArray.findArrayIndex(curVals, 'value', vals[ii].value, {});\n      if(index1 <0) {\n        curVals.push(vals[ii]);\n      }\n    }\n\n    lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, curVals, {});\n  }\n};\n\n/**\n@toc 18.\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n  // @param {Boolean} [noOnUpdate] True to NOT run the on update (i.e. if just using this to remove all values befor ea set, do not want to call it twice)\n*/\nlmAfAutocomplete.removeAllVals =function(params) {\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);\n  if(templateInst) {\n    var instid =templateInst.data.atts['data-schema-key'];\n    var curVals =[];\n    lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, curVals, {});\n  }\n};\n\n\n\n/**\n@toc 17.\n*/\nlmAfAutocompletePrivate.onUpdateVals =function(instid, templateInst, vals, params) {\n  //update UI too\n  var ele =templateInst.find('input.lm-autoform-autocomplete-input');\n  if(lmAfAutocompletePrivate.inst[instid].multi) {\n    ele.value ='';    //blank out\n  }\n  else if(vals.length) {\n    ele.value =vals[0].name;\n  }\n\n  lmAfAutocompletePrivate.inst[instid].values =vals;\n  templateInst.values.set(vals);\n  lmAfAutocompletePrivate.hide(templateInst, {});\n\n  if(vals.length && templateInst.data.atts.opts.instid !==undefined && templateInst.data.atts.opts.onUpdateVals !==undefined) {\n    var valToSend =vals;\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {\n      valToSend =valToSend[0];\n    }\n    templateInst.data.atts.opts.onUpdateVals.call(templateInst, templateInst.data.atts.opts.instid, valToSend, {});\n  }\n};\n\n/**\n@toc 19.\n*/\nlmAfAutocompletePrivate.focusInput =function(templateInst, params) {\n  var ele =templateInst.find('input.lm-autoform-autocomplete-input');\n  ele.focus();\n};\n\n/**\n@toc 12.\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n*/\nlmAfAutocompletePrivate.getTemplateInst =function(params) {\n  var templateInst =false;\n  if(params.templateInst) {\n    templateInst =params.templateInst;\n  }\n  else if(params.instid) {\n    if(lmAfAutocompletePrivate.inst[params.instid] !==undefined) {\n      templateInst =lmAfAutocompletePrivate.inst[params.instid].templateInst;\n    }\n  }\n  else if(params.optsInstid) {\n    var xx;\n    for(xx in lmAfAutocompletePrivate.inst) {\n      if(lmAfAutocompletePrivate.inst[xx].optsInstid ===params.optsInstid) {\n        templateInst =lmAfAutocompletePrivate.inst[xx].templateInst;\n        break;\n      }\n    }\n  }\n  return templateInst;\n}\n\n/**\n@toc 1.\n*/\nlmAfAutocompletePrivate.init =function(templateInst, params) {\n  this.initOpts(templateInst, params);\n\n  var vals =templateInst.data.value;\n  if(vals ===undefined || !vals) {\n    vals =[];\n  }\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {\n    vals =[vals];\n  }\n\n  lmAfAutocomplete.setVals(vals, {templateInst:templateInst});\n};\n\n/**\n@toc 13.\n*/\nlmAfAutocompletePrivate.destroy =function(templateInst, params) {\n  //remove instid id key\n  var xx;\n  for(xx in lmAfAutocompletePrivate.inst) {\n    if(lmAfAutocompletePrivate.inst[xx].templateInst ===templateInst) {\n      delete lmAfAutocompletePrivate.inst[xx];\n      break;\n    }\n  }\n};\n\n/**\n@toc 2.\n*/\nlmAfAutocompletePrivate.initOpts =function(templateInst, params) {\n  var optsDefault ={\n    newNamePrefix: '__',\n    multi: 0,\n    createNew: false\n  };\n  var xx, opts;\n  opts =EJSON.clone(templateInst.data.atts.opts);\n  if(opts ===undefined) {\n    opts =EJSON.clone(optsDefault);\n  }\n  else {\n    //extend\n    for(xx in optsDefault) {\n      if(opts[xx] ===undefined) {\n        opts[xx] =optsDefault[xx];\n      }\n    }\n  }\n  opts.multi =parseInt(opts.multi, 10);\n\n  if(opts.instid ===undefined) {\n    console.log('lmAfAutocomplete: opts.instid not set (it is required if you want to use any (external) api calls)');\n    opts.instid =false;\n  }\n  var instid =templateInst.data.atts['data-schema-key'];\n  lmAfAutocompletePrivate.inst[instid] ={\n    templateInst: templateInst,\n    optsInstid: opts.instid,\n    multi: opts.multi,\n    values: []\n  };\n\n  templateInst.opts.set(opts);\n};\n\n/**\n@toc 4.\n@param {Object} params\n  @param {Boolean} [noShow] True to NOT display predictions\n*/\nlmAfAutocompletePrivate.getPredictions =function(templateInst, val, params) {\n  var predictions =[];\n  var retPredictions =templateInst.data.atts.opts.getPredictions.call(templateInst, val, {});\n  predictions =retPredictions.predictions;\n  if(!predictions.length) {\n    //if none and allow create new, show the val for allowing creation\n    if(templateInst.data.atts.opts.createNew) {\n      predictions =[\n        {\n          name: val,\n          value: '',\n          xDisplay: {\n            name: '*'+val\n          }\n        }\n      ];\n    }\n  }\n  else {\n    //filter out already selected values\n    var instid =templateInst.data.atts['data-schema-key'];\n    var curVals =lmAfAutocompletePrivate.inst[instid].values;\n    var ii, index1;\n    for(ii =(predictions.length-1); ii>=0; ii--) {\n      index1 =notoriiArray.findArrayIndex(curVals, 'value', predictions[ii].value, {});\n      if(index1 >-1) {\n        predictions =notoriiArray.remove(predictions, ii);\n      }\n    }\n  }\n  templateInst.predictions.set(predictions);\n  if(params.noShow ===undefined || !params.noShow) {\n    this.show(templateInst, {});\n  }\n};\n\n/**\n@toc 5.\n*/\nlmAfAutocompletePrivate.hide =function(templateInst, params) {\n  var classes =templateInst.classes.get();\n  classes.predictions ='hidden';\n  templateInst.classes.set(classes);\n};\n\n/**\n@toc 6.\n*/\nlmAfAutocompletePrivate.show =function(templateInst, params) {\n  var classes =templateInst.classes.get();\n  classes.predictions ='visible';\n  templateInst.classes.set(classes);\n};\n\n/**\n@toc 7.\n*/\nAutoForm.addInputType(\"lmautocomplete\", {\n  template: \"afAutocomplete\",\n  valueIn: function(val) {\n    //will convert to display value later after set / extend opts\n    return val;\n  },\n  valueOut: function() {\n    var instid =this.attr('data-schema-key');\n    var valOut =lmAfAutocompletePrivate.inst[instid].values;\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {\n      valOut =valOut[0];\n    }\n    return valOut;\n  }\n});\n\n/**\n@toc 8.\n*/\nTemplate.afAutocomplete.created =function() {\n  this.opts =new ReactiveVar({});\n\n  this.predictions =new ReactiveVar([]);\n  this.classes =new ReactiveVar({\n    predictions: 'hidden'\n  });\n\n  this.values =new ReactiveVar([]);\n};\n\n/**\n@toc 9.\n*/\nTemplate.afAutocomplete.rendered =function() {\n  //LAME! need timeout otherwise current value sometimes is not set yet..   //@todo - fix this\n  var templateInst =this;\n  lmAfAutocompletePrivate.init(templateInst, {});\n  setTimeout(function() {\n    lmAfAutocompletePrivate.init(templateInst, {});\n  }, 750);\n};\n\n/**\n@toc 14.\n*/\nTemplate.afAutocomplete.destroyed =function() {\n  lmAfAutocompletePrivate.destroy(this, {});\n};\n\n/**\n@toc 10.\n*/\nTemplate.afAutocomplete.helpers({\n  //fix to avoid error for passed in object\n  // - https://github.com/aldeed/meteor-autoform-bs-datepicker/issues/3\n  // - https://github.com/aldeed/meteor-autoform-bs-datepicker/commit/3977aa69b61152cf8c0f731a11676b087d2ec9df\n  atts: function() {\n    var atts =EJSON.clone(this.atts);\n    delete atts.opts;\n    return atts;\n  },\n  classes: function() {\n    return Template.instance().classes.get();\n  },\n  predictions: function() {\n    return Template.instance().predictions.get();\n  },\n  values: function() {\n    return Template.instance().values.get();\n  },\n  opts: function() {\n    return Template.instance().opts.get();\n  }\n});\n\n/**\n@toc 11.\n*/\nTemplate.afAutocomplete.events({\n  'keyup .lm-autoform-autocomplete-input': function(evt, template) {\n    lmAfAutocompletePrivate.getPredictions(template, evt.target.value, {});\n  },\n  'click .lm-autoform-autocomplete-prediction-item': function(evt, template) {\n    lmAfAutocomplete.addVals([this], {templateInst:template});\n    lmAfAutocompletePrivate.focusInput(template, {});\n  },\n  'click .lm-autoform-autocomplete-selected-value': function(evt, template) {\n    lmAfAutocomplete.removeVals([this], {templateInst:template});\n  },\n  'click .lm-autoform-autocomplete-input-multi-cont': function(evt, template) {\n    lmAfAutocompletePrivate.focusInput(template, {});\n  }\n});"]}}]