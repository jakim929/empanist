[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Mongo = Package.mongo.Mongo;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\n\n/* Package-scope variables */\nvar CollectionHooks;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33_collection-hooks/collection-hooks.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Relevant AOP terminology:                                                                                           // 1\n// Aspect: User code that runs before/after (hook)                                                                     // 2\n// Advice: Wrapper code that knows when to call user code (aspects)                                                    // 3\n// Pointcut: before/after                                                                                              // 4\n                                                                                                                       // 5\nvar advices = {};                                                                                                      // 6\nvar Tracker = Package.tracker && Package.tracker.Tracker || Package.deps.Deps;                                         // 7\nvar publishUserId = Meteor.isServer && new Meteor.EnvironmentVariable();                                               // 8\n                                                                                                                       // 9\nCollectionHooks = {                                                                                                    // 10\n  defaults: {                                                                                                          // 11\n    before: { insert: {}, update: {}, remove: {}, upsert: {}, find: {}, findOne: {}, all: {}},                         // 12\n    after: { insert: {}, update: {}, remove: {}, find: {}, findOne: {}, all: {}},                                      // 13\n    all: { insert: {}, update: {}, remove: {}, find: {}, findOne: {}, all: {}}                                         // 14\n  },                                                                                                                   // 15\n  directEnv: new Meteor.EnvironmentVariable(),                                                                         // 16\n  directOp: function directOp(func) {                                                                                  // 17\n    return this.directEnv.withValue(true, func);                                                                       // 18\n  },                                                                                                                   // 19\n  hookedOp: function hookedOp(func) {                                                                                  // 20\n    return this.directEnv.withValue(false, func);                                                                      // 21\n  }                                                                                                                    // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nCollectionHooks.getUserId = function getUserId() {                                                                     // 25\n  var userId;                                                                                                          // 26\n                                                                                                                       // 27\n  if (Meteor.isClient) {                                                                                               // 28\n    Tracker.nonreactive(function () {                                                                                  // 29\n      userId = Meteor.userId && Meteor.userId();                                                                       // 30\n    });                                                                                                                // 31\n  }                                                                                                                    // 32\n                                                                                                                       // 33\n  if (Meteor.isServer) {                                                                                               // 34\n    try {                                                                                                              // 35\n      // Will throw an error unless within method call.                                                                // 36\n      // Attempt to recover gracefully by catching:                                                                    // 37\n      userId = Meteor.userId && Meteor.userId();                                                                       // 38\n    } catch (e) {}                                                                                                     // 39\n                                                                                                                       // 40\n    if (!userId) {                                                                                                     // 41\n      // Get the userId if we are in a publish function.                                                               // 42\n      userId = publishUserId.get();                                                                                    // 43\n    }                                                                                                                  // 44\n  }                                                                                                                    // 45\n                                                                                                                       // 46\n  return userId;                                                                                                       // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nCollectionHooks.extendCollectionInstance = function extendCollectionInstance(self, constructor) {                      // 50\n  // Offer a public API to allow the user to define aspects                                                            // 51\n  // Example: collection.before.insert(func);                                                                          // 52\n  _.each([\"before\", \"after\"], function (pointcut) {                                                                    // 53\n    _.each(advices, function (advice, method) {                                                                        // 54\n      if (advice === \"upsert\" && pointcut === \"after\") return;                                                         // 55\n                                                                                                                       // 56\n      Meteor._ensure(self, pointcut, method);                                                                          // 57\n      Meteor._ensure(self, \"_hookAspects\", method);                                                                    // 58\n                                                                                                                       // 59\n      self._hookAspects[method][pointcut] = [];                                                                        // 60\n      self[pointcut][method] = function (aspect, options) {                                                            // 61\n        var len = self._hookAspects[method][pointcut].push({                                                           // 62\n          aspect: aspect,                                                                                              // 63\n          options: CollectionHooks.initOptions(options, pointcut, method)                                              // 64\n        });                                                                                                            // 65\n                                                                                                                       // 66\n        return {                                                                                                       // 67\n          replace: function (aspect, options) {                                                                        // 68\n            self._hookAspects[method][pointcut].splice(len - 1, 1, {                                                   // 69\n              aspect: aspect,                                                                                          // 70\n              options: CollectionHooks.initOptions(options, pointcut, method)                                          // 71\n            });                                                                                                        // 72\n          },                                                                                                           // 73\n          remove: function () {                                                                                        // 74\n            self._hookAspects[method][pointcut].splice(len - 1, 1);                                                    // 75\n          }                                                                                                            // 76\n        };                                                                                                             // 77\n      };                                                                                                               // 78\n    });                                                                                                                // 79\n  });                                                                                                                  // 80\n                                                                                                                       // 81\n  // Offer a publicly accessible object to allow the user to define                                                    // 82\n  // collection-wide hook options.                                                                                     // 83\n  // Example: collection.hookOptions.after.update = {fetchPrevious: false};                                            // 84\n  self.hookOptions = EJSON.clone(CollectionHooks.defaults);                                                            // 85\n                                                                                                                       // 86\n  // Wrap mutator methods, letting the defined advice do the work                                                      // 87\n  _.each(advices, function (advice, method) {                                                                          // 88\n    var collection = Meteor.isClient || method === \"upsert\" ? self : self._collection;                                 // 89\n                                                                                                                       // 90\n    // Store a reference to the original mutator method                                                                // 91\n    var _super = collection[method];                                                                                   // 92\n                                                                                                                       // 93\n    Meteor._ensure(self, \"direct\", method);                                                                            // 94\n    self.direct[method] = function () {                                                                                // 95\n      var args = arguments;                                                                                            // 96\n      return CollectionHooks.directOp(function () {                                                                    // 97\n        return constructor.prototype[method].apply(self, args);                                                        // 98\n      });                                                                                                              // 99\n    };                                                                                                                 // 100\n                                                                                                                       // 101\n    collection[method] = function () {                                                                                 // 102\n      if (CollectionHooks.directEnv.get() === true) {                                                                  // 103\n        return _super.apply(collection, arguments);                                                                    // 104\n      }                                                                                                                // 105\n                                                                                                                       // 106\n      // NOTE: should we decide to force `update` with `{upsert:true}` to use                                          // 107\n      // the `upsert` hooks, this is what will accomplish it. It's important to                                        // 108\n      // realize that Meteor won't distinguish between an `update` and an                                              // 109\n      // `insert` though, so we'll end up with `after.update` getting called                                           // 110\n      // even on an `insert`. That's why we've chosen to disable this for now.                                         // 111\n      // if (method === \"update\" && _.isObject(arguments[2]) && arguments[2].upsert) {                                 // 112\n      //   method = \"upsert\";                                                                                          // 113\n      //   advice = CollectionHooks.getAdvice(method);                                                                 // 114\n      // }                                                                                                             // 115\n                                                                                                                       // 116\n      return advice.call(this,                                                                                         // 117\n        CollectionHooks.getUserId(),                                                                                   // 118\n        _super,                                                                                                        // 119\n        self,                                                                                                          // 120\n        method === \"upsert\" ? {                                                                                        // 121\n          insert: self._hookAspects.insert || {},                                                                      // 122\n          update: self._hookAspects.update || {},                                                                      // 123\n          upsert: self._hookAspects.upsert || {}                                                                       // 124\n        } : self._hookAspects[method] || {},                                                                           // 125\n        function (doc) {                                                                                               // 126\n          return  _.isFunction(self._transform)                                                                        // 127\n                  ? function (d) { return self._transform(d || doc); }                                                 // 128\n                  : function (d) { return d || doc; };                                                                 // 129\n        },                                                                                                             // 130\n        _.toArray(arguments),                                                                                          // 131\n        false                                                                                                          // 132\n      );                                                                                                               // 133\n    };                                                                                                                 // 134\n  });                                                                                                                  // 135\n};                                                                                                                     // 136\n                                                                                                                       // 137\nCollectionHooks.defineAdvice = function defineAdvice(method, advice) {                                                 // 138\n  advices[method] = advice;                                                                                            // 139\n};                                                                                                                     // 140\n                                                                                                                       // 141\nCollectionHooks.getAdvice = function getAdvice(method) {                                                               // 142\n  return advices[method];                                                                                              // 143\n};                                                                                                                     // 144\n                                                                                                                       // 145\nCollectionHooks.initOptions = function initOptions(options, pointcut, method) {                                        // 146\n  return CollectionHooks.extendOptions(CollectionHooks.defaults, options, pointcut, method);                           // 147\n};                                                                                                                     // 148\n                                                                                                                       // 149\nCollectionHooks.extendOptions = function extendOptions(source, options, pointcut, method) {                            // 150\n  options = _.extend(options || {}, source.all.all);                                                                   // 151\n  options = _.extend(options, source[pointcut].all);                                                                   // 152\n  options = _.extend(options, source.all[method]);                                                                     // 153\n  options = _.extend(options, source[pointcut][method]);                                                               // 154\n  return options;                                                                                                      // 155\n};                                                                                                                     // 156\n                                                                                                                       // 157\nCollectionHooks.getDocs = function getDocs(collection, selector, options) {                                            // 158\n  var self = this;                                                                                                     // 159\n                                                                                                                       // 160\n  var findOptions = {transform: null, reactive: false}; // added reactive: false                                       // 161\n                                                                                                                       // 162\n  /*                                                                                                                   // 163\n  // No \"fetch\" support at this time.                                                                                  // 164\n  if (!self._validators.fetchAllFields) {                                                                              // 165\n    findOptions.fields = {};                                                                                           // 166\n    _.each(self._validators.fetch, function(fieldName) {                                                               // 167\n      findOptions.fields[fieldName] = 1;                                                                               // 168\n    });                                                                                                                // 169\n  }                                                                                                                    // 170\n  */                                                                                                                   // 171\n                                                                                                                       // 172\n  // Bit of a magic condition here... only \"update\" passes options, so this is                                         // 173\n  // only relevant to when update calls getDocs:                                                                       // 174\n  if (options) {                                                                                                       // 175\n    // This was added because in our case, we are potentially iterating over                                           // 176\n    // multiple docs. If multi isn't enabled, force a limit (almost like                                               // 177\n    // findOne), as the default for update without multi enabled is to affect                                          // 178\n    // only the first matched document:                                                                                // 179\n    if (!options.multi) {                                                                                              // 180\n      findOptions.limit = 1;                                                                                           // 181\n    }                                                                                                                  // 182\n  }                                                                                                                    // 183\n                                                                                                                       // 184\n  // Unlike validators, we iterate over multiple docs, so use                                                          // 185\n  // find instead of findOne:                                                                                          // 186\n  return collection.find(selector, findOptions);                                                                       // 187\n};                                                                                                                     // 188\n                                                                                                                       // 189\n// This function contains a snippet of code pulled and modified from:                                                  // 190\n// ~/.meteor/packages/mongo-livedata/collection.js                                                                     // 191\n// It's contained in these utility functions to make updates easier for us in                                          // 192\n// case this code changes.                                                                                             // 193\nCollectionHooks.getFields = function getFields(mutator) {                                                              // 194\n  // compute modified fields                                                                                           // 195\n  var fields = [];                                                                                                     // 196\n                                                                                                                       // 197\n  _.each(mutator, function (params, op) {                                                                              // 198\n    //====ADDED START=======================                                                                           // 199\n    if (_.contains([\"$set\", \"$unset\", \"$inc\", \"$push\", \"$pull\", \"$pop\", \"$rename\", \"$pullAll\", \"$addToSet\", \"$bit\"], op)) {\n    //====ADDED END=========================                                                                           // 201\n      _.each(_.keys(params), function (field) {                                                                        // 202\n        // treat dotted fields as if they are replacing their                                                          // 203\n        // top-level part                                                                                              // 204\n        if (field.indexOf('.') !== -1)                                                                                 // 205\n          field = field.substring(0, field.indexOf('.'));                                                              // 206\n                                                                                                                       // 207\n        // record the field we are trying to change                                                                    // 208\n        if (!_.contains(fields, field))                                                                                // 209\n          fields.push(field);                                                                                          // 210\n      });                                                                                                              // 211\n    //====ADDED START=======================                                                                           // 212\n    } else {                                                                                                           // 213\n      fields.push(op);                                                                                                 // 214\n    }                                                                                                                  // 215\n    //====ADDED END=========================                                                                           // 216\n  });                                                                                                                  // 217\n                                                                                                                       // 218\n  return fields;                                                                                                       // 219\n};                                                                                                                     // 220\n                                                                                                                       // 221\nCollectionHooks.reassignPrototype = function reassignPrototype(instance, constr) {                                     // 222\n  var hasSetPrototypeOf = typeof Object.setPrototypeOf === \"function\";                                                 // 223\n                                                                                                                       // 224\n  if (!constr) constr = typeof Mongo !== \"undefined\" ? Mongo.Collection : Meteor.Collection;                           // 225\n                                                                                                                       // 226\n  // __proto__ is not available in < IE11                                                                              // 227\n  // Note: Assigning a prototype dynamically has performance implications                                              // 228\n  if (hasSetPrototypeOf) {                                                                                             // 229\n    Object.setPrototypeOf(instance, constr.prototype);                                                                 // 230\n  } else if (instance.__proto__) {                                                                                     // 231\n    instance.__proto__ = constr.prototype;                                                                             // 232\n  }                                                                                                                    // 233\n};                                                                                                                     // 234\n                                                                                                                       // 235\nCollectionHooks.wrapCollection = function wrapCollection(ns, as) {                                                     // 236\n  if (!as._CollectionConstructor) as._CollectionConstructor = as.Collection;                                           // 237\n  if (!as._CollectionPrototype) as._CollectionPrototype = new as.Collection(null);                                     // 238\n                                                                                                                       // 239\n  var constructor = as._CollectionConstructor;                                                                         // 240\n  var proto = as._CollectionPrototype;                                                                                 // 241\n                                                                                                                       // 242\n  ns.Collection = function () {                                                                                        // 243\n    var ret = constructor.apply(this, arguments);                                                                      // 244\n    CollectionHooks.extendCollectionInstance(this, constructor);                                                       // 245\n    return ret;                                                                                                        // 246\n  };                                                                                                                   // 247\n                                                                                                                       // 248\n  ns.Collection.prototype = proto;                                                                                     // 249\n  ns.Collection.prototype.constructor = ns.Collection;                                                                 // 250\n                                                                                                                       // 251\n  for (var prop in constructor) {                                                                                      // 252\n    if (constructor.hasOwnProperty(prop)) {                                                                            // 253\n      ns.Collection[prop] = constructor[prop];                                                                         // 254\n    }                                                                                                                  // 255\n  }                                                                                                                    // 256\n};                                                                                                                     // 257\n                                                                                                                       // 258\nCollectionHooks.modify = LocalCollection._modify;                                                                      // 259\n                                                                                                                       // 260\nif (typeof Mongo !== \"undefined\") {                                                                                    // 261\n  CollectionHooks.wrapCollection(Meteor, Mongo);                                                                       // 262\n  CollectionHooks.wrapCollection(Mongo, Mongo);                                                                        // 263\n} else {                                                                                                               // 264\n  CollectionHooks.wrapCollection(Meteor, Meteor);                                                                      // 265\n}                                                                                                                      // 266\n                                                                                                                       // 267\nif (Meteor.isServer) {                                                                                                 // 268\n  var _publish = Meteor.publish;                                                                                       // 269\n  Meteor.publish = function (name, func) {                                                                             // 270\n    return _publish.call(this, name, function () {                                                                     // 271\n      // This function is called repeatedly in publications                                                            // 272\n      var ctx = this, args = arguments;                                                                                // 273\n      return publishUserId.withValue(ctx && ctx.userId, function () {                                                  // 274\n        return func.apply(ctx, args);                                                                                  // 275\n      });                                                                                                              // 276\n    });                                                                                                                // 277\n  };                                                                                                                   // 278\n                                                                                                                       // 279\n  // Make the above available for packages with hooks that want to determine                                           // 280\n  // whether they are running inside a publish function or not.                                                        // 281\n  CollectionHooks.isWithinPublish = function isWithinPublish() {                                                       // 282\n    return publishUserId.get() !== undefined;                                                                          // 283\n  };                                                                                                                   // 284\n}                                                                                                                      // 285\n                                                                                                                       // 286\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33_collection-hooks/insert.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"insert\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var callback = _.last(args);                                                                                         // 4\n  var async = _.isFunction(callback);                                                                                  // 5\n  var abort, ret;                                                                                                      // 6\n                                                                                                                       // 7\n  // args[0] : doc                                                                                                     // 8\n  // args[1] : callback                                                                                                // 9\n                                                                                                                       // 10\n  // before                                                                                                            // 11\n  if (!suppressAspects) {                                                                                              // 12\n    try {                                                                                                              // 13\n      _.each(aspects.before, function (o) {                                                                            // 14\n        var r = o.aspect.call(_.extend({transform: getTransform(args[0])}, ctx), userId, args[0]);                     // 15\n        if (r === false) abort = true;                                                                                 // 16\n      });                                                                                                              // 17\n                                                                                                                       // 18\n      if (abort) return false;                                                                                         // 19\n    } catch (e) {                                                                                                      // 20\n      if (async) return callback.call(self, e);                                                                        // 21\n      throw e;                                                                                                         // 22\n    }                                                                                                                  // 23\n  }                                                                                                                    // 24\n                                                                                                                       // 25\n  function after(id, err) {                                                                                            // 26\n    var doc = args[0];                                                                                                 // 27\n    if (id) {                                                                                                          // 28\n      doc = EJSON.clone(args[0]);                                                                                      // 29\n      doc._id = id;                                                                                                    // 30\n    }                                                                                                                  // 31\n    if (!suppressAspects) {                                                                                            // 32\n      var lctx = _.extend({transform: getTransform(doc), _id: id, err: err}, ctx);                                     // 33\n      _.each(aspects.after, function (o) {                                                                             // 34\n        o.aspect.call(lctx, userId, doc);                                                                              // 35\n      });                                                                                                              // 36\n    }                                                                                                                  // 37\n    return id;                                                                                                         // 38\n  }                                                                                                                    // 39\n                                                                                                                       // 40\n  if (async) {                                                                                                         // 41\n    args[args.length - 1] = function (err, obj) {                                                                      // 42\n      after(obj && obj[0] && obj[0]._id || obj, err);                                                                  // 43\n      return callback.apply(this, arguments);                                                                          // 44\n    };                                                                                                                 // 45\n    return _super.apply(self, args);                                                                                   // 46\n  } else {                                                                                                             // 47\n    ret = _super.apply(self, args);                                                                                    // 48\n    return after(ret && ret[0] && ret[0]._id || ret);                                                                  // 49\n  }                                                                                                                    // 50\n});                                                                                                                    // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33_collection-hooks/update.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"update\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var callback = _.last(args);                                                                                         // 4\n  var async = _.isFunction(callback);                                                                                  // 5\n  var docs, docIds, fields, abort, prev = {};                                                                          // 6\n  var collection = _.has(self, \"_collection\") ? self._collection : self;                                               // 7\n                                                                                                                       // 8\n  // args[0] : selector                                                                                                // 9\n  // args[1] : mutator                                                                                                 // 10\n  // args[2] : options (optional)                                                                                      // 11\n  // args[3] : callback                                                                                                // 12\n                                                                                                                       // 13\n  if (_.isFunction(args[2])) {                                                                                         // 14\n    callback = args[2];                                                                                                // 15\n    args[2] = {};                                                                                                      // 16\n  }                                                                                                                    // 17\n                                                                                                                       // 18\n  if (!suppressAspects) {                                                                                              // 19\n    try {                                                                                                              // 20\n      if (aspects.before || aspects.after) {                                                                           // 21\n        fields = CollectionHooks.getFields(args[1]);                                                                   // 22\n        docs = CollectionHooks.getDocs.call(self, collection, args[0], args[2]).fetch();                               // 23\n        docIds = _.map(docs, function (doc) { return doc._id; });                                                      // 24\n      }                                                                                                                // 25\n                                                                                                                       // 26\n      // copy originals for convenience for the \"after\" pointcut                                                       // 27\n      if (aspects.after) {                                                                                             // 28\n        prev.mutator = EJSON.clone(args[1]);                                                                           // 29\n        prev.options = EJSON.clone(args[2]);                                                                           // 30\n        if (_.some(aspects.after, function (o) { return o.options.fetchPrevious !== false; }) &&                       // 31\n            CollectionHooks.extendOptions(instance.hookOptions, {}, \"after\", \"update\").fetchPrevious !== false) {      // 32\n          prev.docs = {};                                                                                              // 33\n          _.each(docs, function (doc) {                                                                                // 34\n            prev.docs[doc._id] = EJSON.clone(doc);                                                                     // 35\n          });                                                                                                          // 36\n        }                                                                                                              // 37\n      }                                                                                                                // 38\n                                                                                                                       // 39\n      // before                                                                                                        // 40\n      _.each(aspects.before, function (o) {                                                                            // 41\n        _.each(docs, function (doc) {                                                                                  // 42\n          var r = o.aspect.call(_.extend({transform: getTransform(doc)}, ctx), userId, doc, fields, args[1], args[2]);\n          if (r === false) abort = true;                                                                               // 44\n        });                                                                                                            // 45\n      });                                                                                                              // 46\n                                                                                                                       // 47\n      if (abort) return false;                                                                                         // 48\n    } catch (e) {                                                                                                      // 49\n      if (async) return callback.call(self, e);                                                                        // 50\n      throw e;                                                                                                         // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n                                                                                                                       // 54\n  function after(affected, err) {                                                                                      // 55\n    if (!suppressAspects) {                                                                                            // 56\n      var fields = CollectionHooks.getFields(args[1]);                                                                 // 57\n      var docs = CollectionHooks.getDocs.call(self, collection, {_id: {$in: docIds}}, args[2]).fetch();                // 58\n                                                                                                                       // 59\n      _.each(aspects.after, function (o) {                                                                             // 60\n        _.each(docs, function (doc) {                                                                                  // 61\n          o.aspect.call(_.extend({                                                                                     // 62\n            transform: getTransform(doc),                                                                              // 63\n            previous: prev.docs && prev.docs[doc._id],                                                                 // 64\n            affected: affected,                                                                                        // 65\n            err: err                                                                                                   // 66\n          }, ctx), userId, doc, fields, prev.mutator, prev.options);                                                   // 67\n        });                                                                                                            // 68\n      });                                                                                                              // 69\n    }                                                                                                                  // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  if (async) {                                                                                                         // 73\n    args[args.length - 1] = function (err, affected) {                                                                 // 74\n      after(affected, err);                                                                                            // 75\n      return callback.apply(this, arguments);                                                                          // 76\n    };                                                                                                                 // 77\n    return _super.apply(this, args);                                                                                   // 78\n  } else {                                                                                                             // 79\n    var affected = _super.apply(self, args);                                                                           // 80\n    after(affected);                                                                                                   // 81\n    return affected;                                                                                                   // 82\n  }                                                                                                                    // 83\n});                                                                                                                    // 84\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33_collection-hooks/remove.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"remove\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var callback = _.last(args);                                                                                         // 4\n  var async = _.isFunction(callback);                                                                                  // 5\n  var docs, abort, prev = [];                                                                                          // 6\n  var collection = _.has(self, \"_collection\") ? self._collection : self;                                               // 7\n                                                                                                                       // 8\n  // args[0] : selector                                                                                                // 9\n  // args[1] : callback                                                                                                // 10\n                                                                                                                       // 11\n  if (!suppressAspects) {                                                                                              // 12\n    try {                                                                                                              // 13\n      if (aspects.before || aspects.after) {                                                                           // 14\n        docs = CollectionHooks.getDocs.call(self, collection, args[0]).fetch();                                        // 15\n      }                                                                                                                // 16\n                                                                                                                       // 17\n      // copy originals for convenience for the \"after\" pointcut                                                       // 18\n      if (aspects.after) {                                                                                             // 19\n        _.each(docs, function (doc) {                                                                                  // 20\n          prev.push(EJSON.clone(doc));                                                                                 // 21\n        });                                                                                                            // 22\n      }                                                                                                                // 23\n                                                                                                                       // 24\n      // before                                                                                                        // 25\n      _.each(aspects.before, function (o) {                                                                            // 26\n        _.each(docs, function (doc) {                                                                                  // 27\n          var r = o.aspect.call(_.extend({transform: getTransform(doc)}, ctx), userId, doc);                           // 28\n          if (r === false) abort = true;                                                                               // 29\n        });                                                                                                            // 30\n      });                                                                                                              // 31\n                                                                                                                       // 32\n      if (abort) return false;                                                                                         // 33\n    } catch (e) {                                                                                                      // 34\n      if (async) return callback.call(self, e);                                                                        // 35\n      throw e;                                                                                                         // 36\n    }                                                                                                                  // 37\n  }                                                                                                                    // 38\n                                                                                                                       // 39\n  function after(err) {                                                                                                // 40\n    if (!suppressAspects) {                                                                                            // 41\n      _.each(aspects.after, function (o) {                                                                             // 42\n        _.each(prev, function (doc) {                                                                                  // 43\n          o.aspect.call(_.extend({transform: getTransform(doc), err: err}, ctx), userId, doc);                         // 44\n        });                                                                                                            // 45\n      });                                                                                                              // 46\n    }                                                                                                                  // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  if (async) {                                                                                                         // 50\n    args[args.length - 1] = function (err) {                                                                           // 51\n      after(err);                                                                                                      // 52\n      return callback.apply(this, arguments);                                                                          // 53\n    };                                                                                                                 // 54\n    return _super.apply(self, args);                                                                                   // 55\n  } else {                                                                                                             // 56\n    var result = _super.apply(self, args);                                                                             // 57\n    after();                                                                                                           // 58\n    return result;                                                                                                     // 59\n  }                                                                                                                    // 60\n});                                                                                                                    // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33_collection-hooks/upsert.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"upsert\", function (userId, _super, instance, aspectGroup, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var callback = _.last(args);                                                                                         // 4\n  var async = _.isFunction(callback);                                                                                  // 5\n  var docs, docIds, fields, abort, prev = {};                                                                          // 6\n  var collection = _.has(self, \"_collection\") ? self._collection : self;                                               // 7\n                                                                                                                       // 8\n  // args[0] : selector                                                                                                // 9\n  // args[1] : mutator                                                                                                 // 10\n  // args[2] : options (optional)                                                                                      // 11\n  // args[3] : callback                                                                                                // 12\n                                                                                                                       // 13\n  if (_.isFunction(args[2])) {                                                                                         // 14\n    callback = args[2];                                                                                                // 15\n    args[2] = {};                                                                                                      // 16\n  }                                                                                                                    // 17\n                                                                                                                       // 18\n  if (!suppressAspects) {                                                                                              // 19\n    if (aspectGroup.upsert.before) {                                                                                   // 20\n      fields = CollectionHooks.getFields(args[1]);                                                                     // 21\n      docs = CollectionHooks.getDocs.call(self, collection, args[0], args[2]).fetch();                                 // 22\n      docIds = _.map(docs, function (doc) { return doc._id; });                                                        // 23\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    // copy originals for convenience for the \"after\" pointcut                                                         // 26\n    if (aspectGroup.update.after) {                                                                                    // 27\n      if (_.some(aspectGroup.update.after, function (o) { return o.options.fetchPrevious !== false; }) &&              // 28\n          CollectionHooks.extendOptions(instance.hookOptions, {}, \"after\", \"update\").fetchPrevious !== false) {        // 29\n        prev.mutator = EJSON.clone(args[1]);                                                                           // 30\n        prev.options = EJSON.clone(args[2]);                                                                           // 31\n        prev.docs = {};                                                                                                // 32\n        _.each(docs, function (doc) {                                                                                  // 33\n          prev.docs[doc._id] = EJSON.clone(doc);                                                                       // 34\n        });                                                                                                            // 35\n      }                                                                                                                // 36\n    }                                                                                                                  // 37\n                                                                                                                       // 38\n    // before                                                                                                          // 39\n    if (!suppressAspects) {                                                                                            // 40\n      _.each(aspectGroup.upsert.before, function (o) {                                                                 // 41\n        var r = o.aspect.call(ctx, userId, args[0], args[1], args[2]);                                                 // 42\n        if (r === false) abort = true;                                                                                 // 43\n      });                                                                                                              // 44\n                                                                                                                       // 45\n      if (abort) return false;                                                                                         // 46\n    }                                                                                                                  // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  function afterUpdate(affected, err) {                                                                                // 50\n    if (!suppressAspects) {                                                                                            // 51\n      var fields = CollectionHooks.getFields(args[1]);                                                                 // 52\n      var docs = CollectionHooks.getDocs.call(self, collection, {_id: {$in: docIds}}, args[2]).fetch();                // 53\n                                                                                                                       // 54\n      _.each(aspectGroup.update.after, function (o) {                                                                  // 55\n        _.each(docs, function (doc) {                                                                                  // 56\n          o.aspect.call(_.extend({                                                                                     // 57\n            transform: getTransform(doc),                                                                              // 58\n            previous: prev.docs && prev.docs[doc._id],                                                                 // 59\n            affected: affected,                                                                                        // 60\n            err: err                                                                                                   // 61\n          }, ctx), userId, doc, fields, prev.mutator, prev.options);                                                   // 62\n        });                                                                                                            // 63\n      });                                                                                                              // 64\n    }                                                                                                                  // 65\n  }                                                                                                                    // 66\n                                                                                                                       // 67\n  function afterInsert(id, err) {                                                                                      // 68\n    if (!suppressAspects) {                                                                                            // 69\n      var doc = CollectionHooks.getDocs.call(self, collection, {_id: id}, args[0], {}).fetch()[0]; // 3rd argument passes empty object which causes magic logic to imply limit:1\n      var lctx = _.extend({transform: getTransform(doc), _id: id, err: err}, ctx);                                     // 71\n      _.each(aspectGroup.insert.after, function (o) {                                                                  // 72\n        o.aspect.call(lctx, userId, doc);                                                                              // 73\n      });                                                                                                              // 74\n    }                                                                                                                  // 75\n  }                                                                                                                    // 76\n                                                                                                                       // 77\n  if (async) {                                                                                                         // 78\n    args[args.length - 1] = function (err, ret) {                                                                      // 79\n      if (ret.insertedId) {                                                                                            // 80\n        afterInsert(ret.insertedId, err);                                                                              // 81\n      } else {                                                                                                         // 82\n        afterUpdate(ret.numberAffected, err);                                                                          // 83\n      }                                                                                                                // 84\n                                                                                                                       // 85\n      return CollectionHooks.hookedOp(function () {                                                                    // 86\n        return callback.call(this, err, ret);                                                                          // 87\n      });                                                                                                              // 88\n    };                                                                                                                 // 89\n                                                                                                                       // 90\n    return CollectionHooks.directOp(function () {                                                                      // 91\n      return _super.apply(self, args);                                                                                 // 92\n    });                                                                                                                // 93\n  } else {                                                                                                             // 94\n    var ret = CollectionHooks.directOp(function () {                                                                   // 95\n      return _super.apply(self, args);                                                                                 // 96\n    });                                                                                                                // 97\n                                                                                                                       // 98\n    if (ret.insertedId) {                                                                                              // 99\n      afterInsert(ret.insertedId);                                                                                     // 100\n    } else {                                                                                                           // 101\n      afterUpdate(ret.numberAffected);                                                                                 // 102\n    }                                                                                                                  // 103\n                                                                                                                       // 104\n    return ret;                                                                                                        // 105\n  }                                                                                                                    // 106\n});                                                                                                                    // 107\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33_collection-hooks/find.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"find\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var ret, abort;                                                                                                      // 4\n                                                                                                                       // 5\n  // args[0] : selector                                                                                                // 6\n  // args[1] : options                                                                                                 // 7\n                                                                                                                       // 8\n  // before                                                                                                            // 9\n  if (!suppressAspects) {                                                                                              // 10\n    _.each(aspects.before, function (o) {                                                                              // 11\n      var r = o.aspect.call(ctx, userId, args[0], args[1]);                                                            // 12\n      if (r === false) abort = true;                                                                                   // 13\n    });                                                                                                                // 14\n                                                                                                                       // 15\n    if (abort) return false;                                                                                           // 16\n  }                                                                                                                    // 17\n                                                                                                                       // 18\n  function after(cursor) {                                                                                             // 19\n    if (!suppressAspects) {                                                                                            // 20\n      _.each(aspects.after, function (o) {                                                                             // 21\n        o.aspect.call(ctx, userId, args[0], args[1], cursor);                                                          // 22\n      });                                                                                                              // 23\n    }                                                                                                                  // 24\n  }                                                                                                                    // 25\n                                                                                                                       // 26\n  ret = _super.apply(self, args);                                                                                      // 27\n  after(ret);                                                                                                          // 28\n                                                                                                                       // 29\n  return ret;                                                                                                          // 30\n});                                                                                                                    // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33_collection-hooks/findone.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"findOne\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var ret, abort;                                                                                                      // 4\n                                                                                                                       // 5\n  // args[0] : selector                                                                                                // 6\n  // args[1] : options                                                                                                 // 7\n                                                                                                                       // 8\n  // before                                                                                                            // 9\n  if (!suppressAspects) {                                                                                              // 10\n    _.each(aspects.before, function (o) {                                                                              // 11\n      var r = o.aspect.call(ctx, userId, args[0], args[1]);                                                            // 12\n      if (r === false) abort = true;                                                                                   // 13\n    });                                                                                                                // 14\n                                                                                                                       // 15\n    if (abort) return false;                                                                                           // 16\n  }                                                                                                                    // 17\n                                                                                                                       // 18\n  function after(doc) {                                                                                                // 19\n    if (!suppressAspects) {                                                                                            // 20\n      _.each(aspects.after, function (o) {                                                                             // 21\n        o.aspect.call(ctx, userId, args[0], args[1], doc);                                                             // 22\n      });                                                                                                              // 23\n    }                                                                                                                  // 24\n  }                                                                                                                    // 25\n                                                                                                                       // 26\n  ret = _super.apply(self, args);                                                                                      // 27\n  after(ret);                                                                                                          // 28\n                                                                                                                       // 29\n  return ret;                                                                                                          // 30\n});                                                                                                                    // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33_collection-hooks/users-compat.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (Meteor.users) {                                                                                                    // 1\n  // If Meteor.users has been instantiated, attempt to re-assign its prototype:                                        // 2\n  CollectionHooks.reassignPrototype(Meteor.users);                                                                     // 3\n                                                                                                                       // 4\n  // Next, give it the hook aspects:                                                                                   // 5\n  var Collection = typeof Mongo !== \"undefined\" && typeof Mongo.Collection !== \"undefined\" ? Mongo.Collection : Meteor.Collection;\n  CollectionHooks.extendCollectionInstance(Meteor.users, Collection);                                                  // 7\n}                                                                                                                      // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['matb33:collection-hooks'] = {}, {\n  CollectionHooks: CollectionHooks\n});\n\n})();\n","servePath":"/packages/matb33_collection-hooks.js","sourceMap":{"version":3,"sources":["/packages/matb33_collection-hooks/collection-hooks.js","/packages/matb33_collection-hooks/insert.js","/packages/matb33_collection-hooks/update.js","/packages/matb33_collection-hooks/remove.js","/packages/matb33_collection-hooks/upsert.js","/packages/matb33_collection-hooks/find.js","/packages/matb33_collection-hooks/findone.js","/packages/matb33_collection-hooks/users-compat.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;AC7RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H","file":"/packages/matb33_collection-hooks.js","sourcesContent":["// Relevant AOP terminology:\n// Aspect: User code that runs before/after (hook)\n// Advice: Wrapper code that knows when to call user code (aspects)\n// Pointcut: before/after\n\nvar advices = {};\nvar Tracker = Package.tracker && Package.tracker.Tracker || Package.deps.Deps;\nvar publishUserId = Meteor.isServer && new Meteor.EnvironmentVariable();\n\nCollectionHooks = {\n  defaults: {\n    before: { insert: {}, update: {}, remove: {}, upsert: {}, find: {}, findOne: {}, all: {}},\n    after: { insert: {}, update: {}, remove: {}, find: {}, findOne: {}, all: {}},\n    all: { insert: {}, update: {}, remove: {}, find: {}, findOne: {}, all: {}}\n  },\n  directEnv: new Meteor.EnvironmentVariable(),\n  directOp: function directOp(func) {\n    return this.directEnv.withValue(true, func);\n  },\n  hookedOp: function hookedOp(func) {\n    return this.directEnv.withValue(false, func);\n  }\n};\n\nCollectionHooks.getUserId = function getUserId() {\n  var userId;\n\n  if (Meteor.isClient) {\n    Tracker.nonreactive(function () {\n      userId = Meteor.userId && Meteor.userId();\n    });\n  }\n\n  if (Meteor.isServer) {\n    try {\n      // Will throw an error unless within method call.\n      // Attempt to recover gracefully by catching:\n      userId = Meteor.userId && Meteor.userId();\n    } catch (e) {}\n\n    if (!userId) {\n      // Get the userId if we are in a publish function.\n      userId = publishUserId.get();\n    }\n  }\n\n  return userId;\n};\n\nCollectionHooks.extendCollectionInstance = function extendCollectionInstance(self, constructor) {\n  // Offer a public API to allow the user to define aspects\n  // Example: collection.before.insert(func);\n  _.each([\"before\", \"after\"], function (pointcut) {\n    _.each(advices, function (advice, method) {\n      if (advice === \"upsert\" && pointcut === \"after\") return;\n\n      Meteor._ensure(self, pointcut, method);\n      Meteor._ensure(self, \"_hookAspects\", method);\n\n      self._hookAspects[method][pointcut] = [];\n      self[pointcut][method] = function (aspect, options) {\n        var len = self._hookAspects[method][pointcut].push({\n          aspect: aspect,\n          options: CollectionHooks.initOptions(options, pointcut, method)\n        });\n\n        return {\n          replace: function (aspect, options) {\n            self._hookAspects[method][pointcut].splice(len - 1, 1, {\n              aspect: aspect,\n              options: CollectionHooks.initOptions(options, pointcut, method)\n            });\n          },\n          remove: function () {\n            self._hookAspects[method][pointcut].splice(len - 1, 1);\n          }\n        };\n      };\n    });\n  });\n\n  // Offer a publicly accessible object to allow the user to define\n  // collection-wide hook options.\n  // Example: collection.hookOptions.after.update = {fetchPrevious: false};\n  self.hookOptions = EJSON.clone(CollectionHooks.defaults);\n\n  // Wrap mutator methods, letting the defined advice do the work\n  _.each(advices, function (advice, method) {\n    var collection = Meteor.isClient || method === \"upsert\" ? self : self._collection;\n\n    // Store a reference to the original mutator method\n    var _super = collection[method];\n\n    Meteor._ensure(self, \"direct\", method);\n    self.direct[method] = function () {\n      var args = arguments;\n      return CollectionHooks.directOp(function () {\n        return constructor.prototype[method].apply(self, args);\n      });\n    };\n\n    collection[method] = function () {\n      if (CollectionHooks.directEnv.get() === true) {\n        return _super.apply(collection, arguments);\n      }\n\n      // NOTE: should we decide to force `update` with `{upsert:true}` to use\n      // the `upsert` hooks, this is what will accomplish it. It's important to\n      // realize that Meteor won't distinguish between an `update` and an\n      // `insert` though, so we'll end up with `after.update` getting called\n      // even on an `insert`. That's why we've chosen to disable this for now.\n      // if (method === \"update\" && _.isObject(arguments[2]) && arguments[2].upsert) {\n      //   method = \"upsert\";\n      //   advice = CollectionHooks.getAdvice(method);\n      // }\n\n      return advice.call(this,\n        CollectionHooks.getUserId(),\n        _super,\n        self,\n        method === \"upsert\" ? {\n          insert: self._hookAspects.insert || {},\n          update: self._hookAspects.update || {},\n          upsert: self._hookAspects.upsert || {}\n        } : self._hookAspects[method] || {},\n        function (doc) {\n          return  _.isFunction(self._transform)\n                  ? function (d) { return self._transform(d || doc); }\n                  : function (d) { return d || doc; };\n        },\n        _.toArray(arguments),\n        false\n      );\n    };\n  });\n};\n\nCollectionHooks.defineAdvice = function defineAdvice(method, advice) {\n  advices[method] = advice;\n};\n\nCollectionHooks.getAdvice = function getAdvice(method) {\n  return advices[method];\n};\n\nCollectionHooks.initOptions = function initOptions(options, pointcut, method) {\n  return CollectionHooks.extendOptions(CollectionHooks.defaults, options, pointcut, method);\n};\n\nCollectionHooks.extendOptions = function extendOptions(source, options, pointcut, method) {\n  options = _.extend(options || {}, source.all.all);\n  options = _.extend(options, source[pointcut].all);\n  options = _.extend(options, source.all[method]);\n  options = _.extend(options, source[pointcut][method]);\n  return options;\n};\n\nCollectionHooks.getDocs = function getDocs(collection, selector, options) {\n  var self = this;\n\n  var findOptions = {transform: null, reactive: false}; // added reactive: false\n\n  /*\n  // No \"fetch\" support at this time.\n  if (!self._validators.fetchAllFields) {\n    findOptions.fields = {};\n    _.each(self._validators.fetch, function(fieldName) {\n      findOptions.fields[fieldName] = 1;\n    });\n  }\n  */\n\n  // Bit of a magic condition here... only \"update\" passes options, so this is\n  // only relevant to when update calls getDocs:\n  if (options) {\n    // This was added because in our case, we are potentially iterating over\n    // multiple docs. If multi isn't enabled, force a limit (almost like\n    // findOne), as the default for update without multi enabled is to affect\n    // only the first matched document:\n    if (!options.multi) {\n      findOptions.limit = 1;\n    }\n  }\n\n  // Unlike validators, we iterate over multiple docs, so use\n  // find instead of findOne:\n  return collection.find(selector, findOptions);\n};\n\n// This function contains a snippet of code pulled and modified from:\n// ~/.meteor/packages/mongo-livedata/collection.js\n// It's contained in these utility functions to make updates easier for us in\n// case this code changes.\nCollectionHooks.getFields = function getFields(mutator) {\n  // compute modified fields\n  var fields = [];\n\n  _.each(mutator, function (params, op) {\n    //====ADDED START=======================\n    if (_.contains([\"$set\", \"$unset\", \"$inc\", \"$push\", \"$pull\", \"$pop\", \"$rename\", \"$pullAll\", \"$addToSet\", \"$bit\"], op)) {\n    //====ADDED END=========================\n      _.each(_.keys(params), function (field) {\n        // treat dotted fields as if they are replacing their\n        // top-level part\n        if (field.indexOf('.') !== -1)\n          field = field.substring(0, field.indexOf('.'));\n\n        // record the field we are trying to change\n        if (!_.contains(fields, field))\n          fields.push(field);\n      });\n    //====ADDED START=======================\n    } else {\n      fields.push(op);\n    }\n    //====ADDED END=========================\n  });\n\n  return fields;\n};\n\nCollectionHooks.reassignPrototype = function reassignPrototype(instance, constr) {\n  var hasSetPrototypeOf = typeof Object.setPrototypeOf === \"function\";\n\n  if (!constr) constr = typeof Mongo !== \"undefined\" ? Mongo.Collection : Meteor.Collection;\n\n  // __proto__ is not available in < IE11\n  // Note: Assigning a prototype dynamically has performance implications\n  if (hasSetPrototypeOf) {\n    Object.setPrototypeOf(instance, constr.prototype);\n  } else if (instance.__proto__) {\n    instance.__proto__ = constr.prototype;\n  }\n};\n\nCollectionHooks.wrapCollection = function wrapCollection(ns, as) {\n  if (!as._CollectionConstructor) as._CollectionConstructor = as.Collection;\n  if (!as._CollectionPrototype) as._CollectionPrototype = new as.Collection(null);\n\n  var constructor = as._CollectionConstructor;\n  var proto = as._CollectionPrototype;\n\n  ns.Collection = function () {\n    var ret = constructor.apply(this, arguments);\n    CollectionHooks.extendCollectionInstance(this, constructor);\n    return ret;\n  };\n\n  ns.Collection.prototype = proto;\n  ns.Collection.prototype.constructor = ns.Collection;\n\n  for (var prop in constructor) {\n    if (constructor.hasOwnProperty(prop)) {\n      ns.Collection[prop] = constructor[prop];\n    }\n  }\n};\n\nCollectionHooks.modify = LocalCollection._modify;\n\nif (typeof Mongo !== \"undefined\") {\n  CollectionHooks.wrapCollection(Meteor, Mongo);\n  CollectionHooks.wrapCollection(Mongo, Mongo);\n} else {\n  CollectionHooks.wrapCollection(Meteor, Meteor);\n}\n\nif (Meteor.isServer) {\n  var _publish = Meteor.publish;\n  Meteor.publish = function (name, func) {\n    return _publish.call(this, name, function () {\n      // This function is called repeatedly in publications\n      var ctx = this, args = arguments;\n      return publishUserId.withValue(ctx && ctx.userId, function () {\n        return func.apply(ctx, args);\n      });\n    });\n  };\n\n  // Make the above available for packages with hooks that want to determine\n  // whether they are running inside a publish function or not.\n  CollectionHooks.isWithinPublish = function isWithinPublish() {\n    return publishUserId.get() !== undefined;\n  };\n}\n","CollectionHooks.defineAdvice(\"insert\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;\n  var ctx = {context: self, _super: _super, args: args};\n  var callback = _.last(args);\n  var async = _.isFunction(callback);\n  var abort, ret;\n\n  // args[0] : doc\n  // args[1] : callback\n\n  // before\n  if (!suppressAspects) {\n    try {\n      _.each(aspects.before, function (o) {\n        var r = o.aspect.call(_.extend({transform: getTransform(args[0])}, ctx), userId, args[0]);\n        if (r === false) abort = true;\n      });\n\n      if (abort) return false;\n    } catch (e) {\n      if (async) return callback.call(self, e);\n      throw e;\n    }\n  }\n\n  function after(id, err) {\n    var doc = args[0];\n    if (id) {\n      doc = EJSON.clone(args[0]);\n      doc._id = id;\n    }\n    if (!suppressAspects) {\n      var lctx = _.extend({transform: getTransform(doc), _id: id, err: err}, ctx);\n      _.each(aspects.after, function (o) {\n        o.aspect.call(lctx, userId, doc);\n      });\n    }\n    return id;\n  }\n\n  if (async) {\n    args[args.length - 1] = function (err, obj) {\n      after(obj && obj[0] && obj[0]._id || obj, err);\n      return callback.apply(this, arguments);\n    };\n    return _super.apply(self, args);\n  } else {\n    ret = _super.apply(self, args);\n    return after(ret && ret[0] && ret[0]._id || ret);\n  }\n});","CollectionHooks.defineAdvice(\"update\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;\n  var ctx = {context: self, _super: _super, args: args};\n  var callback = _.last(args);\n  var async = _.isFunction(callback);\n  var docs, docIds, fields, abort, prev = {};\n  var collection = _.has(self, \"_collection\") ? self._collection : self;\n\n  // args[0] : selector\n  // args[1] : mutator\n  // args[2] : options (optional)\n  // args[3] : callback\n\n  if (_.isFunction(args[2])) {\n    callback = args[2];\n    args[2] = {};\n  }\n\n  if (!suppressAspects) {\n    try {\n      if (aspects.before || aspects.after) {\n        fields = CollectionHooks.getFields(args[1]);\n        docs = CollectionHooks.getDocs.call(self, collection, args[0], args[2]).fetch();\n        docIds = _.map(docs, function (doc) { return doc._id; });\n      }\n\n      // copy originals for convenience for the \"after\" pointcut\n      if (aspects.after) {\n        prev.mutator = EJSON.clone(args[1]);\n        prev.options = EJSON.clone(args[2]);\n        if (_.some(aspects.after, function (o) { return o.options.fetchPrevious !== false; }) &&\n            CollectionHooks.extendOptions(instance.hookOptions, {}, \"after\", \"update\").fetchPrevious !== false) {\n          prev.docs = {};\n          _.each(docs, function (doc) {\n            prev.docs[doc._id] = EJSON.clone(doc);\n          });\n        }\n      }\n\n      // before\n      _.each(aspects.before, function (o) {\n        _.each(docs, function (doc) {\n          var r = o.aspect.call(_.extend({transform: getTransform(doc)}, ctx), userId, doc, fields, args[1], args[2]);\n          if (r === false) abort = true;\n        });\n      });\n\n      if (abort) return false;\n    } catch (e) {\n      if (async) return callback.call(self, e);\n      throw e;\n    }\n  }\n\n  function after(affected, err) {\n    if (!suppressAspects) {\n      var fields = CollectionHooks.getFields(args[1]);\n      var docs = CollectionHooks.getDocs.call(self, collection, {_id: {$in: docIds}}, args[2]).fetch();\n\n      _.each(aspects.after, function (o) {\n        _.each(docs, function (doc) {\n          o.aspect.call(_.extend({\n            transform: getTransform(doc),\n            previous: prev.docs && prev.docs[doc._id],\n            affected: affected,\n            err: err\n          }, ctx), userId, doc, fields, prev.mutator, prev.options);\n        });\n      });\n    }\n  }\n\n  if (async) {\n    args[args.length - 1] = function (err, affected) {\n      after(affected, err);\n      return callback.apply(this, arguments);\n    };\n    return _super.apply(this, args);\n  } else {\n    var affected = _super.apply(self, args);\n    after(affected);\n    return affected;\n  }\n});","CollectionHooks.defineAdvice(\"remove\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;\n  var ctx = {context: self, _super: _super, args: args};\n  var callback = _.last(args);\n  var async = _.isFunction(callback);\n  var docs, abort, prev = [];\n  var collection = _.has(self, \"_collection\") ? self._collection : self;\n\n  // args[0] : selector\n  // args[1] : callback\n\n  if (!suppressAspects) {\n    try {\n      if (aspects.before || aspects.after) {\n        docs = CollectionHooks.getDocs.call(self, collection, args[0]).fetch();\n      }\n\n      // copy originals for convenience for the \"after\" pointcut\n      if (aspects.after) {\n        _.each(docs, function (doc) {\n          prev.push(EJSON.clone(doc));\n        });\n      }\n\n      // before\n      _.each(aspects.before, function (o) {\n        _.each(docs, function (doc) {\n          var r = o.aspect.call(_.extend({transform: getTransform(doc)}, ctx), userId, doc);\n          if (r === false) abort = true;\n        });\n      });\n\n      if (abort) return false;\n    } catch (e) {\n      if (async) return callback.call(self, e);\n      throw e;\n    }\n  }\n\n  function after(err) {\n    if (!suppressAspects) {\n      _.each(aspects.after, function (o) {\n        _.each(prev, function (doc) {\n          o.aspect.call(_.extend({transform: getTransform(doc), err: err}, ctx), userId, doc);\n        });\n      });\n    }\n  }\n\n  if (async) {\n    args[args.length - 1] = function (err) {\n      after(err);\n      return callback.apply(this, arguments);\n    };\n    return _super.apply(self, args);\n  } else {\n    var result = _super.apply(self, args);\n    after();\n    return result;\n  }\n});","CollectionHooks.defineAdvice(\"upsert\", function (userId, _super, instance, aspectGroup, getTransform, args, suppressAspects) {\n  var self = this;\n  var ctx = {context: self, _super: _super, args: args};\n  var callback = _.last(args);\n  var async = _.isFunction(callback);\n  var docs, docIds, fields, abort, prev = {};\n  var collection = _.has(self, \"_collection\") ? self._collection : self;\n\n  // args[0] : selector\n  // args[1] : mutator\n  // args[2] : options (optional)\n  // args[3] : callback\n\n  if (_.isFunction(args[2])) {\n    callback = args[2];\n    args[2] = {};\n  }\n\n  if (!suppressAspects) {\n    if (aspectGroup.upsert.before) {\n      fields = CollectionHooks.getFields(args[1]);\n      docs = CollectionHooks.getDocs.call(self, collection, args[0], args[2]).fetch();\n      docIds = _.map(docs, function (doc) { return doc._id; });\n    }\n\n    // copy originals for convenience for the \"after\" pointcut\n    if (aspectGroup.update.after) {\n      if (_.some(aspectGroup.update.after, function (o) { return o.options.fetchPrevious !== false; }) &&\n          CollectionHooks.extendOptions(instance.hookOptions, {}, \"after\", \"update\").fetchPrevious !== false) {\n        prev.mutator = EJSON.clone(args[1]);\n        prev.options = EJSON.clone(args[2]);\n        prev.docs = {};\n        _.each(docs, function (doc) {\n          prev.docs[doc._id] = EJSON.clone(doc);\n        });\n      }\n    }\n\n    // before\n    if (!suppressAspects) {\n      _.each(aspectGroup.upsert.before, function (o) {\n        var r = o.aspect.call(ctx, userId, args[0], args[1], args[2]);\n        if (r === false) abort = true;\n      });\n\n      if (abort) return false;\n    }\n  }\n\n  function afterUpdate(affected, err) {\n    if (!suppressAspects) {\n      var fields = CollectionHooks.getFields(args[1]);\n      var docs = CollectionHooks.getDocs.call(self, collection, {_id: {$in: docIds}}, args[2]).fetch();\n\n      _.each(aspectGroup.update.after, function (o) {\n        _.each(docs, function (doc) {\n          o.aspect.call(_.extend({\n            transform: getTransform(doc),\n            previous: prev.docs && prev.docs[doc._id],\n            affected: affected,\n            err: err\n          }, ctx), userId, doc, fields, prev.mutator, prev.options);\n        });\n      });\n    }\n  }\n\n  function afterInsert(id, err) {\n    if (!suppressAspects) {\n      var doc = CollectionHooks.getDocs.call(self, collection, {_id: id}, args[0], {}).fetch()[0]; // 3rd argument passes empty object which causes magic logic to imply limit:1\n      var lctx = _.extend({transform: getTransform(doc), _id: id, err: err}, ctx);\n      _.each(aspectGroup.insert.after, function (o) {\n        o.aspect.call(lctx, userId, doc);\n      });\n    }\n  }\n\n  if (async) {\n    args[args.length - 1] = function (err, ret) {\n      if (ret.insertedId) {\n        afterInsert(ret.insertedId, err);\n      } else {\n        afterUpdate(ret.numberAffected, err);\n      }\n\n      return CollectionHooks.hookedOp(function () {\n        return callback.call(this, err, ret);\n      });\n    };\n\n    return CollectionHooks.directOp(function () {\n      return _super.apply(self, args);\n    });\n  } else {\n    var ret = CollectionHooks.directOp(function () {\n      return _super.apply(self, args);\n    });\n\n    if (ret.insertedId) {\n      afterInsert(ret.insertedId);\n    } else {\n      afterUpdate(ret.numberAffected);\n    }\n\n    return ret;\n  }\n});","CollectionHooks.defineAdvice(\"find\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;\n  var ctx = {context: self, _super: _super, args: args};\n  var ret, abort;\n\n  // args[0] : selector\n  // args[1] : options\n\n  // before\n  if (!suppressAspects) {\n    _.each(aspects.before, function (o) {\n      var r = o.aspect.call(ctx, userId, args[0], args[1]);\n      if (r === false) abort = true;\n    });\n\n    if (abort) return false;\n  }\n\n  function after(cursor) {\n    if (!suppressAspects) {\n      _.each(aspects.after, function (o) {\n        o.aspect.call(ctx, userId, args[0], args[1], cursor);\n      });\n    }\n  }\n\n  ret = _super.apply(self, args);\n  after(ret);\n\n  return ret;\n});","CollectionHooks.defineAdvice(\"findOne\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;\n  var ctx = {context: self, _super: _super, args: args};\n  var ret, abort;\n\n  // args[0] : selector\n  // args[1] : options\n\n  // before\n  if (!suppressAspects) {\n    _.each(aspects.before, function (o) {\n      var r = o.aspect.call(ctx, userId, args[0], args[1]);\n      if (r === false) abort = true;\n    });\n\n    if (abort) return false;\n  }\n\n  function after(doc) {\n    if (!suppressAspects) {\n      _.each(aspects.after, function (o) {\n        o.aspect.call(ctx, userId, args[0], args[1], doc);\n      });\n    }\n  }\n\n  ret = _super.apply(self, args);\n  after(ret);\n\n  return ret;\n});","if (Meteor.users) {\n  // If Meteor.users has been instantiated, attempt to re-assign its prototype:\n  CollectionHooks.reassignPrototype(Meteor.users);\n\n  // Next, give it the hook aspects:\n  var Collection = typeof Mongo !== \"undefined\" && typeof Mongo.Collection !== \"undefined\" ? Mongo.Collection : Meteor.Collection;\n  CollectionHooks.extendCollectionInstance(Meteor.users, Collection);\n}"]}}]