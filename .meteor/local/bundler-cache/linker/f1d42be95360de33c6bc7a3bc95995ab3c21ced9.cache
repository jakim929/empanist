[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar FlowRouter = Package['kadira:flow-router'].FlowRouter;\nvar _ = Package.underscore._;\nvar AccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nvar Accounts = Package['accounts-base'].Accounts;\nvar T9n = Package['softwarerero:accounts-t9n'].T9n;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/useraccounts_flow-routing/lib/core.js                                                                    //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/* global                                                                                                            // 1\n  AccountsTemplates: false,                                                                                          // 2\n  BlazeLayout: false,                                                                                                // 3\n  FlowRouter: false                                                                                                  // 4\n*/                                                                                                                   // 5\n'use strict';                                                                                                        // 6\n                                                                                                                     // 7\n// ---------------------------------------------------------------------------------                                 // 8\n                                                                                                                     // 9\n// Patterns for methods\" parameters                                                                                  // 10\n                                                                                                                     // 11\n// ---------------------------------------------------------------------------------                                 // 12\n                                                                                                                     // 13\n// Add new configuration options                                                                                     // 14\n_.extend(AccountsTemplates.CONFIG_PAT, {                                                                             // 15\n  defaultLayoutType: Match.Optional(String),                                                                         // 16\n  defaultLayout: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),                                     // 17\n  defaultTemplate: Match.Optional(String),                                                                           // 18\n  defaultLayoutRegions: Match.Optional(Object),                                                                      // 19\n  defaultContentRegion: Match.Optional(String),                                                                      // 20\n  renderLayout: Match.Optional(Object),                                                                              // 21\n  contentRange: Match.Optional(String),                                                                              // 22\n});                                                                                                                  // 23\n                                                                                                                     // 24\n// Route configuration pattern to be checked with check                                                              // 25\nvar ROUTE_PAT = {                                                                                                    // 26\n  name: Match.Optional(String),                                                                                      // 27\n  path: Match.Optional(String),                                                                                      // 28\n  template: Match.Optional(String),                                                                                  // 29\n  layoutTemplate: Match.Optional(String),                                                                            // 30\n  renderLayout: Match.Optional(Object),                                                                              // 31\n  contentRange: Match.Optional(String),                                                                              // 32\n  redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),                                          // 33\n};                                                                                                                   // 34\n                                                                                                                     // 35\n/*                                                                                                                   // 36\n  Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the           // 37\n  following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);                   // 38\n    name:           String (optional). A unique route\"s name to be passed to iron-router                             // 39\n    path:           String (optional). A unique route\"s path to be passed to iron-router                             // 40\n    template:       String (optional). The name of the template to be rendered                                       // 41\n    layoutTemplate: String (optional). The name of the layout to be used                                             // 42\n    redirect:       String (optional). The name of the route (or its path) where to redirect after form submit       // 43\n*/                                                                                                                   // 44\n                                                                                                                     // 45\n                                                                                                                     // 46\n// Allowed routes along with theirs default configuration values                                                     // 47\nAccountsTemplates.ROUTE_DEFAULT = {                                                                                  // 48\n  changePwd:      { name: \"atChangePwd\",      path: \"/change-password\"},                                             // 49\n  enrollAccount:  { name: \"atEnrollAccount\",  path: \"/enroll-account\"},                                              // 50\n  ensureSignedIn: { name: \"atEnsureSignedIn\", path: null},                                                           // 51\n  forgotPwd:      { name: \"atForgotPwd\",      path: \"/forgot-password\"},                                             // 52\n  resetPwd:       { name: \"atResetPwd\",       path: \"/reset-password\"},                                              // 53\n  signIn:         { name: \"atSignIn\",         path: \"/sign-in\"},                                                     // 54\n  signUp:         { name: \"atSignUp\",         path: \"/sign-up\"},                                                     // 55\n  verifyEmail:    { name: \"atVerifyEmail\",    path: \"/verify-email\"},                                                // 56\n  resendVerificationEmail: { name: \"atResendVerificationEmail\", path: \"/send-again\"}                                 // 57\n};                                                                                                                   // 58\n                                                                                                                     // 59\n// Current configuration values                                                                                      // 60\nAccountsTemplates.options.defaultLayoutRegions = {};                                                                 // 61\n// Redirects                                                                                                         // 62\nAccountsTemplates.options.homeRoutePath = \"/\";                                                                       // 63\nAccountsTemplates.options.redirectTimeout = 2000; // 2 seconds                                                       // 64\n                                                                                                                     // 65\n// Known routes used to filter out previous path for redirects...                                                    // 66\nAccountsTemplates.knownRoutes = [];                                                                                  // 67\n                                                                                                                     // 68\n// Configured routes                                                                                                 // 69\nAccountsTemplates.routes = {};                                                                                       // 70\n                                                                                                                     // 71\nAccountsTemplates.configureRoute = function(route, options) {                                                        // 72\n  check(route, String);                                                                                              // 73\n  check(options, Match.OneOf(undefined, Match.ObjectIncluding(ROUTE_PAT)));                                          // 74\n  options = _.clone(options);                                                                                        // 75\n  // Route Configuration can be done only before initialization                                                      // 76\n  if (this._initialized) {                                                                                           // 77\n    throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");                          // 78\n  }                                                                                                                  // 79\n  // Only allowed routes can be configured                                                                           // 80\n  if (!(route in this.ROUTE_DEFAULT)) {                                                                              // 81\n    throw new Error(\"Unknown Route!\");                                                                               // 82\n  }                                                                                                                  // 83\n  // Allow route configuration only once                                                                             // 84\n  if (route in this.routes) {                                                                                        // 85\n    throw new Error(\"Route already configured!\");                                                                    // 86\n  }                                                                                                                  // 87\n                                                                                                                     // 88\n  // Possibly adds a initial / to the provided path                                                                  // 89\n  if (options && options.path && options.path[0] !== \"/\") {                                                          // 90\n    options.path = \"/\" + options.path;                                                                               // 91\n  }                                                                                                                  // 92\n                                                                                                                     // 93\n  // Updates the current configuration                                                                               // 94\n  options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);                                                    // 95\n                                                                                                                     // 96\n  // Store route options                                                                                             // 97\n  this.routes[route] = options;                                                                                      // 98\n                                                                                                                     // 99\n  // Known routes are used to filter out previous path for redirects...                                              // 100\n  AccountsTemplates.knownRoutes.push(options.name);                                                                  // 101\n                                                                                                                     // 102\n  if (Meteor.isServer) {                                                                                             // 103\n    // Configures \"reset password\" email link                                                                        // 104\n    if (route === \"resetPwd\") {                                                                                      // 105\n      var resetPwdPath = options.path.substr(1);                                                                     // 106\n      Accounts.urls.resetPassword = function(token) {                                                                // 107\n        return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);                                                       // 108\n      };                                                                                                             // 109\n    }                                                                                                                // 110\n    // Configures \"enroll account\" email link                                                                        // 111\n    if (route === \"enrollAccount\") {                                                                                 // 112\n      var enrollAccountPath = options.path.substr(1);                                                                // 113\n      Accounts.urls.enrollAccount = function(token) {                                                                // 114\n        return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);                                                  // 115\n      };                                                                                                             // 116\n    }                                                                                                                // 117\n    // Configures \"verify email\" email link                                                                          // 118\n    if (route === \"verifyEmail\") {                                                                                   // 119\n      var verifyEmailPath = options.path.substr(1);                                                                  // 120\n      Accounts.urls.verifyEmail = function(token) {                                                                  // 121\n        return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);                                                    // 122\n      };                                                                                                             // 123\n    }                                                                                                                // 124\n  }                                                                                                                  // 125\n                                                                                                                     // 126\n  if (route === \"ensureSignedIn\") {                                                                                  // 127\n    return;                                                                                                          // 128\n  }                                                                                                                  // 129\n  if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange) {                                    // 130\n    throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");                            // 131\n  }                                                                                                                  // 132\n  if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink) {                                  // 133\n    throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");                          // 134\n  }                                                                                                                  // 135\n  if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation) {                                 // 136\n    throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");                         // 137\n  }                                                                                                                  // 138\n                                                                                                                     // 139\n  // Use BlazeLayout by default                                                                                      // 140\n  var defaultLayoutType = AccountsTemplates.options.defaultLayoutType || 'blaze';                                    // 141\n  // fullPageAtForm template unless user specified a different site-wide default                                     // 142\n  var defaultTemplate = AccountsTemplates.options.defaultTemplate || \"fullPageAtForm\";                               // 143\n  // Determines the default layout to be used in case no specific one is                                             // 144\n  // specified for single routes                                                                                     // 145\n  var defaultLayout = AccountsTemplates.options.defaultLayout;                                                       // 146\n  var defaultLayoutRegions = AccountsTemplates.options.defaultLayoutRegions;                                         // 147\n  var defaultContentRegion = AccountsTemplates.options.defaultContentRegion;                                         // 148\n                                                                                                                     // 149\n  var name = options.name; // Default provided...                                                                    // 150\n  var path = options.path; // Default provided...                                                                    // 151\n  var layoutType = options.layoutType || defaultLayoutType;                                                          // 152\n  var template = options.template || defaultTemplate;                                                                // 153\n  var layoutTemplate = options.layoutTemplate || defaultLayout;                                                      // 154\n  var contentRegion = options.contentRegion || defaultContentRegion;                                                 // 155\n  var layoutRegions = _.clone(options.layoutRegions || defaultLayoutRegions || {});                                  // 156\n                                                                                                                     // 157\n  if (layoutType === \"blaze\") {                                                                                      // 158\n                                                                                                                     // 159\n    // Ensure that we have the required packages to render Blaze templates                                           // 160\n                                                                                                                     // 161\n    if (Package['kadira:blaze-layout']) {                                                                            // 162\n      var BlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;                                                  // 163\n    } else {                                                                                                         // 164\n      throw new Error(\"useraccounts:flow-routing requires that your project includes kadira:blaze-layout package.\");\n    }                                                                                                                // 166\n                                                                                                                     // 167\n    // Strings are assumed to be Blaze template names                                                                // 168\n    layoutRegions[contentRegion] = template;                                                                         // 169\n  }                                                                                                                  // 170\n                                                                                                                     // 171\n  if (layoutType === \"blaze-to-react\") {                                                                             // 172\n                                                                                                                     // 173\n    // Ensure that we have the required packages to render Blaze templates                                           // 174\n    //                                                                                                               // 175\n    // For now we need to render the main template using BlazeToReact                                                // 176\n                                                                                                                     // 177\n    if (Package['react-runtime']) {                                                                                  // 178\n      var React = Package['react-runtime'].React;                                                                    // 179\n    } else {                                                                                                         // 180\n      throw new Error(\"layoutTemplate is a React element but React runtime package is not found\");                   // 181\n    }                                                                                                                // 182\n                                                                                                                     // 183\n    if (Package['kadira:react-layout']) {                                                                            // 184\n      var ReactLayout = Package['kadira:react-layout'].ReactLayout;                                                  // 185\n    } else {                                                                                                         // 186\n      throw new Error(\"useraccounts:flow-routing requires that your project includes kadira:react-layout package.\");\n    }                                                                                                                // 188\n                                                                                                                     // 189\n    if (Package['gwendall:blaze-to-react']) {                                                                        // 190\n      var BlazeToReact = Package['gwendall:blaze-to-react'].BlazeToReact;                                            // 191\n    } else {                                                                                                         // 192\n      throw new Error(\"useraccounts:flow-routing requires that your project includes the gwendall:blaze-to-react package.\");\n    }                                                                                                                // 194\n                                                                                                                     // 195\n    layoutRegions[contentRegion] = React.createElement(BlazeToReact, { blazeTemplate: template });                   // 196\n  }                                                                                                                  // 197\n                                                                                                                     // 198\n  function doLayout() {                                                                                              // 199\n    if (layoutType === \"blaze-to-react\") {                                                                           // 200\n                                                                                                                     // 201\n      // The layout template is a React Class.                                                                       // 202\n      // We need to render using ReactLayout and BlazeToReact                                                        // 203\n                                                                                                                     // 204\n      ReactLayout.render(layoutTemplate, layoutRegions);                                                             // 205\n    } else {                                                                                                         // 206\n      // Render using BlazeLayout                                                                                    // 207\n      BlazeLayout.render(layoutTemplate, layoutRegions);                                                             // 208\n    }                                                                                                                // 209\n  }                                                                                                                  // 210\n                                                                                                                     // 211\n  // Possibly adds token parameter                                                                                   // 212\n  if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)) {                                             // 213\n    path += \"/:paramToken\";                                                                                          // 214\n    if (route === \"verifyEmail\") {                                                                                   // 215\n      FlowRouter.route(path, {                                                                                       // 216\n        name: name,                                                                                                  // 217\n        triggersEnter: [                                                                                             // 218\n          function() {                                                                                               // 219\n            AccountsTemplates.setState(route);                                                                       // 220\n            AccountsTemplates.setDisabled(true);                                                                     // 221\n          }                                                                                                          // 222\n        ],                                                                                                           // 223\n        action: function(params) {                                                                                   // 224\n          doLayout();                                                                                                // 225\n                                                                                                                     // 226\n          var token = params.paramToken;                                                                             // 227\n          if (Meteor.isClient) {                                                                                     // 228\n             Accounts.verifyEmail(token, function(error) {                                                           // 229\n               AccountsTemplates.setDisabled(false);                                                                 // 230\n               AccountsTemplates.submitCallback(error, route, function() {                                           // 231\n                 AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);             // 232\n               });                                                                                                   // 233\n             });                                                                                                     // 234\n          }                                                                                                          // 235\n        }                                                                                                            // 236\n      });                                                                                                            // 237\n    } else {                                                                                                         // 238\n      FlowRouter.route(path, {                                                                                       // 239\n        name: name,                                                                                                  // 240\n        triggersEnter: [                                                                                             // 241\n          function() {                                                                                               // 242\n            AccountsTemplates.setState(route);                                                                       // 243\n          }                                                                                                          // 244\n        ],                                                                                                           // 245\n        action: function(params) {                                                                                   // 246\n          doLayout();                                                                                                // 247\n        }                                                                                                            // 248\n      });                                                                                                            // 249\n    }                                                                                                                // 250\n  } else {                                                                                                           // 251\n    FlowRouter.route(path, {                                                                                         // 252\n      name: name,                                                                                                    // 253\n      triggersEnter: [                                                                                               // 254\n        function() {                                                                                                 // 255\n          var redirect = false;                                                                                      // 256\n          if (route === 'changePwd') {                                                                               // 257\n            if (!Meteor.loggingIn() && !Meteor.userId()) {                                                           // 258\n              redirect = true;                                                                                       // 259\n            }                                                                                                        // 260\n          } else if (Meteor.userId()) {                                                                              // 261\n            redirect = true;                                                                                         // 262\n          }                                                                                                          // 263\n          if (redirect) {                                                                                            // 264\n            AccountsTemplates.postSubmitRedirect(route);                                                             // 265\n          } else {                                                                                                   // 266\n            AccountsTemplates.setState(route);                                                                       // 267\n          }                                                                                                          // 268\n        }                                                                                                            // 269\n      ],                                                                                                             // 270\n      action: function() {                                                                                           // 271\n        doLayout();                                                                                                  // 272\n      }                                                                                                              // 273\n    });                                                                                                              // 274\n  }                                                                                                                  // 275\n};                                                                                                                   // 276\n                                                                                                                     // 277\n                                                                                                                     // 278\nAccountsTemplates.getRouteName = function(route) {                                                                   // 279\n  if (route in this.routes) {                                                                                        // 280\n    return this.routes[route].name;                                                                                  // 281\n  }                                                                                                                  // 282\n  return null;                                                                                                       // 283\n};                                                                                                                   // 284\n                                                                                                                     // 285\nAccountsTemplates.getRoutePath = function(route) {                                                                   // 286\n  if (route in this.routes) {                                                                                        // 287\n    return this.routes[route].path;                                                                                  // 288\n  }                                                                                                                  // 289\n  return \"#\";                                                                                                        // 290\n};                                                                                                                   // 291\n                                                                                                                     // 292\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/useraccounts_flow-routing/lib/client/client.js                                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/* global                                                                                                            // 1\n  AccountsTemplates: false,                                                                                          // 2\n  BlazeLayout: false,                                                                                                // 3\n  grecaptcha: false,                                                                                                 // 4\n  FlowRouter: false,                                                                                                 // 5\n  $: false                                                                                                           // 6\n*/                                                                                                                   // 7\n'use strict';                                                                                                        // 8\n                                                                                                                     // 9\n                                                                                                                     // 10\n// Previous path used for redirect after form submit                                                                 // 11\nAccountsTemplates._prevPath = null;                                                                                  // 12\n                                                                                                                     // 13\n// Possibly keeps reference to the handle for the timed out redirect                                                 // 14\n// set on some routes                                                                                                // 15\nAccountsTemplates.timedOutRedirect = null;                                                                           // 16\n                                                                                                                     // 17\n                                                                                                                     // 18\nAccountsTemplates.clearState = function() {                                                                          // 19\n  _.each(this._fields, function(field) {                                                                             // 20\n    field.clearStatus();                                                                                             // 21\n  });                                                                                                                // 22\n  var form = this.state.form;                                                                                        // 23\n  form.set('error', null);                                                                                           // 24\n  form.set('result', null);                                                                                          // 25\n  form.set('message', null);                                                                                         // 26\n                                                                                                                     // 27\n  AccountsTemplates.setDisabled(false);                                                                              // 28\n                                                                                                                     // 29\n  // Possibly clears timed out redirects                                                                             // 30\n  if (AccountsTemplates.timedOutRedirect !== null) {                                                                 // 31\n    Meteor.clearTimeout(AccountsTemplates.timedOutRedirect);                                                         // 32\n    AccountsTemplates.timedOutRedirect = null;                                                                       // 33\n  }                                                                                                                  // 34\n};                                                                                                                   // 35\n                                                                                                                     // 36\nAccountsTemplates.getparamToken = function() {                                                                       // 37\n  return FlowRouter.getParam('paramToken');                                                                          // 38\n};                                                                                                                   // 39\n                                                                                                                     // 40\n// Getter for previous route's path                                                                                  // 41\nAccountsTemplates.getPrevPath = function() {                                                                         // 42\n  return this._prevPath;                                                                                             // 43\n};                                                                                                                   // 44\n                                                                                                                     // 45\n// Setter for previous route's path                                                                                  // 46\nAccountsTemplates.setPrevPath = function(newPath) {                                                                  // 47\n  check(newPath, String);                                                                                            // 48\n  this._prevPath = newPath;                                                                                          // 49\n};                                                                                                                   // 50\n                                                                                                                     // 51\nAccountsTemplates.ensureSignedIn = function(context, redirect) {                                                     // 52\n  if (!Meteor.userId()) {                                                                                            // 53\n    // if we're not already on an AT route                                                                           // 54\n    if (!_.contains(AccountsTemplates.knownRoutes, context.route.name)) {                                            // 55\n                                                                                                                     // 56\n      AccountsTemplates.setState(AccountsTemplates.options.defaultState, function() {                                // 57\n        var err = AccountsTemplates.texts.errors.mustBeLoggedIn;                                                     // 58\n        AccountsTemplates.state.form.set(\"error\", [err]);                                                            // 59\n      });                                                                                                            // 60\n                                                                                                                     // 61\n      // redirect settings                                                                                           // 62\n      AccountsTemplates.avoidRedirect = true;                                                                        // 63\n      AccountsTemplates.avoidClearError = true;                                                                      // 64\n      AccountsTemplates.redirectToPrevPath = true;                                                                   // 65\n                                                                                                                     // 66\n      // redirect to defined sign-in route and then redirect back                                                    // 67\n      // to original route after successful sign in                                                                  // 68\n      var signInRouteName = AccountsTemplates.getRouteName('signIn');                                                // 69\n      if (signInRouteName) {                                                                                         // 70\n        redirect(signInRouteName);                                                                                   // 71\n      }                                                                                                              // 72\n      else {                                                                                                         // 73\n        throw Error('[ensureSignedIn] no signIn route configured!');                                                 // 74\n      }                                                                                                              // 75\n    }                                                                                                                // 76\n  }                                                                                                                  // 77\n};                                                                                                                   // 78\n                                                                                                                     // 79\n// Stores previous path on path change...                                                                            // 80\nFlowRouter.triggers.exit([                                                                                           // 81\n  function(context) {                                                                                                // 82\n    var routeName = context.route.name;                                                                              // 83\n    var knownRoute = _.contains(AccountsTemplates.knownRoutes, routeName);                                           // 84\n    if (!knownRoute) {                                                                                               // 85\n      AccountsTemplates.setPrevPath(context.path);                                                                   // 86\n    }                                                                                                                // 87\n  }                                                                                                                  // 88\n]);                                                                                                                  // 89\n                                                                                                                     // 90\nAccountsTemplates.linkClick = function(route) {                                                                      // 91\n  if (AccountsTemplates.disabled()) {                                                                                // 92\n    return;                                                                                                          // 93\n  }                                                                                                                  // 94\n  var path = AccountsTemplates.getRoutePath(route);                                                                  // 95\n  if (path === '#' || AccountsTemplates.avoidRedirect || path === FlowRouter.current().path) {                       // 96\n    AccountsTemplates.setState(route);                                                                               // 97\n  } else {                                                                                                           // 98\n    Meteor.defer(function() {                                                                                        // 99\n      FlowRouter.go(path);                                                                                           // 100\n    });                                                                                                              // 101\n  }                                                                                                                  // 102\n                                                                                                                     // 103\n  if (AccountsTemplates.options.focusFirstInput) {                                                                   // 104\n    var firstVisibleInput = _.find(this.getFields(), function(f) {                                                   // 105\n      return _.contains(f.visible, route);                                                                           // 106\n    });                                                                                                              // 107\n    if (firstVisibleInput) {                                                                                         // 108\n      $('input#at-field-' + firstVisibleInput._id).focus();                                                          // 109\n    }                                                                                                                // 110\n  }                                                                                                                  // 111\n};                                                                                                                   // 112\n                                                                                                                     // 113\nAccountsTemplates.logout = function() {                                                                              // 114\n  var onLogoutHook = AccountsTemplates.options.onLogoutHook;                                                         // 115\n  var homeRoutePath = AccountsTemplates.options.homeRoutePath;                                                       // 116\n  Meteor.logout(function() {                                                                                         // 117\n    if (onLogoutHook) {                                                                                              // 118\n      onLogoutHook();                                                                                                // 119\n    } else if (homeRoutePath) {                                                                                      // 120\n      FlowRouter.redirect(homeRoutePath);                                                                            // 121\n    }                                                                                                                // 122\n  });                                                                                                                // 123\n};                                                                                                                   // 124\n                                                                                                                     // 125\nAccountsTemplates.postSubmitRedirect = function(route) {                                                             // 126\n  if (AccountsTemplates.avoidRedirect) {                                                                             // 127\n    AccountsTemplates.avoidRedirect = false;                                                                         // 128\n    if (AccountsTemplates.redirectToPrevPath) {                                                                      // 129\n      FlowRouter.redirect(AccountsTemplates.getPrevPath());                                                          // 130\n    }                                                                                                                // 131\n  } else {                                                                                                           // 132\n    var nextPath = AccountsTemplates.routes[route] && AccountsTemplates.routes[route].redirect;                      // 133\n    if (nextPath) {                                                                                                  // 134\n      if (_.isFunction(nextPath)) {                                                                                  // 135\n        nextPath();                                                                                                  // 136\n      } else {                                                                                                       // 137\n        FlowRouter.go(nextPath);                                                                                     // 138\n      }                                                                                                              // 139\n    } else {                                                                                                         // 140\n      var previousPath = AccountsTemplates.getPrevPath();                                                            // 141\n      if (previousPath && FlowRouter.current().path !== previousPath) {                                              // 142\n        FlowRouter.go(previousPath);                                                                                 // 143\n      } else {                                                                                                       // 144\n        var homeRoutePath = AccountsTemplates.options.homeRoutePath;                                                 // 145\n        if (homeRoutePath) {                                                                                         // 146\n          FlowRouter.go(homeRoutePath);                                                                              // 147\n        }                                                                                                            // 148\n      }                                                                                                              // 149\n    }                                                                                                                // 150\n  }                                                                                                                  // 151\n};                                                                                                                   // 152\n                                                                                                                     // 153\nAccountsTemplates.submitCallback = function(error, state, onSuccess) {                                               // 154\n                                                                                                                     // 155\n  var onSubmitHook = AccountsTemplates.options.onSubmitHook;                                                         // 156\n  if (onSubmitHook) {                                                                                                // 157\n    onSubmitHook(error, state);                                                                                      // 158\n  }                                                                                                                  // 159\n                                                                                                                     // 160\n  if (error) {                                                                                                       // 161\n    if (_.isObject(error.details)) {                                                                                 // 162\n      if (error.error === 'validation-error') {                                                                      // 163\n        // This error is a ValidationError from the mdg:validation-error package.                                    // 164\n        // It has a well-defined error format                                                                        // 165\n                                                                                                                     // 166\n        // Record errors that don't correspond to fields in the form                                                 // 167\n        var errorsWithoutField = [];                                                                                 // 168\n                                                                                                                     // 169\n        _.each(error.details, function(fieldError) {                                                                 // 170\n          var field = AccountsTemplates.getField(fieldError.name);                                                   // 171\n                                                                                                                     // 172\n          if (field) {                                                                                               // 173\n            // XXX in the future, this should have a way to do i18n                                                  // 174\n            field.setError(fieldError.type);                                                                         // 175\n          } else {                                                                                                   // 176\n            errorsWithoutField.push(fieldError.type);                                                                // 177\n          }                                                                                                          // 178\n        });                                                                                                          // 179\n                                                                                                                     // 180\n        if (errorsWithoutField) {                                                                                    // 181\n          AccountsTemplates.state.form.set('error', errorsWithoutField);                                             // 182\n        }                                                                                                            // 183\n      } else {                                                                                                       // 184\n        // If error.details is an object, we may try to set fields errors from it                                    // 185\n        _.each(error.details, function(error, fieldId) {                                                             // 186\n          AccountsTemplates.getField(fieldId).setError(error);                                                       // 187\n        });                                                                                                          // 188\n      }                                                                                                              // 189\n    } else {                                                                                                         // 190\n      var err = 'error.accounts.Unknown error';                                                                      // 191\n      if (error.reason) {                                                                                            // 192\n        err = error.reason;                                                                                          // 193\n      }                                                                                                              // 194\n      if (err.substring(0, 15) !== 'error.accounts.') {                                                              // 195\n        err = 'error.accounts.' + err;                                                                               // 196\n      }                                                                                                              // 197\n      AccountsTemplates.state.form.set('error', [err]);                                                              // 198\n    }                                                                                                                // 199\n    AccountsTemplates.setDisabled(false);                                                                            // 200\n    // Possibly resets reCaptcha form                                                                                // 201\n    if (state === 'signUp' && AccountsTemplates.options.showReCaptcha) {                                             // 202\n      grecaptcha.reset();                                                                                            // 203\n    }                                                                                                                // 204\n  } else {                                                                                                           // 205\n    if (onSuccess) {                                                                                                 // 206\n      onSuccess();                                                                                                   // 207\n    }                                                                                                                // 208\n                                                                                                                     // 209\n    if (_.contains(['enrollAccount', 'forgotPwd', 'resetPwd', 'verifyEmail'], state)) {                              // 210\n      var redirectTimeout = AccountsTemplates.options.redirectTimeout;                                               // 211\n      if (redirectTimeout > 0) {                                                                                     // 212\n        AccountsTemplates.timedOutRedirect = Meteor.setTimeout(function() {                                          // 213\n          AccountsTemplates.timedOutRedirect = null;                                                                 // 214\n          AccountsTemplates.setDisabled(false);                                                                      // 215\n          AccountsTemplates.postSubmitRedirect(state);                                                               // 216\n        }, redirectTimeout);                                                                                         // 217\n      }                                                                                                              // 218\n    } else if (state) {                                                                                              // 219\n      AccountsTemplates.setDisabled(false);                                                                          // 220\n      AccountsTemplates.postSubmitRedirect(state);                                                                   // 221\n    }                                                                                                                // 222\n  }                                                                                                                  // 223\n};                                                                                                                   // 224\n                                                                                                                     // 225\n// Initialization                                                                                                    // 226\nif (FlowRouter && FlowRouter.initialize) {                                                                           // 227\n  // In order for ensureSignIn triggers to work,                                                                     // 228\n  // AccountsTemplates must be initialized before FlowRouter                                                         // 229\n  // (this is now true since useraccounts:core is being executed first...)                                           // 230\n  var oldInitialize = FlowRouter.initialize;                                                                         // 231\n  FlowRouter.initialize = function() {                                                                               // 232\n    AccountsTemplates._init();                                                                                       // 233\n    oldInitialize.apply(this, arguments);                                                                            // 234\n  };                                                                                                                 // 235\n}                                                                                                                    // 236\n                                                                                                                     // 237\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/useraccounts_flow-routing/lib/client/templates_helpers/at_input.js                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/* global                                                                                                            // 1\n  AccountsTemplates: false,                                                                                          // 2\n  FlowRouter: false                                                                                                  // 3\n*/                                                                                                                   // 4\n'use strict';                                                                                                        // 5\n                                                                                                                     // 6\nAccountsTemplates.atInputRendered.push(function(){                                                                   // 7\n  var fieldId = this.data._id;                                                                                       // 8\n  var queryKey = this.data.options && this.data.options.queryKey || fieldId;                                         // 9\n  var inputQueryVal = FlowRouter.getQueryParam(queryKey);                                                            // 10\n  if (inputQueryVal) {                                                                                               // 11\n    this.$(\"input#at-field-\" + fieldId).val(inputQueryVal);                                                          // 12\n  }                                                                                                                  // 13\n});                                                                                                                  // 14\n                                                                                                                     // 15\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['useraccounts:flow-routing'] = {};\n\n})();\n","servePath":"/packages/useraccounts_flow-routing.js","sourceMap":{"version":3,"sources":["/packages/useraccounts_flow-routing/lib/core.js","/packages/useraccounts_flow-routing/lib/client/client.js","/packages/useraccounts_flow-routing/lib/client/templates_helpers/at_input.js"],"names":[],"mappingsnfile":"/packages/useraccounts_flow-routing.js","sourcesContent":["/* global\n  AccountsTemplates: false,\n  BlazeLayout: false,\n  FlowRouter: false\n*/\n'use strict';\n\n// ---------------------------------------------------------------------------------\n\n// Patterns for methods\" parameters\n\n// ---------------------------------------------------------------------------------\n\n// Add new configuration options\n_.extend(AccountsTemplates.CONFIG_PAT, {\n  defaultLayoutType: Match.Optional(String),\n  defaultLayout: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n  defaultTemplate: Match.Optional(String),\n  defaultLayoutRegions: Match.Optional(Object),\n  defaultContentRegion: Match.Optional(String),\n  renderLayout: Match.Optional(Object),\n  contentRange: Match.Optional(String),\n});\n\n// Route configuration pattern to be checked with check\nvar ROUTE_PAT = {\n  name: Match.Optional(String),\n  path: Match.Optional(String),\n  template: Match.Optional(String),\n  layoutTemplate: Match.Optional(String),\n  renderLayout: Match.Optional(Object),\n  contentRange: Match.Optional(String),\n  redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n};\n\n/*\n  Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the\n  following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);\n    name:           String (optional). A unique route\"s name to be passed to iron-router\n    path:           String (optional). A unique route\"s path to be passed to iron-router\n    template:       String (optional). The name of the template to be rendered\n    layoutTemplate: String (optional). The name of the layout to be used\n    redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/\n\n\n// Allowed routes along with theirs default configuration values\nAccountsTemplates.ROUTE_DEFAULT = {\n  changePwd:      { name: \"atChangePwd\",      path: \"/change-password\"},\n  enrollAccount:  { name: \"atEnrollAccount\",  path: \"/enroll-account\"},\n  ensureSignedIn: { name: \"atEnsureSignedIn\", path: null},\n  forgotPwd:      { name: \"atForgotPwd\",      path: \"/forgot-password\"},\n  resetPwd:       { name: \"atResetPwd\",       path: \"/reset-password\"},\n  signIn:         { name: \"atSignIn\",         path: \"/sign-in\"},\n  signUp:         { name: \"atSignUp\",         path: \"/sign-up\"},\n  verifyEmail:    { name: \"atVerifyEmail\",    path: \"/verify-email\"},\n  resendVerificationEmail: { name: \"atResendVerificationEmail\", path: \"/send-again\"}\n};\n\n// Current configuration values\nAccountsTemplates.options.defaultLayoutRegions = {};\n// Redirects\nAccountsTemplates.options.homeRoutePath = \"/\";\nAccountsTemplates.options.redirectTimeout = 2000; // 2 seconds\n\n// Known routes used to filter out previous path for redirects...\nAccountsTemplates.knownRoutes = [];\n\n// Configured routes\nAccountsTemplates.routes = {};\n\nAccountsTemplates.configureRoute = function(route, options) {\n  check(route, String);\n  check(options, Match.OneOf(undefined, Match.ObjectIncluding(ROUTE_PAT)));\n  options = _.clone(options);\n  // Route Configuration can be done only before initialization\n  if (this._initialized) {\n    throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");\n  }\n  // Only allowed routes can be configured\n  if (!(route in this.ROUTE_DEFAULT)) {\n    throw new Error(\"Unknown Route!\");\n  }\n  // Allow route configuration only once\n  if (route in this.routes) {\n    throw new Error(\"Route already configured!\");\n  }\n\n  // Possibly adds a initial / to the provided path\n  if (options && options.path && options.path[0] !== \"/\") {\n    options.path = \"/\" + options.path;\n  }\n\n  // Updates the current configuration\n  options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);\n\n  // Store route options\n  this.routes[route] = options;\n\n  // Known routes are used to filter out previous path for redirects...\n  AccountsTemplates.knownRoutes.push(options.name);\n\n  if (Meteor.isServer) {\n    // Configures \"reset password\" email link\n    if (route === \"resetPwd\") {\n      var resetPwdPath = options.path.substr(1);\n      Accounts.urls.resetPassword = function(token) {\n        return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);\n      };\n    }\n    // Configures \"enroll account\" email link\n    if (route === \"enrollAccount\") {\n      var enrollAccountPath = options.path.substr(1);\n      Accounts.urls.enrollAccount = function(token) {\n        return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);\n      };\n    }\n    // Configures \"verify email\" email link\n    if (route === \"verifyEmail\") {\n      var verifyEmailPath = options.path.substr(1);\n      Accounts.urls.verifyEmail = function(token) {\n        return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);\n      };\n    }\n  }\n\n  if (route === \"ensureSignedIn\") {\n    return;\n  }\n  if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange) {\n    throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");\n  }\n  if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink) {\n    throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");\n  }\n  if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation) {\n    throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");\n  }\n\n  // Use BlazeLayout by default\n  var defaultLayoutType = AccountsTemplates.options.defaultLayoutType || 'blaze';\n  // fullPageAtForm template unless user specified a different site-wide default\n  var defaultTemplate = AccountsTemplates.options.defaultTemplate || \"fullPageAtForm\";\n  // Determines the default layout to be used in case no specific one is\n  // specified for single routes\n  var defaultLayout = AccountsTemplates.options.defaultLayout;\n  var defaultLayoutRegions = AccountsTemplates.options.defaultLayoutRegions;\n  var defaultContentRegion = AccountsTemplates.options.defaultContentRegion;\n\n  var name = options.name; // Default provided...\n  var path = options.path; // Default provided...\n  var layoutType = options.layoutType || defaultLayoutType;\n  var template = options.template || defaultTemplate;\n  var layoutTemplate = options.layoutTemplate || defaultLayout;\n  var contentRegion = options.contentRegion || defaultContentRegion;\n  var layoutRegions = _.clone(options.layoutRegions || defaultLayoutRegions || {});\n\n  if (layoutType === \"blaze\") {\n\n    // Ensure that we have the required packages to render Blaze templates\n\n    if (Package['kadira:blaze-layout']) {\n      var BlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;\n    } else {\n      throw new Error(\"useraccounts:flow-routing requires that your project includes kadira:blaze-layout package.\");\n    }\n\n    // Strings are assumed to be Blaze template names\n    layoutRegions[contentRegion] = template;\n  }\n\n  if (layoutType === \"blaze-to-react\") {\n\n    // Ensure that we have the required packages to render Blaze templates\n    //\n    // For now we need to render the main template using BlazeToReact\n\n    if (Package['react-runtime']) {\n      var React = Package['react-runtime'].React;\n    } else {\n      throw new Error(\"layoutTemplate is a React element but React runtime package is not found\");\n    }\n\n    if (Package['kadira:react-layout']) {\n      var ReactLayout = Package['kadira:react-layout'].ReactLayout;\n    } else {\n      throw new Error(\"useraccounts:flow-routing requires that your project includes kadira:react-layout package.\");\n    }\n\n    if (Package['gwendall:blaze-to-react']) {\n      var BlazeToReact = Package['gwendall:blaze-to-react'].BlazeToReact;\n    } else {\n      throw new Error(\"useraccounts:flow-routing requires that your project includes the gwendall:blaze-to-react package.\");\n    }\n\n    layoutRegions[contentRegion] = React.createElement(BlazeToReact, { blazeTemplate: template });\n  }\n\n  function doLayout() {\n    if (layoutType === \"blaze-to-react\") {\n\n      // The layout template is a React Class.\n      // We need to render using ReactLayout and BlazeToReact\n\n      ReactLayout.render(layoutTemplate, layoutRegions);\n    } else {\n      // Render using BlazeLayout\n      BlazeLayout.render(layoutTemplate, layoutRegions);\n    }\n  }\n\n  // Possibly adds token parameter\n  if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)) {\n    path += \"/:paramToken\";\n    if (route === \"verifyEmail\") {\n      FlowRouter.route(path, {\n        name: name,\n        triggersEnter: [\n          function() {\n            AccountsTemplates.setState(route);\n            AccountsTemplates.setDisabled(true);\n          }\n        ],\n        action: function(params) {\n          doLayout();\n\n          var token = params.paramToken;\n          if (Meteor.isClient) {\n             Accounts.verifyEmail(token, function(error) {\n               AccountsTemplates.setDisabled(false);\n               AccountsTemplates.submitCallback(error, route, function() {\n                 AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);\n               });\n             });\n          }\n        }\n      });\n    } else {\n      FlowRouter.route(path, {\n        name: name,\n        triggersEnter: [\n          function() {\n            AccountsTemplates.setState(route);\n          }\n        ],\n        action: function(params) {\n          doLayout();\n        }\n      });\n    }\n  } else {\n    FlowRouter.route(path, {\n      name: name,\n      triggersEnter: [\n        function() {\n          var redirect = false;\n          if (route === 'changePwd') {\n            if (!Meteor.loggingIn() && !Meteor.userId()) {\n              redirect = true;\n            }\n          } else if (Meteor.userId()) {\n            redirect = true;\n          }\n          if (redirect) {\n            AccountsTemplates.postSubmitRedirect(route);\n          } else {\n            AccountsTemplates.setState(route);\n          }\n        }\n      ],\n      action: function() {\n        doLayout();\n      }\n    });\n  }\n};\n\n\nAccountsTemplates.getRouteName = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].name;\n  }\n  return null;\n};\n\nAccountsTemplates.getRoutePath = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].path;\n  }\n  return \"#\";\n};\n","/* global\n  AccountsTemplates: false,\n  BlazeLayout: false,\n  grecaptcha: false,\n  FlowRouter: false,\n  $: false\n*/\n'use strict';\n\n\n// Previous path used for redirect after form submit\nAccountsTemplates._prevPath = null;\n\n// Possibly keeps reference to the handle for the timed out redirect\n// set on some routes\nAccountsTemplates.timedOutRedirect = null;\n\n\nAccountsTemplates.clearState = function() {\n  _.each(this._fields, function(field) {\n    field.clearStatus();\n  });\n  var form = this.state.form;\n  form.set('error', null);\n  form.set('result', null);\n  form.set('message', null);\n\n  AccountsTemplates.setDisabled(false);\n\n  // Possibly clears timed out redirects\n  if (AccountsTemplates.timedOutRedirect !== null) {\n    Meteor.clearTimeout(AccountsTemplates.timedOutRedirect);\n    AccountsTemplates.timedOutRedirect = null;\n  }\n};\n\nAccountsTemplates.getparamToken = function() {\n  return FlowRouter.getParam('paramToken');\n};\n\n// Getter for previous route's path\nAccountsTemplates.getPrevPath = function() {\n  return this._prevPath;\n};\n\n// Setter for previous route's path\nAccountsTemplates.setPrevPath = function(newPath) {\n  check(newPath, String);\n  this._prevPath = newPath;\n};\n\nAccountsTemplates.ensureSignedIn = function(context, redirect) {\n  if (!Meteor.userId()) {\n    // if we're not already on an AT route\n    if (!_.contains(AccountsTemplates.knownRoutes, context.route.name)) {\n\n      AccountsTemplates.setState(AccountsTemplates.options.defaultState, function() {\n        var err = AccountsTemplates.texts.errors.mustBeLoggedIn;\n        AccountsTemplates.state.form.set(\"error\", [err]);\n      });\n\n      // redirect settings\n      AccountsTemplates.avoidRedirect = true;\n      AccountsTemplates.avoidClearError = true;\n      AccountsTemplates.redirectToPrevPath = true;\n\n      // redirect to defined sign-in route and then redirect back\n      // to original route after successful sign in\n      var signInRouteName = AccountsTemplates.getRouteName('signIn');\n      if (signInRouteName) {\n        redirect(signInRouteName);\n      }\n      else {\n        throw Error('[ensureSignedIn] no signIn route configured!');\n      }\n    }\n  }\n};\n\n// Stores previous path on path change...\nFlowRouter.triggers.exit([\n  function(context) {\n    var routeName = context.route.name;\n    var knownRoute = _.contains(AccountsTemplates.knownRoutes, routeName);\n    if (!knownRoute) {\n      AccountsTemplates.setPrevPath(context.path);\n    }\n  }\n]);\n\nAccountsTemplates.linkClick = function(route) {\n  if (AccountsTemplates.disabled()) {\n    return;\n  }\n  var path = AccountsTemplates.getRoutePath(route);\n  if (path === '#' || AccountsTemplates.avoidRedirect || path === FlowRouter.current().path) {\n    AccountsTemplates.setState(route);\n  } else {\n    Meteor.defer(function() {\n      FlowRouter.go(path);\n    });\n  }\n\n  if (AccountsTemplates.options.focusFirstInput) {\n    var firstVisibleInput = _.find(this.getFields(), function(f) {\n      return _.contains(f.visible, route);\n    });\n    if (firstVisibleInput) {\n      $('input#at-field-' + firstVisibleInput._id).focus();\n    }\n  }\n};\n\nAccountsTemplates.logout = function() {\n  var onLogoutHook = AccountsTemplates.options.onLogoutHook;\n  var homeRoutePath = AccountsTemplates.options.homeRoutePath;\n  Meteor.logout(function() {\n    if (onLogoutHook) {\n      onLogoutHook();\n    } else if (homeRoutePath) {\n      FlowRouter.redirect(homeRoutePath);\n    }\n  });\n};\n\nAccountsTemplates.postSubmitRedirect = function(route) {\n  if (AccountsTemplates.avoidRedirect) {\n    AccountsTemplates.avoidRedirect = false;\n    if (AccountsTemplates.redirectToPrevPath) {\n      FlowRouter.redirect(AccountsTemplates.getPrevPath());\n    }\n  } else {\n    var nextPath = AccountsTemplates.routes[route] && AccountsTemplates.routes[route].redirect;\n    if (nextPath) {\n      if (_.isFunction(nextPath)) {\n        nextPath();\n      } else {\n        FlowRouter.go(nextPath);\n      }\n    } else {\n      var previousPath = AccountsTemplates.getPrevPath();\n      if (previousPath && FlowRouter.current().path !== previousPath) {\n        FlowRouter.go(previousPath);\n      } else {\n        var homeRoutePath = AccountsTemplates.options.homeRoutePath;\n        if (homeRoutePath) {\n          FlowRouter.go(homeRoutePath);\n        }\n      }\n    }\n  }\n};\n\nAccountsTemplates.submitCallback = function(error, state, onSuccess) {\n\n  var onSubmitHook = AccountsTemplates.options.onSubmitHook;\n  if (onSubmitHook) {\n    onSubmitHook(error, state);\n  }\n\n  if (error) {\n    if (_.isObject(error.details)) {\n      if (error.error === 'validation-error') {\n        // This error is a ValidationError from the mdg:validation-error package.\n        // It has a well-defined error format\n\n        // Record errors that don't correspond to fields in the form\n        var errorsWithoutField = [];\n\n        _.each(error.details, function(fieldError) {\n          var field = AccountsTemplates.getField(fieldError.name);\n\n          if (field) {\n            // XXX in the future, this should have a way to do i18n\n            field.setError(fieldError.type);\n          } else {\n            errorsWithoutField.push(fieldError.type);\n          }\n        });\n\n        if (errorsWithoutField) {\n          AccountsTemplates.state.form.set('error', errorsWithoutField);\n        }\n      } else {\n        // If error.details is an object, we may try to set fields errors from it\n        _.each(error.details, function(error, fieldId) {\n          AccountsTemplates.getField(fieldId).setError(error);\n        });\n      }\n    } else {\n      var err = 'error.accounts.Unknown error';\n      if (error.reason) {\n        err = error.reason;\n      }\n      if (err.substring(0, 15) !== 'error.accounts.') {\n        err = 'error.accounts.' + err;\n      }\n      AccountsTemplates.state.form.set('error', [err]);\n    }\n    AccountsTemplates.setDisabled(false);\n    // Possibly resets reCaptcha form\n    if (state === 'signUp' && AccountsTemplates.options.showReCaptcha) {\n      grecaptcha.reset();\n    }\n  } else {\n    if (onSuccess) {\n      onSuccess();\n    }\n\n    if (_.contains(['enrollAccount', 'forgotPwd', 'resetPwd', 'verifyEmail'], state)) {\n      var redirectTimeout = AccountsTemplates.options.redirectTimeout;\n      if (redirectTimeout > 0) {\n        AccountsTemplates.timedOutRedirect = Meteor.setTimeout(function() {\n          AccountsTemplates.timedOutRedirect = null;\n          AccountsTemplates.setDisabled(false);\n          AccountsTemplates.postSubmitRedirect(state);\n        }, redirectTimeout);\n      }\n    } else if (state) {\n      AccountsTemplates.setDisabled(false);\n      AccountsTemplates.postSubmitRedirect(state);\n    }\n  }\n};\n\n// Initialization\nif (FlowRouter && FlowRouter.initialize) {\n  // In order for ensureSignIn triggers to work,\n  // AccountsTemplates must be initialized before FlowRouter\n  // (this is now true since useraccounts:core is being executed first...)\n  var oldInitialize = FlowRouter.initialize;\n  FlowRouter.initialize = function() {\n    AccountsTemplates._init();\n    oldInitialize.apply(this, arguments);\n  };\n}\n","/* global\n  AccountsTemplates: false,\n  FlowRouter: false\n*/\n'use strict';\n\nAccountsTemplates.atInputRendered.push(function(){\n  var fieldId = this.data._id;\n  var queryKey = this.data.options && this.data.options.queryKey || fieldId;\n  var inputQueryVal = FlowRouter.getQueryParam(queryKey);\n  if (inputQueryVal) {\n    this.$(\"input#at-field-\" + fieldId).val(inputQueryVal);\n  }\n});\n"]}}]