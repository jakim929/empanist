[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar blocking = Package['peerlibrary:blocking'].blocking;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar AWS;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/peerlibrary_aws-sdk/packages/peerlibrary_aws-sdk.js      //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary:aws-sdk/aws-sdk-js/dist/aws-sdk.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// AWS SDK for JavaScript v2.2.42                                                                                      // 1\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                                                  // 2\n// License at https://sdk.amazonaws.com/js/BUNDLE_LICENSE.txt                                                          // 3\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar AWS = require('./core');                                                                                           // 5\n                                                                                                                       // 6\nAWS.apiLoader = function(svc, version) {                                                                               // 7\n  return AWS.apiLoader.services[svc][version];                                                                         // 8\n};                                                                                                                     // 9\n                                                                                                                       // 10\n                                                                                                                       // 11\nAWS.apiLoader.services = {};                                                                                           // 12\n                                                                                                                       // 13\nAWS.XML.Parser = require('./xml/browser_parser');                                                                      // 14\n                                                                                                                       // 15\nrequire('./http/xhr');                                                                                                 // 16\n                                                                                                                       // 17\nif (typeof window !== 'undefined') window.AWS = AWS;                                                                   // 18\nif (typeof module !== 'undefined') module.exports = AWS;                                                               // 19\nif (typeof self !== 'undefined') self.AWS = AWS;                                                                       // 20\nAWS.apiLoader.services['acm'] = {};                                                                                    // 21\nAWS.ACM = AWS.Service.defineService('acm', [ '2015-12-08' ]);                                                          // 22\n                                                                                                                       // 23\nAWS.apiLoader.services['acm']['2015-12-08'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-12-08\",\"endpointPrefix\":\"acm\",\"jsonVersion\":\"1.1\",\"serviceAbbreviation\":\"ACM\",\"serviceFullName\":\"AWS Certificate Manager\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"CertificateManager\",\"protocol\":\"json\"},\"operations\":{\"DeleteCertificate\":{\"input\":{\"type\":\"structure\",\"required\":[\"CertificateArn\"],\"members\":{\"CertificateArn\":{}}},\"http\":{}},\"DescribeCertificate\":{\"input\":{\"type\":\"structure\",\"required\":[\"CertificateArn\"],\"members\":{\"CertificateArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Certificate\":{\"type\":\"structure\",\"members\":{\"CertificateArn\":{},\"DomainName\":{},\"SubjectAlternativeNames\":{\"shape\":\"S7\"},\"DomainValidationOptions\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"DomainName\"],\"members\":{\"DomainName\":{},\"ValidationEmails\":{\"type\":\"list\",\"member\":{}},\"ValidationDomain\":{}}}},\"Serial\":{},\"Subject\":{},\"Issuer\":{},\"CreatedAt\":{\"type\":\"timestamp\"},\"IssuedAt\":{\"type\":\"timestamp\"},\"Status\":{},\"RevokedAt\":{\"type\":\"timestamp\"},\"RevocationReason\":{},\"NotBefore\":{\"type\":\"timestamp\"},\"NotAfter\":{\"type\":\"timestamp\"},\"KeyAlgorithm\":{},\"SignatureAlgorithm\":{},\"InUseBy\":{\"type\":\"list\",\"member\":{}}}}}},\"http\":{}},\"GetCertificate\":{\"input\":{\"type\":\"structure\",\"required\":[\"CertificateArn\"],\"members\":{\"CertificateArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Certificate\":{},\"CertificateChain\":{}}},\"http\":{}},\"ListCertificates\":{\"input\":{\"type\":\"structure\",\"members\":{\"CertificateStatuses\":{\"type\":\"list\",\"member\":{}},\"NextToken\":{},\"MaxItems\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextToken\":{},\"CertificateSummaryList\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"CertificateArn\":{},\"DomainName\":{}}}}}},\"http\":{}},\"RequestCertificate\":{\"input\":{\"type\":\"structure\",\"required\":[\"DomainName\"],\"members\":{\"DomainName\":{},\"SubjectAlternativeNames\":{\"shape\":\"S7\"},\"IdempotencyToken\":{},\"DomainValidationOptions\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"DomainName\",\"ValidationDomain\"],\"members\":{\"DomainName\":{},\"ValidationDomain\":{}}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"CertificateArn\":{}}},\"http\":{}},\"ResendValidationEmail\":{\"input\":{\"type\":\"structure\",\"required\":[\"CertificateArn\",\"Domain\",\"ValidationDomain\"],\"members\":{\"CertificateArn\":{},\"Domain\":{},\"ValidationDomain\":{}}},\"http\":{}}},\"shapes\":{\"S7\":{\"type\":\"list\",\"member\":{}}},\"examples\":{},\"paginators\":{\"ListCertificates\":{\"limit_key\":\"MaxItems\",\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"result_key\":\"CertificateSummaryList\"}}};\nAWS.apiLoader.services['cloudfront'] = {};                                                                             // 25\nAWS.CloudFront = AWS.Service.defineService('cloudfront', [ '2016-01-28' ]);                                            // 26\nrequire('./services/cloudfront');                                                                                      // 27\n                                                                                                                       // 28\nAWS.apiLoader.services['cloudfront']['2016-01-28'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2016-01-28\",\"endpointPrefix\":\"cloudfront\",\"globalEndpoint\":\"cloudfront.amazonaws.com\",\"protocol\":\"rest-xml\",\"serviceAbbreviation\":\"CloudFront\",\"serviceFullName\":\"Amazon CloudFront\",\"signatureVersion\":\"v4\"},\"operations\":{\"CreateCloudFrontOriginAccessIdentity\":{\"http\":{\"requestUri\":\"/2016-01-28/origin-access-identity/cloudfront\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"CloudFrontOriginAccessIdentityConfig\"],\"members\":{\"CloudFrontOriginAccessIdentityConfig\":{\"shape\":\"S2\",\"locationName\":\"CloudFrontOriginAccessIdentityConfig\",\"xmlNamespace\":{\"uri\":\"http://cloudfront.amazonaws.com/doc/2016-01-28/\"}}},\"payload\":\"CloudFrontOriginAccessIdentityConfig\"},\"output\":{\"type\":\"structure\",\"members\":{\"CloudFrontOriginAccessIdentity\":{\"shape\":\"S5\"},\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"CloudFrontOriginAccessIdentity\"}},\"CreateDistribution\":{\"http\":{\"requestUri\":\"/2016-01-28/distribution\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"DistributionConfig\"],\"members\":{\"DistributionConfig\":{\"shape\":\"S7\",\"locationName\":\"DistributionConfig\",\"xmlNamespace\":{\"uri\":\"http://cloudfront.amazonaws.com/doc/2016-01-28/\"}}},\"payload\":\"DistributionConfig\"},\"output\":{\"type\":\"structure\",\"members\":{\"Distribution\":{\"shape\":\"S1l\"},\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"Distribution\"}},\"CreateInvalidation\":{\"http\":{\"requestUri\":\"/2016-01-28/distribution/{DistributionId}/invalidation\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"DistributionId\",\"InvalidationBatch\"],\"members\":{\"DistributionId\":{\"location\":\"uri\",\"locationName\":\"DistributionId\"},\"InvalidationBatch\":{\"shape\":\"S1t\",\"locationName\":\"InvalidationBatch\",\"xmlNamespace\":{\"uri\":\"http://cloudfront.amazonaws.com/doc/2016-01-28/\"}}},\"payload\":\"InvalidationBatch\"},\"output\":{\"type\":\"structure\",\"members\":{\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"},\"Invalidation\":{\"shape\":\"S1x\"}},\"payload\":\"Invalidation\"}},\"CreateStreamingDistribution\":{\"http\":{\"requestUri\":\"/2016-01-28/streaming-distribution\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"StreamingDistributionConfig\"],\"members\":{\"StreamingDistributionConfig\":{\"shape\":\"S1z\",\"locationName\":\"StreamingDistributionConfig\",\"xmlNamespace\":{\"uri\":\"http://cloudfront.amazonaws.com/doc/2016-01-28/\"}}},\"payload\":\"StreamingDistributionConfig\"},\"output\":{\"type\":\"structure\",\"members\":{\"StreamingDistribution\":{\"shape\":\"S23\"},\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"StreamingDistribution\"}},\"DeleteCloudFrontOriginAccessIdentity\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2016-01-28/origin-access-identity/cloudfront/{Id}\",\"responseCode\":204},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"IfMatch\":{\"location\":\"header\",\"locationName\":\"If-Match\"}}}},\"DeleteDistribution\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2016-01-28/distribution/{Id}\",\"responseCode\":204},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"IfMatch\":{\"location\":\"header\",\"locationName\":\"If-Match\"}}}},\"DeleteStreamingDistribution\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2016-01-28/streaming-distribution/{Id}\",\"responseCode\":204},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"IfMatch\":{\"location\":\"header\",\"locationName\":\"If-Match\"}}}},\"GetCloudFrontOriginAccessIdentity\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/origin-access-identity/cloudfront/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CloudFrontOriginAccessIdentity\":{\"shape\":\"S5\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"CloudFrontOriginAccessIdentity\"}},\"GetCloudFrontOriginAccessIdentityConfig\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/origin-access-identity/cloudfront/{Id}/config\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CloudFrontOriginAccessIdentityConfig\":{\"shape\":\"S2\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"CloudFrontOriginAccessIdentityConfig\"}},\"GetDistribution\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/distribution/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Distribution\":{\"shape\":\"S1l\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"Distribution\"}},\"GetDistributionConfig\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/distribution/{Id}/config\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DistributionConfig\":{\"shape\":\"S7\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"DistributionConfig\"}},\"GetInvalidation\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/distribution/{DistributionId}/invalidation/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"DistributionId\",\"Id\"],\"members\":{\"DistributionId\":{\"location\":\"uri\",\"locationName\":\"DistributionId\"},\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Invalidation\":{\"shape\":\"S1x\"}},\"payload\":\"Invalidation\"}},\"GetStreamingDistribution\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/streaming-distribution/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"StreamingDistribution\":{\"shape\":\"S23\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"StreamingDistribution\"}},\"GetStreamingDistributionConfig\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/streaming-distribution/{Id}/config\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"StreamingDistributionConfig\":{\"shape\":\"S1z\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"StreamingDistributionConfig\"}},\"ListCloudFrontOriginAccessIdentities\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/origin-access-identity/cloudfront\"},\"input\":{\"type\":\"structure\",\"members\":{\"Marker\":{\"location\":\"querystring\",\"locationName\":\"Marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"MaxItems\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CloudFrontOriginAccessIdentityList\":{\"type\":\"structure\",\"required\":[\"Marker\",\"MaxItems\",\"IsTruncated\",\"Quantity\"],\"members\":{\"Marker\":{},\"NextMarker\":{},\"MaxItems\":{\"type\":\"integer\"},\"IsTruncated\":{\"type\":\"boolean\"},\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"CloudFrontOriginAccessIdentitySummary\",\"type\":\"structure\",\"required\":[\"Id\",\"S3CanonicalUserId\",\"Comment\"],\"members\":{\"Id\":{},\"S3CanonicalUserId\":{},\"Comment\":{}}}}}}},\"payload\":\"CloudFrontOriginAccessIdentityList\"}},\"ListDistributions\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/distribution\"},\"input\":{\"type\":\"structure\",\"members\":{\"Marker\":{\"location\":\"querystring\",\"locationName\":\"Marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"MaxItems\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DistributionList\":{\"shape\":\"S2s\"}},\"payload\":\"DistributionList\"}},\"ListDistributionsByWebACLId\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/distributionsByWebACLId/{WebACLId}\"},\"input\":{\"type\":\"structure\",\"required\":[\"WebACLId\"],\"members\":{\"Marker\":{\"location\":\"querystring\",\"locationName\":\"Marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"MaxItems\"},\"WebACLId\":{\"location\":\"uri\",\"locationName\":\"WebACLId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DistributionList\":{\"shape\":\"S2s\"}},\"payload\":\"DistributionList\"}},\"ListInvalidations\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/distribution/{DistributionId}/invalidation\"},\"input\":{\"type\":\"structure\",\"required\":[\"DistributionId\"],\"members\":{\"DistributionId\":{\"location\":\"uri\",\"locationName\":\"DistributionId\"},\"Marker\":{\"location\":\"querystring\",\"locationName\":\"Marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"MaxItems\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"InvalidationList\":{\"type\":\"structure\",\"required\":[\"Marker\",\"MaxItems\",\"IsTruncated\",\"Quantity\"],\"members\":{\"Marker\":{},\"NextMarker\":{},\"MaxItems\":{\"type\":\"integer\"},\"IsTruncated\":{\"type\":\"boolean\"},\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"InvalidationSummary\",\"type\":\"structure\",\"required\":[\"Id\",\"CreateTime\",\"Status\"],\"members\":{\"Id\":{},\"CreateTime\":{\"type\":\"timestamp\"},\"Status\":{}}}}}}},\"payload\":\"InvalidationList\"}},\"ListStreamingDistributions\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2016-01-28/streaming-distribution\"},\"input\":{\"type\":\"structure\",\"members\":{\"Marker\":{\"location\":\"querystring\",\"locationName\":\"Marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"MaxItems\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"StreamingDistributionList\":{\"type\":\"structure\",\"required\":[\"Marker\",\"MaxItems\",\"IsTruncated\",\"Quantity\"],\"members\":{\"Marker\":{},\"NextMarker\":{},\"MaxItems\":{\"type\":\"integer\"},\"IsTruncated\":{\"type\":\"boolean\"},\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"StreamingDistributionSummary\",\"type\":\"structure\",\"required\":[\"Id\",\"Status\",\"LastModifiedTime\",\"DomainName\",\"S3Origin\",\"Aliases\",\"TrustedSigners\",\"Comment\",\"PriceClass\",\"Enabled\"],\"members\":{\"Id\":{},\"Status\":{},\"LastModifiedTime\":{\"type\":\"timestamp\"},\"DomainName\":{},\"S3Origin\":{\"shape\":\"S20\"},\"Aliases\":{\"shape\":\"S8\"},\"TrustedSigners\":{\"shape\":\"Sw\"},\"Comment\":{},\"PriceClass\":{},\"Enabled\":{\"type\":\"boolean\"}}}}}}},\"payload\":\"StreamingDistributionList\"}},\"UpdateCloudFrontOriginAccessIdentity\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/2016-01-28/origin-access-identity/cloudfront/{Id}/config\"},\"input\":{\"type\":\"structure\",\"required\":[\"CloudFrontOriginAccessIdentityConfig\",\"Id\"],\"members\":{\"CloudFrontOriginAccessIdentityConfig\":{\"shape\":\"S2\",\"locationName\":\"CloudFrontOriginAccessIdentityConfig\",\"xmlNamespace\":{\"uri\":\"http://cloudfront.amazonaws.com/doc/2016-01-28/\"}},\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"IfMatch\":{\"location\":\"header\",\"locationName\":\"If-Match\"}},\"payload\":\"CloudFrontOriginAccessIdentityConfig\"},\"output\":{\"type\":\"structure\",\"members\":{\"CloudFrontOriginAccessIdentity\":{\"shape\":\"S5\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"CloudFrontOriginAccessIdentity\"}},\"UpdateDistribution\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/2016-01-28/distribution/{Id}/config\"},\"input\":{\"type\":\"structure\",\"required\":[\"DistributionConfig\",\"Id\"],\"members\":{\"DistributionConfig\":{\"shape\":\"S7\",\"locationName\":\"DistributionConfig\",\"xmlNamespace\":{\"uri\":\"http://cloudfront.amazonaws.com/doc/2016-01-28/\"}},\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"IfMatch\":{\"location\":\"header\",\"locationName\":\"If-Match\"}},\"payload\":\"DistributionConfig\"},\"output\":{\"type\":\"structure\",\"members\":{\"Distribution\":{\"shape\":\"S1l\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"Distribution\"}},\"UpdateStreamingDistribution\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/2016-01-28/streaming-distribution/{Id}/config\"},\"input\":{\"type\":\"structure\",\"required\":[\"StreamingDistributionConfig\",\"Id\"],\"members\":{\"StreamingDistributionConfig\":{\"shape\":\"S1z\",\"locationName\":\"StreamingDistributionConfig\",\"xmlNamespace\":{\"uri\":\"http://cloudfront.amazonaws.com/doc/2016-01-28/\"}},\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"IfMatch\":{\"location\":\"header\",\"locationName\":\"If-Match\"}},\"payload\":\"StreamingDistributionConfig\"},\"output\":{\"type\":\"structure\",\"members\":{\"StreamingDistribution\":{\"shape\":\"S23\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"}},\"payload\":\"StreamingDistribution\"}}},\"shapes\":{\"S2\":{\"type\":\"structure\",\"required\":[\"CallerReference\",\"Comment\"],\"members\":{\"CallerReference\":{},\"Comment\":{}}},\"S5\":{\"type\":\"structure\",\"required\":[\"Id\",\"S3CanonicalUserId\"],\"members\":{\"Id\":{},\"S3CanonicalUserId\":{},\"CloudFrontOriginAccessIdentityConfig\":{\"shape\":\"S2\"}}},\"S7\":{\"type\":\"structure\",\"required\":[\"CallerReference\",\"Origins\",\"DefaultCacheBehavior\",\"Comment\",\"Enabled\"],\"members\":{\"CallerReference\":{},\"Aliases\":{\"shape\":\"S8\"},\"DefaultRootObject\":{},\"Origins\":{\"shape\":\"Sb\"},\"DefaultCacheBehavior\":{\"shape\":\"Sn\"},\"CacheBehaviors\":{\"shape\":\"S14\"},\"CustomErrorResponses\":{\"shape\":\"S17\"},\"Comment\":{},\"Logging\":{\"type\":\"structure\",\"required\":[\"Enabled\",\"IncludeCookies\",\"Bucket\",\"Prefix\"],\"members\":{\"Enabled\":{\"type\":\"boolean\"},\"IncludeCookies\":{\"type\":\"boolean\"},\"Bucket\":{},\"Prefix\":{}}},\"PriceClass\":{},\"Enabled\":{\"type\":\"boolean\"},\"ViewerCertificate\":{\"shape\":\"S1c\"},\"Restrictions\":{\"shape\":\"S1g\"},\"WebACLId\":{}}},\"S8\":{\"type\":\"structure\",\"required\":[\"Quantity\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"CNAME\"}}}},\"Sb\":{\"type\":\"structure\",\"required\":[\"Quantity\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"Origin\",\"type\":\"structure\",\"required\":[\"Id\",\"DomainName\"],\"members\":{\"Id\":{},\"DomainName\":{},\"OriginPath\":{},\"CustomHeaders\":{\"type\":\"structure\",\"required\":[\"Quantity\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"OriginCustomHeader\",\"type\":\"structure\",\"required\":[\"HeaderName\",\"HeaderValue\"],\"members\":{\"HeaderName\":{},\"HeaderValue\":{}}}}}},\"S3OriginConfig\":{\"type\":\"structure\",\"required\":[\"OriginAccessIdentity\"],\"members\":{\"OriginAccessIdentity\":{}}},\"CustomOriginConfig\":{\"type\":\"structure\",\"required\":[\"HTTPPort\",\"HTTPSPort\",\"OriginProtocolPolicy\"],\"members\":{\"HTTPPort\":{\"type\":\"integer\"},\"HTTPSPort\":{\"type\":\"integer\"},\"OriginProtocolPolicy\":{},\"OriginSslProtocols\":{\"type\":\"structure\",\"required\":[\"Quantity\",\"Items\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"SslProtocol\"}}}}}}}}}}},\"Sn\":{\"type\":\"structure\",\"required\":[\"TargetOriginId\",\"ForwardedValues\",\"TrustedSigners\",\"ViewerProtocolPolicy\",\"MinTTL\"],\"members\":{\"TargetOriginId\":{},\"ForwardedValues\":{\"shape\":\"So\"},\"TrustedSigners\":{\"shape\":\"Sw\"},\"ViewerProtocolPolicy\":{},\"MinTTL\":{\"type\":\"long\"},\"AllowedMethods\":{\"shape\":\"S10\"},\"SmoothStreaming\":{\"type\":\"boolean\"},\"DefaultTTL\":{\"type\":\"long\"},\"MaxTTL\":{\"type\":\"long\"},\"Compress\":{\"type\":\"boolean\"}}},\"So\":{\"type\":\"structure\",\"required\":[\"QueryString\",\"Cookies\"],\"members\":{\"QueryString\":{\"type\":\"boolean\"},\"Cookies\":{\"type\":\"structure\",\"required\":[\"Forward\"],\"members\":{\"Forward\":{},\"WhitelistedNames\":{\"type\":\"structure\",\"required\":[\"Quantity\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"Name\"}}}}}},\"Headers\":{\"type\":\"structure\",\"required\":[\"Quantity\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"Name\"}}}}}},\"Sw\":{\"type\":\"structure\",\"required\":[\"Enabled\",\"Quantity\"],\"members\":{\"Enabled\":{\"type\":\"boolean\"},\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"AwsAccountNumber\"}}}},\"S10\":{\"type\":\"structure\",\"required\":[\"Quantity\",\"Items\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"shape\":\"S11\"},\"CachedMethods\":{\"type\":\"structure\",\"required\":[\"Quantity\",\"Items\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"shape\":\"S11\"}}}}},\"S11\":{\"type\":\"list\",\"member\":{\"locationName\":\"Method\"}},\"S14\":{\"type\":\"structure\",\"required\":[\"Quantity\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"CacheBehavior\",\"type\":\"structure\",\"required\":[\"PathPattern\",\"TargetOriginId\",\"ForwardedValues\",\"TrustedSigners\",\"ViewerProtocolPolicy\",\"MinTTL\"],\"members\":{\"PathPattern\":{},\"TargetOriginId\":{},\"ForwardedValues\":{\"shape\":\"So\"},\"TrustedSigners\":{\"shape\":\"Sw\"},\"ViewerProtocolPolicy\":{},\"MinTTL\":{\"type\":\"long\"},\"AllowedMethods\":{\"shape\":\"S10\"},\"SmoothStreaming\":{\"type\":\"boolean\"},\"DefaultTTL\":{\"type\":\"long\"},\"MaxTTL\":{\"type\":\"long\"},\"Compress\":{\"type\":\"boolean\"}}}}}},\"S17\":{\"type\":\"structure\",\"required\":[\"Quantity\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"CustomErrorResponse\",\"type\":\"structure\",\"required\":[\"ErrorCode\"],\"members\":{\"ErrorCode\":{\"type\":\"integer\"},\"ResponsePagePath\":{},\"ResponseCode\":{},\"ErrorCachingMinTTL\":{\"type\":\"long\"}}}}}},\"S1c\":{\"type\":\"structure\",\"members\":{\"CloudFrontDefaultCertificate\":{\"type\":\"boolean\"},\"IAMCertificateId\":{},\"ACMCertificateArn\":{},\"SSLSupportMethod\":{},\"MinimumProtocolVersion\":{},\"Certificate\":{\"deprecated\":true},\"CertificateSource\":{\"deprecated\":true}}},\"S1g\":{\"type\":\"structure\",\"required\":[\"GeoRestriction\"],\"members\":{\"GeoRestriction\":{\"type\":\"structure\",\"required\":[\"RestrictionType\",\"Quantity\"],\"members\":{\"RestrictionType\":{},\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"Location\"}}}}}},\"S1l\":{\"type\":\"structure\",\"required\":[\"Id\",\"Status\",\"LastModifiedTime\",\"InProgressInvalidationBatches\",\"DomainName\",\"ActiveTrustedSigners\",\"DistributionConfig\"],\"members\":{\"Id\":{},\"Status\":{},\"LastModifiedTime\":{\"type\":\"timestamp\"},\"InProgressInvalidationBatches\":{\"type\":\"integer\"},\"DomainName\":{},\"ActiveTrustedSigners\":{\"shape\":\"S1n\"},\"DistributionConfig\":{\"shape\":\"S7\"}}},\"S1n\":{\"type\":\"structure\",\"required\":[\"Enabled\",\"Quantity\"],\"members\":{\"Enabled\":{\"type\":\"boolean\"},\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"Signer\",\"type\":\"structure\",\"members\":{\"AwsAccountNumber\":{},\"KeyPairIds\":{\"type\":\"structure\",\"required\":[\"Quantity\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"KeyPairId\"}}}}}}}}},\"S1t\":{\"type\":\"structure\",\"required\":[\"Paths\",\"CallerReference\"],\"members\":{\"Paths\":{\"type\":\"structure\",\"required\":[\"Quantity\"],\"members\":{\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"Path\"}}}},\"CallerReference\":{}}},\"S1x\":{\"type\":\"structure\",\"required\":[\"Id\",\"Status\",\"CreateTime\",\"InvalidationBatch\"],\"members\":{\"Id\":{},\"Status\":{},\"CreateTime\":{\"type\":\"timestamp\"},\"InvalidationBatch\":{\"shape\":\"S1t\"}}},\"S1z\":{\"type\":\"structure\",\"required\":[\"CallerReference\",\"S3Origin\",\"Comment\",\"TrustedSigners\",\"Enabled\"],\"members\":{\"CallerReference\":{},\"S3Origin\":{\"shape\":\"S20\"},\"Aliases\":{\"shape\":\"S8\"},\"Comment\":{},\"Logging\":{\"type\":\"structure\",\"required\":[\"Enabled\",\"Bucket\",\"Prefix\"],\"members\":{\"Enabled\":{\"type\":\"boolean\"},\"Bucket\":{},\"Prefix\":{}}},\"TrustedSigners\":{\"shape\":\"Sw\"},\"PriceClass\":{},\"Enabled\":{\"type\":\"boolean\"}}},\"S20\":{\"type\":\"structure\",\"required\":[\"DomainName\",\"OriginAccessIdentity\"],\"members\":{\"DomainName\":{},\"OriginAccessIdentity\":{}}},\"S23\":{\"type\":\"structure\",\"required\":[\"Id\",\"Status\",\"DomainName\",\"ActiveTrustedSigners\",\"StreamingDistributionConfig\"],\"members\":{\"Id\":{},\"Status\":{},\"LastModifiedTime\":{\"type\":\"timestamp\"},\"DomainName\":{},\"ActiveTrustedSigners\":{\"shape\":\"S1n\"},\"StreamingDistributionConfig\":{\"shape\":\"S1z\"}}},\"S2s\":{\"type\":\"structure\",\"required\":[\"Marker\",\"MaxItems\",\"IsTruncated\",\"Quantity\"],\"members\":{\"Marker\":{},\"NextMarker\":{},\"MaxItems\":{\"type\":\"integer\"},\"IsTruncated\":{\"type\":\"boolean\"},\"Quantity\":{\"type\":\"integer\"},\"Items\":{\"type\":\"list\",\"member\":{\"locationName\":\"DistributionSummary\",\"type\":\"structure\",\"required\":[\"Id\",\"Status\",\"LastModifiedTime\",\"DomainName\",\"Aliases\",\"Origins\",\"DefaultCacheBehavior\",\"CacheBehaviors\",\"CustomErrorResponses\",\"Comment\",\"PriceClass\",\"Enabled\",\"ViewerCertificate\",\"Restrictions\",\"WebACLId\"],\"members\":{\"Id\":{},\"Status\":{},\"LastModifiedTime\":{\"type\":\"timestamp\"},\"DomainName\":{},\"Aliases\":{\"shape\":\"S8\"},\"Origins\":{\"shape\":\"Sb\"},\"DefaultCacheBehavior\":{\"shape\":\"Sn\"},\"CacheBehaviors\":{\"shape\":\"S14\"},\"CustomErrorResponses\":{\"shape\":\"S17\"},\"Comment\":{},\"PriceClass\":{},\"Enabled\":{\"type\":\"boolean\"},\"ViewerCertificate\":{\"shape\":\"S1c\"},\"Restrictions\":{\"shape\":\"S1g\"},\"WebACLId\":{}}}}}}},\"paginators\":{\"ListCloudFrontOriginAccessIdentities\":{\"input_token\":\"Marker\",\"output_token\":\"CloudFrontOriginAccessIdentityList.NextMarker\",\"limit_key\":\"MaxItems\",\"more_results\":\"CloudFrontOriginAccessIdentityList.IsTruncated\",\"result_key\":\"CloudFrontOriginAccessIdentityList.Items\"},\"ListDistributions\":{\"input_token\":\"Marker\",\"output_token\":\"DistributionList.NextMarker\",\"limit_key\":\"MaxItems\",\"more_results\":\"DistributionList.IsTruncated\",\"result_key\":\"DistributionList.Items\"},\"ListInvalidations\":{\"input_token\":\"Marker\",\"output_token\":\"InvalidationList.NextMarker\",\"limit_key\":\"MaxItems\",\"more_results\":\"InvalidationList.IsTruncated\",\"result_key\":\"InvalidationList.Items\"},\"ListStreamingDistributions\":{\"input_token\":\"Marker\",\"output_token\":\"StreamingDistributionList.NextMarker\",\"limit_key\":\"MaxItems\",\"more_results\":\"StreamingDistributionList.IsTruncated\",\"result_key\":\"StreamingDistributionList.Items\"}},\"waiters\":{\"__default__\":{\"success_type\":\"output\",\"success_path\":\"Status\"},\"StreamingDistributionDeployed\":{\"operation\":\"GetStreamingDistribution\",\"description\":\"Wait until a streaming distribution is deployed.\",\"interval\":60,\"max_attempts\":25,\"success_value\":\"Deployed\"},\"DistributionDeployed\":{\"operation\":\"GetDistribution\",\"description\":\"Wait until a distribution is deployed.\",\"interval\":60,\"max_attempts\":25,\"success_value\":\"Deployed\"},\"InvalidationCompleted\":{\"operation\":\"GetInvalidation\",\"description\":\"Wait until an invalidation has completed.\",\"interval\":20,\"max_attempts\":30,\"success_value\":\"Completed\"}}};\nAWS.apiLoader.services['cloudtrail'] = {};                                                                             // 30\nAWS.CloudTrail = AWS.Service.defineService('cloudtrail', [ '2013-11-01' ]);                                            // 31\n                                                                                                                       // 32\nAWS.apiLoader.services['cloudtrail']['2013-11-01'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2013-11-01\",\"endpointPrefix\":\"cloudtrail\",\"jsonVersion\":\"1.1\",\"protocol\":\"json\",\"serviceAbbreviation\":\"CloudTrail\",\"serviceFullName\":\"AWS CloudTrail\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101\"},\"operations\":{\"AddTags\":{\"input\":{\"type\":\"structure\",\"required\":[\"ResourceId\"],\"members\":{\"ResourceId\":{},\"TagsList\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"CreateTrail\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"S3BucketName\"],\"members\":{\"Name\":{},\"S3BucketName\":{},\"S3KeyPrefix\":{},\"SnsTopicName\":{},\"IncludeGlobalServiceEvents\":{\"type\":\"boolean\"},\"IsMultiRegionTrail\":{\"type\":\"boolean\"},\"EnableLogFileValidation\":{\"type\":\"boolean\"},\"CloudWatchLogsLogGroupArn\":{},\"CloudWatchLogsRoleArn\":{},\"KmsKeyId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"S3BucketName\":{},\"S3KeyPrefix\":{},\"SnsTopicName\":{},\"IncludeGlobalServiceEvents\":{\"type\":\"boolean\"},\"IsMultiRegionTrail\":{\"type\":\"boolean\"},\"TrailARN\":{},\"LogFileValidationEnabled\":{\"type\":\"boolean\"},\"CloudWatchLogsLogGroupArn\":{},\"CloudWatchLogsRoleArn\":{},\"KmsKeyId\":{}}},\"http\":{}},\"DeleteTrail\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"DescribeTrails\":{\"input\":{\"type\":\"structure\",\"members\":{\"trailNameList\":{\"type\":\"list\",\"member\":{}},\"includeShadowTrails\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"trailList\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"S3BucketName\":{},\"S3KeyPrefix\":{},\"SnsTopicName\":{},\"IncludeGlobalServiceEvents\":{\"type\":\"boolean\"},\"IsMultiRegionTrail\":{\"type\":\"boolean\"},\"HomeRegion\":{},\"TrailARN\":{},\"LogFileValidationEnabled\":{\"type\":\"boolean\"},\"CloudWatchLogsLogGroupArn\":{},\"CloudWatchLogsRoleArn\":{},\"KmsKeyId\":{}}}}}},\"http\":{}},\"GetTrailStatus\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"IsLogging\":{\"type\":\"boolean\"},\"LatestDeliveryError\":{},\"LatestNotificationError\":{},\"LatestDeliveryTime\":{\"type\":\"timestamp\"},\"LatestNotificationTime\":{\"type\":\"timestamp\"},\"StartLoggingTime\":{\"type\":\"timestamp\"},\"StopLoggingTime\":{\"type\":\"timestamp\"},\"LatestCloudWatchLogsDeliveryError\":{},\"LatestCloudWatchLogsDeliveryTime\":{\"type\":\"timestamp\"},\"LatestDigestDeliveryTime\":{\"type\":\"timestamp\"},\"LatestDigestDeliveryError\":{},\"LatestDeliveryAttemptTime\":{},\"LatestNotificationAttemptTime\":{},\"LatestNotificationAttemptSucceeded\":{},\"LatestDeliveryAttemptSucceeded\":{},\"TimeLoggingStarted\":{},\"TimeLoggingStopped\":{}}},\"http\":{}},\"ListPublicKeys\":{\"input\":{\"type\":\"structure\",\"members\":{\"StartTime\":{\"type\":\"timestamp\"},\"EndTime\":{\"type\":\"timestamp\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"PublicKeyList\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Value\":{\"type\":\"blob\"},\"ValidityStartTime\":{\"type\":\"timestamp\"},\"ValidityEndTime\":{\"type\":\"timestamp\"},\"Fingerprint\":{}}}},\"NextToken\":{}}},\"http\":{}},\"ListTags\":{\"input\":{\"type\":\"structure\",\"required\":[\"ResourceIdList\"],\"members\":{\"ResourceIdList\":{\"type\":\"list\",\"member\":{}},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ResourceTagList\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"ResourceId\":{},\"TagsList\":{\"shape\":\"S3\"}}}},\"NextToken\":{}}},\"http\":{}},\"LookupEvents\":{\"input\":{\"type\":\"structure\",\"members\":{\"LookupAttributes\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"AttributeKey\",\"AttributeValue\"],\"members\":{\"AttributeKey\":{},\"AttributeValue\":{}}}},\"StartTime\":{\"type\":\"timestamp\"},\"EndTime\":{\"type\":\"timestamp\"},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Events\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"EventId\":{},\"EventName\":{},\"EventTime\":{\"type\":\"timestamp\"},\"Username\":{},\"Resources\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"ResourceType\":{},\"ResourceName\":{}}}},\"CloudTrailEvent\":{}}}},\"NextToken\":{}}},\"http\":{}},\"RemoveTags\":{\"input\":{\"type\":\"structure\",\"required\":[\"ResourceId\"],\"members\":{\"ResourceId\":{},\"TagsList\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"StartLogging\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"StopLogging\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"UpdateTrail\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{},\"S3BucketName\":{},\"S3KeyPrefix\":{},\"SnsTopicName\":{},\"IncludeGlobalServiceEvents\":{\"type\":\"boolean\"},\"IsMultiRegionTrail\":{\"type\":\"boolean\"},\"EnableLogFileValidation\":{\"type\":\"boolean\"},\"CloudWatchLogsLogGroupArn\":{},\"CloudWatchLogsRoleArn\":{},\"KmsKeyId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"S3BucketName\":{},\"S3KeyPrefix\":{},\"SnsTopicName\":{},\"IncludeGlobalServiceEvents\":{\"type\":\"boolean\"},\"IsMultiRegionTrail\":{\"type\":\"boolean\"},\"TrailARN\":{},\"LogFileValidationEnabled\":{\"type\":\"boolean\"},\"CloudWatchLogsLogGroupArn\":{},\"CloudWatchLogsRoleArn\":{},\"KmsKeyId\":{}}},\"http\":{}}},\"shapes\":{\"S3\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Key\"],\"members\":{\"Key\":{},\"Value\":{}}}}},\"paginators\":{\"DescribeTrails\":{\"result_key\":\"trailList\"}}};\nAWS.apiLoader.services['cloudwatch'] = {};                                                                             // 34\nAWS.CloudWatch = AWS.Service.defineService('cloudwatch', [ '2010-08-01' ]);                                            // 35\n                                                                                                                       // 36\nAWS.apiLoader.services['cloudwatch']['2010-08-01'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2010-08-01\",\"endpointPrefix\":\"monitoring\",\"protocol\":\"query\",\"serviceAbbreviation\":\"CloudWatch\",\"serviceFullName\":\"Amazon CloudWatch\",\"signatureVersion\":\"v4\",\"xmlNamespace\":\"http://monitoring.amazonaws.com/doc/2010-08-01/\"},\"operations\":{\"DeleteAlarms\":{\"input\":{\"type\":\"structure\",\"required\":[\"AlarmNames\"],\"members\":{\"AlarmNames\":{\"shape\":\"S2\"}}},\"http\":{}},\"DescribeAlarmHistory\":{\"input\":{\"type\":\"structure\",\"members\":{\"AlarmName\":{},\"HistoryItemType\":{},\"StartDate\":{\"type\":\"timestamp\"},\"EndDate\":{\"type\":\"timestamp\"},\"MaxRecords\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"resultWrapper\":\"DescribeAlarmHistoryResult\",\"type\":\"structure\",\"members\":{\"AlarmHistoryItems\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"AlarmName\":{},\"Timestamp\":{\"type\":\"timestamp\"},\"HistoryItemType\":{},\"HistorySummary\":{},\"HistoryData\":{}}}},\"NextToken\":{}}},\"http\":{}},\"DescribeAlarms\":{\"input\":{\"type\":\"structure\",\"members\":{\"AlarmNames\":{\"shape\":\"S2\"},\"AlarmNamePrefix\":{},\"StateValue\":{},\"ActionPrefix\":{},\"MaxRecords\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"resultWrapper\":\"DescribeAlarmsResult\",\"type\":\"structure\",\"members\":{\"MetricAlarms\":{\"shape\":\"Sj\"},\"NextToken\":{}}},\"http\":{}},\"DescribeAlarmsForMetric\":{\"input\":{\"type\":\"structure\",\"required\":[\"MetricName\",\"Namespace\"],\"members\":{\"MetricName\":{},\"Namespace\":{},\"Statistic\":{},\"Dimensions\":{\"shape\":\"Sv\"},\"Period\":{\"type\":\"integer\"},\"Unit\":{}}},\"output\":{\"resultWrapper\":\"DescribeAlarmsForMetricResult\",\"type\":\"structure\",\"members\":{\"MetricAlarms\":{\"shape\":\"Sj\"}}},\"http\":{}},\"DisableAlarmActions\":{\"input\":{\"type\":\"structure\",\"required\":[\"AlarmNames\"],\"members\":{\"AlarmNames\":{\"shape\":\"S2\"}}},\"http\":{}},\"EnableAlarmActions\":{\"input\":{\"type\":\"structure\",\"required\":[\"AlarmNames\"],\"members\":{\"AlarmNames\":{\"shape\":\"S2\"}}},\"http\":{}},\"GetMetricStatistics\":{\"input\":{\"type\":\"structure\",\"required\":[\"Namespace\",\"MetricName\",\"StartTime\",\"EndTime\",\"Period\",\"Statistics\"],\"members\":{\"Namespace\":{},\"MetricName\":{},\"Dimensions\":{\"shape\":\"Sv\"},\"StartTime\":{\"type\":\"timestamp\"},\"EndTime\":{\"type\":\"timestamp\"},\"Period\":{\"type\":\"integer\"},\"Statistics\":{\"type\":\"list\",\"member\":{}},\"Unit\":{}}},\"output\":{\"resultWrapper\":\"GetMetricStatisticsResult\",\"type\":\"structure\",\"members\":{\"Label\":{},\"Datapoints\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Timestamp\":{\"type\":\"timestamp\"},\"SampleCount\":{\"type\":\"double\"},\"Average\":{\"type\":\"double\"},\"Sum\":{\"type\":\"double\"},\"Minimum\":{\"type\":\"double\"},\"Maximum\":{\"type\":\"double\"},\"Unit\":{}},\"xmlOrder\":[\"Timestamp\",\"SampleCount\",\"Average\",\"Sum\",\"Minimum\",\"Maximum\",\"Unit\"]}}}},\"http\":{}},\"ListMetrics\":{\"input\":{\"type\":\"structure\",\"members\":{\"Namespace\":{},\"MetricName\":{},\"Dimensions\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{},\"Value\":{}}}},\"NextToken\":{}}},\"output\":{\"resultWrapper\":\"ListMetricsResult\",\"type\":\"structure\",\"members\":{\"Metrics\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Namespace\":{},\"MetricName\":{},\"Dimensions\":{\"shape\":\"Sv\"}},\"xmlOrder\":[\"Namespace\",\"MetricName\",\"Dimensions\"]}},\"NextToken\":{}},\"xmlOrder\":[\"Metrics\",\"NextToken\"]},\"http\":{}},\"PutMetricAlarm\":{\"input\":{\"type\":\"structure\",\"required\":[\"AlarmName\",\"MetricName\",\"Namespace\",\"Statistic\",\"Period\",\"EvaluationPeriods\",\"Threshold\",\"ComparisonOperator\"],\"members\":{\"AlarmName\":{},\"AlarmDescription\":{},\"ActionsEnabled\":{\"type\":\"boolean\"},\"OKActions\":{\"shape\":\"So\"},\"AlarmActions\":{\"shape\":\"So\"},\"InsufficientDataActions\":{\"shape\":\"So\"},\"MetricName\":{},\"Namespace\":{},\"Statistic\":{},\"Dimensions\":{\"shape\":\"Sv\"},\"Period\":{\"type\":\"integer\"},\"Unit\":{},\"EvaluationPeriods\":{\"type\":\"integer\"},\"Threshold\":{\"type\":\"double\"},\"ComparisonOperator\":{}}},\"http\":{}},\"PutMetricData\":{\"input\":{\"type\":\"structure\",\"required\":[\"Namespace\",\"MetricData\"],\"members\":{\"Namespace\":{},\"MetricData\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"MetricName\"],\"members\":{\"MetricName\":{},\"Dimensions\":{\"shape\":\"Sv\"},\"Timestamp\":{\"type\":\"timestamp\"},\"Value\":{\"type\":\"double\"},\"StatisticValues\":{\"type\":\"structure\",\"required\":[\"SampleCount\",\"Sum\",\"Minimum\",\"Maximum\"],\"members\":{\"SampleCount\":{\"type\":\"double\"},\"Sum\":{\"type\":\"double\"},\"Minimum\":{\"type\":\"double\"},\"Maximum\":{\"type\":\"double\"}}},\"Unit\":{}}}}}},\"http\":{}},\"SetAlarmState\":{\"input\":{\"type\":\"structure\",\"required\":[\"AlarmName\",\"StateValue\",\"StateReason\"],\"members\":{\"AlarmName\":{},\"StateValue\":{},\"StateReason\":{},\"StateReasonData\":{}}},\"http\":{}}},\"shapes\":{\"S2\":{\"type\":\"list\",\"member\":{}},\"Sj\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"AlarmName\":{},\"AlarmArn\":{},\"AlarmDescription\":{},\"AlarmConfigurationUpdatedTimestamp\":{\"type\":\"timestamp\"},\"ActionsEnabled\":{\"type\":\"boolean\"},\"OKActions\":{\"shape\":\"So\"},\"AlarmActions\":{\"shape\":\"So\"},\"InsufficientDataActions\":{\"shape\":\"So\"},\"StateValue\":{},\"StateReason\":{},\"StateReasonData\":{},\"StateUpdatedTimestamp\":{\"type\":\"timestamp\"},\"MetricName\":{},\"Namespace\":{},\"Statistic\":{},\"Dimensions\":{\"shape\":\"Sv\"},\"Period\":{\"type\":\"integer\"},\"Unit\":{},\"EvaluationPeriods\":{\"type\":\"integer\"},\"Threshold\":{\"type\":\"double\"},\"ComparisonOperator\":{}},\"xmlOrder\":[\"AlarmName\",\"AlarmArn\",\"AlarmDescription\",\"AlarmConfigurationUpdatedTimestamp\",\"ActionsEnabled\",\"OKActions\",\"AlarmActions\",\"InsufficientDataActions\",\"StateValue\",\"StateReason\",\"StateReasonData\",\"StateUpdatedTimestamp\",\"MetricName\",\"Namespace\",\"Statistic\",\"Dimensions\",\"Period\",\"Unit\",\"EvaluationPeriods\",\"Threshold\",\"ComparisonOperator\"]}},\"So\":{\"type\":\"list\",\"member\":{}},\"Sv\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Name\",\"Value\"],\"members\":{\"Name\":{},\"Value\":{}},\"xmlOrder\":[\"Name\",\"Value\"]}}},\"paginators\":{\"DescribeAlarmHistory\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxRecords\",\"result_key\":\"AlarmHistoryItems\"},\"DescribeAlarms\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxRecords\",\"result_key\":\"MetricAlarms\"},\"DescribeAlarmsForMetric\":{\"result_key\":\"MetricAlarms\"},\"ListMetrics\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"result_key\":\"Metrics\"}}};\nAWS.apiLoader.services['cloudwatchlogs'] = {};                                                                         // 38\nAWS.CloudWatchLogs = AWS.Service.defineService('cloudwatchlogs', [ '2014-03-28' ]);                                    // 39\n                                                                                                                       // 40\nAWS.apiLoader.services['cloudwatchlogs']['2014-03-28'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2014-03-28\",\"endpointPrefix\":\"logs\",\"jsonVersion\":\"1.1\",\"protocol\":\"json\",\"serviceFullName\":\"Amazon CloudWatch Logs\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"Logs_20140328\"},\"operations\":{\"CancelExportTask\":{\"input\":{\"type\":\"structure\",\"required\":[\"taskId\"],\"members\":{\"taskId\":{}}},\"http\":{}},\"CreateExportTask\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"from\",\"to\",\"destination\"],\"members\":{\"taskName\":{},\"logGroupName\":{},\"logStreamNamePrefix\":{},\"from\":{\"type\":\"long\"},\"to\":{\"type\":\"long\"},\"destination\":{},\"destinationPrefix\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"taskId\":{}}},\"http\":{}},\"CreateLogGroup\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\"],\"members\":{\"logGroupName\":{}}},\"http\":{}},\"CreateLogStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"logStreamName\"],\"members\":{\"logGroupName\":{},\"logStreamName\":{}}},\"http\":{}},\"DeleteDestination\":{\"input\":{\"type\":\"structure\",\"required\":[\"destinationName\"],\"members\":{\"destinationName\":{}}},\"http\":{}},\"DeleteLogGroup\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\"],\"members\":{\"logGroupName\":{}}},\"http\":{}},\"DeleteLogStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"logStreamName\"],\"members\":{\"logGroupName\":{},\"logStreamName\":{}}},\"http\":{}},\"DeleteMetricFilter\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"filterName\"],\"members\":{\"logGroupName\":{},\"filterName\":{}}},\"http\":{}},\"DeleteRetentionPolicy\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\"],\"members\":{\"logGroupName\":{}}},\"http\":{}},\"DeleteSubscriptionFilter\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"filterName\"],\"members\":{\"logGroupName\":{},\"filterName\":{}}},\"http\":{}},\"DescribeDestinations\":{\"input\":{\"type\":\"structure\",\"members\":{\"DestinationNamePrefix\":{},\"nextToken\":{},\"limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"destinations\":{\"type\":\"list\",\"member\":{\"shape\":\"Sq\"}},\"nextToken\":{}}},\"http\":{}},\"DescribeExportTasks\":{\"input\":{\"type\":\"structure\",\"members\":{\"taskId\":{},\"statusCode\":{},\"nextToken\":{},\"limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"exportTasks\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"taskId\":{},\"taskName\":{},\"logGroupName\":{},\"from\":{\"type\":\"long\"},\"to\":{\"type\":\"long\"},\"destination\":{},\"destinationPrefix\":{},\"status\":{\"type\":\"structure\",\"members\":{\"code\":{},\"message\":{}}},\"executionInfo\":{\"type\":\"structure\",\"members\":{\"creationTime\":{\"type\":\"long\"},\"completionTime\":{\"type\":\"long\"}}}}}},\"nextToken\":{}}},\"http\":{}},\"DescribeLogGroups\":{\"input\":{\"type\":\"structure\",\"members\":{\"logGroupNamePrefix\":{},\"nextToken\":{},\"limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"logGroups\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"logGroupName\":{},\"creationTime\":{\"type\":\"long\"},\"retentionInDays\":{\"type\":\"integer\"},\"metricFilterCount\":{\"type\":\"integer\"},\"arn\":{},\"storedBytes\":{\"type\":\"long\"}}}},\"nextToken\":{}}},\"http\":{}},\"DescribeLogStreams\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\"],\"members\":{\"logGroupName\":{},\"logStreamNamePrefix\":{},\"orderBy\":{},\"descending\":{\"type\":\"boolean\"},\"nextToken\":{},\"limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"logStreams\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"logStreamName\":{},\"creationTime\":{\"type\":\"long\"},\"firstEventTimestamp\":{\"type\":\"long\"},\"lastEventTimestamp\":{\"type\":\"long\"},\"lastIngestionTime\":{\"type\":\"long\"},\"uploadSequenceToken\":{},\"arn\":{},\"storedBytes\":{\"type\":\"long\"}}}},\"nextToken\":{}}},\"http\":{}},\"DescribeMetricFilters\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\"],\"members\":{\"logGroupName\":{},\"filterNamePrefix\":{},\"nextToken\":{},\"limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"metricFilters\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"filterName\":{},\"filterPattern\":{},\"metricTransformations\":{\"shape\":\"S1m\"},\"creationTime\":{\"type\":\"long\"}}}},\"nextToken\":{}}},\"http\":{}},\"DescribeSubscriptionFilters\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\"],\"members\":{\"logGroupName\":{},\"filterNamePrefix\":{},\"nextToken\":{},\"limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"subscriptionFilters\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"filterName\":{},\"logGroupName\":{},\"filterPattern\":{},\"destinationArn\":{},\"roleArn\":{},\"creationTime\":{\"type\":\"long\"}}}},\"nextToken\":{}}},\"http\":{}},\"FilterLogEvents\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\"],\"members\":{\"logGroupName\":{},\"logStreamNames\":{\"type\":\"list\",\"member\":{}},\"startTime\":{\"type\":\"long\"},\"endTime\":{\"type\":\"long\"},\"filterPattern\":{},\"nextToken\":{},\"limit\":{\"type\":\"integer\"},\"interleaved\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"events\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"logStreamName\":{},\"timestamp\":{\"type\":\"long\"},\"message\":{},\"ingestionTime\":{\"type\":\"long\"},\"eventId\":{}}}},\"searchedLogStreams\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"logStreamName\":{},\"searchedCompletely\":{\"type\":\"boolean\"}}}},\"nextToken\":{}}},\"http\":{}},\"GetLogEvents\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"logStreamName\"],\"members\":{\"logGroupName\":{},\"logStreamName\":{},\"startTime\":{\"type\":\"long\"},\"endTime\":{\"type\":\"long\"},\"nextToken\":{},\"limit\":{\"type\":\"integer\"},\"startFromHead\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"events\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"timestamp\":{\"type\":\"long\"},\"message\":{},\"ingestionTime\":{\"type\":\"long\"}}}},\"nextForwardToken\":{},\"nextBackwardToken\":{}}},\"http\":{}},\"PutDestination\":{\"input\":{\"type\":\"structure\",\"required\":[\"destinationName\",\"targetArn\",\"roleArn\"],\"members\":{\"destinationName\":{},\"targetArn\":{},\"roleArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"destination\":{\"shape\":\"Sq\"}}},\"http\":{}},\"PutDestinationPolicy\":{\"input\":{\"type\":\"structure\",\"required\":[\"destinationName\",\"accessPolicy\"],\"members\":{\"destinationName\":{},\"accessPolicy\":{}}},\"http\":{}},\"PutLogEvents\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"logStreamName\",\"logEvents\"],\"members\":{\"logGroupName\":{},\"logStreamName\":{},\"logEvents\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"timestamp\",\"message\"],\"members\":{\"timestamp\":{\"type\":\"long\"},\"message\":{}}}},\"sequenceToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"nextSequenceToken\":{},\"rejectedLogEventsInfo\":{\"type\":\"structure\",\"members\":{\"tooNewLogEventStartIndex\":{\"type\":\"integer\"},\"tooOldLogEventEndIndex\":{\"type\":\"integer\"},\"expiredLogEventEndIndex\":{\"type\":\"integer\"}}}}},\"http\":{}},\"PutMetricFilter\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"filterName\",\"filterPattern\",\"metricTransformations\"],\"members\":{\"logGroupName\":{},\"filterName\":{},\"filterPattern\":{},\"metricTransformations\":{\"shape\":\"S1m\"}}},\"http\":{}},\"PutRetentionPolicy\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"retentionInDays\"],\"members\":{\"logGroupName\":{},\"retentionInDays\":{\"type\":\"integer\"}}},\"http\":{}},\"PutSubscriptionFilter\":{\"input\":{\"type\":\"structure\",\"required\":[\"logGroupName\",\"filterName\",\"filterPattern\",\"destinationArn\"],\"members\":{\"logGroupName\":{},\"filterName\":{},\"filterPattern\":{},\"destinationArn\":{},\"roleArn\":{}}},\"http\":{}},\"TestMetricFilter\":{\"input\":{\"type\":\"structure\",\"required\":[\"filterPattern\",\"logEventMessages\"],\"members\":{\"filterPattern\":{},\"logEventMessages\":{\"type\":\"list\",\"member\":{}}}},\"output\":{\"type\":\"structure\",\"members\":{\"matches\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"eventNumber\":{\"type\":\"long\"},\"eventMessage\":{},\"extractedValues\":{\"type\":\"map\",\"key\":{},\"value\":{}}}}}}},\"http\":{}}},\"shapes\":{\"Sq\":{\"type\":\"structure\",\"members\":{\"destinationName\":{},\"targetArn\":{},\"roleArn\":{},\"accessPolicy\":{},\"arn\":{},\"creationTime\":{\"type\":\"long\"}}},\"S1m\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"metricName\",\"metricNamespace\",\"metricValue\"],\"members\":{\"metricName\":{},\"metricNamespace\":{},\"metricValue\":{}}}}},\"paginators\":{\"DescribeDestinations\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"limit_key\":\"limit\",\"result_key\":\"destinations\"},\"DescribeLogGroups\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"limit_key\":\"limit\",\"result_key\":\"logGroups\"},\"DescribeLogStreams\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"limit_key\":\"limit\",\"result_key\":\"logStreams\"},\"DescribeMetricFilters\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"limit_key\":\"limit\",\"result_key\":\"metricFilters\"},\"DescribeSubscriptionFilters\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"limit_key\":\"limit\",\"result_key\":\"subscriptionFilters\"},\"FilterLogEvents\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"limit_key\":\"limit\",\"result_key\":[\"events\",\"searchedLogStreams\"]},\"GetLogEvents\":{\"input_token\":\"nextToken\",\"output_token\":\"nextForwardToken\",\"limit_key\":\"limit\",\"result_key\":\"events\"}}};\nAWS.apiLoader.services['codecommit'] = {};                                                                             // 42\nAWS.CodeCommit = AWS.Service.defineService('codecommit', [ '2015-04-13' ]);                                            // 43\n                                                                                                                       // 44\nAWS.apiLoader.services['codecommit']['2015-04-13'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-04-13\",\"endpointPrefix\":\"codecommit\",\"jsonVersion\":\"1.1\",\"protocol\":\"json\",\"serviceAbbreviation\":\"CodeCommit\",\"serviceFullName\":\"AWS CodeCommit\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"CodeCommit_20150413\"},\"operations\":{\"BatchGetRepositories\":{\"input\":{\"type\":\"structure\",\"required\":[\"repositoryNames\"],\"members\":{\"repositoryNames\":{\"type\":\"list\",\"member\":{}}}},\"output\":{\"type\":\"structure\",\"members\":{\"repositories\":{\"type\":\"list\",\"member\":{\"shape\":\"S6\"}},\"repositoriesNotFound\":{\"type\":\"list\",\"member\":{}}}},\"http\":{}},\"CreateBranch\":{\"input\":{\"type\":\"structure\",\"required\":[\"repositoryName\",\"branchName\",\"commitId\"],\"members\":{\"repositoryName\":{},\"branchName\":{},\"commitId\":{}}},\"http\":{}},\"CreateRepository\":{\"input\":{\"type\":\"structure\",\"required\":[\"repositoryName\"],\"members\":{\"repositoryName\":{},\"repositoryDescription\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"repositoryMetadata\":{\"shape\":\"S6\"}}},\"http\":{}},\"DeleteRepository\":{\"input\":{\"type\":\"structure\",\"required\":[\"repositoryName\"],\"members\":{\"repositoryName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"repositoryId\":{}}},\"http\":{}},\"GetBranch\":{\"input\":{\"type\":\"structure\",\"members\":{\"repositoryName\":{},\"branchName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"branch\":{\"type\":\"structure\",\"members\":{\"branchName\":{},\"commitId\":{}}}}},\"http\":{}},\"GetCommit\":{\"input\":{\"type\":\"structure\",\"required\":[\"repositoryName\",\"commitId\"],\"members\":{\"repositoryName\":{},\"commitId\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"commit\"],\"members\":{\"commit\":{\"type\":\"structure\",\"members\":{\"treeId\":{},\"parents\":{\"type\":\"list\",\"member\":{}},\"message\":{},\"author\":{\"shape\":\"Sw\"},\"committer\":{\"shape\":\"Sw\"},\"additionalData\":{}}}}},\"http\":{}},\"GetRepository\":{\"input\":{\"type\":\"structure\",\"required\":[\"repositoryName\"],\"members\":{\"repositoryName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"repositoryMetadata\":{\"shape\":\"S6\"}}},\"http\":{}},\"GetRepositoryTriggers\":{\"input\":{\"type\":\"structure\",\"members\":{\"repositoryName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"configurationId\":{},\"triggers\":{\"shape\":\"S16\"}}},\"http\":{}},\"ListBranches\":{\"input\":{\"type\":\"structure\",\"required\":[\"repositoryName\"],\"members\":{\"repositoryName\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"branches\":{\"shape\":\"S1a\"},\"nextToken\":{}}},\"http\":{}},\"ListRepositories\":{\"input\":{\"type\":\"structure\",\"members\":{\"nextToken\":{},\"sortBy\":{},\"order\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"repositories\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"repositoryName\":{},\"repositoryId\":{}}}},\"nextToken\":{}}},\"http\":{}},\"PutRepositoryTriggers\":{\"input\":{\"type\":\"structure\",\"members\":{\"repositoryName\":{},\"triggers\":{\"shape\":\"S16\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"configurationId\":{}}},\"http\":{}},\"TestRepositoryTriggers\":{\"input\":{\"type\":\"structure\",\"members\":{\"repositoryName\":{},\"triggers\":{\"shape\":\"S16\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"successfulExecutions\":{\"type\":\"list\",\"member\":{}},\"failedExecutions\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"trigger\":{},\"failureMessage\":{}}}}}},\"http\":{}},\"UpdateDefaultBranch\":{\"input\":{\"type\":\"structure\",\"required\":[\"repositoryName\",\"defaultBranchName\"],\"members\":{\"repositoryName\":{},\"defaultBranchName\":{}}},\"http\":{}},\"UpdateRepositoryDescription\":{\"input\":{\"type\":\"structure\",\"required\":[\"repositoryName\"],\"members\":{\"repositoryName\":{},\"repositoryDescription\":{}}},\"http\":{}},\"UpdateRepositoryName\":{\"input\":{\"type\":\"structure\",\"required\":[\"oldName\",\"newName\"],\"members\":{\"oldName\":{},\"newName\":{}}},\"http\":{}}},\"shapes\":{\"S6\":{\"type\":\"structure\",\"members\":{\"accountId\":{},\"repositoryId\":{},\"repositoryName\":{},\"repositoryDescription\":{},\"defaultBranch\":{},\"lastModifiedDate\":{\"type\":\"timestamp\"},\"creationDate\":{\"type\":\"timestamp\"},\"cloneUrlHttp\":{},\"cloneUrlSsh\":{},\"Arn\":{}}},\"Sw\":{\"type\":\"structure\",\"members\":{\"name\":{},\"email\":{},\"date\":{}}},\"S16\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"name\":{},\"destinationArn\":{},\"customData\":{},\"branches\":{\"shape\":\"S1a\"},\"events\":{\"type\":\"list\",\"member\":{}}}}},\"S1a\":{\"type\":\"list\",\"member\":{}}},\"paginators\":{\"ListBranches\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"branches\"},\"ListRepositories\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"repositories\"}}};\nAWS.apiLoader.services['codepipeline'] = {};                                                                           // 46\nAWS.CodePipeline = AWS.Service.defineService('codepipeline', [ '2015-07-09' ]);                                        // 47\n                                                                                                                       // 48\nAWS.apiLoader.services['codepipeline']['2015-07-09'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-07-09\",\"endpointPrefix\":\"codepipeline\",\"jsonVersion\":\"1.1\",\"serviceAbbreviation\":\"CodePipeline\",\"serviceFullName\":\"AWS CodePipeline\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"CodePipeline_20150709\",\"protocol\":\"json\"},\"operations\":{\"AcknowledgeJob\":{\"input\":{\"type\":\"structure\",\"required\":[\"jobId\",\"nonce\"],\"members\":{\"jobId\":{},\"nonce\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"status\":{}}},\"http\":{}},\"AcknowledgeThirdPartyJob\":{\"input\":{\"type\":\"structure\",\"required\":[\"jobId\",\"nonce\",\"clientToken\"],\"members\":{\"jobId\":{},\"nonce\":{},\"clientToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"status\":{}}},\"http\":{}},\"CreateCustomActionType\":{\"input\":{\"type\":\"structure\",\"required\":[\"category\",\"provider\",\"version\",\"inputArtifactDetails\",\"outputArtifactDetails\"],\"members\":{\"category\":{},\"provider\":{},\"version\":{},\"settings\":{\"shape\":\"Se\"},\"configurationProperties\":{\"shape\":\"Sh\"},\"inputArtifactDetails\":{\"shape\":\"Sn\"},\"outputArtifactDetails\":{\"shape\":\"Sn\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"actionType\"],\"members\":{\"actionType\":{\"shape\":\"Sr\"}}},\"http\":{}},\"CreatePipeline\":{\"input\":{\"type\":\"structure\",\"required\":[\"pipeline\"],\"members\":{\"pipeline\":{\"shape\":\"Sv\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"pipeline\":{\"shape\":\"Sv\"}}},\"http\":{}},\"DeleteCustomActionType\":{\"input\":{\"type\":\"structure\",\"required\":[\"category\",\"provider\",\"version\"],\"members\":{\"category\":{},\"provider\":{},\"version\":{}}},\"http\":{}},\"DeletePipeline\":{\"input\":{\"type\":\"structure\",\"required\":[\"name\"],\"members\":{\"name\":{}}},\"http\":{}},\"DisableStageTransition\":{\"input\":{\"type\":\"structure\",\"required\":[\"pipelineName\",\"stageName\",\"transitionType\",\"reason\"],\"members\":{\"pipelineName\":{},\"stageName\":{},\"transitionType\":{},\"reason\":{}}},\"http\":{}},\"EnableStageTransition\":{\"input\":{\"type\":\"structure\",\"required\":[\"pipelineName\",\"stageName\",\"transitionType\"],\"members\":{\"pipelineName\":{},\"stageName\":{},\"transitionType\":{}}},\"http\":{}},\"GetJobDetails\":{\"input\":{\"type\":\"structure\",\"required\":[\"jobId\"],\"members\":{\"jobId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"jobDetails\":{\"type\":\"structure\",\"members\":{\"id\":{},\"data\":{\"shape\":\"S1x\"},\"accountId\":{}}}}},\"http\":{}},\"GetPipeline\":{\"input\":{\"type\":\"structure\",\"required\":[\"name\"],\"members\":{\"name\":{},\"version\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"pipeline\":{\"shape\":\"Sv\"}}},\"http\":{}},\"GetPipelineState\":{\"input\":{\"type\":\"structure\",\"required\":[\"name\"],\"members\":{\"name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"pipelineName\":{},\"pipelineVersion\":{\"type\":\"integer\"},\"stageStates\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"stageName\":{},\"inboundTransitionState\":{\"type\":\"structure\",\"members\":{\"enabled\":{\"type\":\"boolean\"},\"lastChangedBy\":{},\"lastChangedAt\":{\"type\":\"timestamp\"},\"disabledReason\":{}}},\"actionStates\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"actionName\":{},\"currentRevision\":{\"shape\":\"S2s\"},\"latestExecution\":{\"type\":\"structure\",\"members\":{\"status\":{},\"summary\":{},\"lastStatusChange\":{\"type\":\"timestamp\"},\"externalExecutionId\":{},\"externalExecutionUrl\":{},\"percentComplete\":{\"type\":\"integer\"},\"errorDetails\":{\"type\":\"structure\",\"members\":{\"code\":{},\"message\":{}}}}},\"entityUrl\":{},\"revisionUrl\":{}}}}}}},\"created\":{\"type\":\"timestamp\"},\"updated\":{\"type\":\"timestamp\"}}},\"http\":{}},\"GetThirdPartyJobDetails\":{\"input\":{\"type\":\"structure\",\"required\":[\"jobId\",\"clientToken\"],\"members\":{\"jobId\":{},\"clientToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"jobDetails\":{\"type\":\"structure\",\"members\":{\"id\":{},\"data\":{\"type\":\"structure\",\"members\":{\"actionTypeId\":{\"shape\":\"Ss\"},\"actionConfiguration\":{\"shape\":\"S1y\"},\"pipelineContext\":{\"shape\":\"S1z\"},\"inputArtifacts\":{\"shape\":\"S22\"},\"outputArtifacts\":{\"shape\":\"S22\"},\"artifactCredentials\":{\"shape\":\"S2a\"},\"continuationToken\":{},\"encryptionKey\":{\"shape\":\"S11\"}}},\"nonce\":{}}}}},\"http\":{}},\"ListActionTypes\":{\"input\":{\"type\":\"structure\",\"members\":{\"actionOwnerFilter\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"actionTypes\"],\"members\":{\"actionTypes\":{\"type\":\"list\",\"member\":{\"shape\":\"Sr\"}},\"nextToken\":{}}},\"http\":{}},\"ListPipelines\":{\"input\":{\"type\":\"structure\",\"members\":{\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"pipelines\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"name\":{},\"version\":{\"type\":\"integer\"},\"created\":{\"type\":\"timestamp\"},\"updated\":{\"type\":\"timestamp\"}}}},\"nextToken\":{}}},\"http\":{}},\"PollForJobs\":{\"input\":{\"type\":\"structure\",\"required\":[\"actionTypeId\"],\"members\":{\"actionTypeId\":{\"shape\":\"Ss\"},\"maxBatchSize\":{\"type\":\"integer\"},\"queryParam\":{\"type\":\"map\",\"key\":{},\"value\":{}}}},\"output\":{\"type\":\"structure\",\"members\":{\"jobs\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"id\":{},\"data\":{\"shape\":\"S1x\"},\"nonce\":{},\"accountId\":{}}}}}},\"http\":{}},\"PollForThirdPartyJobs\":{\"input\":{\"type\":\"structure\",\"required\":[\"actionTypeId\"],\"members\":{\"actionTypeId\":{\"shape\":\"Ss\"},\"maxBatchSize\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"jobs\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"clientId\":{},\"jobId\":{}}}}}},\"http\":{}},\"PutActionRevision\":{\"input\":{\"type\":\"structure\",\"required\":[\"pipelineName\",\"stageName\",\"actionName\",\"actionRevision\"],\"members\":{\"pipelineName\":{},\"stageName\":{},\"actionName\":{},\"actionRevision\":{\"shape\":\"S2s\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"newRevision\":{\"type\":\"boolean\"},\"pipelineExecutionId\":{}}},\"http\":{}},\"PutJobFailureResult\":{\"input\":{\"type\":\"structure\",\"required\":[\"jobId\",\"failureDetails\"],\"members\":{\"jobId\":{},\"failureDetails\":{\"shape\":\"S3w\"}}},\"http\":{}},\"PutJobSuccessResult\":{\"input\":{\"type\":\"structure\",\"required\":[\"jobId\"],\"members\":{\"jobId\":{},\"currentRevision\":{\"shape\":\"S3z\"},\"continuationToken\":{},\"executionDetails\":{\"shape\":\"S41\"}}},\"http\":{}},\"PutThirdPartyJobFailureResult\":{\"input\":{\"type\":\"structure\",\"required\":[\"jobId\",\"clientToken\",\"failureDetails\"],\"members\":{\"jobId\":{},\"clientToken\":{},\"failureDetails\":{\"shape\":\"S3w\"}}},\"http\":{}},\"PutThirdPartyJobSuccessResult\":{\"input\":{\"type\":\"structure\",\"required\":[\"jobId\",\"clientToken\"],\"members\":{\"jobId\":{},\"clientToken\":{},\"currentRevision\":{\"shape\":\"S3z\"},\"continuationToken\":{},\"executionDetails\":{\"shape\":\"S41\"}}},\"http\":{}},\"StartPipelineExecution\":{\"input\":{\"type\":\"structure\",\"required\":[\"name\"],\"members\":{\"name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"pipelineExecutionId\":{}}},\"http\":{}},\"UpdatePipeline\":{\"input\":{\"type\":\"structure\",\"required\":[\"pipeline\"],\"members\":{\"pipeline\":{\"shape\":\"Sv\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"pipeline\":{\"shape\":\"Sv\"}}},\"http\":{}}},\"shapes\":{\"Se\":{\"type\":\"structure\",\"members\":{\"thirdPartyConfigurationUrl\":{},\"entityUrlTemplate\":{},\"executionUrlTemplate\":{},\"revisionUrlTemplate\":{}}},\"Sh\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"name\",\"required\",\"key\",\"secret\"],\"members\":{\"name\":{},\"required\":{\"type\":\"boolean\"},\"key\":{\"type\":\"boolean\"},\"secret\":{\"type\":\"boolean\"},\"queryable\":{\"type\":\"boolean\"},\"description\":{},\"type\":{}}}},\"Sn\":{\"type\":\"structure\",\"required\":[\"minimumCount\",\"maximumCount\"],\"members\":{\"minimumCount\":{\"type\":\"integer\"},\"maximumCount\":{\"type\":\"integer\"}}},\"Sr\":{\"type\":\"structure\",\"required\":[\"id\",\"inputArtifactDetails\",\"outputArtifactDetails\"],\"members\":{\"id\":{\"shape\":\"Ss\"},\"settings\":{\"shape\":\"Se\"},\"actionConfigurationProperties\":{\"shape\":\"Sh\"},\"inputArtifactDetails\":{\"shape\":\"Sn\"},\"outputArtifactDetails\":{\"shape\":\"Sn\"}}},\"Ss\":{\"type\":\"structure\",\"required\":[\"category\",\"owner\",\"provider\",\"version\"],\"members\":{\"category\":{},\"owner\":{},\"provider\":{},\"version\":{}}},\"Sv\":{\"type\":\"structure\",\"required\":[\"name\",\"roleArn\",\"artifactStore\",\"stages\"],\"members\":{\"name\":{},\"roleArn\":{},\"artifactStore\":{\"type\":\"structure\",\"required\":[\"type\",\"location\"],\"members\":{\"type\":{},\"location\":{},\"encryptionKey\":{\"shape\":\"S11\"}}},\"stages\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"name\",\"actions\"],\"members\":{\"name\":{},\"blockers\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"name\",\"type\"],\"members\":{\"name\":{},\"type\":{}}}},\"actions\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"name\",\"actionTypeId\"],\"members\":{\"name\":{},\"actionTypeId\":{\"shape\":\"Ss\"},\"runOrder\":{\"type\":\"integer\"},\"configuration\":{\"shape\":\"S1f\"},\"outputArtifacts\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"name\"],\"members\":{\"name\":{}}}},\"inputArtifacts\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"name\"],\"members\":{\"name\":{}}}},\"roleArn\":{}}}}}}},\"version\":{\"type\":\"integer\"}}},\"S11\":{\"type\":\"structure\",\"required\":[\"id\",\"type\"],\"members\":{\"id\":{},\"type\":{}}},\"S1f\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"S1x\":{\"type\":\"structure\",\"members\":{\"actionTypeId\":{\"shape\":\"Ss\"},\"actionConfiguration\":{\"shape\":\"S1y\"},\"pipelineContext\":{\"shape\":\"S1z\"},\"inputArtifacts\":{\"shape\":\"S22\"},\"outputArtifacts\":{\"shape\":\"S22\"},\"artifactCredentials\":{\"shape\":\"S2a\"},\"continuationToken\":{},\"encryptionKey\":{\"shape\":\"S11\"}}},\"S1y\":{\"type\":\"structure\",\"members\":{\"configuration\":{\"shape\":\"S1f\"}}},\"S1z\":{\"type\":\"structure\",\"members\":{\"pipelineName\":{},\"stage\":{\"type\":\"structure\",\"members\":{\"name\":{}}},\"action\":{\"type\":\"structure\",\"members\":{\"name\":{}}}}},\"S22\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"name\":{},\"revision\":{},\"location\":{\"type\":\"structure\",\"members\":{\"type\":{},\"s3Location\":{\"type\":\"structure\",\"required\":[\"bucketName\",\"objectKey\"],\"members\":{\"bucketName\":{},\"objectKey\":{}}}}}}}},\"S2a\":{\"type\":\"structure\",\"required\":[\"accessKeyId\",\"secretAccessKey\",\"sessionToken\"],\"members\":{\"accessKeyId\":{},\"secretAccessKey\":{},\"sessionToken\":{}},\"sensitive\":true},\"S2s\":{\"type\":\"structure\",\"required\":[\"revisionId\",\"created\"],\"members\":{\"revisionId\":{},\"revisionChangeId\":{},\"created\":{\"type\":\"timestamp\"}}},\"S3w\":{\"type\":\"structure\",\"required\":[\"type\",\"message\"],\"members\":{\"type\":{},\"message\":{},\"externalExecutionId\":{}}},\"S3z\":{\"type\":\"structure\",\"required\":[\"revision\",\"changeIdentifier\"],\"members\":{\"revision\":{},\"changeIdentifier\":{}}},\"S41\":{\"type\":\"structure\",\"members\":{\"summary\":{},\"externalExecutionId\":{},\"percentComplete\":{\"type\":\"integer\"}}}},\"examples\":{}};\nAWS.apiLoader.services['cognitoidentity'] = {};                                                                        // 50\nAWS.CognitoIdentity = AWS.Service.defineService('cognitoidentity', [ '2014-06-30' ]);                                  // 51\nrequire('./services/cognitoidentity');                                                                                 // 52\n                                                                                                                       // 53\nAWS.apiLoader.services['cognitoidentity']['2014-06-30'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2014-06-30\",\"endpointPrefix\":\"cognito-identity\",\"jsonVersion\":\"1.1\",\"serviceFullName\":\"Amazon Cognito Identity\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"AWSCognitoIdentityService\",\"protocol\":\"json\"},\"operations\":{\"CreateIdentityPool\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolName\",\"AllowUnauthenticatedIdentities\"],\"members\":{\"IdentityPoolName\":{},\"AllowUnauthenticatedIdentities\":{\"type\":\"boolean\"},\"SupportedLoginProviders\":{\"shape\":\"S4\"},\"DeveloperProviderName\":{},\"OpenIdConnectProviderARNs\":{\"shape\":\"S8\"}}},\"output\":{\"shape\":\"Sa\"},\"http\":{}},\"DeleteIdentities\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityIdsToDelete\"],\"members\":{\"IdentityIdsToDelete\":{\"type\":\"list\",\"member\":{}}}},\"output\":{\"type\":\"structure\",\"members\":{\"UnprocessedIdentityIds\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{},\"ErrorCode\":{}}}}}},\"http\":{}},\"DeleteIdentityPool\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{}}},\"http\":{}},\"DescribeIdentity\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityId\"],\"members\":{\"IdentityId\":{}}},\"output\":{\"shape\":\"Sl\"},\"http\":{}},\"DescribeIdentityPool\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{}}},\"output\":{\"shape\":\"Sa\"},\"http\":{}},\"GetCredentialsForIdentity\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityId\"],\"members\":{\"IdentityId\":{},\"Logins\":{\"shape\":\"Sq\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{},\"Credentials\":{\"type\":\"structure\",\"members\":{\"AccessKeyId\":{},\"SecretKey\":{},\"SessionToken\":{},\"Expiration\":{\"type\":\"timestamp\"}}}}},\"http\":{}},\"GetId\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"AccountId\":{},\"IdentityPoolId\":{},\"Logins\":{\"shape\":\"Sq\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{}}},\"http\":{}},\"GetIdentityPoolRoles\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityPoolId\":{},\"Roles\":{\"shape\":\"S12\"}}},\"http\":{}},\"GetOpenIdToken\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityId\"],\"members\":{\"IdentityId\":{},\"Logins\":{\"shape\":\"Sq\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{},\"Token\":{}}},\"http\":{}},\"GetOpenIdTokenForDeveloperIdentity\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"Logins\"],\"members\":{\"IdentityPoolId\":{},\"IdentityId\":{},\"Logins\":{\"shape\":\"Sq\"},\"TokenDuration\":{\"type\":\"long\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{},\"Token\":{}}},\"http\":{}},\"ListIdentities\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"MaxResults\"],\"members\":{\"IdentityPoolId\":{},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{},\"HideDisabled\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityPoolId\":{},\"Identities\":{\"type\":\"list\",\"member\":{\"shape\":\"Sl\"}},\"NextToken\":{}}},\"http\":{}},\"ListIdentityPools\":{\"input\":{\"type\":\"structure\",\"required\":[\"MaxResults\"],\"members\":{\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityPools\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"IdentityPoolId\":{},\"IdentityPoolName\":{}}}},\"NextToken\":{}}},\"http\":{}},\"LookupDeveloperIdentity\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{},\"IdentityId\":{},\"DeveloperUserIdentifier\":{},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{},\"DeveloperUserIdentifierList\":{\"type\":\"list\",\"member\":{}},\"NextToken\":{}}},\"http\":{}},\"MergeDeveloperIdentities\":{\"input\":{\"type\":\"structure\",\"required\":[\"SourceUserIdentifier\",\"DestinationUserIdentifier\",\"DeveloperProviderName\",\"IdentityPoolId\"],\"members\":{\"SourceUserIdentifier\":{},\"DestinationUserIdentifier\":{},\"DeveloperProviderName\":{},\"IdentityPoolId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{}}},\"http\":{}},\"SetIdentityPoolRoles\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"Roles\"],\"members\":{\"IdentityPoolId\":{},\"Roles\":{\"shape\":\"S12\"}}},\"http\":{}},\"UnlinkDeveloperIdentity\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityId\",\"IdentityPoolId\",\"DeveloperProviderName\",\"DeveloperUserIdentifier\"],\"members\":{\"IdentityId\":{},\"IdentityPoolId\":{},\"DeveloperProviderName\":{},\"DeveloperUserIdentifier\":{}}},\"http\":{}},\"UnlinkIdentity\":{\"input\":{\"type\":\"structure\",\"required\":[\"IdentityId\",\"Logins\",\"LoginsToRemove\"],\"members\":{\"IdentityId\":{},\"Logins\":{\"shape\":\"Sq\"},\"LoginsToRemove\":{\"shape\":\"Sm\"}}},\"http\":{}},\"UpdateIdentityPool\":{\"input\":{\"shape\":\"Sa\"},\"output\":{\"shape\":\"Sa\"},\"http\":{}}},\"shapes\":{\"S4\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"S8\":{\"type\":\"list\",\"member\":{}},\"Sa\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"IdentityPoolName\",\"AllowUnauthenticatedIdentities\"],\"members\":{\"IdentityPoolId\":{},\"IdentityPoolName\":{},\"AllowUnauthenticatedIdentities\":{\"type\":\"boolean\"},\"SupportedLoginProviders\":{\"shape\":\"S4\"},\"DeveloperProviderName\":{},\"OpenIdConnectProviderARNs\":{\"shape\":\"S8\"}}},\"Sl\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{},\"Logins\":{\"shape\":\"Sm\"},\"CreationDate\":{\"type\":\"timestamp\"},\"LastModifiedDate\":{\"type\":\"timestamp\"}}},\"Sm\":{\"type\":\"list\",\"member\":{}},\"Sq\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"S12\":{\"type\":\"map\",\"key\":{},\"value\":{}}},\"examples\":{}};\nAWS.apiLoader.services['cognitosync'] = {};                                                                            // 55\nAWS.CognitoSync = AWS.Service.defineService('cognitosync', [ '2014-06-30' ]);                                          // 56\n                                                                                                                       // 57\nAWS.apiLoader.services['cognitosync']['2014-06-30'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2014-06-30\",\"endpointPrefix\":\"cognito-sync\",\"jsonVersion\":\"1.1\",\"serviceFullName\":\"Amazon Cognito Sync\",\"signatureVersion\":\"v4\",\"protocol\":\"rest-json\"},\"operations\":{\"BulkPublish\":{\"http\":{\"requestUri\":\"/identitypools/{IdentityPoolId}/bulkpublish\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityPoolId\":{}}}},\"DeleteDataset\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"IdentityId\",\"DatasetName\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"IdentityId\":{\"location\":\"uri\",\"locationName\":\"IdentityId\"},\"DatasetName\":{\"location\":\"uri\",\"locationName\":\"DatasetName\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Dataset\":{\"shape\":\"S8\"}}}},\"DescribeDataset\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"IdentityId\",\"DatasetName\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"IdentityId\":{\"location\":\"uri\",\"locationName\":\"IdentityId\"},\"DatasetName\":{\"location\":\"uri\",\"locationName\":\"DatasetName\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Dataset\":{\"shape\":\"S8\"}}}},\"DescribeIdentityPoolUsage\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/identitypools/{IdentityPoolId}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityPoolUsage\":{\"shape\":\"Sg\"}}}},\"DescribeIdentityUsage\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/identitypools/{IdentityPoolId}/identities/{IdentityId}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"IdentityId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"IdentityId\":{\"location\":\"uri\",\"locationName\":\"IdentityId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityUsage\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{},\"IdentityPoolId\":{},\"LastModifiedDate\":{\"type\":\"timestamp\"},\"DatasetCount\":{\"type\":\"integer\"},\"DataStorage\":{\"type\":\"long\"}}}}}},\"GetBulkPublishDetails\":{\"http\":{\"requestUri\":\"/identitypools/{IdentityPoolId}/getBulkPublishDetails\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityPoolId\":{},\"BulkPublishStartTime\":{\"type\":\"timestamp\"},\"BulkPublishCompleteTime\":{\"type\":\"timestamp\"},\"BulkPublishStatus\":{},\"FailureMessage\":{}}}},\"GetCognitoEvents\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/identitypools/{IdentityPoolId}/events\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Events\":{\"shape\":\"Sq\"}}}},\"GetIdentityPoolConfiguration\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/identitypools/{IdentityPoolId}/configuration\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityPoolId\":{},\"PushSync\":{\"shape\":\"Sv\"},\"CognitoStreams\":{\"shape\":\"Sz\"}}}},\"ListDatasets\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityId\",\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"IdentityId\":{\"location\":\"uri\",\"locationName\":\"IdentityId\"},\"NextToken\":{\"location\":\"querystring\",\"locationName\":\"nextToken\"},\"MaxResults\":{\"location\":\"querystring\",\"locationName\":\"maxResults\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Datasets\":{\"type\":\"list\",\"member\":{\"shape\":\"S8\"}},\"Count\":{\"type\":\"integer\"},\"NextToken\":{}}}},\"ListIdentityPoolUsage\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/identitypools\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"members\":{\"NextToken\":{\"location\":\"querystring\",\"locationName\":\"nextToken\"},\"MaxResults\":{\"location\":\"querystring\",\"locationName\":\"maxResults\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityPoolUsages\":{\"type\":\"list\",\"member\":{\"shape\":\"Sg\"}},\"MaxResults\":{\"type\":\"integer\"},\"Count\":{\"type\":\"integer\"},\"NextToken\":{}}}},\"ListRecords\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"IdentityId\",\"DatasetName\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"IdentityId\":{\"location\":\"uri\",\"locationName\":\"IdentityId\"},\"DatasetName\":{\"location\":\"uri\",\"locationName\":\"DatasetName\"},\"LastSyncCount\":{\"location\":\"querystring\",\"locationName\":\"lastSyncCount\",\"type\":\"long\"},\"NextToken\":{\"location\":\"querystring\",\"locationName\":\"nextToken\"},\"MaxResults\":{\"location\":\"querystring\",\"locationName\":\"maxResults\",\"type\":\"integer\"},\"SyncSessionToken\":{\"location\":\"querystring\",\"locationName\":\"syncSessionToken\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Records\":{\"shape\":\"S1c\"},\"NextToken\":{},\"Count\":{\"type\":\"integer\"},\"DatasetSyncCount\":{\"type\":\"long\"},\"LastModifiedBy\":{},\"MergedDatasetNames\":{\"type\":\"list\",\"member\":{}},\"DatasetExists\":{\"type\":\"boolean\"},\"DatasetDeletedAfterRequestedSyncCount\":{\"type\":\"boolean\"},\"SyncSessionToken\":{}}}},\"RegisterDevice\":{\"http\":{\"requestUri\":\"/identitypools/{IdentityPoolId}/identity/{IdentityId}/device\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"IdentityId\",\"Platform\",\"Token\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"IdentityId\":{\"location\":\"uri\",\"locationName\":\"IdentityId\"},\"Platform\":{},\"Token\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"DeviceId\":{}}}},\"SetCognitoEvents\":{\"http\":{\"requestUri\":\"/identitypools/{IdentityPoolId}/events\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"Events\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"Events\":{\"shape\":\"Sq\"}}}},\"SetIdentityPoolConfiguration\":{\"http\":{\"requestUri\":\"/identitypools/{IdentityPoolId}/configuration\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"PushSync\":{\"shape\":\"Sv\"},\"CognitoStreams\":{\"shape\":\"Sz\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IdentityPoolId\":{},\"PushSync\":{\"shape\":\"Sv\"},\"CognitoStreams\":{\"shape\":\"Sz\"}}}},\"SubscribeToDataset\":{\"http\":{\"requestUri\":\"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"IdentityId\",\"DatasetName\",\"DeviceId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"IdentityId\":{\"location\":\"uri\",\"locationName\":\"IdentityId\"},\"DatasetName\":{\"location\":\"uri\",\"locationName\":\"DatasetName\"},\"DeviceId\":{\"location\":\"uri\",\"locationName\":\"DeviceId\"}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"UnsubscribeFromDataset\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"IdentityId\",\"DatasetName\",\"DeviceId\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"IdentityId\":{\"location\":\"uri\",\"locationName\":\"IdentityId\"},\"DatasetName\":{\"location\":\"uri\",\"locationName\":\"DatasetName\"},\"DeviceId\":{\"location\":\"uri\",\"locationName\":\"DeviceId\"}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"UpdateRecords\":{\"http\":{\"requestUri\":\"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"IdentityPoolId\",\"IdentityId\",\"DatasetName\",\"SyncSessionToken\"],\"members\":{\"IdentityPoolId\":{\"location\":\"uri\",\"locationName\":\"IdentityPoolId\"},\"IdentityId\":{\"location\":\"uri\",\"locationName\":\"IdentityId\"},\"DatasetName\":{\"location\":\"uri\",\"locationName\":\"DatasetName\"},\"DeviceId\":{},\"RecordPatches\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Op\",\"Key\",\"SyncCount\"],\"members\":{\"Op\":{},\"Key\":{},\"Value\":{},\"SyncCount\":{\"type\":\"long\"},\"DeviceLastModifiedDate\":{\"type\":\"timestamp\"}}}},\"SyncSessionToken\":{},\"ClientContext\":{\"location\":\"header\",\"locationName\":\"x-amz-Client-Context\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Records\":{\"shape\":\"S1c\"}}}}},\"shapes\":{\"S8\":{\"type\":\"structure\",\"members\":{\"IdentityId\":{},\"DatasetName\":{},\"CreationDate\":{\"type\":\"timestamp\"},\"LastModifiedDate\":{\"type\":\"timestamp\"},\"LastModifiedBy\":{},\"DataStorage\":{\"type\":\"long\"},\"NumRecords\":{\"type\":\"long\"}}},\"Sg\":{\"type\":\"structure\",\"members\":{\"IdentityPoolId\":{},\"SyncSessionsCount\":{\"type\":\"long\"},\"DataStorage\":{\"type\":\"long\"},\"LastModifiedDate\":{\"type\":\"timestamp\"}}},\"Sq\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"Sv\":{\"type\":\"structure\",\"members\":{\"ApplicationArns\":{\"type\":\"list\",\"member\":{}},\"RoleArn\":{}}},\"Sz\":{\"type\":\"structure\",\"members\":{\"StreamName\":{},\"RoleArn\":{},\"StreamingStatus\":{}}},\"S1c\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Key\":{},\"Value\":{},\"SyncCount\":{\"type\":\"long\"},\"LastModifiedDate\":{\"type\":\"timestamp\"},\"LastModifiedBy\":{},\"DeviceLastModifiedDate\":{\"type\":\"timestamp\"}}}}},\"examples\":{}};\nAWS.apiLoader.services['devicefarm'] = {};                                                                             // 59\nAWS.DeviceFarm = AWS.Service.defineService('devicefarm', [ '2015-06-23' ]);                                            // 60\n                                                                                                                       // 61\nAWS.apiLoader.services['devicefarm']['2015-06-23'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-06-23\",\"endpointPrefix\":\"devicefarm\",\"jsonVersion\":\"1.1\",\"protocol\":\"json\",\"serviceFullName\":\"AWS Device Farm\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"DeviceFarm_20150623\"},\"operations\":{\"CreateDevicePool\":{\"input\":{\"type\":\"structure\",\"required\":[\"projectArn\",\"name\",\"rules\"],\"members\":{\"projectArn\":{},\"name\":{},\"description\":{},\"rules\":{\"shape\":\"S5\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"devicePool\":{\"shape\":\"Sb\"}}},\"http\":{}},\"CreateProject\":{\"input\":{\"type\":\"structure\",\"required\":[\"name\"],\"members\":{\"name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"project\":{\"shape\":\"Sf\"}}},\"http\":{}},\"CreateUpload\":{\"input\":{\"type\":\"structure\",\"required\":[\"projectArn\",\"name\",\"type\"],\"members\":{\"projectArn\":{},\"name\":{},\"type\":{},\"contentType\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"upload\":{\"shape\":\"Sl\"}}},\"http\":{}},\"DeleteDevicePool\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"DeleteProject\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"DeleteRun\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"DeleteUpload\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"GetAccountSettings\":{\"input\":{\"type\":\"structure\",\"members\":{}},\"output\":{\"type\":\"structure\",\"members\":{\"accountSettings\":{\"type\":\"structure\",\"members\":{\"awsAccountNumber\":{},\"unmeteredDevices\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"integer\"}}}}}},\"http\":{}},\"GetDevice\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"device\":{\"shape\":\"S16\"}}},\"http\":{}},\"GetDevicePool\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"devicePool\":{\"shape\":\"Sb\"}}},\"http\":{}},\"GetDevicePoolCompatibility\":{\"input\":{\"type\":\"structure\",\"required\":[\"devicePoolArn\"],\"members\":{\"devicePoolArn\":{},\"appArn\":{},\"testType\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"compatibleDevices\":{\"shape\":\"S1h\"},\"incompatibleDevices\":{\"shape\":\"S1h\"}}},\"http\":{}},\"GetJob\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"job\":{\"shape\":\"S1o\"}}},\"http\":{}},\"GetProject\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"project\":{\"shape\":\"Sf\"}}},\"http\":{}},\"GetRun\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"run\":{\"shape\":\"S1x\"}}},\"http\":{}},\"GetSuite\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"suite\":{\"shape\":\"S21\"}}},\"http\":{}},\"GetTest\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"test\":{\"shape\":\"S24\"}}},\"http\":{}},\"GetUpload\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"upload\":{\"shape\":\"Sl\"}}},\"http\":{}},\"ListArtifacts\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\",\"type\"],\"members\":{\"arn\":{},\"type\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"artifacts\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{},\"type\":{},\"extension\":{},\"url\":{}}}},\"nextToken\":{}}},\"http\":{}},\"ListDevicePools\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"type\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"devicePools\":{\"type\":\"list\",\"member\":{\"shape\":\"Sb\"}},\"nextToken\":{}}},\"http\":{}},\"ListDevices\":{\"input\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"devices\":{\"type\":\"list\",\"member\":{\"shape\":\"S16\"}},\"nextToken\":{}}},\"http\":{}},\"ListJobs\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"jobs\":{\"type\":\"list\",\"member\":{\"shape\":\"S1o\"}},\"nextToken\":{}}},\"http\":{}},\"ListProjects\":{\"input\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"projects\":{\"type\":\"list\",\"member\":{\"shape\":\"Sf\"}},\"nextToken\":{}}},\"http\":{}},\"ListRuns\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"runs\":{\"type\":\"list\",\"member\":{\"shape\":\"S1x\"}},\"nextToken\":{}}},\"http\":{}},\"ListSamples\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"samples\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"type\":{},\"url\":{}}}},\"nextToken\":{}}},\"http\":{}},\"ListSuites\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"suites\":{\"type\":\"list\",\"member\":{\"shape\":\"S21\"}},\"nextToken\":{}}},\"http\":{}},\"ListTests\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"tests\":{\"type\":\"list\",\"member\":{\"shape\":\"S24\"}},\"nextToken\":{}}},\"http\":{}},\"ListUniqueProblems\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"uniqueProblems\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"message\":{},\"problems\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"run\":{\"shape\":\"S3b\"},\"job\":{\"shape\":\"S3b\"},\"suite\":{\"shape\":\"S3b\"},\"test\":{\"shape\":\"S3b\"},\"device\":{\"shape\":\"S16\"},\"result\":{},\"message\":{}}}}}}}},\"nextToken\":{}}},\"http\":{}},\"ListUploads\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"nextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"uploads\":{\"type\":\"list\",\"member\":{\"shape\":\"Sl\"}},\"nextToken\":{}}},\"http\":{}},\"ScheduleRun\":{\"input\":{\"type\":\"structure\",\"required\":[\"projectArn\",\"devicePoolArn\",\"test\"],\"members\":{\"projectArn\":{},\"appArn\":{},\"devicePoolArn\":{},\"name\":{},\"test\":{\"type\":\"structure\",\"required\":[\"type\"],\"members\":{\"type\":{},\"testPackageArn\":{},\"filter\":{},\"parameters\":{\"type\":\"map\",\"key\":{},\"value\":{}}}},\"configuration\":{\"type\":\"structure\",\"members\":{\"extraDataPackageArn\":{},\"networkProfileArn\":{},\"locale\":{},\"location\":{\"type\":\"structure\",\"required\":[\"latitude\",\"longitude\"],\"members\":{\"latitude\":{\"type\":\"double\"},\"longitude\":{\"type\":\"double\"}}},\"radios\":{\"type\":\"structure\",\"members\":{\"wifi\":{\"type\":\"boolean\"},\"bluetooth\":{\"type\":\"boolean\"},\"nfc\":{\"type\":\"boolean\"},\"gps\":{\"type\":\"boolean\"}}},\"auxiliaryApps\":{\"type\":\"list\",\"member\":{}},\"billingMethod\":{}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"run\":{\"shape\":\"S1x\"}}},\"http\":{}},\"UpdateDevicePool\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"name\":{},\"description\":{},\"rules\":{\"shape\":\"S5\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"devicePool\":{\"shape\":\"Sb\"}}},\"http\":{}},\"UpdateProject\":{\"input\":{\"type\":\"structure\",\"required\":[\"arn\"],\"members\":{\"arn\":{},\"name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"project\":{\"shape\":\"Sf\"}}},\"http\":{}}},\"shapes\":{\"S5\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"attribute\":{},\"operator\":{},\"value\":{}}}},\"Sb\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{},\"description\":{},\"type\":{},\"rules\":{\"shape\":\"S5\"}}},\"Sf\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{},\"created\":{\"type\":\"timestamp\"}}},\"Sl\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{},\"created\":{\"type\":\"timestamp\"},\"type\":{},\"status\":{},\"url\":{},\"metadata\":{},\"contentType\":{},\"message\":{}}},\"S16\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{},\"manufacturer\":{},\"model\":{},\"formFactor\":{},\"platform\":{},\"os\":{},\"cpu\":{\"type\":\"structure\",\"members\":{\"frequency\":{},\"architecture\":{},\"clock\":{\"type\":\"double\"}}},\"resolution\":{\"type\":\"structure\",\"members\":{\"width\":{\"type\":\"integer\"},\"height\":{\"type\":\"integer\"}}},\"heapSize\":{\"type\":\"long\"},\"memory\":{\"type\":\"long\"},\"image\":{},\"carrier\":{},\"radio\":{}}},\"S1h\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"device\":{\"shape\":\"S16\"},\"compatible\":{\"type\":\"boolean\"},\"incompatibilityMessages\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"message\":{},\"type\":{}}}}}}},\"S1o\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{},\"type\":{},\"created\":{\"type\":\"timestamp\"},\"status\":{},\"result\":{},\"started\":{\"type\":\"timestamp\"},\"stopped\":{\"type\":\"timestamp\"},\"counters\":{\"shape\":\"S1r\"},\"message\":{},\"device\":{\"shape\":\"S16\"},\"deviceMinutes\":{\"shape\":\"S1s\"}}},\"S1r\":{\"type\":\"structure\",\"members\":{\"total\":{\"type\":\"integer\"},\"passed\":{\"type\":\"integer\"},\"failed\":{\"type\":\"integer\"},\"warned\":{\"type\":\"integer\"},\"errored\":{\"type\":\"integer\"},\"stopped\":{\"type\":\"integer\"},\"skipped\":{\"type\":\"integer\"}}},\"S1s\":{\"type\":\"structure\",\"members\":{\"total\":{\"type\":\"double\"},\"metered\":{\"type\":\"double\"},\"unmetered\":{\"type\":\"double\"}}},\"S1x\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{},\"type\":{},\"platform\":{},\"created\":{\"type\":\"timestamp\"},\"status\":{},\"result\":{},\"started\":{\"type\":\"timestamp\"},\"stopped\":{\"type\":\"timestamp\"},\"counters\":{\"shape\":\"S1r\"},\"message\":{},\"totalJobs\":{\"type\":\"integer\"},\"completedJobs\":{\"type\":\"integer\"},\"billingMethod\":{},\"deviceMinutes\":{\"shape\":\"S1s\"}}},\"S21\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{},\"type\":{},\"created\":{\"type\":\"timestamp\"},\"status\":{},\"result\":{},\"started\":{\"type\":\"timestamp\"},\"stopped\":{\"type\":\"timestamp\"},\"counters\":{\"shape\":\"S1r\"},\"message\":{},\"deviceMinutes\":{\"shape\":\"S1s\"}}},\"S24\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{},\"type\":{},\"created\":{\"type\":\"timestamp\"},\"status\":{},\"result\":{},\"started\":{\"type\":\"timestamp\"},\"stopped\":{\"type\":\"timestamp\"},\"counters\":{\"shape\":\"S1r\"},\"message\":{},\"deviceMinutes\":{\"shape\":\"S1s\"}}},\"S3b\":{\"type\":\"structure\",\"members\":{\"arn\":{},\"name\":{}}}},\"paginators\":{\"ListArtifacts\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"artifacts\"},\"ListDevicePools\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"devicePools\"},\"ListDevices\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"devices\"},\"ListJobs\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"jobs\"},\"ListProjects\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"projects\"},\"ListRuns\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"runs\"},\"ListSamples\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"samples\"},\"ListSuites\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"suites\"},\"ListTests\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"tests\"},\"ListUniqueProblems\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"uniqueProblems\"},\"ListUploads\":{\"input_token\":\"nextToken\",\"output_token\":\"nextToken\",\"result_key\":\"uploads\"}}};\nAWS.apiLoader.services['dynamodb'] = {};                                                                               // 63\nAWS.DynamoDB = AWS.Service.defineService('dynamodb', [ '2011-12-05', '2012-08-10' ]);                                  // 64\nrequire('./services/dynamodb');                                                                                        // 65\n                                                                                                                       // 66\nAWS.apiLoader.services['dynamodb']['2012-08-10'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2012-08-10\",\"endpointPrefix\":\"dynamodb\",\"jsonVersion\":\"1.0\",\"protocol\":\"json\",\"serviceAbbreviation\":\"DynamoDB\",\"serviceFullName\":\"Amazon DynamoDB\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"DynamoDB_20120810\"},\"operations\":{\"BatchGetItem\":{\"input\":{\"type\":\"structure\",\"required\":[\"RequestItems\"],\"members\":{\"RequestItems\":{\"shape\":\"S2\"},\"ReturnConsumedCapacity\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Responses\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"Sr\"}},\"UnprocessedKeys\":{\"shape\":\"S2\"},\"ConsumedCapacity\":{\"shape\":\"St\"}}},\"http\":{}},\"BatchWriteItem\":{\"input\":{\"type\":\"structure\",\"required\":[\"RequestItems\"],\"members\":{\"RequestItems\":{\"shape\":\"S10\"},\"ReturnConsumedCapacity\":{},\"ReturnItemCollectionMetrics\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"UnprocessedItems\":{\"shape\":\"S10\"},\"ItemCollectionMetrics\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"list\",\"member\":{\"shape\":\"S1a\"}}},\"ConsumedCapacity\":{\"shape\":\"St\"}}},\"http\":{}},\"CreateTable\":{\"input\":{\"type\":\"structure\",\"required\":[\"AttributeDefinitions\",\"TableName\",\"KeySchema\",\"ProvisionedThroughput\"],\"members\":{\"AttributeDefinitions\":{\"shape\":\"S1f\"},\"TableName\":{},\"KeySchema\":{\"shape\":\"S1j\"},\"LocalSecondaryIndexes\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"IndexName\",\"KeySchema\",\"Projection\"],\"members\":{\"IndexName\":{},\"KeySchema\":{\"shape\":\"S1j\"},\"Projection\":{\"shape\":\"S1o\"}}}},\"GlobalSecondaryIndexes\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"IndexName\",\"KeySchema\",\"Projection\",\"ProvisionedThroughput\"],\"members\":{\"IndexName\":{},\"KeySchema\":{\"shape\":\"S1j\"},\"Projection\":{\"shape\":\"S1o\"},\"ProvisionedThroughput\":{\"shape\":\"S1u\"}}}},\"ProvisionedThroughput\":{\"shape\":\"S1u\"},\"StreamSpecification\":{\"shape\":\"S1w\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"TableDescription\":{\"shape\":\"S20\"}}},\"http\":{}},\"DeleteItem\":{\"input\":{\"type\":\"structure\",\"required\":[\"TableName\",\"Key\"],\"members\":{\"TableName\":{},\"Key\":{\"shape\":\"S6\"},\"Expected\":{\"shape\":\"S2e\"},\"ConditionalOperator\":{},\"ReturnValues\":{},\"ReturnConsumedCapacity\":{},\"ReturnItemCollectionMetrics\":{},\"ConditionExpression\":{},\"ExpressionAttributeNames\":{\"shape\":\"Sm\"},\"ExpressionAttributeValues\":{\"shape\":\"S2m\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Attributes\":{\"shape\":\"Ss\"},\"ConsumedCapacity\":{\"shape\":\"Su\"},\"ItemCollectionMetrics\":{\"shape\":\"S1a\"}}},\"http\":{}},\"DeleteTable\":{\"input\":{\"type\":\"structure\",\"required\":[\"TableName\"],\"members\":{\"TableName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"TableDescription\":{\"shape\":\"S20\"}}},\"http\":{}},\"DescribeLimits\":{\"input\":{\"type\":\"structure\",\"members\":{}},\"output\":{\"type\":\"structure\",\"members\":{\"AccountMaxReadCapacityUnits\":{\"type\":\"long\"},\"AccountMaxWriteCapacityUnits\":{\"type\":\"long\"},\"TableMaxReadCapacityUnits\":{\"type\":\"long\"},\"TableMaxWriteCapacityUnits\":{\"type\":\"long\"}}},\"http\":{}},\"DescribeTable\":{\"input\":{\"type\":\"structure\",\"required\":[\"TableName\"],\"members\":{\"TableName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Table\":{\"shape\":\"S20\"}}},\"http\":{}},\"GetItem\":{\"input\":{\"type\":\"structure\",\"required\":[\"TableName\",\"Key\"],\"members\":{\"TableName\":{},\"Key\":{\"shape\":\"S6\"},\"AttributesToGet\":{\"shape\":\"Sj\"},\"ConsistentRead\":{\"type\":\"boolean\"},\"ReturnConsumedCapacity\":{},\"ProjectionExpression\":{},\"ExpressionAttributeNames\":{\"shape\":\"Sm\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Item\":{\"shape\":\"Ss\"},\"ConsumedCapacity\":{\"shape\":\"Su\"}}},\"http\":{}},\"ListTables\":{\"input\":{\"type\":\"structure\",\"members\":{\"ExclusiveStartTableName\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"TableNames\":{\"type\":\"list\",\"member\":{}},\"LastEvaluatedTableName\":{}}},\"http\":{}},\"PutItem\":{\"input\":{\"type\":\"structure\",\"required\":[\"TableName\",\"Item\"],\"members\":{\"TableName\":{},\"Item\":{\"shape\":\"S14\"},\"Expected\":{\"shape\":\"S2e\"},\"ReturnValues\":{},\"ReturnConsumedCapacity\":{},\"ReturnItemCollectionMetrics\":{},\"ConditionalOperator\":{},\"ConditionExpression\":{},\"ExpressionAttributeNames\":{\"shape\":\"Sm\"},\"ExpressionAttributeValues\":{\"shape\":\"S2m\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Attributes\":{\"shape\":\"Ss\"},\"ConsumedCapacity\":{\"shape\":\"Su\"},\"ItemCollectionMetrics\":{\"shape\":\"S1a\"}}},\"http\":{}},\"Query\":{\"input\":{\"type\":\"structure\",\"required\":[\"TableName\"],\"members\":{\"TableName\":{},\"IndexName\":{},\"Select\":{},\"AttributesToGet\":{\"shape\":\"Sj\"},\"Limit\":{\"type\":\"integer\"},\"ConsistentRead\":{\"type\":\"boolean\"},\"KeyConditions\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"S37\"}},\"QueryFilter\":{\"shape\":\"S38\"},\"ConditionalOperator\":{},\"ScanIndexForward\":{\"type\":\"boolean\"},\"ExclusiveStartKey\":{\"shape\":\"S6\"},\"ReturnConsumedCapacity\":{},\"ProjectionExpression\":{},\"FilterExpression\":{},\"KeyConditionExpression\":{},\"ExpressionAttributeNames\":{\"shape\":\"Sm\"},\"ExpressionAttributeValues\":{\"shape\":\"S2m\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Items\":{\"shape\":\"Sr\"},\"Count\":{\"type\":\"integer\"},\"ScannedCount\":{\"type\":\"integer\"},\"LastEvaluatedKey\":{\"shape\":\"S6\"},\"ConsumedCapacity\":{\"shape\":\"Su\"}}},\"http\":{}},\"Scan\":{\"input\":{\"type\":\"structure\",\"required\":[\"TableName\"],\"members\":{\"TableName\":{},\"IndexName\":{},\"AttributesToGet\":{\"shape\":\"Sj\"},\"Limit\":{\"type\":\"integer\"},\"Select\":{},\"ScanFilter\":{\"shape\":\"S38\"},\"ConditionalOperator\":{},\"ExclusiveStartKey\":{\"shape\":\"S6\"},\"ReturnConsumedCapacity\":{},\"TotalSegments\":{\"type\":\"integer\"},\"Segment\":{\"type\":\"integer\"},\"ProjectionExpression\":{},\"FilterExpression\":{},\"ExpressionAttributeNames\":{\"shape\":\"Sm\"},\"ExpressionAttributeValues\":{\"shape\":\"S2m\"},\"ConsistentRead\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Items\":{\"shape\":\"Sr\"},\"Count\":{\"type\":\"integer\"},\"ScannedCount\":{\"type\":\"integer\"},\"LastEvaluatedKey\":{\"shape\":\"S6\"},\"ConsumedCapacity\":{\"shape\":\"Su\"}}},\"http\":{}},\"UpdateItem\":{\"input\":{\"type\":\"structure\",\"required\":[\"TableName\",\"Key\"],\"members\":{\"TableName\":{},\"Key\":{\"shape\":\"S6\"},\"AttributeUpdates\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"structure\",\"members\":{\"Value\":{\"shape\":\"S8\"},\"Action\":{}}}},\"Expected\":{\"shape\":\"S2e\"},\"ConditionalOperator\":{},\"ReturnValues\":{},\"ReturnConsumedCapacity\":{},\"ReturnItemCollectionMetrics\":{},\"UpdateExpression\":{},\"ConditionExpression\":{},\"ExpressionAttributeNames\":{\"shape\":\"Sm\"},\"ExpressionAttributeValues\":{\"shape\":\"S2m\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Attributes\":{\"shape\":\"Ss\"},\"ConsumedCapacity\":{\"shape\":\"Su\"},\"ItemCollectionMetrics\":{\"shape\":\"S1a\"}}},\"http\":{}},\"UpdateTable\":{\"input\":{\"type\":\"structure\",\"required\":[\"TableName\"],\"members\":{\"AttributeDefinitions\":{\"shape\":\"S1f\"},\"TableName\":{},\"ProvisionedThroughput\":{\"shape\":\"S1u\"},\"GlobalSecondaryIndexUpdates\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Update\":{\"type\":\"structure\",\"required\":[\"IndexName\",\"ProvisionedThroughput\"],\"members\":{\"IndexName\":{},\"ProvisionedThroughput\":{\"shape\":\"S1u\"}}},\"Create\":{\"type\":\"structure\",\"required\":[\"IndexName\",\"KeySchema\",\"Projection\",\"ProvisionedThroughput\"],\"members\":{\"IndexName\":{},\"KeySchema\":{\"shape\":\"S1j\"},\"Projection\":{\"shape\":\"S1o\"},\"ProvisionedThroughput\":{\"shape\":\"S1u\"}}},\"Delete\":{\"type\":\"structure\",\"required\":[\"IndexName\"],\"members\":{\"IndexName\":{}}}}}},\"StreamSpecification\":{\"shape\":\"S1w\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"TableDescription\":{\"shape\":\"S20\"}}},\"http\":{}}},\"shapes\":{\"S2\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"structure\",\"required\":[\"Keys\"],\"members\":{\"Keys\":{\"type\":\"list\",\"member\":{\"shape\":\"S6\"}},\"AttributesToGet\":{\"shape\":\"Sj\"},\"ConsistentRead\":{\"type\":\"boolean\"},\"ProjectionExpression\":{},\"ExpressionAttributeNames\":{\"shape\":\"Sm\"}}}},\"S6\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"S8\"}},\"S8\":{\"type\":\"structure\",\"members\":{\"S\":{},\"N\":{},\"B\":{\"type\":\"blob\"},\"SS\":{\"type\":\"list\",\"member\":{}},\"NS\":{\"type\":\"list\",\"member\":{}},\"BS\":{\"type\":\"list\",\"member\":{\"type\":\"blob\"}},\"M\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"S8\"}},\"L\":{\"type\":\"list\",\"member\":{\"shape\":\"S8\"}},\"NULL\":{\"type\":\"boolean\"},\"BOOL\":{\"type\":\"boolean\"}}},\"Sj\":{\"type\":\"list\",\"member\":{}},\"Sm\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"Sr\":{\"type\":\"list\",\"member\":{\"shape\":\"Ss\"}},\"Ss\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"S8\"}},\"St\":{\"type\":\"list\",\"member\":{\"shape\":\"Su\"}},\"Su\":{\"type\":\"structure\",\"members\":{\"TableName\":{},\"CapacityUnits\":{\"type\":\"double\"},\"Table\":{\"shape\":\"Sw\"},\"LocalSecondaryIndexes\":{\"shape\":\"Sx\"},\"GlobalSecondaryIndexes\":{\"shape\":\"Sx\"}}},\"Sw\":{\"type\":\"structure\",\"members\":{\"CapacityUnits\":{\"type\":\"double\"}}},\"Sx\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"Sw\"}},\"S10\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"PutRequest\":{\"type\":\"structure\",\"required\":[\"Item\"],\"members\":{\"Item\":{\"shape\":\"S14\"}}},\"DeleteRequest\":{\"type\":\"structure\",\"required\":[\"Key\"],\"members\":{\"Key\":{\"shape\":\"S6\"}}}}}}},\"S14\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"S8\"}},\"S1a\":{\"type\":\"structure\",\"members\":{\"ItemCollectionKey\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"S8\"}},\"SizeEstimateRangeGB\":{\"type\":\"list\",\"member\":{\"type\":\"double\"}}}},\"S1f\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"AttributeName\",\"AttributeType\"],\"members\":{\"AttributeName\":{},\"AttributeType\":{}}}},\"S1j\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"AttributeName\",\"KeyType\"],\"members\":{\"AttributeName\":{},\"KeyType\":{}}}},\"S1o\":{\"type\":\"structure\",\"members\":{\"ProjectionType\":{},\"NonKeyAttributes\":{\"type\":\"list\",\"member\":{}}}},\"S1u\":{\"type\":\"structure\",\"required\":[\"ReadCapacityUnits\",\"WriteCapacityUnits\"],\"members\":{\"ReadCapacityUnits\":{\"type\":\"long\"},\"WriteCapacityUnits\":{\"type\":\"long\"}}},\"S1w\":{\"type\":\"structure\",\"members\":{\"StreamEnabled\":{\"type\":\"boolean\"},\"StreamViewType\":{}}},\"S20\":{\"type\":\"structure\",\"members\":{\"AttributeDefinitions\":{\"shape\":\"S1f\"},\"TableName\":{},\"KeySchema\":{\"shape\":\"S1j\"},\"TableStatus\":{},\"CreationDateTime\":{\"type\":\"timestamp\"},\"ProvisionedThroughput\":{\"shape\":\"S23\"},\"TableSizeBytes\":{\"type\":\"long\"},\"ItemCount\":{\"type\":\"long\"},\"TableArn\":{},\"LocalSecondaryIndexes\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"IndexName\":{},\"KeySchema\":{\"shape\":\"S1j\"},\"Projection\":{\"shape\":\"S1o\"},\"IndexSizeBytes\":{\"type\":\"long\"},\"ItemCount\":{\"type\":\"long\"},\"IndexArn\":{}}}},\"GlobalSecondaryIndexes\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"IndexName\":{},\"KeySchema\":{\"shape\":\"S1j\"},\"Projection\":{\"shape\":\"S1o\"},\"IndexStatus\":{},\"Backfilling\":{\"type\":\"boolean\"},\"ProvisionedThroughput\":{\"shape\":\"S23\"},\"IndexSizeBytes\":{\"type\":\"long\"},\"ItemCount\":{\"type\":\"long\"},\"IndexArn\":{}}}},\"StreamSpecification\":{\"shape\":\"S1w\"},\"LatestStreamLabel\":{},\"LatestStreamArn\":{}}},\"S23\":{\"type\":\"structure\",\"members\":{\"LastIncreaseDateTime\":{\"type\":\"timestamp\"},\"LastDecreaseDateTime\":{\"type\":\"timestamp\"},\"NumberOfDecreasesToday\":{\"type\":\"long\"},\"ReadCapacityUnits\":{\"type\":\"long\"},\"WriteCapacityUnits\":{\"type\":\"long\"}}},\"S2e\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"structure\",\"members\":{\"Value\":{\"shape\":\"S8\"},\"Exists\":{\"type\":\"boolean\"},\"ComparisonOperator\":{},\"AttributeValueList\":{\"shape\":\"S2i\"}}}},\"S2i\":{\"type\":\"list\",\"member\":{\"shape\":\"S8\"}},\"S2m\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"S8\"}},\"S37\":{\"type\":\"structure\",\"required\":[\"ComparisonOperator\"],\"members\":{\"AttributeValueList\":{\"shape\":\"S2i\"},\"ComparisonOperator\":{}}},\"S38\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"S37\"}}},\"paginators\":{\"BatchGetItem\":{\"input_token\":\"RequestItems\",\"output_token\":\"UnprocessedKeys\"},\"ListTables\":{\"input_token\":\"ExclusiveStartTableName\",\"output_token\":\"LastEvaluatedTableName\",\"limit_key\":\"Limit\",\"result_key\":\"TableNames\"},\"Query\":{\"input_token\":\"ExclusiveStartKey\",\"output_token\":\"LastEvaluatedKey\",\"limit_key\":\"Limit\",\"result_key\":\"Items\"},\"Scan\":{\"input_token\":\"ExclusiveStartKey\",\"output_token\":\"LastEvaluatedKey\",\"limit_key\":\"Limit\",\"result_key\":\"Items\"}},\"waiters\":{\"__default__\":{\"interval\":20,\"max_attempts\":25},\"__TableState\":{\"operation\":\"DescribeTable\"},\"TableExists\":{\"extends\":\"__TableState\",\"ignore_errors\":[\"ResourceNotFoundException\"],\"success_type\":\"output\",\"success_path\":\"Table.TableStatus\",\"success_value\":\"ACTIVE\"},\"TableNotExists\":{\"extends\":\"__TableState\",\"success_type\":\"error\",\"success_value\":\"ResourceNotFoundException\"}}};\nAWS.apiLoader.services['dynamodbstreams'] = {};                                                                        // 68\nAWS.DynamoDBStreams = AWS.Service.defineService('dynamodbstreams', [ '2012-08-10' ]);                                  // 69\n                                                                                                                       // 70\nAWS.apiLoader.services['dynamodbstreams']['2012-08-10'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2012-08-10\",\"endpointPrefix\":\"streams.dynamodb\",\"jsonVersion\":\"1.0\",\"serviceFullName\":\"Amazon DynamoDB Streams\",\"signatureVersion\":\"v4\",\"signingName\":\"dynamodb\",\"targetPrefix\":\"DynamoDBStreams_20120810\",\"protocol\":\"json\"},\"operations\":{\"DescribeStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamArn\"],\"members\":{\"StreamArn\":{},\"Limit\":{\"type\":\"integer\"},\"ExclusiveStartShardId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"StreamDescription\":{\"type\":\"structure\",\"members\":{\"StreamArn\":{},\"StreamLabel\":{},\"StreamStatus\":{},\"StreamViewType\":{},\"CreationRequestDateTime\":{\"type\":\"timestamp\"},\"TableName\":{},\"KeySchema\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"AttributeName\",\"KeyType\"],\"members\":{\"AttributeName\":{},\"KeyType\":{}}}},\"Shards\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"ShardId\":{},\"SequenceNumberRange\":{\"type\":\"structure\",\"members\":{\"StartingSequenceNumber\":{},\"EndingSequenceNumber\":{}}},\"ParentShardId\":{}}}},\"LastEvaluatedShardId\":{}}}}},\"http\":{}},\"GetRecords\":{\"input\":{\"type\":\"structure\",\"required\":[\"ShardIterator\"],\"members\":{\"ShardIterator\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Records\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"eventID\":{},\"eventName\":{},\"eventVersion\":{},\"eventSource\":{},\"awsRegion\":{},\"dynamodb\":{\"type\":\"structure\",\"members\":{\"Keys\":{\"shape\":\"Sr\"},\"NewImage\":{\"shape\":\"Sr\"},\"OldImage\":{\"shape\":\"Sr\"},\"SequenceNumber\":{},\"SizeBytes\":{\"type\":\"long\"},\"StreamViewType\":{}}}}}},\"NextShardIterator\":{}}},\"http\":{}},\"GetShardIterator\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamArn\",\"ShardId\",\"ShardIteratorType\"],\"members\":{\"StreamArn\":{},\"ShardId\":{},\"ShardIteratorType\":{},\"SequenceNumber\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ShardIterator\":{}}},\"http\":{}},\"ListStreams\":{\"input\":{\"type\":\"structure\",\"members\":{\"TableName\":{},\"Limit\":{\"type\":\"integer\"},\"ExclusiveStartStreamArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Streams\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"StreamArn\":{},\"TableName\":{},\"StreamLabel\":{}}}},\"LastEvaluatedStreamArn\":{}}},\"http\":{}}},\"shapes\":{\"Sr\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"St\"}},\"St\":{\"type\":\"structure\",\"members\":{\"S\":{},\"N\":{},\"B\":{\"type\":\"blob\"},\"SS\":{\"type\":\"list\",\"member\":{}},\"NS\":{\"type\":\"list\",\"member\":{}},\"BS\":{\"type\":\"list\",\"member\":{\"type\":\"blob\"}},\"M\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"St\"}},\"L\":{\"type\":\"list\",\"member\":{\"shape\":\"St\"}},\"NULL\":{\"type\":\"boolean\"},\"BOOL\":{\"type\":\"boolean\"}}}},\"examples\":{}};\nAWS.apiLoader.services['ec2'] = {};                                                                                    // 72\nAWS.EC2 = AWS.Service.defineService('ec2', [ '2015-10-01' ]);                                                          // 73\nrequire('./services/ec2');                                                                                             // 74\n                                                                                                                       // 75\nAWS.apiLoader.services['ec2']['2015-10-01'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-10-01\",\"endpointPrefix\":\"ec2\",\"protocol\":\"ec2\",\"serviceAbbreviation\":\"Amazon EC2\",\"serviceFullName\":\"Amazon Elastic Compute Cloud\",\"signatureVersion\":\"v4\",\"xmlNamespace\":\"http://ec2.amazonaws.com/doc/2015-10-01\"},\"operations\":{\"AcceptVpcPeeringConnection\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcPeeringConnectionId\":{\"locationName\":\"vpcPeeringConnectionId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpcPeeringConnection\":{\"shape\":\"S5\",\"locationName\":\"vpcPeeringConnection\"}}},\"http\":{}},\"AllocateAddress\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Domain\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"PublicIp\":{\"locationName\":\"publicIp\"},\"Domain\":{\"locationName\":\"domain\"},\"AllocationId\":{\"locationName\":\"allocationId\"}}},\"http\":{}},\"AllocateHosts\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceType\",\"Quantity\",\"AvailabilityZone\"],\"members\":{\"AutoPlacement\":{\"locationName\":\"autoPlacement\"},\"ClientToken\":{\"locationName\":\"clientToken\"},\"InstanceType\":{\"locationName\":\"instanceType\"},\"Quantity\":{\"locationName\":\"quantity\",\"type\":\"integer\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"HostIds\":{\"shape\":\"Sj\",\"locationName\":\"hostIdSet\"}}},\"http\":{}},\"AssignPrivateIpAddresses\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkInterfaceId\"],\"members\":{\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"PrivateIpAddresses\":{\"shape\":\"Sl\",\"locationName\":\"privateIpAddress\"},\"SecondaryPrivateIpAddressCount\":{\"locationName\":\"secondaryPrivateIpAddressCount\",\"type\":\"integer\"},\"AllowReassignment\":{\"locationName\":\"allowReassignment\",\"type\":\"boolean\"}}},\"http\":{}},\"AssociateAddress\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{},\"PublicIp\":{},\"AllocationId\":{},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"AllowReassociation\":{\"locationName\":\"allowReassociation\",\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"AssociationId\":{\"locationName\":\"associationId\"}}},\"http\":{}},\"AssociateDhcpOptions\":{\"input\":{\"type\":\"structure\",\"required\":[\"DhcpOptionsId\",\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"DhcpOptionsId\":{},\"VpcId\":{}}},\"http\":{}},\"AssociateRouteTable\":{\"input\":{\"type\":\"structure\",\"required\":[\"SubnetId\",\"RouteTableId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"RouteTableId\":{\"locationName\":\"routeTableId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"AssociationId\":{\"locationName\":\"associationId\"}}},\"http\":{}},\"AttachClassicLinkVpc\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\",\"VpcId\",\"Groups\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"Groups\":{\"shape\":\"Ss\",\"locationName\":\"SecurityGroupId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"AttachInternetGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"InternetGatewayId\",\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InternetGatewayId\":{\"locationName\":\"internetGatewayId\"},\"VpcId\":{\"locationName\":\"vpcId\"}}},\"http\":{}},\"AttachNetworkInterface\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkInterfaceId\",\"InstanceId\",\"DeviceIndex\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"DeviceIndex\":{\"locationName\":\"deviceIndex\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"AttachmentId\":{\"locationName\":\"attachmentId\"}}},\"http\":{}},\"AttachVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\",\"InstanceId\",\"Device\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VolumeId\":{},\"InstanceId\":{},\"Device\":{}}},\"output\":{\"shape\":\"Sy\"},\"http\":{}},\"AttachVpnGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpnGatewayId\",\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpnGatewayId\":{},\"VpcId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpcAttachment\":{\"shape\":\"S12\",\"locationName\":\"attachment\"}}},\"http\":{}},\"AuthorizeSecurityGroupEgress\":{\"input\":{\"type\":\"structure\",\"required\":[\"GroupId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupId\":{\"locationName\":\"groupId\"},\"SourceSecurityGroupName\":{\"locationName\":\"sourceSecurityGroupName\"},\"SourceSecurityGroupOwnerId\":{\"locationName\":\"sourceSecurityGroupOwnerId\"},\"IpProtocol\":{\"locationName\":\"ipProtocol\"},\"FromPort\":{\"locationName\":\"fromPort\",\"type\":\"integer\"},\"ToPort\":{\"locationName\":\"toPort\",\"type\":\"integer\"},\"CidrIp\":{\"locationName\":\"cidrIp\"},\"IpPermissions\":{\"shape\":\"S15\",\"locationName\":\"ipPermissions\"}}},\"http\":{}},\"AuthorizeSecurityGroupIngress\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupName\":{},\"GroupId\":{},\"SourceSecurityGroupName\":{},\"SourceSecurityGroupOwnerId\":{},\"IpProtocol\":{},\"FromPort\":{\"type\":\"integer\"},\"ToPort\":{\"type\":\"integer\"},\"CidrIp\":{},\"IpPermissions\":{\"shape\":\"S15\"}}},\"http\":{}},\"BundleInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\",\"Storage\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{},\"Storage\":{\"shape\":\"S1f\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"BundleTask\":{\"shape\":\"S1j\",\"locationName\":\"bundleInstanceTask\"}}},\"http\":{}},\"CancelBundleTask\":{\"input\":{\"type\":\"structure\",\"required\":[\"BundleId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"BundleId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"BundleTask\":{\"shape\":\"S1j\",\"locationName\":\"bundleInstanceTask\"}}},\"http\":{}},\"CancelConversionTask\":{\"input\":{\"type\":\"structure\",\"required\":[\"ConversionTaskId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ConversionTaskId\":{\"locationName\":\"conversionTaskId\"},\"ReasonMessage\":{\"locationName\":\"reasonMessage\"}}},\"http\":{}},\"CancelExportTask\":{\"input\":{\"type\":\"structure\",\"required\":[\"ExportTaskId\"],\"members\":{\"ExportTaskId\":{\"locationName\":\"exportTaskId\"}}},\"http\":{}},\"CancelImportTask\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"ImportTaskId\":{},\"CancelReason\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ImportTaskId\":{\"locationName\":\"importTaskId\"},\"State\":{\"locationName\":\"state\"},\"PreviousState\":{\"locationName\":\"previousState\"}}},\"http\":{}},\"CancelReservedInstancesListing\":{\"input\":{\"type\":\"structure\",\"required\":[\"ReservedInstancesListingId\"],\"members\":{\"ReservedInstancesListingId\":{\"locationName\":\"reservedInstancesListingId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ReservedInstancesListings\":{\"shape\":\"S1u\",\"locationName\":\"reservedInstancesListingsSet\"}}},\"http\":{}},\"CancelSpotFleetRequests\":{\"input\":{\"type\":\"structure\",\"required\":[\"SpotFleetRequestIds\",\"TerminateInstances\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SpotFleetRequestIds\":{\"shape\":\"S26\",\"locationName\":\"spotFleetRequestId\"},\"TerminateInstances\":{\"locationName\":\"terminateInstances\",\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"UnsuccessfulFleetRequests\":{\"locationName\":\"unsuccessfulFleetRequestSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"required\":[\"SpotFleetRequestId\",\"Error\"],\"members\":{\"SpotFleetRequestId\":{\"locationName\":\"spotFleetRequestId\"},\"Error\":{\"locationName\":\"error\",\"type\":\"structure\",\"required\":[\"Code\",\"Message\"],\"members\":{\"Code\":{\"locationName\":\"code\"},\"Message\":{\"locationName\":\"message\"}}}}}},\"SuccessfulFleetRequests\":{\"locationName\":\"successfulFleetRequestSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"required\":[\"SpotFleetRequestId\",\"CurrentSpotFleetRequestState\",\"PreviousSpotFleetRequestState\"],\"members\":{\"SpotFleetRequestId\":{\"locationName\":\"spotFleetRequestId\"},\"CurrentSpotFleetRequestState\":{\"locationName\":\"currentSpotFleetRequestState\"},\"PreviousSpotFleetRequestState\":{\"locationName\":\"previousSpotFleetRequestState\"}}}}}},\"http\":{}},\"CancelSpotInstanceRequests\":{\"input\":{\"type\":\"structure\",\"required\":[\"SpotInstanceRequestIds\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SpotInstanceRequestIds\":{\"shape\":\"S2g\",\"locationName\":\"SpotInstanceRequestId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CancelledSpotInstanceRequests\":{\"locationName\":\"spotInstanceRequestSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"SpotInstanceRequestId\":{\"locationName\":\"spotInstanceRequestId\"},\"State\":{\"locationName\":\"state\"}}}}}},\"http\":{}},\"ConfirmProductInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"ProductCode\",\"InstanceId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ProductCode\":{},\"InstanceId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"OwnerId\":{\"locationName\":\"ownerId\"},\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"CopyImage\":{\"input\":{\"type\":\"structure\",\"required\":[\"SourceRegion\",\"SourceImageId\",\"Name\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SourceRegion\":{},\"SourceImageId\":{},\"Name\":{},\"Description\":{},\"ClientToken\":{},\"Encrypted\":{\"locationName\":\"encrypted\",\"type\":\"boolean\"},\"KmsKeyId\":{\"locationName\":\"kmsKeyId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ImageId\":{\"locationName\":\"imageId\"}}},\"http\":{}},\"CopySnapshot\":{\"input\":{\"type\":\"structure\",\"required\":[\"SourceRegion\",\"SourceSnapshotId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SourceRegion\":{},\"SourceSnapshotId\":{},\"Description\":{},\"DestinationRegion\":{\"locationName\":\"destinationRegion\"},\"PresignedUrl\":{\"locationName\":\"presignedUrl\"},\"Encrypted\":{\"locationName\":\"encrypted\",\"type\":\"boolean\"},\"KmsKeyId\":{\"locationName\":\"kmsKeyId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"SnapshotId\":{\"locationName\":\"snapshotId\"}}},\"http\":{}},\"CreateCustomerGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"Type\",\"PublicIp\",\"BgpAsn\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Type\":{},\"PublicIp\":{\"locationName\":\"IpAddress\"},\"BgpAsn\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CustomerGateway\":{\"shape\":\"S2u\",\"locationName\":\"customerGateway\"}}},\"http\":{}},\"CreateDhcpOptions\":{\"input\":{\"type\":\"structure\",\"required\":[\"DhcpConfigurations\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"DhcpConfigurations\":{\"locationName\":\"dhcpConfiguration\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Key\":{\"locationName\":\"key\"},\"Values\":{\"shape\":\"S26\",\"locationName\":\"Value\"}}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"DhcpOptions\":{\"shape\":\"S2z\",\"locationName\":\"dhcpOptions\"}}},\"http\":{}},\"CreateFlowLogs\":{\"input\":{\"type\":\"structure\",\"required\":[\"ResourceIds\",\"ResourceType\",\"TrafficType\",\"LogGroupName\",\"DeliverLogsPermissionArn\"],\"members\":{\"ResourceIds\":{\"shape\":\"S26\",\"locationName\":\"ResourceId\"},\"ResourceType\":{},\"TrafficType\":{},\"LogGroupName\":{},\"DeliverLogsPermissionArn\":{},\"ClientToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"FlowLogIds\":{\"shape\":\"S26\",\"locationName\":\"flowLogIdSet\"},\"ClientToken\":{\"locationName\":\"clientToken\"},\"Unsuccessful\":{\"shape\":\"S38\",\"locationName\":\"unsuccessful\"}}},\"http\":{}},\"CreateImage\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\",\"Name\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"Name\":{\"locationName\":\"name\"},\"Description\":{\"locationName\":\"description\"},\"NoReboot\":{\"locationName\":\"noReboot\",\"type\":\"boolean\"},\"BlockDeviceMappings\":{\"shape\":\"S3c\",\"locationName\":\"blockDeviceMapping\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ImageId\":{\"locationName\":\"imageId\"}}},\"http\":{}},\"CreateInstanceExportTask\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"Description\":{\"locationName\":\"description\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"TargetEnvironment\":{\"locationName\":\"targetEnvironment\"},\"ExportToS3Task\":{\"locationName\":\"exportToS3\",\"type\":\"structure\",\"members\":{\"DiskImageFormat\":{\"locationName\":\"diskImageFormat\"},\"ContainerFormat\":{\"locationName\":\"containerFormat\"},\"S3Bucket\":{\"locationName\":\"s3Bucket\"},\"S3Prefix\":{\"locationName\":\"s3Prefix\"}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ExportTask\":{\"shape\":\"S3n\",\"locationName\":\"exportTask\"}}},\"http\":{}},\"CreateInternetGateway\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"InternetGateway\":{\"shape\":\"S3t\",\"locationName\":\"internetGateway\"}}},\"http\":{}},\"CreateKeyPair\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyName\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"KeyName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"KeyName\":{\"locationName\":\"keyName\"},\"KeyFingerprint\":{\"locationName\":\"keyFingerprint\"},\"KeyMaterial\":{\"locationName\":\"keyMaterial\"}}},\"http\":{}},\"CreateNatGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"SubnetId\",\"AllocationId\"],\"members\":{\"SubnetId\":{},\"AllocationId\":{},\"ClientToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"NatGateway\":{\"shape\":\"S40\",\"locationName\":\"natGateway\"},\"ClientToken\":{\"locationName\":\"clientToken\"}}},\"http\":{}},\"CreateNetworkAcl\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcId\":{\"locationName\":\"vpcId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NetworkAcl\":{\"shape\":\"S46\",\"locationName\":\"networkAcl\"}}},\"http\":{}},\"CreateNetworkAclEntry\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkAclId\",\"RuleNumber\",\"Protocol\",\"RuleAction\",\"Egress\",\"CidrBlock\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkAclId\":{\"locationName\":\"networkAclId\"},\"RuleNumber\":{\"locationName\":\"ruleNumber\",\"type\":\"integer\"},\"Protocol\":{\"locationName\":\"protocol\"},\"RuleAction\":{\"locationName\":\"ruleAction\"},\"Egress\":{\"locationName\":\"egress\",\"type\":\"boolean\"},\"CidrBlock\":{\"locationName\":\"cidrBlock\"},\"IcmpTypeCode\":{\"shape\":\"S4a\",\"locationName\":\"Icmp\"},\"PortRange\":{\"shape\":\"S4b\",\"locationName\":\"portRange\"}}},\"http\":{}},\"CreateNetworkInterface\":{\"input\":{\"type\":\"structure\",\"required\":[\"SubnetId\"],\"members\":{\"SubnetId\":{\"locationName\":\"subnetId\"},\"Description\":{\"locationName\":\"description\"},\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"Groups\":{\"shape\":\"S4g\",\"locationName\":\"SecurityGroupId\"},\"PrivateIpAddresses\":{\"shape\":\"S4h\",\"locationName\":\"privateIpAddresses\"},\"SecondaryPrivateIpAddressCount\":{\"locationName\":\"secondaryPrivateIpAddressCount\",\"type\":\"integer\"},\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NetworkInterface\":{\"shape\":\"S4k\",\"locationName\":\"networkInterface\"}}},\"http\":{}},\"CreatePlacementGroup\":{\"input\":{\"type\":\"structure\",\"required\":[\"GroupName\",\"Strategy\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupName\":{\"locationName\":\"groupName\"},\"Strategy\":{\"locationName\":\"strategy\"}}},\"http\":{}},\"CreateReservedInstancesListing\":{\"input\":{\"type\":\"structure\",\"required\":[\"ReservedInstancesId\",\"InstanceCount\",\"PriceSchedules\",\"ClientToken\"],\"members\":{\"ReservedInstancesId\":{\"locationName\":\"reservedInstancesId\"},\"InstanceCount\":{\"locationName\":\"instanceCount\",\"type\":\"integer\"},\"PriceSchedules\":{\"locationName\":\"priceSchedules\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Term\":{\"locationName\":\"term\",\"type\":\"long\"},\"Price\":{\"locationName\":\"price\",\"type\":\"double\"},\"CurrencyCode\":{\"locationName\":\"currencyCode\"}}}},\"ClientToken\":{\"locationName\":\"clientToken\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ReservedInstancesListings\":{\"shape\":\"S1u\",\"locationName\":\"reservedInstancesListingsSet\"}}},\"http\":{}},\"CreateRoute\":{\"input\":{\"type\":\"structure\",\"required\":[\"RouteTableId\",\"DestinationCidrBlock\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"RouteTableId\":{\"locationName\":\"routeTableId\"},\"DestinationCidrBlock\":{\"locationName\":\"destinationCidrBlock\"},\"GatewayId\":{\"locationName\":\"gatewayId\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"VpcPeeringConnectionId\":{\"locationName\":\"vpcPeeringConnectionId\"},\"NatGatewayId\":{\"locationName\":\"natGatewayId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"CreateRouteTable\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcId\":{\"locationName\":\"vpcId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"RouteTable\":{\"shape\":\"S53\",\"locationName\":\"routeTable\"}}},\"http\":{}},\"CreateSecurityGroup\":{\"input\":{\"type\":\"structure\",\"required\":[\"GroupName\",\"Description\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupName\":{},\"Description\":{\"locationName\":\"GroupDescription\"},\"VpcId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"GroupId\":{\"locationName\":\"groupId\"}}},\"http\":{}},\"CreateSnapshot\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VolumeId\":{},\"Description\":{}}},\"output\":{\"shape\":\"S5f\"},\"http\":{}},\"CreateSpotDatafeedSubscription\":{\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Bucket\":{\"locationName\":\"bucket\"},\"Prefix\":{\"locationName\":\"prefix\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"SpotDatafeedSubscription\":{\"shape\":\"S5j\",\"locationName\":\"spotDatafeedSubscription\"}}},\"http\":{}},\"CreateSubnet\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcId\",\"CidrBlock\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcId\":{},\"CidrBlock\":{},\"AvailabilityZone\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Subnet\":{\"shape\":\"S5o\",\"locationName\":\"subnet\"}}},\"http\":{}},\"CreateTags\":{\"input\":{\"type\":\"structure\",\"required\":[\"Resources\",\"Tags\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Resources\":{\"shape\":\"S5r\",\"locationName\":\"ResourceId\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"Tag\"}}},\"http\":{}},\"CreateVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"AvailabilityZone\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Size\":{\"type\":\"integer\"},\"SnapshotId\":{},\"AvailabilityZone\":{},\"VolumeType\":{},\"Iops\":{\"type\":\"integer\"},\"Encrypted\":{\"locationName\":\"encrypted\",\"type\":\"boolean\"},\"KmsKeyId\":{}}},\"output\":{\"shape\":\"S5t\"},\"http\":{}},\"CreateVpc\":{\"input\":{\"type\":\"structure\",\"required\":[\"CidrBlock\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"CidrBlock\":{},\"InstanceTenancy\":{\"locationName\":\"instanceTenancy\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Vpc\":{\"shape\":\"S5z\",\"locationName\":\"vpc\"}}},\"http\":{}},\"CreateVpcEndpoint\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcId\",\"ServiceName\"],\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"VpcId\":{},\"ServiceName\":{},\"PolicyDocument\":{},\"RouteTableIds\":{\"shape\":\"S26\",\"locationName\":\"RouteTableId\"},\"ClientToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpcEndpoint\":{\"shape\":\"S63\",\"locationName\":\"vpcEndpoint\"},\"ClientToken\":{\"locationName\":\"clientToken\"}}},\"http\":{}},\"CreateVpcPeeringConnection\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"PeerVpcId\":{\"locationName\":\"peerVpcId\"},\"PeerOwnerId\":{\"locationName\":\"peerOwnerId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpcPeeringConnection\":{\"shape\":\"S5\",\"locationName\":\"vpcPeeringConnection\"}}},\"http\":{}},\"CreateVpnConnection\":{\"input\":{\"type\":\"structure\",\"required\":[\"Type\",\"CustomerGatewayId\",\"VpnGatewayId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Type\":{},\"CustomerGatewayId\":{},\"VpnGatewayId\":{},\"Options\":{\"locationName\":\"options\",\"type\":\"structure\",\"members\":{\"StaticRoutesOnly\":{\"locationName\":\"staticRoutesOnly\",\"type\":\"boolean\"}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpnConnection\":{\"shape\":\"S6a\",\"locationName\":\"vpnConnection\"}}},\"http\":{}},\"CreateVpnConnectionRoute\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpnConnectionId\",\"DestinationCidrBlock\"],\"members\":{\"VpnConnectionId\":{},\"DestinationCidrBlock\":{}}},\"http\":{}},\"CreateVpnGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"Type\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Type\":{},\"AvailabilityZone\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpnGateway\":{\"shape\":\"S6m\",\"locationName\":\"vpnGateway\"}}},\"http\":{}},\"DeleteCustomerGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"CustomerGatewayId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"CustomerGatewayId\":{}}},\"http\":{}},\"DeleteDhcpOptions\":{\"input\":{\"type\":\"structure\",\"required\":[\"DhcpOptionsId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"DhcpOptionsId\":{}}},\"http\":{}},\"DeleteFlowLogs\":{\"input\":{\"type\":\"structure\",\"required\":[\"FlowLogIds\"],\"members\":{\"FlowLogIds\":{\"shape\":\"S26\",\"locationName\":\"FlowLogId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Unsuccessful\":{\"shape\":\"S38\",\"locationName\":\"unsuccessful\"}}},\"http\":{}},\"DeleteInternetGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"InternetGatewayId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InternetGatewayId\":{\"locationName\":\"internetGatewayId\"}}},\"http\":{}},\"DeleteKeyPair\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyName\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"KeyName\":{}}},\"http\":{}},\"DeleteNatGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"NatGatewayId\"],\"members\":{\"NatGatewayId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"NatGatewayId\":{\"locationName\":\"natGatewayId\"}}},\"http\":{}},\"DeleteNetworkAcl\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkAclId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkAclId\":{\"locationName\":\"networkAclId\"}}},\"http\":{}},\"DeleteNetworkAclEntry\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkAclId\",\"RuleNumber\",\"Egress\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkAclId\":{\"locationName\":\"networkAclId\"},\"RuleNumber\":{\"locationName\":\"ruleNumber\",\"type\":\"integer\"},\"Egress\":{\"locationName\":\"egress\",\"type\":\"boolean\"}}},\"http\":{}},\"DeleteNetworkInterface\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkInterfaceId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"}}},\"http\":{}},\"DeletePlacementGroup\":{\"input\":{\"type\":\"structure\",\"required\":[\"GroupName\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupName\":{\"locationName\":\"groupName\"}}},\"http\":{}},\"DeleteRoute\":{\"input\":{\"type\":\"structure\",\"required\":[\"RouteTableId\",\"DestinationCidrBlock\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"RouteTableId\":{\"locationName\":\"routeTableId\"},\"DestinationCidrBlock\":{\"locationName\":\"destinationCidrBlock\"}}},\"http\":{}},\"DeleteRouteTable\":{\"input\":{\"type\":\"structure\",\"required\":[\"RouteTableId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"RouteTableId\":{\"locationName\":\"routeTableId\"}}},\"http\":{}},\"DeleteSecurityGroup\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupName\":{},\"GroupId\":{}}},\"http\":{}},\"DeleteSnapshot\":{\"input\":{\"type\":\"structure\",\"required\":[\"SnapshotId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SnapshotId\":{}}},\"http\":{}},\"DeleteSpotDatafeedSubscription\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"}}},\"http\":{}},\"DeleteSubnet\":{\"input\":{\"type\":\"structure\",\"required\":[\"SubnetId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SubnetId\":{}}},\"http\":{}},\"DeleteTags\":{\"input\":{\"type\":\"structure\",\"required\":[\"Resources\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Resources\":{\"shape\":\"S5r\",\"locationName\":\"resourceId\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tag\"}}},\"http\":{}},\"DeleteVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VolumeId\":{}}},\"http\":{}},\"DeleteVpc\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcId\":{}}},\"http\":{}},\"DeleteVpcEndpoints\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcEndpointIds\"],\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"VpcEndpointIds\":{\"shape\":\"S26\",\"locationName\":\"VpcEndpointId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Unsuccessful\":{\"shape\":\"S38\",\"locationName\":\"unsuccessful\"}}},\"http\":{}},\"DeleteVpcPeeringConnection\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcPeeringConnectionId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcPeeringConnectionId\":{\"locationName\":\"vpcPeeringConnectionId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"DeleteVpnConnection\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpnConnectionId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpnConnectionId\":{}}},\"http\":{}},\"DeleteVpnConnectionRoute\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpnConnectionId\",\"DestinationCidrBlock\"],\"members\":{\"VpnConnectionId\":{},\"DestinationCidrBlock\":{}}},\"http\":{}},\"DeleteVpnGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpnGatewayId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpnGatewayId\":{}}},\"http\":{}},\"DeregisterImage\":{\"input\":{\"type\":\"structure\",\"required\":[\"ImageId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ImageId\":{}}},\"http\":{}},\"DescribeAccountAttributes\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"AttributeNames\":{\"locationName\":\"attributeName\",\"type\":\"list\",\"member\":{\"locationName\":\"attributeName\"}}}},\"output\":{\"type\":\"structure\",\"members\":{\"AccountAttributes\":{\"locationName\":\"accountAttributeSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"AttributeName\":{\"locationName\":\"attributeName\"},\"AttributeValues\":{\"locationName\":\"attributeValueSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"AttributeValue\":{\"locationName\":\"attributeValue\"}}}}}}}}},\"http\":{}},\"DescribeAddresses\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"PublicIps\":{\"locationName\":\"PublicIp\",\"type\":\"list\",\"member\":{\"locationName\":\"PublicIp\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"AllocationIds\":{\"locationName\":\"AllocationId\",\"type\":\"list\",\"member\":{\"locationName\":\"AllocationId\"}}}},\"output\":{\"type\":\"structure\",\"members\":{\"Addresses\":{\"locationName\":\"addressesSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"PublicIp\":{\"locationName\":\"publicIp\"},\"AllocationId\":{\"locationName\":\"allocationId\"},\"AssociationId\":{\"locationName\":\"associationId\"},\"Domain\":{\"locationName\":\"domain\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"NetworkInterfaceOwnerId\":{\"locationName\":\"networkInterfaceOwnerId\"},\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"}}}}}},\"http\":{}},\"DescribeAvailabilityZones\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ZoneNames\":{\"locationName\":\"ZoneName\",\"type\":\"list\",\"member\":{\"locationName\":\"ZoneName\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"AvailabilityZones\":{\"locationName\":\"availabilityZoneInfo\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ZoneName\":{\"locationName\":\"zoneName\"},\"State\":{\"locationName\":\"zoneState\"},\"RegionName\":{\"locationName\":\"regionName\"},\"Messages\":{\"locationName\":\"messageSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Message\":{\"locationName\":\"message\"}}}}}}}}},\"http\":{}},\"DescribeBundleTasks\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"BundleIds\":{\"locationName\":\"BundleId\",\"type\":\"list\",\"member\":{\"locationName\":\"BundleId\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"BundleTasks\":{\"locationName\":\"bundleInstanceTasksSet\",\"type\":\"list\",\"member\":{\"shape\":\"S1j\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeClassicLinkInstances\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceIds\":{\"shape\":\"S8a\",\"locationName\":\"InstanceId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"NextToken\":{\"locationName\":\"nextToken\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Instances\":{\"locationName\":\"instancesSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"Groups\":{\"shape\":\"S4m\",\"locationName\":\"groupSet\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeConversionTasks\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"filter\"},\"ConversionTaskIds\":{\"locationName\":\"conversionTaskId\",\"type\":\"list\",\"member\":{\"locationName\":\"item\"}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ConversionTasks\":{\"locationName\":\"conversionTasks\",\"type\":\"list\",\"member\":{\"shape\":\"S8i\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeCustomerGateways\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"CustomerGatewayIds\":{\"locationName\":\"CustomerGatewayId\",\"type\":\"list\",\"member\":{\"locationName\":\"CustomerGatewayId\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CustomerGateways\":{\"locationName\":\"customerGatewaySet\",\"type\":\"list\",\"member\":{\"shape\":\"S2u\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeDhcpOptions\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"DhcpOptionsIds\":{\"locationName\":\"DhcpOptionsId\",\"type\":\"list\",\"member\":{\"locationName\":\"DhcpOptionsId\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DhcpOptions\":{\"locationName\":\"dhcpOptionsSet\",\"type\":\"list\",\"member\":{\"shape\":\"S2z\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeExportTasks\":{\"input\":{\"type\":\"structure\",\"members\":{\"ExportTaskIds\":{\"locationName\":\"exportTaskId\",\"type\":\"list\",\"member\":{\"locationName\":\"ExportTaskId\"}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ExportTasks\":{\"locationName\":\"exportTaskSet\",\"type\":\"list\",\"member\":{\"shape\":\"S3n\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeFlowLogs\":{\"input\":{\"type\":\"structure\",\"members\":{\"FlowLogIds\":{\"shape\":\"S26\",\"locationName\":\"FlowLogId\"},\"Filter\":{\"shape\":\"S7r\"},\"NextToken\":{},\"MaxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"FlowLogs\":{\"locationName\":\"flowLogSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"CreationTime\":{\"locationName\":\"creationTime\",\"type\":\"timestamp\"},\"FlowLogId\":{\"locationName\":\"flowLogId\"},\"FlowLogStatus\":{\"locationName\":\"flowLogStatus\"},\"ResourceId\":{\"locationName\":\"resourceId\"},\"TrafficType\":{\"locationName\":\"trafficType\"},\"LogGroupName\":{\"locationName\":\"logGroupName\"},\"DeliverLogsStatus\":{\"locationName\":\"deliverLogsStatus\"},\"DeliverLogsErrorMessage\":{\"locationName\":\"deliverLogsErrorMessage\"},\"DeliverLogsPermissionArn\":{\"locationName\":\"deliverLogsPermissionArn\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeHosts\":{\"input\":{\"type\":\"structure\",\"members\":{\"HostIds\":{\"shape\":\"S98\",\"locationName\":\"hostId\"},\"NextToken\":{\"locationName\":\"nextToken\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"},\"Filter\":{\"shape\":\"S7r\",\"locationName\":\"filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Hosts\":{\"locationName\":\"hostSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"HostId\":{\"locationName\":\"hostId\"},\"AutoPlacement\":{\"locationName\":\"autoPlacement\"},\"HostReservationId\":{\"locationName\":\"hostReservationId\"},\"ClientToken\":{\"locationName\":\"clientToken\"},\"HostProperties\":{\"locationName\":\"hostProperties\",\"type\":\"structure\",\"members\":{\"Sockets\":{\"locationName\":\"sockets\",\"type\":\"integer\"},\"Cores\":{\"locationName\":\"cores\",\"type\":\"integer\"},\"TotalVCpus\":{\"locationName\":\"totalVCpus\",\"type\":\"integer\"},\"InstanceType\":{\"locationName\":\"instanceType\"}}},\"State\":{\"locationName\":\"state\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"Instances\":{\"locationName\":\"instances\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"InstanceType\":{\"locationName\":\"instanceType\"}}}},\"AvailableCapacity\":{\"locationName\":\"availableCapacity\",\"type\":\"structure\",\"members\":{\"AvailableInstanceCapacity\":{\"locationName\":\"availableInstanceCapacity\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceType\":{\"locationName\":\"instanceType\"},\"AvailableCapacity\":{\"locationName\":\"availableCapacity\",\"type\":\"integer\"},\"TotalCapacity\":{\"locationName\":\"totalCapacity\",\"type\":\"integer\"}}}},\"AvailableVCpus\":{\"locationName\":\"availableVCpus\",\"type\":\"integer\"}}}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeIdFormat\":{\"input\":{\"type\":\"structure\",\"members\":{\"Resource\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Statuses\":{\"locationName\":\"statusSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Resource\":{\"locationName\":\"resource\"},\"UseLongIds\":{\"locationName\":\"useLongIds\",\"type\":\"boolean\"},\"Deadline\":{\"locationName\":\"deadline\",\"type\":\"timestamp\"}}}}}},\"http\":{}},\"DescribeImageAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"ImageId\",\"Attribute\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ImageId\":{},\"Attribute\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ImageId\":{\"locationName\":\"imageId\"},\"LaunchPermissions\":{\"shape\":\"S9q\",\"locationName\":\"launchPermission\"},\"ProductCodes\":{\"shape\":\"S9t\",\"locationName\":\"productCodes\"},\"KernelId\":{\"shape\":\"S33\",\"locationName\":\"kernel\"},\"RamdiskId\":{\"shape\":\"S33\",\"locationName\":\"ramdisk\"},\"Description\":{\"shape\":\"S33\",\"locationName\":\"description\"},\"SriovNetSupport\":{\"shape\":\"S33\",\"locationName\":\"sriovNetSupport\"},\"BlockDeviceMappings\":{\"shape\":\"S9w\",\"locationName\":\"blockDeviceMapping\"}}},\"http\":{}},\"DescribeImages\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ImageIds\":{\"locationName\":\"ImageId\",\"type\":\"list\",\"member\":{\"locationName\":\"ImageId\"}},\"Owners\":{\"shape\":\"S9z\",\"locationName\":\"Owner\"},\"ExecutableUsers\":{\"locationName\":\"ExecutableBy\",\"type\":\"list\",\"member\":{\"locationName\":\"ExecutableBy\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Images\":{\"locationName\":\"imagesSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ImageId\":{\"locationName\":\"imageId\"},\"ImageLocation\":{\"locationName\":\"imageLocation\"},\"State\":{\"locationName\":\"imageState\"},\"OwnerId\":{\"locationName\":\"imageOwnerId\"},\"CreationDate\":{\"locationName\":\"creationDate\"},\"Public\":{\"locationName\":\"isPublic\",\"type\":\"boolean\"},\"ProductCodes\":{\"shape\":\"S9t\",\"locationName\":\"productCodes\"},\"Architecture\":{\"locationName\":\"architecture\"},\"ImageType\":{\"locationName\":\"imageType\"},\"KernelId\":{\"locationName\":\"kernelId\"},\"RamdiskId\":{\"locationName\":\"ramdiskId\"},\"Platform\":{\"locationName\":\"platform\"},\"SriovNetSupport\":{\"locationName\":\"sriovNetSupport\"},\"StateReason\":{\"shape\":\"Sa7\",\"locationName\":\"stateReason\"},\"ImageOwnerAlias\":{\"locationName\":\"imageOwnerAlias\"},\"Name\":{\"locationName\":\"name\"},\"Description\":{\"locationName\":\"description\"},\"RootDeviceType\":{\"locationName\":\"rootDeviceType\"},\"RootDeviceName\":{\"locationName\":\"rootDeviceName\"},\"BlockDeviceMappings\":{\"shape\":\"S9w\",\"locationName\":\"blockDeviceMapping\"},\"VirtualizationType\":{\"locationName\":\"virtualizationType\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"Hypervisor\":{\"locationName\":\"hypervisor\"}}}}}},\"http\":{}},\"DescribeImportImageTasks\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"ImportTaskIds\":{\"shape\":\"Sac\",\"locationName\":\"ImportTaskId\"},\"NextToken\":{},\"MaxResults\":{\"type\":\"integer\"},\"Filters\":{\"shape\":\"S7r\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ImportImageTasks\":{\"locationName\":\"importImageTaskSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ImportTaskId\":{\"locationName\":\"importTaskId\"},\"Architecture\":{\"locationName\":\"architecture\"},\"LicenseType\":{\"locationName\":\"licenseType\"},\"Platform\":{\"locationName\":\"platform\"},\"Hypervisor\":{\"locationName\":\"hypervisor\"},\"Description\":{\"locationName\":\"description\"},\"SnapshotDetails\":{\"shape\":\"Sag\",\"locationName\":\"snapshotDetailSet\"},\"ImageId\":{\"locationName\":\"imageId\"},\"Progress\":{\"locationName\":\"progress\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"Status\":{\"locationName\":\"status\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeImportSnapshotTasks\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"ImportTaskIds\":{\"shape\":\"Sac\",\"locationName\":\"ImportTaskId\"},\"NextToken\":{},\"MaxResults\":{\"type\":\"integer\"},\"Filters\":{\"shape\":\"S7r\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ImportSnapshotTasks\":{\"locationName\":\"importSnapshotTaskSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ImportTaskId\":{\"locationName\":\"importTaskId\"},\"SnapshotTaskDetail\":{\"shape\":\"San\",\"locationName\":\"snapshotTaskDetail\"},\"Description\":{\"locationName\":\"description\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeInstanceAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\",\"Attribute\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"Attribute\":{\"locationName\":\"attribute\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"InstanceType\":{\"shape\":\"S33\",\"locationName\":\"instanceType\"},\"KernelId\":{\"shape\":\"S33\",\"locationName\":\"kernel\"},\"RamdiskId\":{\"shape\":\"S33\",\"locationName\":\"ramdisk\"},\"UserData\":{\"shape\":\"S33\",\"locationName\":\"userData\"},\"DisableApiTermination\":{\"shape\":\"Sar\",\"locationName\":\"disableApiTermination\"},\"InstanceInitiatedShutdownBehavior\":{\"shape\":\"S33\",\"locationName\":\"instanceInitiatedShutdownBehavior\"},\"RootDeviceName\":{\"shape\":\"S33\",\"locationName\":\"rootDeviceName\"},\"BlockDeviceMappings\":{\"shape\":\"Sas\",\"locationName\":\"blockDeviceMapping\"},\"ProductCodes\":{\"shape\":\"S9t\",\"locationName\":\"productCodes\"},\"EbsOptimized\":{\"shape\":\"Sar\",\"locationName\":\"ebsOptimized\"},\"SriovNetSupport\":{\"shape\":\"S33\",\"locationName\":\"sriovNetSupport\"},\"SourceDestCheck\":{\"shape\":\"Sar\",\"locationName\":\"sourceDestCheck\"},\"Groups\":{\"shape\":\"S4m\",\"locationName\":\"groupSet\"}}},\"http\":{}},\"DescribeInstanceStatus\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceIds\":{\"shape\":\"S8a\",\"locationName\":\"InstanceId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"NextToken\":{},\"MaxResults\":{\"type\":\"integer\"},\"IncludeAllInstances\":{\"locationName\":\"includeAllInstances\",\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceStatuses\":{\"locationName\":\"instanceStatusSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"Events\":{\"locationName\":\"eventsSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Code\":{\"locationName\":\"code\"},\"Description\":{\"locationName\":\"description\"},\"NotBefore\":{\"locationName\":\"notBefore\",\"type\":\"timestamp\"},\"NotAfter\":{\"locationName\":\"notAfter\",\"type\":\"timestamp\"}}}},\"InstanceState\":{\"shape\":\"Sb2\",\"locationName\":\"instanceState\"},\"SystemStatus\":{\"shape\":\"Sb4\",\"locationName\":\"systemStatus\"},\"InstanceStatus\":{\"shape\":\"Sb4\",\"locationName\":\"instanceStatus\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeInstances\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceIds\":{\"shape\":\"S8a\",\"locationName\":\"InstanceId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"NextToken\":{\"locationName\":\"nextToken\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Reservations\":{\"locationName\":\"reservationSet\",\"type\":\"list\",\"member\":{\"shape\":\"Sbd\",\"locationName\":\"item\"}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeInternetGateways\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InternetGatewayIds\":{\"shape\":\"S26\",\"locationName\":\"internetGatewayId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"InternetGateways\":{\"locationName\":\"internetGatewaySet\",\"type\":\"list\",\"member\":{\"shape\":\"S3t\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeKeyPairs\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"KeyNames\":{\"locationName\":\"KeyName\",\"type\":\"list\",\"member\":{\"locationName\":\"KeyName\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"KeyPairs\":{\"locationName\":\"keySet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"KeyName\":{\"locationName\":\"keyName\"},\"KeyFingerprint\":{\"locationName\":\"keyFingerprint\"}}}}}},\"http\":{}},\"DescribeMovingAddresses\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"PublicIps\":{\"shape\":\"S26\",\"locationName\":\"publicIp\"},\"NextToken\":{\"locationName\":\"nextToken\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"filter\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"MovingAddressStatuses\":{\"locationName\":\"movingAddressStatusSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"PublicIp\":{\"locationName\":\"publicIp\"},\"MoveStatus\":{\"locationName\":\"moveStatus\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeNatGateways\":{\"input\":{\"type\":\"structure\",\"members\":{\"NatGatewayIds\":{\"shape\":\"S26\",\"locationName\":\"NatGatewayId\"},\"Filter\":{\"shape\":\"S7r\"},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"NatGateways\":{\"locationName\":\"natGatewaySet\",\"type\":\"list\",\"member\":{\"shape\":\"S40\",\"locationName\":\"item\"}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeNetworkAcls\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkAclIds\":{\"shape\":\"S26\",\"locationName\":\"NetworkAclId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NetworkAcls\":{\"locationName\":\"networkAclSet\",\"type\":\"list\",\"member\":{\"shape\":\"S46\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeNetworkInterfaceAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkInterfaceId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"Attribute\":{\"locationName\":\"attribute\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"Description\":{\"shape\":\"S33\",\"locationName\":\"description\"},\"SourceDestCheck\":{\"shape\":\"Sar\",\"locationName\":\"sourceDestCheck\"},\"Groups\":{\"shape\":\"S4m\",\"locationName\":\"groupSet\"},\"Attachment\":{\"shape\":\"S4o\",\"locationName\":\"attachment\"}}},\"http\":{}},\"DescribeNetworkInterfaces\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkInterfaceIds\":{\"locationName\":\"NetworkInterfaceId\",\"type\":\"list\",\"member\":{\"locationName\":\"item\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NetworkInterfaces\":{\"locationName\":\"networkInterfaceSet\",\"type\":\"list\",\"member\":{\"shape\":\"S4k\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribePlacementGroups\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupNames\":{\"locationName\":\"groupName\",\"type\":\"list\",\"member\":{}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"PlacementGroups\":{\"locationName\":\"placementGroupSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"GroupName\":{\"locationName\":\"groupName\"},\"Strategy\":{\"locationName\":\"strategy\"},\"State\":{\"locationName\":\"state\"}}}}}},\"http\":{}},\"DescribePrefixLists\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"PrefixListIds\":{\"shape\":\"S26\",\"locationName\":\"PrefixListId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"PrefixLists\":{\"locationName\":\"prefixListSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"PrefixListId\":{\"locationName\":\"prefixListId\"},\"PrefixListName\":{\"locationName\":\"prefixListName\"},\"Cidrs\":{\"shape\":\"S26\",\"locationName\":\"cidrSet\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeRegions\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"RegionNames\":{\"locationName\":\"RegionName\",\"type\":\"list\",\"member\":{\"locationName\":\"RegionName\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Regions\":{\"locationName\":\"regionInfo\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"RegionName\":{\"locationName\":\"regionName\"},\"Endpoint\":{\"locationName\":\"regionEndpoint\"}}}}}},\"http\":{}},\"DescribeReservedInstances\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ReservedInstancesIds\":{\"shape\":\"Scy\",\"locationName\":\"ReservedInstancesId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"OfferingType\":{\"locationName\":\"offeringType\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ReservedInstances\":{\"locationName\":\"reservedInstancesSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ReservedInstancesId\":{\"locationName\":\"reservedInstancesId\"},\"InstanceType\":{\"locationName\":\"instanceType\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"Start\":{\"locationName\":\"start\",\"type\":\"timestamp\"},\"End\":{\"locationName\":\"end\",\"type\":\"timestamp\"},\"Duration\":{\"locationName\":\"duration\",\"type\":\"long\"},\"UsagePrice\":{\"locationName\":\"usagePrice\",\"type\":\"float\"},\"FixedPrice\":{\"locationName\":\"fixedPrice\",\"type\":\"float\"},\"InstanceCount\":{\"locationName\":\"instanceCount\",\"type\":\"integer\"},\"ProductDescription\":{\"locationName\":\"productDescription\"},\"State\":{\"locationName\":\"state\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"InstanceTenancy\":{\"locationName\":\"instanceTenancy\"},\"CurrencyCode\":{\"locationName\":\"currencyCode\"},\"OfferingType\":{\"locationName\":\"offeringType\"},\"RecurringCharges\":{\"shape\":\"Sd6\",\"locationName\":\"recurringCharges\"}}}}}},\"http\":{}},\"DescribeReservedInstancesListings\":{\"input\":{\"type\":\"structure\",\"members\":{\"ReservedInstancesId\":{\"locationName\":\"reservedInstancesId\"},\"ReservedInstancesListingId\":{\"locationName\":\"reservedInstancesListingId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"filters\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ReservedInstancesListings\":{\"shape\":\"S1u\",\"locationName\":\"reservedInstancesListingsSet\"}}},\"http\":{}},\"DescribeReservedInstancesModifications\":{\"input\":{\"type\":\"structure\",\"members\":{\"ReservedInstancesModificationIds\":{\"locationName\":\"ReservedInstancesModificationId\",\"type\":\"list\",\"member\":{\"locationName\":\"ReservedInstancesModificationId\"}},\"NextToken\":{\"locationName\":\"nextToken\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ReservedInstancesModifications\":{\"locationName\":\"reservedInstancesModificationsSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ReservedInstancesModificationId\":{\"locationName\":\"reservedInstancesModificationId\"},\"ReservedInstancesIds\":{\"locationName\":\"reservedInstancesSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ReservedInstancesId\":{\"locationName\":\"reservedInstancesId\"}}}},\"ModificationResults\":{\"locationName\":\"modificationResultSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ReservedInstancesId\":{\"locationName\":\"reservedInstancesId\"},\"TargetConfiguration\":{\"shape\":\"Sdk\",\"locationName\":\"targetConfiguration\"}}}},\"CreateDate\":{\"locationName\":\"createDate\",\"type\":\"timestamp\"},\"UpdateDate\":{\"locationName\":\"updateDate\",\"type\":\"timestamp\"},\"EffectiveDate\":{\"locationName\":\"effectiveDate\",\"type\":\"timestamp\"},\"Status\":{\"locationName\":\"status\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"ClientToken\":{\"locationName\":\"clientToken\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeReservedInstancesOfferings\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ReservedInstancesOfferingIds\":{\"locationName\":\"ReservedInstancesOfferingId\",\"type\":\"list\",\"member\":{}},\"InstanceType\":{},\"AvailabilityZone\":{},\"ProductDescription\":{},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"InstanceTenancy\":{\"locationName\":\"instanceTenancy\"},\"OfferingType\":{\"locationName\":\"offeringType\"},\"NextToken\":{\"locationName\":\"nextToken\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"},\"IncludeMarketplace\":{\"type\":\"boolean\"},\"MinDuration\":{\"type\":\"long\"},\"MaxDuration\":{\"type\":\"long\"},\"MaxInstanceCount\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ReservedInstancesOfferings\":{\"locationName\":\"reservedInstancesOfferingsSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ReservedInstancesOfferingId\":{\"locationName\":\"reservedInstancesOfferingId\"},\"InstanceType\":{\"locationName\":\"instanceType\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"Duration\":{\"locationName\":\"duration\",\"type\":\"long\"},\"UsagePrice\":{\"locationName\":\"usagePrice\",\"type\":\"float\"},\"FixedPrice\":{\"locationName\":\"fixedPrice\",\"type\":\"float\"},\"ProductDescription\":{\"locationName\":\"productDescription\"},\"InstanceTenancy\":{\"locationName\":\"instanceTenancy\"},\"CurrencyCode\":{\"locationName\":\"currencyCode\"},\"OfferingType\":{\"locationName\":\"offeringType\"},\"RecurringCharges\":{\"shape\":\"Sd6\",\"locationName\":\"recurringCharges\"},\"Marketplace\":{\"locationName\":\"marketplace\",\"type\":\"boolean\"},\"PricingDetails\":{\"locationName\":\"pricingDetailsSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Price\":{\"locationName\":\"price\",\"type\":\"double\"},\"Count\":{\"locationName\":\"count\",\"type\":\"integer\"}}}}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeRouteTables\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"RouteTableIds\":{\"shape\":\"S26\",\"locationName\":\"RouteTableId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"RouteTables\":{\"locationName\":\"routeTableSet\",\"type\":\"list\",\"member\":{\"shape\":\"S53\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeScheduledInstanceAvailability\":{\"input\":{\"type\":\"structure\",\"required\":[\"Recurrence\",\"FirstSlotStartTimeRange\"],\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"Recurrence\":{\"type\":\"structure\",\"members\":{\"Frequency\":{},\"Interval\":{\"type\":\"integer\"},\"OccurrenceDays\":{\"locationName\":\"OccurrenceDay\",\"type\":\"list\",\"member\":{\"locationName\":\"OccurenceDay\",\"type\":\"integer\"}},\"OccurrenceRelativeToEnd\":{\"type\":\"boolean\"},\"OccurrenceUnit\":{}}},\"FirstSlotStartTimeRange\":{\"type\":\"structure\",\"required\":[\"EarliestTime\",\"LatestTime\"],\"members\":{\"EarliestTime\":{\"type\":\"timestamp\"},\"LatestTime\":{\"type\":\"timestamp\"}}},\"MinSlotDurationInHours\":{\"type\":\"integer\"},\"MaxSlotDurationInHours\":{\"type\":\"integer\"},\"NextToken\":{},\"MaxResults\":{\"type\":\"integer\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextToken\":{\"locationName\":\"nextToken\"},\"ScheduledInstanceAvailabilitySet\":{\"locationName\":\"scheduledInstanceAvailabilitySet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceType\":{\"locationName\":\"instanceType\"},\"Platform\":{\"locationName\":\"platform\"},\"NetworkPlatform\":{\"locationName\":\"networkPlatform\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"PurchaseToken\":{\"locationName\":\"purchaseToken\"},\"SlotDurationInHours\":{\"locationName\":\"slotDurationInHours\",\"type\":\"integer\"},\"Recurrence\":{\"shape\":\"Se2\",\"locationName\":\"recurrence\"},\"FirstSlotStartTime\":{\"locationName\":\"firstSlotStartTime\",\"type\":\"timestamp\"},\"HourlyPrice\":{\"locationName\":\"hourlyPrice\"},\"TotalScheduledInstanceHours\":{\"locationName\":\"totalScheduledInstanceHours\",\"type\":\"integer\"},\"AvailableInstanceCount\":{\"locationName\":\"availableInstanceCount\",\"type\":\"integer\"},\"MinTermDurationInDays\":{\"locationName\":\"minTermDurationInDays\",\"type\":\"integer\"},\"MaxTermDurationInDays\":{\"locationName\":\"maxTermDurationInDays\",\"type\":\"integer\"}}}}}},\"http\":{}},\"DescribeScheduledInstances\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"ScheduledInstanceIds\":{\"locationName\":\"ScheduledInstanceId\",\"type\":\"list\",\"member\":{\"locationName\":\"ScheduledInstanceId\"}},\"SlotStartTimeRange\":{\"type\":\"structure\",\"members\":{\"EarliestTime\":{\"type\":\"timestamp\"},\"LatestTime\":{\"type\":\"timestamp\"}}},\"NextToken\":{},\"MaxResults\":{\"type\":\"integer\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextToken\":{\"locationName\":\"nextToken\"},\"ScheduledInstanceSet\":{\"locationName\":\"scheduledInstanceSet\",\"type\":\"list\",\"member\":{\"shape\":\"Se9\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeSecurityGroups\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupNames\":{\"shape\":\"Seb\",\"locationName\":\"GroupName\"},\"GroupIds\":{\"shape\":\"Ss\",\"locationName\":\"GroupId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"SecurityGroups\":{\"locationName\":\"securityGroupInfo\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"OwnerId\":{\"locationName\":\"ownerId\"},\"GroupName\":{\"locationName\":\"groupName\"},\"GroupId\":{\"locationName\":\"groupId\"},\"Description\":{\"locationName\":\"groupDescription\"},\"IpPermissions\":{\"shape\":\"S15\",\"locationName\":\"ipPermissions\"},\"IpPermissionsEgress\":{\"shape\":\"S15\",\"locationName\":\"ipPermissionsEgress\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}}}}},\"http\":{}},\"DescribeSnapshotAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"SnapshotId\",\"Attribute\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SnapshotId\":{},\"Attribute\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"SnapshotId\":{\"locationName\":\"snapshotId\"},\"CreateVolumePermissions\":{\"shape\":\"Sei\",\"locationName\":\"createVolumePermission\"},\"ProductCodes\":{\"shape\":\"S9t\",\"locationName\":\"productCodes\"}}},\"http\":{}},\"DescribeSnapshots\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SnapshotIds\":{\"locationName\":\"SnapshotId\",\"type\":\"list\",\"member\":{\"locationName\":\"SnapshotId\"}},\"OwnerIds\":{\"shape\":\"S9z\",\"locationName\":\"Owner\"},\"RestorableByUserIds\":{\"locationName\":\"RestorableBy\",\"type\":\"list\",\"member\":{}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"NextToken\":{},\"MaxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Snapshots\":{\"locationName\":\"snapshotSet\",\"type\":\"list\",\"member\":{\"shape\":\"S5f\",\"locationName\":\"item\"}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeSpotDatafeedSubscription\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"SpotDatafeedSubscription\":{\"shape\":\"S5j\",\"locationName\":\"spotDatafeedSubscription\"}}},\"http\":{}},\"DescribeSpotFleetInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"SpotFleetRequestId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SpotFleetRequestId\":{\"locationName\":\"spotFleetRequestId\"},\"NextToken\":{\"locationName\":\"nextToken\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"SpotFleetRequestId\",\"ActiveInstances\"],\"members\":{\"SpotFleetRequestId\":{\"locationName\":\"spotFleetRequestId\"},\"ActiveInstances\":{\"locationName\":\"activeInstanceSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceType\":{\"locationName\":\"instanceType\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"SpotInstanceRequestId\":{\"locationName\":\"spotInstanceRequestId\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeSpotFleetRequestHistory\":{\"input\":{\"type\":\"structure\",\"required\":[\"SpotFleetRequestId\",\"StartTime\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SpotFleetRequestId\":{\"locationName\":\"spotFleetRequestId\"},\"EventType\":{\"locationName\":\"eventType\"},\"StartTime\":{\"locationName\":\"startTime\",\"type\":\"timestamp\"},\"NextToken\":{\"locationName\":\"nextToken\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"SpotFleetRequestId\",\"StartTime\",\"LastEvaluatedTime\",\"HistoryRecords\"],\"members\":{\"SpotFleetRequestId\":{\"locationName\":\"spotFleetRequestId\"},\"StartTime\":{\"locationName\":\"startTime\",\"type\":\"timestamp\"},\"LastEvaluatedTime\":{\"locationName\":\"lastEvaluatedTime\",\"type\":\"timestamp\"},\"HistoryRecords\":{\"locationName\":\"historyRecordSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"required\":[\"Timestamp\",\"EventType\",\"EventInformation\"],\"members\":{\"Timestamp\":{\"locationName\":\"timestamp\",\"type\":\"timestamp\"},\"EventType\":{\"locationName\":\"eventType\"},\"EventInformation\":{\"locationName\":\"eventInformation\",\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"EventSubType\":{\"locationName\":\"eventSubType\"},\"EventDescription\":{\"locationName\":\"eventDescription\"}}}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeSpotFleetRequests\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SpotFleetRequestIds\":{\"shape\":\"S26\",\"locationName\":\"spotFleetRequestId\"},\"NextToken\":{\"locationName\":\"nextToken\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"SpotFleetRequestConfigs\"],\"members\":{\"SpotFleetRequestConfigs\":{\"locationName\":\"spotFleetRequestConfigSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"required\":[\"SpotFleetRequestId\",\"SpotFleetRequestState\",\"SpotFleetRequestConfig\",\"CreateTime\"],\"members\":{\"SpotFleetRequestId\":{\"locationName\":\"spotFleetRequestId\"},\"SpotFleetRequestState\":{\"locationName\":\"spotFleetRequestState\"},\"SpotFleetRequestConfig\":{\"shape\":\"Sf5\",\"locationName\":\"spotFleetRequestConfig\"},\"CreateTime\":{\"locationName\":\"createTime\",\"type\":\"timestamp\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeSpotInstanceRequests\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SpotInstanceRequestIds\":{\"shape\":\"S2g\",\"locationName\":\"SpotInstanceRequestId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"SpotInstanceRequests\":{\"shape\":\"Sfh\",\"locationName\":\"spotInstanceRequestSet\"}}},\"http\":{}},\"DescribeSpotPriceHistory\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"StartTime\":{\"locationName\":\"startTime\",\"type\":\"timestamp\"},\"EndTime\":{\"locationName\":\"endTime\",\"type\":\"timestamp\"},\"InstanceTypes\":{\"locationName\":\"InstanceType\",\"type\":\"list\",\"member\":{}},\"ProductDescriptions\":{\"locationName\":\"ProductDescription\",\"type\":\"list\",\"member\":{}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"SpotPriceHistory\":{\"locationName\":\"spotPriceHistorySet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceType\":{\"locationName\":\"instanceType\"},\"ProductDescription\":{\"locationName\":\"productDescription\"},\"SpotPrice\":{\"locationName\":\"spotPrice\"},\"Timestamp\":{\"locationName\":\"timestamp\",\"type\":\"timestamp\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeSubnets\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SubnetIds\":{\"locationName\":\"SubnetId\",\"type\":\"list\",\"member\":{\"locationName\":\"SubnetId\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Subnets\":{\"locationName\":\"subnetSet\",\"type\":\"list\",\"member\":{\"shape\":\"S5o\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeTags\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Tags\":{\"locationName\":\"tagSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ResourceId\":{\"locationName\":\"resourceId\"},\"ResourceType\":{\"locationName\":\"resourceType\"},\"Key\":{\"locationName\":\"key\"},\"Value\":{\"locationName\":\"value\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeVolumeAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VolumeId\":{},\"Attribute\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"VolumeId\":{\"locationName\":\"volumeId\"},\"AutoEnableIO\":{\"shape\":\"Sar\",\"locationName\":\"autoEnableIO\"},\"ProductCodes\":{\"shape\":\"S9t\",\"locationName\":\"productCodes\"}}},\"http\":{}},\"DescribeVolumeStatus\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VolumeIds\":{\"shape\":\"Sg7\",\"locationName\":\"VolumeId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"NextToken\":{},\"MaxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"VolumeStatuses\":{\"locationName\":\"volumeStatusSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"VolumeId\":{\"locationName\":\"volumeId\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"VolumeStatus\":{\"locationName\":\"volumeStatus\",\"type\":\"structure\",\"members\":{\"Status\":{\"locationName\":\"status\"},\"Details\":{\"locationName\":\"details\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Name\":{\"locationName\":\"name\"},\"Status\":{\"locationName\":\"status\"}}}}}},\"Events\":{\"locationName\":\"eventsSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"EventType\":{\"locationName\":\"eventType\"},\"Description\":{\"locationName\":\"description\"},\"NotBefore\":{\"locationName\":\"notBefore\",\"type\":\"timestamp\"},\"NotAfter\":{\"locationName\":\"notAfter\",\"type\":\"timestamp\"},\"EventId\":{\"locationName\":\"eventId\"}}}},\"Actions\":{\"locationName\":\"actionsSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Code\":{\"locationName\":\"code\"},\"Description\":{\"locationName\":\"description\"},\"EventType\":{\"locationName\":\"eventType\"},\"EventId\":{\"locationName\":\"eventId\"}}}}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeVolumes\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VolumeIds\":{\"shape\":\"Sg7\",\"locationName\":\"VolumeId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"NextToken\":{\"locationName\":\"nextToken\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Volumes\":{\"locationName\":\"volumeSet\",\"type\":\"list\",\"member\":{\"shape\":\"S5t\",\"locationName\":\"item\"}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeVpcAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcId\",\"Attribute\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcId\":{},\"Attribute\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpcId\":{\"locationName\":\"vpcId\"},\"EnableDnsSupport\":{\"shape\":\"Sar\",\"locationName\":\"enableDnsSupport\"},\"EnableDnsHostnames\":{\"shape\":\"Sar\",\"locationName\":\"enableDnsHostnames\"}}},\"http\":{}},\"DescribeVpcClassicLink\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcIds\":{\"shape\":\"Sgr\",\"locationName\":\"VpcId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Vpcs\":{\"locationName\":\"vpcSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"VpcId\":{\"locationName\":\"vpcId\"},\"ClassicLinkEnabled\":{\"locationName\":\"classicLinkEnabled\",\"type\":\"boolean\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}}}}},\"http\":{}},\"DescribeVpcClassicLinkDnsSupport\":{\"input\":{\"type\":\"structure\",\"members\":{\"VpcIds\":{\"shape\":\"Sgr\"},\"MaxResults\":{\"locationName\":\"maxResults\",\"type\":\"integer\"},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Vpcs\":{\"locationName\":\"vpcs\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"VpcId\":{\"locationName\":\"vpcId\"},\"ClassicLinkDnsSupported\":{\"locationName\":\"classicLinkDnsSupported\",\"type\":\"boolean\"}}}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeVpcEndpointServices\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ServiceNames\":{\"shape\":\"S26\",\"locationName\":\"serviceNameSet\"},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeVpcEndpoints\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"VpcEndpointIds\":{\"shape\":\"S26\",\"locationName\":\"VpcEndpointId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpcEndpoints\":{\"locationName\":\"vpcEndpointSet\",\"type\":\"list\",\"member\":{\"shape\":\"S63\",\"locationName\":\"item\"}},\"NextToken\":{\"locationName\":\"nextToken\"}}},\"http\":{}},\"DescribeVpcPeeringConnections\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcPeeringConnectionIds\":{\"shape\":\"S26\",\"locationName\":\"VpcPeeringConnectionId\"},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpcPeeringConnections\":{\"locationName\":\"vpcPeeringConnectionSet\",\"type\":\"list\",\"member\":{\"shape\":\"S5\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeVpcs\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcIds\":{\"locationName\":\"VpcId\",\"type\":\"list\",\"member\":{\"locationName\":\"VpcId\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Vpcs\":{\"locationName\":\"vpcSet\",\"type\":\"list\",\"member\":{\"shape\":\"S5z\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeVpnConnections\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpnConnectionIds\":{\"locationName\":\"VpnConnectionId\",\"type\":\"list\",\"member\":{\"locationName\":\"VpnConnectionId\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpnConnections\":{\"locationName\":\"vpnConnectionSet\",\"type\":\"list\",\"member\":{\"shape\":\"S6a\",\"locationName\":\"item\"}}}},\"http\":{}},\"DescribeVpnGateways\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpnGatewayIds\":{\"locationName\":\"VpnGatewayId\",\"type\":\"list\",\"member\":{\"locationName\":\"VpnGatewayId\"}},\"Filters\":{\"shape\":\"S7r\",\"locationName\":\"Filter\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"VpnGateways\":{\"locationName\":\"vpnGatewaySet\",\"type\":\"list\",\"member\":{\"shape\":\"S6m\",\"locationName\":\"item\"}}}},\"http\":{}},\"DetachClassicLinkVpc\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\",\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"VpcId\":{\"locationName\":\"vpcId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"DetachInternetGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"InternetGatewayId\",\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InternetGatewayId\":{\"locationName\":\"internetGatewayId\"},\"VpcId\":{\"locationName\":\"vpcId\"}}},\"http\":{}},\"DetachNetworkInterface\":{\"input\":{\"type\":\"structure\",\"required\":[\"AttachmentId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"AttachmentId\":{\"locationName\":\"attachmentId\"},\"Force\":{\"locationName\":\"force\",\"type\":\"boolean\"}}},\"http\":{}},\"DetachVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VolumeId\":{},\"InstanceId\":{},\"Device\":{},\"Force\":{\"type\":\"boolean\"}}},\"output\":{\"shape\":\"Sy\"},\"http\":{}},\"DetachVpnGateway\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpnGatewayId\",\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpnGatewayId\":{},\"VpcId\":{}}},\"http\":{}},\"DisableVgwRoutePropagation\":{\"input\":{\"type\":\"structure\",\"required\":[\"RouteTableId\",\"GatewayId\"],\"members\":{\"RouteTableId\":{},\"GatewayId\":{}}},\"http\":{}},\"DisableVpcClassicLink\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcId\":{\"locationName\":\"vpcId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"DisableVpcClassicLinkDnsSupport\":{\"input\":{\"type\":\"structure\",\"members\":{\"VpcId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"DisassociateAddress\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"PublicIp\":{},\"AssociationId\":{}}},\"http\":{}},\"DisassociateRouteTable\":{\"input\":{\"type\":\"structure\",\"required\":[\"AssociationId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"AssociationId\":{\"locationName\":\"associationId\"}}},\"http\":{}},\"EnableVgwRoutePropagation\":{\"input\":{\"type\":\"structure\",\"required\":[\"RouteTableId\",\"GatewayId\"],\"members\":{\"RouteTableId\":{},\"GatewayId\":{}}},\"http\":{}},\"EnableVolumeIO\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VolumeId\":{\"locationName\":\"volumeId\"}}},\"http\":{}},\"EnableVpcClassicLink\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcId\":{\"locationName\":\"vpcId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"EnableVpcClassicLinkDnsSupport\":{\"input\":{\"type\":\"structure\",\"members\":{\"VpcId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"GetConsoleOutput\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"Timestamp\":{\"locationName\":\"timestamp\",\"type\":\"timestamp\"},\"Output\":{\"locationName\":\"output\"}}},\"http\":{}},\"GetPasswordData\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"Timestamp\":{\"locationName\":\"timestamp\",\"type\":\"timestamp\"},\"PasswordData\":{\"locationName\":\"passwordData\"}}},\"http\":{}},\"ImportImage\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"Description\":{},\"DiskContainers\":{\"locationName\":\"DiskContainer\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Description\":{},\"Format\":{},\"Url\":{},\"UserBucket\":{\"shape\":\"Sib\"},\"DeviceName\":{},\"SnapshotId\":{}}}},\"LicenseType\":{},\"Hypervisor\":{},\"Architecture\":{},\"Platform\":{},\"ClientData\":{\"shape\":\"Sic\"},\"ClientToken\":{},\"RoleName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ImportTaskId\":{\"locationName\":\"importTaskId\"},\"Architecture\":{\"locationName\":\"architecture\"},\"LicenseType\":{\"locationName\":\"licenseType\"},\"Platform\":{\"locationName\":\"platform\"},\"Hypervisor\":{\"locationName\":\"hypervisor\"},\"Description\":{\"locationName\":\"description\"},\"SnapshotDetails\":{\"shape\":\"Sag\",\"locationName\":\"snapshotDetailSet\"},\"ImageId\":{\"locationName\":\"imageId\"},\"Progress\":{\"locationName\":\"progress\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"Status\":{\"locationName\":\"status\"}}},\"http\":{}},\"ImportInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"Platform\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Description\":{\"locationName\":\"description\"},\"LaunchSpecification\":{\"locationName\":\"launchSpecification\",\"type\":\"structure\",\"members\":{\"Architecture\":{\"locationName\":\"architecture\"},\"GroupNames\":{\"shape\":\"Sig\",\"locationName\":\"GroupName\"},\"GroupIds\":{\"shape\":\"S4g\",\"locationName\":\"GroupId\"},\"AdditionalInfo\":{\"locationName\":\"additionalInfo\"},\"UserData\":{\"locationName\":\"userData\",\"type\":\"structure\",\"members\":{\"Data\":{\"locationName\":\"data\"}}},\"InstanceType\":{\"locationName\":\"instanceType\"},\"Placement\":{\"shape\":\"Sbh\",\"locationName\":\"placement\"},\"Monitoring\":{\"locationName\":\"monitoring\",\"type\":\"boolean\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"InstanceInitiatedShutdownBehavior\":{\"locationName\":\"instanceInitiatedShutdownBehavior\"},\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"}}},\"DiskImages\":{\"locationName\":\"diskImage\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Image\":{\"shape\":\"Sil\"},\"Description\":{},\"Volume\":{\"shape\":\"Sim\"}}}},\"Platform\":{\"locationName\":\"platform\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ConversionTask\":{\"shape\":\"S8i\",\"locationName\":\"conversionTask\"}}},\"http\":{}},\"ImportKeyPair\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyName\",\"PublicKeyMaterial\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"KeyName\":{\"locationName\":\"keyName\"},\"PublicKeyMaterial\":{\"locationName\":\"publicKeyMaterial\",\"type\":\"blob\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"KeyName\":{\"locationName\":\"keyName\"},\"KeyFingerprint\":{\"locationName\":\"keyFingerprint\"}}},\"http\":{}},\"ImportSnapshot\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"Description\":{},\"DiskContainer\":{\"type\":\"structure\",\"members\":{\"Description\":{},\"Format\":{},\"Url\":{},\"UserBucket\":{\"shape\":\"Sib\"}}},\"ClientData\":{\"shape\":\"Sic\"},\"ClientToken\":{},\"RoleName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ImportTaskId\":{\"locationName\":\"importTaskId\"},\"SnapshotTaskDetail\":{\"shape\":\"San\",\"locationName\":\"snapshotTaskDetail\"},\"Description\":{\"locationName\":\"description\"}}},\"http\":{}},\"ImportVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"AvailabilityZone\",\"Image\",\"Volume\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"Image\":{\"shape\":\"Sil\",\"locationName\":\"image\"},\"Description\":{\"locationName\":\"description\"},\"Volume\":{\"shape\":\"Sim\",\"locationName\":\"volume\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ConversionTask\":{\"shape\":\"S8i\",\"locationName\":\"conversionTask\"}}},\"http\":{}},\"ModifyHosts\":{\"input\":{\"type\":\"structure\",\"required\":[\"HostIds\",\"AutoPlacement\"],\"members\":{\"HostIds\":{\"shape\":\"S98\",\"locationName\":\"hostId\"},\"AutoPlacement\":{\"locationName\":\"autoPlacement\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Successful\":{\"shape\":\"Sj\",\"locationName\":\"successful\"},\"Unsuccessful\":{\"shape\":\"Six\",\"locationName\":\"unsuccessful\"}}},\"http\":{}},\"ModifyIdFormat\":{\"input\":{\"type\":\"structure\",\"required\":[\"Resource\",\"UseLongIds\"],\"members\":{\"Resource\":{},\"UseLongIds\":{\"type\":\"boolean\"}}},\"http\":{}},\"ModifyImageAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"ImageId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ImageId\":{},\"Attribute\":{},\"OperationType\":{},\"UserIds\":{\"shape\":\"Sj1\",\"locationName\":\"UserId\"},\"UserGroups\":{\"locationName\":\"UserGroup\",\"type\":\"list\",\"member\":{\"locationName\":\"UserGroup\"}},\"ProductCodes\":{\"locationName\":\"ProductCode\",\"type\":\"list\",\"member\":{\"locationName\":\"ProductCode\"}},\"Value\":{},\"LaunchPermission\":{\"type\":\"structure\",\"members\":{\"Add\":{\"shape\":\"S9q\"},\"Remove\":{\"shape\":\"S9q\"}}},\"Description\":{\"shape\":\"S33\"}}},\"http\":{}},\"ModifyInstanceAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"Attribute\":{\"locationName\":\"attribute\"},\"Value\":{\"locationName\":\"value\"},\"BlockDeviceMappings\":{\"locationName\":\"blockDeviceMapping\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"DeviceName\":{\"locationName\":\"deviceName\"},\"Ebs\":{\"locationName\":\"ebs\",\"type\":\"structure\",\"members\":{\"VolumeId\":{\"locationName\":\"volumeId\"},\"DeleteOnTermination\":{\"locationName\":\"deleteOnTermination\",\"type\":\"boolean\"}}},\"VirtualName\":{\"locationName\":\"virtualName\"},\"NoDevice\":{\"locationName\":\"noDevice\"}}}},\"SourceDestCheck\":{\"shape\":\"Sar\"},\"DisableApiTermination\":{\"shape\":\"Sar\",\"locationName\":\"disableApiTermination\"},\"InstanceType\":{\"shape\":\"S33\",\"locationName\":\"instanceType\"},\"Kernel\":{\"shape\":\"S33\",\"locationName\":\"kernel\"},\"Ramdisk\":{\"shape\":\"S33\",\"locationName\":\"ramdisk\"},\"UserData\":{\"locationName\":\"userData\",\"type\":\"structure\",\"members\":{\"Value\":{\"locationName\":\"value\",\"type\":\"blob\"}}},\"InstanceInitiatedShutdownBehavior\":{\"shape\":\"S33\",\"locationName\":\"instanceInitiatedShutdownBehavior\"},\"Groups\":{\"shape\":\"Ss\",\"locationName\":\"GroupId\"},\"EbsOptimized\":{\"shape\":\"Sar\",\"locationName\":\"ebsOptimized\"},\"SriovNetSupport\":{\"shape\":\"S33\",\"locationName\":\"sriovNetSupport\"}}},\"http\":{}},\"ModifyInstancePlacement\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"Tenancy\":{\"locationName\":\"tenancy\"},\"Affinity\":{\"locationName\":\"affinity\"},\"HostId\":{\"locationName\":\"hostId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"ModifyNetworkInterfaceAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkInterfaceId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"Description\":{\"shape\":\"S33\",\"locationName\":\"description\"},\"SourceDestCheck\":{\"shape\":\"Sar\",\"locationName\":\"sourceDestCheck\"},\"Groups\":{\"shape\":\"S4g\",\"locationName\":\"SecurityGroupId\"},\"Attachment\":{\"locationName\":\"attachment\",\"type\":\"structure\",\"members\":{\"AttachmentId\":{\"locationName\":\"attachmentId\"},\"DeleteOnTermination\":{\"locationName\":\"deleteOnTermination\",\"type\":\"boolean\"}}}}},\"http\":{}},\"ModifyReservedInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"ReservedInstancesIds\",\"TargetConfigurations\"],\"members\":{\"ClientToken\":{\"locationName\":\"clientToken\"},\"ReservedInstancesIds\":{\"shape\":\"Scy\",\"locationName\":\"ReservedInstancesId\"},\"TargetConfigurations\":{\"locationName\":\"ReservedInstancesConfigurationSetItemType\",\"type\":\"list\",\"member\":{\"shape\":\"Sdk\",\"locationName\":\"item\"}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ReservedInstancesModificationId\":{\"locationName\":\"reservedInstancesModificationId\"}}},\"http\":{}},\"ModifySnapshotAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"SnapshotId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SnapshotId\":{},\"Attribute\":{},\"OperationType\":{},\"UserIds\":{\"shape\":\"Sj1\",\"locationName\":\"UserId\"},\"GroupNames\":{\"shape\":\"Seb\",\"locationName\":\"UserGroup\"},\"CreateVolumePermission\":{\"type\":\"structure\",\"members\":{\"Add\":{\"shape\":\"Sei\"},\"Remove\":{\"shape\":\"Sei\"}}}}},\"http\":{}},\"ModifySpotFleetRequest\":{\"input\":{\"type\":\"structure\",\"required\":[\"SpotFleetRequestId\"],\"members\":{\"SpotFleetRequestId\":{\"locationName\":\"spotFleetRequestId\"},\"TargetCapacity\":{\"locationName\":\"targetCapacity\",\"type\":\"integer\"},\"ExcessCapacityTerminationPolicy\":{\"locationName\":\"excessCapacityTerminationPolicy\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"ModifySubnetAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"SubnetId\"],\"members\":{\"SubnetId\":{\"locationName\":\"subnetId\"},\"MapPublicIpOnLaunch\":{\"shape\":\"Sar\"}}},\"http\":{}},\"ModifyVolumeAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VolumeId\":{},\"AutoEnableIO\":{\"shape\":\"Sar\"}}},\"http\":{}},\"ModifyVpcAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcId\"],\"members\":{\"VpcId\":{\"locationName\":\"vpcId\"},\"EnableDnsSupport\":{\"shape\":\"Sar\"},\"EnableDnsHostnames\":{\"shape\":\"Sar\"}}},\"http\":{}},\"ModifyVpcEndpoint\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcEndpointId\"],\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"VpcEndpointId\":{},\"ResetPolicy\":{\"type\":\"boolean\"},\"PolicyDocument\":{},\"AddRouteTableIds\":{\"shape\":\"S26\",\"locationName\":\"AddRouteTableId\"},\"RemoveRouteTableIds\":{\"shape\":\"S26\",\"locationName\":\"RemoveRouteTableId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"MonitorInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceIds\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceIds\":{\"shape\":\"S8a\",\"locationName\":\"InstanceId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceMonitorings\":{\"shape\":\"Sju\",\"locationName\":\"instancesSet\"}}},\"http\":{}},\"MoveAddressToVpc\":{\"input\":{\"type\":\"structure\",\"required\":[\"PublicIp\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"PublicIp\":{\"locationName\":\"publicIp\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"AllocationId\":{\"locationName\":\"allocationId\"},\"Status\":{\"locationName\":\"status\"}}},\"http\":{}},\"PurchaseReservedInstancesOffering\":{\"input\":{\"type\":\"structure\",\"required\":[\"ReservedInstancesOfferingId\",\"InstanceCount\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ReservedInstancesOfferingId\":{},\"InstanceCount\":{\"type\":\"integer\"},\"LimitPrice\":{\"locationName\":\"limitPrice\",\"type\":\"structure\",\"members\":{\"Amount\":{\"locationName\":\"amount\",\"type\":\"double\"},\"CurrencyCode\":{\"locationName\":\"currencyCode\"}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ReservedInstancesId\":{\"locationName\":\"reservedInstancesId\"}}},\"http\":{}},\"PurchaseScheduledInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"PurchaseRequests\"],\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"ClientToken\":{\"idempotencyToken\":true},\"PurchaseRequests\":{\"locationName\":\"PurchaseRequest\",\"type\":\"list\",\"member\":{\"locationName\":\"PurchaseRequest\",\"type\":\"structure\",\"required\":[\"PurchaseToken\",\"InstanceCount\"],\"members\":{\"PurchaseToken\":{},\"InstanceCount\":{\"type\":\"integer\"}}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ScheduledInstanceSet\":{\"locationName\":\"scheduledInstanceSet\",\"type\":\"list\",\"member\":{\"shape\":\"Se9\",\"locationName\":\"item\"}}}},\"http\":{}},\"RebootInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceIds\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceIds\":{\"shape\":\"S8a\",\"locationName\":\"InstanceId\"}}},\"http\":{}},\"RegisterImage\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ImageLocation\":{},\"Name\":{\"locationName\":\"name\"},\"Description\":{\"locationName\":\"description\"},\"Architecture\":{\"locationName\":\"architecture\"},\"KernelId\":{\"locationName\":\"kernelId\"},\"RamdiskId\":{\"locationName\":\"ramdiskId\"},\"RootDeviceName\":{\"locationName\":\"rootDeviceName\"},\"BlockDeviceMappings\":{\"shape\":\"S3c\",\"locationName\":\"BlockDeviceMapping\"},\"VirtualizationType\":{\"locationName\":\"virtualizationType\"},\"SriovNetSupport\":{\"locationName\":\"sriovNetSupport\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ImageId\":{\"locationName\":\"imageId\"}}},\"http\":{}},\"RejectVpcPeeringConnection\":{\"input\":{\"type\":\"structure\",\"required\":[\"VpcPeeringConnectionId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"VpcPeeringConnectionId\":{\"locationName\":\"vpcPeeringConnectionId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Return\":{\"locationName\":\"return\",\"type\":\"boolean\"}}},\"http\":{}},\"ReleaseAddress\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"PublicIp\":{},\"AllocationId\":{}}},\"http\":{}},\"ReleaseHosts\":{\"input\":{\"type\":\"structure\",\"required\":[\"HostIds\"],\"members\":{\"HostIds\":{\"shape\":\"S98\",\"locationName\":\"hostId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Successful\":{\"shape\":\"Sj\",\"locationName\":\"successful\"},\"Unsuccessful\":{\"shape\":\"Six\",\"locationName\":\"unsuccessful\"}}},\"http\":{}},\"ReplaceNetworkAclAssociation\":{\"input\":{\"type\":\"structure\",\"required\":[\"AssociationId\",\"NetworkAclId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"AssociationId\":{\"locationName\":\"associationId\"},\"NetworkAclId\":{\"locationName\":\"networkAclId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NewAssociationId\":{\"locationName\":\"newAssociationId\"}}},\"http\":{}},\"ReplaceNetworkAclEntry\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkAclId\",\"RuleNumber\",\"Protocol\",\"RuleAction\",\"Egress\",\"CidrBlock\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkAclId\":{\"locationName\":\"networkAclId\"},\"RuleNumber\":{\"locationName\":\"ruleNumber\",\"type\":\"integer\"},\"Protocol\":{\"locationName\":\"protocol\"},\"RuleAction\":{\"locationName\":\"ruleAction\"},\"Egress\":{\"locationName\":\"egress\",\"type\":\"boolean\"},\"CidrBlock\":{\"locationName\":\"cidrBlock\"},\"IcmpTypeCode\":{\"shape\":\"S4a\",\"locationName\":\"Icmp\"},\"PortRange\":{\"shape\":\"S4b\",\"locationName\":\"portRange\"}}},\"http\":{}},\"ReplaceRoute\":{\"input\":{\"type\":\"structure\",\"required\":[\"RouteTableId\",\"DestinationCidrBlock\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"RouteTableId\":{\"locationName\":\"routeTableId\"},\"DestinationCidrBlock\":{\"locationName\":\"destinationCidrBlock\"},\"GatewayId\":{\"locationName\":\"gatewayId\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"VpcPeeringConnectionId\":{\"locationName\":\"vpcPeeringConnectionId\"},\"NatGatewayId\":{\"locationName\":\"natGatewayId\"}}},\"http\":{}},\"ReplaceRouteTableAssociation\":{\"input\":{\"type\":\"structure\",\"required\":[\"AssociationId\",\"RouteTableId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"AssociationId\":{\"locationName\":\"associationId\"},\"RouteTableId\":{\"locationName\":\"routeTableId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NewAssociationId\":{\"locationName\":\"newAssociationId\"}}},\"http\":{}},\"ReportInstanceStatus\":{\"input\":{\"type\":\"structure\",\"required\":[\"Instances\",\"Status\",\"ReasonCodes\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"Instances\":{\"shape\":\"S8a\",\"locationName\":\"instanceId\"},\"Status\":{\"locationName\":\"status\"},\"StartTime\":{\"locationName\":\"startTime\",\"type\":\"timestamp\"},\"EndTime\":{\"locationName\":\"endTime\",\"type\":\"timestamp\"},\"ReasonCodes\":{\"locationName\":\"reasonCode\",\"type\":\"list\",\"member\":{\"locationName\":\"item\"}},\"Description\":{\"locationName\":\"description\"}}},\"http\":{}},\"RequestSpotFleet\":{\"input\":{\"type\":\"structure\",\"required\":[\"SpotFleetRequestConfig\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SpotFleetRequestConfig\":{\"shape\":\"Sf5\",\"locationName\":\"spotFleetRequestConfig\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"SpotFleetRequestId\"],\"members\":{\"SpotFleetRequestId\":{\"locationName\":\"spotFleetRequestId\"}}},\"http\":{}},\"RequestSpotInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"SpotPrice\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SpotPrice\":{\"locationName\":\"spotPrice\"},\"ClientToken\":{\"locationName\":\"clientToken\"},\"InstanceCount\":{\"locationName\":\"instanceCount\",\"type\":\"integer\"},\"Type\":{\"locationName\":\"type\"},\"ValidFrom\":{\"locationName\":\"validFrom\",\"type\":\"timestamp\"},\"ValidUntil\":{\"locationName\":\"validUntil\",\"type\":\"timestamp\"},\"LaunchGroup\":{\"locationName\":\"launchGroup\"},\"AvailabilityZoneGroup\":{\"locationName\":\"availabilityZoneGroup\"},\"BlockDurationMinutes\":{\"locationName\":\"blockDurationMinutes\",\"type\":\"integer\"},\"LaunchSpecification\":{\"type\":\"structure\",\"members\":{\"ImageId\":{\"locationName\":\"imageId\"},\"KeyName\":{\"locationName\":\"keyName\"},\"SecurityGroups\":{\"shape\":\"S26\",\"locationName\":\"SecurityGroup\"},\"UserData\":{\"locationName\":\"userData\"},\"AddressingType\":{\"locationName\":\"addressingType\"},\"InstanceType\":{\"locationName\":\"instanceType\"},\"Placement\":{\"shape\":\"Sf8\",\"locationName\":\"placement\"},\"KernelId\":{\"locationName\":\"kernelId\"},\"RamdiskId\":{\"locationName\":\"ramdiskId\"},\"BlockDeviceMappings\":{\"shape\":\"S9w\",\"locationName\":\"blockDeviceMapping\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"NetworkInterfaces\":{\"shape\":\"Sfa\",\"locationName\":\"NetworkInterface\"},\"IamInstanceProfile\":{\"shape\":\"Sfc\",\"locationName\":\"iamInstanceProfile\"},\"EbsOptimized\":{\"locationName\":\"ebsOptimized\",\"type\":\"boolean\"},\"Monitoring\":{\"shape\":\"Sfn\",\"locationName\":\"monitoring\"},\"SecurityGroupIds\":{\"shape\":\"S26\",\"locationName\":\"SecurityGroupId\"}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"SpotInstanceRequests\":{\"shape\":\"Sfh\",\"locationName\":\"spotInstanceRequestSet\"}}},\"http\":{}},\"ResetImageAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"ImageId\",\"Attribute\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ImageId\":{},\"Attribute\":{}}},\"http\":{}},\"ResetInstanceAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\",\"Attribute\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"Attribute\":{\"locationName\":\"attribute\"}}},\"http\":{}},\"ResetNetworkInterfaceAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkInterfaceId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"SourceDestCheck\":{\"locationName\":\"sourceDestCheck\"}}},\"http\":{}},\"ResetSnapshotAttribute\":{\"input\":{\"type\":\"structure\",\"required\":[\"SnapshotId\",\"Attribute\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"SnapshotId\":{},\"Attribute\":{}}},\"http\":{}},\"RestoreAddressToClassic\":{\"input\":{\"type\":\"structure\",\"required\":[\"PublicIp\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"PublicIp\":{\"locationName\":\"publicIp\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Status\":{\"locationName\":\"status\"},\"PublicIp\":{\"locationName\":\"publicIp\"}}},\"http\":{}},\"RevokeSecurityGroupEgress\":{\"input\":{\"type\":\"structure\",\"required\":[\"GroupId\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupId\":{\"locationName\":\"groupId\"},\"SourceSecurityGroupName\":{\"locationName\":\"sourceSecurityGroupName\"},\"SourceSecurityGroupOwnerId\":{\"locationName\":\"sourceSecurityGroupOwnerId\"},\"IpProtocol\":{\"locationName\":\"ipProtocol\"},\"FromPort\":{\"locationName\":\"fromPort\",\"type\":\"integer\"},\"ToPort\":{\"locationName\":\"toPort\",\"type\":\"integer\"},\"CidrIp\":{\"locationName\":\"cidrIp\"},\"IpPermissions\":{\"shape\":\"S15\",\"locationName\":\"ipPermissions\"}}},\"http\":{}},\"RevokeSecurityGroupIngress\":{\"input\":{\"type\":\"structure\",\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"GroupName\":{},\"GroupId\":{},\"SourceSecurityGroupName\":{},\"SourceSecurityGroupOwnerId\":{},\"IpProtocol\":{},\"FromPort\":{\"type\":\"integer\"},\"ToPort\":{\"type\":\"integer\"},\"CidrIp\":{},\"IpPermissions\":{\"shape\":\"S15\"}}},\"http\":{}},\"RunInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"ImageId\",\"MinCount\",\"MaxCount\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"ImageId\":{},\"MinCount\":{\"type\":\"integer\"},\"MaxCount\":{\"type\":\"integer\"},\"KeyName\":{},\"SecurityGroups\":{\"shape\":\"Sig\",\"locationName\":\"SecurityGroup\"},\"SecurityGroupIds\":{\"shape\":\"S4g\",\"locationName\":\"SecurityGroupId\"},\"UserData\":{},\"InstanceType\":{},\"Placement\":{\"shape\":\"Sbh\"},\"KernelId\":{},\"RamdiskId\":{},\"BlockDeviceMappings\":{\"shape\":\"S3c\",\"locationName\":\"BlockDeviceMapping\"},\"Monitoring\":{\"shape\":\"Sfn\"},\"SubnetId\":{},\"DisableApiTermination\":{\"locationName\":\"disableApiTermination\",\"type\":\"boolean\"},\"InstanceInitiatedShutdownBehavior\":{\"locationName\":\"instanceInitiatedShutdownBehavior\"},\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"ClientToken\":{\"locationName\":\"clientToken\"},\"AdditionalInfo\":{\"locationName\":\"additionalInfo\"},\"NetworkInterfaces\":{\"shape\":\"Sfa\",\"locationName\":\"networkInterface\"},\"IamInstanceProfile\":{\"shape\":\"Sfc\",\"locationName\":\"iamInstanceProfile\"},\"EbsOptimized\":{\"locationName\":\"ebsOptimized\",\"type\":\"boolean\"}}},\"output\":{\"shape\":\"Sbd\"},\"http\":{}},\"RunScheduledInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"ScheduledInstanceId\",\"LaunchSpecification\"],\"members\":{\"DryRun\":{\"type\":\"boolean\"},\"ClientToken\":{\"idempotencyToken\":true},\"InstanceCount\":{\"type\":\"integer\"},\"ScheduledInstanceId\":{},\"LaunchSpecification\":{\"type\":\"structure\",\"required\":[\"ImageId\"],\"members\":{\"ImageId\":{},\"KeyName\":{},\"SecurityGroupIds\":{\"shape\":\"Sl6\",\"locationName\":\"SecurityGroupId\"},\"UserData\":{},\"Placement\":{\"type\":\"structure\",\"members\":{\"AvailabilityZone\":{},\"GroupName\":{}}},\"KernelId\":{},\"InstanceType\":{},\"RamdiskId\":{},\"BlockDeviceMappings\":{\"locationName\":\"BlockDeviceMapping\",\"type\":\"list\",\"member\":{\"locationName\":\"BlockDeviceMapping\",\"type\":\"structure\",\"members\":{\"DeviceName\":{},\"NoDevice\":{},\"VirtualName\":{},\"Ebs\":{\"type\":\"structure\",\"members\":{\"SnapshotId\":{},\"VolumeSize\":{\"type\":\"integer\"},\"DeleteOnTermination\":{\"type\":\"boolean\"},\"VolumeType\":{},\"Iops\":{\"type\":\"integer\"},\"Encrypted\":{\"type\":\"boolean\"}}}}}},\"Monitoring\":{\"type\":\"structure\",\"members\":{\"Enabled\":{\"type\":\"boolean\"}}},\"SubnetId\":{},\"NetworkInterfaces\":{\"locationName\":\"NetworkInterface\",\"type\":\"list\",\"member\":{\"locationName\":\"NetworkInterface\",\"type\":\"structure\",\"members\":{\"NetworkInterfaceId\":{},\"DeviceIndex\":{\"type\":\"integer\"},\"SubnetId\":{},\"Description\":{},\"PrivateIpAddress\":{},\"PrivateIpAddressConfigs\":{\"locationName\":\"PrivateIpAddressConfig\",\"type\":\"list\",\"member\":{\"locationName\":\"PrivateIpAddressConfigSet\",\"type\":\"structure\",\"members\":{\"PrivateIpAddress\":{},\"Primary\":{\"type\":\"boolean\"}}}},\"SecondaryPrivateIpAddressCount\":{\"type\":\"integer\"},\"AssociatePublicIpAddress\":{\"type\":\"boolean\"},\"Groups\":{\"shape\":\"Sl6\",\"locationName\":\"Group\"},\"DeleteOnTermination\":{\"type\":\"boolean\"}}}},\"IamInstanceProfile\":{\"type\":\"structure\",\"members\":{\"Arn\":{},\"Name\":{}}},\"EbsOptimized\":{\"type\":\"boolean\"}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceIdSet\":{\"locationName\":\"instanceIdSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\"}}}},\"http\":{}},\"StartInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceIds\"],\"members\":{\"InstanceIds\":{\"shape\":\"S8a\",\"locationName\":\"InstanceId\"},\"AdditionalInfo\":{\"locationName\":\"additionalInfo\"},\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"StartingInstances\":{\"shape\":\"Sll\",\"locationName\":\"instancesSet\"}}},\"http\":{}},\"StopInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceIds\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceIds\":{\"shape\":\"S8a\",\"locationName\":\"InstanceId\"},\"Force\":{\"locationName\":\"force\",\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"StoppingInstances\":{\"shape\":\"Sll\",\"locationName\":\"instancesSet\"}}},\"http\":{}},\"TerminateInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceIds\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceIds\":{\"shape\":\"S8a\",\"locationName\":\"InstanceId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"TerminatingInstances\":{\"shape\":\"Sll\",\"locationName\":\"instancesSet\"}}},\"http\":{}},\"UnassignPrivateIpAddresses\":{\"input\":{\"type\":\"structure\",\"required\":[\"NetworkInterfaceId\",\"PrivateIpAddresses\"],\"members\":{\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"PrivateIpAddresses\":{\"shape\":\"Sl\",\"locationName\":\"privateIpAddress\"}}},\"http\":{}},\"UnmonitorInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceIds\"],\"members\":{\"DryRun\":{\"locationName\":\"dryRun\",\"type\":\"boolean\"},\"InstanceIds\":{\"shape\":\"S8a\",\"locationName\":\"InstanceId\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceMonitorings\":{\"shape\":\"Sju\",\"locationName\":\"instancesSet\"}}},\"http\":{}}},\"shapes\":{\"S5\":{\"type\":\"structure\",\"members\":{\"AccepterVpcInfo\":{\"shape\":\"S6\",\"locationName\":\"accepterVpcInfo\"},\"ExpirationTime\":{\"locationName\":\"expirationTime\",\"type\":\"timestamp\"},\"RequesterVpcInfo\":{\"shape\":\"S6\",\"locationName\":\"requesterVpcInfo\"},\"Status\":{\"locationName\":\"status\",\"type\":\"structure\",\"members\":{\"Code\":{\"locationName\":\"code\"},\"Message\":{\"locationName\":\"message\"}}},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"VpcPeeringConnectionId\":{\"locationName\":\"vpcPeeringConnectionId\"}}},\"S6\":{\"type\":\"structure\",\"members\":{\"CidrBlock\":{\"locationName\":\"cidrBlock\"},\"OwnerId\":{\"locationName\":\"ownerId\"},\"VpcId\":{\"locationName\":\"vpcId\"}}},\"Sa\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Key\":{\"locationName\":\"key\"},\"Value\":{\"locationName\":\"value\"}}}},\"Sj\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\"}},\"Sl\":{\"type\":\"list\",\"member\":{\"locationName\":\"PrivateIpAddress\"}},\"Ss\":{\"type\":\"list\",\"member\":{\"locationName\":\"groupId\"}},\"Sy\":{\"type\":\"structure\",\"members\":{\"VolumeId\":{\"locationName\":\"volumeId\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"Device\":{\"locationName\":\"device\"},\"State\":{\"locationName\":\"status\"},\"AttachTime\":{\"locationName\":\"attachTime\",\"type\":\"timestamp\"},\"DeleteOnTermination\":{\"locationName\":\"deleteOnTermination\",\"type\":\"boolean\"}}},\"S12\":{\"type\":\"structure\",\"members\":{\"VpcId\":{\"locationName\":\"vpcId\"},\"State\":{\"locationName\":\"state\"}}},\"S15\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"IpProtocol\":{\"locationName\":\"ipProtocol\"},\"FromPort\":{\"locationName\":\"fromPort\",\"type\":\"integer\"},\"ToPort\":{\"locationName\":\"toPort\",\"type\":\"integer\"},\"UserIdGroupPairs\":{\"locationName\":\"groups\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"UserId\":{\"locationName\":\"userId\"},\"GroupName\":{\"locationName\":\"groupName\"},\"GroupId\":{\"locationName\":\"groupId\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"VpcPeeringConnectionId\":{\"locationName\":\"vpcPeeringConnectionId\"},\"PeeringStatus\":{\"locationName\":\"peeringStatus\"}}}},\"IpRanges\":{\"locationName\":\"ipRanges\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"CidrIp\":{\"locationName\":\"cidrIp\"}}}},\"PrefixListIds\":{\"locationName\":\"prefixListIds\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"PrefixListId\":{\"locationName\":\"prefixListId\"}}}}}}},\"S1f\":{\"type\":\"structure\",\"members\":{\"S3\":{\"type\":\"structure\",\"members\":{\"Bucket\":{\"locationName\":\"bucket\"},\"Prefix\":{\"locationName\":\"prefix\"},\"AWSAccessKeyId\":{},\"UploadPolicy\":{\"locationName\":\"uploadPolicy\",\"type\":\"blob\"},\"UploadPolicySignature\":{\"locationName\":\"uploadPolicySignature\"}}}}},\"S1j\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"BundleId\":{\"locationName\":\"bundleId\"},\"State\":{\"locationName\":\"state\"},\"StartTime\":{\"locationName\":\"startTime\",\"type\":\"timestamp\"},\"UpdateTime\":{\"locationName\":\"updateTime\",\"type\":\"timestamp\"},\"Storage\":{\"shape\":\"S1f\",\"locationName\":\"storage\"},\"Progress\":{\"locationName\":\"progress\"},\"BundleTaskError\":{\"locationName\":\"error\",\"type\":\"structure\",\"members\":{\"Code\":{\"locationName\":\"code\"},\"Message\":{\"locationName\":\"message\"}}}}},\"S1u\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ReservedInstancesListingId\":{\"locationName\":\"reservedInstancesListingId\"},\"ReservedInstancesId\":{\"locationName\":\"reservedInstancesId\"},\"CreateDate\":{\"locationName\":\"createDate\",\"type\":\"timestamp\"},\"UpdateDate\":{\"locationName\":\"updateDate\",\"type\":\"timestamp\"},\"Status\":{\"locationName\":\"status\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"InstanceCounts\":{\"locationName\":\"instanceCounts\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"State\":{\"locationName\":\"state\"},\"InstanceCount\":{\"locationName\":\"instanceCount\",\"type\":\"integer\"}}}},\"PriceSchedules\":{\"locationName\":\"priceSchedules\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Term\":{\"locationName\":\"term\",\"type\":\"long\"},\"Price\":{\"locationName\":\"price\",\"type\":\"double\"},\"CurrencyCode\":{\"locationName\":\"currencyCode\"},\"Active\":{\"locationName\":\"active\",\"type\":\"boolean\"}}}},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"ClientToken\":{\"locationName\":\"clientToken\"}}}},\"S26\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\"}},\"S2g\":{\"type\":\"list\",\"member\":{\"locationName\":\"SpotInstanceRequestId\"}},\"S2u\":{\"type\":\"structure\",\"members\":{\"CustomerGatewayId\":{\"locationName\":\"customerGatewayId\"},\"State\":{\"locationName\":\"state\"},\"Type\":{\"locationName\":\"type\"},\"IpAddress\":{\"locationName\":\"ipAddress\"},\"BgpAsn\":{\"locationName\":\"bgpAsn\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}},\"S2z\":{\"type\":\"structure\",\"members\":{\"DhcpOptionsId\":{\"locationName\":\"dhcpOptionsId\"},\"DhcpConfigurations\":{\"locationName\":\"dhcpConfigurationSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Key\":{\"locationName\":\"key\"},\"Values\":{\"locationName\":\"valueSet\",\"type\":\"list\",\"member\":{\"shape\":\"S33\",\"locationName\":\"item\"}}}}},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}},\"S33\":{\"type\":\"structure\",\"members\":{\"Value\":{\"locationName\":\"value\"}}},\"S38\":{\"type\":\"list\",\"member\":{\"shape\":\"S39\",\"locationName\":\"item\"}},\"S39\":{\"type\":\"structure\",\"required\":[\"Error\"],\"members\":{\"ResourceId\":{\"locationName\":\"resourceId\"},\"Error\":{\"locationName\":\"error\",\"type\":\"structure\",\"required\":[\"Code\",\"Message\"],\"members\":{\"Code\":{\"locationName\":\"code\"},\"Message\":{\"locationName\":\"message\"}}}}},\"S3c\":{\"type\":\"list\",\"member\":{\"shape\":\"S3d\",\"locationName\":\"BlockDeviceMapping\"}},\"S3d\":{\"type\":\"structure\",\"members\":{\"VirtualName\":{\"locationName\":\"virtualName\"},\"DeviceName\":{\"locationName\":\"deviceName\"},\"Ebs\":{\"locationName\":\"ebs\",\"type\":\"structure\",\"members\":{\"SnapshotId\":{\"locationName\":\"snapshotId\"},\"VolumeSize\":{\"locationName\":\"volumeSize\",\"type\":\"integer\"},\"DeleteOnTermination\":{\"locationName\":\"deleteOnTermination\",\"type\":\"boolean\"},\"VolumeType\":{\"locationName\":\"volumeType\"},\"Iops\":{\"locationName\":\"iops\",\"type\":\"integer\"},\"Encrypted\":{\"locationName\":\"encrypted\",\"type\":\"boolean\"}}},\"NoDevice\":{\"locationName\":\"noDevice\"}}},\"S3n\":{\"type\":\"structure\",\"members\":{\"ExportTaskId\":{\"locationName\":\"exportTaskId\"},\"Description\":{\"locationName\":\"description\"},\"State\":{\"locationName\":\"state\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"InstanceExportDetails\":{\"locationName\":\"instanceExport\",\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"TargetEnvironment\":{\"locationName\":\"targetEnvironment\"}}},\"ExportToS3Task\":{\"locationName\":\"exportToS3\",\"type\":\"structure\",\"members\":{\"DiskImageFormat\":{\"locationName\":\"diskImageFormat\"},\"ContainerFormat\":{\"locationName\":\"containerFormat\"},\"S3Bucket\":{\"locationName\":\"s3Bucket\"},\"S3Key\":{\"locationName\":\"s3Key\"}}}}},\"S3t\":{\"type\":\"structure\",\"members\":{\"InternetGatewayId\":{\"locationName\":\"internetGatewayId\"},\"Attachments\":{\"locationName\":\"attachmentSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"VpcId\":{\"locationName\":\"vpcId\"},\"State\":{\"locationName\":\"state\"}}}},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}},\"S40\":{\"type\":\"structure\",\"members\":{\"VpcId\":{\"locationName\":\"vpcId\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"NatGatewayId\":{\"locationName\":\"natGatewayId\"},\"CreateTime\":{\"locationName\":\"createTime\",\"type\":\"timestamp\"},\"DeleteTime\":{\"locationName\":\"deleteTime\",\"type\":\"timestamp\"},\"NatGatewayAddresses\":{\"locationName\":\"natGatewayAddressSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"PublicIp\":{\"locationName\":\"publicIp\"},\"AllocationId\":{\"locationName\":\"allocationId\"},\"PrivateIp\":{\"locationName\":\"privateIp\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"}}}},\"State\":{\"locationName\":\"state\"},\"FailureCode\":{\"locationName\":\"failureCode\"},\"FailureMessage\":{\"locationName\":\"failureMessage\"}}},\"S46\":{\"type\":\"structure\",\"members\":{\"NetworkAclId\":{\"locationName\":\"networkAclId\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"IsDefault\":{\"locationName\":\"default\",\"type\":\"boolean\"},\"Entries\":{\"locationName\":\"entrySet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"RuleNumber\":{\"locationName\":\"ruleNumber\",\"type\":\"integer\"},\"Protocol\":{\"locationName\":\"protocol\"},\"RuleAction\":{\"locationName\":\"ruleAction\"},\"Egress\":{\"locationName\":\"egress\",\"type\":\"boolean\"},\"CidrBlock\":{\"locationName\":\"cidrBlock\"},\"IcmpTypeCode\":{\"shape\":\"S4a\",\"locationName\":\"icmpTypeCode\"},\"PortRange\":{\"shape\":\"S4b\",\"locationName\":\"portRange\"}}}},\"Associations\":{\"locationName\":\"associationSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"NetworkAclAssociationId\":{\"locationName\":\"networkAclAssociationId\"},\"NetworkAclId\":{\"locationName\":\"networkAclId\"},\"SubnetId\":{\"locationName\":\"subnetId\"}}}},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}},\"S4a\":{\"type\":\"structure\",\"members\":{\"Type\":{\"locationName\":\"type\",\"type\":\"integer\"},\"Code\":{\"locationName\":\"code\",\"type\":\"integer\"}}},\"S4b\":{\"type\":\"structure\",\"members\":{\"From\":{\"locationName\":\"from\",\"type\":\"integer\"},\"To\":{\"locationName\":\"to\",\"type\":\"integer\"}}},\"S4g\":{\"type\":\"list\",\"member\":{\"locationName\":\"SecurityGroupId\"}},\"S4h\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"required\":[\"PrivateIpAddress\"],\"members\":{\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"Primary\":{\"locationName\":\"primary\",\"type\":\"boolean\"}}}},\"S4k\":{\"type\":\"structure\",\"members\":{\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"Description\":{\"locationName\":\"description\"},\"OwnerId\":{\"locationName\":\"ownerId\"},\"RequesterId\":{\"locationName\":\"requesterId\"},\"RequesterManaged\":{\"locationName\":\"requesterManaged\",\"type\":\"boolean\"},\"Status\":{\"locationName\":\"status\"},\"MacAddress\":{\"locationName\":\"macAddress\"},\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"PrivateDnsName\":{\"locationName\":\"privateDnsName\"},\"SourceDestCheck\":{\"locationName\":\"sourceDestCheck\",\"type\":\"boolean\"},\"Groups\":{\"shape\":\"S4m\",\"locationName\":\"groupSet\"},\"Attachment\":{\"shape\":\"S4o\",\"locationName\":\"attachment\"},\"Association\":{\"shape\":\"S4p\",\"locationName\":\"association\"},\"TagSet\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"PrivateIpAddresses\":{\"locationName\":\"privateIpAddressesSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"PrivateDnsName\":{\"locationName\":\"privateDnsName\"},\"Primary\":{\"locationName\":\"primary\",\"type\":\"boolean\"},\"Association\":{\"shape\":\"S4p\",\"locationName\":\"association\"}}}},\"InterfaceType\":{\"locationName\":\"interfaceType\"}}},\"S4m\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"GroupName\":{\"locationName\":\"groupName\"},\"GroupId\":{\"locationName\":\"groupId\"}}}},\"S4o\":{\"type\":\"structure\",\"members\":{\"AttachmentId\":{\"locationName\":\"attachmentId\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"InstanceOwnerId\":{\"locationName\":\"instanceOwnerId\"},\"DeviceIndex\":{\"locationName\":\"deviceIndex\",\"type\":\"integer\"},\"Status\":{\"locationName\":\"status\"},\"AttachTime\":{\"locationName\":\"attachTime\",\"type\":\"timestamp\"},\"DeleteOnTermination\":{\"locationName\":\"deleteOnTermination\",\"type\":\"boolean\"}}},\"S4p\":{\"type\":\"structure\",\"members\":{\"PublicIp\":{\"locationName\":\"publicIp\"},\"PublicDnsName\":{\"locationName\":\"publicDnsName\"},\"IpOwnerId\":{\"locationName\":\"ipOwnerId\"},\"AllocationId\":{\"locationName\":\"allocationId\"},\"AssociationId\":{\"locationName\":\"associationId\"}}},\"S53\":{\"type\":\"structure\",\"members\":{\"RouteTableId\":{\"locationName\":\"routeTableId\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"Routes\":{\"locationName\":\"routeSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"DestinationCidrBlock\":{\"locationName\":\"destinationCidrBlock\"},\"DestinationPrefixListId\":{\"locationName\":\"destinationPrefixListId\"},\"GatewayId\":{\"locationName\":\"gatewayId\"},\"InstanceId\":{\"locationName\":\"instanceId\"},\"InstanceOwnerId\":{\"locationName\":\"instanceOwnerId\"},\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"VpcPeeringConnectionId\":{\"locationName\":\"vpcPeeringConnectionId\"},\"NatGatewayId\":{\"locationName\":\"natGatewayId\"},\"State\":{\"locationName\":\"state\"},\"Origin\":{\"locationName\":\"origin\"}}}},\"Associations\":{\"locationName\":\"associationSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"RouteTableAssociationId\":{\"locationName\":\"routeTableAssociationId\"},\"RouteTableId\":{\"locationName\":\"routeTableId\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"Main\":{\"locationName\":\"main\",\"type\":\"boolean\"}}}},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"PropagatingVgws\":{\"locationName\":\"propagatingVgwSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"GatewayId\":{\"locationName\":\"gatewayId\"}}}}}},\"S5f\":{\"type\":\"structure\",\"members\":{\"SnapshotId\":{\"locationName\":\"snapshotId\"},\"VolumeId\":{\"locationName\":\"volumeId\"},\"State\":{\"locationName\":\"status\"},\"StateMessage\":{\"locationName\":\"statusMessage\"},\"StartTime\":{\"locationName\":\"startTime\",\"type\":\"timestamp\"},\"Progress\":{\"locationName\":\"progress\"},\"OwnerId\":{\"locationName\":\"ownerId\"},\"Description\":{\"locationName\":\"description\"},\"VolumeSize\":{\"locationName\":\"volumeSize\",\"type\":\"integer\"},\"OwnerAlias\":{\"locationName\":\"ownerAlias\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"Encrypted\":{\"locationName\":\"encrypted\",\"type\":\"boolean\"},\"KmsKeyId\":{\"locationName\":\"kmsKeyId\"},\"DataEncryptionKeyId\":{\"locationName\":\"dataEncryptionKeyId\"}}},\"S5j\":{\"type\":\"structure\",\"members\":{\"OwnerId\":{\"locationName\":\"ownerId\"},\"Bucket\":{\"locationName\":\"bucket\"},\"Prefix\":{\"locationName\":\"prefix\"},\"State\":{\"locationName\":\"state\"},\"Fault\":{\"shape\":\"S5l\",\"locationName\":\"fault\"}}},\"S5l\":{\"type\":\"structure\",\"members\":{\"Code\":{\"locationName\":\"code\"},\"Message\":{\"locationName\":\"message\"}}},\"S5o\":{\"type\":\"structure\",\"members\":{\"SubnetId\":{\"locationName\":\"subnetId\"},\"State\":{\"locationName\":\"state\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"CidrBlock\":{\"locationName\":\"cidrBlock\"},\"AvailableIpAddressCount\":{\"locationName\":\"availableIpAddressCount\",\"type\":\"integer\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"DefaultForAz\":{\"locationName\":\"defaultForAz\",\"type\":\"boolean\"},\"MapPublicIpOnLaunch\":{\"locationName\":\"mapPublicIpOnLaunch\",\"type\":\"boolean\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}},\"S5r\":{\"type\":\"list\",\"member\":{}},\"S5t\":{\"type\":\"structure\",\"members\":{\"VolumeId\":{\"locationName\":\"volumeId\"},\"Size\":{\"locationName\":\"size\",\"type\":\"integer\"},\"SnapshotId\":{\"locationName\":\"snapshotId\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"State\":{\"locationName\":\"status\"},\"CreateTime\":{\"locationName\":\"createTime\",\"type\":\"timestamp\"},\"Attachments\":{\"locationName\":\"attachmentSet\",\"type\":\"list\",\"member\":{\"shape\":\"Sy\",\"locationName\":\"item\"}},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"VolumeType\":{\"locationName\":\"volumeType\"},\"Iops\":{\"locationName\":\"iops\",\"type\":\"integer\"},\"Encrypted\":{\"locationName\":\"encrypted\",\"type\":\"boolean\"},\"KmsKeyId\":{\"locationName\":\"kmsKeyId\"}}},\"S5z\":{\"type\":\"structure\",\"members\":{\"VpcId\":{\"locationName\":\"vpcId\"},\"State\":{\"locationName\":\"state\"},\"CidrBlock\":{\"locationName\":\"cidrBlock\"},\"DhcpOptionsId\":{\"locationName\":\"dhcpOptionsId\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"InstanceTenancy\":{\"locationName\":\"instanceTenancy\"},\"IsDefault\":{\"locationName\":\"isDefault\",\"type\":\"boolean\"}}},\"S63\":{\"type\":\"structure\",\"members\":{\"VpcEndpointId\":{\"locationName\":\"vpcEndpointId\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"ServiceName\":{\"locationName\":\"serviceName\"},\"State\":{\"locationName\":\"state\"},\"PolicyDocument\":{\"locationName\":\"policyDocument\"},\"RouteTableIds\":{\"shape\":\"S26\",\"locationName\":\"routeTableIdSet\"},\"CreationTimestamp\":{\"locationName\":\"creationTimestamp\",\"type\":\"timestamp\"}}},\"S6a\":{\"type\":\"structure\",\"members\":{\"VpnConnectionId\":{\"locationName\":\"vpnConnectionId\"},\"State\":{\"locationName\":\"state\"},\"CustomerGatewayConfiguration\":{\"locationName\":\"customerGatewayConfiguration\"},\"Type\":{\"locationName\":\"type\"},\"CustomerGatewayId\":{\"locationName\":\"customerGatewayId\"},\"VpnGatewayId\":{\"locationName\":\"vpnGatewayId\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"VgwTelemetry\":{\"locationName\":\"vgwTelemetry\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"OutsideIpAddress\":{\"locationName\":\"outsideIpAddress\"},\"Status\":{\"locationName\":\"status\"},\"LastStatusChange\":{\"locationName\":\"lastStatusChange\",\"type\":\"timestamp\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"AcceptedRouteCount\":{\"locationName\":\"acceptedRouteCount\",\"type\":\"integer\"}}}},\"Options\":{\"locationName\":\"options\",\"type\":\"structure\",\"members\":{\"StaticRoutesOnly\":{\"locationName\":\"staticRoutesOnly\",\"type\":\"boolean\"}}},\"Routes\":{\"locationName\":\"routes\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"DestinationCidrBlock\":{\"locationName\":\"destinationCidrBlock\"},\"Source\":{\"locationName\":\"source\"},\"State\":{\"locationName\":\"state\"}}}}}},\"S6m\":{\"type\":\"structure\",\"members\":{\"VpnGatewayId\":{\"locationName\":\"vpnGatewayId\"},\"State\":{\"locationName\":\"state\"},\"Type\":{\"locationName\":\"type\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"VpcAttachments\":{\"locationName\":\"attachments\",\"type\":\"list\",\"member\":{\"shape\":\"S12\",\"locationName\":\"item\"}},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}},\"S7r\":{\"type\":\"list\",\"member\":{\"locationName\":\"Filter\",\"type\":\"structure\",\"members\":{\"Name\":{},\"Values\":{\"shape\":\"S26\",\"locationName\":\"Value\"}}}},\"S8a\":{\"type\":\"list\",\"member\":{\"locationName\":\"InstanceId\"}},\"S8i\":{\"type\":\"structure\",\"required\":[\"ConversionTaskId\",\"State\"],\"members\":{\"ConversionTaskId\":{\"locationName\":\"conversionTaskId\"},\"ExpirationTime\":{\"locationName\":\"expirationTime\"},\"ImportInstance\":{\"locationName\":\"importInstance\",\"type\":\"structure\",\"required\":[\"Volumes\"],\"members\":{\"Volumes\":{\"locationName\":\"volumes\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"required\":[\"BytesConverted\",\"AvailabilityZone\",\"Image\",\"Volume\",\"Status\"],\"members\":{\"BytesConverted\":{\"locationName\":\"bytesConverted\",\"type\":\"long\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"Image\":{\"shape\":\"S8m\",\"locationName\":\"image\"},\"Volume\":{\"shape\":\"S8n\",\"locationName\":\"volume\"},\"Status\":{\"locationName\":\"status\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"Description\":{\"locationName\":\"description\"}}}},\"InstanceId\":{\"locationName\":\"instanceId\"},\"Platform\":{\"locationName\":\"platform\"},\"Description\":{\"locationName\":\"description\"}}},\"ImportVolume\":{\"locationName\":\"importVolume\",\"type\":\"structure\",\"required\":[\"BytesConverted\",\"AvailabilityZone\",\"Image\",\"Volume\"],\"members\":{\"BytesConverted\":{\"locationName\":\"bytesConverted\",\"type\":\"long\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"Description\":{\"locationName\":\"description\"},\"Image\":{\"shape\":\"S8m\",\"locationName\":\"image\"},\"Volume\":{\"shape\":\"S8n\",\"locationName\":\"volume\"}}},\"State\":{\"locationName\":\"state\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"}}},\"S8m\":{\"type\":\"structure\",\"required\":[\"Format\",\"Size\",\"ImportManifestUrl\"],\"members\":{\"Format\":{\"locationName\":\"format\"},\"Size\":{\"locationName\":\"size\",\"type\":\"long\"},\"ImportManifestUrl\":{\"locationName\":\"importManifestUrl\"},\"Checksum\":{\"locationName\":\"checksum\"}}},\"S8n\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Size\":{\"locationName\":\"size\",\"type\":\"long\"},\"Id\":{\"locationName\":\"id\"}}},\"S98\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\"}},\"S9q\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"UserId\":{\"locationName\":\"userId\"},\"Group\":{\"locationName\":\"group\"}}}},\"S9t\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ProductCodeId\":{\"locationName\":\"productCode\"},\"ProductCodeType\":{\"locationName\":\"type\"}}}},\"S9w\":{\"type\":\"list\",\"member\":{\"shape\":\"S3d\",\"locationName\":\"item\"}},\"S9z\":{\"type\":\"list\",\"member\":{\"locationName\":\"Owner\"}},\"Sa7\":{\"type\":\"structure\",\"members\":{\"Code\":{\"locationName\":\"code\"},\"Message\":{\"locationName\":\"message\"}}},\"Sac\":{\"type\":\"list\",\"member\":{\"locationName\":\"ImportTaskId\"}},\"Sag\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"DiskImageSize\":{\"locationName\":\"diskImageSize\",\"type\":\"double\"},\"Description\":{\"locationName\":\"description\"},\"Format\":{\"locationName\":\"format\"},\"Url\":{\"locationName\":\"url\"},\"UserBucket\":{\"shape\":\"Sai\",\"locationName\":\"userBucket\"},\"DeviceName\":{\"locationName\":\"deviceName\"},\"SnapshotId\":{\"locationName\":\"snapshotId\"},\"Progress\":{\"locationName\":\"progress\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"Status\":{\"locationName\":\"status\"}}}},\"Sai\":{\"type\":\"structure\",\"members\":{\"S3Bucket\":{\"locationName\":\"s3Bucket\"},\"S3Key\":{\"locationName\":\"s3Key\"}}},\"San\":{\"type\":\"structure\",\"members\":{\"DiskImageSize\":{\"locationName\":\"diskImageSize\",\"type\":\"double\"},\"Description\":{\"locationName\":\"description\"},\"Format\":{\"locationName\":\"format\"},\"Url\":{\"locationName\":\"url\"},\"UserBucket\":{\"shape\":\"Sai\",\"locationName\":\"userBucket\"},\"SnapshotId\":{\"locationName\":\"snapshotId\"},\"Progress\":{\"locationName\":\"progress\"},\"StatusMessage\":{\"locationName\":\"statusMessage\"},\"Status\":{\"locationName\":\"status\"}}},\"Sar\":{\"type\":\"structure\",\"members\":{\"Value\":{\"locationName\":\"value\",\"type\":\"boolean\"}}},\"Sas\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"DeviceName\":{\"locationName\":\"deviceName\"},\"Ebs\":{\"locationName\":\"ebs\",\"type\":\"structure\",\"members\":{\"VolumeId\":{\"locationName\":\"volumeId\"},\"Status\":{\"locationName\":\"status\"},\"AttachTime\":{\"locationName\":\"attachTime\",\"type\":\"timestamp\"},\"DeleteOnTermination\":{\"locationName\":\"deleteOnTermination\",\"type\":\"boolean\"}}}}}},\"Sb2\":{\"type\":\"structure\",\"members\":{\"Code\":{\"locationName\":\"code\",\"type\":\"integer\"},\"Name\":{\"locationName\":\"name\"}}},\"Sb4\":{\"type\":\"structure\",\"members\":{\"Status\":{\"locationName\":\"status\"},\"Details\":{\"locationName\":\"details\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Name\":{\"locationName\":\"name\"},\"Status\":{\"locationName\":\"status\"},\"ImpairedSince\":{\"locationName\":\"impairedSince\",\"type\":\"timestamp\"}}}}}},\"Sbd\":{\"type\":\"structure\",\"members\":{\"ReservationId\":{\"locationName\":\"reservationId\"},\"OwnerId\":{\"locationName\":\"ownerId\"},\"RequesterId\":{\"locationName\":\"requesterId\"},\"Groups\":{\"shape\":\"S4m\",\"locationName\":\"groupSet\"},\"Instances\":{\"locationName\":\"instancesSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"ImageId\":{\"locationName\":\"imageId\"},\"State\":{\"shape\":\"Sb2\",\"locationName\":\"instanceState\"},\"PrivateDnsName\":{\"locationName\":\"privateDnsName\"},\"PublicDnsName\":{\"locationName\":\"dnsName\"},\"StateTransitionReason\":{\"locationName\":\"reason\"},\"KeyName\":{\"locationName\":\"keyName\"},\"AmiLaunchIndex\":{\"locationName\":\"amiLaunchIndex\",\"type\":\"integer\"},\"ProductCodes\":{\"shape\":\"S9t\",\"locationName\":\"productCodes\"},\"InstanceType\":{\"locationName\":\"instanceType\"},\"LaunchTime\":{\"locationName\":\"launchTime\",\"type\":\"timestamp\"},\"Placement\":{\"shape\":\"Sbh\",\"locationName\":\"placement\"},\"KernelId\":{\"locationName\":\"kernelId\"},\"RamdiskId\":{\"locationName\":\"ramdiskId\"},\"Platform\":{\"locationName\":\"platform\"},\"Monitoring\":{\"shape\":\"Sbi\",\"locationName\":\"monitoring\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"PublicIpAddress\":{\"locationName\":\"ipAddress\"},\"StateReason\":{\"shape\":\"Sa7\",\"locationName\":\"stateReason\"},\"Architecture\":{\"locationName\":\"architecture\"},\"RootDeviceType\":{\"locationName\":\"rootDeviceType\"},\"RootDeviceName\":{\"locationName\":\"rootDeviceName\"},\"BlockDeviceMappings\":{\"shape\":\"Sas\",\"locationName\":\"blockDeviceMapping\"},\"VirtualizationType\":{\"locationName\":\"virtualizationType\"},\"InstanceLifecycle\":{\"locationName\":\"instanceLifecycle\"},\"SpotInstanceRequestId\":{\"locationName\":\"spotInstanceRequestId\"},\"ClientToken\":{\"locationName\":\"clientToken\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"SecurityGroups\":{\"shape\":\"S4m\",\"locationName\":\"groupSet\"},\"SourceDestCheck\":{\"locationName\":\"sourceDestCheck\",\"type\":\"boolean\"},\"Hypervisor\":{\"locationName\":\"hypervisor\"},\"NetworkInterfaces\":{\"locationName\":\"networkInterfaceSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"VpcId\":{\"locationName\":\"vpcId\"},\"Description\":{\"locationName\":\"description\"},\"OwnerId\":{\"locationName\":\"ownerId\"},\"Status\":{\"locationName\":\"status\"},\"MacAddress\":{\"locationName\":\"macAddress\"},\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"PrivateDnsName\":{\"locationName\":\"privateDnsName\"},\"SourceDestCheck\":{\"locationName\":\"sourceDestCheck\",\"type\":\"boolean\"},\"Groups\":{\"shape\":\"S4m\",\"locationName\":\"groupSet\"},\"Attachment\":{\"locationName\":\"attachment\",\"type\":\"structure\",\"members\":{\"AttachmentId\":{\"locationName\":\"attachmentId\"},\"DeviceIndex\":{\"locationName\":\"deviceIndex\",\"type\":\"integer\"},\"Status\":{\"locationName\":\"status\"},\"AttachTime\":{\"locationName\":\"attachTime\",\"type\":\"timestamp\"},\"DeleteOnTermination\":{\"locationName\":\"deleteOnTermination\",\"type\":\"boolean\"}}},\"Association\":{\"shape\":\"Sbo\",\"locationName\":\"association\"},\"PrivateIpAddresses\":{\"locationName\":\"privateIpAddressesSet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"PrivateDnsName\":{\"locationName\":\"privateDnsName\"},\"Primary\":{\"locationName\":\"primary\",\"type\":\"boolean\"},\"Association\":{\"shape\":\"Sbo\",\"locationName\":\"association\"}}}}}}},\"IamInstanceProfile\":{\"locationName\":\"iamInstanceProfile\",\"type\":\"structure\",\"members\":{\"Arn\":{\"locationName\":\"arn\"},\"Id\":{\"locationName\":\"id\"}}},\"EbsOptimized\":{\"locationName\":\"ebsOptimized\",\"type\":\"boolean\"},\"SriovNetSupport\":{\"locationName\":\"sriovNetSupport\"}}}}}},\"Sbh\":{\"type\":\"structure\",\"members\":{\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"GroupName\":{\"locationName\":\"groupName\"},\"Tenancy\":{\"locationName\":\"tenancy\"},\"HostId\":{\"locationName\":\"hostId\"},\"Affinity\":{\"locationName\":\"affinity\"}}},\"Sbi\":{\"type\":\"structure\",\"members\":{\"State\":{\"locationName\":\"state\"}}},\"Sbo\":{\"type\":\"structure\",\"members\":{\"PublicIp\":{\"locationName\":\"publicIp\"},\"PublicDnsName\":{\"locationName\":\"publicDnsName\"},\"IpOwnerId\":{\"locationName\":\"ipOwnerId\"}}},\"Scy\":{\"type\":\"list\",\"member\":{\"locationName\":\"ReservedInstancesId\"}},\"Sd6\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"Frequency\":{\"locationName\":\"frequency\"},\"Amount\":{\"locationName\":\"amount\",\"type\":\"double\"}}}},\"Sdk\":{\"type\":\"structure\",\"members\":{\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"Platform\":{\"locationName\":\"platform\"},\"InstanceCount\":{\"locationName\":\"instanceCount\",\"type\":\"integer\"},\"InstanceType\":{\"locationName\":\"instanceType\"}}},\"Se2\":{\"type\":\"structure\",\"members\":{\"Frequency\":{\"locationName\":\"frequency\"},\"Interval\":{\"locationName\":\"interval\",\"type\":\"integer\"},\"OccurrenceDaySet\":{\"locationName\":\"occurrenceDaySet\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"integer\"}},\"OccurrenceRelativeToEnd\":{\"locationName\":\"occurrenceRelativeToEnd\",\"type\":\"boolean\"},\"OccurrenceUnit\":{\"locationName\":\"occurrenceUnit\"}}},\"Se9\":{\"type\":\"structure\",\"members\":{\"ScheduledInstanceId\":{\"locationName\":\"scheduledInstanceId\"},\"InstanceType\":{\"locationName\":\"instanceType\"},\"Platform\":{\"locationName\":\"platform\"},\"NetworkPlatform\":{\"locationName\":\"networkPlatform\"},\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"SlotDurationInHours\":{\"locationName\":\"slotDurationInHours\",\"type\":\"integer\"},\"Recurrence\":{\"shape\":\"Se2\",\"locationName\":\"recurrence\"},\"PreviousSlotEndTime\":{\"locationName\":\"previousSlotEndTime\",\"type\":\"timestamp\"},\"NextSlotStartTime\":{\"locationName\":\"nextSlotStartTime\",\"type\":\"timestamp\"},\"HourlyPrice\":{\"locationName\":\"hourlyPrice\"},\"TotalScheduledInstanceHours\":{\"locationName\":\"totalScheduledInstanceHours\",\"type\":\"integer\"},\"InstanceCount\":{\"locationName\":\"instanceCount\",\"type\":\"integer\"},\"TermStartDate\":{\"locationName\":\"termStartDate\",\"type\":\"timestamp\"},\"TermEndDate\":{\"locationName\":\"termEndDate\",\"type\":\"timestamp\"},\"CreateDate\":{\"locationName\":\"createDate\",\"type\":\"timestamp\"}}},\"Seb\":{\"type\":\"list\",\"member\":{\"locationName\":\"GroupName\"}},\"Sei\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"UserId\":{\"locationName\":\"userId\"},\"Group\":{\"locationName\":\"group\"}}}},\"Sf5\":{\"type\":\"structure\",\"required\":[\"SpotPrice\",\"TargetCapacity\",\"IamFleetRole\",\"LaunchSpecifications\"],\"members\":{\"ClientToken\":{\"locationName\":\"clientToken\"},\"SpotPrice\":{\"locationName\":\"spotPrice\"},\"TargetCapacity\":{\"locationName\":\"targetCapacity\",\"type\":\"integer\"},\"ValidFrom\":{\"locationName\":\"validFrom\",\"type\":\"timestamp\"},\"ValidUntil\":{\"locationName\":\"validUntil\",\"type\":\"timestamp\"},\"TerminateInstancesWithExpiration\":{\"locationName\":\"terminateInstancesWithExpiration\",\"type\":\"boolean\"},\"IamFleetRole\":{\"locationName\":\"iamFleetRole\"},\"LaunchSpecifications\":{\"locationName\":\"launchSpecifications\",\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"ImageId\":{\"locationName\":\"imageId\"},\"KeyName\":{\"locationName\":\"keyName\"},\"SecurityGroups\":{\"shape\":\"S4m\",\"locationName\":\"groupSet\"},\"UserData\":{\"locationName\":\"userData\"},\"AddressingType\":{\"locationName\":\"addressingType\"},\"InstanceType\":{\"locationName\":\"instanceType\"},\"Placement\":{\"shape\":\"Sf8\",\"locationName\":\"placement\"},\"KernelId\":{\"locationName\":\"kernelId\"},\"RamdiskId\":{\"locationName\":\"ramdiskId\"},\"BlockDeviceMappings\":{\"shape\":\"S9w\",\"locationName\":\"blockDeviceMapping\"},\"Monitoring\":{\"locationName\":\"monitoring\",\"type\":\"structure\",\"members\":{\"Enabled\":{\"locationName\":\"enabled\",\"type\":\"boolean\"}}},\"SubnetId\":{\"locationName\":\"subnetId\"},\"NetworkInterfaces\":{\"shape\":\"Sfa\",\"locationName\":\"networkInterfaceSet\"},\"IamInstanceProfile\":{\"shape\":\"Sfc\",\"locationName\":\"iamInstanceProfile\"},\"EbsOptimized\":{\"locationName\":\"ebsOptimized\",\"type\":\"boolean\"},\"WeightedCapacity\":{\"locationName\":\"weightedCapacity\",\"type\":\"double\"},\"SpotPrice\":{\"locationName\":\"spotPrice\"}}}},\"ExcessCapacityTerminationPolicy\":{\"locationName\":\"excessCapacityTerminationPolicy\"},\"AllocationStrategy\":{\"locationName\":\"allocationStrategy\"}}},\"Sf8\":{\"type\":\"structure\",\"members\":{\"AvailabilityZone\":{\"locationName\":\"availabilityZone\"},\"GroupName\":{\"locationName\":\"groupName\"}}},\"Sfa\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"NetworkInterfaceId\":{\"locationName\":\"networkInterfaceId\"},\"DeviceIndex\":{\"locationName\":\"deviceIndex\",\"type\":\"integer\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"Description\":{\"locationName\":\"description\"},\"PrivateIpAddress\":{\"locationName\":\"privateIpAddress\"},\"Groups\":{\"shape\":\"S4g\",\"locationName\":\"SecurityGroupId\"},\"DeleteOnTermination\":{\"locationName\":\"deleteOnTermination\",\"type\":\"boolean\"},\"PrivateIpAddresses\":{\"shape\":\"S4h\",\"locationName\":\"privateIpAddressesSet\",\"queryName\":\"PrivateIpAddresses\"},\"SecondaryPrivateIpAddressCount\":{\"locationName\":\"secondaryPrivateIpAddressCount\",\"type\":\"integer\"},\"AssociatePublicIpAddress\":{\"locationName\":\"associatePublicIpAddress\",\"type\":\"boolean\"}}}},\"Sfc\":{\"type\":\"structure\",\"members\":{\"Arn\":{\"locationName\":\"arn\"},\"Name\":{\"locationName\":\"name\"}}},\"Sfh\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"SpotInstanceRequestId\":{\"locationName\":\"spotInstanceRequestId\"},\"SpotPrice\":{\"locationName\":\"spotPrice\"},\"Type\":{\"locationName\":\"type\"},\"State\":{\"locationName\":\"state\"},\"Fault\":{\"shape\":\"S5l\",\"locationName\":\"fault\"},\"Status\":{\"locationName\":\"status\",\"type\":\"structure\",\"members\":{\"Code\":{\"locationName\":\"code\"},\"UpdateTime\":{\"locationName\":\"updateTime\",\"type\":\"timestamp\"},\"Message\":{\"locationName\":\"message\"}}},\"ValidFrom\":{\"locationName\":\"validFrom\",\"type\":\"timestamp\"},\"ValidUntil\":{\"locationName\":\"validUntil\",\"type\":\"timestamp\"},\"LaunchGroup\":{\"locationName\":\"launchGroup\"},\"AvailabilityZoneGroup\":{\"locationName\":\"availabilityZoneGroup\"},\"LaunchSpecification\":{\"locationName\":\"launchSpecification\",\"type\":\"structure\",\"members\":{\"ImageId\":{\"locationName\":\"imageId\"},\"KeyName\":{\"locationName\":\"keyName\"},\"SecurityGroups\":{\"shape\":\"S4m\",\"locationName\":\"groupSet\"},\"UserData\":{\"locationName\":\"userData\"},\"AddressingType\":{\"locationName\":\"addressingType\"},\"InstanceType\":{\"locationName\":\"instanceType\"},\"Placement\":{\"shape\":\"Sf8\",\"locationName\":\"placement\"},\"KernelId\":{\"locationName\":\"kernelId\"},\"RamdiskId\":{\"locationName\":\"ramdiskId\"},\"BlockDeviceMappings\":{\"shape\":\"S9w\",\"locationName\":\"blockDeviceMapping\"},\"SubnetId\":{\"locationName\":\"subnetId\"},\"NetworkInterfaces\":{\"shape\":\"Sfa\",\"locationName\":\"networkInterfaceSet\"},\"IamInstanceProfile\":{\"shape\":\"Sfc\",\"locationName\":\"iamInstanceProfile\"},\"EbsOptimized\":{\"locationName\":\"ebsOptimized\",\"type\":\"boolean\"},\"Monitoring\":{\"shape\":\"Sfn\",\"locationName\":\"monitoring\"}}},\"InstanceId\":{\"locationName\":\"instanceId\"},\"CreateTime\":{\"locationName\":\"createTime\",\"type\":\"timestamp\"},\"ProductDescription\":{\"locationName\":\"productDescription\"},\"BlockDurationMinutes\":{\"locationName\":\"blockDurationMinutes\",\"type\":\"integer\"},\"ActualBlockHourlyPrice\":{\"locationName\":\"actualBlockHourlyPrice\"},\"Tags\":{\"shape\":\"Sa\",\"locationName\":\"tagSet\"},\"LaunchedAvailabilityZone\":{\"locationName\":\"launchedAvailabilityZone\"}}}},\"Sfn\":{\"type\":\"structure\",\"required\":[\"Enabled\"],\"members\":{\"Enabled\":{\"locationName\":\"enabled\",\"type\":\"boolean\"}}},\"Sg7\":{\"type\":\"list\",\"member\":{\"locationName\":\"VolumeId\"}},\"Sgr\":{\"type\":\"list\",\"member\":{\"locationName\":\"VpcId\"}},\"Sib\":{\"type\":\"structure\",\"members\":{\"S3Bucket\":{},\"S3Key\":{}}},\"Sic\":{\"type\":\"structure\",\"members\":{\"UploadStart\":{\"type\":\"timestamp\"},\"UploadEnd\":{\"type\":\"timestamp\"},\"UploadSize\":{\"type\":\"double\"},\"Comment\":{}}},\"Sig\":{\"type\":\"list\",\"member\":{\"locationName\":\"SecurityGroup\"}},\"Sil\":{\"type\":\"structure\",\"required\":[\"Format\",\"Bytes\",\"ImportManifestUrl\"],\"members\":{\"Format\":{\"locationName\":\"format\"},\"Bytes\":{\"locationName\":\"bytes\",\"type\":\"long\"},\"ImportManifestUrl\":{\"locationName\":\"importManifestUrl\"}}},\"Sim\":{\"type\":\"structure\",\"required\":[\"Size\"],\"members\":{\"Size\":{\"locationName\":\"size\",\"type\":\"long\"}}},\"Six\":{\"type\":\"list\",\"member\":{\"shape\":\"S39\",\"locationName\":\"item\"}},\"Sj1\":{\"type\":\"list\",\"member\":{\"locationName\":\"UserId\"}},\"Sju\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"Monitoring\":{\"shape\":\"Sbi\",\"locationName\":\"monitoring\"}}}},\"Sl6\":{\"type\":\"list\",\"member\":{\"locationName\":\"SecurityGroupId\"}},\"Sll\":{\"type\":\"list\",\"member\":{\"locationName\":\"item\",\"type\":\"structure\",\"members\":{\"InstanceId\":{\"locationName\":\"instanceId\"},\"CurrentState\":{\"shape\":\"Sb2\",\"locationName\":\"currentState\"},\"PreviousState\":{\"shape\":\"Sb2\",\"locationName\":\"previousState\"}}}}},\"paginators\":{\"DescribeAccountAttributes\":{\"result_key\":\"AccountAttributes\"},\"DescribeAddresses\":{\"result_key\":\"Addresses\"},\"DescribeAvailabilityZones\":{\"result_key\":\"AvailabilityZones\"},\"DescribeBundleTasks\":{\"result_key\":\"BundleTasks\"},\"DescribeConversionTasks\":{\"result_key\":\"ConversionTasks\"},\"DescribeCustomerGateways\":{\"result_key\":\"CustomerGateways\"},\"DescribeDhcpOptions\":{\"result_key\":\"DhcpOptions\"},\"DescribeExportTasks\":{\"result_key\":\"ExportTasks\"},\"DescribeImages\":{\"result_key\":\"Images\"},\"DescribeInstanceStatus\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"InstanceStatuses\"},\"DescribeInstances\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"Reservations\"},\"DescribeInternetGateways\":{\"result_key\":\"InternetGateways\"},\"DescribeKeyPairs\":{\"result_key\":\"KeyPairs\"},\"DescribeNetworkAcls\":{\"result_key\":\"NetworkAcls\"},\"DescribeNetworkInterfaces\":{\"result_key\":\"NetworkInterfaces\"},\"DescribePlacementGroups\":{\"result_key\":\"PlacementGroups\"},\"DescribeRegions\":{\"result_key\":\"Regions\"},\"DescribeReservedInstances\":{\"result_key\":\"ReservedInstances\"},\"DescribeReservedInstancesListings\":{\"result_key\":\"ReservedInstancesListings\"},\"DescribeReservedInstancesOfferings\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"ReservedInstancesOfferings\"},\"DescribeReservedInstancesModifications\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"result_key\":\"ReservedInstancesModifications\"},\"DescribeRouteTables\":{\"result_key\":\"RouteTables\"},\"DescribeSecurityGroups\":{\"result_key\":\"SecurityGroups\"},\"DescribeSnapshots\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"Snapshots\"},\"DescribeSpotInstanceRequests\":{\"result_key\":\"SpotInstanceRequests\"},\"DescribeSpotPriceHistory\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"SpotPriceHistory\"},\"DescribeSubnets\":{\"result_key\":\"Subnets\"},\"DescribeTags\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"Tags\"},\"DescribeVolumeStatus\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"VolumeStatuses\"},\"DescribeVolumes\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"Volumes\"},\"DescribeVpcs\":{\"result_key\":\"Vpcs\"},\"DescribeVpcPeeringConnections\":{\"result_key\":\"VpcPeeringConnections\"},\"DescribeVpnConnections\":{\"result_key\":\"VpnConnections\"},\"DescribeVpnGateways\":{\"result_key\":\"VpnGateways\"}},\"waiters\":{\"__default__\":{\"interval\":15,\"max_attempts\":40,\"acceptor_type\":\"output\"},\"__InstanceState\":{\"operation\":\"DescribeInstances\",\"acceptor_path\":\"Reservations[].Instances[].State.Name\"},\"__InstanceStatus\":{\"operation\":\"DescribeInstanceStatus\",\"success_value\":\"ok\"},\"SystemStatusOk\":{\"extends\":\"__InstanceStatus\",\"acceptor_path\":\"InstanceStatuses[].SystemStatus.Status\"},\"InstanceStatusOk\":{\"extends\":\"__InstanceStatus\",\"acceptor_path\":\"InstanceStatuses[].InstanceStatus.Status\"},\"ImageAvailable\":{\"operation\":\"DescribeImages\",\"acceptor_path\":\"Images[].State\",\"success_value\":\"available\",\"failure_value\":[\"failed\"]},\"InstanceRunning\":{\"extends\":\"__InstanceState\",\"success_value\":\"running\",\"failure_value\":[\"shutting-down\",\"terminated\",\"stopping\"]},\"InstanceStopped\":{\"extends\":\"__InstanceState\",\"success_value\":\"stopped\",\"failure_value\":[\"pending\",\"terminated\"]},\"InstanceTerminated\":{\"extends\":\"__InstanceState\",\"success_value\":\"terminated\",\"failure_value\":[\"pending\",\"stopping\"]},\"__ExportTaskState\":{\"operation\":\"DescribeExportTasks\",\"acceptor_path\":\"ExportTasks[].State\"},\"ExportTaskCompleted\":{\"extends\":\"__ExportTaskState\",\"success_value\":\"completed\"},\"ExportTaskCancelled\":{\"extends\":\"__ExportTaskState\",\"success_value\":\"cancelled\"},\"SnapshotCompleted\":{\"operation\":\"DescribeSnapshots\",\"success_path\":\"Snapshots[].State\",\"success_value\":\"completed\"},\"SubnetAvailable\":{\"operation\":\"DescribeSubnets\",\"success_path\":\"Subnets[].State\",\"success_value\":\"available\"},\"__VolumeStatus\":{\"operation\":\"DescribeVolumes\",\"acceptor_path\":\"Volumes[].State\"},\"VolumeAvailable\":{\"extends\":\"__VolumeStatus\",\"success_value\":\"available\",\"failure_value\":[\"deleted\"]},\"VolumeInUse\":{\"extends\":\"__VolumeStatus\",\"success_value\":\"in-use\",\"failure_value\":[\"deleted\"]},\"VolumeDeleted\":{\"extends\":\"__VolumeStatus\",\"success_type\":\"error\",\"success_value\":\"InvalidVolume.NotFound\"},\"VpcAvailable\":{\"operation\":\"DescribeVpcs\",\"success_path\":\"Vpcs[].State\",\"success_value\":\"available\"},\"__VpnConnectionState\":{\"operation\":\"DescribeVpnConnections\",\"acceptor_path\":\"VpnConnections[].State\"},\"VpnConnectionAvailable\":{\"extends\":\"__VpnConnectionState\",\"success_value\":\"available\",\"failure_value\":[\"deleting\",\"deleted\"]},\"VpnConnectionDeleted\":{\"extends\":\"__VpnConnectionState\",\"success_value\":\"deleted\",\"failure_value\":[\"pending\"]},\"BundleTaskComplete\":{\"operation\":\"DescribeBundleTasks\",\"acceptor_path\":\"BundleTasks[].State\",\"success_value\":\"complete\",\"failure_value\":[\"failed\"]},\"__ConversionTaskState\":{\"operation\":\"DescribeConversionTasks\",\"acceptor_path\":\"ConversionTasks[].State\"},\"ConversionTaskCompleted\":{\"extends\":\"__ConversionTaskState\",\"success_value\":\"completed\",\"failure_value\":[\"cancelled\",\"cancelling\"]},\"ConversionTaskCancelled\":{\"extends\":\"__ConversionTaskState\",\"success_value\":\"cancelled\"},\"__CustomerGatewayState\":{\"operation\":\"DescribeCustomerGateways\",\"acceptor_path\":\"CustomerGateways[].State\"},\"CustomerGatewayAvailable\":{\"extends\":\"__CustomerGatewayState\",\"success_value\":\"available\",\"failure_value\":[\"deleted\",\"deleting\"]},\"ConversionTaskDeleted\":{\"extends\":\"__CustomerGatewayState\",\"success_value\":\"deleted\"},\"__SpotInstanceRequestState\":{\"operation\":\"DescribeSpotInstanceRequests\",\"acceptor_path\":\"SpotInstanceRequests[].Status.Code\"},\"SpotInstanceRequestFulfilled\":{\"extends\":\"__SpotInstanceRequestState\",\"success_value\":\"fulfilled\",\"failure_value\":[\"schedule-expired\",\"canceled-before-fulfillment\",\"bad-parameters\",\"system-error\"]}}};\nAWS.apiLoader.services['elastictranscoder'] = {};                                                                      // 77\nAWS.ElasticTranscoder = AWS.Service.defineService('elastictranscoder', [ '2012-09-25' ]);                              // 78\n                                                                                                                       // 79\nAWS.apiLoader.services['elastictranscoder']['2012-09-25'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2012-09-25\",\"endpointPrefix\":\"elastictranscoder\",\"serviceFullName\":\"Amazon Elastic Transcoder\",\"signatureVersion\":\"v4\",\"protocol\":\"rest-json\"},\"operations\":{\"CancelJob\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2012-09-25/jobs/{Id}\",\"responseCode\":202},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"CreateJob\":{\"http\":{\"requestUri\":\"/2012-09-25/jobs\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"PipelineId\",\"Input\"],\"members\":{\"PipelineId\":{},\"Input\":{\"shape\":\"S5\"},\"Output\":{\"shape\":\"Sk\"},\"Outputs\":{\"type\":\"list\",\"member\":{\"shape\":\"Sk\"}},\"OutputKeyPrefix\":{},\"Playlists\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"Format\":{},\"OutputKeys\":{\"shape\":\"S1i\"},\"HlsContentProtection\":{\"shape\":\"S1j\"},\"PlayReadyDrm\":{\"shape\":\"S1n\"}}}},\"UserMetadata\":{\"shape\":\"S1s\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Job\":{\"shape\":\"S1v\"}}}},\"CreatePipeline\":{\"http\":{\"requestUri\":\"/2012-09-25/pipelines\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"InputBucket\",\"Role\"],\"members\":{\"Name\":{},\"InputBucket\":{},\"OutputBucket\":{},\"Role\":{},\"AwsKmsKeyArn\":{},\"Notifications\":{\"shape\":\"S27\"},\"ContentConfig\":{\"shape\":\"S29\"},\"ThumbnailConfig\":{\"shape\":\"S29\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Pipeline\":{\"shape\":\"S2i\"},\"Warnings\":{\"shape\":\"S2k\"}}}},\"CreatePreset\":{\"http\":{\"requestUri\":\"/2012-09-25/presets\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"Container\"],\"members\":{\"Name\":{},\"Description\":{},\"Container\":{},\"Video\":{\"shape\":\"S2o\"},\"Audio\":{\"shape\":\"S34\"},\"Thumbnails\":{\"shape\":\"S3f\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Preset\":{\"shape\":\"S3j\"},\"Warning\":{}}}},\"DeletePipeline\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2012-09-25/pipelines/{Id}\",\"responseCode\":202},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"DeletePreset\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2012-09-25/presets/{Id}\",\"responseCode\":202},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"ListJobsByPipeline\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2012-09-25/jobsByPipeline/{PipelineId}\"},\"input\":{\"type\":\"structure\",\"required\":[\"PipelineId\"],\"members\":{\"PipelineId\":{\"location\":\"uri\",\"locationName\":\"PipelineId\"},\"Ascending\":{\"location\":\"querystring\",\"locationName\":\"Ascending\"},\"PageToken\":{\"location\":\"querystring\",\"locationName\":\"PageToken\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Jobs\":{\"shape\":\"S3s\"},\"NextPageToken\":{}}}},\"ListJobsByStatus\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2012-09-25/jobsByStatus/{Status}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Status\"],\"members\":{\"Status\":{\"location\":\"uri\",\"locationName\":\"Status\"},\"Ascending\":{\"location\":\"querystring\",\"locationName\":\"Ascending\"},\"PageToken\":{\"location\":\"querystring\",\"locationName\":\"PageToken\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Jobs\":{\"shape\":\"S3s\"},\"NextPageToken\":{}}}},\"ListPipelines\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2012-09-25/pipelines\"},\"input\":{\"type\":\"structure\",\"members\":{\"Ascending\":{\"location\":\"querystring\",\"locationName\":\"Ascending\"},\"PageToken\":{\"location\":\"querystring\",\"locationName\":\"PageToken\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Pipelines\":{\"type\":\"list\",\"member\":{\"shape\":\"S2i\"}},\"NextPageToken\":{}}}},\"ListPresets\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2012-09-25/presets\"},\"input\":{\"type\":\"structure\",\"members\":{\"Ascending\":{\"location\":\"querystring\",\"locationName\":\"Ascending\"},\"PageToken\":{\"location\":\"querystring\",\"locationName\":\"PageToken\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Presets\":{\"type\":\"list\",\"member\":{\"shape\":\"S3j\"}},\"NextPageToken\":{}}}},\"ReadJob\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2012-09-25/jobs/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Job\":{\"shape\":\"S1v\"}}}},\"ReadPipeline\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2012-09-25/pipelines/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Pipeline\":{\"shape\":\"S2i\"},\"Warnings\":{\"shape\":\"S2k\"}}}},\"ReadPreset\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2012-09-25/presets/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Preset\":{\"shape\":\"S3j\"}}}},\"TestRole\":{\"http\":{\"requestUri\":\"/2012-09-25/roleTests\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"Role\",\"InputBucket\",\"OutputBucket\",\"Topics\"],\"members\":{\"Role\":{},\"InputBucket\":{},\"OutputBucket\":{},\"Topics\":{\"type\":\"list\",\"member\":{}}}},\"output\":{\"type\":\"structure\",\"members\":{\"Success\":{},\"Messages\":{\"type\":\"list\",\"member\":{}}}}},\"UpdatePipeline\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/2012-09-25/pipelines/{Id}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"Name\":{},\"InputBucket\":{},\"Role\":{},\"AwsKmsKeyArn\":{},\"Notifications\":{\"shape\":\"S27\"},\"ContentConfig\":{\"shape\":\"S29\"},\"ThumbnailConfig\":{\"shape\":\"S29\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Pipeline\":{\"shape\":\"S2i\"},\"Warnings\":{\"shape\":\"S2k\"}}}},\"UpdatePipelineNotifications\":{\"http\":{\"requestUri\":\"/2012-09-25/pipelines/{Id}/notifications\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\",\"Notifications\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"Notifications\":{\"shape\":\"S27\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Pipeline\":{\"shape\":\"S2i\"}}}},\"UpdatePipelineStatus\":{\"http\":{\"requestUri\":\"/2012-09-25/pipelines/{Id}/status\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\",\"Status\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"Status\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Pipeline\":{\"shape\":\"S2i\"}}}}},\"shapes\":{\"S5\":{\"type\":\"structure\",\"members\":{\"Key\":{},\"FrameRate\":{},\"Resolution\":{},\"AspectRatio\":{},\"Interlaced\":{},\"Container\":{},\"Encryption\":{\"shape\":\"Sc\"},\"DetectedProperties\":{\"type\":\"structure\",\"members\":{\"Width\":{\"type\":\"integer\"},\"Height\":{\"type\":\"integer\"},\"FrameRate\":{},\"FileSize\":{\"type\":\"long\"},\"DurationMillis\":{\"type\":\"long\"}}}}},\"Sc\":{\"type\":\"structure\",\"members\":{\"Mode\":{},\"Key\":{},\"KeyMd5\":{},\"InitializationVector\":{}}},\"Sk\":{\"type\":\"structure\",\"members\":{\"Key\":{},\"ThumbnailPattern\":{},\"ThumbnailEncryption\":{\"shape\":\"Sc\"},\"Rotate\":{},\"PresetId\":{},\"SegmentDuration\":{},\"Watermarks\":{\"shape\":\"Sn\"},\"AlbumArt\":{\"shape\":\"Sr\"},\"Composition\":{\"shape\":\"Sz\"},\"Captions\":{\"shape\":\"S13\"},\"Encryption\":{\"shape\":\"Sc\"}}},\"Sn\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"PresetWatermarkId\":{},\"InputKey\":{},\"Encryption\":{\"shape\":\"Sc\"}}}},\"Sr\":{\"type\":\"structure\",\"members\":{\"MergePolicy\":{},\"Artwork\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"InputKey\":{},\"MaxWidth\":{},\"MaxHeight\":{},\"SizingPolicy\":{},\"PaddingPolicy\":{},\"AlbumArtFormat\":{},\"Encryption\":{\"shape\":\"Sc\"}}}}}},\"Sz\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"TimeSpan\":{\"type\":\"structure\",\"members\":{\"StartTime\":{},\"Duration\":{}}}}}},\"S13\":{\"type\":\"structure\",\"members\":{\"MergePolicy\":{},\"CaptionSources\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Key\":{},\"Language\":{},\"TimeOffset\":{},\"Label\":{},\"Encryption\":{\"shape\":\"Sc\"}}}},\"CaptionFormats\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Format\":{},\"Pattern\":{},\"Encryption\":{\"shape\":\"Sc\"}}}}}},\"S1i\":{\"type\":\"list\",\"member\":{}},\"S1j\":{\"type\":\"structure\",\"members\":{\"Method\":{},\"Key\":{},\"KeyMd5\":{},\"InitializationVector\":{},\"LicenseAcquisitionUrl\":{},\"KeyStoragePolicy\":{}}},\"S1n\":{\"type\":\"structure\",\"members\":{\"Format\":{},\"Key\":{},\"KeyMd5\":{},\"KeyId\":{},\"InitializationVector\":{},\"LicenseAcquisitionUrl\":{}}},\"S1s\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"S1v\":{\"type\":\"structure\",\"members\":{\"Id\":{},\"Arn\":{},\"PipelineId\":{},\"Input\":{\"shape\":\"S5\"},\"Output\":{\"shape\":\"S1w\"},\"Outputs\":{\"type\":\"list\",\"member\":{\"shape\":\"S1w\"}},\"OutputKeyPrefix\":{},\"Playlists\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"Format\":{},\"OutputKeys\":{\"shape\":\"S1i\"},\"HlsContentProtection\":{\"shape\":\"S1j\"},\"PlayReadyDrm\":{\"shape\":\"S1n\"},\"Status\":{},\"StatusDetail\":{}}}},\"Status\":{},\"UserMetadata\":{\"shape\":\"S1s\"},\"Timing\":{\"type\":\"structure\",\"members\":{\"SubmitTimeMillis\":{\"type\":\"long\"},\"StartTimeMillis\":{\"type\":\"long\"},\"FinishTimeMillis\":{\"type\":\"long\"}}}}},\"S1w\":{\"type\":\"structure\",\"members\":{\"Id\":{},\"Key\":{},\"ThumbnailPattern\":{},\"ThumbnailEncryption\":{\"shape\":\"Sc\"},\"Rotate\":{},\"PresetId\":{},\"SegmentDuration\":{},\"Status\":{},\"StatusDetail\":{},\"Duration\":{\"type\":\"long\"},\"Width\":{\"type\":\"integer\"},\"Height\":{\"type\":\"integer\"},\"FrameRate\":{},\"FileSize\":{\"type\":\"long\"},\"DurationMillis\":{\"type\":\"long\"},\"Watermarks\":{\"shape\":\"Sn\"},\"AlbumArt\":{\"shape\":\"Sr\"},\"Composition\":{\"shape\":\"Sz\"},\"Captions\":{\"shape\":\"S13\"},\"Encryption\":{\"shape\":\"Sc\"},\"AppliedColorSpaceConversion\":{}}},\"S27\":{\"type\":\"structure\",\"members\":{\"Progressing\":{},\"Completed\":{},\"Warning\":{},\"Error\":{}}},\"S29\":{\"type\":\"structure\",\"members\":{\"Bucket\":{},\"StorageClass\":{},\"Permissions\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"GranteeType\":{},\"Grantee\":{},\"Access\":{\"type\":\"list\",\"member\":{}}}}}}},\"S2i\":{\"type\":\"structure\",\"members\":{\"Id\":{},\"Arn\":{},\"Name\":{},\"Status\":{},\"InputBucket\":{},\"OutputBucket\":{},\"Role\":{},\"AwsKmsKeyArn\":{},\"Notifications\":{\"shape\":\"S27\"},\"ContentConfig\":{\"shape\":\"S29\"},\"ThumbnailConfig\":{\"shape\":\"S29\"}}},\"S2k\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Code\":{},\"Message\":{}}}},\"S2o\":{\"type\":\"structure\",\"members\":{\"Codec\":{},\"CodecOptions\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"KeyframesMaxDist\":{},\"FixedGOP\":{},\"BitRate\":{},\"FrameRate\":{},\"MaxFrameRate\":{},\"Resolution\":{},\"AspectRatio\":{},\"MaxWidth\":{},\"MaxHeight\":{},\"DisplayAspectRatio\":{},\"SizingPolicy\":{},\"PaddingPolicy\":{},\"Watermarks\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Id\":{},\"MaxWidth\":{},\"MaxHeight\":{},\"SizingPolicy\":{},\"HorizontalAlign\":{},\"HorizontalOffset\":{},\"VerticalAlign\":{},\"VerticalOffset\":{},\"Opacity\":{},\"Target\":{}}}}}},\"S34\":{\"type\":\"structure\",\"members\":{\"Codec\":{},\"SampleRate\":{},\"BitRate\":{},\"Channels\":{},\"AudioPackingMode\":{},\"CodecOptions\":{\"type\":\"structure\",\"members\":{\"Profile\":{},\"BitDepth\":{},\"BitOrder\":{},\"Signed\":{}}}}},\"S3f\":{\"type\":\"structure\",\"members\":{\"Format\":{},\"Interval\":{},\"Resolution\":{},\"AspectRatio\":{},\"MaxWidth\":{},\"MaxHeight\":{},\"SizingPolicy\":{},\"PaddingPolicy\":{}}},\"S3j\":{\"type\":\"structure\",\"members\":{\"Id\":{},\"Arn\":{},\"Name\":{},\"Description\":{},\"Container\":{},\"Audio\":{\"shape\":\"S34\"},\"Video\":{\"shape\":\"S2o\"},\"Thumbnails\":{\"shape\":\"S3f\"},\"Type\":{}}},\"S3s\":{\"type\":\"list\",\"member\":{\"shape\":\"S1v\"}}},\"paginators\":{\"ListJobsByPipeline\":{\"input_token\":\"PageToken\",\"output_token\":\"NextPageToken\",\"result_key\":\"Jobs\"},\"ListJobsByStatus\":{\"input_token\":\"PageToken\",\"output_token\":\"NextPageToken\",\"result_key\":\"Jobs\"},\"ListPipelines\":{\"input_token\":\"PageToken\",\"output_token\":\"NextPageToken\",\"result_key\":\"Pipelines\"},\"ListPresets\":{\"input_token\":\"PageToken\",\"output_token\":\"NextPageToken\",\"result_key\":\"Presets\"}},\"waiters\":{\"JobComplete\":{\"operation\":\"ReadJob\",\"success_type\":\"output\",\"success_path\":\"Job.Status\",\"interval\":30,\"max_attempts\":120,\"success_value\":\"Complete\",\"failure_value\":[\"Canceled\",\"Error\"]}}};\nAWS.apiLoader.services['firehose'] = {};                                                                               // 81\nAWS.Firehose = AWS.Service.defineService('firehose', [ '2015-08-04' ]);                                                // 82\n                                                                                                                       // 83\nAWS.apiLoader.services['firehose']['2015-08-04'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-08-04\",\"endpointPrefix\":\"firehose\",\"jsonVersion\":\"1.1\",\"serviceAbbreviation\":\"Firehose\",\"serviceFullName\":\"0\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"Firehose_20150804\",\"protocol\":\"json\"},\"operations\":{\"CreateDeliveryStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"DeliveryStreamName\"],\"members\":{\"DeliveryStreamName\":{},\"S3DestinationConfiguration\":{\"shape\":\"S3\"},\"RedshiftDestinationConfiguration\":{\"type\":\"structure\",\"required\":[\"RoleARN\",\"ClusterJDBCURL\",\"CopyCommand\",\"Username\",\"Password\",\"S3Configuration\"],\"members\":{\"RoleARN\":{},\"ClusterJDBCURL\":{},\"CopyCommand\":{\"shape\":\"Sh\"},\"Username\":{\"shape\":\"Sl\"},\"Password\":{\"shape\":\"Sm\"},\"S3Configuration\":{\"shape\":\"S3\"}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"DeliveryStreamARN\":{}}},\"http\":{}},\"DeleteDeliveryStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"DeliveryStreamName\"],\"members\":{\"DeliveryStreamName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"DescribeDeliveryStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"DeliveryStreamName\"],\"members\":{\"DeliveryStreamName\":{},\"Limit\":{\"type\":\"integer\"},\"ExclusiveStartDestinationId\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"DeliveryStreamDescription\"],\"members\":{\"DeliveryStreamDescription\":{\"type\":\"structure\",\"required\":[\"DeliveryStreamName\",\"DeliveryStreamARN\",\"DeliveryStreamStatus\",\"VersionId\",\"Destinations\",\"HasMoreDestinations\"],\"members\":{\"DeliveryStreamName\":{},\"DeliveryStreamARN\":{},\"DeliveryStreamStatus\":{},\"VersionId\":{},\"CreateTimestamp\":{\"type\":\"timestamp\"},\"LastUpdateTimestamp\":{\"type\":\"timestamp\"},\"Destinations\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"DestinationId\"],\"members\":{\"DestinationId\":{},\"S3DestinationDescription\":{\"shape\":\"S11\"},\"RedshiftDestinationDescription\":{\"type\":\"structure\",\"required\":[\"RoleARN\",\"ClusterJDBCURL\",\"CopyCommand\",\"Username\",\"S3DestinationDescription\"],\"members\":{\"RoleARN\":{},\"ClusterJDBCURL\":{},\"CopyCommand\":{\"shape\":\"Sh\"},\"Username\":{\"shape\":\"Sl\"},\"S3DestinationDescription\":{\"shape\":\"S11\"}}}}}},\"HasMoreDestinations\":{\"type\":\"boolean\"}}}}},\"http\":{}},\"ListDeliveryStreams\":{\"input\":{\"type\":\"structure\",\"members\":{\"Limit\":{\"type\":\"integer\"},\"ExclusiveStartDeliveryStreamName\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"DeliveryStreamNames\",\"HasMoreDeliveryStreams\"],\"members\":{\"DeliveryStreamNames\":{\"type\":\"list\",\"member\":{}},\"HasMoreDeliveryStreams\":{\"type\":\"boolean\"}}},\"http\":{}},\"PutRecord\":{\"input\":{\"type\":\"structure\",\"required\":[\"DeliveryStreamName\",\"Record\"],\"members\":{\"DeliveryStreamName\":{},\"Record\":{\"shape\":\"S19\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"RecordId\"],\"members\":{\"RecordId\":{}}},\"http\":{}},\"PutRecordBatch\":{\"input\":{\"type\":\"structure\",\"required\":[\"DeliveryStreamName\",\"Records\"],\"members\":{\"DeliveryStreamName\":{},\"Records\":{\"type\":\"list\",\"member\":{\"shape\":\"S19\"}}}},\"output\":{\"type\":\"structure\",\"required\":[\"FailedPutCount\",\"RequestResponses\"],\"members\":{\"FailedPutCount\":{\"type\":\"integer\"},\"RequestResponses\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"RecordId\":{},\"ErrorCode\":{},\"ErrorMessage\":{}}}}}},\"http\":{}},\"UpdateDestination\":{\"input\":{\"type\":\"structure\",\"required\":[\"DeliveryStreamName\",\"CurrentDeliveryStreamVersionId\",\"DestinationId\"],\"members\":{\"DeliveryStreamName\":{},\"CurrentDeliveryStreamVersionId\":{},\"DestinationId\":{},\"S3DestinationUpdate\":{\"shape\":\"S1m\"},\"RedshiftDestinationUpdate\":{\"type\":\"structure\",\"members\":{\"RoleARN\":{},\"ClusterJDBCURL\":{},\"CopyCommand\":{\"shape\":\"Sh\"},\"Username\":{\"shape\":\"Sl\"},\"Password\":{\"shape\":\"Sm\"},\"S3Update\":{\"shape\":\"S1m\"}}}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}}},\"shapes\":{\"S3\":{\"type\":\"structure\",\"required\":[\"RoleARN\",\"BucketARN\"],\"members\":{\"RoleARN\":{},\"BucketARN\":{},\"Prefix\":{},\"BufferingHints\":{\"shape\":\"S7\"},\"CompressionFormat\":{},\"EncryptionConfiguration\":{\"shape\":\"Sb\"}}},\"S7\":{\"type\":\"structure\",\"members\":{\"SizeInMBs\":{\"type\":\"integer\"},\"IntervalInSeconds\":{\"type\":\"integer\"}}},\"Sb\":{\"type\":\"structure\",\"members\":{\"NoEncryptionConfig\":{},\"KMSEncryptionConfig\":{\"type\":\"structure\",\"required\":[\"AWSKMSKeyARN\"],\"members\":{\"AWSKMSKeyARN\":{}}}}},\"Sh\":{\"type\":\"structure\",\"required\":[\"DataTableName\"],\"members\":{\"DataTableName\":{},\"DataTableColumns\":{},\"CopyOptions\":{}}},\"Sl\":{\"type\":\"string\",\"sensitive\":true},\"Sm\":{\"type\":\"string\",\"sensitive\":true},\"S11\":{\"type\":\"structure\",\"required\":[\"RoleARN\",\"BucketARN\",\"BufferingHints\",\"CompressionFormat\",\"EncryptionConfiguration\"],\"members\":{\"RoleARN\":{},\"BucketARN\":{},\"Prefix\":{},\"BufferingHints\":{\"shape\":\"S7\"},\"CompressionFormat\":{},\"EncryptionConfiguration\":{\"shape\":\"Sb\"}}},\"S19\":{\"type\":\"structure\",\"required\":[\"Data\"],\"members\":{\"Data\":{\"type\":\"blob\"}}},\"S1m\":{\"type\":\"structure\",\"members\":{\"RoleARN\":{},\"BucketARN\":{},\"Prefix\":{},\"BufferingHints\":{\"shape\":\"S7\"},\"CompressionFormat\":{},\"EncryptionConfiguration\":{\"shape\":\"Sb\"}}}},\"examples\":{}};\nAWS.apiLoader.services['inspector'] = {};                                                                              // 85\nAWS.Inspector = AWS.Service.defineService('inspector', [ '2015-08-18' ]);                                              // 86\n                                                                                                                       // 87\nAWS.apiLoader.services['inspector']['2015-08-18'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-08-18\",\"endpointPrefix\":\"inspector\",\"jsonVersion\":\"1.1\",\"serviceFullName\":\"Amazon Inspector\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"InspectorService\",\"protocol\":\"json\"},\"operations\":{\"AddAttributesToFindings\":{\"input\":{\"type\":\"structure\",\"members\":{\"findingArns\":{\"shape\":\"S2\"},\"attributes\":{\"shape\":\"S4\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"AttachAssessmentAndRulesPackage\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{},\"rulesPackageArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"CreateApplication\":{\"input\":{\"type\":\"structure\",\"members\":{\"applicationName\":{},\"resourceGroupArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"applicationArn\":{}}},\"http\":{}},\"CreateAssessment\":{\"input\":{\"type\":\"structure\",\"members\":{\"applicationArn\":{},\"assessmentName\":{},\"durationInSeconds\":{\"type\":\"integer\"},\"userAttributesForFindings\":{\"shape\":\"S4\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{}}},\"http\":{}},\"CreateResourceGroup\":{\"input\":{\"type\":\"structure\",\"members\":{\"resourceGroupTags\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"resourceGroupArn\":{}}},\"http\":{}},\"DeleteApplication\":{\"input\":{\"type\":\"structure\",\"members\":{\"applicationArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"DeleteAssessment\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"DeleteRun\":{\"input\":{\"type\":\"structure\",\"members\":{\"runArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"DescribeApplication\":{\"input\":{\"type\":\"structure\",\"members\":{\"applicationArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"application\":{\"type\":\"structure\",\"members\":{\"applicationArn\":{},\"applicationName\":{},\"resourceGroupArn\":{}}}}},\"http\":{}},\"DescribeAssessment\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"assessment\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{},\"assessmentName\":{},\"applicationArn\":{},\"assessmentState\":{},\"failureMessage\":{},\"dataCollected\":{\"type\":\"boolean\"},\"startTime\":{\"type\":\"timestamp\"},\"endTime\":{\"type\":\"timestamp\"},\"durationInSeconds\":{\"type\":\"integer\"},\"userAttributesForFindings\":{\"shape\":\"S4\"}}}}},\"http\":{}},\"DescribeCrossAccountAccessRole\":{\"output\":{\"type\":\"structure\",\"members\":{\"roleArn\":{},\"valid\":{\"type\":\"boolean\"}}},\"http\":{}},\"DescribeFinding\":{\"input\":{\"type\":\"structure\",\"members\":{\"findingArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"finding\":{\"type\":\"structure\",\"members\":{\"findingArn\":{},\"runArn\":{},\"rulesPackageArn\":{},\"ruleName\":{},\"agentId\":{},\"autoScalingGroup\":{},\"severity\":{},\"finding\":{\"shape\":\"S18\"},\"description\":{\"shape\":\"S18\"},\"recommendation\":{\"shape\":\"S18\"},\"attributes\":{\"shape\":\"S4\"},\"userAttributes\":{\"shape\":\"S4\"}}}}},\"http\":{}},\"DescribeResourceGroup\":{\"input\":{\"type\":\"structure\",\"members\":{\"resourceGroupArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"resourceGroup\":{\"type\":\"structure\",\"members\":{\"resourceGroupArn\":{},\"resourceGroupTags\":{}}}}},\"http\":{}},\"DescribeRulesPackage\":{\"input\":{\"type\":\"structure\",\"members\":{\"rulesPackageArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"rulesPackage\":{\"type\":\"structure\",\"members\":{\"rulesPackageArn\":{},\"rulesPackageName\":{},\"version\":{},\"provider\":{},\"description\":{\"shape\":\"S18\"}}}}},\"http\":{}},\"DescribeRun\":{\"input\":{\"type\":\"structure\",\"members\":{\"runArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"run\":{\"type\":\"structure\",\"members\":{\"runArn\":{},\"runName\":{},\"assessmentArn\":{},\"runState\":{},\"rulesPackages\":{\"shape\":\"S2\"},\"creationTime\":{\"type\":\"timestamp\"},\"completionTime\":{\"type\":\"timestamp\"}}}}},\"http\":{}},\"DetachAssessmentAndRulesPackage\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{},\"rulesPackageArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"GetAssessmentTelemetry\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"telemetry\":{\"shape\":\"S1v\"}}},\"http\":{}},\"ListApplications\":{\"input\":{\"type\":\"structure\",\"members\":{\"filter\":{\"type\":\"structure\",\"members\":{\"applicationNamePatterns\":{\"shape\":\"S24\"}}},\"nextToken\":{},\"maxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"applicationArnList\":{\"shape\":\"S2\"},\"nextToken\":{}}},\"http\":{}},\"ListAssessmentAgents\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{},\"filter\":{\"type\":\"structure\",\"members\":{\"agentHealthList\":{\"type\":\"list\",\"member\":{}}}},\"nextToken\":{},\"maxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"agentList\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"agentId\":{},\"assessmentArn\":{},\"agentHealth\":{},\"agentHealthCode\":{},\"agentHealthDetails\":{},\"autoScalingGroup\":{},\"accountId\":{},\"telemetry\":{\"shape\":\"S1v\"}}}},\"nextToken\":{}}},\"http\":{}},\"ListAssessments\":{\"input\":{\"type\":\"structure\",\"members\":{\"applicationArns\":{\"shape\":\"S2\"},\"filter\":{\"shape\":\"S2k\"},\"nextToken\":{},\"maxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"assessmentArnList\":{\"shape\":\"S2\"},\"nextToken\":{}}},\"http\":{}},\"ListAttachedAssessments\":{\"input\":{\"type\":\"structure\",\"members\":{\"rulesPackageArn\":{},\"filter\":{\"shape\":\"S2k\"},\"nextToken\":{},\"maxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"assessmentArnList\":{\"shape\":\"S2\"},\"nextToken\":{}}},\"http\":{}},\"ListAttachedRulesPackages\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{},\"nextToken\":{},\"maxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"rulesPackageArnList\":{\"shape\":\"S2\"},\"nextToken\":{}}},\"http\":{}},\"ListFindings\":{\"input\":{\"type\":\"structure\",\"members\":{\"runArns\":{\"shape\":\"S2\"},\"filter\":{\"type\":\"structure\",\"members\":{\"rulesPackageArns\":{\"shape\":\"S2\"},\"ruleNames\":{\"type\":\"list\",\"member\":{}},\"severities\":{\"type\":\"list\",\"member\":{}},\"attributes\":{\"shape\":\"S4\"},\"userAttributes\":{\"shape\":\"S4\"}}},\"nextToken\":{},\"maxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"findingArnList\":{\"shape\":\"S2\"},\"nextToken\":{}}},\"http\":{}},\"ListRulesPackages\":{\"input\":{\"type\":\"structure\",\"members\":{\"nextToken\":{},\"maxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"rulesPackageArnList\":{\"shape\":\"S2\"},\"nextToken\":{}}},\"http\":{}},\"ListRuns\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArns\":{\"shape\":\"S2\"},\"filter\":{\"type\":\"structure\",\"members\":{\"runNamePatterns\":{\"shape\":\"S24\"},\"runStates\":{\"type\":\"list\",\"member\":{}},\"rulesPackages\":{\"shape\":\"S2\"},\"creationTime\":{\"shape\":\"S2m\"},\"completionTime\":{\"shape\":\"S2m\"}}},\"nextToken\":{},\"maxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"runArnList\":{\"shape\":\"S2\"},\"nextToken\":{}}},\"http\":{}},\"ListTagsForResource\":{\"input\":{\"type\":\"structure\",\"members\":{\"resourceArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"tagList\":{\"shape\":\"S36\"}}},\"http\":{}},\"LocalizeText\":{\"input\":{\"type\":\"structure\",\"members\":{\"localizedTexts\":{\"type\":\"list\",\"member\":{\"shape\":\"S18\"}},\"locale\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{},\"results\":{\"type\":\"list\",\"member\":{}}}},\"http\":{}},\"PreviewAgentsForResourceGroup\":{\"input\":{\"type\":\"structure\",\"members\":{\"resourceGroupArn\":{},\"nextToken\":{},\"maxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"agentPreviewList\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"agentId\":{},\"autoScalingGroup\":{}}}},\"nextToken\":{}}},\"http\":{}},\"RegisterCrossAccountAccessRole\":{\"input\":{\"type\":\"structure\",\"members\":{\"roleArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"RemoveAttributesFromFindings\":{\"input\":{\"type\":\"structure\",\"members\":{\"findingArns\":{\"shape\":\"S2\"},\"attributeKeys\":{\"type\":\"list\",\"member\":{}}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"RunAssessment\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{},\"runName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"runArn\":{}}},\"http\":{}},\"SetTagsForResource\":{\"input\":{\"type\":\"structure\",\"members\":{\"resourceArn\":{},\"tags\":{\"shape\":\"S36\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"StartDataCollection\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"StopDataCollection\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"UpdateApplication\":{\"input\":{\"type\":\"structure\",\"members\":{\"applicationArn\":{},\"applicationName\":{},\"resourceGroupArn\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}},\"UpdateAssessment\":{\"input\":{\"type\":\"structure\",\"members\":{\"assessmentArn\":{},\"assessmentName\":{},\"durationInSeconds\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"message\":{}}},\"http\":{}}},\"shapes\":{\"S2\":{\"type\":\"list\",\"member\":{}},\"S4\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"key\":{},\"value\":{}}}},\"S18\":{\"type\":\"structure\",\"members\":{\"key\":{\"type\":\"structure\",\"members\":{\"facility\":{},\"id\":{}}},\"parameters\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"name\":{},\"value\":{}}}}}},\"S1v\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"status\":{},\"messageTypeTelemetries\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"messageType\":{},\"count\":{\"type\":\"long\"},\"dataSize\":{\"type\":\"long\"}}}}}}},\"S24\":{\"type\":\"list\",\"member\":{}},\"S2k\":{\"type\":\"structure\",\"members\":{\"assessmentNamePatterns\":{\"shape\":\"S24\"},\"assessmentStates\":{\"type\":\"list\",\"member\":{}},\"dataCollected\":{\"type\":\"boolean\"},\"startTimeRange\":{\"shape\":\"S2m\"},\"endTimeRange\":{\"shape\":\"S2m\"},\"durationRange\":{\"type\":\"structure\",\"members\":{\"minimum\":{\"type\":\"integer\"},\"maximum\":{\"type\":\"integer\"}}}}},\"S2m\":{\"type\":\"structure\",\"members\":{\"minimum\":{\"type\":\"timestamp\"},\"maximum\":{\"type\":\"timestamp\"}}},\"S36\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Key\":{},\"Value\":{}}}}},\"examples\":{}};\nAWS.apiLoader.services['kinesis'] = {};                                                                                // 89\nAWS.Kinesis = AWS.Service.defineService('kinesis', [ '2013-12-02' ]);                                                  // 90\n                                                                                                                       // 91\nAWS.apiLoader.services['kinesis']['2013-12-02'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2013-12-02\",\"endpointPrefix\":\"kinesis\",\"jsonVersion\":\"1.1\",\"serviceAbbreviation\":\"Kinesis\",\"serviceFullName\":\"Amazon Kinesis\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"Kinesis_20131202\",\"protocol\":\"json\"},\"operations\":{\"AddTagsToStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"Tags\"],\"members\":{\"StreamName\":{},\"Tags\":{\"type\":\"map\",\"key\":{},\"value\":{}}}},\"http\":{}},\"CreateStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"ShardCount\"],\"members\":{\"StreamName\":{},\"ShardCount\":{\"type\":\"integer\"}}},\"http\":{}},\"DecreaseStreamRetentionPeriod\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"RetentionPeriodHours\"],\"members\":{\"StreamName\":{},\"RetentionPeriodHours\":{\"type\":\"integer\"}}},\"http\":{}},\"DeleteStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\"],\"members\":{\"StreamName\":{}}},\"http\":{}},\"DescribeStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\"],\"members\":{\"StreamName\":{},\"Limit\":{\"type\":\"integer\"},\"ExclusiveStartShardId\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"StreamDescription\"],\"members\":{\"StreamDescription\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"StreamARN\",\"StreamStatus\",\"Shards\",\"HasMoreShards\",\"RetentionPeriodHours\"],\"members\":{\"StreamName\":{},\"StreamARN\":{},\"StreamStatus\":{},\"Shards\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"ShardId\",\"HashKeyRange\",\"SequenceNumberRange\"],\"members\":{\"ShardId\":{},\"ParentShardId\":{},\"AdjacentParentShardId\":{},\"HashKeyRange\":{\"type\":\"structure\",\"required\":[\"StartingHashKey\",\"EndingHashKey\"],\"members\":{\"StartingHashKey\":{},\"EndingHashKey\":{}}},\"SequenceNumberRange\":{\"type\":\"structure\",\"required\":[\"StartingSequenceNumber\"],\"members\":{\"StartingSequenceNumber\":{},\"EndingSequenceNumber\":{}}}}}},\"HasMoreShards\":{\"type\":\"boolean\"},\"RetentionPeriodHours\":{\"type\":\"integer\"}}}}},\"http\":{}},\"GetRecords\":{\"input\":{\"type\":\"structure\",\"required\":[\"ShardIterator\"],\"members\":{\"ShardIterator\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"Records\"],\"members\":{\"Records\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"SequenceNumber\",\"Data\",\"PartitionKey\"],\"members\":{\"SequenceNumber\":{},\"ApproximateArrivalTimestamp\":{\"type\":\"timestamp\"},\"Data\":{\"type\":\"blob\"},\"PartitionKey\":{}}}},\"NextShardIterator\":{},\"MillisBehindLatest\":{\"type\":\"long\"}}},\"http\":{}},\"GetShardIterator\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"ShardId\",\"ShardIteratorType\"],\"members\":{\"StreamName\":{},\"ShardId\":{},\"ShardIteratorType\":{},\"StartingSequenceNumber\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ShardIterator\":{}}},\"http\":{}},\"IncreaseStreamRetentionPeriod\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"RetentionPeriodHours\"],\"members\":{\"StreamName\":{},\"RetentionPeriodHours\":{\"type\":\"integer\"}}},\"http\":{}},\"ListStreams\":{\"input\":{\"type\":\"structure\",\"members\":{\"Limit\":{\"type\":\"integer\"},\"ExclusiveStartStreamName\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"StreamNames\",\"HasMoreStreams\"],\"members\":{\"StreamNames\":{\"type\":\"list\",\"member\":{}},\"HasMoreStreams\":{\"type\":\"boolean\"}}},\"http\":{}},\"ListTagsForStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\"],\"members\":{\"StreamName\":{},\"ExclusiveStartTagKey\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"Tags\",\"HasMoreTags\"],\"members\":{\"Tags\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Key\"],\"members\":{\"Key\":{},\"Value\":{}}}},\"HasMoreTags\":{\"type\":\"boolean\"}}},\"http\":{}},\"MergeShards\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"ShardToMerge\",\"AdjacentShardToMerge\"],\"members\":{\"StreamName\":{},\"ShardToMerge\":{},\"AdjacentShardToMerge\":{}}},\"http\":{}},\"PutRecord\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"Data\",\"PartitionKey\"],\"members\":{\"StreamName\":{},\"Data\":{\"type\":\"blob\"},\"PartitionKey\":{},\"ExplicitHashKey\":{},\"SequenceNumberForOrdering\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"ShardId\",\"SequenceNumber\"],\"members\":{\"ShardId\":{},\"SequenceNumber\":{}}},\"http\":{}},\"PutRecords\":{\"input\":{\"type\":\"structure\",\"required\":[\"Records\",\"StreamName\"],\"members\":{\"Records\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Data\",\"PartitionKey\"],\"members\":{\"Data\":{\"type\":\"blob\"},\"ExplicitHashKey\":{},\"PartitionKey\":{}}}},\"StreamName\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"Records\"],\"members\":{\"FailedRecordCount\":{\"type\":\"integer\"},\"Records\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"SequenceNumber\":{},\"ShardId\":{},\"ErrorCode\":{},\"ErrorMessage\":{}}}}}},\"http\":{}},\"RemoveTagsFromStream\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"TagKeys\"],\"members\":{\"StreamName\":{},\"TagKeys\":{\"type\":\"list\",\"member\":{}}}},\"http\":{}},\"SplitShard\":{\"input\":{\"type\":\"structure\",\"required\":[\"StreamName\",\"ShardToSplit\",\"NewStartingHashKey\"],\"members\":{\"StreamName\":{},\"ShardToSplit\":{},\"NewStartingHashKey\":{}}},\"http\":{}}},\"shapes\":{},\"examples\":{},\"paginators\":{\"DescribeStream\":{\"input_token\":\"ExclusiveStartShardId\",\"limit_key\":\"Limit\",\"more_results\":\"StreamDescription.HasMoreShards\",\"output_token\":\"StreamDescription.Shards[-1].ShardId\",\"result_key\":\"StreamDescription.Shards\"},\"ListStreams\":{\"input_token\":\"ExclusiveStartStreamName\",\"limit_key\":\"Limit\",\"more_results\":\"HasMoreStreams\",\"output_token\":\"StreamNames[-1]\",\"result_key\":\"StreamNames\"}}};\nAWS.apiLoader.services['kms'] = {};                                                                                    // 93\nAWS.KMS = AWS.Service.defineService('kms', [ '2014-11-01' ]);                                                          // 94\n                                                                                                                       // 95\nAWS.apiLoader.services['kms']['2014-11-01'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2014-11-01\",\"endpointPrefix\":\"kms\",\"jsonVersion\":\"1.1\",\"serviceAbbreviation\":\"KMS\",\"serviceFullName\":\"AWS Key Management Service\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"TrentService\",\"protocol\":\"json\"},\"operations\":{\"CancelKeyDeletion\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"KeyId\":{}}},\"http\":{}},\"CreateAlias\":{\"input\":{\"type\":\"structure\",\"required\":[\"AliasName\",\"TargetKeyId\"],\"members\":{\"AliasName\":{},\"TargetKeyId\":{}}},\"http\":{}},\"CreateGrant\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\",\"GranteePrincipal\"],\"members\":{\"KeyId\":{},\"GranteePrincipal\":{},\"RetiringPrincipal\":{},\"Operations\":{\"shape\":\"S8\"},\"Constraints\":{\"shape\":\"Sa\"},\"GrantTokens\":{\"shape\":\"Se\"},\"Name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"GrantToken\":{},\"GrantId\":{}}},\"http\":{}},\"CreateKey\":{\"input\":{\"type\":\"structure\",\"members\":{\"Policy\":{},\"Description\":{},\"KeyUsage\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"KeyMetadata\":{\"shape\":\"So\"}}},\"http\":{}},\"Decrypt\":{\"input\":{\"type\":\"structure\",\"required\":[\"CiphertextBlob\"],\"members\":{\"CiphertextBlob\":{\"type\":\"blob\"},\"EncryptionContext\":{\"shape\":\"Sb\"},\"GrantTokens\":{\"shape\":\"Se\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"KeyId\":{},\"Plaintext\":{\"shape\":\"Sx\"}}},\"http\":{}},\"DeleteAlias\":{\"input\":{\"type\":\"structure\",\"required\":[\"AliasName\"],\"members\":{\"AliasName\":{}}},\"http\":{}},\"DescribeKey\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{},\"GrantTokens\":{\"shape\":\"Se\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"KeyMetadata\":{\"shape\":\"So\"}}},\"http\":{}},\"DisableKey\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{}}},\"http\":{}},\"DisableKeyRotation\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{}}},\"http\":{}},\"EnableKey\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{}}},\"http\":{}},\"EnableKeyRotation\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{}}},\"http\":{}},\"Encrypt\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\",\"Plaintext\"],\"members\":{\"KeyId\":{},\"Plaintext\":{\"shape\":\"Sx\"},\"EncryptionContext\":{\"shape\":\"Sb\"},\"GrantTokens\":{\"shape\":\"Se\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CiphertextBlob\":{\"type\":\"blob\"},\"KeyId\":{}}},\"http\":{}},\"GenerateDataKey\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{},\"EncryptionContext\":{\"shape\":\"Sb\"},\"NumberOfBytes\":{\"type\":\"integer\"},\"KeySpec\":{},\"GrantTokens\":{\"shape\":\"Se\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CiphertextBlob\":{\"type\":\"blob\"},\"Plaintext\":{\"shape\":\"Sx\"},\"KeyId\":{}}},\"http\":{}},\"GenerateDataKeyWithoutPlaintext\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{},\"EncryptionContext\":{\"shape\":\"Sb\"},\"KeySpec\":{},\"NumberOfBytes\":{\"type\":\"integer\"},\"GrantTokens\":{\"shape\":\"Se\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CiphertextBlob\":{\"type\":\"blob\"},\"KeyId\":{}}},\"http\":{}},\"GenerateRandom\":{\"input\":{\"type\":\"structure\",\"members\":{\"NumberOfBytes\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Plaintext\":{\"shape\":\"Sx\"}}},\"http\":{}},\"GetKeyPolicy\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\",\"PolicyName\"],\"members\":{\"KeyId\":{},\"PolicyName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Policy\":{}}},\"http\":{}},\"GetKeyRotationStatus\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"KeyRotationEnabled\":{\"type\":\"boolean\"}}},\"http\":{}},\"ListAliases\":{\"input\":{\"type\":\"structure\",\"members\":{\"Limit\":{\"type\":\"integer\"},\"Marker\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Aliases\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"AliasName\":{},\"AliasArn\":{},\"TargetKeyId\":{}}}},\"NextMarker\":{},\"Truncated\":{\"type\":\"boolean\"}}},\"http\":{}},\"ListGrants\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"Limit\":{\"type\":\"integer\"},\"Marker\":{},\"KeyId\":{}}},\"output\":{\"shape\":\"S1r\"},\"http\":{}},\"ListKeyPolicies\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{},\"Limit\":{\"type\":\"integer\"},\"Marker\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"PolicyNames\":{\"type\":\"list\",\"member\":{}},\"NextMarker\":{},\"Truncated\":{\"type\":\"boolean\"}}},\"http\":{}},\"ListKeys\":{\"input\":{\"type\":\"structure\",\"members\":{\"Limit\":{\"type\":\"integer\"},\"Marker\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Keys\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"KeyId\":{},\"KeyArn\":{}}}},\"NextMarker\":{},\"Truncated\":{\"type\":\"boolean\"}}},\"http\":{}},\"ListRetirableGrants\":{\"input\":{\"type\":\"structure\",\"required\":[\"RetiringPrincipal\"],\"members\":{\"Limit\":{\"type\":\"integer\"},\"Marker\":{},\"RetiringPrincipal\":{}}},\"output\":{\"shape\":\"S1r\"},\"http\":{}},\"PutKeyPolicy\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\",\"PolicyName\",\"Policy\"],\"members\":{\"KeyId\":{},\"PolicyName\":{},\"Policy\":{}}},\"http\":{}},\"ReEncrypt\":{\"input\":{\"type\":\"structure\",\"required\":[\"CiphertextBlob\",\"DestinationKeyId\"],\"members\":{\"CiphertextBlob\":{\"type\":\"blob\"},\"SourceEncryptionContext\":{\"shape\":\"Sb\"},\"DestinationKeyId\":{},\"DestinationEncryptionContext\":{\"shape\":\"Sb\"},\"GrantTokens\":{\"shape\":\"Se\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CiphertextBlob\":{\"type\":\"blob\"},\"SourceKeyId\":{},\"KeyId\":{}}},\"http\":{}},\"RetireGrant\":{\"input\":{\"type\":\"structure\",\"members\":{\"GrantToken\":{},\"KeyId\":{},\"GrantId\":{}}},\"http\":{}},\"RevokeGrant\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\",\"GrantId\"],\"members\":{\"KeyId\":{},\"GrantId\":{}}},\"http\":{}},\"ScheduleKeyDeletion\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"KeyId\":{},\"PendingWindowInDays\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"KeyId\":{},\"DeletionDate\":{\"type\":\"timestamp\"}}},\"http\":{}},\"UpdateAlias\":{\"input\":{\"type\":\"structure\",\"required\":[\"AliasName\",\"TargetKeyId\"],\"members\":{\"AliasName\":{},\"TargetKeyId\":{}}},\"http\":{}},\"UpdateKeyDescription\":{\"input\":{\"type\":\"structure\",\"required\":[\"KeyId\",\"Description\"],\"members\":{\"KeyId\":{},\"Description\":{}}},\"http\":{}}},\"shapes\":{\"S8\":{\"type\":\"list\",\"member\":{}},\"Sa\":{\"type\":\"structure\",\"members\":{\"EncryptionContextSubset\":{\"shape\":\"Sb\"},\"EncryptionContextEquals\":{\"shape\":\"Sb\"}}},\"Sb\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"Se\":{\"type\":\"list\",\"member\":{}},\"So\":{\"type\":\"structure\",\"required\":[\"KeyId\"],\"members\":{\"AWSAccountId\":{},\"KeyId\":{},\"Arn\":{},\"CreationDate\":{\"type\":\"timestamp\"},\"Enabled\":{\"type\":\"boolean\"},\"Description\":{},\"KeyUsage\":{},\"KeyState\":{},\"DeletionDate\":{\"type\":\"timestamp\"}}},\"Sx\":{\"type\":\"blob\",\"sensitive\":true},\"S1r\":{\"type\":\"structure\",\"members\":{\"Grants\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"KeyId\":{},\"GrantId\":{},\"Name\":{},\"CreationDate\":{\"type\":\"timestamp\"},\"GranteePrincipal\":{},\"RetiringPrincipal\":{},\"IssuingAccount\":{},\"Operations\":{\"shape\":\"S8\"},\"Constraints\":{\"shape\":\"Sa\"}}}},\"NextMarker\":{},\"Truncated\":{\"type\":\"boolean\"}}}},\"examples\":{},\"paginators\":{\"ListAliases\":{\"limit_key\":\"Limit\",\"input_token\":\"Marker\",\"output_token\":\"NextMarker\",\"more_results\":\"Truncated\",\"result_key\":\"Aliases\"},\"ListGrants\":{\"limit_key\":\"Limit\",\"input_token\":\"Marker\",\"output_token\":\"NextMarker\",\"more_results\":\"Truncated\",\"result_key\":\"Grants\"},\"ListKeyPolicies\":{\"limit_key\":\"Limit\",\"input_token\":\"Marker\",\"output_token\":\"NextMarker\",\"more_results\":\"Truncated\",\"result_key\":\"PolicyNames\"},\"ListKeys\":{\"limit_key\":\"Limit\",\"input_token\":\"Marker\",\"output_token\":\"NextMarker\",\"more_results\":\"Truncated\",\"result_key\":\"Keys\"}}};\nAWS.apiLoader.services['lambda'] = {};                                                                                 // 97\nAWS.Lambda = AWS.Service.defineService('lambda', [ '2014-11-11', '2015-03-31' ]);                                      // 98\n                                                                                                                       // 99\nAWS.apiLoader.services['lambda']['2015-03-31'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-03-31\",\"endpointPrefix\":\"lambda\",\"protocol\":\"rest-json\",\"serviceFullName\":\"AWS Lambda\",\"signatureVersion\":\"v4\"},\"operations\":{\"AddPermission\":{\"http\":{\"requestUri\":\"/2015-03-31/functions/{FunctionName}/policy\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\",\"StatementId\",\"Action\",\"Principal\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"StatementId\":{},\"Action\":{},\"Principal\":{},\"SourceArn\":{},\"SourceAccount\":{},\"Qualifier\":{\"location\":\"querystring\",\"locationName\":\"Qualifier\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Statement\":{}}}},\"CreateAlias\":{\"http\":{\"requestUri\":\"/2015-03-31/functions/{FunctionName}/aliases\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\",\"Name\",\"FunctionVersion\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Name\":{},\"FunctionVersion\":{},\"Description\":{}}},\"output\":{\"shape\":\"Sf\"}},\"CreateEventSourceMapping\":{\"http\":{\"requestUri\":\"/2015-03-31/event-source-mappings/\",\"responseCode\":202},\"input\":{\"type\":\"structure\",\"required\":[\"EventSourceArn\",\"FunctionName\",\"StartingPosition\"],\"members\":{\"EventSourceArn\":{},\"FunctionName\":{},\"Enabled\":{\"type\":\"boolean\"},\"BatchSize\":{\"type\":\"integer\"},\"StartingPosition\":{}}},\"output\":{\"shape\":\"Sl\"}},\"CreateFunction\":{\"http\":{\"requestUri\":\"/2015-03-31/functions\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\",\"Runtime\",\"Role\",\"Handler\",\"Code\"],\"members\":{\"FunctionName\":{},\"Runtime\":{},\"Role\":{},\"Handler\":{},\"Code\":{\"type\":\"structure\",\"members\":{\"ZipFile\":{\"type\":\"blob\"},\"S3Bucket\":{},\"S3Key\":{},\"S3ObjectVersion\":{}}},\"Description\":{},\"Timeout\":{\"type\":\"integer\"},\"MemorySize\":{\"type\":\"integer\"},\"Publish\":{\"type\":\"boolean\"},\"VpcConfig\":{\"shape\":\"Sz\"}}},\"output\":{\"shape\":\"S14\"}},\"DeleteAlias\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/aliases/{Name}\",\"responseCode\":204},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\",\"Name\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Name\":{\"location\":\"uri\",\"locationName\":\"Name\"}}}},\"DeleteEventSourceMapping\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2015-03-31/event-source-mappings/{UUID}\",\"responseCode\":202},\"input\":{\"type\":\"structure\",\"required\":[\"UUID\"],\"members\":{\"UUID\":{\"location\":\"uri\",\"locationName\":\"UUID\"}}},\"output\":{\"shape\":\"Sl\"}},\"DeleteFunction\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}\",\"responseCode\":204},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Qualifier\":{\"location\":\"querystring\",\"locationName\":\"Qualifier\"}}}},\"GetAlias\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/aliases/{Name}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\",\"Name\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Name\":{\"location\":\"uri\",\"locationName\":\"Name\"}}},\"output\":{\"shape\":\"Sf\"}},\"GetEventSourceMapping\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2015-03-31/event-source-mappings/{UUID}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"UUID\"],\"members\":{\"UUID\":{\"location\":\"uri\",\"locationName\":\"UUID\"}}},\"output\":{\"shape\":\"Sl\"}},\"GetFunction\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Qualifier\":{\"location\":\"querystring\",\"locationName\":\"Qualifier\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Configuration\":{\"shape\":\"S14\"},\"Code\":{\"type\":\"structure\",\"members\":{\"RepositoryType\":{},\"Location\":{}}}}}},\"GetFunctionConfiguration\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/configuration\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Qualifier\":{\"location\":\"querystring\",\"locationName\":\"Qualifier\"}}},\"output\":{\"shape\":\"S14\"}},\"GetPolicy\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/policy\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Qualifier\":{\"location\":\"querystring\",\"locationName\":\"Qualifier\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Policy\":{}}}},\"Invoke\":{\"http\":{\"requestUri\":\"/2015-03-31/functions/{FunctionName}/invocations\"},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"InvocationType\":{\"location\":\"header\",\"locationName\":\"X-Amz-Invocation-Type\"},\"LogType\":{\"location\":\"header\",\"locationName\":\"X-Amz-Log-Type\"},\"ClientContext\":{\"location\":\"header\",\"locationName\":\"X-Amz-Client-Context\"},\"Payload\":{\"type\":\"blob\"},\"Qualifier\":{\"location\":\"querystring\",\"locationName\":\"Qualifier\"}},\"payload\":\"Payload\"},\"output\":{\"type\":\"structure\",\"members\":{\"StatusCode\":{\"location\":\"statusCode\",\"type\":\"integer\"},\"FunctionError\":{\"location\":\"header\",\"locationName\":\"X-Amz-Function-Error\"},\"LogResult\":{\"location\":\"header\",\"locationName\":\"X-Amz-Log-Result\"},\"Payload\":{\"type\":\"blob\"}},\"payload\":\"Payload\"}},\"InvokeAsync\":{\"http\":{\"requestUri\":\"/2014-11-13/functions/{FunctionName}/invoke-async/\",\"responseCode\":202},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\",\"InvokeArgs\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"InvokeArgs\":{\"type\":\"blob\",\"streaming\":true}},\"deprecated\":true,\"payload\":\"InvokeArgs\"},\"output\":{\"type\":\"structure\",\"members\":{\"Status\":{\"location\":\"statusCode\",\"type\":\"integer\"}},\"deprecated\":true},\"deprecated\":true},\"ListAliases\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/aliases\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"FunctionVersion\":{\"location\":\"querystring\",\"locationName\":\"FunctionVersion\"},\"Marker\":{\"location\":\"querystring\",\"locationName\":\"Marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"MaxItems\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"Aliases\":{\"type\":\"list\",\"member\":{\"shape\":\"Sf\"}}}}},\"ListEventSourceMappings\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2015-03-31/event-source-mappings/\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"members\":{\"EventSourceArn\":{\"location\":\"querystring\",\"locationName\":\"EventSourceArn\"},\"FunctionName\":{\"location\":\"querystring\",\"locationName\":\"FunctionName\"},\"Marker\":{\"location\":\"querystring\",\"locationName\":\"Marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"MaxItems\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"EventSourceMappings\":{\"type\":\"list\",\"member\":{\"shape\":\"Sl\"}}}}},\"ListFunctions\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2015-03-31/functions/\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"members\":{\"Marker\":{\"location\":\"querystring\",\"locationName\":\"Marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"MaxItems\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"Functions\":{\"shape\":\"S22\"}}}},\"ListVersionsByFunction\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/versions\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Marker\":{\"location\":\"querystring\",\"locationName\":\"Marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"MaxItems\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"Versions\":{\"shape\":\"S22\"}}}},\"PublishVersion\":{\"http\":{\"requestUri\":\"/2015-03-31/functions/{FunctionName}/versions\",\"responseCode\":201},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"CodeSha256\":{},\"Description\":{}}},\"output\":{\"shape\":\"S14\"}},\"RemovePermission\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/policy/{StatementId}\",\"responseCode\":204},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\",\"StatementId\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"StatementId\":{\"location\":\"uri\",\"locationName\":\"StatementId\"},\"Qualifier\":{\"location\":\"querystring\",\"locationName\":\"Qualifier\"}}}},\"UpdateAlias\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/aliases/{Name}\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\",\"Name\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Name\":{\"location\":\"uri\",\"locationName\":\"Name\"},\"FunctionVersion\":{},\"Description\":{}}},\"output\":{\"shape\":\"Sf\"}},\"UpdateEventSourceMapping\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/2015-03-31/event-source-mappings/{UUID}\",\"responseCode\":202},\"input\":{\"type\":\"structure\",\"required\":[\"UUID\"],\"members\":{\"UUID\":{\"location\":\"uri\",\"locationName\":\"UUID\"},\"FunctionName\":{},\"Enabled\":{\"type\":\"boolean\"},\"BatchSize\":{\"type\":\"integer\"}}},\"output\":{\"shape\":\"Sl\"}},\"UpdateFunctionCode\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/code\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"ZipFile\":{\"type\":\"blob\"},\"S3Bucket\":{},\"S3Key\":{},\"S3ObjectVersion\":{},\"Publish\":{\"type\":\"boolean\"}}},\"output\":{\"shape\":\"S14\"}},\"UpdateFunctionConfiguration\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/2015-03-31/functions/{FunctionName}/configuration\",\"responseCode\":200},\"input\":{\"type\":\"structure\",\"required\":[\"FunctionName\"],\"members\":{\"FunctionName\":{\"location\":\"uri\",\"locationName\":\"FunctionName\"},\"Role\":{},\"Handler\":{},\"Description\":{},\"Timeout\":{\"type\":\"integer\"},\"MemorySize\":{\"type\":\"integer\"},\"VpcConfig\":{\"shape\":\"Sz\"}}},\"output\":{\"shape\":\"S14\"}}},\"shapes\":{\"Sf\":{\"type\":\"structure\",\"members\":{\"AliasArn\":{},\"Name\":{},\"FunctionVersion\":{},\"Description\":{}}},\"Sl\":{\"type\":\"structure\",\"members\":{\"UUID\":{},\"BatchSize\":{\"type\":\"integer\"},\"EventSourceArn\":{},\"FunctionArn\":{},\"LastModified\":{\"type\":\"timestamp\"},\"LastProcessingResult\":{},\"State\":{},\"StateTransitionReason\":{}}},\"Sz\":{\"type\":\"structure\",\"members\":{\"SubnetIds\":{\"shape\":\"S10\"},\"SecurityGroupIds\":{\"shape\":\"S12\"}}},\"S10\":{\"type\":\"list\",\"member\":{}},\"S12\":{\"type\":\"list\",\"member\":{}},\"S14\":{\"type\":\"structure\",\"members\":{\"FunctionName\":{},\"FunctionArn\":{},\"Runtime\":{},\"Role\":{},\"Handler\":{},\"CodeSize\":{\"type\":\"long\"},\"Description\":{},\"Timeout\":{\"type\":\"integer\"},\"MemorySize\":{\"type\":\"integer\"},\"LastModified\":{},\"CodeSha256\":{},\"Version\":{},\"VpcConfig\":{\"type\":\"structure\",\"members\":{\"SubnetIds\":{\"shape\":\"S10\"},\"SecurityGroupIds\":{\"shape\":\"S12\"},\"VpcId\":{}}}}},\"S22\":{\"type\":\"list\",\"member\":{\"shape\":\"S14\"}}},\"paginators\":{\"ListEventSourceMappings\":{\"input_token\":\"Marker\",\"output_token\":\"NextMarker\",\"limit_key\":\"MaxItems\",\"result_key\":\"EventSourceMappings\"},\"ListFunctions\":{\"input_token\":\"Marker\",\"output_token\":\"NextMarker\",\"limit_key\":\"MaxItems\",\"result_key\":\"Functions\"}}};\nAWS.apiLoader.services['machinelearning'] = {};                                                                        // 101\nAWS.MachineLearning = AWS.Service.defineService('machinelearning', [ '2014-12-12' ]);                                  // 102\nrequire('./services/machinelearning');                                                                                 // 103\n                                                                                                                       // 104\nAWS.apiLoader.services['machinelearning']['2014-12-12'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2014-12-12\",\"endpointPrefix\":\"machinelearning\",\"jsonVersion\":\"1.1\",\"serviceFullName\":\"Amazon Machine Learning\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"AmazonML_20141212\",\"protocol\":\"json\"},\"operations\":{\"CreateBatchPrediction\":{\"input\":{\"type\":\"structure\",\"required\":[\"BatchPredictionId\",\"MLModelId\",\"BatchPredictionDataSourceId\",\"OutputUri\"],\"members\":{\"BatchPredictionId\":{},\"BatchPredictionName\":{},\"MLModelId\":{},\"BatchPredictionDataSourceId\":{},\"OutputUri\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"BatchPredictionId\":{}}},\"http\":{}},\"CreateDataSourceFromRDS\":{\"input\":{\"type\":\"structure\",\"required\":[\"DataSourceId\",\"RDSData\",\"RoleARN\"],\"members\":{\"DataSourceId\":{},\"DataSourceName\":{},\"RDSData\":{\"type\":\"structure\",\"required\":[\"DatabaseInformation\",\"SelectSqlQuery\",\"DatabaseCredentials\",\"S3StagingLocation\",\"ResourceRole\",\"ServiceRole\",\"SubnetId\",\"SecurityGroupIds\"],\"members\":{\"DatabaseInformation\":{\"shape\":\"S8\"},\"SelectSqlQuery\":{},\"DatabaseCredentials\":{\"type\":\"structure\",\"required\":[\"Username\",\"Password\"],\"members\":{\"Username\":{},\"Password\":{}}},\"S3StagingLocation\":{},\"DataRearrangement\":{},\"DataSchema\":{},\"DataSchemaUri\":{},\"ResourceRole\":{},\"ServiceRole\":{},\"SubnetId\":{},\"SecurityGroupIds\":{\"type\":\"list\",\"member\":{}}}},\"RoleARN\":{},\"ComputeStatistics\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DataSourceId\":{}}},\"http\":{}},\"CreateDataSourceFromRedshift\":{\"input\":{\"type\":\"structure\",\"required\":[\"DataSourceId\",\"DataSpec\",\"RoleARN\"],\"members\":{\"DataSourceId\":{},\"DataSourceName\":{},\"DataSpec\":{\"type\":\"structure\",\"required\":[\"DatabaseInformation\",\"SelectSqlQuery\",\"DatabaseCredentials\",\"S3StagingLocation\"],\"members\":{\"DatabaseInformation\":{\"shape\":\"Sr\"},\"SelectSqlQuery\":{},\"DatabaseCredentials\":{\"type\":\"structure\",\"required\":[\"Username\",\"Password\"],\"members\":{\"Username\":{},\"Password\":{}}},\"S3StagingLocation\":{},\"DataRearrangement\":{},\"DataSchema\":{},\"DataSchemaUri\":{}}},\"RoleARN\":{},\"ComputeStatistics\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DataSourceId\":{}}},\"http\":{}},\"CreateDataSourceFromS3\":{\"input\":{\"type\":\"structure\",\"required\":[\"DataSourceId\",\"DataSpec\"],\"members\":{\"DataSourceId\":{},\"DataSourceName\":{},\"DataSpec\":{\"type\":\"structure\",\"required\":[\"DataLocationS3\"],\"members\":{\"DataLocationS3\":{},\"DataRearrangement\":{},\"DataSchema\":{},\"DataSchemaLocationS3\":{}}},\"ComputeStatistics\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DataSourceId\":{}}},\"http\":{}},\"CreateEvaluation\":{\"input\":{\"type\":\"structure\",\"required\":[\"EvaluationId\",\"MLModelId\",\"EvaluationDataSourceId\"],\"members\":{\"EvaluationId\":{},\"EvaluationName\":{},\"MLModelId\":{},\"EvaluationDataSourceId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"EvaluationId\":{}}},\"http\":{}},\"CreateMLModel\":{\"input\":{\"type\":\"structure\",\"required\":[\"MLModelId\",\"MLModelType\",\"TrainingDataSourceId\"],\"members\":{\"MLModelId\":{},\"MLModelName\":{},\"MLModelType\":{},\"Parameters\":{\"shape\":\"S16\"},\"TrainingDataSourceId\":{},\"Recipe\":{},\"RecipeUri\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"MLModelId\":{}}},\"http\":{}},\"CreateRealtimeEndpoint\":{\"input\":{\"type\":\"structure\",\"required\":[\"MLModelId\"],\"members\":{\"MLModelId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"MLModelId\":{},\"RealtimeEndpointInfo\":{\"shape\":\"S1c\"}}},\"http\":{}},\"DeleteBatchPrediction\":{\"input\":{\"type\":\"structure\",\"required\":[\"BatchPredictionId\"],\"members\":{\"BatchPredictionId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"BatchPredictionId\":{}}},\"http\":{}},\"DeleteDataSource\":{\"input\":{\"type\":\"structure\",\"required\":[\"DataSourceId\"],\"members\":{\"DataSourceId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"DataSourceId\":{}}},\"http\":{}},\"DeleteEvaluation\":{\"input\":{\"type\":\"structure\",\"required\":[\"EvaluationId\"],\"members\":{\"EvaluationId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"EvaluationId\":{}}},\"http\":{}},\"DeleteMLModel\":{\"input\":{\"type\":\"structure\",\"required\":[\"MLModelId\"],\"members\":{\"MLModelId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"MLModelId\":{}}},\"http\":{}},\"DeleteRealtimeEndpoint\":{\"input\":{\"type\":\"structure\",\"required\":[\"MLModelId\"],\"members\":{\"MLModelId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"MLModelId\":{},\"RealtimeEndpointInfo\":{\"shape\":\"S1c\"}}},\"http\":{}},\"DescribeBatchPredictions\":{\"input\":{\"type\":\"structure\",\"members\":{\"FilterVariable\":{},\"EQ\":{},\"GT\":{},\"LT\":{},\"GE\":{},\"LE\":{},\"NE\":{},\"Prefix\":{},\"SortOrder\":{},\"NextToken\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Results\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"BatchPredictionId\":{},\"MLModelId\":{},\"BatchPredictionDataSourceId\":{},\"InputDataLocationS3\":{},\"CreatedByIamUser\":{},\"CreatedAt\":{\"type\":\"timestamp\"},\"LastUpdatedAt\":{\"type\":\"timestamp\"},\"Name\":{},\"Status\":{},\"OutputUri\":{},\"Message\":{}}}},\"NextToken\":{}}},\"http\":{}},\"DescribeDataSources\":{\"input\":{\"type\":\"structure\",\"members\":{\"FilterVariable\":{},\"EQ\":{},\"GT\":{},\"LT\":{},\"GE\":{},\"LE\":{},\"NE\":{},\"Prefix\":{},\"SortOrder\":{},\"NextToken\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Results\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"DataSourceId\":{},\"DataLocationS3\":{},\"DataRearrangement\":{},\"CreatedByIamUser\":{},\"CreatedAt\":{\"type\":\"timestamp\"},\"LastUpdatedAt\":{\"type\":\"timestamp\"},\"DataSizeInBytes\":{\"type\":\"long\"},\"NumberOfFiles\":{\"type\":\"long\"},\"Name\":{},\"Status\":{},\"Message\":{},\"RedshiftMetadata\":{\"shape\":\"S28\"},\"RDSMetadata\":{\"shape\":\"S29\"},\"RoleARN\":{},\"ComputeStatistics\":{\"type\":\"boolean\"}}}},\"NextToken\":{}}},\"http\":{}},\"DescribeEvaluations\":{\"input\":{\"type\":\"structure\",\"members\":{\"FilterVariable\":{},\"EQ\":{},\"GT\":{},\"LT\":{},\"GE\":{},\"LE\":{},\"NE\":{},\"Prefix\":{},\"SortOrder\":{},\"NextToken\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Results\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"EvaluationId\":{},\"MLModelId\":{},\"EvaluationDataSourceId\":{},\"InputDataLocationS3\":{},\"CreatedByIamUser\":{},\"CreatedAt\":{\"type\":\"timestamp\"},\"LastUpdatedAt\":{\"type\":\"timestamp\"},\"Name\":{},\"Status\":{},\"PerformanceMetrics\":{\"shape\":\"S2g\"},\"Message\":{}}}},\"NextToken\":{}}},\"http\":{}},\"DescribeMLModels\":{\"input\":{\"type\":\"structure\",\"members\":{\"FilterVariable\":{},\"EQ\":{},\"GT\":{},\"LT\":{},\"GE\":{},\"LE\":{},\"NE\":{},\"Prefix\":{},\"SortOrder\":{},\"NextToken\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Results\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"MLModelId\":{},\"TrainingDataSourceId\":{},\"CreatedByIamUser\":{},\"CreatedAt\":{\"type\":\"timestamp\"},\"LastUpdatedAt\":{\"type\":\"timestamp\"},\"Name\":{},\"Status\":{},\"SizeInBytes\":{\"type\":\"long\"},\"EndpointInfo\":{\"shape\":\"S1c\"},\"TrainingParameters\":{\"shape\":\"S16\"},\"InputDataLocationS3\":{},\"Algorithm\":{},\"MLModelType\":{},\"ScoreThreshold\":{\"type\":\"float\"},\"ScoreThresholdLastUpdatedAt\":{\"type\":\"timestamp\"},\"Message\":{}}}},\"NextToken\":{}}},\"http\":{}},\"GetBatchPrediction\":{\"input\":{\"type\":\"structure\",\"required\":[\"BatchPredictionId\"],\"members\":{\"BatchPredictionId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"BatchPredictionId\":{},\"MLModelId\":{},\"BatchPredictionDataSourceId\":{},\"InputDataLocationS3\":{},\"CreatedByIamUser\":{},\"CreatedAt\":{\"type\":\"timestamp\"},\"LastUpdatedAt\":{\"type\":\"timestamp\"},\"Name\":{},\"Status\":{},\"OutputUri\":{},\"LogUri\":{},\"Message\":{}}},\"http\":{}},\"GetDataSource\":{\"input\":{\"type\":\"structure\",\"required\":[\"DataSourceId\"],\"members\":{\"DataSourceId\":{},\"Verbose\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DataSourceId\":{},\"DataLocationS3\":{},\"DataRearrangement\":{},\"CreatedByIamUser\":{},\"CreatedAt\":{\"type\":\"timestamp\"},\"LastUpdatedAt\":{\"type\":\"timestamp\"},\"DataSizeInBytes\":{\"type\":\"long\"},\"NumberOfFiles\":{\"type\":\"long\"},\"Name\":{},\"Status\":{},\"LogUri\":{},\"Message\":{},\"RedshiftMetadata\":{\"shape\":\"S28\"},\"RDSMetadata\":{\"shape\":\"S29\"},\"RoleARN\":{},\"ComputeStatistics\":{\"type\":\"boolean\"},\"DataSourceSchema\":{}}},\"http\":{}},\"GetEvaluation\":{\"input\":{\"type\":\"structure\",\"required\":[\"EvaluationId\"],\"members\":{\"EvaluationId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"EvaluationId\":{},\"MLModelId\":{},\"EvaluationDataSourceId\":{},\"InputDataLocationS3\":{},\"CreatedByIamUser\":{},\"CreatedAt\":{\"type\":\"timestamp\"},\"LastUpdatedAt\":{\"type\":\"timestamp\"},\"Name\":{},\"Status\":{},\"PerformanceMetrics\":{\"shape\":\"S2g\"},\"LogUri\":{},\"Message\":{}}},\"http\":{}},\"GetMLModel\":{\"input\":{\"type\":\"structure\",\"required\":[\"MLModelId\"],\"members\":{\"MLModelId\":{},\"Verbose\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"MLModelId\":{},\"TrainingDataSourceId\":{},\"CreatedByIamUser\":{},\"CreatedAt\":{\"type\":\"timestamp\"},\"LastUpdatedAt\":{\"type\":\"timestamp\"},\"Name\":{},\"Status\":{},\"SizeInBytes\":{\"type\":\"long\"},\"EndpointInfo\":{\"shape\":\"S1c\"},\"TrainingParameters\":{\"shape\":\"S16\"},\"InputDataLocationS3\":{},\"MLModelType\":{},\"ScoreThreshold\":{\"type\":\"float\"},\"ScoreThresholdLastUpdatedAt\":{\"type\":\"timestamp\"},\"LogUri\":{},\"Message\":{},\"Recipe\":{},\"Schema\":{}}},\"http\":{}},\"Predict\":{\"input\":{\"type\":\"structure\",\"required\":[\"MLModelId\",\"Record\",\"PredictEndpoint\"],\"members\":{\"MLModelId\":{},\"Record\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"PredictEndpoint\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Prediction\":{\"type\":\"structure\",\"members\":{\"predictedLabel\":{},\"predictedValue\":{\"type\":\"float\"},\"predictedScores\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"float\"}},\"details\":{\"type\":\"map\",\"key\":{},\"value\":{}}}}}},\"http\":{}},\"UpdateBatchPrediction\":{\"input\":{\"type\":\"structure\",\"required\":[\"BatchPredictionId\",\"BatchPredictionName\"],\"members\":{\"BatchPredictionId\":{},\"BatchPredictionName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"BatchPredictionId\":{}}},\"http\":{}},\"UpdateDataSource\":{\"input\":{\"type\":\"structure\",\"required\":[\"DataSourceId\",\"DataSourceName\"],\"members\":{\"DataSourceId\":{},\"DataSourceName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"DataSourceId\":{}}},\"http\":{}},\"UpdateEvaluation\":{\"input\":{\"type\":\"structure\",\"required\":[\"EvaluationId\",\"EvaluationName\"],\"members\":{\"EvaluationId\":{},\"EvaluationName\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"EvaluationId\":{}}},\"http\":{}},\"UpdateMLModel\":{\"input\":{\"type\":\"structure\",\"required\":[\"MLModelId\"],\"members\":{\"MLModelId\":{},\"MLModelName\":{},\"ScoreThreshold\":{\"type\":\"float\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"MLModelId\":{}}},\"http\":{}}},\"shapes\":{\"S8\":{\"type\":\"structure\",\"required\":[\"InstanceIdentifier\",\"DatabaseName\"],\"members\":{\"InstanceIdentifier\":{},\"DatabaseName\":{}}},\"Sr\":{\"type\":\"structure\",\"required\":[\"DatabaseName\",\"ClusterIdentifier\"],\"members\":{\"DatabaseName\":{},\"ClusterIdentifier\":{}}},\"S16\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"S1c\":{\"type\":\"structure\",\"members\":{\"PeakRequestsPerSecond\":{\"type\":\"integer\"},\"CreatedAt\":{\"type\":\"timestamp\"},\"EndpointUrl\":{},\"EndpointStatus\":{}}},\"S28\":{\"type\":\"structure\",\"members\":{\"RedshiftDatabase\":{\"shape\":\"Sr\"},\"DatabaseUserName\":{},\"SelectSqlQuery\":{}}},\"S29\":{\"type\":\"structure\",\"members\":{\"Database\":{\"shape\":\"S8\"},\"DatabaseUserName\":{},\"SelectSqlQuery\":{},\"ResourceRole\":{},\"ServiceRole\":{},\"DataPipelineId\":{}}},\"S2g\":{\"type\":\"structure\",\"members\":{\"Properties\":{\"type\":\"map\",\"key\":{},\"value\":{}}}}},\"examples\":{},\"paginators\":{\"DescribeBatchPredictions\":{\"limit_key\":\"Limit\",\"output_token\":\"NextToken\",\"input_token\":\"NextToken\",\"result_key\":\"Results\"},\"DescribeDataSources\":{\"limit_key\":\"Limit\",\"output_token\":\"NextToken\",\"input_token\":\"NextToken\",\"result_key\":\"Results\"},\"DescribeEvaluations\":{\"limit_key\":\"Limit\",\"output_token\":\"NextToken\",\"input_token\":\"NextToken\",\"result_key\":\"Results\"},\"DescribeMLModels\":{\"limit_key\":\"Limit\",\"output_token\":\"NextToken\",\"input_token\":\"NextToken\",\"result_key\":\"Results\"}}};\nAWS.apiLoader.services['marketplacecommerceanalytics'] = {};                                                           // 106\nAWS.MarketplaceCommerceAnalytics = AWS.Service.defineService('marketplacecommerceanalytics', [ '2015-07-01' ]);        // 107\n                                                                                                                       // 108\nAWS.apiLoader.services['marketplacecommerceanalytics']['2015-07-01'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-07-01\",\"endpointPrefix\":\"marketplacecommerceanalytics\",\"jsonVersion\":\"1.1\",\"protocol\":\"json\",\"serviceFullName\":\"AWS Marketplace Commerce Analytics\",\"signatureVersion\":\"v4\",\"signingName\":\"marketplacecommerceanalytics\",\"targetPrefix\":\"MarketplaceCommerceAnalytics20150701\"},\"operations\":{\"GenerateDataSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"dataSetType\",\"dataSetPublicationDate\",\"roleNameArn\",\"destinationS3BucketName\",\"snsTopicArn\"],\"members\":{\"dataSetType\":{},\"dataSetPublicationDate\":{\"type\":\"timestamp\"},\"roleNameArn\":{},\"destinationS3BucketName\":{},\"destinationS3Prefix\":{},\"snsTopicArn\":{},\"customerDefinedValues\":{\"type\":\"map\",\"key\":{},\"value\":{}}}},\"output\":{\"type\":\"structure\",\"members\":{\"dataSetRequestId\":{}}},\"http\":{}}},\"shapes\":{}};\nAWS.apiLoader.services['mobileanalytics'] = {};                                                                        // 110\nAWS.MobileAnalytics = AWS.Service.defineService('mobileanalytics', [ '2014-06-05' ]);                                  // 111\n                                                                                                                       // 112\nAWS.apiLoader.services['mobileanalytics']['2014-06-05'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2014-06-05\",\"endpointPrefix\":\"mobileanalytics\",\"serviceFullName\":\"Amazon Mobile Analytics\",\"signatureVersion\":\"v4\",\"protocol\":\"rest-json\"},\"operations\":{\"PutEvents\":{\"http\":{\"requestUri\":\"/2014-06-05/events\",\"responseCode\":202},\"input\":{\"type\":\"structure\",\"required\":[\"events\",\"clientContext\"],\"members\":{\"events\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"eventType\",\"timestamp\"],\"members\":{\"eventType\":{},\"timestamp\":{},\"session\":{\"type\":\"structure\",\"members\":{\"id\":{},\"duration\":{\"type\":\"long\"},\"startTimestamp\":{},\"stopTimestamp\":{}}},\"version\":{},\"attributes\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"metrics\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"double\"}}}}},\"clientContext\":{\"location\":\"header\",\"locationName\":\"x-amz-Client-Context\"},\"clientContextEncoding\":{\"location\":\"header\",\"locationName\":\"x-amz-Client-Context-Encoding\"}}}}},\"shapes\":{}};\nAWS.apiLoader.services['opsworks'] = {};                                                                               // 114\nAWS.OpsWorks = AWS.Service.defineService('opsworks', [ '2013-02-18' ]);                                                // 115\n                                                                                                                       // 116\nAWS.apiLoader.services['opsworks']['2013-02-18'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2013-02-18\",\"endpointPrefix\":\"opsworks\",\"jsonVersion\":\"1.1\",\"protocol\":\"json\",\"serviceFullName\":\"AWS OpsWorks\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"OpsWorks_20130218\"},\"operations\":{\"AssignInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\",\"LayerIds\"],\"members\":{\"InstanceId\":{},\"LayerIds\":{\"shape\":\"S3\"}}},\"http\":{}},\"AssignVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"VolumeId\":{},\"InstanceId\":{}}},\"http\":{}},\"AssociateElasticIp\":{\"input\":{\"type\":\"structure\",\"required\":[\"ElasticIp\"],\"members\":{\"ElasticIp\":{},\"InstanceId\":{}}},\"http\":{}},\"AttachElasticLoadBalancer\":{\"input\":{\"type\":\"structure\",\"required\":[\"ElasticLoadBalancerName\",\"LayerId\"],\"members\":{\"ElasticLoadBalancerName\":{},\"LayerId\":{}}},\"http\":{}},\"CloneStack\":{\"input\":{\"type\":\"structure\",\"required\":[\"SourceStackId\",\"ServiceRoleArn\"],\"members\":{\"SourceStackId\":{},\"Name\":{},\"Region\":{},\"VpcId\":{},\"Attributes\":{\"shape\":\"S8\"},\"ServiceRoleArn\":{},\"DefaultInstanceProfileArn\":{},\"DefaultOs\":{},\"HostnameTheme\":{},\"DefaultAvailabilityZone\":{},\"DefaultSubnetId\":{},\"CustomJson\":{},\"ConfigurationManager\":{\"shape\":\"Sa\"},\"ChefConfiguration\":{\"shape\":\"Sb\"},\"UseCustomCookbooks\":{\"type\":\"boolean\"},\"UseOpsworksSecurityGroups\":{\"type\":\"boolean\"},\"CustomCookbooksSource\":{\"shape\":\"Sd\"},\"DefaultSshKeyName\":{},\"ClonePermissions\":{\"type\":\"boolean\"},\"CloneAppIds\":{\"shape\":\"S3\"},\"DefaultRootDeviceType\":{},\"AgentVersion\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"StackId\":{}}},\"http\":{}},\"CreateApp\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\",\"Name\",\"Type\"],\"members\":{\"StackId\":{},\"Shortname\":{},\"Name\":{},\"Description\":{},\"DataSources\":{\"shape\":\"Si\"},\"Type\":{},\"AppSource\":{\"shape\":\"Sd\"},\"Domains\":{\"shape\":\"S3\"},\"EnableSsl\":{\"type\":\"boolean\"},\"SslConfiguration\":{\"shape\":\"Sl\"},\"Attributes\":{\"shape\":\"Sm\"},\"Environment\":{\"shape\":\"So\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"AppId\":{}}},\"http\":{}},\"CreateDeployment\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\",\"Command\"],\"members\":{\"StackId\":{},\"AppId\":{},\"InstanceIds\":{\"shape\":\"S3\"},\"Command\":{\"shape\":\"Ss\"},\"Comment\":{},\"CustomJson\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"DeploymentId\":{}}},\"http\":{}},\"CreateInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\",\"LayerIds\",\"InstanceType\"],\"members\":{\"StackId\":{},\"LayerIds\":{\"shape\":\"S3\"},\"InstanceType\":{},\"AutoScalingType\":{},\"Hostname\":{},\"Os\":{},\"AmiId\":{},\"SshKeyName\":{},\"AvailabilityZone\":{},\"VirtualizationType\":{},\"SubnetId\":{},\"Architecture\":{},\"RootDeviceType\":{},\"BlockDeviceMappings\":{\"shape\":\"Sz\"},\"InstallUpdatesOnBoot\":{\"type\":\"boolean\"},\"EbsOptimized\":{\"type\":\"boolean\"},\"AgentVersion\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{}}},\"http\":{}},\"CreateLayer\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\",\"Type\",\"Name\",\"Shortname\"],\"members\":{\"StackId\":{},\"Type\":{},\"Name\":{},\"Shortname\":{},\"Attributes\":{\"shape\":\"S17\"},\"CustomInstanceProfileArn\":{},\"CustomJson\":{},\"CustomSecurityGroupIds\":{\"shape\":\"S3\"},\"Packages\":{\"shape\":\"S3\"},\"VolumeConfigurations\":{\"shape\":\"S19\"},\"EnableAutoHealing\":{\"type\":\"boolean\"},\"AutoAssignElasticIps\":{\"type\":\"boolean\"},\"AutoAssignPublicIps\":{\"type\":\"boolean\"},\"CustomRecipes\":{\"shape\":\"S1b\"},\"InstallUpdatesOnBoot\":{\"type\":\"boolean\"},\"UseEbsOptimizedInstances\":{\"type\":\"boolean\"},\"LifecycleEventConfiguration\":{\"shape\":\"S1c\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"LayerId\":{}}},\"http\":{}},\"CreateStack\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"Region\",\"ServiceRoleArn\",\"DefaultInstanceProfileArn\"],\"members\":{\"Name\":{},\"Region\":{},\"VpcId\":{},\"Attributes\":{\"shape\":\"S8\"},\"ServiceRoleArn\":{},\"DefaultInstanceProfileArn\":{},\"DefaultOs\":{},\"HostnameTheme\":{},\"DefaultAvailabilityZone\":{},\"DefaultSubnetId\":{},\"CustomJson\":{},\"ConfigurationManager\":{\"shape\":\"Sa\"},\"ChefConfiguration\":{\"shape\":\"Sb\"},\"UseCustomCookbooks\":{\"type\":\"boolean\"},\"UseOpsworksSecurityGroups\":{\"type\":\"boolean\"},\"CustomCookbooksSource\":{\"shape\":\"Sd\"},\"DefaultSshKeyName\":{},\"DefaultRootDeviceType\":{},\"AgentVersion\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"StackId\":{}}},\"http\":{}},\"CreateUserProfile\":{\"input\":{\"type\":\"structure\",\"required\":[\"IamUserArn\"],\"members\":{\"IamUserArn\":{},\"SshUsername\":{},\"SshPublicKey\":{},\"AllowSelfManagement\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IamUserArn\":{}}},\"http\":{}},\"DeleteApp\":{\"input\":{\"type\":\"structure\",\"required\":[\"AppId\"],\"members\":{\"AppId\":{}}},\"http\":{}},\"DeleteInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{},\"DeleteElasticIp\":{\"type\":\"boolean\"},\"DeleteVolumes\":{\"type\":\"boolean\"}}},\"http\":{}},\"DeleteLayer\":{\"input\":{\"type\":\"structure\",\"required\":[\"LayerId\"],\"members\":{\"LayerId\":{}}},\"http\":{}},\"DeleteStack\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\"],\"members\":{\"StackId\":{}}},\"http\":{}},\"DeleteUserProfile\":{\"input\":{\"type\":\"structure\",\"required\":[\"IamUserArn\"],\"members\":{\"IamUserArn\":{}}},\"http\":{}},\"DeregisterEcsCluster\":{\"input\":{\"type\":\"structure\",\"required\":[\"EcsClusterArn\"],\"members\":{\"EcsClusterArn\":{}}},\"http\":{}},\"DeregisterElasticIp\":{\"input\":{\"type\":\"structure\",\"required\":[\"ElasticIp\"],\"members\":{\"ElasticIp\":{}}},\"http\":{}},\"DeregisterInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{}}},\"http\":{}},\"DeregisterRdsDbInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"RdsDbInstanceArn\"],\"members\":{\"RdsDbInstanceArn\":{}}},\"http\":{}},\"DeregisterVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"VolumeId\":{}}},\"http\":{}},\"DescribeAgentVersions\":{\"input\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"ConfigurationManager\":{\"shape\":\"Sa\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"AgentVersions\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Version\":{},\"ConfigurationManager\":{\"shape\":\"Sa\"}}}}}},\"http\":{}},\"DescribeApps\":{\"input\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"AppIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Apps\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"AppId\":{},\"StackId\":{},\"Shortname\":{},\"Name\":{},\"Description\":{},\"DataSources\":{\"shape\":\"Si\"},\"Type\":{},\"AppSource\":{\"shape\":\"Sd\"},\"Domains\":{\"shape\":\"S3\"},\"EnableSsl\":{\"type\":\"boolean\"},\"SslConfiguration\":{\"shape\":\"Sl\"},\"Attributes\":{\"shape\":\"Sm\"},\"CreatedAt\":{},\"Environment\":{\"shape\":\"So\"}}}}}},\"http\":{}},\"DescribeCommands\":{\"input\":{\"type\":\"structure\",\"members\":{\"DeploymentId\":{},\"InstanceId\":{},\"CommandIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Commands\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"CommandId\":{},\"InstanceId\":{},\"DeploymentId\":{},\"CreatedAt\":{},\"AcknowledgedAt\":{},\"CompletedAt\":{},\"Status\":{},\"ExitCode\":{\"type\":\"integer\"},\"LogUrl\":{},\"Type\":{}}}}}},\"http\":{}},\"DescribeDeployments\":{\"input\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"AppId\":{},\"DeploymentIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Deployments\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"DeploymentId\":{},\"StackId\":{},\"AppId\":{},\"CreatedAt\":{},\"CompletedAt\":{},\"Duration\":{\"type\":\"integer\"},\"IamUserArn\":{},\"Comment\":{},\"Command\":{\"shape\":\"Ss\"},\"Status\":{},\"CustomJson\":{},\"InstanceIds\":{\"shape\":\"S3\"}}}}}},\"http\":{}},\"DescribeEcsClusters\":{\"input\":{\"type\":\"structure\",\"members\":{\"EcsClusterArns\":{\"shape\":\"S3\"},\"StackId\":{},\"NextToken\":{},\"MaxResults\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"EcsClusters\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"EcsClusterArn\":{},\"EcsClusterName\":{},\"StackId\":{},\"RegisteredAt\":{}}}},\"NextToken\":{}}},\"http\":{}},\"DescribeElasticIps\":{\"input\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{},\"StackId\":{},\"Ips\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ElasticIps\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Ip\":{},\"Name\":{},\"Domain\":{},\"Region\":{},\"InstanceId\":{}}}}}},\"http\":{}},\"DescribeElasticLoadBalancers\":{\"input\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"LayerIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ElasticLoadBalancers\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"ElasticLoadBalancerName\":{},\"Region\":{},\"DnsName\":{},\"StackId\":{},\"LayerId\":{},\"VpcId\":{},\"AvailabilityZones\":{\"shape\":\"S3\"},\"SubnetIds\":{\"shape\":\"S3\"},\"Ec2InstanceIds\":{\"shape\":\"S3\"}}}}}},\"http\":{}},\"DescribeInstances\":{\"input\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"LayerId\":{},\"InstanceIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Instances\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"AgentVersion\":{},\"AmiId\":{},\"Architecture\":{},\"AutoScalingType\":{},\"AvailabilityZone\":{},\"BlockDeviceMappings\":{\"shape\":\"Sz\"},\"CreatedAt\":{},\"EbsOptimized\":{\"type\":\"boolean\"},\"Ec2InstanceId\":{},\"EcsClusterArn\":{},\"EcsContainerInstanceArn\":{},\"ElasticIp\":{},\"Hostname\":{},\"InfrastructureClass\":{},\"InstallUpdatesOnBoot\":{\"type\":\"boolean\"},\"InstanceId\":{},\"InstanceProfileArn\":{},\"InstanceType\":{},\"LastServiceErrorId\":{},\"LayerIds\":{\"shape\":\"S3\"},\"Os\":{},\"Platform\":{},\"PrivateDns\":{},\"PrivateIp\":{},\"PublicDns\":{},\"PublicIp\":{},\"RegisteredBy\":{},\"ReportedAgentVersion\":{},\"ReportedOs\":{\"type\":\"structure\",\"members\":{\"Family\":{},\"Name\":{},\"Version\":{}}},\"RootDeviceType\":{},\"RootDeviceVolumeId\":{},\"SecurityGroupIds\":{\"shape\":\"S3\"},\"SshHostDsaKeyFingerprint\":{},\"SshHostRsaKeyFingerprint\":{},\"SshKeyName\":{},\"StackId\":{},\"Status\":{},\"SubnetId\":{},\"VirtualizationType\":{}}}}}},\"http\":{}},\"DescribeLayers\":{\"input\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"LayerIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Layers\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"LayerId\":{},\"Type\":{},\"Name\":{},\"Shortname\":{},\"Attributes\":{\"shape\":\"S17\"},\"CustomInstanceProfileArn\":{},\"CustomJson\":{},\"CustomSecurityGroupIds\":{\"shape\":\"S3\"},\"DefaultSecurityGroupNames\":{\"shape\":\"S3\"},\"Packages\":{\"shape\":\"S3\"},\"VolumeConfigurations\":{\"shape\":\"S19\"},\"EnableAutoHealing\":{\"type\":\"boolean\"},\"AutoAssignElasticIps\":{\"type\":\"boolean\"},\"AutoAssignPublicIps\":{\"type\":\"boolean\"},\"DefaultRecipes\":{\"shape\":\"S1b\"},\"CustomRecipes\":{\"shape\":\"S1b\"},\"CreatedAt\":{},\"InstallUpdatesOnBoot\":{\"type\":\"boolean\"},\"UseEbsOptimizedInstances\":{\"type\":\"boolean\"},\"LifecycleEventConfiguration\":{\"shape\":\"S1c\"}}}}}},\"http\":{}},\"DescribeLoadBasedAutoScaling\":{\"input\":{\"type\":\"structure\",\"required\":[\"LayerIds\"],\"members\":{\"LayerIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"LoadBasedAutoScalingConfigurations\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"LayerId\":{},\"Enable\":{\"type\":\"boolean\"},\"UpScaling\":{\"shape\":\"S30\"},\"DownScaling\":{\"shape\":\"S30\"}}}}}},\"http\":{}},\"DescribeMyUserProfile\":{\"output\":{\"type\":\"structure\",\"members\":{\"UserProfile\":{\"type\":\"structure\",\"members\":{\"IamUserArn\":{},\"Name\":{},\"SshUsername\":{},\"SshPublicKey\":{}}}}},\"http\":{}},\"DescribePermissions\":{\"input\":{\"type\":\"structure\",\"members\":{\"IamUserArn\":{},\"StackId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Permissions\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"IamUserArn\":{},\"AllowSsh\":{\"type\":\"boolean\"},\"AllowSudo\":{\"type\":\"boolean\"},\"Level\":{}}}}}},\"http\":{}},\"DescribeRaidArrays\":{\"input\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{},\"StackId\":{},\"RaidArrayIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"RaidArrays\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"RaidArrayId\":{},\"InstanceId\":{},\"Name\":{},\"RaidLevel\":{\"type\":\"integer\"},\"NumberOfDisks\":{\"type\":\"integer\"},\"Size\":{\"type\":\"integer\"},\"Device\":{},\"MountPoint\":{},\"AvailabilityZone\":{},\"CreatedAt\":{},\"StackId\":{},\"VolumeType\":{},\"Iops\":{\"type\":\"integer\"}}}}}},\"http\":{}},\"DescribeRdsDbInstances\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\"],\"members\":{\"StackId\":{},\"RdsDbInstanceArns\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"RdsDbInstances\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"RdsDbInstanceArn\":{},\"DbInstanceIdentifier\":{},\"DbUser\":{},\"DbPassword\":{},\"Region\":{},\"Address\":{},\"Engine\":{},\"StackId\":{},\"MissingOnRds\":{\"type\":\"boolean\"}}}}}},\"http\":{}},\"DescribeServiceErrors\":{\"input\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"InstanceId\":{},\"ServiceErrorIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ServiceErrors\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"ServiceErrorId\":{},\"StackId\":{},\"InstanceId\":{},\"Type\":{},\"Message\":{},\"CreatedAt\":{}}}}}},\"http\":{}},\"DescribeStackProvisioningParameters\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\"],\"members\":{\"StackId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"AgentInstallerUrl\":{},\"Parameters\":{\"type\":\"map\",\"key\":{},\"value\":{}}}},\"http\":{}},\"DescribeStackSummary\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\"],\"members\":{\"StackId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"StackSummary\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"Name\":{},\"Arn\":{},\"LayersCount\":{\"type\":\"integer\"},\"AppsCount\":{\"type\":\"integer\"},\"InstancesCount\":{\"type\":\"structure\",\"members\":{\"Assigning\":{\"type\":\"integer\"},\"Booting\":{\"type\":\"integer\"},\"ConnectionLost\":{\"type\":\"integer\"},\"Deregistering\":{\"type\":\"integer\"},\"Online\":{\"type\":\"integer\"},\"Pending\":{\"type\":\"integer\"},\"Rebooting\":{\"type\":\"integer\"},\"Registered\":{\"type\":\"integer\"},\"Registering\":{\"type\":\"integer\"},\"Requested\":{\"type\":\"integer\"},\"RunningSetup\":{\"type\":\"integer\"},\"SetupFailed\":{\"type\":\"integer\"},\"ShuttingDown\":{\"type\":\"integer\"},\"StartFailed\":{\"type\":\"integer\"},\"Stopped\":{\"type\":\"integer\"},\"Stopping\":{\"type\":\"integer\"},\"Terminated\":{\"type\":\"integer\"},\"Terminating\":{\"type\":\"integer\"},\"Unassigning\":{\"type\":\"integer\"}}}}}}},\"http\":{}},\"DescribeStacks\":{\"input\":{\"type\":\"structure\",\"members\":{\"StackIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Stacks\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"StackId\":{},\"Name\":{},\"Arn\":{},\"Region\":{},\"VpcId\":{},\"Attributes\":{\"shape\":\"S8\"},\"ServiceRoleArn\":{},\"DefaultInstanceProfileArn\":{},\"DefaultOs\":{},\"HostnameTheme\":{},\"DefaultAvailabilityZone\":{},\"DefaultSubnetId\":{},\"CustomJson\":{},\"ConfigurationManager\":{\"shape\":\"Sa\"},\"ChefConfiguration\":{\"shape\":\"Sb\"},\"UseCustomCookbooks\":{\"type\":\"boolean\"},\"UseOpsworksSecurityGroups\":{\"type\":\"boolean\"},\"CustomCookbooksSource\":{\"shape\":\"Sd\"},\"DefaultSshKeyName\":{},\"CreatedAt\":{},\"DefaultRootDeviceType\":{},\"AgentVersion\":{}}}}}},\"http\":{}},\"DescribeTimeBasedAutoScaling\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceIds\"],\"members\":{\"InstanceIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"TimeBasedAutoScalingConfigurations\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{},\"AutoScalingSchedule\":{\"shape\":\"S40\"}}}}}},\"http\":{}},\"DescribeUserProfiles\":{\"input\":{\"type\":\"structure\",\"members\":{\"IamUserArns\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"UserProfiles\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"IamUserArn\":{},\"Name\":{},\"SshUsername\":{},\"SshPublicKey\":{},\"AllowSelfManagement\":{\"type\":\"boolean\"}}}}}},\"http\":{}},\"DescribeVolumes\":{\"input\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{},\"StackId\":{},\"RaidArrayId\":{},\"VolumeIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Volumes\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"VolumeId\":{},\"Ec2VolumeId\":{},\"Name\":{},\"RaidArrayId\":{},\"InstanceId\":{},\"Status\":{},\"Size\":{\"type\":\"integer\"},\"Device\":{},\"MountPoint\":{},\"Region\":{},\"AvailabilityZone\":{},\"VolumeType\":{},\"Iops\":{\"type\":\"integer\"}}}}}},\"http\":{}},\"DetachElasticLoadBalancer\":{\"input\":{\"type\":\"structure\",\"required\":[\"ElasticLoadBalancerName\",\"LayerId\"],\"members\":{\"ElasticLoadBalancerName\":{},\"LayerId\":{}}},\"http\":{}},\"DisassociateElasticIp\":{\"input\":{\"type\":\"structure\",\"required\":[\"ElasticIp\"],\"members\":{\"ElasticIp\":{}}},\"http\":{}},\"GetHostnameSuggestion\":{\"input\":{\"type\":\"structure\",\"required\":[\"LayerId\"],\"members\":{\"LayerId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"LayerId\":{},\"Hostname\":{}}},\"http\":{}},\"GrantAccess\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{},\"ValidForInMinutes\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"TemporaryCredential\":{\"type\":\"structure\",\"members\":{\"Username\":{},\"Password\":{},\"ValidForInMinutes\":{\"type\":\"integer\"},\"InstanceId\":{}}}}},\"http\":{}},\"RebootInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{}}},\"http\":{}},\"RegisterEcsCluster\":{\"input\":{\"type\":\"structure\",\"required\":[\"EcsClusterArn\",\"StackId\"],\"members\":{\"EcsClusterArn\":{},\"StackId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"EcsClusterArn\":{}}},\"http\":{}},\"RegisterElasticIp\":{\"input\":{\"type\":\"structure\",\"required\":[\"ElasticIp\",\"StackId\"],\"members\":{\"ElasticIp\":{},\"StackId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ElasticIp\":{}}},\"http\":{}},\"RegisterInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\"],\"members\":{\"StackId\":{},\"Hostname\":{},\"PublicIp\":{},\"PrivateIp\":{},\"RsaPublicKey\":{},\"RsaPublicKeyFingerprint\":{},\"InstanceIdentity\":{\"type\":\"structure\",\"members\":{\"Document\":{},\"Signature\":{}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceId\":{}}},\"http\":{}},\"RegisterRdsDbInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\",\"RdsDbInstanceArn\",\"DbUser\",\"DbPassword\"],\"members\":{\"StackId\":{},\"RdsDbInstanceArn\":{},\"DbUser\":{},\"DbPassword\":{}}},\"http\":{}},\"RegisterVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\"],\"members\":{\"Ec2VolumeId\":{},\"StackId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"VolumeId\":{}}},\"http\":{}},\"SetLoadBasedAutoScaling\":{\"input\":{\"type\":\"structure\",\"required\":[\"LayerId\"],\"members\":{\"LayerId\":{},\"Enable\":{\"type\":\"boolean\"},\"UpScaling\":{\"shape\":\"S30\"},\"DownScaling\":{\"shape\":\"S30\"}}},\"http\":{}},\"SetPermission\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\",\"IamUserArn\"],\"members\":{\"StackId\":{},\"IamUserArn\":{},\"AllowSsh\":{\"type\":\"boolean\"},\"AllowSudo\":{\"type\":\"boolean\"},\"Level\":{}}},\"http\":{}},\"SetTimeBasedAutoScaling\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{},\"AutoScalingSchedule\":{\"shape\":\"S40\"}}},\"http\":{}},\"StartInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{}}},\"http\":{}},\"StartStack\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\"],\"members\":{\"StackId\":{}}},\"http\":{}},\"StopInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{}}},\"http\":{}},\"StopStack\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\"],\"members\":{\"StackId\":{}}},\"http\":{}},\"UnassignInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{}}},\"http\":{}},\"UnassignVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"VolumeId\":{}}},\"http\":{}},\"UpdateApp\":{\"input\":{\"type\":\"structure\",\"required\":[\"AppId\"],\"members\":{\"AppId\":{},\"Name\":{},\"Description\":{},\"DataSources\":{\"shape\":\"Si\"},\"Type\":{},\"AppSource\":{\"shape\":\"Sd\"},\"Domains\":{\"shape\":\"S3\"},\"EnableSsl\":{\"type\":\"boolean\"},\"SslConfiguration\":{\"shape\":\"Sl\"},\"Attributes\":{\"shape\":\"Sm\"},\"Environment\":{\"shape\":\"So\"}}},\"http\":{}},\"UpdateElasticIp\":{\"input\":{\"type\":\"structure\",\"required\":[\"ElasticIp\"],\"members\":{\"ElasticIp\":{},\"Name\":{}}},\"http\":{}},\"UpdateInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceId\"],\"members\":{\"InstanceId\":{},\"LayerIds\":{\"shape\":\"S3\"},\"InstanceType\":{},\"AutoScalingType\":{},\"Hostname\":{},\"Os\":{},\"AmiId\":{},\"SshKeyName\":{},\"Architecture\":{},\"InstallUpdatesOnBoot\":{\"type\":\"boolean\"},\"EbsOptimized\":{\"type\":\"boolean\"},\"AgentVersion\":{}}},\"http\":{}},\"UpdateLayer\":{\"input\":{\"type\":\"structure\",\"required\":[\"LayerId\"],\"members\":{\"LayerId\":{},\"Name\":{},\"Shortname\":{},\"Attributes\":{\"shape\":\"S17\"},\"CustomInstanceProfileArn\":{},\"CustomJson\":{},\"CustomSecurityGroupIds\":{\"shape\":\"S3\"},\"Packages\":{\"shape\":\"S3\"},\"VolumeConfigurations\":{\"shape\":\"S19\"},\"EnableAutoHealing\":{\"type\":\"boolean\"},\"AutoAssignElasticIps\":{\"type\":\"boolean\"},\"AutoAssignPublicIps\":{\"type\":\"boolean\"},\"CustomRecipes\":{\"shape\":\"S1b\"},\"InstallUpdatesOnBoot\":{\"type\":\"boolean\"},\"UseEbsOptimizedInstances\":{\"type\":\"boolean\"},\"LifecycleEventConfiguration\":{\"shape\":\"S1c\"}}},\"http\":{}},\"UpdateMyUserProfile\":{\"input\":{\"type\":\"structure\",\"members\":{\"SshPublicKey\":{}}},\"http\":{}},\"UpdateRdsDbInstance\":{\"input\":{\"type\":\"structure\",\"required\":[\"RdsDbInstanceArn\"],\"members\":{\"RdsDbInstanceArn\":{},\"DbUser\":{},\"DbPassword\":{}}},\"http\":{}},\"UpdateStack\":{\"input\":{\"type\":\"structure\",\"required\":[\"StackId\"],\"members\":{\"StackId\":{},\"Name\":{},\"Attributes\":{\"shape\":\"S8\"},\"ServiceRoleArn\":{},\"DefaultInstanceProfileArn\":{},\"DefaultOs\":{},\"HostnameTheme\":{},\"DefaultAvailabilityZone\":{},\"DefaultSubnetId\":{},\"CustomJson\":{},\"ConfigurationManager\":{\"shape\":\"Sa\"},\"ChefConfiguration\":{\"shape\":\"Sb\"},\"UseCustomCookbooks\":{\"type\":\"boolean\"},\"CustomCookbooksSource\":{\"shape\":\"Sd\"},\"DefaultSshKeyName\":{},\"DefaultRootDeviceType\":{},\"UseOpsworksSecurityGroups\":{\"type\":\"boolean\"},\"AgentVersion\":{}}},\"http\":{}},\"UpdateUserProfile\":{\"input\":{\"type\":\"structure\",\"required\":[\"IamUserArn\"],\"members\":{\"IamUserArn\":{},\"SshUsername\":{},\"SshPublicKey\":{},\"AllowSelfManagement\":{\"type\":\"boolean\"}}},\"http\":{}},\"UpdateVolume\":{\"input\":{\"type\":\"structure\",\"required\":[\"VolumeId\"],\"members\":{\"VolumeId\":{},\"Name\":{},\"MountPoint\":{}}},\"http\":{}}},\"shapes\":{\"S3\":{\"type\":\"list\",\"member\":{}},\"S8\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"Sa\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"Version\":{}}},\"Sb\":{\"type\":\"structure\",\"members\":{\"ManageBerkshelf\":{\"type\":\"boolean\"},\"BerkshelfVersion\":{}}},\"Sd\":{\"type\":\"structure\",\"members\":{\"Type\":{},\"Url\":{},\"Username\":{},\"Password\":{},\"SshKey\":{},\"Revision\":{}}},\"Si\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Type\":{},\"Arn\":{},\"DatabaseName\":{}}}},\"Sl\":{\"type\":\"structure\",\"required\":[\"Certificate\",\"PrivateKey\"],\"members\":{\"Certificate\":{},\"PrivateKey\":{},\"Chain\":{}}},\"Sm\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"So\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Key\",\"Value\"],\"members\":{\"Key\":{},\"Value\":{},\"Secure\":{\"type\":\"boolean\"}}}},\"Ss\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{},\"Args\":{\"type\":\"map\",\"key\":{},\"value\":{\"shape\":\"S3\"}}}},\"Sz\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"DeviceName\":{},\"NoDevice\":{},\"VirtualName\":{},\"Ebs\":{\"type\":\"structure\",\"members\":{\"SnapshotId\":{},\"Iops\":{\"type\":\"integer\"},\"VolumeSize\":{\"type\":\"integer\"},\"VolumeType\":{},\"DeleteOnTermination\":{\"type\":\"boolean\"}}}}}},\"S17\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"S19\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"MountPoint\",\"NumberOfDisks\",\"Size\"],\"members\":{\"MountPoint\":{},\"RaidLevel\":{\"type\":\"integer\"},\"NumberOfDisks\":{\"type\":\"integer\"},\"Size\":{\"type\":\"integer\"},\"VolumeType\":{},\"Iops\":{\"type\":\"integer\"}}}},\"S1b\":{\"type\":\"structure\",\"members\":{\"Setup\":{\"shape\":\"S3\"},\"Configure\":{\"shape\":\"S3\"},\"Deploy\":{\"shape\":\"S3\"},\"Undeploy\":{\"shape\":\"S3\"},\"Shutdown\":{\"shape\":\"S3\"}}},\"S1c\":{\"type\":\"structure\",\"members\":{\"Shutdown\":{\"type\":\"structure\",\"members\":{\"ExecutionTimeout\":{\"type\":\"integer\"},\"DelayUntilElbConnectionsDrained\":{\"type\":\"boolean\"}}}}},\"S30\":{\"type\":\"structure\",\"members\":{\"InstanceCount\":{\"type\":\"integer\"},\"ThresholdsWaitTime\":{\"type\":\"integer\"},\"IgnoreMetricsTime\":{\"type\":\"integer\"},\"CpuThreshold\":{\"type\":\"double\"},\"MemoryThreshold\":{\"type\":\"double\"},\"LoadThreshold\":{\"type\":\"double\"},\"Alarms\":{\"shape\":\"S3\"}}},\"S40\":{\"type\":\"structure\",\"members\":{\"Monday\":{\"shape\":\"S41\"},\"Tuesday\":{\"shape\":\"S41\"},\"Wednesday\":{\"shape\":\"S41\"},\"Thursday\":{\"shape\":\"S41\"},\"Friday\":{\"shape\":\"S41\"},\"Saturday\":{\"shape\":\"S41\"},\"Sunday\":{\"shape\":\"S41\"}}},\"S41\":{\"type\":\"map\",\"key\":{},\"value\":{}}},\"paginators\":{\"DescribeApps\":{\"result_key\":\"Apps\"},\"DescribeCommands\":{\"result_key\":\"Commands\"},\"DescribeDeployments\":{\"result_key\":\"Deployments\"},\"DescribeEcsClusters\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"EcsClusters\"},\"DescribeElasticIps\":{\"result_key\":\"ElasticIps\"},\"DescribeElasticLoadBalancers\":{\"result_key\":\"ElasticLoadBalancers\"},\"DescribeInstances\":{\"result_key\":\"Instances\"},\"DescribeLayers\":{\"result_key\":\"Layers\"},\"DescribeLoadBasedAutoScaling\":{\"result_key\":\"LoadBasedAutoScalingConfigurations\"},\"DescribePermissions\":{\"result_key\":\"Permissions\"},\"DescribeRaidArrays\":{\"result_key\":\"RaidArrays\"},\"DescribeServiceErrors\":{\"result_key\":\"ServiceErrors\"},\"DescribeStacks\":{\"result_key\":\"Stacks\"},\"DescribeTimeBasedAutoScaling\":{\"result_key\":\"TimeBasedAutoScalingConfigurations\"},\"DescribeUserProfiles\":{\"result_key\":\"UserProfiles\"},\"DescribeVolumes\":{\"result_key\":\"Volumes\"}}};\nAWS.apiLoader.services['route53'] = {};                                                                                // 118\nAWS.Route53 = AWS.Service.defineService('route53', [ '2013-04-01' ]);                                                  // 119\nrequire('./services/route53');                                                                                         // 120\n                                                                                                                       // 121\nAWS.apiLoader.services['route53']['2013-04-01'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2013-04-01\",\"endpointPrefix\":\"route53\",\"globalEndpoint\":\"route53.amazonaws.com\",\"protocol\":\"rest-xml\",\"serviceAbbreviation\":\"Route 53\",\"serviceFullName\":\"Amazon Route 53\",\"signatureVersion\":\"v4\"},\"operations\":{\"AssociateVPCWithHostedZone\":{\"http\":{\"requestUri\":\"/2013-04-01/hostedzone/{Id}/associatevpc\"},\"input\":{\"locationName\":\"AssociateVPCWithHostedZoneRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"HostedZoneId\",\"VPC\"],\"members\":{\"HostedZoneId\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"VPC\":{\"shape\":\"S3\"},\"Comment\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"ChangeInfo\"],\"members\":{\"ChangeInfo\":{\"shape\":\"S8\"}}}},\"ChangeResourceRecordSets\":{\"http\":{\"requestUri\":\"/2013-04-01/hostedzone/{Id}/rrset/\"},\"input\":{\"locationName\":\"ChangeResourceRecordSetsRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"HostedZoneId\",\"ChangeBatch\"],\"members\":{\"HostedZoneId\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"ChangeBatch\":{\"type\":\"structure\",\"required\":[\"Changes\"],\"members\":{\"Comment\":{},\"Changes\":{\"shape\":\"Se\"}}}}},\"output\":{\"type\":\"structure\",\"required\":[\"ChangeInfo\"],\"members\":{\"ChangeInfo\":{\"shape\":\"S8\"}}}},\"ChangeTagsForResource\":{\"http\":{\"requestUri\":\"/2013-04-01/tags/{ResourceType}/{ResourceId}\"},\"input\":{\"locationName\":\"ChangeTagsForResourceRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"ResourceType\",\"ResourceId\"],\"members\":{\"ResourceType\":{\"location\":\"uri\",\"locationName\":\"ResourceType\"},\"ResourceId\":{\"location\":\"uri\",\"locationName\":\"ResourceId\"},\"AddTags\":{\"shape\":\"S14\"},\"RemoveTagKeys\":{\"type\":\"list\",\"member\":{\"locationName\":\"Key\"}}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"CreateHealthCheck\":{\"http\":{\"requestUri\":\"/2013-04-01/healthcheck\",\"responseCode\":201},\"input\":{\"locationName\":\"CreateHealthCheckRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"CallerReference\",\"HealthCheckConfig\"],\"members\":{\"CallerReference\":{},\"HealthCheckConfig\":{\"shape\":\"S1c\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"HealthCheck\",\"Location\"],\"members\":{\"HealthCheck\":{\"shape\":\"S1r\"},\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"}}}},\"CreateHostedZone\":{\"http\":{\"requestUri\":\"/2013-04-01/hostedzone\",\"responseCode\":201},\"input\":{\"locationName\":\"CreateHostedZoneRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"Name\",\"CallerReference\"],\"members\":{\"Name\":{},\"VPC\":{\"shape\":\"S3\"},\"CallerReference\":{},\"HostedZoneConfig\":{\"shape\":\"S1w\"},\"DelegationSetId\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"HostedZone\",\"ChangeInfo\",\"DelegationSet\",\"Location\"],\"members\":{\"HostedZone\":{\"shape\":\"S1z\"},\"ChangeInfo\":{\"shape\":\"S8\"},\"DelegationSet\":{\"shape\":\"S21\"},\"VPC\":{\"shape\":\"S3\"},\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"}}}},\"CreateReusableDelegationSet\":{\"http\":{\"requestUri\":\"/2013-04-01/delegationset\",\"responseCode\":201},\"input\":{\"locationName\":\"CreateReusableDelegationSetRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"CallerReference\"],\"members\":{\"CallerReference\":{},\"HostedZoneId\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"DelegationSet\",\"Location\"],\"members\":{\"DelegationSet\":{\"shape\":\"S21\"},\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"}}}},\"CreateTrafficPolicy\":{\"http\":{\"requestUri\":\"/2013-04-01/trafficpolicy\",\"responseCode\":201},\"input\":{\"locationName\":\"CreateTrafficPolicyRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"Name\",\"Document\"],\"members\":{\"Name\":{},\"Document\":{},\"Comment\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicy\",\"Location\"],\"members\":{\"TrafficPolicy\":{\"shape\":\"S2a\"},\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"}}}},\"CreateTrafficPolicyInstance\":{\"http\":{\"requestUri\":\"/2013-04-01/trafficpolicyinstance\",\"responseCode\":201},\"input\":{\"locationName\":\"CreateTrafficPolicyInstanceRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"HostedZoneId\",\"Name\",\"TTL\",\"TrafficPolicyId\",\"TrafficPolicyVersion\"],\"members\":{\"HostedZoneId\":{},\"Name\":{},\"TTL\":{\"type\":\"long\"},\"TrafficPolicyId\":{},\"TrafficPolicyVersion\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicyInstance\",\"Location\"],\"members\":{\"TrafficPolicyInstance\":{\"shape\":\"S2f\"},\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"}}}},\"CreateTrafficPolicyVersion\":{\"http\":{\"requestUri\":\"/2013-04-01/trafficpolicy/{Id}\",\"responseCode\":201},\"input\":{\"locationName\":\"CreateTrafficPolicyVersionRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"Id\",\"Document\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"Document\":{},\"Comment\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicy\",\"Location\"],\"members\":{\"TrafficPolicy\":{\"shape\":\"S2a\"},\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"}}}},\"DeleteHealthCheck\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2013-04-01/healthcheck/{HealthCheckId}\"},\"input\":{\"type\":\"structure\",\"required\":[\"HealthCheckId\"],\"members\":{\"HealthCheckId\":{\"location\":\"uri\",\"locationName\":\"HealthCheckId\"}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"DeleteHostedZone\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2013-04-01/hostedzone/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"ChangeInfo\"],\"members\":{\"ChangeInfo\":{\"shape\":\"S8\"}}}},\"DeleteReusableDelegationSet\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2013-04-01/delegationset/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"DeleteTrafficPolicy\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2013-04-01/trafficpolicy/{Id}/{Version}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\",\"Version\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"Version\":{\"location\":\"uri\",\"locationName\":\"Version\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"DeleteTrafficPolicyInstance\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/2013-04-01/trafficpolicyinstance/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"members\":{}}},\"DisassociateVPCFromHostedZone\":{\"http\":{\"requestUri\":\"/2013-04-01/hostedzone/{Id}/disassociatevpc\"},\"input\":{\"locationName\":\"DisassociateVPCFromHostedZoneRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"HostedZoneId\",\"VPC\"],\"members\":{\"HostedZoneId\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"VPC\":{\"shape\":\"S3\"},\"Comment\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"ChangeInfo\"],\"members\":{\"ChangeInfo\":{\"shape\":\"S8\"}}}},\"GetChange\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/change/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"ChangeInfo\"],\"members\":{\"ChangeInfo\":{\"shape\":\"S8\"}}}},\"GetChangeDetails\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/changedetails/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}},\"deprecated\":true},\"output\":{\"type\":\"structure\",\"required\":[\"ChangeBatchRecord\"],\"members\":{\"ChangeBatchRecord\":{\"shape\":\"S31\"}},\"deprecated\":true},\"deprecated\":true},\"GetCheckerIpRanges\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/checkeripranges\"},\"input\":{\"type\":\"structure\",\"members\":{}},\"output\":{\"type\":\"structure\",\"required\":[\"CheckerIpRanges\"],\"members\":{\"CheckerIpRanges\":{\"type\":\"list\",\"member\":{}}}}},\"GetGeoLocation\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/geolocation\"},\"input\":{\"type\":\"structure\",\"members\":{\"ContinentCode\":{\"location\":\"querystring\",\"locationName\":\"continentcode\"},\"CountryCode\":{\"location\":\"querystring\",\"locationName\":\"countrycode\"},\"SubdivisionCode\":{\"location\":\"querystring\",\"locationName\":\"subdivisioncode\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"GeoLocationDetails\"],\"members\":{\"GeoLocationDetails\":{\"shape\":\"S39\"}}}},\"GetHealthCheck\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/healthcheck/{HealthCheckId}\"},\"input\":{\"type\":\"structure\",\"required\":[\"HealthCheckId\"],\"members\":{\"HealthCheckId\":{\"location\":\"uri\",\"locationName\":\"HealthCheckId\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"HealthCheck\"],\"members\":{\"HealthCheck\":{\"shape\":\"S1r\"}}}},\"GetHealthCheckCount\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/healthcheckcount\"},\"input\":{\"type\":\"structure\",\"members\":{}},\"output\":{\"type\":\"structure\",\"required\":[\"HealthCheckCount\"],\"members\":{\"HealthCheckCount\":{\"type\":\"long\"}}}},\"GetHealthCheckLastFailureReason\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason\"},\"input\":{\"type\":\"structure\",\"required\":[\"HealthCheckId\"],\"members\":{\"HealthCheckId\":{\"location\":\"uri\",\"locationName\":\"HealthCheckId\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"HealthCheckObservations\"],\"members\":{\"HealthCheckObservations\":{\"shape\":\"S3k\"}}}},\"GetHealthCheckStatus\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/healthcheck/{HealthCheckId}/status\"},\"input\":{\"type\":\"structure\",\"required\":[\"HealthCheckId\"],\"members\":{\"HealthCheckId\":{\"location\":\"uri\",\"locationName\":\"HealthCheckId\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"HealthCheckObservations\"],\"members\":{\"HealthCheckObservations\":{\"shape\":\"S3k\"}}}},\"GetHostedZone\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/hostedzone/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"HostedZone\"],\"members\":{\"HostedZone\":{\"shape\":\"S1z\"},\"DelegationSet\":{\"shape\":\"S21\"},\"VPCs\":{\"type\":\"list\",\"member\":{\"shape\":\"S3\",\"locationName\":\"VPC\"}}}}},\"GetHostedZoneCount\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/hostedzonecount\"},\"input\":{\"type\":\"structure\",\"members\":{}},\"output\":{\"type\":\"structure\",\"required\":[\"HostedZoneCount\"],\"members\":{\"HostedZoneCount\":{\"type\":\"long\"}}}},\"GetReusableDelegationSet\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/delegationset/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"DelegationSet\"],\"members\":{\"DelegationSet\":{\"shape\":\"S21\"}}}},\"GetTrafficPolicy\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/trafficpolicy/{Id}/{Version}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\",\"Version\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"Version\":{\"location\":\"uri\",\"locationName\":\"Version\",\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicy\"],\"members\":{\"TrafficPolicy\":{\"shape\":\"S2a\"}}}},\"GetTrafficPolicyInstance\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/trafficpolicyinstance/{Id}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicyInstance\"],\"members\":{\"TrafficPolicyInstance\":{\"shape\":\"S2f\"}}}},\"GetTrafficPolicyInstanceCount\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/trafficpolicyinstancecount\"},\"input\":{\"type\":\"structure\",\"members\":{}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicyInstanceCount\"],\"members\":{\"TrafficPolicyInstanceCount\":{\"type\":\"integer\"}}}},\"ListChangeBatchesByHostedZone\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/hostedzone/{Id}/changes\"},\"input\":{\"type\":\"structure\",\"required\":[\"HostedZoneId\",\"StartDate\",\"EndDate\"],\"members\":{\"HostedZoneId\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"StartDate\":{\"shape\":\"S46\",\"location\":\"querystring\",\"locationName\":\"startDate\"},\"EndDate\":{\"shape\":\"S46\",\"location\":\"querystring\",\"locationName\":\"endDate\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxItems\"},\"Marker\":{\"location\":\"querystring\",\"locationName\":\"marker\"}},\"deprecated\":true},\"output\":{\"type\":\"structure\",\"required\":[\"MaxItems\",\"Marker\",\"ChangeBatchRecords\"],\"members\":{\"MaxItems\":{},\"Marker\":{},\"IsTruncated\":{\"type\":\"boolean\"},\"ChangeBatchRecords\":{\"shape\":\"S4b\"},\"NextMarker\":{}},\"deprecated\":true},\"deprecated\":true},\"ListChangeBatchesByRRSet\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/hostedzone/{Id}/rrsChanges\"},\"input\":{\"type\":\"structure\",\"required\":[\"HostedZoneId\",\"Name\",\"Type\",\"StartDate\",\"EndDate\"],\"members\":{\"HostedZoneId\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"Name\":{\"location\":\"querystring\",\"locationName\":\"rrSet_name\"},\"Type\":{\"location\":\"querystring\",\"locationName\":\"type\"},\"SetIdentifier\":{\"location\":\"querystring\",\"locationName\":\"identifier\"},\"StartDate\":{\"shape\":\"S46\",\"location\":\"querystring\",\"locationName\":\"startDate\"},\"EndDate\":{\"shape\":\"S46\",\"location\":\"querystring\",\"locationName\":\"endDate\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxItems\"},\"Marker\":{\"location\":\"querystring\",\"locationName\":\"marker\"}},\"deprecated\":true},\"output\":{\"type\":\"structure\",\"required\":[\"MaxItems\",\"Marker\",\"ChangeBatchRecords\"],\"members\":{\"MaxItems\":{},\"Marker\":{},\"IsTruncated\":{\"type\":\"boolean\"},\"ChangeBatchRecords\":{\"shape\":\"S4b\"},\"NextMarker\":{}},\"deprecated\":true},\"deprecated\":true},\"ListGeoLocations\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/geolocations\"},\"input\":{\"type\":\"structure\",\"members\":{\"StartContinentCode\":{\"location\":\"querystring\",\"locationName\":\"startcontinentcode\"},\"StartCountryCode\":{\"location\":\"querystring\",\"locationName\":\"startcountrycode\"},\"StartSubdivisionCode\":{\"location\":\"querystring\",\"locationName\":\"startsubdivisioncode\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"GeoLocationDetailsList\",\"IsTruncated\",\"MaxItems\"],\"members\":{\"GeoLocationDetailsList\":{\"type\":\"list\",\"member\":{\"shape\":\"S39\",\"locationName\":\"GeoLocationDetails\"}},\"IsTruncated\":{\"type\":\"boolean\"},\"NextContinentCode\":{},\"NextCountryCode\":{},\"NextSubdivisionCode\":{},\"MaxItems\":{}}}},\"ListHealthChecks\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/healthcheck\"},\"input\":{\"type\":\"structure\",\"members\":{\"Marker\":{\"location\":\"querystring\",\"locationName\":\"marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"HealthChecks\",\"Marker\",\"IsTruncated\",\"MaxItems\"],\"members\":{\"HealthChecks\":{\"type\":\"list\",\"member\":{\"shape\":\"S1r\",\"locationName\":\"HealthCheck\"}},\"Marker\":{},\"IsTruncated\":{\"type\":\"boolean\"},\"NextMarker\":{},\"MaxItems\":{}}}},\"ListHostedZones\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/hostedzone\"},\"input\":{\"type\":\"structure\",\"members\":{\"Marker\":{\"location\":\"querystring\",\"locationName\":\"marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"},\"DelegationSetId\":{\"location\":\"querystring\",\"locationName\":\"delegationsetid\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"HostedZones\",\"Marker\",\"IsTruncated\",\"MaxItems\"],\"members\":{\"HostedZones\":{\"shape\":\"S4m\"},\"Marker\":{},\"IsTruncated\":{\"type\":\"boolean\"},\"NextMarker\":{},\"MaxItems\":{}}}},\"ListHostedZonesByName\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/hostedzonesbyname\"},\"input\":{\"type\":\"structure\",\"members\":{\"DNSName\":{\"location\":\"querystring\",\"locationName\":\"dnsname\"},\"HostedZoneId\":{\"location\":\"querystring\",\"locationName\":\"hostedzoneid\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"HostedZones\",\"IsTruncated\",\"MaxItems\"],\"members\":{\"HostedZones\":{\"shape\":\"S4m\"},\"DNSName\":{},\"HostedZoneId\":{},\"IsTruncated\":{\"type\":\"boolean\"},\"NextDNSName\":{},\"NextHostedZoneId\":{},\"MaxItems\":{}}}},\"ListResourceRecordSets\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/hostedzone/{Id}/rrset\"},\"input\":{\"type\":\"structure\",\"required\":[\"HostedZoneId\"],\"members\":{\"HostedZoneId\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"StartRecordName\":{\"location\":\"querystring\",\"locationName\":\"name\"},\"StartRecordType\":{\"location\":\"querystring\",\"locationName\":\"type\"},\"StartRecordIdentifier\":{\"location\":\"querystring\",\"locationName\":\"identifier\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"ResourceRecordSets\",\"IsTruncated\",\"MaxItems\"],\"members\":{\"ResourceRecordSets\":{\"type\":\"list\",\"member\":{\"shape\":\"Sh\",\"locationName\":\"ResourceRecordSet\"}},\"IsTruncated\":{\"type\":\"boolean\"},\"NextRecordName\":{},\"NextRecordType\":{},\"NextRecordIdentifier\":{},\"MaxItems\":{}}}},\"ListReusableDelegationSets\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/delegationset\"},\"input\":{\"type\":\"structure\",\"members\":{\"Marker\":{\"location\":\"querystring\",\"locationName\":\"marker\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"DelegationSets\",\"Marker\",\"IsTruncated\",\"MaxItems\"],\"members\":{\"DelegationSets\":{\"type\":\"list\",\"member\":{\"shape\":\"S21\",\"locationName\":\"DelegationSet\"}},\"Marker\":{},\"IsTruncated\":{\"type\":\"boolean\"},\"NextMarker\":{},\"MaxItems\":{}}}},\"ListTagsForResource\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/tags/{ResourceType}/{ResourceId}\"},\"input\":{\"type\":\"structure\",\"required\":[\"ResourceType\",\"ResourceId\"],\"members\":{\"ResourceType\":{\"location\":\"uri\",\"locationName\":\"ResourceType\"},\"ResourceId\":{\"location\":\"uri\",\"locationName\":\"ResourceId\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"ResourceTagSet\"],\"members\":{\"ResourceTagSet\":{\"shape\":\"S4x\"}}}},\"ListTagsForResources\":{\"http\":{\"requestUri\":\"/2013-04-01/tags/{ResourceType}\"},\"input\":{\"locationName\":\"ListTagsForResourcesRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"ResourceType\",\"ResourceIds\"],\"members\":{\"ResourceType\":{\"location\":\"uri\",\"locationName\":\"ResourceType\"},\"ResourceIds\":{\"type\":\"list\",\"member\":{\"locationName\":\"ResourceId\"}}}},\"output\":{\"type\":\"structure\",\"required\":[\"ResourceTagSets\"],\"members\":{\"ResourceTagSets\":{\"type\":\"list\",\"member\":{\"shape\":\"S4x\",\"locationName\":\"ResourceTagSet\"}}}}},\"ListTrafficPolicies\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/trafficpolicies\"},\"input\":{\"type\":\"structure\",\"members\":{\"TrafficPolicyIdMarker\":{\"location\":\"querystring\",\"locationName\":\"trafficpolicyid\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicySummaries\",\"IsTruncated\",\"TrafficPolicyIdMarker\",\"MaxItems\"],\"members\":{\"TrafficPolicySummaries\":{\"type\":\"list\",\"member\":{\"locationName\":\"TrafficPolicySummary\",\"type\":\"structure\",\"required\":[\"Id\",\"Name\",\"Type\",\"LatestVersion\",\"TrafficPolicyCount\"],\"members\":{\"Id\":{},\"Name\":{},\"Type\":{},\"LatestVersion\":{\"type\":\"integer\"},\"TrafficPolicyCount\":{\"type\":\"integer\"}}}},\"IsTruncated\":{\"type\":\"boolean\"},\"TrafficPolicyIdMarker\":{},\"MaxItems\":{}}}},\"ListTrafficPolicyInstances\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/trafficpolicyinstances\"},\"input\":{\"type\":\"structure\",\"members\":{\"HostedZoneIdMarker\":{\"location\":\"querystring\",\"locationName\":\"hostedzoneid\"},\"TrafficPolicyInstanceNameMarker\":{\"location\":\"querystring\",\"locationName\":\"trafficpolicyinstancename\"},\"TrafficPolicyInstanceTypeMarker\":{\"location\":\"querystring\",\"locationName\":\"trafficpolicyinstancetype\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicyInstances\",\"IsTruncated\",\"MaxItems\"],\"members\":{\"TrafficPolicyInstances\":{\"shape\":\"S58\"},\"HostedZoneIdMarker\":{},\"TrafficPolicyInstanceNameMarker\":{},\"TrafficPolicyInstanceTypeMarker\":{},\"IsTruncated\":{\"type\":\"boolean\"},\"MaxItems\":{}}}},\"ListTrafficPolicyInstancesByHostedZone\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/trafficpolicyinstances/hostedzone\"},\"input\":{\"type\":\"structure\",\"required\":[\"HostedZoneId\"],\"members\":{\"HostedZoneId\":{\"location\":\"querystring\",\"locationName\":\"id\"},\"TrafficPolicyInstanceNameMarker\":{\"location\":\"querystring\",\"locationName\":\"trafficpolicyinstancename\"},\"TrafficPolicyInstanceTypeMarker\":{\"location\":\"querystring\",\"locationName\":\"trafficpolicyinstancetype\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicyInstances\",\"IsTruncated\",\"MaxItems\"],\"members\":{\"TrafficPolicyInstances\":{\"shape\":\"S58\"},\"TrafficPolicyInstanceNameMarker\":{},\"TrafficPolicyInstanceTypeMarker\":{},\"IsTruncated\":{\"type\":\"boolean\"},\"MaxItems\":{}}}},\"ListTrafficPolicyInstancesByPolicy\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/trafficpolicyinstances/trafficpolicy\"},\"input\":{\"type\":\"structure\",\"required\":[\"TrafficPolicyId\",\"TrafficPolicyVersion\"],\"members\":{\"TrafficPolicyId\":{\"location\":\"querystring\",\"locationName\":\"id\"},\"TrafficPolicyVersion\":{\"location\":\"querystring\",\"locationName\":\"version\",\"type\":\"integer\"},\"HostedZoneIdMarker\":{\"location\":\"querystring\",\"locationName\":\"hostedzoneid\"},\"TrafficPolicyInstanceNameMarker\":{\"location\":\"querystring\",\"locationName\":\"trafficpolicyinstancename\"},\"TrafficPolicyInstanceTypeMarker\":{\"location\":\"querystring\",\"locationName\":\"trafficpolicyinstancetype\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicyInstances\",\"IsTruncated\",\"MaxItems\"],\"members\":{\"TrafficPolicyInstances\":{\"shape\":\"S58\"},\"HostedZoneIdMarker\":{},\"TrafficPolicyInstanceNameMarker\":{},\"TrafficPolicyInstanceTypeMarker\":{},\"IsTruncated\":{\"type\":\"boolean\"},\"MaxItems\":{}}}},\"ListTrafficPolicyVersions\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/2013-04-01/trafficpolicies/{Id}/versions\"},\"input\":{\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"TrafficPolicyVersionMarker\":{\"location\":\"querystring\",\"locationName\":\"trafficpolicyversion\"},\"MaxItems\":{\"location\":\"querystring\",\"locationName\":\"maxitems\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicies\",\"IsTruncated\",\"TrafficPolicyVersionMarker\",\"MaxItems\"],\"members\":{\"TrafficPolicies\":{\"type\":\"list\",\"member\":{\"shape\":\"S2a\",\"locationName\":\"TrafficPolicy\"}},\"IsTruncated\":{\"type\":\"boolean\"},\"TrafficPolicyVersionMarker\":{},\"MaxItems\":{}}}},\"UpdateHealthCheck\":{\"http\":{\"requestUri\":\"/2013-04-01/healthcheck/{HealthCheckId}\"},\"input\":{\"locationName\":\"UpdateHealthCheckRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"HealthCheckId\"],\"members\":{\"HealthCheckId\":{\"location\":\"uri\",\"locationName\":\"HealthCheckId\"},\"HealthCheckVersion\":{\"type\":\"long\"},\"IPAddress\":{},\"Port\":{\"type\":\"integer\"},\"ResourcePath\":{},\"FullyQualifiedDomainName\":{},\"SearchString\":{},\"FailureThreshold\":{\"type\":\"integer\"},\"Inverted\":{\"type\":\"boolean\"},\"HealthThreshold\":{\"type\":\"integer\"},\"ChildHealthChecks\":{\"shape\":\"S1o\"},\"EnableSNI\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"HealthCheck\"],\"members\":{\"HealthCheck\":{\"shape\":\"S1r\"}}}},\"UpdateHostedZoneComment\":{\"http\":{\"requestUri\":\"/2013-04-01/hostedzone/{Id}\"},\"input\":{\"locationName\":\"UpdateHostedZoneCommentRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"Comment\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"HostedZone\"],\"members\":{\"HostedZone\":{\"shape\":\"S1z\"}}}},\"UpdateTrafficPolicyComment\":{\"http\":{\"requestUri\":\"/2013-04-01/trafficpolicy/{Id}/{Version}\"},\"input\":{\"locationName\":\"UpdateTrafficPolicyCommentRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"Id\",\"Version\",\"Comment\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"Version\":{\"location\":\"uri\",\"locationName\":\"Version\",\"type\":\"integer\"},\"Comment\":{}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicy\"],\"members\":{\"TrafficPolicy\":{\"shape\":\"S2a\"}}}},\"UpdateTrafficPolicyInstance\":{\"http\":{\"requestUri\":\"/2013-04-01/trafficpolicyinstance/{Id}\"},\"input\":{\"locationName\":\"UpdateTrafficPolicyInstanceRequest\",\"xmlNamespace\":{\"uri\":\"https://route53.amazonaws.com/doc/2013-04-01/\"},\"type\":\"structure\",\"required\":[\"Id\",\"TTL\",\"TrafficPolicyId\",\"TrafficPolicyVersion\"],\"members\":{\"Id\":{\"location\":\"uri\",\"locationName\":\"Id\"},\"TTL\":{\"type\":\"long\"},\"TrafficPolicyId\":{},\"TrafficPolicyVersion\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TrafficPolicyInstance\"],\"members\":{\"TrafficPolicyInstance\":{\"shape\":\"S2f\"}}}}},\"shapes\":{\"S3\":{\"type\":\"structure\",\"members\":{\"VPCRegion\":{},\"VPCId\":{}}},\"S8\":{\"type\":\"structure\",\"required\":[\"Id\",\"Status\",\"SubmittedAt\"],\"members\":{\"Id\":{},\"Status\":{},\"SubmittedAt\":{\"type\":\"timestamp\"},\"Comment\":{}}},\"Se\":{\"type\":\"list\",\"member\":{\"locationName\":\"Change\",\"type\":\"structure\",\"required\":[\"Action\",\"ResourceRecordSet\"],\"members\":{\"Action\":{},\"ResourceRecordSet\":{\"shape\":\"Sh\"}}}},\"Sh\":{\"type\":\"structure\",\"required\":[\"Name\",\"Type\"],\"members\":{\"Name\":{},\"Type\":{},\"SetIdentifier\":{},\"Weight\":{\"type\":\"long\"},\"Region\":{},\"GeoLocation\":{\"type\":\"structure\",\"members\":{\"ContinentCode\":{},\"CountryCode\":{},\"SubdivisionCode\":{}}},\"Failover\":{},\"TTL\":{\"type\":\"long\"},\"ResourceRecords\":{\"type\":\"list\",\"member\":{\"locationName\":\"ResourceRecord\",\"type\":\"structure\",\"required\":[\"Value\"],\"members\":{\"Value\":{}}}},\"AliasTarget\":{\"type\":\"structure\",\"required\":[\"HostedZoneId\",\"DNSName\",\"EvaluateTargetHealth\"],\"members\":{\"HostedZoneId\":{},\"DNSName\":{},\"EvaluateTargetHealth\":{\"type\":\"boolean\"}}},\"HealthCheckId\":{},\"TrafficPolicyInstanceId\":{}}},\"S14\":{\"type\":\"list\",\"member\":{\"locationName\":\"Tag\",\"type\":\"structure\",\"members\":{\"Key\":{},\"Value\":{}}}},\"S1c\":{\"type\":\"structure\",\"required\":[\"Type\"],\"members\":{\"IPAddress\":{},\"Port\":{\"type\":\"integer\"},\"Type\":{},\"ResourcePath\":{},\"FullyQualifiedDomainName\":{},\"SearchString\":{},\"RequestInterval\":{\"type\":\"integer\"},\"FailureThreshold\":{\"type\":\"integer\"},\"MeasureLatency\":{\"type\":\"boolean\"},\"Inverted\":{\"type\":\"boolean\"},\"HealthThreshold\":{\"type\":\"integer\"},\"ChildHealthChecks\":{\"shape\":\"S1o\"},\"EnableSNI\":{\"type\":\"boolean\"}}},\"S1o\":{\"type\":\"list\",\"member\":{\"locationName\":\"ChildHealthCheck\"}},\"S1r\":{\"type\":\"structure\",\"required\":[\"Id\",\"CallerReference\",\"HealthCheckConfig\",\"HealthCheckVersion\"],\"members\":{\"Id\":{},\"CallerReference\":{},\"HealthCheckConfig\":{\"shape\":\"S1c\"},\"HealthCheckVersion\":{\"type\":\"long\"}}},\"S1w\":{\"type\":\"structure\",\"members\":{\"Comment\":{},\"PrivateZone\":{\"type\":\"boolean\"}}},\"S1z\":{\"type\":\"structure\",\"required\":[\"Id\",\"Name\",\"CallerReference\"],\"members\":{\"Id\":{},\"Name\":{},\"CallerReference\":{},\"Config\":{\"shape\":\"S1w\"},\"ResourceRecordSetCount\":{\"type\":\"long\"}}},\"S21\":{\"type\":\"structure\",\"required\":[\"NameServers\"],\"members\":{\"Id\":{},\"CallerReference\":{},\"NameServers\":{\"type\":\"list\",\"member\":{\"locationName\":\"NameServer\"}}}},\"S2a\":{\"type\":\"structure\",\"required\":[\"Id\",\"Version\",\"Name\",\"Type\",\"Document\"],\"members\":{\"Id\":{},\"Version\":{\"type\":\"integer\"},\"Name\":{},\"Type\":{},\"Document\":{},\"Comment\":{}}},\"S2f\":{\"type\":\"structure\",\"required\":[\"Id\",\"HostedZoneId\",\"Name\",\"TTL\",\"State\",\"Message\",\"TrafficPolicyId\",\"TrafficPolicyVersion\",\"TrafficPolicyType\"],\"members\":{\"Id\":{},\"HostedZoneId\":{},\"Name\":{},\"TTL\":{\"type\":\"long\"},\"State\":{},\"Message\":{},\"TrafficPolicyId\":{},\"TrafficPolicyVersion\":{\"type\":\"integer\"},\"TrafficPolicyType\":{}}},\"S31\":{\"type\":\"structure\",\"required\":[\"Id\",\"Status\"],\"members\":{\"Id\":{},\"SubmittedAt\":{\"type\":\"timestamp\"},\"Status\":{},\"Comment\":{},\"Submitter\":{},\"Changes\":{\"shape\":\"Se\"}},\"deprecated\":true},\"S39\":{\"type\":\"structure\",\"members\":{\"ContinentCode\":{},\"ContinentName\":{},\"CountryCode\":{},\"CountryName\":{},\"SubdivisionCode\":{},\"SubdivisionName\":{}}},\"S3k\":{\"type\":\"list\",\"member\":{\"locationName\":\"HealthCheckObservation\",\"type\":\"structure\",\"members\":{\"IPAddress\":{},\"StatusReport\":{\"type\":\"structure\",\"members\":{\"Status\":{},\"CheckedTime\":{\"type\":\"timestamp\"}}}}}},\"S46\":{\"type\":\"string\",\"deprecated\":true},\"S4b\":{\"type\":\"list\",\"member\":{\"shape\":\"S31\",\"locationName\":\"ChangeBatchRecord\"},\"deprecated\":true},\"S4m\":{\"type\":\"list\",\"member\":{\"shape\":\"S1z\",\"locationName\":\"HostedZone\"}},\"S4x\":{\"type\":\"structure\",\"members\":{\"ResourceType\":{},\"ResourceId\":{},\"Tags\":{\"shape\":\"S14\"}}},\"S58\":{\"type\":\"list\",\"member\":{\"shape\":\"S2f\",\"locationName\":\"TrafficPolicyInstance\"}}},\"paginators\":{\"ListHealthChecks\":{\"input_token\":\"Marker\",\"output_token\":\"NextMarker\",\"more_results\":\"IsTruncated\",\"limit_key\":\"MaxItems\",\"result_key\":\"HealthChecks\"},\"ListHostedZones\":{\"input_token\":\"Marker\",\"output_token\":\"NextMarker\",\"more_results\":\"IsTruncated\",\"limit_key\":\"MaxItems\",\"result_key\":\"HostedZones\"},\"ListResourceRecordSets\":{\"more_results\":\"IsTruncated\",\"limit_key\":\"MaxItems\",\"result_key\":\"ResourceRecordSets\",\"input_token\":[\"StartRecordName\",\"StartRecordType\",\"StartRecordIdentifier\"],\"output_token\":[\"NextRecordName\",\"NextRecordType\",\"NextRecordIdentifier\"]}}};\nAWS.apiLoader.services['s3'] = {};                                                                                     // 123\nAWS.S3 = AWS.Service.defineService('s3', [ '2006-03-01' ]);                                                            // 124\nrequire('./services/s3');                                                                                              // 125\n                                                                                                                       // 126\nAWS.apiLoader.services['s3']['2006-03-01'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2006-03-01\",\"checksumFormat\":\"md5\",\"endpointPrefix\":\"s3\",\"globalEndpoint\":\"s3.amazonaws.com\",\"protocol\":\"rest-xml\",\"serviceAbbreviation\":\"Amazon S3\",\"serviceFullName\":\"Amazon Simple Storage Service\",\"signatureVersion\":\"s3\",\"timestampFormat\":\"rfc822\"},\"operations\":{\"AbortMultipartUpload\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\",\"UploadId\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"UploadId\":{\"location\":\"querystring\",\"locationName\":\"uploadId\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}}},\"CompleteMultipartUpload\":{\"http\":{\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\",\"UploadId\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"MultipartUpload\":{\"locationName\":\"CompleteMultipartUpload\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"members\":{\"Parts\":{\"locationName\":\"Part\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"ETag\":{},\"PartNumber\":{\"type\":\"integer\"}}},\"flattened\":true}}},\"UploadId\":{\"location\":\"querystring\",\"locationName\":\"uploadId\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}},\"payload\":\"MultipartUpload\"},\"output\":{\"type\":\"structure\",\"members\":{\"Location\":{},\"Bucket\":{},\"Key\":{},\"Expiration\":{\"location\":\"header\",\"locationName\":\"x-amz-expiration\"},\"ETag\":{},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"VersionId\":{\"location\":\"header\",\"locationName\":\"x-amz-version-id\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}}},\"CopyObject\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"CopySource\",\"Key\"],\"members\":{\"ACL\":{\"location\":\"header\",\"locationName\":\"x-amz-acl\"},\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"CacheControl\":{\"location\":\"header\",\"locationName\":\"Cache-Control\"},\"ContentDisposition\":{\"location\":\"header\",\"locationName\":\"Content-Disposition\"},\"ContentEncoding\":{\"location\":\"header\",\"locationName\":\"Content-Encoding\"},\"ContentLanguage\":{\"location\":\"header\",\"locationName\":\"Content-Language\"},\"ContentType\":{\"location\":\"header\",\"locationName\":\"Content-Type\"},\"CopySource\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source\"},\"CopySourceIfMatch\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-if-match\"},\"CopySourceIfModifiedSince\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-if-modified-since\",\"type\":\"timestamp\"},\"CopySourceIfNoneMatch\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-if-none-match\"},\"CopySourceIfUnmodifiedSince\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-if-unmodified-since\",\"type\":\"timestamp\"},\"Expires\":{\"location\":\"header\",\"locationName\":\"Expires\",\"type\":\"timestamp\"},\"GrantFullControl\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-full-control\"},\"GrantRead\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read\"},\"GrantReadACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read-acp\"},\"GrantWriteACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-write-acp\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"Metadata\":{\"shape\":\"S11\",\"location\":\"headers\",\"locationName\":\"x-amz-meta-\"},\"MetadataDirective\":{\"location\":\"header\",\"locationName\":\"x-amz-metadata-directive\"},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"StorageClass\":{\"location\":\"header\",\"locationName\":\"x-amz-storage-class\"},\"WebsiteRedirectLocation\":{\"location\":\"header\",\"locationName\":\"x-amz-website-redirect-location\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKey\":{\"shape\":\"S18\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"CopySourceSSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-server-side-encryption-customer-algorithm\"},\"CopySourceSSECustomerKey\":{\"shape\":\"S1b\",\"location\":\"header\",\"locationName\":\"x-amz-copy-source-server-side-encryption-customer-key\"},\"CopySourceSSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-server-side-encryption-customer-key-MD5\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CopyObjectResult\":{\"type\":\"structure\",\"members\":{\"ETag\":{},\"LastModified\":{\"type\":\"timestamp\"}}},\"Expiration\":{\"location\":\"header\",\"locationName\":\"x-amz-expiration\"},\"CopySourceVersionId\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-version-id\"},\"VersionId\":{\"location\":\"header\",\"locationName\":\"x-amz-version-id\"},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}},\"payload\":\"CopyObjectResult\"},\"alias\":\"PutObjectCopy\"},\"CreateBucket\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"ACL\":{\"location\":\"header\",\"locationName\":\"x-amz-acl\"},\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"CreateBucketConfiguration\":{\"locationName\":\"CreateBucketConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"members\":{\"LocationConstraint\":{}}},\"GrantFullControl\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-full-control\"},\"GrantRead\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read\"},\"GrantReadACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read-acp\"},\"GrantWrite\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-write\"},\"GrantWriteACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-write-acp\"}},\"payload\":\"CreateBucketConfiguration\"},\"output\":{\"type\":\"structure\",\"members\":{\"Location\":{\"location\":\"header\",\"locationName\":\"Location\"}}},\"alias\":\"PutBucket\"},\"CreateMultipartUpload\":{\"http\":{\"requestUri\":\"/{Bucket}/{Key+}?uploads\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\"],\"members\":{\"ACL\":{\"location\":\"header\",\"locationName\":\"x-amz-acl\"},\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"CacheControl\":{\"location\":\"header\",\"locationName\":\"Cache-Control\"},\"ContentDisposition\":{\"location\":\"header\",\"locationName\":\"Content-Disposition\"},\"ContentEncoding\":{\"location\":\"header\",\"locationName\":\"Content-Encoding\"},\"ContentLanguage\":{\"location\":\"header\",\"locationName\":\"Content-Language\"},\"ContentType\":{\"location\":\"header\",\"locationName\":\"Content-Type\"},\"Expires\":{\"location\":\"header\",\"locationName\":\"Expires\",\"type\":\"timestamp\"},\"GrantFullControl\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-full-control\"},\"GrantRead\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read\"},\"GrantReadACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read-acp\"},\"GrantWriteACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-write-acp\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"Metadata\":{\"shape\":\"S11\",\"location\":\"headers\",\"locationName\":\"x-amz-meta-\"},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"StorageClass\":{\"location\":\"header\",\"locationName\":\"x-amz-storage-class\"},\"WebsiteRedirectLocation\":{\"location\":\"header\",\"locationName\":\"x-amz-website-redirect-location\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKey\":{\"shape\":\"S18\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Bucket\":{\"locationName\":\"Bucket\"},\"Key\":{},\"UploadId\":{},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}},\"alias\":\"InitiateMultipartUpload\"},\"DeleteBucket\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/{Bucket}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}}},\"DeleteBucketCors\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/{Bucket}?cors\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}}},\"DeleteBucketLifecycle\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/{Bucket}?lifecycle\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}}},\"DeleteBucketPolicy\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/{Bucket}?policy\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}}},\"DeleteBucketReplication\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/{Bucket}?replication\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}}},\"DeleteBucketTagging\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/{Bucket}?tagging\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}}},\"DeleteBucketWebsite\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/{Bucket}?website\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}}},\"DeleteObject\":{\"http\":{\"method\":\"DELETE\",\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"MFA\":{\"location\":\"header\",\"locationName\":\"x-amz-mfa\"},\"VersionId\":{\"location\":\"querystring\",\"locationName\":\"versionId\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DeleteMarker\":{\"location\":\"header\",\"locationName\":\"x-amz-delete-marker\",\"type\":\"boolean\"},\"VersionId\":{\"location\":\"header\",\"locationName\":\"x-amz-version-id\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}}},\"DeleteObjects\":{\"http\":{\"requestUri\":\"/{Bucket}?delete\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Delete\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Delete\":{\"locationName\":\"Delete\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"required\":[\"Objects\"],\"members\":{\"Objects\":{\"locationName\":\"Object\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Key\"],\"members\":{\"Key\":{},\"VersionId\":{}}},\"flattened\":true},\"Quiet\":{\"type\":\"boolean\"}}},\"MFA\":{\"location\":\"header\",\"locationName\":\"x-amz-mfa\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}},\"payload\":\"Delete\"},\"output\":{\"type\":\"structure\",\"members\":{\"Deleted\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Key\":{},\"VersionId\":{},\"DeleteMarker\":{\"type\":\"boolean\"},\"DeleteMarkerVersionId\":{}}},\"flattened\":true},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"},\"Errors\":{\"locationName\":\"Error\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Key\":{},\"VersionId\":{},\"Code\":{},\"Message\":{}}},\"flattened\":true}}},\"alias\":\"DeleteMultipleObjects\"},\"GetBucketAcl\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?acl\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Owner\":{\"shape\":\"S2f\"},\"Grants\":{\"shape\":\"S2i\",\"locationName\":\"AccessControlList\"}}}},\"GetBucketCors\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?cors\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CORSRules\":{\"shape\":\"S2r\",\"locationName\":\"CORSRule\"}}}},\"GetBucketLifecycle\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?lifecycle\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Rules\":{\"shape\":\"S34\",\"locationName\":\"Rule\"}}},\"deprecated\":true},\"GetBucketLifecycleConfiguration\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?lifecycle\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Rules\":{\"shape\":\"S3h\",\"locationName\":\"Rule\"}}}},\"GetBucketLocation\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?location\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"LocationConstraint\":{}}}},\"GetBucketLogging\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?logging\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"LoggingEnabled\":{\"shape\":\"S3p\"}}}},\"GetBucketNotification\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?notification\"},\"input\":{\"shape\":\"S3v\"},\"output\":{\"shape\":\"S3w\"},\"deprecated\":true},\"GetBucketNotificationConfiguration\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?notification\"},\"input\":{\"shape\":\"S3v\"},\"output\":{\"shape\":\"S47\"}},\"GetBucketPolicy\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?policy\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Policy\":{}},\"payload\":\"Policy\"}},\"GetBucketReplication\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?replication\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ReplicationConfiguration\":{\"shape\":\"S4q\"}},\"payload\":\"ReplicationConfiguration\"}},\"GetBucketRequestPayment\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?requestPayment\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Payer\":{}}}},\"GetBucketTagging\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?tagging\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"required\":[\"TagSet\"],\"members\":{\"TagSet\":{\"shape\":\"S51\"}}}},\"GetBucketVersioning\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?versioning\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Status\":{},\"MFADelete\":{\"locationName\":\"MfaDelete\"}}}},\"GetBucketWebsite\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?website\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"RedirectAllRequestsTo\":{\"shape\":\"S5a\"},\"IndexDocument\":{\"shape\":\"S5d\"},\"ErrorDocument\":{\"shape\":\"S5f\"},\"RoutingRules\":{\"shape\":\"S5g\"}}}},\"GetObject\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"IfMatch\":{\"location\":\"header\",\"locationName\":\"If-Match\"},\"IfModifiedSince\":{\"location\":\"header\",\"locationName\":\"If-Modified-Since\",\"type\":\"timestamp\"},\"IfNoneMatch\":{\"location\":\"header\",\"locationName\":\"If-None-Match\"},\"IfUnmodifiedSince\":{\"location\":\"header\",\"locationName\":\"If-Unmodified-Since\",\"type\":\"timestamp\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"Range\":{\"location\":\"header\",\"locationName\":\"Range\"},\"ResponseCacheControl\":{\"location\":\"querystring\",\"locationName\":\"response-cache-control\"},\"ResponseContentDisposition\":{\"location\":\"querystring\",\"locationName\":\"response-content-disposition\"},\"ResponseContentEncoding\":{\"location\":\"querystring\",\"locationName\":\"response-content-encoding\"},\"ResponseContentLanguage\":{\"location\":\"querystring\",\"locationName\":\"response-content-language\"},\"ResponseContentType\":{\"location\":\"querystring\",\"locationName\":\"response-content-type\"},\"ResponseExpires\":{\"location\":\"querystring\",\"locationName\":\"response-expires\",\"type\":\"timestamp\"},\"VersionId\":{\"location\":\"querystring\",\"locationName\":\"versionId\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKey\":{\"shape\":\"S18\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Body\":{\"streaming\":true,\"type\":\"blob\"},\"DeleteMarker\":{\"location\":\"header\",\"locationName\":\"x-amz-delete-marker\",\"type\":\"boolean\"},\"AcceptRanges\":{\"location\":\"header\",\"locationName\":\"accept-ranges\"},\"Expiration\":{\"location\":\"header\",\"locationName\":\"x-amz-expiration\"},\"Restore\":{\"location\":\"header\",\"locationName\":\"x-amz-restore\"},\"LastModified\":{\"location\":\"header\",\"locationName\":\"Last-Modified\",\"type\":\"timestamp\"},\"ContentLength\":{\"location\":\"header\",\"locationName\":\"Content-Length\",\"type\":\"integer\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"},\"MissingMeta\":{\"location\":\"header\",\"locationName\":\"x-amz-missing-meta\",\"type\":\"integer\"},\"VersionId\":{\"location\":\"header\",\"locationName\":\"x-amz-version-id\"},\"CacheControl\":{\"location\":\"header\",\"locationName\":\"Cache-Control\"},\"ContentDisposition\":{\"location\":\"header\",\"locationName\":\"Content-Disposition\"},\"ContentEncoding\":{\"location\":\"header\",\"locationName\":\"Content-Encoding\"},\"ContentLanguage\":{\"location\":\"header\",\"locationName\":\"Content-Language\"},\"ContentRange\":{\"location\":\"header\",\"locationName\":\"Content-Range\"},\"ContentType\":{\"location\":\"header\",\"locationName\":\"Content-Type\"},\"Expires\":{\"location\":\"header\",\"locationName\":\"Expires\",\"type\":\"timestamp\"},\"WebsiteRedirectLocation\":{\"location\":\"header\",\"locationName\":\"x-amz-website-redirect-location\"},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"Metadata\":{\"shape\":\"S11\",\"location\":\"headers\",\"locationName\":\"x-amz-meta-\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"StorageClass\":{\"location\":\"header\",\"locationName\":\"x-amz-storage-class\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"},\"ReplicationStatus\":{\"location\":\"header\",\"locationName\":\"x-amz-replication-status\"}},\"payload\":\"Body\"}},\"GetObjectAcl\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}/{Key+}?acl\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"VersionId\":{\"location\":\"querystring\",\"locationName\":\"versionId\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Owner\":{\"shape\":\"S2f\"},\"Grants\":{\"shape\":\"S2i\",\"locationName\":\"AccessControlList\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}}},\"GetObjectTorrent\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}/{Key+}?torrent\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Body\":{\"streaming\":true,\"type\":\"blob\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}},\"payload\":\"Body\"}},\"HeadBucket\":{\"http\":{\"method\":\"HEAD\",\"requestUri\":\"/{Bucket}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}}},\"HeadObject\":{\"http\":{\"method\":\"HEAD\",\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"IfMatch\":{\"location\":\"header\",\"locationName\":\"If-Match\"},\"IfModifiedSince\":{\"location\":\"header\",\"locationName\":\"If-Modified-Since\",\"type\":\"timestamp\"},\"IfNoneMatch\":{\"location\":\"header\",\"locationName\":\"If-None-Match\"},\"IfUnmodifiedSince\":{\"location\":\"header\",\"locationName\":\"If-Unmodified-Since\",\"type\":\"timestamp\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"Range\":{\"location\":\"header\",\"locationName\":\"Range\"},\"VersionId\":{\"location\":\"querystring\",\"locationName\":\"versionId\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKey\":{\"shape\":\"S18\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"DeleteMarker\":{\"location\":\"header\",\"locationName\":\"x-amz-delete-marker\",\"type\":\"boolean\"},\"AcceptRanges\":{\"location\":\"header\",\"locationName\":\"accept-ranges\"},\"Expiration\":{\"location\":\"header\",\"locationName\":\"x-amz-expiration\"},\"Restore\":{\"location\":\"header\",\"locationName\":\"x-amz-restore\"},\"LastModified\":{\"location\":\"header\",\"locationName\":\"Last-Modified\",\"type\":\"timestamp\"},\"ContentLength\":{\"location\":\"header\",\"locationName\":\"Content-Length\",\"type\":\"integer\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"},\"MissingMeta\":{\"location\":\"header\",\"locationName\":\"x-amz-missing-meta\",\"type\":\"integer\"},\"VersionId\":{\"location\":\"header\",\"locationName\":\"x-amz-version-id\"},\"CacheControl\":{\"location\":\"header\",\"locationName\":\"Cache-Control\"},\"ContentDisposition\":{\"location\":\"header\",\"locationName\":\"Content-Disposition\"},\"ContentEncoding\":{\"location\":\"header\",\"locationName\":\"Content-Encoding\"},\"ContentLanguage\":{\"location\":\"header\",\"locationName\":\"Content-Language\"},\"ContentType\":{\"location\":\"header\",\"locationName\":\"Content-Type\"},\"Expires\":{\"location\":\"header\",\"locationName\":\"Expires\",\"type\":\"timestamp\"},\"WebsiteRedirectLocation\":{\"location\":\"header\",\"locationName\":\"x-amz-website-redirect-location\"},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"Metadata\":{\"shape\":\"S11\",\"location\":\"headers\",\"locationName\":\"x-amz-meta-\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"StorageClass\":{\"location\":\"header\",\"locationName\":\"x-amz-storage-class\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"},\"ReplicationStatus\":{\"location\":\"header\",\"locationName\":\"x-amz-replication-status\"}}}},\"ListBuckets\":{\"http\":{\"method\":\"GET\"},\"output\":{\"type\":\"structure\",\"members\":{\"Buckets\":{\"type\":\"list\",\"member\":{\"locationName\":\"Bucket\",\"type\":\"structure\",\"members\":{\"Name\":{},\"CreationDate\":{\"type\":\"timestamp\"}}}},\"Owner\":{\"shape\":\"S2f\"}}},\"alias\":\"GetService\"},\"ListMultipartUploads\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?uploads\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Delimiter\":{\"location\":\"querystring\",\"locationName\":\"delimiter\"},\"EncodingType\":{\"location\":\"querystring\",\"locationName\":\"encoding-type\"},\"KeyMarker\":{\"location\":\"querystring\",\"locationName\":\"key-marker\"},\"MaxUploads\":{\"location\":\"querystring\",\"locationName\":\"max-uploads\",\"type\":\"integer\"},\"Prefix\":{\"location\":\"querystring\",\"locationName\":\"prefix\"},\"UploadIdMarker\":{\"location\":\"querystring\",\"locationName\":\"upload-id-marker\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Bucket\":{},\"KeyMarker\":{},\"UploadIdMarker\":{},\"NextKeyMarker\":{},\"Prefix\":{},\"Delimiter\":{},\"NextUploadIdMarker\":{},\"MaxUploads\":{\"type\":\"integer\"},\"IsTruncated\":{\"type\":\"boolean\"},\"Uploads\":{\"locationName\":\"Upload\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"UploadId\":{},\"Key\":{},\"Initiated\":{\"type\":\"timestamp\"},\"StorageClass\":{},\"Owner\":{\"shape\":\"S2f\"},\"Initiator\":{\"shape\":\"S6x\"}}},\"flattened\":true},\"CommonPrefixes\":{\"shape\":\"S6y\"},\"EncodingType\":{}}}},\"ListObjectVersions\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}?versions\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Delimiter\":{\"location\":\"querystring\",\"locationName\":\"delimiter\"},\"EncodingType\":{\"location\":\"querystring\",\"locationName\":\"encoding-type\"},\"KeyMarker\":{\"location\":\"querystring\",\"locationName\":\"key-marker\"},\"MaxKeys\":{\"location\":\"querystring\",\"locationName\":\"max-keys\",\"type\":\"integer\"},\"Prefix\":{\"location\":\"querystring\",\"locationName\":\"prefix\"},\"VersionIdMarker\":{\"location\":\"querystring\",\"locationName\":\"version-id-marker\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IsTruncated\":{\"type\":\"boolean\"},\"KeyMarker\":{},\"VersionIdMarker\":{},\"NextKeyMarker\":{},\"NextVersionIdMarker\":{},\"Versions\":{\"locationName\":\"Version\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"ETag\":{},\"Size\":{\"type\":\"integer\"},\"StorageClass\":{},\"Key\":{},\"VersionId\":{},\"IsLatest\":{\"type\":\"boolean\"},\"LastModified\":{\"type\":\"timestamp\"},\"Owner\":{\"shape\":\"S2f\"}}},\"flattened\":true},\"DeleteMarkers\":{\"locationName\":\"DeleteMarker\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Owner\":{\"shape\":\"S2f\"},\"Key\":{},\"VersionId\":{},\"IsLatest\":{\"type\":\"boolean\"},\"LastModified\":{\"type\":\"timestamp\"}}},\"flattened\":true},\"Name\":{},\"Prefix\":{},\"Delimiter\":{},\"MaxKeys\":{\"type\":\"integer\"},\"CommonPrefixes\":{\"shape\":\"S6y\"},\"EncodingType\":{}}},\"alias\":\"GetBucketObjectVersions\"},\"ListObjects\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Delimiter\":{\"location\":\"querystring\",\"locationName\":\"delimiter\"},\"EncodingType\":{\"location\":\"querystring\",\"locationName\":\"encoding-type\"},\"Marker\":{\"location\":\"querystring\",\"locationName\":\"marker\"},\"MaxKeys\":{\"location\":\"querystring\",\"locationName\":\"max-keys\",\"type\":\"integer\"},\"Prefix\":{\"location\":\"querystring\",\"locationName\":\"prefix\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"IsTruncated\":{\"type\":\"boolean\"},\"Marker\":{},\"NextMarker\":{},\"Contents\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Key\":{},\"LastModified\":{\"type\":\"timestamp\"},\"ETag\":{},\"Size\":{\"type\":\"integer\"},\"StorageClass\":{},\"Owner\":{\"shape\":\"S2f\"}}},\"flattened\":true},\"Name\":{},\"Prefix\":{},\"Delimiter\":{},\"MaxKeys\":{\"type\":\"integer\"},\"CommonPrefixes\":{\"shape\":\"S6y\"},\"EncodingType\":{}}},\"alias\":\"GetBucket\"},\"ListParts\":{\"http\":{\"method\":\"GET\",\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\",\"UploadId\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"MaxParts\":{\"location\":\"querystring\",\"locationName\":\"max-parts\",\"type\":\"integer\"},\"PartNumberMarker\":{\"location\":\"querystring\",\"locationName\":\"part-number-marker\",\"type\":\"integer\"},\"UploadId\":{\"location\":\"querystring\",\"locationName\":\"uploadId\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Bucket\":{},\"Key\":{},\"UploadId\":{},\"PartNumberMarker\":{\"type\":\"integer\"},\"NextPartNumberMarker\":{\"type\":\"integer\"},\"MaxParts\":{\"type\":\"integer\"},\"IsTruncated\":{\"type\":\"boolean\"},\"Parts\":{\"locationName\":\"Part\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"PartNumber\":{\"type\":\"integer\"},\"LastModified\":{\"type\":\"timestamp\"},\"ETag\":{},\"Size\":{\"type\":\"integer\"}}},\"flattened\":true},\"Initiator\":{\"shape\":\"S6x\"},\"Owner\":{\"shape\":\"S2f\"},\"StorageClass\":{},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}}},\"PutBucketAcl\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?acl\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"ACL\":{\"location\":\"header\",\"locationName\":\"x-amz-acl\"},\"AccessControlPolicy\":{\"shape\":\"S7r\",\"locationName\":\"AccessControlPolicy\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"}},\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"GrantFullControl\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-full-control\"},\"GrantRead\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read\"},\"GrantReadACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read-acp\"},\"GrantWrite\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-write\"},\"GrantWriteACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-write-acp\"}},\"payload\":\"AccessControlPolicy\"}},\"PutBucketCors\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?cors\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"CORSConfiguration\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"CORSConfiguration\":{\"locationName\":\"CORSConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"required\":[\"CORSRules\"],\"members\":{\"CORSRules\":{\"shape\":\"S2r\",\"locationName\":\"CORSRule\"}}},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"}},\"payload\":\"CORSConfiguration\"}},\"PutBucketLifecycle\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?lifecycle\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"LifecycleConfiguration\":{\"locationName\":\"LifecycleConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"required\":[\"Rules\"],\"members\":{\"Rules\":{\"shape\":\"S34\",\"locationName\":\"Rule\"}}}},\"payload\":\"LifecycleConfiguration\"},\"deprecated\":true},\"PutBucketLifecycleConfiguration\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?lifecycle\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"LifecycleConfiguration\":{\"locationName\":\"LifecycleConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"required\":[\"Rules\"],\"members\":{\"Rules\":{\"shape\":\"S3h\",\"locationName\":\"Rule\"}}}},\"payload\":\"LifecycleConfiguration\"}},\"PutBucketLogging\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?logging\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"BucketLoggingStatus\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"BucketLoggingStatus\":{\"locationName\":\"BucketLoggingStatus\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"members\":{\"LoggingEnabled\":{\"shape\":\"S3p\"}}},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"}},\"payload\":\"BucketLoggingStatus\"}},\"PutBucketNotification\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?notification\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"NotificationConfiguration\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"NotificationConfiguration\":{\"shape\":\"S3w\",\"locationName\":\"NotificationConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"}}},\"payload\":\"NotificationConfiguration\"},\"deprecated\":true},\"PutBucketNotificationConfiguration\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?notification\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"NotificationConfiguration\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"NotificationConfiguration\":{\"shape\":\"S47\",\"locationName\":\"NotificationConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"}}},\"payload\":\"NotificationConfiguration\"}},\"PutBucketPolicy\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?policy\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Policy\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"Policy\":{}},\"payload\":\"Policy\"}},\"PutBucketReplication\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?replication\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"ReplicationConfiguration\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"ReplicationConfiguration\":{\"shape\":\"S4q\",\"locationName\":\"ReplicationConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"}}},\"payload\":\"ReplicationConfiguration\"}},\"PutBucketRequestPayment\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?requestPayment\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"RequestPaymentConfiguration\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"RequestPaymentConfiguration\":{\"locationName\":\"RequestPaymentConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"required\":[\"Payer\"],\"members\":{\"Payer\":{}}}},\"payload\":\"RequestPaymentConfiguration\"}},\"PutBucketTagging\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?tagging\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Tagging\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"Tagging\":{\"locationName\":\"Tagging\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"required\":[\"TagSet\"],\"members\":{\"TagSet\":{\"shape\":\"S51\"}}}},\"payload\":\"Tagging\"}},\"PutBucketVersioning\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?versioning\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"VersioningConfiguration\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"MFA\":{\"location\":\"header\",\"locationName\":\"x-amz-mfa\"},\"VersioningConfiguration\":{\"locationName\":\"VersioningConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"members\":{\"MFADelete\":{\"locationName\":\"MfaDelete\"},\"Status\":{}}}},\"payload\":\"VersioningConfiguration\"}},\"PutBucketWebsite\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}?website\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"WebsiteConfiguration\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"WebsiteConfiguration\":{\"locationName\":\"WebsiteConfiguration\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"members\":{\"ErrorDocument\":{\"shape\":\"S5f\"},\"IndexDocument\":{\"shape\":\"S5d\"},\"RedirectAllRequestsTo\":{\"shape\":\"S5a\"},\"RoutingRules\":{\"shape\":\"S5g\"}}}},\"payload\":\"WebsiteConfiguration\"}},\"PutObject\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\"],\"members\":{\"ACL\":{\"location\":\"header\",\"locationName\":\"x-amz-acl\"},\"Body\":{\"streaming\":true,\"type\":\"blob\"},\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"CacheControl\":{\"location\":\"header\",\"locationName\":\"Cache-Control\"},\"ContentDisposition\":{\"location\":\"header\",\"locationName\":\"Content-Disposition\"},\"ContentEncoding\":{\"location\":\"header\",\"locationName\":\"Content-Encoding\"},\"ContentLanguage\":{\"location\":\"header\",\"locationName\":\"Content-Language\"},\"ContentLength\":{\"location\":\"header\",\"locationName\":\"Content-Length\",\"type\":\"integer\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"ContentType\":{\"location\":\"header\",\"locationName\":\"Content-Type\"},\"Expires\":{\"location\":\"header\",\"locationName\":\"Expires\",\"type\":\"timestamp\"},\"GrantFullControl\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-full-control\"},\"GrantRead\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read\"},\"GrantReadACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read-acp\"},\"GrantWriteACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-write-acp\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"Metadata\":{\"shape\":\"S11\",\"location\":\"headers\",\"locationName\":\"x-amz-meta-\"},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"StorageClass\":{\"location\":\"header\",\"locationName\":\"x-amz-storage-class\"},\"WebsiteRedirectLocation\":{\"location\":\"header\",\"locationName\":\"x-amz-website-redirect-location\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKey\":{\"shape\":\"S18\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}},\"payload\":\"Body\"},\"output\":{\"type\":\"structure\",\"members\":{\"Expiration\":{\"location\":\"header\",\"locationName\":\"x-amz-expiration\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"VersionId\":{\"location\":\"header\",\"locationName\":\"x-amz-version-id\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}}},\"PutObjectAcl\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}/{Key+}?acl\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\"],\"members\":{\"ACL\":{\"location\":\"header\",\"locationName\":\"x-amz-acl\"},\"AccessControlPolicy\":{\"shape\":\"S7r\",\"locationName\":\"AccessControlPolicy\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"}},\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"GrantFullControl\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-full-control\"},\"GrantRead\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read\"},\"GrantReadACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-read-acp\"},\"GrantWrite\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-write\"},\"GrantWriteACP\":{\"location\":\"header\",\"locationName\":\"x-amz-grant-write-acp\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}},\"payload\":\"AccessControlPolicy\"},\"output\":{\"type\":\"structure\",\"members\":{\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}}},\"RestoreObject\":{\"http\":{\"requestUri\":\"/{Bucket}/{Key+}?restore\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"VersionId\":{\"location\":\"querystring\",\"locationName\":\"versionId\"},\"RestoreRequest\":{\"locationName\":\"RestoreRequest\",\"xmlNamespace\":{\"uri\":\"http://s3.amazonaws.com/doc/2006-03-01/\"},\"type\":\"structure\",\"required\":[\"Days\"],\"members\":{\"Days\":{\"type\":\"integer\"}}},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}},\"payload\":\"RestoreRequest\"},\"output\":{\"type\":\"structure\",\"members\":{\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}},\"alias\":\"PostObjectRestore\"},\"UploadPart\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"Key\",\"PartNumber\",\"UploadId\"],\"members\":{\"Body\":{\"streaming\":true,\"type\":\"blob\"},\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"ContentLength\":{\"location\":\"header\",\"locationName\":\"Content-Length\",\"type\":\"integer\"},\"ContentMD5\":{\"location\":\"header\",\"locationName\":\"Content-MD5\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"PartNumber\":{\"location\":\"querystring\",\"locationName\":\"partNumber\",\"type\":\"integer\"},\"UploadId\":{\"location\":\"querystring\",\"locationName\":\"uploadId\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKey\":{\"shape\":\"S18\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}},\"payload\":\"Body\"},\"output\":{\"type\":\"structure\",\"members\":{\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"ETag\":{\"location\":\"header\",\"locationName\":\"ETag\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}}}},\"UploadPartCopy\":{\"http\":{\"method\":\"PUT\",\"requestUri\":\"/{Bucket}/{Key+}\"},\"input\":{\"type\":\"structure\",\"required\":[\"Bucket\",\"CopySource\",\"Key\",\"PartNumber\",\"UploadId\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"},\"CopySource\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source\"},\"CopySourceIfMatch\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-if-match\"},\"CopySourceIfModifiedSince\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-if-modified-since\",\"type\":\"timestamp\"},\"CopySourceIfNoneMatch\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-if-none-match\"},\"CopySourceIfUnmodifiedSince\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-if-unmodified-since\",\"type\":\"timestamp\"},\"CopySourceRange\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-range\"},\"Key\":{\"location\":\"uri\",\"locationName\":\"Key\"},\"PartNumber\":{\"location\":\"querystring\",\"locationName\":\"partNumber\",\"type\":\"integer\"},\"UploadId\":{\"location\":\"querystring\",\"locationName\":\"uploadId\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKey\":{\"shape\":\"S18\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"CopySourceSSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-server-side-encryption-customer-algorithm\"},\"CopySourceSSECustomerKey\":{\"shape\":\"S1b\",\"location\":\"header\",\"locationName\":\"x-amz-copy-source-server-side-encryption-customer-key\"},\"CopySourceSSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-server-side-encryption-customer-key-MD5\"},\"RequestPayer\":{\"location\":\"header\",\"locationName\":\"x-amz-request-payer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CopySourceVersionId\":{\"location\":\"header\",\"locationName\":\"x-amz-copy-source-version-id\"},\"CopyPartResult\":{\"type\":\"structure\",\"members\":{\"ETag\":{},\"LastModified\":{\"type\":\"timestamp\"}}},\"ServerSideEncryption\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption\"},\"SSECustomerAlgorithm\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-algorithm\"},\"SSECustomerKeyMD5\":{\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-customer-key-MD5\"},\"SSEKMSKeyId\":{\"shape\":\"Sj\",\"location\":\"header\",\"locationName\":\"x-amz-server-side-encryption-aws-kms-key-id\"},\"RequestCharged\":{\"location\":\"header\",\"locationName\":\"x-amz-request-charged\"}},\"payload\":\"CopyPartResult\"}}},\"shapes\":{\"Sj\":{\"type\":\"string\",\"sensitive\":true},\"S11\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"S18\":{\"type\":\"blob\",\"sensitive\":true},\"S1b\":{\"type\":\"blob\",\"sensitive\":true},\"S2f\":{\"type\":\"structure\",\"members\":{\"DisplayName\":{},\"ID\":{}}},\"S2i\":{\"type\":\"list\",\"member\":{\"locationName\":\"Grant\",\"type\":\"structure\",\"members\":{\"Grantee\":{\"shape\":\"S2k\"},\"Permission\":{}}}},\"S2k\":{\"type\":\"structure\",\"required\":[\"Type\"],\"members\":{\"DisplayName\":{},\"EmailAddress\":{},\"ID\":{},\"Type\":{\"locationName\":\"xsi:type\",\"xmlAttribute\":true},\"URI\":{}},\"xmlNamespace\":{\"prefix\":\"xsi\",\"uri\":\"http://www.w3.org/2001/XMLSchema-instance\"}},\"S2r\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"AllowedMethods\",\"AllowedOrigins\"],\"members\":{\"AllowedHeaders\":{\"locationName\":\"AllowedHeader\",\"type\":\"list\",\"member\":{},\"flattened\":true},\"AllowedMethods\":{\"locationName\":\"AllowedMethod\",\"type\":\"list\",\"member\":{},\"flattened\":true},\"AllowedOrigins\":{\"locationName\":\"AllowedOrigin\",\"type\":\"list\",\"member\":{},\"flattened\":true},\"ExposeHeaders\":{\"locationName\":\"ExposeHeader\",\"type\":\"list\",\"member\":{},\"flattened\":true},\"MaxAgeSeconds\":{\"type\":\"integer\"}}},\"flattened\":true},\"S34\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Prefix\",\"Status\"],\"members\":{\"Expiration\":{\"shape\":\"S36\"},\"ID\":{},\"Prefix\":{},\"Status\":{},\"Transition\":{\"shape\":\"S3b\"},\"NoncurrentVersionTransition\":{\"shape\":\"S3d\"},\"NoncurrentVersionExpiration\":{\"shape\":\"S3e\"}}},\"flattened\":true},\"S36\":{\"type\":\"structure\",\"members\":{\"Date\":{\"shape\":\"S37\"},\"Days\":{\"type\":\"integer\"}}},\"S37\":{\"type\":\"timestamp\",\"timestampFormat\":\"iso8601\"},\"S3b\":{\"type\":\"structure\",\"members\":{\"Date\":{\"shape\":\"S37\"},\"Days\":{\"type\":\"integer\"},\"StorageClass\":{}}},\"S3d\":{\"type\":\"structure\",\"members\":{\"NoncurrentDays\":{\"type\":\"integer\"},\"StorageClass\":{}}},\"S3e\":{\"type\":\"structure\",\"members\":{\"NoncurrentDays\":{\"type\":\"integer\"}}},\"S3h\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Prefix\",\"Status\"],\"members\":{\"Expiration\":{\"shape\":\"S36\"},\"ID\":{},\"Prefix\":{},\"Status\":{},\"Transitions\":{\"locationName\":\"Transition\",\"type\":\"list\",\"member\":{\"shape\":\"S3b\"},\"flattened\":true},\"NoncurrentVersionTransitions\":{\"locationName\":\"NoncurrentVersionTransition\",\"type\":\"list\",\"member\":{\"shape\":\"S3d\"},\"flattened\":true},\"NoncurrentVersionExpiration\":{\"shape\":\"S3e\"}}},\"flattened\":true},\"S3p\":{\"type\":\"structure\",\"members\":{\"TargetBucket\":{},\"TargetGrants\":{\"type\":\"list\",\"member\":{\"locationName\":\"Grant\",\"type\":\"structure\",\"members\":{\"Grantee\":{\"shape\":\"S2k\"},\"Permission\":{}}}},\"TargetPrefix\":{}}},\"S3v\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{\"location\":\"uri\",\"locationName\":\"Bucket\"}}},\"S3w\":{\"type\":\"structure\",\"members\":{\"TopicConfiguration\":{\"type\":\"structure\",\"members\":{\"Id\":{},\"Events\":{\"shape\":\"S3z\",\"locationName\":\"Event\"},\"Event\":{\"deprecated\":true},\"Topic\":{}}},\"QueueConfiguration\":{\"type\":\"structure\",\"members\":{\"Id\":{},\"Event\":{\"deprecated\":true},\"Events\":{\"shape\":\"S3z\",\"locationName\":\"Event\"},\"Queue\":{}}},\"CloudFunctionConfiguration\":{\"type\":\"structure\",\"members\":{\"Id\":{},\"Event\":{\"deprecated\":true},\"Events\":{\"shape\":\"S3z\",\"locationName\":\"Event\"},\"CloudFunction\":{},\"InvocationRole\":{}}}}},\"S3z\":{\"type\":\"list\",\"member\":{},\"flattened\":true},\"S47\":{\"type\":\"structure\",\"members\":{\"TopicConfigurations\":{\"locationName\":\"TopicConfiguration\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"TopicArn\",\"Events\"],\"members\":{\"Id\":{},\"TopicArn\":{\"locationName\":\"Topic\"},\"Events\":{\"shape\":\"S3z\",\"locationName\":\"Event\"},\"Filter\":{\"shape\":\"S4a\"}}},\"flattened\":true},\"QueueConfigurations\":{\"locationName\":\"QueueConfiguration\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"QueueArn\",\"Events\"],\"members\":{\"Id\":{},\"QueueArn\":{\"locationName\":\"Queue\"},\"Events\":{\"shape\":\"S3z\",\"locationName\":\"Event\"},\"Filter\":{\"shape\":\"S4a\"}}},\"flattened\":true},\"LambdaFunctionConfigurations\":{\"locationName\":\"CloudFunctionConfiguration\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"LambdaFunctionArn\",\"Events\"],\"members\":{\"Id\":{},\"LambdaFunctionArn\":{\"locationName\":\"CloudFunction\"},\"Events\":{\"shape\":\"S3z\",\"locationName\":\"Event\"},\"Filter\":{\"shape\":\"S4a\"}}},\"flattened\":true}}},\"S4a\":{\"type\":\"structure\",\"members\":{\"Key\":{\"locationName\":\"S3Key\",\"type\":\"structure\",\"members\":{\"FilterRules\":{\"locationName\":\"FilterRule\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"Value\":{}}},\"flattened\":true}}}}},\"S4q\":{\"type\":\"structure\",\"required\":[\"Role\",\"Rules\"],\"members\":{\"Role\":{},\"Rules\":{\"locationName\":\"Rule\",\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Prefix\",\"Status\",\"Destination\"],\"members\":{\"ID\":{},\"Prefix\":{},\"Status\":{},\"Destination\":{\"type\":\"structure\",\"required\":[\"Bucket\"],\"members\":{\"Bucket\":{},\"StorageClass\":{}}}}},\"flattened\":true}}},\"S51\":{\"type\":\"list\",\"member\":{\"locationName\":\"Tag\",\"type\":\"structure\",\"required\":[\"Key\",\"Value\"],\"members\":{\"Key\":{},\"Value\":{}}}},\"S5a\":{\"type\":\"structure\",\"required\":[\"HostName\"],\"members\":{\"HostName\":{},\"Protocol\":{}}},\"S5d\":{\"type\":\"structure\",\"required\":[\"Suffix\"],\"members\":{\"Suffix\":{}}},\"S5f\":{\"type\":\"structure\",\"required\":[\"Key\"],\"members\":{\"Key\":{}}},\"S5g\":{\"type\":\"list\",\"member\":{\"locationName\":\"RoutingRule\",\"type\":\"structure\",\"required\":[\"Redirect\"],\"members\":{\"Condition\":{\"type\":\"structure\",\"members\":{\"HttpErrorCodeReturnedEquals\":{},\"KeyPrefixEquals\":{}}},\"Redirect\":{\"type\":\"structure\",\"members\":{\"HostName\":{},\"HttpRedirectCode\":{},\"Protocol\":{},\"ReplaceKeyPrefixWith\":{},\"ReplaceKeyWith\":{}}}}}},\"S6x\":{\"type\":\"structure\",\"members\":{\"ID\":{},\"DisplayName\":{}}},\"S6y\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Prefix\":{}}},\"flattened\":true},\"S7r\":{\"type\":\"structure\",\"members\":{\"Grants\":{\"shape\":\"S2i\",\"locationName\":\"AccessControlList\"},\"Owner\":{\"shape\":\"S2f\"}}}},\"paginators\":{\"ListBuckets\":{\"result_key\":\"Buckets\"},\"ListMultipartUploads\":{\"limit_key\":\"MaxUploads\",\"more_results\":\"IsTruncated\",\"output_token\":[\"NextKeyMarker\",\"NextUploadIdMarker\"],\"input_token\":[\"KeyMarker\",\"UploadIdMarker\"],\"result_key\":[\"Uploads\",\"CommonPrefixes\"]},\"ListObjectVersions\":{\"more_results\":\"IsTruncated\",\"limit_key\":\"MaxKeys\",\"output_token\":[\"NextKeyMarker\",\"NextVersionIdMarker\"],\"input_token\":[\"KeyMarker\",\"VersionIdMarker\"],\"result_key\":[\"Versions\",\"DeleteMarkers\",\"CommonPrefixes\"]},\"ListObjects\":{\"more_results\":\"IsTruncated\",\"limit_key\":\"MaxKeys\",\"output_token\":\"NextMarker || Contents[-1].Key\",\"input_token\":\"Marker\",\"result_key\":[\"Contents\",\"CommonPrefixes\"]},\"ListParts\":{\"more_results\":\"IsTruncated\",\"limit_key\":\"MaxParts\",\"output_token\":\"NextPartNumberMarker\",\"input_token\":\"PartNumberMarker\",\"result_key\":\"Parts\"}},\"waiters\":{\"__default__\":{\"interval\":5,\"max_attempts\":20},\"BucketExists\":{\"operation\":\"HeadBucket\",\"ignore_errors\":[404],\"success_type\":\"output\"},\"BucketNotExists\":{\"operation\":\"HeadBucket\",\"success_type\":\"error\",\"success_value\":404},\"ObjectExists\":{\"operation\":\"HeadObject\",\"ignore_errors\":[404],\"success_type\":\"output\"},\"ObjectNotExists\":{\"operation\":\"HeadObject\",\"success_type\":\"error\",\"success_value\":404}}};\nAWS.apiLoader.services['sns'] = {};                                                                                    // 128\nAWS.SNS = AWS.Service.defineService('sns', [ '2010-03-31' ]);                                                          // 129\n                                                                                                                       // 130\nAWS.apiLoader.services['sns']['2010-03-31'] = {\"metadata\":{\"apiVersion\":\"2010-03-31\",\"endpointPrefix\":\"sns\",\"serviceAbbreviation\":\"Amazon SNS\",\"serviceFullName\":\"Amazon Simple Notification Service\",\"signatureVersion\":\"v4\",\"xmlNamespace\":\"http://sns.amazonaws.com/doc/2010-03-31/\",\"protocol\":\"query\"},\"operations\":{\"AddPermission\":{\"input\":{\"type\":\"structure\",\"required\":[\"TopicArn\",\"Label\",\"AWSAccountId\",\"ActionName\"],\"members\":{\"TopicArn\":{},\"Label\":{},\"AWSAccountId\":{\"type\":\"list\",\"member\":{}},\"ActionName\":{\"type\":\"list\",\"member\":{}}}},\"http\":{}},\"ConfirmSubscription\":{\"input\":{\"type\":\"structure\",\"required\":[\"TopicArn\",\"Token\"],\"members\":{\"TopicArn\":{},\"Token\":{},\"AuthenticateOnUnsubscribe\":{}}},\"output\":{\"resultWrapper\":\"ConfirmSubscriptionResult\",\"type\":\"structure\",\"members\":{\"SubscriptionArn\":{}}},\"http\":{}},\"CreatePlatformApplication\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"Platform\",\"Attributes\"],\"members\":{\"Name\":{},\"Platform\":{},\"Attributes\":{\"shape\":\"Sf\"}}},\"output\":{\"resultWrapper\":\"CreatePlatformApplicationResult\",\"type\":\"structure\",\"members\":{\"PlatformApplicationArn\":{}}},\"http\":{}},\"CreatePlatformEndpoint\":{\"input\":{\"type\":\"structure\",\"required\":[\"PlatformApplicationArn\",\"Token\"],\"members\":{\"PlatformApplicationArn\":{},\"Token\":{},\"CustomUserData\":{},\"Attributes\":{\"shape\":\"Sf\"}}},\"output\":{\"resultWrapper\":\"CreatePlatformEndpointResult\",\"type\":\"structure\",\"members\":{\"EndpointArn\":{}}},\"http\":{}},\"CreateTopic\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{}}},\"output\":{\"resultWrapper\":\"CreateTopicResult\",\"type\":\"structure\",\"members\":{\"TopicArn\":{}}},\"http\":{}},\"DeleteEndpoint\":{\"input\":{\"type\":\"structure\",\"required\":[\"EndpointArn\"],\"members\":{\"EndpointArn\":{}}},\"http\":{}},\"DeletePlatformApplication\":{\"input\":{\"type\":\"structure\",\"required\":[\"PlatformApplicationArn\"],\"members\":{\"PlatformApplicationArn\":{}}},\"http\":{}},\"DeleteTopic\":{\"input\":{\"type\":\"structure\",\"required\":[\"TopicArn\"],\"members\":{\"TopicArn\":{}}},\"http\":{}},\"GetEndpointAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"EndpointArn\"],\"members\":{\"EndpointArn\":{}}},\"output\":{\"resultWrapper\":\"GetEndpointAttributesResult\",\"type\":\"structure\",\"members\":{\"Attributes\":{\"shape\":\"Sf\"}}},\"http\":{}},\"GetPlatformApplicationAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"PlatformApplicationArn\"],\"members\":{\"PlatformApplicationArn\":{}}},\"output\":{\"resultWrapper\":\"GetPlatformApplicationAttributesResult\",\"type\":\"structure\",\"members\":{\"Attributes\":{\"shape\":\"Sf\"}}},\"http\":{}},\"GetSubscriptionAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"SubscriptionArn\"],\"members\":{\"SubscriptionArn\":{}}},\"output\":{\"resultWrapper\":\"GetSubscriptionAttributesResult\",\"type\":\"structure\",\"members\":{\"Attributes\":{\"type\":\"map\",\"key\":{},\"value\":{}}}},\"http\":{}},\"GetTopicAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"TopicArn\"],\"members\":{\"TopicArn\":{}}},\"output\":{\"resultWrapper\":\"GetTopicAttributesResult\",\"type\":\"structure\",\"members\":{\"Attributes\":{\"type\":\"map\",\"key\":{},\"value\":{}}}},\"http\":{}},\"ListEndpointsByPlatformApplication\":{\"input\":{\"type\":\"structure\",\"required\":[\"PlatformApplicationArn\"],\"members\":{\"PlatformApplicationArn\":{},\"NextToken\":{}}},\"output\":{\"resultWrapper\":\"ListEndpointsByPlatformApplicationResult\",\"type\":\"structure\",\"members\":{\"Endpoints\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"EndpointArn\":{},\"Attributes\":{\"shape\":\"Sf\"}}}},\"NextToken\":{}}},\"http\":{}},\"ListPlatformApplications\":{\"input\":{\"type\":\"structure\",\"members\":{\"NextToken\":{}}},\"output\":{\"resultWrapper\":\"ListPlatformApplicationsResult\",\"type\":\"structure\",\"members\":{\"PlatformApplications\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"PlatformApplicationArn\":{},\"Attributes\":{\"shape\":\"Sf\"}}}},\"NextToken\":{}}},\"http\":{}},\"ListSubscriptions\":{\"input\":{\"type\":\"structure\",\"members\":{\"NextToken\":{}}},\"output\":{\"resultWrapper\":\"ListSubscriptionsResult\",\"type\":\"structure\",\"members\":{\"Subscriptions\":{\"shape\":\"S1c\"},\"NextToken\":{}}},\"http\":{}},\"ListSubscriptionsByTopic\":{\"input\":{\"type\":\"structure\",\"required\":[\"TopicArn\"],\"members\":{\"TopicArn\":{},\"NextToken\":{}}},\"output\":{\"resultWrapper\":\"ListSubscriptionsByTopicResult\",\"type\":\"structure\",\"members\":{\"Subscriptions\":{\"shape\":\"S1c\"},\"NextToken\":{}}},\"http\":{}},\"ListTopics\":{\"input\":{\"type\":\"structure\",\"members\":{\"NextToken\":{}}},\"output\":{\"resultWrapper\":\"ListTopicsResult\",\"type\":\"structure\",\"members\":{\"Topics\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"TopicArn\":{}}}},\"NextToken\":{}}},\"http\":{}},\"Publish\":{\"input\":{\"type\":\"structure\",\"required\":[\"Message\"],\"members\":{\"TopicArn\":{},\"TargetArn\":{},\"Message\":{},\"Subject\":{},\"MessageStructure\":{},\"MessageAttributes\":{\"type\":\"map\",\"key\":{\"locationName\":\"Name\"},\"value\":{\"locationName\":\"Value\",\"type\":\"structure\",\"required\":[\"DataType\"],\"members\":{\"DataType\":{},\"StringValue\":{},\"BinaryValue\":{\"type\":\"blob\"}}}}}},\"output\":{\"resultWrapper\":\"PublishResult\",\"type\":\"structure\",\"members\":{\"MessageId\":{}}},\"http\":{}},\"RemovePermission\":{\"input\":{\"type\":\"structure\",\"required\":[\"TopicArn\",\"Label\"],\"members\":{\"TopicArn\":{},\"Label\":{}}},\"http\":{}},\"SetEndpointAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"EndpointArn\",\"Attributes\"],\"members\":{\"EndpointArn\":{},\"Attributes\":{\"shape\":\"Sf\"}}},\"http\":{}},\"SetPlatformApplicationAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"PlatformApplicationArn\",\"Attributes\"],\"members\":{\"PlatformApplicationArn\":{},\"Attributes\":{\"shape\":\"Sf\"}}},\"http\":{}},\"SetSubscriptionAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"SubscriptionArn\",\"AttributeName\"],\"members\":{\"SubscriptionArn\":{},\"AttributeName\":{},\"AttributeValue\":{}}},\"http\":{}},\"SetTopicAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"TopicArn\",\"AttributeName\"],\"members\":{\"TopicArn\":{},\"AttributeName\":{},\"AttributeValue\":{}}},\"http\":{}},\"Subscribe\":{\"input\":{\"type\":\"structure\",\"required\":[\"TopicArn\",\"Protocol\"],\"members\":{\"TopicArn\":{},\"Protocol\":{},\"Endpoint\":{}}},\"output\":{\"resultWrapper\":\"SubscribeResult\",\"type\":\"structure\",\"members\":{\"SubscriptionArn\":{}}},\"http\":{}},\"Unsubscribe\":{\"input\":{\"type\":\"structure\",\"required\":[\"SubscriptionArn\"],\"members\":{\"SubscriptionArn\":{}}},\"http\":{}}},\"shapes\":{\"Sf\":{\"type\":\"map\",\"key\":{},\"value\":{}},\"S1c\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"SubscriptionArn\":{},\"Owner\":{},\"Protocol\":{},\"Endpoint\":{},\"TopicArn\":{}}}}},\"paginators\":{\"ListEndpointsByPlatformApplication\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"result_key\":\"Endpoints\"},\"ListPlatformApplications\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"result_key\":\"PlatformApplications\"},\"ListSubscriptions\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"result_key\":\"Subscriptions\"},\"ListSubscriptionsByTopic\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"result_key\":\"Subscriptions\"},\"ListTopics\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"result_key\":\"Topics\"}}};\nAWS.apiLoader.services['sqs'] = {};                                                                                    // 132\nAWS.SQS = AWS.Service.defineService('sqs', [ '2012-11-05' ]);                                                          // 133\nrequire('./services/sqs');                                                                                             // 134\n                                                                                                                       // 135\nAWS.apiLoader.services['sqs']['2012-11-05'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2012-11-05\",\"endpointPrefix\":\"sqs\",\"serviceAbbreviation\":\"Amazon SQS\",\"serviceFullName\":\"Amazon Simple Queue Service\",\"signatureVersion\":\"v4\",\"xmlNamespace\":\"http://queue.amazonaws.com/doc/2012-11-05/\",\"protocol\":\"query\"},\"operations\":{\"AddPermission\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\",\"Label\",\"AWSAccountIds\",\"Actions\"],\"members\":{\"QueueUrl\":{},\"Label\":{},\"AWSAccountIds\":{\"type\":\"list\",\"member\":{\"locationName\":\"AWSAccountId\"},\"flattened\":true},\"Actions\":{\"type\":\"list\",\"member\":{\"locationName\":\"ActionName\"},\"flattened\":true}}},\"http\":{}},\"ChangeMessageVisibility\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\",\"ReceiptHandle\",\"VisibilityTimeout\"],\"members\":{\"QueueUrl\":{},\"ReceiptHandle\":{},\"VisibilityTimeout\":{\"type\":\"integer\"}}},\"http\":{}},\"ChangeMessageVisibilityBatch\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\",\"Entries\"],\"members\":{\"QueueUrl\":{},\"Entries\":{\"type\":\"list\",\"member\":{\"locationName\":\"ChangeMessageVisibilityBatchRequestEntry\",\"type\":\"structure\",\"required\":[\"Id\",\"ReceiptHandle\"],\"members\":{\"Id\":{},\"ReceiptHandle\":{},\"VisibilityTimeout\":{\"type\":\"integer\"}}},\"flattened\":true}}},\"output\":{\"resultWrapper\":\"ChangeMessageVisibilityBatchResult\",\"type\":\"structure\",\"required\":[\"Successful\",\"Failed\"],\"members\":{\"Successful\":{\"type\":\"list\",\"member\":{\"locationName\":\"ChangeMessageVisibilityBatchResultEntry\",\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{}}},\"flattened\":true},\"Failed\":{\"shape\":\"Sd\"}}},\"http\":{}},\"CreateQueue\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueName\"],\"members\":{\"QueueName\":{},\"Attributes\":{\"shape\":\"Sh\",\"locationName\":\"Attribute\"}}},\"output\":{\"resultWrapper\":\"CreateQueueResult\",\"type\":\"structure\",\"members\":{\"QueueUrl\":{}}},\"http\":{}},\"DeleteMessage\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\",\"ReceiptHandle\"],\"members\":{\"QueueUrl\":{},\"ReceiptHandle\":{}}},\"http\":{}},\"DeleteMessageBatch\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\",\"Entries\"],\"members\":{\"QueueUrl\":{},\"Entries\":{\"type\":\"list\",\"member\":{\"locationName\":\"DeleteMessageBatchRequestEntry\",\"type\":\"structure\",\"required\":[\"Id\",\"ReceiptHandle\"],\"members\":{\"Id\":{},\"ReceiptHandle\":{}}},\"flattened\":true}}},\"output\":{\"resultWrapper\":\"DeleteMessageBatchResult\",\"type\":\"structure\",\"required\":[\"Successful\",\"Failed\"],\"members\":{\"Successful\":{\"type\":\"list\",\"member\":{\"locationName\":\"DeleteMessageBatchResultEntry\",\"type\":\"structure\",\"required\":[\"Id\"],\"members\":{\"Id\":{}}},\"flattened\":true},\"Failed\":{\"shape\":\"Sd\"}}},\"http\":{}},\"DeleteQueue\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\"],\"members\":{\"QueueUrl\":{}}},\"http\":{}},\"GetQueueAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\"],\"members\":{\"QueueUrl\":{},\"AttributeNames\":{\"shape\":\"St\"}}},\"output\":{\"resultWrapper\":\"GetQueueAttributesResult\",\"type\":\"structure\",\"members\":{\"Attributes\":{\"shape\":\"Sh\",\"locationName\":\"Attribute\"}}},\"http\":{}},\"GetQueueUrl\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueName\"],\"members\":{\"QueueName\":{},\"QueueOwnerAWSAccountId\":{}}},\"output\":{\"resultWrapper\":\"GetQueueUrlResult\",\"type\":\"structure\",\"members\":{\"QueueUrl\":{}}},\"http\":{}},\"ListDeadLetterSourceQueues\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\"],\"members\":{\"QueueUrl\":{}}},\"output\":{\"resultWrapper\":\"ListDeadLetterSourceQueuesResult\",\"type\":\"structure\",\"required\":[\"queueUrls\"],\"members\":{\"queueUrls\":{\"shape\":\"Sz\"}}},\"http\":{}},\"ListQueues\":{\"input\":{\"type\":\"structure\",\"members\":{\"QueueNamePrefix\":{}}},\"output\":{\"resultWrapper\":\"ListQueuesResult\",\"type\":\"structure\",\"members\":{\"QueueUrls\":{\"shape\":\"Sz\"}}},\"http\":{}},\"PurgeQueue\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\"],\"members\":{\"QueueUrl\":{}}},\"http\":{}},\"ReceiveMessage\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\"],\"members\":{\"QueueUrl\":{},\"AttributeNames\":{\"shape\":\"St\"},\"MessageAttributeNames\":{\"type\":\"list\",\"member\":{\"locationName\":\"MessageAttributeName\"},\"flattened\":true},\"MaxNumberOfMessages\":{\"type\":\"integer\"},\"VisibilityTimeout\":{\"type\":\"integer\"},\"WaitTimeSeconds\":{\"type\":\"integer\"}}},\"output\":{\"resultWrapper\":\"ReceiveMessageResult\",\"type\":\"structure\",\"members\":{\"Messages\":{\"type\":\"list\",\"member\":{\"locationName\":\"Message\",\"type\":\"structure\",\"members\":{\"MessageId\":{},\"ReceiptHandle\":{},\"MD5OfBody\":{},\"Body\":{},\"Attributes\":{\"shape\":\"Sh\",\"locationName\":\"Attribute\"},\"MD5OfMessageAttributes\":{},\"MessageAttributes\":{\"shape\":\"S19\",\"locationName\":\"MessageAttribute\"}}},\"flattened\":true}}},\"http\":{}},\"RemovePermission\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\",\"Label\"],\"members\":{\"QueueUrl\":{},\"Label\":{}}},\"http\":{}},\"SendMessage\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\",\"MessageBody\"],\"members\":{\"QueueUrl\":{},\"MessageBody\":{},\"DelaySeconds\":{\"type\":\"integer\"},\"MessageAttributes\":{\"shape\":\"S19\",\"locationName\":\"MessageAttribute\"}}},\"output\":{\"resultWrapper\":\"SendMessageResult\",\"type\":\"structure\",\"members\":{\"MD5OfMessageBody\":{},\"MD5OfMessageAttributes\":{},\"MessageId\":{}}},\"http\":{}},\"SendMessageBatch\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\",\"Entries\"],\"members\":{\"QueueUrl\":{},\"Entries\":{\"type\":\"list\",\"member\":{\"locationName\":\"SendMessageBatchRequestEntry\",\"type\":\"structure\",\"required\":[\"Id\",\"MessageBody\"],\"members\":{\"Id\":{},\"MessageBody\":{},\"DelaySeconds\":{\"type\":\"integer\"},\"MessageAttributes\":{\"shape\":\"S19\",\"locationName\":\"MessageAttribute\"}}},\"flattened\":true}}},\"output\":{\"resultWrapper\":\"SendMessageBatchResult\",\"type\":\"structure\",\"required\":[\"Successful\",\"Failed\"],\"members\":{\"Successful\":{\"type\":\"list\",\"member\":{\"locationName\":\"SendMessageBatchResultEntry\",\"type\":\"structure\",\"required\":[\"Id\",\"MessageId\",\"MD5OfMessageBody\"],\"members\":{\"Id\":{},\"MessageId\":{},\"MD5OfMessageBody\":{},\"MD5OfMessageAttributes\":{}}},\"flattened\":true},\"Failed\":{\"shape\":\"Sd\"}}},\"http\":{}},\"SetQueueAttributes\":{\"input\":{\"type\":\"structure\",\"required\":[\"QueueUrl\",\"Attributes\"],\"members\":{\"QueueUrl\":{},\"Attributes\":{\"shape\":\"Sh\",\"locationName\":\"Attribute\"}}},\"http\":{}}},\"shapes\":{\"Sd\":{\"type\":\"list\",\"member\":{\"locationName\":\"BatchResultErrorEntry\",\"type\":\"structure\",\"required\":[\"Id\",\"SenderFault\",\"Code\"],\"members\":{\"Id\":{},\"SenderFault\":{\"type\":\"boolean\"},\"Code\":{},\"Message\":{}}},\"flattened\":true},\"Sh\":{\"type\":\"map\",\"key\":{\"locationName\":\"Name\"},\"value\":{\"locationName\":\"Value\"},\"flattened\":true,\"locationName\":\"Attribute\"},\"St\":{\"type\":\"list\",\"member\":{\"locationName\":\"AttributeName\"},\"flattened\":true},\"Sz\":{\"type\":\"list\",\"member\":{\"locationName\":\"QueueUrl\"},\"flattened\":true},\"S19\":{\"type\":\"map\",\"key\":{\"locationName\":\"Name\"},\"value\":{\"locationName\":\"Value\",\"type\":\"structure\",\"required\":[\"DataType\"],\"members\":{\"StringValue\":{},\"BinaryValue\":{\"type\":\"blob\"},\"StringListValues\":{\"flattened\":true,\"locationName\":\"StringListValue\",\"type\":\"list\",\"member\":{\"locationName\":\"StringListValue\"}},\"BinaryListValues\":{\"flattened\":true,\"locationName\":\"BinaryListValue\",\"type\":\"list\",\"member\":{\"locationName\":\"BinaryListValue\",\"type\":\"blob\"}},\"DataType\":{}}},\"flattened\":true}},\"examples\":{},\"paginators\":{\"ListQueues\":{\"result_key\":\"QueueUrls\"}}};\nAWS.apiLoader.services['ssm'] = {};                                                                                    // 137\nAWS.SSM = AWS.Service.defineService('ssm', [ '2014-11-06' ]);                                                          // 138\n                                                                                                                       // 139\nAWS.apiLoader.services['ssm']['2014-11-06'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2014-11-06\",\"endpointPrefix\":\"ssm\",\"jsonVersion\":\"1.1\",\"protocol\":\"json\",\"serviceAbbreviation\":\"Amazon SSM\",\"serviceFullName\":\"Amazon Simple Systems Management Service\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"AmazonSSM\"},\"operations\":{\"CancelCommand\":{\"input\":{\"type\":\"structure\",\"required\":[\"CommandId\"],\"members\":{\"CommandId\":{},\"InstanceIds\":{\"shape\":\"S3\"}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"CreateAssociation\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"InstanceId\"],\"members\":{\"Name\":{},\"InstanceId\":{},\"Parameters\":{\"shape\":\"S8\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"AssociationDescription\":{\"shape\":\"Sd\"}}},\"http\":{}},\"CreateAssociationBatch\":{\"input\":{\"type\":\"structure\",\"required\":[\"Entries\"],\"members\":{\"Entries\":{\"type\":\"list\",\"member\":{\"shape\":\"Sl\",\"locationName\":\"entries\"}}}},\"output\":{\"type\":\"structure\",\"members\":{\"Successful\":{\"type\":\"list\",\"member\":{\"shape\":\"Sd\",\"locationName\":\"AssociationDescription\"}},\"Failed\":{\"type\":\"list\",\"member\":{\"locationName\":\"FailedCreateAssociationEntry\",\"type\":\"structure\",\"members\":{\"Entry\":{\"shape\":\"Sl\"},\"Message\":{},\"Fault\":{}}}}}},\"http\":{}},\"CreateDocument\":{\"input\":{\"type\":\"structure\",\"required\":[\"Content\",\"Name\"],\"members\":{\"Content\":{},\"Name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"DocumentDescription\":{\"shape\":\"Sv\"}}},\"http\":{}},\"DeleteAssociation\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"InstanceId\"],\"members\":{\"Name\":{},\"InstanceId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"DeleteDocument\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{}},\"http\":{}},\"DescribeAssociation\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"InstanceId\"],\"members\":{\"Name\":{},\"InstanceId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"AssociationDescription\":{\"shape\":\"Sd\"}}},\"http\":{}},\"DescribeDocument\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Document\":{\"shape\":\"Sv\"}}},\"http\":{}},\"DescribeInstanceInformation\":{\"input\":{\"type\":\"structure\",\"members\":{\"InstanceInformationFilterList\":{\"type\":\"list\",\"member\":{\"locationName\":\"InstanceInformationFilter\",\"type\":\"structure\",\"required\":[\"key\",\"valueSet\"],\"members\":{\"key\":{},\"valueSet\":{\"type\":\"list\",\"member\":{\"locationName\":\"InstanceInformationFilterValue\"}}}}},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"InstanceInformationList\":{\"type\":\"list\",\"member\":{\"locationName\":\"InstanceInformation\",\"type\":\"structure\",\"members\":{\"InstanceId\":{},\"PingStatus\":{},\"LastPingDateTime\":{\"type\":\"timestamp\"},\"AgentVersion\":{},\"IsLatestVersion\":{\"type\":\"boolean\"},\"PlatformType\":{},\"PlatformName\":{},\"PlatformVersion\":{}}}},\"NextToken\":{}}},\"http\":{}},\"GetDocument\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"Content\":{}}},\"http\":{}},\"ListAssociations\":{\"input\":{\"type\":\"structure\",\"required\":[\"AssociationFilterList\"],\"members\":{\"AssociationFilterList\":{\"type\":\"list\",\"member\":{\"locationName\":\"AssociationFilter\",\"type\":\"structure\",\"required\":[\"key\",\"value\"],\"members\":{\"key\":{},\"value\":{}}}},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Associations\":{\"type\":\"list\",\"member\":{\"locationName\":\"Association\",\"type\":\"structure\",\"members\":{\"Name\":{},\"InstanceId\":{}}}},\"NextToken\":{}}},\"http\":{}},\"ListCommandInvocations\":{\"input\":{\"type\":\"structure\",\"members\":{\"CommandId\":{},\"InstanceId\":{},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{},\"Filters\":{\"shape\":\"S27\"},\"Details\":{\"type\":\"boolean\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"CommandInvocations\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"CommandId\":{},\"InstanceId\":{},\"Comment\":{},\"DocumentName\":{},\"RequestedDateTime\":{\"type\":\"timestamp\"},\"Status\":{},\"TraceOutput\":{},\"CommandPlugins\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"Status\":{},\"ResponseCode\":{\"type\":\"integer\"},\"ResponseStartDateTime\":{\"type\":\"timestamp\"},\"ResponseFinishDateTime\":{\"type\":\"timestamp\"},\"Output\":{},\"OutputS3BucketName\":{},\"OutputS3KeyPrefix\":{}}}}}}},\"NextToken\":{}}},\"http\":{}},\"ListCommands\":{\"input\":{\"type\":\"structure\",\"members\":{\"CommandId\":{},\"InstanceId\":{},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{},\"Filters\":{\"shape\":\"S27\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"Commands\":{\"type\":\"list\",\"member\":{\"shape\":\"S2s\"}},\"NextToken\":{}}},\"http\":{}},\"ListDocuments\":{\"input\":{\"type\":\"structure\",\"members\":{\"DocumentFilterList\":{\"type\":\"list\",\"member\":{\"locationName\":\"DocumentFilter\",\"type\":\"structure\",\"required\":[\"key\",\"value\"],\"members\":{\"key\":{},\"value\":{}}}},\"MaxResults\":{\"type\":\"integer\"},\"NextToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"DocumentIdentifiers\":{\"type\":\"list\",\"member\":{\"locationName\":\"DocumentIdentifier\",\"type\":\"structure\",\"members\":{\"Name\":{},\"PlatformTypes\":{\"shape\":\"S15\"}}}},\"NextToken\":{}}},\"http\":{}},\"SendCommand\":{\"input\":{\"type\":\"structure\",\"required\":[\"InstanceIds\",\"DocumentName\"],\"members\":{\"InstanceIds\":{\"shape\":\"S3\"},\"DocumentName\":{},\"TimeoutSeconds\":{\"type\":\"integer\"},\"Comment\":{},\"Parameters\":{\"shape\":\"S8\"},\"OutputS3BucketName\":{},\"OutputS3KeyPrefix\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Command\":{\"shape\":\"S2s\"}}},\"http\":{}},\"UpdateAssociationStatus\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"InstanceId\",\"AssociationStatus\"],\"members\":{\"Name\":{},\"InstanceId\":{},\"AssociationStatus\":{\"shape\":\"Sf\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"AssociationDescription\":{\"shape\":\"Sd\"}}},\"http\":{}}},\"shapes\":{\"S3\":{\"type\":\"list\",\"member\":{}},\"S8\":{\"type\":\"map\",\"key\":{},\"value\":{\"type\":\"list\",\"member\":{}}},\"Sd\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"InstanceId\":{},\"Date\":{\"type\":\"timestamp\"},\"Status\":{\"shape\":\"Sf\"},\"Parameters\":{\"shape\":\"S8\"}}},\"Sf\":{\"type\":\"structure\",\"required\":[\"Date\",\"Name\",\"Message\"],\"members\":{\"Date\":{\"type\":\"timestamp\"},\"Name\":{},\"Message\":{},\"AdditionalInfo\":{}}},\"Sl\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"InstanceId\":{},\"Parameters\":{\"shape\":\"S8\"}}},\"Sv\":{\"type\":\"structure\",\"members\":{\"Sha1\":{},\"Name\":{},\"CreatedDate\":{\"type\":\"timestamp\"},\"Status\":{},\"Description\":{},\"Parameters\":{\"type\":\"list\",\"member\":{\"locationName\":\"DocumentParameter\",\"type\":\"structure\",\"members\":{\"Name\":{},\"Type\":{},\"Description\":{},\"DefaultValue\":{}}}},\"PlatformTypes\":{\"shape\":\"S15\"}}},\"S15\":{\"type\":\"list\",\"member\":{\"locationName\":\"PlatformType\"}},\"S27\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"key\",\"value\"],\"members\":{\"key\":{},\"value\":{}}}},\"S2s\":{\"type\":\"structure\",\"members\":{\"CommandId\":{},\"DocumentName\":{},\"Comment\":{},\"ExpiresAfter\":{\"type\":\"timestamp\"},\"Parameters\":{\"shape\":\"S8\"},\"InstanceIds\":{\"shape\":\"S3\"},\"RequestedDateTime\":{\"type\":\"timestamp\"},\"Status\":{},\"OutputS3BucketName\":{},\"OutputS3KeyPrefix\":{}}}},\"paginators\":{\"ListAssociations\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"Associations\"},\"ListCommandInvocations\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"CommandInvocations\"},\"ListCommands\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"Commands\"},\"ListDocuments\":{\"input_token\":\"NextToken\",\"output_token\":\"NextToken\",\"limit_key\":\"MaxResults\",\"result_key\":\"DocumentIdentifiers\"}}};\nAWS.apiLoader.services['sts'] = {};                                                                                    // 141\nAWS.STS = AWS.Service.defineService('sts', [ '2011-06-15' ]);                                                          // 142\nrequire('./services/sts');                                                                                             // 143\n                                                                                                                       // 144\nAWS.apiLoader.services['sts']['2011-06-15'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2011-06-15\",\"endpointPrefix\":\"sts\",\"globalEndpoint\":\"sts.amazonaws.com\",\"protocol\":\"query\",\"serviceAbbreviation\":\"AWS STS\",\"serviceFullName\":\"AWS Security Token Service\",\"signatureVersion\":\"v4\",\"xmlNamespace\":\"https://sts.amazonaws.com/doc/2011-06-15/\"},\"operations\":{\"AssumeRole\":{\"input\":{\"type\":\"structure\",\"required\":[\"RoleArn\",\"RoleSessionName\"],\"members\":{\"RoleArn\":{},\"RoleSessionName\":{},\"Policy\":{},\"DurationSeconds\":{\"type\":\"integer\"},\"ExternalId\":{},\"SerialNumber\":{},\"TokenCode\":{}}},\"output\":{\"resultWrapper\":\"AssumeRoleResult\",\"type\":\"structure\",\"members\":{\"Credentials\":{\"shape\":\"Sa\"},\"AssumedRoleUser\":{\"shape\":\"Sf\"},\"PackedPolicySize\":{\"type\":\"integer\"}}},\"http\":{}},\"AssumeRoleWithSAML\":{\"input\":{\"type\":\"structure\",\"required\":[\"RoleArn\",\"PrincipalArn\",\"SAMLAssertion\"],\"members\":{\"RoleArn\":{},\"PrincipalArn\":{},\"SAMLAssertion\":{},\"Policy\":{},\"DurationSeconds\":{\"type\":\"integer\"}}},\"output\":{\"resultWrapper\":\"AssumeRoleWithSAMLResult\",\"type\":\"structure\",\"members\":{\"Credentials\":{\"shape\":\"Sa\"},\"AssumedRoleUser\":{\"shape\":\"Sf\"},\"PackedPolicySize\":{\"type\":\"integer\"},\"Subject\":{},\"SubjectType\":{},\"Issuer\":{},\"Audience\":{},\"NameQualifier\":{}}},\"http\":{}},\"AssumeRoleWithWebIdentity\":{\"input\":{\"type\":\"structure\",\"required\":[\"RoleArn\",\"RoleSessionName\",\"WebIdentityToken\"],\"members\":{\"RoleArn\":{},\"RoleSessionName\":{},\"WebIdentityToken\":{},\"ProviderId\":{},\"Policy\":{},\"DurationSeconds\":{\"type\":\"integer\"}}},\"output\":{\"resultWrapper\":\"AssumeRoleWithWebIdentityResult\",\"type\":\"structure\",\"members\":{\"Credentials\":{\"shape\":\"Sa\"},\"SubjectFromWebIdentityToken\":{},\"AssumedRoleUser\":{\"shape\":\"Sf\"},\"PackedPolicySize\":{\"type\":\"integer\"},\"Provider\":{},\"Audience\":{}}},\"http\":{}},\"DecodeAuthorizationMessage\":{\"input\":{\"type\":\"structure\",\"required\":[\"EncodedMessage\"],\"members\":{\"EncodedMessage\":{}}},\"output\":{\"resultWrapper\":\"DecodeAuthorizationMessageResult\",\"type\":\"structure\",\"members\":{\"DecodedMessage\":{}}},\"http\":{}},\"GetFederationToken\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\"],\"members\":{\"Name\":{},\"Policy\":{},\"DurationSeconds\":{\"type\":\"integer\"}}},\"output\":{\"resultWrapper\":\"GetFederationTokenResult\",\"type\":\"structure\",\"members\":{\"Credentials\":{\"shape\":\"Sa\"},\"FederatedUser\":{\"type\":\"structure\",\"required\":[\"FederatedUserId\",\"Arn\"],\"members\":{\"FederatedUserId\":{},\"Arn\":{}}},\"PackedPolicySize\":{\"type\":\"integer\"}}},\"http\":{}},\"GetSessionToken\":{\"input\":{\"type\":\"structure\",\"members\":{\"DurationSeconds\":{\"type\":\"integer\"},\"SerialNumber\":{},\"TokenCode\":{}}},\"output\":{\"resultWrapper\":\"GetSessionTokenResult\",\"type\":\"structure\",\"members\":{\"Credentials\":{\"shape\":\"Sa\"}}},\"http\":{}}},\"shapes\":{\"Sa\":{\"type\":\"structure\",\"required\":[\"AccessKeyId\",\"SecretAccessKey\",\"SessionToken\",\"Expiration\"],\"members\":{\"AccessKeyId\":{},\"SecretAccessKey\":{},\"SessionToken\":{},\"Expiration\":{\"type\":\"timestamp\"}}},\"Sf\":{\"type\":\"structure\",\"required\":[\"AssumedRoleId\",\"Arn\"],\"members\":{\"AssumedRoleId\":{},\"Arn\":{}}}}};\nAWS.apiLoader.services['waf'] = {};                                                                                    // 146\nAWS.WAF = AWS.Service.defineService('waf', [ '2015-08-24' ]);                                                          // 147\n                                                                                                                       // 148\nAWS.apiLoader.services['waf']['2015-08-24'] = {\"version\":\"2.0\",\"metadata\":{\"apiVersion\":\"2015-08-24\",\"endpointPrefix\":\"waf\",\"jsonVersion\":\"1.1\",\"protocol\":\"json\",\"serviceAbbreviation\":\"WAF\",\"serviceFullName\":\"AWS WAF\",\"signatureVersion\":\"v4\",\"targetPrefix\":\"AWSWAF_20150824\"},\"operations\":{\"CreateByteMatchSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"ChangeToken\"],\"members\":{\"Name\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ByteMatchSet\":{\"shape\":\"S5\"},\"ChangeToken\":{}}},\"http\":{}},\"CreateIPSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"ChangeToken\"],\"members\":{\"Name\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"IPSet\":{\"shape\":\"Sh\"},\"ChangeToken\":{}}},\"http\":{}},\"CreateRule\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"MetricName\",\"ChangeToken\"],\"members\":{\"Name\":{},\"MetricName\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Rule\":{\"shape\":\"Sp\"},\"ChangeToken\":{}}},\"http\":{}},\"CreateSizeConstraintSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"ChangeToken\"],\"members\":{\"Name\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"SizeConstraintSet\":{\"shape\":\"Sw\"},\"ChangeToken\":{}}},\"http\":{}},\"CreateSqlInjectionMatchSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"ChangeToken\"],\"members\":{\"Name\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"SqlInjectionMatchSet\":{\"shape\":\"S13\"},\"ChangeToken\":{}}},\"http\":{}},\"CreateWebACL\":{\"input\":{\"type\":\"structure\",\"required\":[\"Name\",\"MetricName\",\"DefaultAction\",\"ChangeToken\"],\"members\":{\"Name\":{},\"MetricName\":{},\"DefaultAction\":{\"shape\":\"S17\"},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"WebACL\":{\"shape\":\"S1a\"},\"ChangeToken\":{}}},\"http\":{}},\"DeleteByteMatchSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"ByteMatchSetId\",\"ChangeToken\"],\"members\":{\"ByteMatchSetId\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"DeleteIPSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"IPSetId\",\"ChangeToken\"],\"members\":{\"IPSetId\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"DeleteRule\":{\"input\":{\"type\":\"structure\",\"required\":[\"RuleId\",\"ChangeToken\"],\"members\":{\"RuleId\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"DeleteSizeConstraintSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"SizeConstraintSetId\",\"ChangeToken\"],\"members\":{\"SizeConstraintSetId\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"DeleteSqlInjectionMatchSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"SqlInjectionMatchSetId\",\"ChangeToken\"],\"members\":{\"SqlInjectionMatchSetId\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"DeleteWebACL\":{\"input\":{\"type\":\"structure\",\"required\":[\"WebACLId\",\"ChangeToken\"],\"members\":{\"WebACLId\":{},\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"GetByteMatchSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"ByteMatchSetId\"],\"members\":{\"ByteMatchSetId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ByteMatchSet\":{\"shape\":\"S5\"}}},\"http\":{}},\"GetChangeToken\":{\"input\":{\"type\":\"structure\",\"members\":{}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"GetChangeTokenStatus\":{\"input\":{\"type\":\"structure\",\"required\":[\"ChangeToken\"],\"members\":{\"ChangeToken\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeTokenStatus\":{}}},\"http\":{}},\"GetIPSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"IPSetId\"],\"members\":{\"IPSetId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"IPSet\":{\"shape\":\"Sh\"}}},\"http\":{}},\"GetRule\":{\"input\":{\"type\":\"structure\",\"required\":[\"RuleId\"],\"members\":{\"RuleId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"Rule\":{\"shape\":\"Sp\"}}},\"http\":{}},\"GetSampledRequests\":{\"input\":{\"type\":\"structure\",\"required\":[\"WebAclId\",\"RuleId\",\"TimeWindow\",\"MaxItems\"],\"members\":{\"WebAclId\":{},\"RuleId\":{},\"TimeWindow\":{\"shape\":\"S22\"},\"MaxItems\":{\"type\":\"long\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"SampledRequests\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Request\",\"Weight\"],\"members\":{\"Request\":{\"type\":\"structure\",\"members\":{\"ClientIP\":{},\"Country\":{},\"URI\":{},\"Method\":{},\"HTTPVersion\":{},\"Headers\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"members\":{\"Name\":{},\"Value\":{}}}}}},\"Weight\":{\"type\":\"long\"},\"Timestamp\":{\"type\":\"timestamp\"},\"Action\":{}}}},\"PopulationSize\":{\"type\":\"long\"},\"TimeWindow\":{\"shape\":\"S22\"}}},\"http\":{}},\"GetSizeConstraintSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"SizeConstraintSetId\"],\"members\":{\"SizeConstraintSetId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"SizeConstraintSet\":{\"shape\":\"Sw\"}}},\"http\":{}},\"GetSqlInjectionMatchSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"SqlInjectionMatchSetId\"],\"members\":{\"SqlInjectionMatchSetId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"SqlInjectionMatchSet\":{\"shape\":\"S13\"}}},\"http\":{}},\"GetWebACL\":{\"input\":{\"type\":\"structure\",\"required\":[\"WebACLId\"],\"members\":{\"WebACLId\":{}}},\"output\":{\"type\":\"structure\",\"members\":{\"WebACL\":{\"shape\":\"S1a\"}}},\"http\":{}},\"ListByteMatchSets\":{\"input\":{\"type\":\"structure\",\"required\":[\"Limit\"],\"members\":{\"NextMarker\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"ByteMatchSets\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"ByteMatchSetId\",\"Name\"],\"members\":{\"ByteMatchSetId\":{},\"Name\":{}}}}}},\"http\":{}},\"ListIPSets\":{\"input\":{\"type\":\"structure\",\"required\":[\"Limit\"],\"members\":{\"NextMarker\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"IPSets\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"IPSetId\",\"Name\"],\"members\":{\"IPSetId\":{},\"Name\":{}}}}}},\"http\":{}},\"ListRules\":{\"input\":{\"type\":\"structure\",\"required\":[\"Limit\"],\"members\":{\"NextMarker\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"Rules\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"RuleId\",\"Name\"],\"members\":{\"RuleId\":{},\"Name\":{}}}}}},\"http\":{}},\"ListSizeConstraintSets\":{\"input\":{\"type\":\"structure\",\"required\":[\"Limit\"],\"members\":{\"NextMarker\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"SizeConstraintSets\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"SizeConstraintSetId\",\"Name\"],\"members\":{\"SizeConstraintSetId\":{},\"Name\":{}}}}}},\"http\":{}},\"ListSqlInjectionMatchSets\":{\"input\":{\"type\":\"structure\",\"required\":[\"Limit\"],\"members\":{\"NextMarker\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"SqlInjectionMatchSets\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"SqlInjectionMatchSetId\",\"Name\"],\"members\":{\"SqlInjectionMatchSetId\":{},\"Name\":{}}}}}},\"http\":{}},\"ListWebACLs\":{\"input\":{\"type\":\"structure\",\"required\":[\"Limit\"],\"members\":{\"NextMarker\":{},\"Limit\":{\"type\":\"integer\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"NextMarker\":{},\"WebACLs\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"WebACLId\",\"Name\"],\"members\":{\"WebACLId\":{},\"Name\":{}}}}}},\"http\":{}},\"UpdateByteMatchSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"ByteMatchSetId\",\"ChangeToken\",\"Updates\"],\"members\":{\"ByteMatchSetId\":{},\"ChangeToken\":{},\"Updates\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Action\",\"ByteMatchTuple\"],\"members\":{\"Action\":{},\"ByteMatchTuple\":{\"shape\":\"S8\"}}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"UpdateIPSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"IPSetId\",\"ChangeToken\",\"Updates\"],\"members\":{\"IPSetId\":{},\"ChangeToken\":{},\"Updates\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Action\",\"IPSetDescriptor\"],\"members\":{\"Action\":{},\"IPSetDescriptor\":{\"shape\":\"Sj\"}}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"UpdateRule\":{\"input\":{\"type\":\"structure\",\"required\":[\"RuleId\",\"ChangeToken\",\"Updates\"],\"members\":{\"RuleId\":{},\"ChangeToken\":{},\"Updates\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Action\",\"Predicate\"],\"members\":{\"Action\":{},\"Predicate\":{\"shape\":\"Sr\"}}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"UpdateSizeConstraintSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"SizeConstraintSetId\",\"ChangeToken\",\"Updates\"],\"members\":{\"SizeConstraintSetId\":{},\"ChangeToken\":{},\"Updates\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Action\",\"SizeConstraint\"],\"members\":{\"Action\":{},\"SizeConstraint\":{\"shape\":\"Sy\"}}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"UpdateSqlInjectionMatchSet\":{\"input\":{\"type\":\"structure\",\"required\":[\"SqlInjectionMatchSetId\",\"ChangeToken\",\"Updates\"],\"members\":{\"SqlInjectionMatchSetId\":{},\"ChangeToken\":{},\"Updates\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Action\",\"SqlInjectionMatchTuple\"],\"members\":{\"Action\":{},\"SqlInjectionMatchTuple\":{\"shape\":\"S15\"}}}}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}},\"UpdateWebACL\":{\"input\":{\"type\":\"structure\",\"required\":[\"WebACLId\",\"ChangeToken\"],\"members\":{\"WebACLId\":{},\"ChangeToken\":{},\"Updates\":{\"type\":\"list\",\"member\":{\"type\":\"structure\",\"required\":[\"Action\",\"ActivatedRule\"],\"members\":{\"Action\":{},\"ActivatedRule\":{\"shape\":\"S1c\"}}}},\"DefaultAction\":{\"shape\":\"S17\"}}},\"output\":{\"type\":\"structure\",\"members\":{\"ChangeToken\":{}}},\"http\":{}}},\"shapes\":{\"S5\":{\"type\":\"structure\",\"required\":[\"ByteMatchSetId\",\"ByteMatchTuples\"],\"members\":{\"ByteMatchSetId\":{},\"Name\":{},\"ByteMatchTuples\":{\"type\":\"list\",\"member\":{\"shape\":\"S8\"}}}},\"S8\":{\"type\":\"structure\",\"required\":[\"FieldToMatch\",\"TargetString\",\"TextTransformation\",\"PositionalConstraint\"],\"members\":{\"FieldToMatch\":{\"shape\":\"S9\"},\"TargetString\":{\"type\":\"blob\"},\"TextTransformation\":{},\"PositionalConstraint\":{}}},\"S9\":{\"type\":\"structure\",\"required\":[\"Type\"],\"members\":{\"Type\":{},\"Data\":{}}},\"Sh\":{\"type\":\"structure\",\"required\":[\"IPSetId\",\"IPSetDescriptors\"],\"members\":{\"IPSetId\":{},\"Name\":{},\"IPSetDescriptors\":{\"type\":\"list\",\"member\":{\"shape\":\"Sj\"}}}},\"Sj\":{\"type\":\"structure\",\"required\":[\"Type\",\"Value\"],\"members\":{\"Type\":{},\"Value\":{}}},\"Sp\":{\"type\":\"structure\",\"required\":[\"RuleId\",\"Predicates\"],\"members\":{\"RuleId\":{},\"Name\":{},\"MetricName\":{},\"Predicates\":{\"type\":\"list\",\"member\":{\"shape\":\"Sr\"}}}},\"Sr\":{\"type\":\"structure\",\"required\":[\"Negated\",\"Type\",\"DataId\"],\"members\":{\"Negated\":{\"type\":\"boolean\"},\"Type\":{},\"DataId\":{}}},\"Sw\":{\"type\":\"structure\",\"required\":[\"SizeConstraintSetId\",\"SizeConstraints\"],\"members\":{\"SizeConstraintSetId\":{},\"Name\":{},\"SizeConstraints\":{\"type\":\"list\",\"member\":{\"shape\":\"Sy\"}}}},\"Sy\":{\"type\":\"structure\",\"required\":[\"FieldToMatch\",\"TextTransformation\",\"ComparisonOperator\",\"Size\"],\"members\":{\"FieldToMatch\":{\"shape\":\"S9\"},\"TextTransformation\":{},\"ComparisonOperator\":{},\"Size\":{\"type\":\"long\"}}},\"S13\":{\"type\":\"structure\",\"required\":[\"SqlInjectionMatchSetId\",\"SqlInjectionMatchTuples\"],\"members\":{\"SqlInjectionMatchSetId\":{},\"Name\":{},\"SqlInjectionMatchTuples\":{\"type\":\"list\",\"member\":{\"shape\":\"S15\"}}}},\"S15\":{\"type\":\"structure\",\"required\":[\"FieldToMatch\",\"TextTransformation\"],\"members\":{\"FieldToMatch\":{\"shape\":\"S9\"},\"TextTransformation\":{}}},\"S17\":{\"type\":\"structure\",\"required\":[\"Type\"],\"members\":{\"Type\":{}}},\"S1a\":{\"type\":\"structure\",\"required\":[\"WebACLId\",\"DefaultAction\",\"Rules\"],\"members\":{\"WebACLId\":{},\"Name\":{},\"MetricName\":{},\"DefaultAction\":{\"shape\":\"S17\"},\"Rules\":{\"type\":\"list\",\"member\":{\"shape\":\"S1c\"}}}},\"S1c\":{\"type\":\"structure\",\"required\":[\"Priority\",\"RuleId\",\"Action\"],\"members\":{\"Priority\":{\"type\":\"integer\"},\"RuleId\":{},\"Action\":{\"shape\":\"S17\"}}},\"S22\":{\"type\":\"structure\",\"required\":[\"StartTime\",\"EndTime\"],\"members\":{\"StartTime\":{\"type\":\"timestamp\"},\"EndTime\":{\"type\":\"timestamp\"}}}}};\n                                                                                                                       // 150\n},{\"./core\":4,\"./http/xhr\":18,\"./services/cloudfront\":42,\"./services/cognitoidentity\":43,\"./services/dynamodb\":44,\"./services/ec2\":45,\"./services/machinelearning\":46,\"./services/route53\":47,\"./services/s3\":48,\"./services/sqs\":49,\"./services/sts\":50,\"./xml/browser_parser\":60}],2:[function(require,module,exports){\nvar crypto = require('crypto'),                                                                                        // 152\n    url = require('url'),                                                                                              // 153\n    AWS = require('../core'),                                                                                          // 154\n    base64Encode = AWS.util.base64.encode,                                                                             // 155\n    inherit = AWS.util.inherit;                                                                                        // 156\n                                                                                                                       // 157\nvar queryEncode = function (string) {                                                                                  // 158\n    var replacements = {                                                                                               // 159\n        '+': '-',                                                                                                      // 160\n        '=': '_',                                                                                                      // 161\n        '/': '~'                                                                                                       // 162\n    };                                                                                                                 // 163\n    return string.replace(/[\\+=\\/]/g, function (match) {                                                               // 164\n        return replacements[match];                                                                                    // 165\n    });                                                                                                                // 166\n};                                                                                                                     // 167\n                                                                                                                       // 168\nvar signPolicy = function (policy, privateKey) {                                                                       // 169\n    var sign = crypto.createSign('RSA-SHA1');                                                                          // 170\n    sign.write(policy);                                                                                                // 171\n    return queryEncode(sign.sign(privateKey, 'base64'))                                                                // 172\n};                                                                                                                     // 173\n                                                                                                                       // 174\nvar signWithCannedPolicy = function (url, expires, keyPairId, privateKey) {                                            // 175\n    var policy = JSON.stringify({                                                                                      // 176\n        Statement: [                                                                                                   // 177\n            {                                                                                                          // 178\n                Resource: url,                                                                                         // 179\n                Condition: { DateLessThan: { 'AWS:EpochTime': expires } }                                              // 180\n            }                                                                                                          // 181\n        ]                                                                                                              // 182\n    });                                                                                                                // 183\n                                                                                                                       // 184\n    return {                                                                                                           // 185\n        Expires: expires,                                                                                              // 186\n        'Key-Pair-Id': keyPairId,                                                                                      // 187\n        Signature: signPolicy(policy.toString(), privateKey)                                                           // 188\n    };                                                                                                                 // 189\n};                                                                                                                     // 190\n                                                                                                                       // 191\nvar signWithCustomPolicy = function (policy, keyPairId, privateKey) {                                                  // 192\n    policy = policy.replace(/\\s/mg, policy);                                                                           // 193\n                                                                                                                       // 194\n    return {                                                                                                           // 195\n        Policy: queryEncode(base64Encode(policy)),                                                                     // 196\n        'Key-Pair-Id': keyPairId,                                                                                      // 197\n        Signature: signPolicy(policy, privateKey)                                                                      // 198\n    }                                                                                                                  // 199\n};                                                                                                                     // 200\n                                                                                                                       // 201\nvar determineScheme = function (url) {                                                                                 // 202\n    var parts = url.split('://');                                                                                      // 203\n    if (parts.length < 2) {                                                                                            // 204\n        throw new Error('Invalid URL.');                                                                               // 205\n    }                                                                                                                  // 206\n                                                                                                                       // 207\n    return parts[0].replace('*', '');                                                                                  // 208\n};                                                                                                                     // 209\n                                                                                                                       // 210\nvar getRtmpUrl = function (rtmpUrl) {                                                                                  // 211\n    var parsed = url.parse(rtmpUrl);                                                                                   // 212\n    return parsed.path.replace(/^\\//, '') + parsed.hash;                                                               // 213\n};                                                                                                                     // 214\n                                                                                                                       // 215\nvar getResource = function (url) {                                                                                     // 216\n    switch (determineScheme(url)) {                                                                                    // 217\n        case 'http':                                                                                                   // 218\n        case 'https':                                                                                                  // 219\n            return url;                                                                                                // 220\n        case 'rtmp':                                                                                                   // 221\n            return getRtmpUrl(url);                                                                                    // 222\n        default:                                                                                                       // 223\n            throw new Error('Invalid URI scheme. Scheme must be one of'                                                // 224\n                + ' http, https, or rtmp');                                                                            // 225\n    }                                                                                                                  // 226\n};                                                                                                                     // 227\n                                                                                                                       // 228\nvar handleError = function (err, callback) {                                                                           // 229\n    if (!callback || typeof callback !== 'function') {                                                                 // 230\n        throw err;                                                                                                     // 231\n    }                                                                                                                  // 232\n                                                                                                                       // 233\n    callback(err);                                                                                                     // 234\n};                                                                                                                     // 235\n                                                                                                                       // 236\nvar handleSuccess = function (result, callback) {                                                                      // 237\n    if (!callback || typeof callback !== 'function') {                                                                 // 238\n        return result;                                                                                                 // 239\n    }                                                                                                                  // 240\n                                                                                                                       // 241\n    callback(null, result);                                                                                            // 242\n};                                                                                                                     // 243\n                                                                                                                       // 244\nAWS.CloudFront.Signer = inherit({                                                                                      // 245\n                                                                                                                       // 246\n    constructor: function Signer(keyPairId, privateKey) {                                                              // 247\n        if (keyPairId === void 0 || privateKey === void 0) {                                                           // 248\n            throw new Error('A key pair ID and private key are required');                                             // 249\n        }                                                                                                              // 250\n                                                                                                                       // 251\n        this.keyPairId = keyPairId;                                                                                    // 252\n        this.privateKey = privateKey;                                                                                  // 253\n    },                                                                                                                 // 254\n                                                                                                                       // 255\n                                                                                                                       // 256\n    getSignedCookie: function (options, cb) {                                                                          // 257\n        var signatureHash = 'policy' in options                                                                        // 258\n            ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)                                    // 259\n            : signWithCannedPolicy(options.url, options.expires, this.keyPairId, this.privateKey);                     // 260\n                                                                                                                       // 261\n        var cookieHash = {};                                                                                           // 262\n        for (var key in signatureHash) {                                                                               // 263\n            if (signatureHash.hasOwnProperty(key)) {                                                                   // 264\n                cookieHash['CloudFront-' + key] = signatureHash[key];                                                  // 265\n            }                                                                                                          // 266\n        }                                                                                                              // 267\n                                                                                                                       // 268\n        return handleSuccess(cookieHash, cb);                                                                          // 269\n    },                                                                                                                 // 270\n                                                                                                                       // 271\n                                                                                                                       // 272\n    getSignedUrl: function (options, cb) {                                                                             // 273\n        try {                                                                                                          // 274\n            var resource = getResource(options.url);                                                                   // 275\n        } catch (err) {                                                                                                // 276\n            return handleError(err, cb);                                                                               // 277\n        }                                                                                                              // 278\n                                                                                                                       // 279\n        var parsedUrl = url.parse(options.url, true),                                                                  // 280\n            signatureHash = options.hasOwnProperty('policy')                                                           // 281\n                ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)                                // 282\n                : signWithCannedPolicy(resource, options.expires, this.keyPairId, this.privateKey);                    // 283\n                                                                                                                       // 284\n        parsedUrl.search = null;                                                                                       // 285\n        for (var key in signatureHash) {                                                                               // 286\n            if (signatureHash.hasOwnProperty(key)) {                                                                   // 287\n                parsedUrl.query[key] = signatureHash[key];                                                             // 288\n            }                                                                                                          // 289\n        }                                                                                                              // 290\n                                                                                                                       // 291\n        try {                                                                                                          // 292\n            var signedUrl = determineScheme(options.url) === 'rtmp'                                                    // 293\n                    ? getRtmpUrl(url.format(parsedUrl))                                                                // 294\n                    : url.format(parsedUrl);                                                                           // 295\n        } catch (err) {                                                                                                // 296\n            return handleError(err, cb);                                                                               // 297\n        }                                                                                                              // 298\n                                                                                                                       // 299\n        return handleSuccess(signedUrl, cb);                                                                           // 300\n    }                                                                                                                  // 301\n});                                                                                                                    // 302\n                                                                                                                       // 303\nmodule.exports = AWS.CloudFront.Signer;                                                                                // 304\n                                                                                                                       // 305\n},{\"../core\":4,\"crypto\":66,\"url\":78}],3:[function(require,module,exports){                                             // 306\nvar AWS = require('./core');                                                                                           // 307\nrequire('./credentials');                                                                                              // 308\nrequire('./credentials/credential_provider_chain');                                                                    // 309\n                                                                                                                       // 310\n                                                                                                                       // 311\nAWS.Config = AWS.util.inherit({                                                                                        // 312\n                                                                                                                       // 313\n                                                                                                                       // 314\n                                                                                                                       // 315\n  constructor: function Config(options) {                                                                              // 316\n    if (options === undefined) options = {};                                                                           // 317\n    options = this.extractCredentials(options);                                                                        // 318\n                                                                                                                       // 319\n    AWS.util.each.call(this, this.keys, function (key, value) {                                                        // 320\n      this.set(key, options[key], value);                                                                              // 321\n    });                                                                                                                // 322\n  },                                                                                                                   // 323\n                                                                                                                       // 324\n                                                                                                                       // 325\n                                                                                                                       // 326\n                                                                                                                       // 327\n  getCredentials: function getCredentials(callback) {                                                                  // 328\n    var self = this;                                                                                                   // 329\n                                                                                                                       // 330\n    function finish(err) {                                                                                             // 331\n      callback(err, err ? null : self.credentials);                                                                    // 332\n    }                                                                                                                  // 333\n                                                                                                                       // 334\n    function credError(msg, err) {                                                                                     // 335\n      return new AWS.util.error(err || new Error(), {                                                                  // 336\n        code: 'CredentialsError', message: msg                                                                         // 337\n      });                                                                                                              // 338\n    }                                                                                                                  // 339\n                                                                                                                       // 340\n    function getAsyncCredentials() {                                                                                   // 341\n      self.credentials.get(function(err) {                                                                             // 342\n        if (err) {                                                                                                     // 343\n          var msg = 'Could not load credentials from ' +                                                               // 344\n            self.credentials.constructor.name;                                                                         // 345\n          err = credError(msg, err);                                                                                   // 346\n        }                                                                                                              // 347\n        finish(err);                                                                                                   // 348\n      });                                                                                                              // 349\n    }                                                                                                                  // 350\n                                                                                                                       // 351\n    function getStaticCredentials() {                                                                                  // 352\n      var err = null;                                                                                                  // 353\n      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {                                        // 354\n        err = credError('Missing credentials');                                                                        // 355\n      }                                                                                                                // 356\n      finish(err);                                                                                                     // 357\n    }                                                                                                                  // 358\n                                                                                                                       // 359\n    if (self.credentials) {                                                                                            // 360\n      if (typeof self.credentials.get === 'function') {                                                                // 361\n        getAsyncCredentials();                                                                                         // 362\n      } else { // static credentials                                                                                   // 363\n        getStaticCredentials();                                                                                        // 364\n      }                                                                                                                // 365\n    } else if (self.credentialProvider) {                                                                              // 366\n      self.credentialProvider.resolve(function(err, creds) {                                                           // 367\n        if (err) {                                                                                                     // 368\n          err = credError('Could not load credentials from any providers', err);                                       // 369\n        }                                                                                                              // 370\n        self.credentials = creds;                                                                                      // 371\n        finish(err);                                                                                                   // 372\n      });                                                                                                              // 373\n    } else {                                                                                                           // 374\n      finish(credError('No credentials to load'));                                                                     // 375\n    }                                                                                                                  // 376\n  },                                                                                                                   // 377\n                                                                                                                       // 378\n                                                                                                                       // 379\n                                                                                                                       // 380\n                                                                                                                       // 381\n  update: function update(options, allowUnknownKeys) {                                                                 // 382\n    allowUnknownKeys = allowUnknownKeys || false;                                                                      // 383\n    options = this.extractCredentials(options);                                                                        // 384\n    AWS.util.each.call(this, options, function (key, value) {                                                          // 385\n      if (allowUnknownKeys || this.keys.hasOwnProperty(key) ||                                                         // 386\n          AWS.Service.hasService(key)) {                                                                               // 387\n        this.set(key, value);                                                                                          // 388\n      }                                                                                                                // 389\n    });                                                                                                                // 390\n  },                                                                                                                   // 391\n                                                                                                                       // 392\n                                                                                                                       // 393\n  loadFromPath: function loadFromPath(path) {                                                                          // 394\n    this.clear();                                                                                                      // 395\n                                                                                                                       // 396\n    var options = JSON.parse(AWS.util.readFileSync(path));                                                             // 397\n    var fileSystemCreds = new AWS.FileSystemCredentials(path);                                                         // 398\n    var chain = new AWS.CredentialProviderChain();                                                                     // 399\n    chain.providers.unshift(fileSystemCreds);                                                                          // 400\n    chain.resolve(function (err, creds) {                                                                              // 401\n      if (err) throw err;                                                                                              // 402\n      else options.credentials = creds;                                                                                // 403\n    });                                                                                                                // 404\n                                                                                                                       // 405\n    this.constructor(options);                                                                                         // 406\n                                                                                                                       // 407\n    return this;                                                                                                       // 408\n  },                                                                                                                   // 409\n                                                                                                                       // 410\n                                                                                                                       // 411\n  clear: function clear() {                                                                                            // 412\n                                                                                                                       // 413\n    AWS.util.each.call(this, this.keys, function (key) {                                                               // 414\n      delete this[key];                                                                                                // 415\n    });                                                                                                                // 416\n                                                                                                                       // 417\n    this.set('credentials', undefined);                                                                                // 418\n    this.set('credentialProvider', undefined);                                                                         // 419\n  },                                                                                                                   // 420\n                                                                                                                       // 421\n                                                                                                                       // 422\n  set: function set(property, value, defaultValue) {                                                                   // 423\n    if (value === undefined) {                                                                                         // 424\n      if (defaultValue === undefined) {                                                                                // 425\n        defaultValue = this.keys[property];                                                                            // 426\n      }                                                                                                                // 427\n      if (typeof defaultValue === 'function') {                                                                        // 428\n        this[property] = defaultValue.call(this);                                                                      // 429\n      } else {                                                                                                         // 430\n        this[property] = defaultValue;                                                                                 // 431\n      }                                                                                                                // 432\n    } else if (property === 'httpOptions' && this[property]) {                                                         // 433\n      this[property] = AWS.util.merge(this[property], value);                                                          // 434\n    } else {                                                                                                           // 435\n      this[property] = value;                                                                                          // 436\n    }                                                                                                                  // 437\n  },                                                                                                                   // 438\n                                                                                                                       // 439\n                                                                                                                       // 440\n  keys: {                                                                                                              // 441\n    credentials: null,                                                                                                 // 442\n    credentialProvider: null,                                                                                          // 443\n    region: null,                                                                                                      // 444\n    logger: null,                                                                                                      // 445\n    apiVersions: {},                                                                                                   // 446\n    apiVersion: null,                                                                                                  // 447\n    endpoint: undefined,                                                                                               // 448\n    httpOptions: {                                                                                                     // 449\n      timeout: 120000                                                                                                  // 450\n    },                                                                                                                 // 451\n    maxRetries: undefined,                                                                                             // 452\n    maxRedirects: 10,                                                                                                  // 453\n    paramValidation: true,                                                                                             // 454\n    sslEnabled: true,                                                                                                  // 455\n    s3ForcePathStyle: false,                                                                                           // 456\n    s3BucketEndpoint: false,                                                                                           // 457\n    computeChecksums: true,                                                                                            // 458\n    convertResponseTypes: true,                                                                                        // 459\n    correctClockSkew: false,                                                                                           // 460\n    customUserAgent: null,                                                                                             // 461\n    dynamoDbCrc32: true,                                                                                               // 462\n    systemClockOffset: 0,                                                                                              // 463\n    signatureVersion: null,                                                                                            // 464\n    signatureCache: true,                                                                                              // 465\n    retryDelayOptions: {                                                                                               // 466\n      base: 100                                                                                                        // 467\n    }                                                                                                                  // 468\n  },                                                                                                                   // 469\n                                                                                                                       // 470\n                                                                                                                       // 471\n  extractCredentials: function extractCredentials(options) {                                                           // 472\n    if (options.accessKeyId && options.secretAccessKey) {                                                              // 473\n      options = AWS.util.copy(options);                                                                                // 474\n      options.credentials = new AWS.Credentials(options);                                                              // 475\n    }                                                                                                                  // 476\n    return options;                                                                                                    // 477\n  }                                                                                                                    // 478\n});                                                                                                                    // 479\n                                                                                                                       // 480\n                                                                                                                       // 481\nAWS.config = new AWS.Config();                                                                                         // 482\n                                                                                                                       // 483\n},{\"./core\":4,\"./credentials\":5,\"./credentials/credential_provider_chain\":7}],4:[function(require,module,exports){     // 484\n                                                                                                                       // 485\nvar AWS = { util: require('./util') };                                                                                 // 486\n                                                                                                                       // 487\n                                                                                                                       // 488\nvar _hidden = {}; _hidden.toString(); // hack to parse macro                                                           // 489\n                                                                                                                       // 490\nmodule.exports = AWS;                                                                                                  // 491\n                                                                                                                       // 492\nAWS.util.update(AWS, {                                                                                                 // 493\n                                                                                                                       // 494\n                                                                                                                       // 495\n  VERSION: '2.2.42',                                                                                                   // 496\n                                                                                                                       // 497\n                                                                                                                       // 498\n  Signers: {},                                                                                                         // 499\n                                                                                                                       // 500\n                                                                                                                       // 501\n  Protocol: {                                                                                                          // 502\n    Json: require('./protocol/json'),                                                                                  // 503\n    Query: require('./protocol/query'),                                                                                // 504\n    Rest: require('./protocol/rest'),                                                                                  // 505\n    RestJson: require('./protocol/rest_json'),                                                                         // 506\n    RestXml: require('./protocol/rest_xml')                                                                            // 507\n  },                                                                                                                   // 508\n                                                                                                                       // 509\n                                                                                                                       // 510\n  XML: {                                                                                                               // 511\n    Builder: require('./xml/builder'),                                                                                 // 512\n    Parser: null // conditionally set based on environment                                                             // 513\n  },                                                                                                                   // 514\n                                                                                                                       // 515\n                                                                                                                       // 516\n  JSON: {                                                                                                              // 517\n    Builder: require('./json/builder'),                                                                                // 518\n    Parser: require('./json/parser')                                                                                   // 519\n  },                                                                                                                   // 520\n                                                                                                                       // 521\n                                                                                                                       // 522\n  Model: {                                                                                                             // 523\n    Api: require('./model/api'),                                                                                       // 524\n    Operation: require('./model/operation'),                                                                           // 525\n    Shape: require('./model/shape'),                                                                                   // 526\n    Paginator: require('./model/paginator'),                                                                           // 527\n    ResourceWaiter: require('./model/resource_waiter')                                                                 // 528\n  },                                                                                                                   // 529\n                                                                                                                       // 530\n  util: require('./util'),                                                                                             // 531\n                                                                                                                       // 532\n                                                                                                                       // 533\n  apiLoader: function() { throw new Error('No API loader set'); }                                                      // 534\n});                                                                                                                    // 535\n                                                                                                                       // 536\nrequire('./service');                                                                                                  // 537\n                                                                                                                       // 538\nrequire('./credentials');                                                                                              // 539\nrequire('./credentials/credential_provider_chain');                                                                    // 540\nrequire('./credentials/temporary_credentials');                                                                        // 541\nrequire('./credentials/web_identity_credentials');                                                                     // 542\nrequire('./credentials/cognito_identity_credentials');                                                                 // 543\nrequire('./credentials/saml_credentials');                                                                             // 544\n                                                                                                                       // 545\nrequire('./config');                                                                                                   // 546\nrequire('./http');                                                                                                     // 547\nrequire('./sequential_executor');                                                                                      // 548\nrequire('./event_listeners');                                                                                          // 549\nrequire('./request');                                                                                                  // 550\nrequire('./response');                                                                                                 // 551\nrequire('./resource_waiter');                                                                                          // 552\nrequire('./signers/request_signer');                                                                                   // 553\nrequire('./param_validator');                                                                                          // 554\n                                                                                                                       // 555\n                                                                                                                       // 556\nAWS.events = new AWS.SequentialExecutor();                                                                             // 557\n                                                                                                                       // 558\n},{\"./config\":3,\"./credentials\":5,\"./credentials/cognito_identity_credentials\":6,\"./credentials/credential_provider_chain\":7,\"./credentials/saml_credentials\":8,\"./credentials/temporary_credentials\":9,\"./credentials/web_identity_credentials\":10,\"./event_listeners\":16,\"./http\":17,\"./json/builder\":19,\"./json/parser\":20,\"./model/api\":21,\"./model/operation\":23,\"./model/paginator\":24,\"./model/resource_waiter\":25,\"./model/shape\":26,\"./param_validator\":27,\"./protocol/json\":28,\"./protocol/query\":29,\"./protocol/rest\":30,\"./protocol/rest_json\":31,\"./protocol/rest_xml\":32,\"./request\":36,\"./resource_waiter\":37,\"./response\":38,\"./sequential_executor\":40,\"./service\":41,\"./signers/request_signer\":52,\"./util\":59,\"./xml/builder\":61}],5:[function(require,module,exports){\nvar AWS = require('./core');                                                                                           // 560\n                                                                                                                       // 561\n                                                                                                                       // 562\nAWS.Credentials = AWS.util.inherit({                                                                                   // 563\n                                                                                                                       // 564\n  constructor: function Credentials() {                                                                                // 565\n    AWS.util.hideProperties(this, ['secretAccessKey']);                                                                // 566\n                                                                                                                       // 567\n    this.expired = false;                                                                                              // 568\n    this.expireTime = null;                                                                                            // 569\n    if (arguments.length === 1 && typeof arguments[0] === 'object') {                                                  // 570\n      var creds = arguments[0].credentials || arguments[0];                                                            // 571\n      this.accessKeyId = creds.accessKeyId;                                                                            // 572\n      this.secretAccessKey = creds.secretAccessKey;                                                                    // 573\n      this.sessionToken = creds.sessionToken;                                                                          // 574\n    } else {                                                                                                           // 575\n      this.accessKeyId = arguments[0];                                                                                 // 576\n      this.secretAccessKey = arguments[1];                                                                             // 577\n      this.sessionToken = arguments[2];                                                                                // 578\n    }                                                                                                                  // 579\n  },                                                                                                                   // 580\n                                                                                                                       // 581\n                                                                                                                       // 582\n  expiryWindow: 15,                                                                                                    // 583\n                                                                                                                       // 584\n                                                                                                                       // 585\n  needsRefresh: function needsRefresh() {                                                                              // 586\n    var currentTime = AWS.util.date.getDate().getTime();                                                               // 587\n    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);                                               // 588\n                                                                                                                       // 589\n    if (this.expireTime && adjustedTime > this.expireTime) {                                                           // 590\n      return true;                                                                                                     // 591\n    } else {                                                                                                           // 592\n      return this.expired || !this.accessKeyId || !this.secretAccessKey;                                               // 593\n    }                                                                                                                  // 594\n  },                                                                                                                   // 595\n                                                                                                                       // 596\n                                                                                                                       // 597\n  get: function get(callback) {                                                                                        // 598\n    var self = this;                                                                                                   // 599\n    if (this.needsRefresh()) {                                                                                         // 600\n      this.refresh(function(err) {                                                                                     // 601\n        if (!err) self.expired = false; // reset expired flag                                                          // 602\n        if (callback) callback(err);                                                                                   // 603\n      });                                                                                                              // 604\n    } else if (callback) {                                                                                             // 605\n      callback();                                                                                                      // 606\n    }                                                                                                                  // 607\n  },                                                                                                                   // 608\n                                                                                                                       // 609\n                                                                                                                       // 610\n  refresh: function refresh(callback) {                                                                                // 611\n    this.expired = false;                                                                                              // 612\n    callback();                                                                                                        // 613\n  }                                                                                                                    // 614\n});                                                                                                                    // 615\n                                                                                                                       // 616\n},{\"./core\":4}],6:[function(require,module,exports){                                                                   // 617\nvar AWS = require('../core');                                                                                          // 618\n                                                                                                                       // 619\n                                                                                                                       // 620\nAWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {                                                   // 621\n                                                                                                                       // 622\n  localStorageKey: {                                                                                                   // 623\n    id: 'aws.cognito.identity-id.',                                                                                    // 624\n    providers: 'aws.cognito.identity-providers.'                                                                       // 625\n  },                                                                                                                   // 626\n                                                                                                                       // 627\n                                                                                                                       // 628\n  constructor: function CognitoIdentityCredentials(params) {                                                           // 629\n    AWS.Credentials.call(this);                                                                                        // 630\n    this.expired = true;                                                                                               // 631\n    this.params = params;                                                                                              // 632\n    this.data = null;                                                                                                  // 633\n    this.identityId = null;                                                                                            // 634\n    this.loadCachedId();                                                                                               // 635\n  },                                                                                                                   // 636\n                                                                                                                       // 637\n                                                                                                                       // 638\n  refresh: function refresh(callback) {                                                                                // 639\n    var self = this;                                                                                                   // 640\n    self.createClients();                                                                                              // 641\n    self.data = null;                                                                                                  // 642\n    self.identityId = null;                                                                                            // 643\n    self.getId(function(err) {                                                                                         // 644\n      if (!err) {                                                                                                      // 645\n        if (!self.params.RoleArn) {                                                                                    // 646\n          self.getCredentialsForIdentity(callback);                                                                    // 647\n        } else {                                                                                                       // 648\n          self.getCredentialsFromSTS(callback);                                                                        // 649\n        }                                                                                                              // 650\n      } else {                                                                                                         // 651\n        self.clearCachedId();                                                                                          // 652\n        callback(err);                                                                                                 // 653\n      }                                                                                                                // 654\n    });                                                                                                                // 655\n  },                                                                                                                   // 656\n                                                                                                                       // 657\n                                                                                                                       // 658\n  clearCachedId: function clearCache() {                                                                               // 659\n    this.identityId = null;                                                                                            // 660\n    delete this.params.IdentityId;                                                                                     // 661\n                                                                                                                       // 662\n    var poolId = this.params.IdentityPoolId;                                                                           // 663\n    var loginId = this.params.LoginId || '';                                                                           // 664\n    delete this.storage[this.localStorageKey.id + poolId + loginId];                                                   // 665\n    delete this.storage[this.localStorageKey.providers + poolId + loginId];                                            // 666\n  },                                                                                                                   // 667\n                                                                                                                       // 668\n                                                                                                                       // 669\n  getId: function getId(callback) {                                                                                    // 670\n    var self = this;                                                                                                   // 671\n    if (typeof self.params.IdentityId === 'string') {                                                                  // 672\n      return callback(null, self.params.IdentityId);                                                                   // 673\n    }                                                                                                                  // 674\n                                                                                                                       // 675\n    self.cognito.getId(function(err, data) {                                                                           // 676\n      if (!err && data.IdentityId) {                                                                                   // 677\n        self.params.IdentityId = data.IdentityId;                                                                      // 678\n        callback(null, data.IdentityId);                                                                               // 679\n      } else {                                                                                                         // 680\n        callback(err);                                                                                                 // 681\n      }                                                                                                                // 682\n    });                                                                                                                // 683\n  },                                                                                                                   // 684\n                                                                                                                       // 685\n                                                                                                                       // 686\n                                                                                                                       // 687\n  loadCredentials: function loadCredentials(data, credentials) {                                                       // 688\n    if (!data || !credentials) return;                                                                                 // 689\n    credentials.expired = false;                                                                                       // 690\n    credentials.accessKeyId = data.Credentials.AccessKeyId;                                                            // 691\n    credentials.secretAccessKey = data.Credentials.SecretKey;                                                          // 692\n    credentials.sessionToken = data.Credentials.SessionToken;                                                          // 693\n    credentials.expireTime = data.Credentials.Expiration;                                                              // 694\n  },                                                                                                                   // 695\n                                                                                                                       // 696\n                                                                                                                       // 697\n  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {                                            // 698\n    var self = this;                                                                                                   // 699\n    self.cognito.getCredentialsForIdentity(function(err, data) {                                                       // 700\n      if (!err) {                                                                                                      // 701\n        self.cacheId(data);                                                                                            // 702\n        self.data = data;                                                                                              // 703\n        self.loadCredentials(self.data, self);                                                                         // 704\n      } else {                                                                                                         // 705\n        self.clearCachedId();                                                                                          // 706\n      }                                                                                                                // 707\n      callback(err);                                                                                                   // 708\n    });                                                                                                                // 709\n  },                                                                                                                   // 710\n                                                                                                                       // 711\n                                                                                                                       // 712\n  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {                                                    // 713\n    var self = this;                                                                                                   // 714\n    self.cognito.getOpenIdToken(function(err, data) {                                                                  // 715\n      if (!err) {                                                                                                      // 716\n        self.cacheId(data);                                                                                            // 717\n        self.params.WebIdentityToken = data.Token;                                                                     // 718\n        self.webIdentityCredentials.refresh(function(webErr) {                                                         // 719\n          if (!webErr) {                                                                                               // 720\n            self.data = self.webIdentityCredentials.data;                                                              // 721\n            self.sts.credentialsFrom(self.data, self);                                                                 // 722\n          } else {                                                                                                     // 723\n            self.clearCachedId();                                                                                      // 724\n          }                                                                                                            // 725\n          callback(webErr);                                                                                            // 726\n        });                                                                                                            // 727\n      } else {                                                                                                         // 728\n        self.clearCachedId();                                                                                          // 729\n        callback(err);                                                                                                 // 730\n      }                                                                                                                // 731\n    });                                                                                                                // 732\n  },                                                                                                                   // 733\n                                                                                                                       // 734\n                                                                                                                       // 735\n  loadCachedId: function loadCachedId() {                                                                              // 736\n    var self = this;                                                                                                   // 737\n                                                                                                                       // 738\n    if (AWS.util.isBrowser() && !self.params.IdentityId) {                                                             // 739\n      var id = self.getStorage('id');                                                                                  // 740\n      if (id && self.params.Logins) {                                                                                  // 741\n        var actualProviders = Object.keys(self.params.Logins);                                                         // 742\n        var cachedProviders =                                                                                          // 743\n          (self.getStorage('providers') || '').split(',');                                                             // 744\n                                                                                                                       // 745\n        var intersect = cachedProviders.filter(function(n) {                                                           // 746\n          return actualProviders.indexOf(n) !== -1;                                                                    // 747\n        });                                                                                                            // 748\n        if (intersect.length !== 0) {                                                                                  // 749\n          self.params.IdentityId = id;                                                                                 // 750\n        }                                                                                                              // 751\n      } else if (id) {                                                                                                 // 752\n        self.params.IdentityId = id;                                                                                   // 753\n      }                                                                                                                // 754\n    }                                                                                                                  // 755\n  },                                                                                                                   // 756\n                                                                                                                       // 757\n                                                                                                                       // 758\n  createClients: function() {                                                                                          // 759\n    this.webIdentityCredentials = this.webIdentityCredentials ||                                                       // 760\n      new AWS.WebIdentityCredentials(this.params);                                                                     // 761\n    this.cognito = this.cognito ||                                                                                     // 762\n      new AWS.CognitoIdentity({params: this.params});                                                                  // 763\n    this.sts = this.sts || new AWS.STS();                                                                              // 764\n  },                                                                                                                   // 765\n                                                                                                                       // 766\n                                                                                                                       // 767\n  cacheId: function cacheId(data) {                                                                                    // 768\n    this.identityId = data.IdentityId;                                                                                 // 769\n    this.params.IdentityId = this.identityId;                                                                          // 770\n                                                                                                                       // 771\n    if (AWS.util.isBrowser()) {                                                                                        // 772\n      this.setStorage('id', data.IdentityId);                                                                          // 773\n                                                                                                                       // 774\n      if (this.params.Logins) {                                                                                        // 775\n        this.setStorage('providers', Object.keys(this.params.Logins).join(','));                                       // 776\n      }                                                                                                                // 777\n    }                                                                                                                  // 778\n  },                                                                                                                   // 779\n                                                                                                                       // 780\n                                                                                                                       // 781\n  getStorage: function getStorage(key) {                                                                               // 782\n    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];         // 783\n  },                                                                                                                   // 784\n                                                                                                                       // 785\n                                                                                                                       // 786\n  setStorage: function setStorage(key, val) {                                                                          // 787\n    try {                                                                                                              // 788\n      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;        // 789\n    } catch (_) {}                                                                                                     // 790\n  },                                                                                                                   // 791\n                                                                                                                       // 792\n                                                                                                                       // 793\n  storage: (function() {                                                                                               // 794\n    try {                                                                                                              // 795\n      return AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?         // 796\n             window.localStorage : {};                                                                                 // 797\n    } catch (_) {                                                                                                      // 798\n      return {};                                                                                                       // 799\n    }                                                                                                                  // 800\n  })()                                                                                                                 // 801\n});                                                                                                                    // 802\n                                                                                                                       // 803\n},{\"../core\":4}],7:[function(require,module,exports){                                                                  // 804\nvar AWS = require('../core');                                                                                          // 805\n                                                                                                                       // 806\n                                                                                                                       // 807\nAWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {                                                      // 808\n                                                                                                                       // 809\n                                                                                                                       // 810\n  constructor: function CredentialProviderChain(providers) {                                                           // 811\n    if (providers) {                                                                                                   // 812\n      this.providers = providers;                                                                                      // 813\n    } else {                                                                                                           // 814\n      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);                                          // 815\n    }                                                                                                                  // 816\n  },                                                                                                                   // 817\n                                                                                                                       // 818\n                                                                                                                       // 819\n  resolve: function resolve(callback) {                                                                                // 820\n    if (this.providers.length === 0) {                                                                                 // 821\n      callback(new Error('No providers'));                                                                             // 822\n      return this;                                                                                                     // 823\n    }                                                                                                                  // 824\n                                                                                                                       // 825\n    var index = 0;                                                                                                     // 826\n    var providers = this.providers.slice(0);                                                                           // 827\n                                                                                                                       // 828\n    function resolveNext(err, creds) {                                                                                 // 829\n      if ((!err && creds) || index === providers.length) {                                                             // 830\n        callback(err, creds);                                                                                          // 831\n        return;                                                                                                        // 832\n      }                                                                                                                // 833\n                                                                                                                       // 834\n      var provider = providers[index++];                                                                               // 835\n      if (typeof provider === 'function') {                                                                            // 836\n        creds = provider.call();                                                                                       // 837\n      } else {                                                                                                         // 838\n        creds = provider;                                                                                              // 839\n      }                                                                                                                // 840\n                                                                                                                       // 841\n      if (creds.get) {                                                                                                 // 842\n        creds.get(function(getErr) {                                                                                   // 843\n          resolveNext(getErr, getErr ? null : creds);                                                                  // 844\n        });                                                                                                            // 845\n      } else {                                                                                                         // 846\n        resolveNext(null, creds);                                                                                      // 847\n      }                                                                                                                // 848\n    }                                                                                                                  // 849\n                                                                                                                       // 850\n    resolveNext();                                                                                                     // 851\n    return this;                                                                                                       // 852\n  }                                                                                                                    // 853\n                                                                                                                       // 854\n});                                                                                                                    // 855\n                                                                                                                       // 856\n                                                                                                                       // 857\nAWS.CredentialProviderChain.defaultProviders = [];                                                                     // 858\n                                                                                                                       // 859\n},{\"../core\":4}],8:[function(require,module,exports){                                                                  // 860\nvar AWS = require('../core');                                                                                          // 861\n                                                                                                                       // 862\n                                                                                                                       // 863\nAWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {                                                              // 864\n                                                                                                                       // 865\n  constructor: function SAMLCredentials(params) {                                                                      // 866\n    AWS.Credentials.call(this);                                                                                        // 867\n    this.expired = true;                                                                                               // 868\n    this.params = params;                                                                                              // 869\n  },                                                                                                                   // 870\n                                                                                                                       // 871\n                                                                                                                       // 872\n  refresh: function refresh(callback) {                                                                                // 873\n    var self = this;                                                                                                   // 874\n    self.createClients();                                                                                              // 875\n    if (!callback) callback = function(err) { if (err) throw err; };                                                   // 876\n                                                                                                                       // 877\n    self.service.assumeRoleWithSAML(function (err, data) {                                                             // 878\n      if (!err) {                                                                                                      // 879\n        self.service.credentialsFrom(data, self);                                                                      // 880\n      }                                                                                                                // 881\n      callback(err);                                                                                                   // 882\n    });                                                                                                                // 883\n  },                                                                                                                   // 884\n                                                                                                                       // 885\n                                                                                                                       // 886\n  createClients: function() {                                                                                          // 887\n    this.service = this.service || new AWS.STS({params: this.params});                                                 // 888\n  }                                                                                                                    // 889\n                                                                                                                       // 890\n});                                                                                                                    // 891\n                                                                                                                       // 892\n},{\"../core\":4}],9:[function(require,module,exports){                                                                  // 893\nvar AWS = require('../core');                                                                                          // 894\n                                                                                                                       // 895\n                                                                                                                       // 896\nAWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {                                                         // 897\n                                                                                                                       // 898\n  constructor: function TemporaryCredentials(params) {                                                                 // 899\n    AWS.Credentials.call(this);                                                                                        // 900\n    this.loadMasterCredentials();                                                                                      // 901\n    this.expired = true;                                                                                               // 902\n                                                                                                                       // 903\n    this.params = params || {};                                                                                        // 904\n    if (this.params.RoleArn) {                                                                                         // 905\n      this.params.RoleSessionName =                                                                                    // 906\n        this.params.RoleSessionName || 'temporary-credentials';                                                        // 907\n    }                                                                                                                  // 908\n  },                                                                                                                   // 909\n                                                                                                                       // 910\n                                                                                                                       // 911\n  refresh: function refresh(callback) {                                                                                // 912\n    var self = this;                                                                                                   // 913\n    self.createClients();                                                                                              // 914\n    if (!callback) callback = function(err) { if (err) throw err; };                                                   // 915\n                                                                                                                       // 916\n    self.service.config.credentials = self.masterCredentials;                                                          // 917\n    var operation = self.params.RoleArn ?                                                                              // 918\n      self.service.assumeRole : self.service.getSessionToken;                                                          // 919\n    operation.call(self.service, function (err, data) {                                                                // 920\n      if (!err) {                                                                                                      // 921\n        self.service.credentialsFrom(data, self);                                                                      // 922\n      }                                                                                                                // 923\n      callback(err);                                                                                                   // 924\n    });                                                                                                                // 925\n  },                                                                                                                   // 926\n                                                                                                                       // 927\n                                                                                                                       // 928\n  loadMasterCredentials: function loadMasterCredentials() {                                                            // 929\n    this.masterCredentials = AWS.config.credentials;                                                                   // 930\n    while (this.masterCredentials.masterCredentials) {                                                                 // 931\n      this.masterCredentials = this.masterCredentials.masterCredentials;                                               // 932\n    }                                                                                                                  // 933\n  },                                                                                                                   // 934\n                                                                                                                       // 935\n                                                                                                                       // 936\n  createClients: function() {                                                                                          // 937\n    this.service = this.service || new AWS.STS({params: this.params});                                                 // 938\n  }                                                                                                                    // 939\n                                                                                                                       // 940\n});                                                                                                                    // 941\n                                                                                                                       // 942\n},{\"../core\":4}],10:[function(require,module,exports){                                                                 // 943\nvar AWS = require('../core');                                                                                          // 944\n                                                                                                                       // 945\n                                                                                                                       // 946\nAWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {                                                       // 947\n                                                                                                                       // 948\n  constructor: function WebIdentityCredentials(params) {                                                               // 949\n    AWS.Credentials.call(this);                                                                                        // 950\n    this.expired = true;                                                                                               // 951\n    this.params = params;                                                                                              // 952\n    this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';                                       // 953\n    this.data = null;                                                                                                  // 954\n  },                                                                                                                   // 955\n                                                                                                                       // 956\n                                                                                                                       // 957\n  refresh: function refresh(callback) {                                                                                // 958\n    var self = this;                                                                                                   // 959\n    self.createClients();                                                                                              // 960\n    if (!callback) callback = function(err) { if (err) throw err; };                                                   // 961\n                                                                                                                       // 962\n    self.service.assumeRoleWithWebIdentity(function (err, data) {                                                      // 963\n      self.data = null;                                                                                                // 964\n      if (!err) {                                                                                                      // 965\n        self.data = data;                                                                                              // 966\n        self.service.credentialsFrom(data, self);                                                                      // 967\n      }                                                                                                                // 968\n      callback(err);                                                                                                   // 969\n    });                                                                                                                // 970\n  },                                                                                                                   // 971\n                                                                                                                       // 972\n                                                                                                                       // 973\n  createClients: function() {                                                                                          // 974\n    this.service = this.service || new AWS.STS({params: this.params});                                                 // 975\n  }                                                                                                                    // 976\n                                                                                                                       // 977\n});                                                                                                                    // 978\n                                                                                                                       // 979\n},{\"../core\":4}],11:[function(require,module,exports){                                                                 // 980\nvar util = require('../core').util;                                                                                    // 981\nvar typeOf = require('./types').typeOf;                                                                                // 982\nvar DynamoDBSet = require('./set');                                                                                    // 983\n                                                                                                                       // 984\nfunction convertInput(data) {                                                                                          // 985\n  if (typeOf(data) === 'Object') {                                                                                     // 986\n    var map = {M: {}};                                                                                                 // 987\n    for (var key in data) {                                                                                            // 988\n      map['M'][key] = convertInput(data[key]);                                                                         // 989\n    }                                                                                                                  // 990\n    return map;                                                                                                        // 991\n  } else if (typeOf(data) === 'Array') {                                                                               // 992\n    var list = {L: []};                                                                                                // 993\n    for (var i = 0; i < data.length; i++) {                                                                            // 994\n      list['L'].push(convertInput(data[i]));                                                                           // 995\n    }                                                                                                                  // 996\n    return list;                                                                                                       // 997\n  } else if (typeOf(data) === 'Set') {                                                                                 // 998\n    return formatSet(data);                                                                                            // 999\n  } else if (typeOf(data) === 'String') {                                                                              // 1000\n    return { 'S': data };                                                                                              // 1001\n  } else if (typeOf(data) === 'Number') {                                                                              // 1002\n    return { 'N': data.toString() };                                                                                   // 1003\n  } else if (typeOf(data) === 'Binary') {                                                                              // 1004\n    return { 'B': data };                                                                                              // 1005\n  } else if (typeOf(data) === 'Boolean') {                                                                             // 1006\n    return {'BOOL': data};                                                                                             // 1007\n  } else if (typeOf(data) === 'null') {                                                                                // 1008\n    return {'NULL': true};                                                                                             // 1009\n  }                                                                                                                    // 1010\n}                                                                                                                      // 1011\n                                                                                                                       // 1012\nfunction formatSet(data) {                                                                                             // 1013\n  var map = {};                                                                                                        // 1014\n  switch (data.type) {                                                                                                 // 1015\n    case 'String': map['SS'] = data.values; break;                                                                     // 1016\n    case 'Binary': map['BS'] = data.values; break;                                                                     // 1017\n    case 'Number': map['NS'] = data.values.map(function (value) {                                                      // 1018\n      return value.toString();                                                                                         // 1019\n    });                                                                                                                // 1020\n  }                                                                                                                    // 1021\n  return map;                                                                                                          // 1022\n}                                                                                                                      // 1023\n                                                                                                                       // 1024\nfunction convertOutput(data) {                                                                                         // 1025\n  var list, map, i;                                                                                                    // 1026\n  for (var type in data) {                                                                                             // 1027\n    var values = data[type];                                                                                           // 1028\n    if (type === 'M') {                                                                                                // 1029\n      map = {};                                                                                                        // 1030\n      for (var key in values) {                                                                                        // 1031\n        map[key] = convertOutput(values[key]);                                                                         // 1032\n      }                                                                                                                // 1033\n      return map;                                                                                                      // 1034\n    } else if (type === 'L') {                                                                                         // 1035\n      list = [];                                                                                                       // 1036\n      for (i = 0; i < values.length; i++) {                                                                            // 1037\n        list.push(convertOutput(values[i]));                                                                           // 1038\n      }                                                                                                                // 1039\n      return list;                                                                                                     // 1040\n    } else if (type === 'SS') {                                                                                        // 1041\n      list = [];                                                                                                       // 1042\n      for (i = 0; i < values.length; i++) {                                                                            // 1043\n        list.push(values[i] + '');                                                                                     // 1044\n      }                                                                                                                // 1045\n      return new DynamoDBSet(list);                                                                                    // 1046\n    } else if (type === 'NS') {                                                                                        // 1047\n      list = [];                                                                                                       // 1048\n      for (i = 0; i < values.length; i++) {                                                                            // 1049\n        list.push(Number(values[i]));                                                                                  // 1050\n      }                                                                                                                // 1051\n      return new DynamoDBSet(list);                                                                                    // 1052\n    } else if (type === 'BS') {                                                                                        // 1053\n      list = [];                                                                                                       // 1054\n      for (i = 0; i < values.length; i++) {                                                                            // 1055\n        list.push(new util.Buffer(values[i]));                                                                         // 1056\n      }                                                                                                                // 1057\n      return new DynamoDBSet(list);                                                                                    // 1058\n    } else if (type === 'S') {                                                                                         // 1059\n      return values + '';                                                                                              // 1060\n    } else if (type === 'N') {                                                                                         // 1061\n      return Number(values);                                                                                           // 1062\n    } else if (type === 'B') {                                                                                         // 1063\n      return new util.Buffer(values);                                                                                  // 1064\n    } else if (type === 'BOOL') {                                                                                      // 1065\n      return (values === 'true' || values === 'TRUE' || values === true);                                              // 1066\n    } else if (type === 'NULL') {                                                                                      // 1067\n      return null;                                                                                                     // 1068\n    }                                                                                                                  // 1069\n  }                                                                                                                    // 1070\n}                                                                                                                      // 1071\n                                                                                                                       // 1072\nmodule.exports = {                                                                                                     // 1073\n  input: convertInput,                                                                                                 // 1074\n  output: convertOutput                                                                                                // 1075\n};                                                                                                                     // 1076\n                                                                                                                       // 1077\n},{\"../core\":4,\"./set\":13,\"./types\":15}],12:[function(require,module,exports){                                         // 1078\nvar AWS = require('../core');                                                                                          // 1079\nvar Translator = require('./translator');                                                                              // 1080\nvar DynamoDBSet = require('./set');                                                                                    // 1081\n                                                                                                                       // 1082\n                                                                                                                       // 1083\nAWS.DynamoDB.DocumentClient = AWS.util.inherit({                                                                       // 1084\n                                                                                                                       // 1085\n                                                                                                                       // 1086\n  operations: {                                                                                                        // 1087\n    batchGetItem: 'batchGet',                                                                                          // 1088\n    batchWriteItem: 'batchWrite',                                                                                      // 1089\n    putItem: 'put',                                                                                                    // 1090\n    getItem: 'get',                                                                                                    // 1091\n    deleteItem: 'delete',                                                                                              // 1092\n    updateItem: 'update',                                                                                              // 1093\n    scan: 'scan',                                                                                                      // 1094\n    query: 'query'                                                                                                     // 1095\n  },                                                                                                                   // 1096\n                                                                                                                       // 1097\n                                                                                                                       // 1098\n  constructor: function DocumentClient(options) {                                                                      // 1099\n    var self = this;                                                                                                   // 1100\n    self.options = options || {};                                                                                      // 1101\n    self.configure(self.options);                                                                                      // 1102\n  },                                                                                                                   // 1103\n                                                                                                                       // 1104\n                                                                                                                       // 1105\n  configure: function configure(options) {                                                                             // 1106\n    var self = this;                                                                                                   // 1107\n    self.service = options.service;                                                                                    // 1108\n    self.bindServiceObject(options);                                                                                   // 1109\n    self.attrValue =                                                                                                   // 1110\n      self.service.api.operations.putItem.input.members.Item.value.shape;                                              // 1111\n  },                                                                                                                   // 1112\n                                                                                                                       // 1113\n                                                                                                                       // 1114\n  bindServiceObject: function bindServiceObject(options) {                                                             // 1115\n    var self = this;                                                                                                   // 1116\n    options = options || {};                                                                                           // 1117\n                                                                                                                       // 1118\n    if (!self.service) {                                                                                               // 1119\n      self.service = new AWS.DynamoDB(options);                                                                        // 1120\n    } else {                                                                                                           // 1121\n      var config = AWS.util.copy(self.service.config);                                                                 // 1122\n      self.service = new self.service.constructor.__super__(config);                                                   // 1123\n      self.service.config.params =                                                                                     // 1124\n        AWS.util.merge(self.service.config.params || {}, options.params);                                              // 1125\n    }                                                                                                                  // 1126\n  },                                                                                                                   // 1127\n                                                                                                                       // 1128\n                                                                                                                       // 1129\n  batchGet: function(params, callback) {                                                                               // 1130\n    var self = this;                                                                                                   // 1131\n    var request = self.service.batchGetItem(params);                                                                   // 1132\n    self.setupRequest(request);                                                                                        // 1133\n    self.setupResponse(request);                                                                                       // 1134\n    if (typeof callback === 'function') {                                                                              // 1135\n      request.send(callback);                                                                                          // 1136\n    }                                                                                                                  // 1137\n    return request;                                                                                                    // 1138\n  },                                                                                                                   // 1139\n                                                                                                                       // 1140\n                                                                                                                       // 1141\n  batchWrite: function(params, callback) {                                                                             // 1142\n    var self = this;                                                                                                   // 1143\n    var request = self.service.batchWriteItem(params);                                                                 // 1144\n    self.setupRequest(request);                                                                                        // 1145\n    self.setupResponse(request);                                                                                       // 1146\n    if (typeof callback === 'function') {                                                                              // 1147\n      request.send(callback);                                                                                          // 1148\n    }                                                                                                                  // 1149\n    return request;                                                                                                    // 1150\n  },                                                                                                                   // 1151\n                                                                                                                       // 1152\n                                                                                                                       // 1153\n  delete: function(params, callback) {                                                                                 // 1154\n    var self = this;                                                                                                   // 1155\n    var request = self.service.deleteItem(params);                                                                     // 1156\n    self.setupRequest(request);                                                                                        // 1157\n    self.setupResponse(request);                                                                                       // 1158\n    if (typeof callback === 'function') {                                                                              // 1159\n      request.send(callback);                                                                                          // 1160\n    }                                                                                                                  // 1161\n    return request;                                                                                                    // 1162\n  },                                                                                                                   // 1163\n                                                                                                                       // 1164\n                                                                                                                       // 1165\n  get: function(params, callback) {                                                                                    // 1166\n    var self = this;                                                                                                   // 1167\n    var request = self.service.getItem(params);                                                                        // 1168\n    self.setupRequest(request);                                                                                        // 1169\n    self.setupResponse(request);                                                                                       // 1170\n    if (typeof callback === 'function') {                                                                              // 1171\n      request.send(callback);                                                                                          // 1172\n    }                                                                                                                  // 1173\n    return request;                                                                                                    // 1174\n  },                                                                                                                   // 1175\n                                                                                                                       // 1176\n                                                                                                                       // 1177\n  put: function put(params, callback) {                                                                                // 1178\n    var self = this;                                                                                                   // 1179\n    var request = self.service.putItem(params);                                                                        // 1180\n    self.setupRequest(request);                                                                                        // 1181\n    self.setupResponse(request);                                                                                       // 1182\n    if (typeof callback === 'function') {                                                                              // 1183\n      request.send(callback);                                                                                          // 1184\n    }                                                                                                                  // 1185\n    return request;                                                                                                    // 1186\n  },                                                                                                                   // 1187\n                                                                                                                       // 1188\n                                                                                                                       // 1189\n  update: function(params, callback) {                                                                                 // 1190\n    var self = this;                                                                                                   // 1191\n    var request = self.service.updateItem(params);                                                                     // 1192\n    self.setupRequest(request);                                                                                        // 1193\n    self.setupResponse(request);                                                                                       // 1194\n    if (typeof callback === 'function') {                                                                              // 1195\n      request.send(callback);                                                                                          // 1196\n    }                                                                                                                  // 1197\n    return request;                                                                                                    // 1198\n  },                                                                                                                   // 1199\n                                                                                                                       // 1200\n                                                                                                                       // 1201\n  scan: function(params, callback) {                                                                                   // 1202\n    var self = this;                                                                                                   // 1203\n    var request = self.service.scan(params);                                                                           // 1204\n    self.setupRequest(request);                                                                                        // 1205\n    self.setupResponse(request);                                                                                       // 1206\n    if (typeof callback === 'function') {                                                                              // 1207\n      request.send(callback);                                                                                          // 1208\n    }                                                                                                                  // 1209\n    return request;                                                                                                    // 1210\n  },                                                                                                                   // 1211\n                                                                                                                       // 1212\n                                                                                                                       // 1213\n  query: function(params, callback) {                                                                                  // 1214\n    var self = this;                                                                                                   // 1215\n    var request = self.service.query(params);                                                                          // 1216\n    self.setupRequest(request);                                                                                        // 1217\n    self.setupResponse(request);                                                                                       // 1218\n    if (typeof callback === 'function') {                                                                              // 1219\n      request.send(callback);                                                                                          // 1220\n    }                                                                                                                  // 1221\n    return request;                                                                                                    // 1222\n  },                                                                                                                   // 1223\n                                                                                                                       // 1224\n                                                                                                                       // 1225\n  createSet: function(list, options) {                                                                                 // 1226\n    options = options || {};                                                                                           // 1227\n    return new DynamoDBSet(list, options);                                                                             // 1228\n  },                                                                                                                   // 1229\n                                                                                                                       // 1230\n                                                                                                                       // 1231\n  getTranslator: function() {                                                                                          // 1232\n    return new Translator({attrValue: this.attrValue});                                                                // 1233\n  },                                                                                                                   // 1234\n                                                                                                                       // 1235\n                                                                                                                       // 1236\n  setupRequest: function setupRequest(request) {                                                                       // 1237\n    var self = this;                                                                                                   // 1238\n    var translator = self.getTranslator();                                                                             // 1239\n    var operation = request.operation;                                                                                 // 1240\n    var inputShape = request.service.api.operations[operation].input;                                                  // 1241\n    request._events.validate.unshift(function(req) {                                                                   // 1242\n      req.rawParams = AWS.util.copy(req.params);                                                                       // 1243\n      req.params = translator.translateInput(req.rawParams, inputShape);                                               // 1244\n    });                                                                                                                // 1245\n  },                                                                                                                   // 1246\n                                                                                                                       // 1247\n                                                                                                                       // 1248\n  setupResponse: function setupResponse(request) {                                                                     // 1249\n    var self = this;                                                                                                   // 1250\n    var translator = self.getTranslator();                                                                             // 1251\n    var outputShape = self.service.api.operations[request.operation].output;                                           // 1252\n    request.on('extractData', function(response) {                                                                     // 1253\n      response.data = translator.translateOutput(response.data, outputShape);                                          // 1254\n    });                                                                                                                // 1255\n                                                                                                                       // 1256\n    var response = request.response;                                                                                   // 1257\n    response.nextPage = function(cb) {                                                                                 // 1258\n      var resp = this;                                                                                                 // 1259\n      var req = resp.request;                                                                                          // 1260\n      var config;                                                                                                      // 1261\n      var service = req.service;                                                                                       // 1262\n      var operation = req.operation;                                                                                   // 1263\n      try {                                                                                                            // 1264\n        config = service.paginationConfig(operation, true);                                                            // 1265\n      } catch (e) { resp.error = e; }                                                                                  // 1266\n                                                                                                                       // 1267\n      if (!resp.hasNextPage()) {                                                                                       // 1268\n        if (cb) cb(resp.error, null);                                                                                  // 1269\n        else if (resp.error) throw resp.error;                                                                         // 1270\n        return null;                                                                                                   // 1271\n      }                                                                                                                // 1272\n                                                                                                                       // 1273\n      var params = AWS.util.copy(req.rawParams);                                                                       // 1274\n      if (!resp.nextPageTokens) {                                                                                      // 1275\n        return cb ? cb(null, null) : null;                                                                             // 1276\n      } else {                                                                                                         // 1277\n        var inputTokens = config.inputToken;                                                                           // 1278\n        if (typeof inputTokens === 'string') inputTokens = [inputTokens];                                              // 1279\n        for (var i = 0; i < inputTokens.length; i++) {                                                                 // 1280\n          params[inputTokens[i]] = resp.nextPageTokens[i];                                                             // 1281\n        }                                                                                                              // 1282\n        return self[operation](params, cb);                                                                            // 1283\n      }                                                                                                                // 1284\n    };                                                                                                                 // 1285\n  }                                                                                                                    // 1286\n                                                                                                                       // 1287\n});                                                                                                                    // 1288\n                                                                                                                       // 1289\nmodule.exports = AWS.DynamoDB.DocumentClient;                                                                          // 1290\n                                                                                                                       // 1291\n},{\"../core\":4,\"./set\":13,\"./translator\":14}],13:[function(require,module,exports){                                    // 1292\nvar util = require('../core').util;                                                                                    // 1293\nvar typeOf = require('./types').typeOf;                                                                                // 1294\n                                                                                                                       // 1295\nvar DynamoDBSet = util.inherit({                                                                                       // 1296\n                                                                                                                       // 1297\n  constructor: function Set(list, options) {                                                                           // 1298\n    options = options || {};                                                                                           // 1299\n    this.initialize(list, options.validate);                                                                           // 1300\n  },                                                                                                                   // 1301\n                                                                                                                       // 1302\n  initialize: function(list, validate) {                                                                               // 1303\n    var self = this;                                                                                                   // 1304\n    self.values = [].concat(list);                                                                                     // 1305\n    self.detectType();                                                                                                 // 1306\n    if (validate) {                                                                                                    // 1307\n      self.validate();                                                                                                 // 1308\n    }                                                                                                                  // 1309\n  },                                                                                                                   // 1310\n                                                                                                                       // 1311\n  detectType: function() {                                                                                             // 1312\n    var self = this;                                                                                                   // 1313\n    var value = self.values[0];                                                                                        // 1314\n    if (typeOf(value) === 'String') {                                                                                  // 1315\n      self.type = 'String';                                                                                            // 1316\n    } else if (typeOf(value) === 'Number') {                                                                           // 1317\n      self.type = 'Number';                                                                                            // 1318\n    } else if (typeOf(value) === 'Binary') {                                                                           // 1319\n      self.type = 'Binary';                                                                                            // 1320\n    } else {                                                                                                           // 1321\n      throw util.error(new Error(), {                                                                                  // 1322\n        code: 'InvalidSetType',                                                                                        // 1323\n        message: 'Sets can contain string, number, or binary values'                                                   // 1324\n      });                                                                                                              // 1325\n    }                                                                                                                  // 1326\n  },                                                                                                                   // 1327\n                                                                                                                       // 1328\n  validate: function() {                                                                                               // 1329\n    var self = this;                                                                                                   // 1330\n    var length = self.values.length;                                                                                   // 1331\n    var values = self.values;                                                                                          // 1332\n    for (var i = 0; i < length; i++) {                                                                                 // 1333\n      if (typeOf(values[i]) !== self.type) {                                                                           // 1334\n        throw util.error(new Error(), {                                                                                // 1335\n          code: 'InvalidType',                                                                                         // 1336\n          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'                                         // 1337\n        });                                                                                                            // 1338\n      }                                                                                                                // 1339\n    }                                                                                                                  // 1340\n  }                                                                                                                    // 1341\n                                                                                                                       // 1342\n});                                                                                                                    // 1343\n                                                                                                                       // 1344\nmodule.exports = DynamoDBSet;                                                                                          // 1345\n                                                                                                                       // 1346\n},{\"../core\":4,\"./types\":15}],14:[function(require,module,exports){                                                    // 1347\nvar util = require('../core').util;                                                                                    // 1348\nvar convert = require('./converter');                                                                                  // 1349\n                                                                                                                       // 1350\nvar Translator = function(options) {                                                                                   // 1351\n  options = options || {};                                                                                             // 1352\n  this.attrValue = options.attrValue;                                                                                  // 1353\n};                                                                                                                     // 1354\n                                                                                                                       // 1355\nTranslator.prototype.translateInput = function(value, shape) {                                                         // 1356\n  this.mode = 'input';                                                                                                 // 1357\n  return this.translate(value, shape);                                                                                 // 1358\n};                                                                                                                     // 1359\n                                                                                                                       // 1360\nTranslator.prototype.translateOutput = function(value, shape) {                                                        // 1361\n  this.mode = 'output';                                                                                                // 1362\n  return this.translate(value, shape);                                                                                 // 1363\n};                                                                                                                     // 1364\n                                                                                                                       // 1365\nTranslator.prototype.translate = function(value, shape) {                                                              // 1366\n  var self = this;                                                                                                     // 1367\n  if (!shape || value === undefined) return undefined;                                                                 // 1368\n                                                                                                                       // 1369\n  if (shape.shape === self.attrValue) {                                                                                // 1370\n    return convert[self.mode](value);                                                                                  // 1371\n  }                                                                                                                    // 1372\n  switch (shape.type) {                                                                                                // 1373\n    case 'structure': return self.translateStructure(value, shape);                                                    // 1374\n    case 'map': return self.translateMap(value, shape);                                                                // 1375\n    case 'list': return self.translateList(value, shape);                                                              // 1376\n    default: return self.translateScalar(value, shape);                                                                // 1377\n  }                                                                                                                    // 1378\n};                                                                                                                     // 1379\n                                                                                                                       // 1380\nTranslator.prototype.translateStructure = function(structure, shape) {                                                 // 1381\n  var self = this;                                                                                                     // 1382\n  if (structure == null) return undefined;                                                                             // 1383\n                                                                                                                       // 1384\n  var struct = {};                                                                                                     // 1385\n  util.each(structure, function(name, value) {                                                                         // 1386\n    var memberShape = shape.members[name];                                                                             // 1387\n    if (memberShape) {                                                                                                 // 1388\n      var result = self.translate(value, memberShape);                                                                 // 1389\n      if (result !== undefined) struct[name] = result;                                                                 // 1390\n    }                                                                                                                  // 1391\n  });                                                                                                                  // 1392\n  return struct;                                                                                                       // 1393\n};                                                                                                                     // 1394\n                                                                                                                       // 1395\nTranslator.prototype.translateList = function(list, shape) {                                                           // 1396\n  var self = this;                                                                                                     // 1397\n  if (list == null) return undefined;                                                                                  // 1398\n                                                                                                                       // 1399\n  var out = [];                                                                                                        // 1400\n  util.arrayEach(list, function(value) {                                                                               // 1401\n    var result = self.translate(value, shape.member);                                                                  // 1402\n    if (result === undefined) out.push(null);                                                                          // 1403\n    else out.push(result);                                                                                             // 1404\n  });                                                                                                                  // 1405\n  return out;                                                                                                          // 1406\n};                                                                                                                     // 1407\n                                                                                                                       // 1408\nTranslator.prototype.translateMap = function(map, shape) {                                                             // 1409\n  var self = this;                                                                                                     // 1410\n  if (map == null) return undefined;                                                                                   // 1411\n                                                                                                                       // 1412\n  var out = {};                                                                                                        // 1413\n  util.each(map, function(key, value) {                                                                                // 1414\n    var result = self.translate(value, shape.value);                                                                   // 1415\n    if (result === undefined) out[key] = null;                                                                         // 1416\n    else out[key] = result;                                                                                            // 1417\n  });                                                                                                                  // 1418\n  return out;                                                                                                          // 1419\n};                                                                                                                     // 1420\n                                                                                                                       // 1421\nTranslator.prototype.translateScalar = function(value, shape) {                                                        // 1422\n  return shape.toType(value);                                                                                          // 1423\n};                                                                                                                     // 1424\n                                                                                                                       // 1425\nmodule.exports = Translator;                                                                                           // 1426\n                                                                                                                       // 1427\n},{\"../core\":4,\"./converter\":11}],15:[function(require,module,exports){                                                // 1428\nvar util = require('../core').util;                                                                                    // 1429\n                                                                                                                       // 1430\nfunction typeOf(data) {                                                                                                // 1431\n  if (data === null && typeof data === 'object') {                                                                     // 1432\n    return 'null';                                                                                                     // 1433\n  } else if (data !== undefined && isBinary(data)) {                                                                   // 1434\n    return 'Binary';                                                                                                   // 1435\n  } else if (data !== undefined && data.constructor) {                                                                 // 1436\n    return util.typeName(data.constructor);                                                                            // 1437\n  } else {                                                                                                             // 1438\n    return 'undefined';                                                                                                // 1439\n  }                                                                                                                    // 1440\n}                                                                                                                      // 1441\n                                                                                                                       // 1442\nfunction isBinary(data) {                                                                                              // 1443\n  var types = [                                                                                                        // 1444\n    'Buffer', 'File', 'Blob', 'ArrayBuffer', 'DataView',                                                               // 1445\n    'Int8Array', 'Uint8Array', 'Uint8ClampedArray',                                                                    // 1446\n    'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array',                                                          // 1447\n    'Float32Array', 'Float64Array'                                                                                     // 1448\n  ];                                                                                                                   // 1449\n  if (util.isNode()) {                                                                                                 // 1450\n    var Stream = util.nodeRequire('stream').Stream;                                                                    // 1451\n    if (util.Buffer.isBuffer(data) || data instanceof Stream)                                                          // 1452\n      return true;                                                                                                     // 1453\n  } else {                                                                                                             // 1454\n    for (var i = 0; i < types.length; i++) {                                                                           // 1455\n      if (data !== undefined && data.constructor) {                                                                    // 1456\n        if (util.isType(data, types[i])) return true;                                                                  // 1457\n        if (util.typeName(data.constructor) === types[i]) return true;                                                 // 1458\n      }                                                                                                                // 1459\n    }                                                                                                                  // 1460\n  }                                                                                                                    // 1461\n  return false;                                                                                                        // 1462\n}                                                                                                                      // 1463\n                                                                                                                       // 1464\nmodule.exports = {                                                                                                     // 1465\n  typeOf: typeOf,                                                                                                      // 1466\n  isBinary: isBinary                                                                                                   // 1467\n};                                                                                                                     // 1468\n                                                                                                                       // 1469\n},{\"../core\":4}],16:[function(require,module,exports){                                                                 // 1470\nvar AWS = require('./core');                                                                                           // 1471\nvar SequentialExecutor = require('./sequential_executor');                                                             // 1472\n                                                                                                                       // 1473\n                                                                                                                       // 1474\nAWS.EventListeners = {                                                                                                 // 1475\n                                                                                                                       // 1476\n  Core: {} /* doc hack */                                                                                              // 1477\n};                                                                                                                     // 1478\n                                                                                                                       // 1479\nAWS.EventListeners = {                                                                                                 // 1480\n  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {                                           // 1481\n    addAsync('VALIDATE_CREDENTIALS', 'validate',                                                                       // 1482\n        function VALIDATE_CREDENTIALS(req, done) {                                                                     // 1483\n      if (!req.service.api.signatureVersion) return done(); // none                                                    // 1484\n      req.service.config.getCredentials(function(err) {                                                                // 1485\n        if (err) {                                                                                                     // 1486\n          req.response.error = AWS.util.error(err,                                                                     // 1487\n            {code: 'CredentialsError', message: 'Missing credentials in config'});                                     // 1488\n        }                                                                                                              // 1489\n        done();                                                                                                        // 1490\n      });                                                                                                              // 1491\n    });                                                                                                                // 1492\n                                                                                                                       // 1493\n    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {                                                 // 1494\n      if (!req.service.config.region && !req.service.isGlobalEndpoint) {                                               // 1495\n        req.response.error = AWS.util.error(new Error(),                                                               // 1496\n          {code: 'ConfigError', message: 'Missing region in config'});                                                 // 1497\n      }                                                                                                                // 1498\n    });                                                                                                                // 1499\n                                                                                                                       // 1500\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {                                         // 1501\n      var rules = req.service.api.operations[req.operation].input;                                                     // 1502\n      var validation = req.service.config.paramValidation;                                                             // 1503\n      new AWS.ParamValidator(validation).validate(rules, req.params);                                                  // 1504\n    });                                                                                                                // 1505\n                                                                                                                       // 1506\n    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {                                      // 1507\n      req.haltHandlersOnError();                                                                                       // 1508\n      if (!req.service.api.signatureVersion) return done(); // none                                                    // 1509\n      if (req.service.getSignerClass(req) === AWS.Signers.V4) {                                                        // 1510\n        var body = req.httpRequest.body || '';                                                                         // 1511\n        AWS.util.computeSha256(body, function(err, sha) {                                                              // 1512\n          if (err) {                                                                                                   // 1513\n            done(err);                                                                                                 // 1514\n          }                                                                                                            // 1515\n          else {                                                                                                       // 1516\n            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;                                                     // 1517\n            done();                                                                                                    // 1518\n          }                                                                                                            // 1519\n        });                                                                                                            // 1520\n      } else {                                                                                                         // 1521\n        done();                                                                                                        // 1522\n      }                                                                                                                // 1523\n    });                                                                                                                // 1524\n                                                                                                                       // 1525\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {                                         // 1526\n      if (req.httpRequest.headers['Content-Length'] === undefined) {                                                   // 1527\n        var length = AWS.util.string.byteLength(req.httpRequest.body);                                                 // 1528\n        req.httpRequest.headers['Content-Length'] = length;                                                            // 1529\n      }                                                                                                                // 1530\n    });                                                                                                                // 1531\n                                                                                                                       // 1532\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {                                                   // 1533\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;                                                 // 1534\n    });                                                                                                                // 1535\n                                                                                                                       // 1536\n    add('RESTART', 'restart', function RESTART() {                                                                     // 1537\n      var err = this.response.error;                                                                                   // 1538\n      if (!err || !err.retryable) return;                                                                              // 1539\n                                                                                                                       // 1540\n      this.httpRequest = new AWS.HttpRequest(                                                                          // 1541\n        this.service.endpoint,                                                                                         // 1542\n        this.service.region                                                                                            // 1543\n      );                                                                                                               // 1544\n                                                                                                                       // 1545\n      if (this.response.retryCount < this.service.config.maxRetries) {                                                 // 1546\n        this.response.retryCount++;                                                                                    // 1547\n      } else {                                                                                                         // 1548\n        this.response.error = null;                                                                                    // 1549\n      }                                                                                                                // 1550\n    });                                                                                                                // 1551\n                                                                                                                       // 1552\n    addAsync('SIGN', 'sign', function SIGN(req, done) {                                                                // 1553\n      if (!req.service.api.signatureVersion) return done(); // none                                                    // 1554\n                                                                                                                       // 1555\n      req.service.config.getCredentials(function (err, credentials) {                                                  // 1556\n        if (err) {                                                                                                     // 1557\n          req.response.error = err;                                                                                    // 1558\n          return done();                                                                                               // 1559\n        }                                                                                                              // 1560\n                                                                                                                       // 1561\n        try {                                                                                                          // 1562\n          var date = AWS.util.date.getDate();                                                                          // 1563\n          var SignerClass = req.service.getSignerClass(req);                                                           // 1564\n          var signer = new SignerClass(req.httpRequest,                                                                // 1565\n            req.service.api.signingName || req.service.api.endpointPrefix,                                             // 1566\n            req.service.config.signatureCache);                                                                        // 1567\n                                                                                                                       // 1568\n          delete req.httpRequest.headers['Authorization'];                                                             // 1569\n          delete req.httpRequest.headers['Date'];                                                                      // 1570\n          delete req.httpRequest.headers['X-Amz-Date'];                                                                // 1571\n                                                                                                                       // 1572\n          signer.addAuthorization(credentials, date);                                                                  // 1573\n          req.signedAt = date;                                                                                         // 1574\n        } catch (e) {                                                                                                  // 1575\n          req.response.error = e;                                                                                      // 1576\n        }                                                                                                              // 1577\n        done();                                                                                                        // 1578\n      });                                                                                                              // 1579\n    });                                                                                                                // 1580\n                                                                                                                       // 1581\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {                                    // 1582\n      if (this.service.successfulResponse(resp, this)) {                                                               // 1583\n        resp.data = {};                                                                                                // 1584\n        resp.error = null;                                                                                             // 1585\n      } else {                                                                                                         // 1586\n        resp.data = null;                                                                                              // 1587\n        resp.error = AWS.util.error(new Error(),                                                                       // 1588\n          {code: 'UnknownError', message: 'An unknown error occurred.'});                                              // 1589\n      }                                                                                                                // 1590\n    });                                                                                                                // 1591\n                                                                                                                       // 1592\n    addAsync('SEND', 'send', function SEND(resp, done) {                                                               // 1593\n      resp.httpResponse._abortCallback = done;                                                                         // 1594\n      resp.error = null;                                                                                               // 1595\n      resp.data = null;                                                                                                // 1596\n                                                                                                                       // 1597\n      function callback(httpResp) {                                                                                    // 1598\n        resp.httpResponse.stream = httpResp;                                                                           // 1599\n                                                                                                                       // 1600\n        httpResp.on('headers', function onHeaders(statusCode, headers) {                                               // 1601\n          resp.request.emit('httpHeaders', [statusCode, headers, resp]);                                               // 1602\n                                                                                                                       // 1603\n          if (!resp.httpResponse.streaming) {                                                                          // 1604\n            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check                                        // 1605\n              httpResp.on('readable', function onReadable() {                                                          // 1606\n                var data = httpResp.read();                                                                            // 1607\n                if (data !== null) {                                                                                   // 1608\n                  resp.request.emit('httpData', [data, resp]);                                                         // 1609\n                }                                                                                                      // 1610\n              });                                                                                                      // 1611\n            } else { // legacy streams API                                                                             // 1612\n              httpResp.on('data', function onData(data) {                                                              // 1613\n                resp.request.emit('httpData', [data, resp]);                                                           // 1614\n              });                                                                                                      // 1615\n            }                                                                                                          // 1616\n          }                                                                                                            // 1617\n        });                                                                                                            // 1618\n                                                                                                                       // 1619\n        httpResp.on('end', function onEnd() {                                                                          // 1620\n          resp.request.emit('httpDone');                                                                               // 1621\n          done();                                                                                                      // 1622\n        });                                                                                                            // 1623\n      }                                                                                                                // 1624\n                                                                                                                       // 1625\n      function progress(httpResp) {                                                                                    // 1626\n        httpResp.on('sendProgress', function onSendProgress(value) {                                                   // 1627\n          resp.request.emit('httpUploadProgress', [value, resp]);                                                      // 1628\n        });                                                                                                            // 1629\n                                                                                                                       // 1630\n        httpResp.on('receiveProgress', function onReceiveProgress(value) {                                             // 1631\n          resp.request.emit('httpDownloadProgress', [value, resp]);                                                    // 1632\n        });                                                                                                            // 1633\n      }                                                                                                                // 1634\n                                                                                                                       // 1635\n      function error(err) {                                                                                            // 1636\n        resp.error = AWS.util.error(err, {                                                                             // 1637\n          code: 'NetworkingError',                                                                                     // 1638\n          region: resp.request.httpRequest.region,                                                                     // 1639\n          hostname: resp.request.httpRequest.endpoint.hostname,                                                        // 1640\n          retryable: true                                                                                              // 1641\n        });                                                                                                            // 1642\n        resp.request.emit('httpError', [resp.error, resp], function() {                                                // 1643\n          done();                                                                                                      // 1644\n        });                                                                                                            // 1645\n      }                                                                                                                // 1646\n                                                                                                                       // 1647\n      function executeSend() {                                                                                         // 1648\n        var http = AWS.HttpClient.getInstance();                                                                       // 1649\n        var httpOptions = resp.request.service.config.httpOptions || {};                                               // 1650\n        try {                                                                                                          // 1651\n          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,                                       // 1652\n                                          callback, error);                                                            // 1653\n          progress(stream);                                                                                            // 1654\n        } catch (err) {                                                                                                // 1655\n          error(err);                                                                                                  // 1656\n        }                                                                                                              // 1657\n      }                                                                                                                // 1658\n                                                                                                                       // 1659\n      var timeDiff = (AWS.util.date.getDate() - this.signedAt) / 1000;                                                 // 1660\n      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign                                                    // 1661\n        this.emit('sign', [this], function(err) {                                                                      // 1662\n          if (err) done(err);                                                                                          // 1663\n          else executeSend();                                                                                          // 1664\n        });                                                                                                            // 1665\n      } else {                                                                                                         // 1666\n        executeSend();                                                                                                 // 1667\n      }                                                                                                                // 1668\n    });                                                                                                                // 1669\n                                                                                                                       // 1670\n    add('HTTP_HEADERS', 'httpHeaders',                                                                                 // 1671\n        function HTTP_HEADERS(statusCode, headers, resp) {                                                             // 1672\n      resp.httpResponse.statusCode = statusCode;                                                                       // 1673\n      resp.httpResponse.headers = headers;                                                                             // 1674\n      resp.httpResponse.body = new AWS.util.Buffer('');                                                                // 1675\n      resp.httpResponse.buffers = [];                                                                                  // 1676\n      resp.httpResponse.numBytes = 0;                                                                                  // 1677\n      var dateHeader = headers.date || headers.Date;                                                                   // 1678\n      if (dateHeader) {                                                                                                // 1679\n        var serverTime = Date.parse(dateHeader);                                                                       // 1680\n        if (resp.request.service.config.correctClockSkew                                                               // 1681\n            && AWS.util.isClockSkewed(serverTime)) {                                                                   // 1682\n          AWS.util.applyClockOffset(serverTime);                                                                       // 1683\n        }                                                                                                              // 1684\n      }                                                                                                                // 1685\n    });                                                                                                                // 1686\n                                                                                                                       // 1687\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {                                                     // 1688\n      if (chunk) {                                                                                                     // 1689\n        if (AWS.util.isNode()) {                                                                                       // 1690\n          resp.httpResponse.numBytes += chunk.length;                                                                  // 1691\n                                                                                                                       // 1692\n          var total = resp.httpResponse.headers['content-length'];                                                     // 1693\n          var progress = { loaded: resp.httpResponse.numBytes, total: total };                                         // 1694\n          resp.request.emit('httpDownloadProgress', [progress, resp]);                                                 // 1695\n        }                                                                                                              // 1696\n                                                                                                                       // 1697\n        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));                                                    // 1698\n      }                                                                                                                // 1699\n    });                                                                                                                // 1700\n                                                                                                                       // 1701\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {                                                            // 1702\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {                                         // 1703\n        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);                                                  // 1704\n        resp.httpResponse.body = body;                                                                                 // 1705\n      }                                                                                                                // 1706\n      delete resp.httpResponse.numBytes;                                                                               // 1707\n      delete resp.httpResponse.buffers;                                                                                // 1708\n    });                                                                                                                // 1709\n                                                                                                                       // 1710\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {                                                     // 1711\n      if (resp.httpResponse.statusCode) {                                                                              // 1712\n        resp.error.statusCode = resp.httpResponse.statusCode;                                                          // 1713\n        if (resp.error.retryable === undefined) {                                                                      // 1714\n          resp.error.retryable = this.service.retryableError(resp.error, this);                                        // 1715\n        }                                                                                                              // 1716\n      }                                                                                                                // 1717\n    });                                                                                                                // 1718\n                                                                                                                       // 1719\n    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {                                     // 1720\n      if (!resp.error) return;                                                                                         // 1721\n      switch (resp.error.code) {                                                                                       // 1722\n        case 'RequestExpired': // EC2 only                                                                             // 1723\n        case 'ExpiredTokenException':                                                                                  // 1724\n        case 'ExpiredToken':                                                                                           // 1725\n          resp.error.retryable = true;                                                                                 // 1726\n          resp.request.service.config.credentials.expired = true;                                                      // 1727\n      }                                                                                                                // 1728\n    });                                                                                                                // 1729\n                                                                                                                       // 1730\n    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {                                               // 1731\n      var err = resp.error;                                                                                            // 1732\n      if (!err) return;                                                                                                // 1733\n      if (typeof err.code === 'string' && typeof err.message === 'string') {                                           // 1734\n        if (err.code.match(/Signature/) && err.message.match(/expired/)) {                                             // 1735\n          resp.error.retryable = true;                                                                                 // 1736\n        }                                                                                                              // 1737\n      }                                                                                                                // 1738\n    });                                                                                                                // 1739\n                                                                                                                       // 1740\n    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {                                                         // 1741\n      if (!resp.error) return;                                                                                         // 1742\n      if (this.service.clockSkewError(resp.error)                                                                      // 1743\n          && this.service.config.correctClockSkew                                                                      // 1744\n          && AWS.config.isClockSkewed) {                                                                               // 1745\n        resp.error.retryable = true;                                                                                   // 1746\n      }                                                                                                                // 1747\n    });                                                                                                                // 1748\n                                                                                                                       // 1749\n    add('REDIRECT', 'retry', function REDIRECT(resp) {                                                                 // 1750\n      if (resp.error && resp.error.statusCode >= 300 &&                                                                // 1751\n          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {                                      // 1752\n        this.httpRequest.endpoint =                                                                                    // 1753\n          new AWS.Endpoint(resp.httpResponse.headers['location']);                                                     // 1754\n        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;                                             // 1755\n        resp.error.redirect = true;                                                                                    // 1756\n        resp.error.retryable = true;                                                                                   // 1757\n      }                                                                                                                // 1758\n    });                                                                                                                // 1759\n                                                                                                                       // 1760\n    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {                                                           // 1761\n      if (resp.error) {                                                                                                // 1762\n        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {                                           // 1763\n          resp.error.retryDelay = 0;                                                                                   // 1764\n        } else if (resp.retryCount < resp.maxRetries) {                                                                // 1765\n          resp.error.retryDelay = this.service.retryDelays(resp.retryCount) || 0;                                      // 1766\n        }                                                                                                              // 1767\n      }                                                                                                                // 1768\n    });                                                                                                                // 1769\n                                                                                                                       // 1770\n    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {                               // 1771\n      var delay, willRetry = false;                                                                                    // 1772\n                                                                                                                       // 1773\n      if (resp.error) {                                                                                                // 1774\n        delay = resp.error.retryDelay || 0;                                                                            // 1775\n        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {                                               // 1776\n          resp.retryCount++;                                                                                           // 1777\n          willRetry = true;                                                                                            // 1778\n        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {                                    // 1779\n          resp.redirectCount++;                                                                                        // 1780\n          willRetry = true;                                                                                            // 1781\n        }                                                                                                              // 1782\n      }                                                                                                                // 1783\n                                                                                                                       // 1784\n      if (willRetry) {                                                                                                 // 1785\n        resp.error = null;                                                                                             // 1786\n        setTimeout(done, delay);                                                                                       // 1787\n      } else {                                                                                                         // 1788\n        done();                                                                                                        // 1789\n      }                                                                                                                // 1790\n    });                                                                                                                // 1791\n  }),                                                                                                                  // 1792\n                                                                                                                       // 1793\n  CorePost: new SequentialExecutor().addNamedListeners(function(add) {                                                 // 1794\n    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);                                               // 1795\n    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);                                              // 1796\n                                                                                                                       // 1797\n    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {                                                // 1798\n      if (err.code === 'NetworkingError' && err.errno === 'ENOTFOUND') {                                               // 1799\n        var message = 'Inaccessible host: `' + err.hostname +                                                          // 1800\n          '\\'. This service may not be available in the `' + err.region +                                              // 1801\n          '\\' region.';                                                                                                // 1802\n        this.response.error = AWS.util.error(new Error(message), {                                                     // 1803\n          code: 'UnknownEndpoint',                                                                                     // 1804\n          region: err.region,                                                                                          // 1805\n          hostname: err.hostname,                                                                                      // 1806\n          retryable: true,                                                                                             // 1807\n          originalError: err                                                                                           // 1808\n        });                                                                                                            // 1809\n      }                                                                                                                // 1810\n    });                                                                                                                // 1811\n  }),                                                                                                                  // 1812\n                                                                                                                       // 1813\n  Logger: new SequentialExecutor().addNamedListeners(function(add) {                                                   // 1814\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {                                                        // 1815\n      var req = resp.request;                                                                                          // 1816\n      var logger = req.service.config.logger;                                                                          // 1817\n      if (!logger) return;                                                                                             // 1818\n                                                                                                                       // 1819\n      function buildMessage() {                                                                                        // 1820\n        var time = AWS.util.date.getDate().getTime();                                                                  // 1821\n        var delta = (time - req.startTime.getTime()) / 1000;                                                           // 1822\n        var ansi = logger.isTTY ? true : false;                                                                        // 1823\n        var status = resp.httpResponse.statusCode;                                                                     // 1824\n        var params = require('util').inspect(req.params, true, null);                                                  // 1825\n                                                                                                                       // 1826\n        var message = '';                                                                                              // 1827\n        if (ansi) message += '\\x1B[33m';                                                                               // 1828\n        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;                                             // 1829\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';                                      // 1830\n        if (ansi) message += '\\x1B[0;1m';                                                                              // 1831\n        message += ' ' + AWS.util.string.lowerFirst(req.operation);                                                    // 1832\n        message += '(' + params + ')';                                                                                 // 1833\n        if (ansi) message += '\\x1B[0m';                                                                                // 1834\n        return message;                                                                                                // 1835\n      }                                                                                                                // 1836\n                                                                                                                       // 1837\n      var line = buildMessage();                                                                                       // 1838\n      if (typeof logger.log === 'function') {                                                                          // 1839\n        logger.log(line);                                                                                              // 1840\n      } else if (typeof logger.write === 'function') {                                                                 // 1841\n        logger.write(line + '\\n');                                                                                     // 1842\n      }                                                                                                                // 1843\n    });                                                                                                                // 1844\n  }),                                                                                                                  // 1845\n                                                                                                                       // 1846\n  Json: new SequentialExecutor().addNamedListeners(function(add) {                                                     // 1847\n    var svc = require('./protocol/json');                                                                              // 1848\n    add('BUILD', 'build', svc.buildRequest);                                                                           // 1849\n    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1850\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1851\n  }),                                                                                                                  // 1852\n                                                                                                                       // 1853\n  Rest: new SequentialExecutor().addNamedListeners(function(add) {                                                     // 1854\n    var svc = require('./protocol/rest');                                                                              // 1855\n    add('BUILD', 'build', svc.buildRequest);                                                                           // 1856\n    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1857\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1858\n  }),                                                                                                                  // 1859\n                                                                                                                       // 1860\n  RestJson: new SequentialExecutor().addNamedListeners(function(add) {                                                 // 1861\n    var svc = require('./protocol/rest_json');                                                                         // 1862\n    add('BUILD', 'build', svc.buildRequest);                                                                           // 1863\n    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1864\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1865\n  }),                                                                                                                  // 1866\n                                                                                                                       // 1867\n  RestXml: new SequentialExecutor().addNamedListeners(function(add) {                                                  // 1868\n    var svc = require('./protocol/rest_xml');                                                                          // 1869\n    add('BUILD', 'build', svc.buildRequest);                                                                           // 1870\n    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1871\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1872\n  }),                                                                                                                  // 1873\n                                                                                                                       // 1874\n  Query: new SequentialExecutor().addNamedListeners(function(add) {                                                    // 1875\n    var svc = require('./protocol/query');                                                                             // 1876\n    add('BUILD', 'build', svc.buildRequest);                                                                           // 1877\n    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1878\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1879\n  })                                                                                                                   // 1880\n};                                                                                                                     // 1881\n                                                                                                                       // 1882\n},{\"./core\":4,\"./protocol/json\":28,\"./protocol/query\":29,\"./protocol/rest\":30,\"./protocol/rest_json\":31,\"./protocol/rest_xml\":32,\"./sequential_executor\":40,\"util\":80}],17:[function(require,module,exports){\nvar AWS = require('./core');                                                                                           // 1884\nvar inherit = AWS.util.inherit;                                                                                        // 1885\n                                                                                                                       // 1886\n                                                                                                                       // 1887\nAWS.Endpoint = inherit({                                                                                               // 1888\n                                                                                                                       // 1889\n                                                                                                                       // 1890\n  constructor: function Endpoint(endpoint, config) {                                                                   // 1891\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);                                     // 1892\n                                                                                                                       // 1893\n    if (typeof endpoint === 'undefined' || endpoint === null) {                                                        // 1894\n      throw new Error('Invalid endpoint: ' + endpoint);                                                                // 1895\n    } else if (typeof endpoint !== 'string') {                                                                         // 1896\n      return AWS.util.copy(endpoint);                                                                                  // 1897\n    }                                                                                                                  // 1898\n                                                                                                                       // 1899\n    if (!endpoint.match(/^http/)) {                                                                                    // 1900\n      var useSSL = config && config.sslEnabled !== undefined ?                                                         // 1901\n        config.sslEnabled : AWS.config.sslEnabled;                                                                     // 1902\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;                                                       // 1903\n    }                                                                                                                  // 1904\n                                                                                                                       // 1905\n    AWS.util.update(this, AWS.util.urlParse(endpoint));                                                                // 1906\n                                                                                                                       // 1907\n    if (this.port) {                                                                                                   // 1908\n      this.port = parseInt(this.port, 10);                                                                             // 1909\n    } else {                                                                                                           // 1910\n      this.port = this.protocol === 'https:' ? 443 : 80;                                                               // 1911\n    }                                                                                                                  // 1912\n  }                                                                                                                    // 1913\n                                                                                                                       // 1914\n});                                                                                                                    // 1915\n                                                                                                                       // 1916\n                                                                                                                       // 1917\nAWS.HttpRequest = inherit({                                                                                            // 1918\n                                                                                                                       // 1919\n                                                                                                                       // 1920\n  constructor: function HttpRequest(endpoint, region, customUserAgent) {                                               // 1921\n    endpoint = new AWS.Endpoint(endpoint);                                                                             // 1922\n    this.method = 'POST';                                                                                              // 1923\n    this.path = endpoint.path || '/';                                                                                  // 1924\n    this.headers = {};                                                                                                 // 1925\n    this.body = '';                                                                                                    // 1926\n    this.endpoint = endpoint;                                                                                          // 1927\n    this.region = region;                                                                                              // 1928\n    this.setUserAgent(customUserAgent);                                                                                // 1929\n  },                                                                                                                   // 1930\n                                                                                                                       // 1931\n                                                                                                                       // 1932\n  setUserAgent: function setUserAgent(customUserAgent) {                                                               // 1933\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';                                                                 // 1934\n    var customSuffix = '';                                                                                             // 1935\n    if (typeof customUserAgent === 'string' && customUserAgent) {                                                      // 1936\n      customSuffix += ' ' + customUserAgent;                                                                           // 1937\n    }                                                                                                                  // 1938\n    this.headers[prefix + 'User-Agent'] = AWS.util.userAgent() + customSuffix;                                         // 1939\n  },                                                                                                                   // 1940\n                                                                                                                       // 1941\n                                                                                                                       // 1942\n  pathname: function pathname() {                                                                                      // 1943\n    return this.path.split('?', 1)[0];                                                                                 // 1944\n  },                                                                                                                   // 1945\n                                                                                                                       // 1946\n                                                                                                                       // 1947\n  search: function search() {                                                                                          // 1948\n    var query = this.path.split('?', 2)[1];                                                                            // 1949\n    if (query) {                                                                                                       // 1950\n      query = AWS.util.queryStringParse(query);                                                                        // 1951\n      return AWS.util.queryParamsToString(query);                                                                      // 1952\n    }                                                                                                                  // 1953\n    return '';                                                                                                         // 1954\n  }                                                                                                                    // 1955\n                                                                                                                       // 1956\n});                                                                                                                    // 1957\n                                                                                                                       // 1958\n                                                                                                                       // 1959\nAWS.HttpResponse = inherit({                                                                                           // 1960\n                                                                                                                       // 1961\n                                                                                                                       // 1962\n  constructor: function HttpResponse() {                                                                               // 1963\n    this.statusCode = undefined;                                                                                       // 1964\n    this.headers = {};                                                                                                 // 1965\n    this.body = undefined;                                                                                             // 1966\n    this.streaming = false;                                                                                            // 1967\n    this.stream = null;                                                                                                // 1968\n  },                                                                                                                   // 1969\n                                                                                                                       // 1970\n                                                                                                                       // 1971\n  createUnbufferedStream: function createUnbufferedStream() {                                                          // 1972\n    this.streaming = true;                                                                                             // 1973\n    return this.stream;                                                                                                // 1974\n  }                                                                                                                    // 1975\n});                                                                                                                    // 1976\n                                                                                                                       // 1977\n                                                                                                                       // 1978\nAWS.HttpClient = inherit({});                                                                                          // 1979\n                                                                                                                       // 1980\n                                                                                                                       // 1981\nAWS.HttpClient.getInstance = function getInstance() {                                                                  // 1982\n  if (this.singleton === undefined) {                                                                                  // 1983\n    this.singleton = new this();                                                                                       // 1984\n  }                                                                                                                    // 1985\n  return this.singleton;                                                                                               // 1986\n};                                                                                                                     // 1987\n                                                                                                                       // 1988\n},{\"./core\":4}],18:[function(require,module,exports){                                                                  // 1989\nvar AWS = require('../core');                                                                                          // 1990\nvar EventEmitter = require('events').EventEmitter;                                                                     // 1991\nrequire('../http');                                                                                                    // 1992\n                                                                                                                       // 1993\n                                                                                                                       // 1994\nAWS.XHRClient = AWS.util.inherit({                                                                                     // 1995\n  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {                             // 1996\n    var self = this;                                                                                                   // 1997\n    var endpoint = httpRequest.endpoint;                                                                               // 1998\n    var emitter = new EventEmitter();                                                                                  // 1999\n    var href = endpoint.protocol + '//' + endpoint.hostname;                                                           // 2000\n    if (endpoint.port !== 80 && endpoint.port !== 443) {                                                               // 2001\n      href += ':' + endpoint.port;                                                                                     // 2002\n    }                                                                                                                  // 2003\n    href += httpRequest.path;                                                                                          // 2004\n                                                                                                                       // 2005\n    var xhr = new XMLHttpRequest(), headersEmitted = false;                                                            // 2006\n    httpRequest.stream = xhr;                                                                                          // 2007\n                                                                                                                       // 2008\n    xhr.addEventListener('readystatechange', function() {                                                              // 2009\n      try {                                                                                                            // 2010\n        if (xhr.status === 0) return; // 0 code is invalid                                                             // 2011\n      } catch (e) { return; }                                                                                          // 2012\n                                                                                                                       // 2013\n      if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {                                               // 2014\n        try { xhr.responseType = 'arraybuffer'; } catch (e) {}                                                         // 2015\n        emitter.statusCode = xhr.status;                                                                               // 2016\n        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());                                              // 2017\n        emitter.emit('headers', emitter.statusCode, emitter.headers);                                                  // 2018\n        headersEmitted = true;                                                                                         // 2019\n      }                                                                                                                // 2020\n      if (this.readyState === this.DONE) {                                                                             // 2021\n        self.finishRequest(xhr, emitter);                                                                              // 2022\n      }                                                                                                                // 2023\n    }, false);                                                                                                         // 2024\n    xhr.upload.addEventListener('progress', function (evt) {                                                           // 2025\n      emitter.emit('sendProgress', evt);                                                                               // 2026\n    });                                                                                                                // 2027\n    xhr.addEventListener('progress', function (evt) {                                                                  // 2028\n      emitter.emit('receiveProgress', evt);                                                                            // 2029\n    }, false);                                                                                                         // 2030\n    xhr.addEventListener('timeout', function () {                                                                      // 2031\n      errCallback(AWS.util.error(new Error('Timeout'), {code: 'TimeoutError'}));                                       // 2032\n    }, false);                                                                                                         // 2033\n    xhr.addEventListener('error', function () {                                                                        // 2034\n      errCallback(AWS.util.error(new Error('Network Failure'), {                                                       // 2035\n        code: 'NetworkingError'                                                                                        // 2036\n      }));                                                                                                             // 2037\n    }, false);                                                                                                         // 2038\n                                                                                                                       // 2039\n    callback(emitter);                                                                                                 // 2040\n    xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);                                                // 2041\n    AWS.util.each(httpRequest.headers, function (key, value) {                                                         // 2042\n      if (key !== 'Content-Length' && key !== 'User-Agent' && key !== 'Host') {                                        // 2043\n        xhr.setRequestHeader(key, value);                                                                              // 2044\n      }                                                                                                                // 2045\n    });                                                                                                                // 2046\n                                                                                                                       // 2047\n    if (httpOptions.timeout && httpOptions.xhrAsync !== false) {                                                       // 2048\n      xhr.timeout = httpOptions.timeout;                                                                               // 2049\n    }                                                                                                                  // 2050\n                                                                                                                       // 2051\n    if (httpOptions.xhrWithCredentials) {                                                                              // 2052\n      xhr.withCredentials = true;                                                                                      // 2053\n    }                                                                                                                  // 2054\n                                                                                                                       // 2055\n    try {                                                                                                              // 2056\n      xhr.send(httpRequest.body);                                                                                      // 2057\n    } catch (err) {                                                                                                    // 2058\n      if (httpRequest.body && typeof httpRequest.body.buffer === 'object') {                                           // 2059\n        xhr.send(httpRequest.body.buffer); // send ArrayBuffer directly                                                // 2060\n      } else {                                                                                                         // 2061\n        throw err;                                                                                                     // 2062\n      }                                                                                                                // 2063\n    }                                                                                                                  // 2064\n                                                                                                                       // 2065\n    return emitter;                                                                                                    // 2066\n  },                                                                                                                   // 2067\n                                                                                                                       // 2068\n  parseHeaders: function parseHeaders(rawHeaders) {                                                                    // 2069\n    var headers = {};                                                                                                  // 2070\n    AWS.util.arrayEach(rawHeaders.split(/\\r?\\n/), function (line) {                                                    // 2071\n      var key = line.split(':', 1)[0];                                                                                 // 2072\n      var value = line.substring(key.length + 2);                                                                      // 2073\n      if (key.length > 0) headers[key.toLowerCase()] = value;                                                          // 2074\n    });                                                                                                                // 2075\n    return headers;                                                                                                    // 2076\n  },                                                                                                                   // 2077\n                                                                                                                       // 2078\n  finishRequest: function finishRequest(xhr, emitter) {                                                                // 2079\n    var buffer;                                                                                                        // 2080\n    if (xhr.responseType === 'arraybuffer' && xhr.response) {                                                          // 2081\n      var ab = xhr.response;                                                                                           // 2082\n      buffer = new AWS.util.Buffer(ab.byteLength);                                                                     // 2083\n      var view = new Uint8Array(ab);                                                                                   // 2084\n      for (var i = 0; i < buffer.length; ++i) {                                                                        // 2085\n        buffer[i] = view[i];                                                                                           // 2086\n      }                                                                                                                // 2087\n    }                                                                                                                  // 2088\n                                                                                                                       // 2089\n    try {                                                                                                              // 2090\n      if (!buffer && typeof xhr.responseText === 'string') {                                                           // 2091\n        buffer = new AWS.util.Buffer(xhr.responseText);                                                                // 2092\n      }                                                                                                                // 2093\n    } catch (e) {}                                                                                                     // 2094\n                                                                                                                       // 2095\n    if (buffer) emitter.emit('data', buffer);                                                                          // 2096\n    emitter.emit('end');                                                                                               // 2097\n  }                                                                                                                    // 2098\n});                                                                                                                    // 2099\n                                                                                                                       // 2100\n                                                                                                                       // 2101\nAWS.HttpClient.prototype = AWS.XHRClient.prototype;                                                                    // 2102\n                                                                                                                       // 2103\n                                                                                                                       // 2104\nAWS.HttpClient.streamsApiVersion = 1;                                                                                  // 2105\n                                                                                                                       // 2106\n},{\"../core\":4,\"../http\":17,\"events\":71}],19:[function(require,module,exports){                                        // 2107\nvar util = require('../util');                                                                                         // 2108\n                                                                                                                       // 2109\nfunction JsonBuilder() { }                                                                                             // 2110\n                                                                                                                       // 2111\nJsonBuilder.prototype.build = function(value, shape) {                                                                 // 2112\n  return JSON.stringify(translate(value, shape));                                                                      // 2113\n};                                                                                                                     // 2114\n                                                                                                                       // 2115\nfunction translate(value, shape) {                                                                                     // 2116\n  if (!shape || value === undefined || value === null) return undefined;                                               // 2117\n                                                                                                                       // 2118\n  switch (shape.type) {                                                                                                // 2119\n    case 'structure': return translateStructure(value, shape);                                                         // 2120\n    case 'map': return translateMap(value, shape);                                                                     // 2121\n    case 'list': return translateList(value, shape);                                                                   // 2122\n    default: return translateScalar(value, shape);                                                                     // 2123\n  }                                                                                                                    // 2124\n}                                                                                                                      // 2125\n                                                                                                                       // 2126\nfunction translateStructure(structure, shape) {                                                                        // 2127\n  var struct = {};                                                                                                     // 2128\n  util.each(structure, function(name, value) {                                                                         // 2129\n    var memberShape = shape.members[name];                                                                             // 2130\n    if (memberShape) {                                                                                                 // 2131\n      if (memberShape.location !== 'body') return;                                                                     // 2132\n      var locationName = memberShape.isLocationName ? memberShape.name : name;                                         // 2133\n      var result = translate(value, memberShape);                                                                      // 2134\n      if (result !== undefined) struct[locationName] = result;                                                         // 2135\n    }                                                                                                                  // 2136\n  });                                                                                                                  // 2137\n  return struct;                                                                                                       // 2138\n}                                                                                                                      // 2139\n                                                                                                                       // 2140\nfunction translateList(list, shape) {                                                                                  // 2141\n  var out = [];                                                                                                        // 2142\n  util.arrayEach(list, function(value) {                                                                               // 2143\n    var result = translate(value, shape.member);                                                                       // 2144\n    if (result !== undefined) out.push(result);                                                                        // 2145\n  });                                                                                                                  // 2146\n  return out;                                                                                                          // 2147\n}                                                                                                                      // 2148\n                                                                                                                       // 2149\nfunction translateMap(map, shape) {                                                                                    // 2150\n  var out = {};                                                                                                        // 2151\n  util.each(map, function(key, value) {                                                                                // 2152\n    var result = translate(value, shape.value);                                                                        // 2153\n    if (result !== undefined) out[key] = result;                                                                       // 2154\n  });                                                                                                                  // 2155\n  return out;                                                                                                          // 2156\n}                                                                                                                      // 2157\n                                                                                                                       // 2158\nfunction translateScalar(value, shape) {                                                                               // 2159\n  return shape.toWireFormat(value);                                                                                    // 2160\n}                                                                                                                      // 2161\n                                                                                                                       // 2162\nmodule.exports = JsonBuilder;                                                                                          // 2163\n                                                                                                                       // 2164\n},{\"../util\":59}],20:[function(require,module,exports){                                                                // 2165\nvar util = require('../util');                                                                                         // 2166\n                                                                                                                       // 2167\nfunction JsonParser() { }                                                                                              // 2168\n                                                                                                                       // 2169\nJsonParser.prototype.parse = function(value, shape) {                                                                  // 2170\n  return translate(JSON.parse(value), shape);                                                                          // 2171\n};                                                                                                                     // 2172\n                                                                                                                       // 2173\nfunction translate(value, shape) {                                                                                     // 2174\n  if (!shape || value === undefined) return undefined;                                                                 // 2175\n                                                                                                                       // 2176\n  switch (shape.type) {                                                                                                // 2177\n    case 'structure': return translateStructure(value, shape);                                                         // 2178\n    case 'map': return translateMap(value, shape);                                                                     // 2179\n    case 'list': return translateList(value, shape);                                                                   // 2180\n    default: return translateScalar(value, shape);                                                                     // 2181\n  }                                                                                                                    // 2182\n}                                                                                                                      // 2183\n                                                                                                                       // 2184\nfunction translateStructure(structure, shape) {                                                                        // 2185\n  if (structure == null) return undefined;                                                                             // 2186\n                                                                                                                       // 2187\n  var struct = {};                                                                                                     // 2188\n  var shapeMembers = shape.members;                                                                                    // 2189\n  util.each(shapeMembers, function(name, memberShape) {                                                                // 2190\n    var locationName = memberShape.isLocationName ? memberShape.name : name;                                           // 2191\n    if (structure.hasOwnProperty(locationName)) {                                                                      // 2192\n      var value = structure[locationName];                                                                             // 2193\n      var result = translate(value, memberShape);                                                                      // 2194\n      if (result !== undefined) struct[name] = result;                                                                 // 2195\n    }                                                                                                                  // 2196\n  });                                                                                                                  // 2197\n  return struct;                                                                                                       // 2198\n}                                                                                                                      // 2199\n                                                                                                                       // 2200\nfunction translateList(list, shape) {                                                                                  // 2201\n  if (list == null) return undefined;                                                                                  // 2202\n                                                                                                                       // 2203\n  var out = [];                                                                                                        // 2204\n  util.arrayEach(list, function(value) {                                                                               // 2205\n    var result = translate(value, shape.member);                                                                       // 2206\n    if (result === undefined) out.push(null);                                                                          // 2207\n    else out.push(result);                                                                                             // 2208\n  });                                                                                                                  // 2209\n  return out;                                                                                                          // 2210\n}                                                                                                                      // 2211\n                                                                                                                       // 2212\nfunction translateMap(map, shape) {                                                                                    // 2213\n  if (map == null) return undefined;                                                                                   // 2214\n                                                                                                                       // 2215\n  var out = {};                                                                                                        // 2216\n  util.each(map, function(key, value) {                                                                                // 2217\n    var result = translate(value, shape.value);                                                                        // 2218\n    if (result === undefined) out[key] = null;                                                                         // 2219\n    else out[key] = result;                                                                                            // 2220\n  });                                                                                                                  // 2221\n  return out;                                                                                                          // 2222\n}                                                                                                                      // 2223\n                                                                                                                       // 2224\nfunction translateScalar(value, shape) {                                                                               // 2225\n  return shape.toType(value);                                                                                          // 2226\n}                                                                                                                      // 2227\n                                                                                                                       // 2228\nmodule.exports = JsonParser;                                                                                           // 2229\n                                                                                                                       // 2230\n},{\"../util\":59}],21:[function(require,module,exports){                                                                // 2231\nvar Collection = require('./collection');                                                                              // 2232\nvar Operation = require('./operation');                                                                                // 2233\nvar Shape = require('./shape');                                                                                        // 2234\nvar Paginator = require('./paginator');                                                                                // 2235\nvar ResourceWaiter = require('./resource_waiter');                                                                     // 2236\n                                                                                                                       // 2237\nvar util = require('../util');                                                                                         // 2238\nvar property = util.property;                                                                                          // 2239\nvar memoizedProperty = util.memoizedProperty;                                                                          // 2240\n                                                                                                                       // 2241\nfunction Api(api, options) {                                                                                           // 2242\n  api = api || {};                                                                                                     // 2243\n  options = options || {};                                                                                             // 2244\n  options.api = this;                                                                                                  // 2245\n                                                                                                                       // 2246\n  api.metadata = api.metadata || {};                                                                                   // 2247\n                                                                                                                       // 2248\n  property(this, 'isApi', true, false);                                                                                // 2249\n  property(this, 'apiVersion', api.metadata.apiVersion);                                                               // 2250\n  property(this, 'endpointPrefix', api.metadata.endpointPrefix);                                                       // 2251\n  property(this, 'signingName', api.metadata.signingName);                                                             // 2252\n  property(this, 'globalEndpoint', api.metadata.globalEndpoint);                                                       // 2253\n  property(this, 'signatureVersion', api.metadata.signatureVersion);                                                   // 2254\n  property(this, 'jsonVersion', api.metadata.jsonVersion);                                                             // 2255\n  property(this, 'targetPrefix', api.metadata.targetPrefix);                                                           // 2256\n  property(this, 'protocol', api.metadata.protocol);                                                                   // 2257\n  property(this, 'timestampFormat', api.metadata.timestampFormat);                                                     // 2258\n  property(this, 'xmlNamespaceUri', api.metadata.xmlNamespace);                                                        // 2259\n  property(this, 'abbreviation', api.metadata.serviceAbbreviation);                                                    // 2260\n  property(this, 'fullName', api.metadata.serviceFullName);                                                            // 2261\n                                                                                                                       // 2262\n  memoizedProperty(this, 'className', function() {                                                                     // 2263\n    var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;                                       // 2264\n    if (!name) return null;                                                                                            // 2265\n                                                                                                                       // 2266\n    name = name.replace(/^Amazon|AWS\\s*|\\(.*|\\s+|\\W+/g, '');                                                           // 2267\n    if (name === 'ElasticLoadBalancing') name = 'ELB';                                                                 // 2268\n    return name;                                                                                                       // 2269\n  });                                                                                                                  // 2270\n                                                                                                                       // 2271\n  property(this, 'operations', new Collection(api.operations, options, function(name, operation) {                     // 2272\n    return new Operation(name, operation, options);                                                                    // 2273\n  }, util.string.lowerFirst));                                                                                         // 2274\n                                                                                                                       // 2275\n  property(this, 'shapes', new Collection(api.shapes, options, function(name, shape) {                                 // 2276\n    return Shape.create(shape, options);                                                                               // 2277\n  }));                                                                                                                 // 2278\n                                                                                                                       // 2279\n  property(this, 'paginators', new Collection(api.paginators, options, function(name, paginator) {                     // 2280\n    return new Paginator(name, paginator, options);                                                                    // 2281\n  }));                                                                                                                 // 2282\n                                                                                                                       // 2283\n  property(this, 'waiters', new Collection(api.waiters, options, function(name, waiter) {                              // 2284\n    return new ResourceWaiter(name, waiter, options);                                                                  // 2285\n  }, util.string.lowerFirst));                                                                                         // 2286\n                                                                                                                       // 2287\n  if (options.documentation) {                                                                                         // 2288\n    property(this, 'documentation', api.documentation);                                                                // 2289\n    property(this, 'documentationUrl', api.documentationUrl);                                                          // 2290\n  }                                                                                                                    // 2291\n}                                                                                                                      // 2292\n                                                                                                                       // 2293\nmodule.exports = Api;                                                                                                  // 2294\n                                                                                                                       // 2295\n},{\"../util\":59,\"./collection\":22,\"./operation\":23,\"./paginator\":24,\"./resource_waiter\":25,\"./shape\":26}],22:[function(require,module,exports){\nvar memoizedProperty = require('../util').memoizedProperty;                                                            // 2297\n                                                                                                                       // 2298\nfunction memoize(name, value, fn, nameTr) {                                                                            // 2299\n  memoizedProperty(this, nameTr(name), function() {                                                                    // 2300\n    return fn(name, value);                                                                                            // 2301\n  });                                                                                                                  // 2302\n}                                                                                                                      // 2303\n                                                                                                                       // 2304\nfunction Collection(iterable, options, fn, nameTr) {                                                                   // 2305\n  nameTr = nameTr || String;                                                                                           // 2306\n  var self = this;                                                                                                     // 2307\n                                                                                                                       // 2308\n  for (var id in iterable) {                                                                                           // 2309\n    if (iterable.hasOwnProperty(id)) {                                                                                 // 2310\n      memoize.call(self, id, iterable[id], fn, nameTr);                                                                // 2311\n    }                                                                                                                  // 2312\n  }                                                                                                                    // 2313\n}                                                                                                                      // 2314\n                                                                                                                       // 2315\nmodule.exports = Collection;                                                                                           // 2316\n                                                                                                                       // 2317\n},{\"../util\":59}],23:[function(require,module,exports){                                                                // 2318\nvar Shape = require('./shape');                                                                                        // 2319\n                                                                                                                       // 2320\nvar util = require('../util');                                                                                         // 2321\nvar property = util.property;                                                                                          // 2322\nvar memoizedProperty = util.memoizedProperty;                                                                          // 2323\n                                                                                                                       // 2324\nfunction Operation(name, operation, options) {                                                                         // 2325\n  options = options || {};                                                                                             // 2326\n                                                                                                                       // 2327\n  property(this, 'name', operation.name || name);                                                                      // 2328\n  property(this, 'api', options.api, false);                                                                           // 2329\n                                                                                                                       // 2330\n  operation.http = operation.http || {};                                                                               // 2331\n  property(this, 'httpMethod', operation.http.method || 'POST');                                                       // 2332\n  property(this, 'httpPath', operation.http.requestUri || '/');                                                        // 2333\n                                                                                                                       // 2334\n  memoizedProperty(this, 'input', function() {                                                                         // 2335\n    if (!operation.input) {                                                                                            // 2336\n      return new Shape.create({type: 'structure'}, options);                                                           // 2337\n    }                                                                                                                  // 2338\n    return Shape.create(operation.input, options);                                                                     // 2339\n  });                                                                                                                  // 2340\n                                                                                                                       // 2341\n  memoizedProperty(this, 'output', function() {                                                                        // 2342\n    if (!operation.output) {                                                                                           // 2343\n      return new Shape.create({type: 'structure'}, options);                                                           // 2344\n    }                                                                                                                  // 2345\n    return Shape.create(operation.output, options);                                                                    // 2346\n  });                                                                                                                  // 2347\n                                                                                                                       // 2348\n  memoizedProperty(this, 'errors', function() {                                                                        // 2349\n    var list = [];                                                                                                     // 2350\n    if (!operation.errors) return null;                                                                                // 2351\n                                                                                                                       // 2352\n    for (var i = 0; i < operation.errors.length; i++) {                                                                // 2353\n      list.push(Shape.create(operation.errors[i], options));                                                           // 2354\n    }                                                                                                                  // 2355\n                                                                                                                       // 2356\n    return list;                                                                                                       // 2357\n  });                                                                                                                  // 2358\n                                                                                                                       // 2359\n  memoizedProperty(this, 'paginator', function() {                                                                     // 2360\n    return options.api.paginators[name];                                                                               // 2361\n  });                                                                                                                  // 2362\n                                                                                                                       // 2363\n  if (options.documentation) {                                                                                         // 2364\n    property(this, 'documentation', operation.documentation);                                                          // 2365\n    property(this, 'documentationUrl', operation.documentationUrl);                                                    // 2366\n  }                                                                                                                    // 2367\n}                                                                                                                      // 2368\n                                                                                                                       // 2369\nmodule.exports = Operation;                                                                                            // 2370\n                                                                                                                       // 2371\n},{\"../util\":59,\"./shape\":26}],24:[function(require,module,exports){                                                   // 2372\nvar property = require('../util').property;                                                                            // 2373\n                                                                                                                       // 2374\nfunction Paginator(name, paginator) {                                                                                  // 2375\n  property(this, 'inputToken', paginator.input_token);                                                                 // 2376\n  property(this, 'limitKey', paginator.limit_key);                                                                     // 2377\n  property(this, 'moreResults', paginator.more_results);                                                               // 2378\n  property(this, 'outputToken', paginator.output_token);                                                               // 2379\n  property(this, 'resultKey', paginator.result_key);                                                                   // 2380\n}                                                                                                                      // 2381\n                                                                                                                       // 2382\nmodule.exports = Paginator;                                                                                            // 2383\n                                                                                                                       // 2384\n},{\"../util\":59}],25:[function(require,module,exports){                                                                // 2385\nvar util = require('../util');                                                                                         // 2386\nvar property = util.property;                                                                                          // 2387\n                                                                                                                       // 2388\nfunction ResourceWaiter(name, waiter, options) {                                                                       // 2389\n  options = options || {};                                                                                             // 2390\n                                                                                                                       // 2391\n  function InnerResourceWaiter() {                                                                                     // 2392\n    property(this, 'name', name);                                                                                      // 2393\n    property(this, 'api', options.api, false);                                                                         // 2394\n                                                                                                                       // 2395\n    if (waiter.operation) {                                                                                            // 2396\n      property(this, 'operation', util.string.lowerFirst(waiter.operation));                                           // 2397\n    }                                                                                                                  // 2398\n                                                                                                                       // 2399\n    var self = this, map = {                                                                                           // 2400\n      ignoreErrors: 'ignore_errors',                                                                                   // 2401\n      successType: 'success_type',                                                                                     // 2402\n      successValue: 'success_value',                                                                                   // 2403\n      successPath: 'success_path',                                                                                     // 2404\n      acceptorType: 'acceptor_type',                                                                                   // 2405\n      acceptorValue: 'acceptor_value',                                                                                 // 2406\n      acceptorPath: 'acceptor_path',                                                                                   // 2407\n      failureType: 'failure_type',                                                                                     // 2408\n      failureValue: 'failure_value',                                                                                   // 2409\n      failurePath: 'success_path',                                                                                     // 2410\n      interval: 'interval',                                                                                            // 2411\n      maxAttempts: 'max_attempts'                                                                                      // 2412\n    };                                                                                                                 // 2413\n    Object.keys(map).forEach(function(key) {                                                                           // 2414\n      var value = waiter[map[key]];                                                                                    // 2415\n      if (value) property(self, key, value);                                                                           // 2416\n    });                                                                                                                // 2417\n  }                                                                                                                    // 2418\n                                                                                                                       // 2419\n  if (options.api) {                                                                                                   // 2420\n    var proto = null;                                                                                                  // 2421\n    if (waiter['extends']) {                                                                                           // 2422\n      proto = options.api.waiters[waiter['extends']];                                                                  // 2423\n    } else if (name !== '__default__') {                                                                               // 2424\n      proto = options.api.waiters['__default__'];                                                                      // 2425\n    }                                                                                                                  // 2426\n                                                                                                                       // 2427\n    if (proto) InnerResourceWaiter.prototype = proto;                                                                  // 2428\n  }                                                                                                                    // 2429\n                                                                                                                       // 2430\n  return new InnerResourceWaiter();                                                                                    // 2431\n}                                                                                                                      // 2432\n                                                                                                                       // 2433\nmodule.exports = ResourceWaiter;                                                                                       // 2434\n                                                                                                                       // 2435\n},{\"../util\":59}],26:[function(require,module,exports){                                                                // 2436\nvar Collection = require('./collection');                                                                              // 2437\n                                                                                                                       // 2438\nvar util = require('../util');                                                                                         // 2439\n                                                                                                                       // 2440\nfunction property(obj, name, value) {                                                                                  // 2441\n  if (value !== null && value !== undefined) {                                                                         // 2442\n    util.property.apply(this, arguments);                                                                              // 2443\n  }                                                                                                                    // 2444\n}                                                                                                                      // 2445\n                                                                                                                       // 2446\nfunction memoizedProperty(obj, name) {                                                                                 // 2447\n  if (!obj.constructor.prototype[name]) {                                                                              // 2448\n    util.memoizedProperty.apply(this, arguments);                                                                      // 2449\n  }                                                                                                                    // 2450\n}                                                                                                                      // 2451\n                                                                                                                       // 2452\nfunction Shape(shape, options, memberName) {                                                                           // 2453\n  options = options || {};                                                                                             // 2454\n                                                                                                                       // 2455\n  property(this, 'shape', shape.shape);                                                                                // 2456\n  property(this, 'api', options.api, false);                                                                           // 2457\n  property(this, 'type', shape.type);                                                                                  // 2458\n  property(this, 'enum', shape.enum);                                                                                  // 2459\n  property(this, 'min', shape.min);                                                                                    // 2460\n  property(this, 'max', shape.max);                                                                                    // 2461\n  property(this, 'pattern', shape.pattern);                                                                            // 2462\n  property(this, 'location', shape.location || this.location || 'body');                                               // 2463\n  property(this, 'name', this.name || shape.xmlName || shape.queryName ||                                              // 2464\n    shape.locationName || memberName);                                                                                 // 2465\n  property(this, 'isStreaming', shape.streaming || this.isStreaming || false);                                         // 2466\n  property(this, 'isComposite', shape.isComposite || false);                                                           // 2467\n  property(this, 'isShape', true, false);                                                                              // 2468\n  property(this, 'isQueryName', shape.queryName ? true : false, false);                                                // 2469\n  property(this, 'isLocationName', shape.locationName ? true : false, false);                                          // 2470\n                                                                                                                       // 2471\n  if (options.documentation) {                                                                                         // 2472\n    property(this, 'documentation', shape.documentation);                                                              // 2473\n    property(this, 'documentationUrl', shape.documentationUrl);                                                        // 2474\n  }                                                                                                                    // 2475\n                                                                                                                       // 2476\n  if (shape.xmlAttribute) {                                                                                            // 2477\n    property(this, 'isXmlAttribute', shape.xmlAttribute || false);                                                     // 2478\n  }                                                                                                                    // 2479\n                                                                                                                       // 2480\n  property(this, 'defaultValue', null);                                                                                // 2481\n  this.toWireFormat = function(value) {                                                                                // 2482\n    if (value === null || value === undefined) return '';                                                              // 2483\n    return value;                                                                                                      // 2484\n  };                                                                                                                   // 2485\n  this.toType = function(value) { return value; };                                                                     // 2486\n}                                                                                                                      // 2487\n                                                                                                                       // 2488\n                                                                                                                       // 2489\nShape.normalizedTypes = {                                                                                              // 2490\n  character: 'string',                                                                                                 // 2491\n  double: 'float',                                                                                                     // 2492\n  long: 'integer',                                                                                                     // 2493\n  short: 'integer',                                                                                                    // 2494\n  biginteger: 'integer',                                                                                               // 2495\n  bigdecimal: 'float',                                                                                                 // 2496\n  blob: 'binary'                                                                                                       // 2497\n};                                                                                                                     // 2498\n                                                                                                                       // 2499\n                                                                                                                       // 2500\nShape.types = {                                                                                                        // 2501\n  'structure': StructureShape,                                                                                         // 2502\n  'list': ListShape,                                                                                                   // 2503\n  'map': MapShape,                                                                                                     // 2504\n  'boolean': BooleanShape,                                                                                             // 2505\n  'timestamp': TimestampShape,                                                                                         // 2506\n  'float': FloatShape,                                                                                                 // 2507\n  'integer': IntegerShape,                                                                                             // 2508\n  'string': StringShape,                                                                                               // 2509\n  'base64': Base64Shape,                                                                                               // 2510\n  'binary': BinaryShape                                                                                                // 2511\n};                                                                                                                     // 2512\n                                                                                                                       // 2513\nShape.resolve = function resolve(shape, options) {                                                                     // 2514\n  if (shape.shape) {                                                                                                   // 2515\n    var refShape = options.api.shapes[shape.shape];                                                                    // 2516\n    if (!refShape) {                                                                                                   // 2517\n      throw new Error('Cannot find shape reference: ' + shape.shape);                                                  // 2518\n    }                                                                                                                  // 2519\n                                                                                                                       // 2520\n    return refShape;                                                                                                   // 2521\n  } else {                                                                                                             // 2522\n    return null;                                                                                                       // 2523\n  }                                                                                                                    // 2524\n};                                                                                                                     // 2525\n                                                                                                                       // 2526\nShape.create = function create(shape, options, memberName) {                                                           // 2527\n  if (shape.isShape) return shape;                                                                                     // 2528\n                                                                                                                       // 2529\n  var refShape = Shape.resolve(shape, options);                                                                        // 2530\n  if (refShape) {                                                                                                      // 2531\n    var filteredKeys = Object.keys(shape);                                                                             // 2532\n    if (!options.documentation) {                                                                                      // 2533\n      filteredKeys = filteredKeys.filter(function(name) {                                                              // 2534\n        return !name.match(/documentation/);                                                                           // 2535\n      });                                                                                                              // 2536\n    }                                                                                                                  // 2537\n    if (filteredKeys === ['shape']) { // no inline customizations                                                      // 2538\n      return refShape;                                                                                                 // 2539\n    }                                                                                                                  // 2540\n                                                                                                                       // 2541\n    var InlineShape = function() {                                                                                     // 2542\n      refShape.constructor.call(this, shape, options, memberName);                                                     // 2543\n    };                                                                                                                 // 2544\n    InlineShape.prototype = refShape;                                                                                  // 2545\n    return new InlineShape();                                                                                          // 2546\n  } else {                                                                                                             // 2547\n    if (!shape.type) {                                                                                                 // 2548\n      if (shape.members) shape.type = 'structure';                                                                     // 2549\n      else if (shape.member) shape.type = 'list';                                                                      // 2550\n      else if (shape.key) shape.type = 'map';                                                                          // 2551\n      else shape.type = 'string';                                                                                      // 2552\n    }                                                                                                                  // 2553\n                                                                                                                       // 2554\n    var origType = shape.type;                                                                                         // 2555\n    if (Shape.normalizedTypes[shape.type]) {                                                                           // 2556\n      shape.type = Shape.normalizedTypes[shape.type];                                                                  // 2557\n    }                                                                                                                  // 2558\n                                                                                                                       // 2559\n    if (Shape.types[shape.type]) {                                                                                     // 2560\n      return new Shape.types[shape.type](shape, options, memberName);                                                  // 2561\n    } else {                                                                                                           // 2562\n      throw new Error('Unrecognized shape type: ' + origType);                                                         // 2563\n    }                                                                                                                  // 2564\n  }                                                                                                                    // 2565\n};                                                                                                                     // 2566\n                                                                                                                       // 2567\nfunction CompositeShape(shape) {                                                                                       // 2568\n  Shape.apply(this, arguments);                                                                                        // 2569\n  property(this, 'isComposite', true);                                                                                 // 2570\n                                                                                                                       // 2571\n  if (shape.flattened) {                                                                                               // 2572\n    property(this, 'flattened', shape.flattened || false);                                                             // 2573\n  }                                                                                                                    // 2574\n}                                                                                                                      // 2575\n                                                                                                                       // 2576\nfunction StructureShape(shape, options) {                                                                              // 2577\n  var requiredMap = null, firstInit = !this.isShape;                                                                   // 2578\n                                                                                                                       // 2579\n  CompositeShape.apply(this, arguments);                                                                               // 2580\n                                                                                                                       // 2581\n  if (firstInit) {                                                                                                     // 2582\n    property(this, 'defaultValue', function() { return {}; });                                                         // 2583\n    property(this, 'members', {});                                                                                     // 2584\n    property(this, 'memberNames', []);                                                                                 // 2585\n    property(this, 'required', []);                                                                                    // 2586\n    property(this, 'isRequired', function() { return false; });                                                        // 2587\n  }                                                                                                                    // 2588\n                                                                                                                       // 2589\n  if (shape.members) {                                                                                                 // 2590\n    property(this, 'members', new Collection(shape.members, options, function(name, member) {                          // 2591\n      return Shape.create(member, options, name);                                                                      // 2592\n    }));                                                                                                               // 2593\n    memoizedProperty(this, 'memberNames', function() {                                                                 // 2594\n      return shape.xmlOrder || Object.keys(shape.members);                                                             // 2595\n    });                                                                                                                // 2596\n  }                                                                                                                    // 2597\n                                                                                                                       // 2598\n  if (shape.required) {                                                                                                // 2599\n    property(this, 'required', shape.required);                                                                        // 2600\n    property(this, 'isRequired', function(name) {                                                                      // 2601\n      if (!requiredMap) {                                                                                              // 2602\n        requiredMap = {};                                                                                              // 2603\n        for (var i = 0; i < shape.required.length; i++) {                                                              // 2604\n          requiredMap[shape.required[i]] = true;                                                                       // 2605\n        }                                                                                                              // 2606\n      }                                                                                                                // 2607\n                                                                                                                       // 2608\n      return requiredMap[name];                                                                                        // 2609\n    }, false, true);                                                                                                   // 2610\n  }                                                                                                                    // 2611\n                                                                                                                       // 2612\n  property(this, 'resultWrapper', shape.resultWrapper || null);                                                        // 2613\n                                                                                                                       // 2614\n  if (shape.payload) {                                                                                                 // 2615\n    property(this, 'payload', shape.payload);                                                                          // 2616\n  }                                                                                                                    // 2617\n                                                                                                                       // 2618\n  if (typeof shape.xmlNamespace === 'string') {                                                                        // 2619\n    property(this, 'xmlNamespaceUri', shape.xmlNamespace);                                                             // 2620\n  } else if (typeof shape.xmlNamespace === 'object') {                                                                 // 2621\n    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);                                                   // 2622\n    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);                                                         // 2623\n  }                                                                                                                    // 2624\n}                                                                                                                      // 2625\n                                                                                                                       // 2626\nfunction ListShape(shape, options) {                                                                                   // 2627\n  var self = this, firstInit = !this.isShape;                                                                          // 2628\n  CompositeShape.apply(this, arguments);                                                                               // 2629\n                                                                                                                       // 2630\n  if (firstInit) {                                                                                                     // 2631\n    property(this, 'defaultValue', function() { return []; });                                                         // 2632\n  }                                                                                                                    // 2633\n                                                                                                                       // 2634\n  if (shape.member) {                                                                                                  // 2635\n    memoizedProperty(this, 'member', function() {                                                                      // 2636\n      return Shape.create(shape.member, options);                                                                      // 2637\n    });                                                                                                                // 2638\n  }                                                                                                                    // 2639\n                                                                                                                       // 2640\n  if (this.flattened) {                                                                                                // 2641\n    var oldName = this.name;                                                                                           // 2642\n    memoizedProperty(this, 'name', function() {                                                                        // 2643\n      return self.member.name || oldName;                                                                              // 2644\n    });                                                                                                                // 2645\n  }                                                                                                                    // 2646\n}                                                                                                                      // 2647\n                                                                                                                       // 2648\nfunction MapShape(shape, options) {                                                                                    // 2649\n  var firstInit = !this.isShape;                                                                                       // 2650\n  CompositeShape.apply(this, arguments);                                                                               // 2651\n                                                                                                                       // 2652\n  if (firstInit) {                                                                                                     // 2653\n    property(this, 'defaultValue', function() { return {}; });                                                         // 2654\n    property(this, 'key', Shape.create({type: 'string'}, options));                                                    // 2655\n    property(this, 'value', Shape.create({type: 'string'}, options));                                                  // 2656\n  }                                                                                                                    // 2657\n                                                                                                                       // 2658\n  if (shape.key) {                                                                                                     // 2659\n    memoizedProperty(this, 'key', function() {                                                                         // 2660\n      return Shape.create(shape.key, options);                                                                         // 2661\n    });                                                                                                                // 2662\n  }                                                                                                                    // 2663\n  if (shape.value) {                                                                                                   // 2664\n    memoizedProperty(this, 'value', function() {                                                                       // 2665\n      return Shape.create(shape.value, options);                                                                       // 2666\n    });                                                                                                                // 2667\n  }                                                                                                                    // 2668\n}                                                                                                                      // 2669\n                                                                                                                       // 2670\nfunction TimestampShape(shape) {                                                                                       // 2671\n  var self = this;                                                                                                     // 2672\n  Shape.apply(this, arguments);                                                                                        // 2673\n                                                                                                                       // 2674\n  if (this.location === 'header') {                                                                                    // 2675\n    property(this, 'timestampFormat', 'rfc822');                                                                       // 2676\n  } else if (shape.timestampFormat) {                                                                                  // 2677\n    property(this, 'timestampFormat', shape.timestampFormat);                                                          // 2678\n  } else if (this.api) {                                                                                               // 2679\n    if (this.api.timestampFormat) {                                                                                    // 2680\n      property(this, 'timestampFormat', this.api.timestampFormat);                                                     // 2681\n    } else {                                                                                                           // 2682\n      switch (this.api.protocol) {                                                                                     // 2683\n        case 'json':                                                                                                   // 2684\n        case 'rest-json':                                                                                              // 2685\n          property(this, 'timestampFormat', 'unixTimestamp');                                                          // 2686\n          break;                                                                                                       // 2687\n        case 'rest-xml':                                                                                               // 2688\n        case 'query':                                                                                                  // 2689\n        case 'ec2':                                                                                                    // 2690\n          property(this, 'timestampFormat', 'iso8601');                                                                // 2691\n          break;                                                                                                       // 2692\n      }                                                                                                                // 2693\n    }                                                                                                                  // 2694\n  }                                                                                                                    // 2695\n                                                                                                                       // 2696\n  this.toType = function(value) {                                                                                      // 2697\n    if (value === null || value === undefined) return null;                                                            // 2698\n    if (typeof value.toUTCString === 'function') return value;                                                         // 2699\n    return typeof value === 'string' || typeof value === 'number' ?                                                    // 2700\n           util.date.parseTimestamp(value) : null;                                                                     // 2701\n  };                                                                                                                   // 2702\n                                                                                                                       // 2703\n  this.toWireFormat = function(value) {                                                                                // 2704\n    return util.date.format(value, self.timestampFormat);                                                              // 2705\n  };                                                                                                                   // 2706\n}                                                                                                                      // 2707\n                                                                                                                       // 2708\nfunction StringShape() {                                                                                               // 2709\n  Shape.apply(this, arguments);                                                                                        // 2710\n                                                                                                                       // 2711\n  if (this.api) {                                                                                                      // 2712\n    switch (this.api.protocol) {                                                                                       // 2713\n      case 'rest-xml':                                                                                                 // 2714\n      case 'query':                                                                                                    // 2715\n      case 'ec2':                                                                                                      // 2716\n        this.toType = function(value) { return value || ''; };                                                         // 2717\n    }                                                                                                                  // 2718\n  }                                                                                                                    // 2719\n}                                                                                                                      // 2720\n                                                                                                                       // 2721\nfunction FloatShape() {                                                                                                // 2722\n  Shape.apply(this, arguments);                                                                                        // 2723\n                                                                                                                       // 2724\n  this.toType = function(value) {                                                                                      // 2725\n    if (value === null || value === undefined) return null;                                                            // 2726\n    return parseFloat(value);                                                                                          // 2727\n  };                                                                                                                   // 2728\n  this.toWireFormat = this.toType;                                                                                     // 2729\n}                                                                                                                      // 2730\n                                                                                                                       // 2731\nfunction IntegerShape() {                                                                                              // 2732\n  Shape.apply(this, arguments);                                                                                        // 2733\n                                                                                                                       // 2734\n  this.toType = function(value) {                                                                                      // 2735\n    if (value === null || value === undefined) return null;                                                            // 2736\n    return parseInt(value, 10);                                                                                        // 2737\n  };                                                                                                                   // 2738\n  this.toWireFormat = this.toType;                                                                                     // 2739\n}                                                                                                                      // 2740\n                                                                                                                       // 2741\nfunction BinaryShape() {                                                                                               // 2742\n  Shape.apply(this, arguments);                                                                                        // 2743\n  this.toType = util.base64.decode;                                                                                    // 2744\n  this.toWireFormat = util.base64.encode;                                                                              // 2745\n}                                                                                                                      // 2746\n                                                                                                                       // 2747\nfunction Base64Shape() {                                                                                               // 2748\n  BinaryShape.apply(this, arguments);                                                                                  // 2749\n}                                                                                                                      // 2750\n                                                                                                                       // 2751\nfunction BooleanShape() {                                                                                              // 2752\n  Shape.apply(this, arguments);                                                                                        // 2753\n                                                                                                                       // 2754\n  this.toType = function(value) {                                                                                      // 2755\n    if (typeof value === 'boolean') return value;                                                                      // 2756\n    if (value === null || value === undefined) return null;                                                            // 2757\n    return value === 'true';                                                                                           // 2758\n  };                                                                                                                   // 2759\n}                                                                                                                      // 2760\n                                                                                                                       // 2761\n                                                                                                                       // 2762\nShape.shapes = {                                                                                                       // 2763\n  StructureShape: StructureShape,                                                                                      // 2764\n  ListShape: ListShape,                                                                                                // 2765\n  MapShape: MapShape,                                                                                                  // 2766\n  StringShape: StringShape,                                                                                            // 2767\n  BooleanShape: BooleanShape,                                                                                          // 2768\n  Base64Shape: Base64Shape                                                                                             // 2769\n};                                                                                                                     // 2770\n                                                                                                                       // 2771\nmodule.exports = Shape;                                                                                                // 2772\n                                                                                                                       // 2773\n},{\"../util\":59,\"./collection\":22}],27:[function(require,module,exports){                                              // 2774\nvar AWS = require('./core');                                                                                           // 2775\n                                                                                                                       // 2776\n                                                                                                                       // 2777\nAWS.ParamValidator = AWS.util.inherit({                                                                                // 2778\n                                                                                                                       // 2779\n  constructor: function ParamValidator(validation) {                                                                   // 2780\n    if (validation === true || validation === undefined) {                                                             // 2781\n      validation = {'min': true};                                                                                      // 2782\n    }                                                                                                                  // 2783\n    this.validation = validation;                                                                                      // 2784\n  },                                                                                                                   // 2785\n                                                                                                                       // 2786\n  validate: function validate(shape, params, context) {                                                                // 2787\n    this.errors = [];                                                                                                  // 2788\n    this.validateMember(shape, params || {}, context || 'params');                                                     // 2789\n                                                                                                                       // 2790\n    if (this.errors.length > 1) {                                                                                      // 2791\n      var msg = this.errors.join('\\n* ');                                                                              // 2792\n      msg = 'There were ' + this.errors.length +                                                                       // 2793\n        ' validation errors:\\n* ' + msg;                                                                               // 2794\n      throw AWS.util.error(new Error(msg),                                                                             // 2795\n        {code: 'MultipleValidationErrors', errors: this.errors});                                                      // 2796\n    } else if (this.errors.length === 1) {                                                                             // 2797\n      throw this.errors[0];                                                                                            // 2798\n    } else {                                                                                                           // 2799\n      return true;                                                                                                     // 2800\n    }                                                                                                                  // 2801\n  },                                                                                                                   // 2802\n                                                                                                                       // 2803\n  fail: function fail(code, message) {                                                                                 // 2804\n    this.errors.push(AWS.util.error(new Error(message), {code: code}));                                                // 2805\n  },                                                                                                                   // 2806\n                                                                                                                       // 2807\n  validateStructure: function validateStructure(shape, params, context) {                                              // 2808\n    this.validateType(params, context, ['object'], 'structure');                                                       // 2809\n                                                                                                                       // 2810\n    var paramName;                                                                                                     // 2811\n    for (var i = 0; shape.required && i < shape.required.length; i++) {                                                // 2812\n      paramName = shape.required[i];                                                                                   // 2813\n      var value = params[paramName];                                                                                   // 2814\n      if (value === undefined || value === null) {                                                                     // 2815\n        this.fail('MissingRequiredParameter',                                                                          // 2816\n          'Missing required key \\'' + paramName + '\\' in ' + context);                                                 // 2817\n      }                                                                                                                // 2818\n    }                                                                                                                  // 2819\n                                                                                                                       // 2820\n    for (paramName in params) {                                                                                        // 2821\n      if (!params.hasOwnProperty(paramName)) continue;                                                                 // 2822\n                                                                                                                       // 2823\n      var paramValue = params[paramName],                                                                              // 2824\n          memberShape = shape.members[paramName];                                                                      // 2825\n                                                                                                                       // 2826\n      if (memberShape !== undefined) {                                                                                 // 2827\n        var memberContext = [context, paramName].join('.');                                                            // 2828\n        this.validateMember(memberShape, paramValue, memberContext);                                                   // 2829\n      } else {                                                                                                         // 2830\n        this.fail('UnexpectedParameter',                                                                               // 2831\n          'Unexpected key \\'' + paramName + '\\' found in ' + context);                                                 // 2832\n      }                                                                                                                // 2833\n    }                                                                                                                  // 2834\n                                                                                                                       // 2835\n    return true;                                                                                                       // 2836\n  },                                                                                                                   // 2837\n                                                                                                                       // 2838\n  validateMember: function validateMember(shape, param, context) {                                                     // 2839\n    switch (shape.type) {                                                                                              // 2840\n      case 'structure':                                                                                                // 2841\n        return this.validateStructure(shape, param, context);                                                          // 2842\n      case 'list':                                                                                                     // 2843\n        return this.validateList(shape, param, context);                                                               // 2844\n      case 'map':                                                                                                      // 2845\n        return this.validateMap(shape, param, context);                                                                // 2846\n      default:                                                                                                         // 2847\n        return this.validateScalar(shape, param, context);                                                             // 2848\n    }                                                                                                                  // 2849\n  },                                                                                                                   // 2850\n                                                                                                                       // 2851\n  validateList: function validateList(shape, params, context) {                                                        // 2852\n    if (this.validateType(params, context, [Array])) {                                                                 // 2853\n      this.validateRange(shape, params.length, context, 'list member count');                                          // 2854\n      for (var i = 0; i < params.length; i++) {                                                                        // 2855\n        this.validateMember(shape.member, params[i], context + '[' + i + ']');                                         // 2856\n      }                                                                                                                // 2857\n    }                                                                                                                  // 2858\n  },                                                                                                                   // 2859\n                                                                                                                       // 2860\n  validateMap: function validateMap(shape, params, context) {                                                          // 2861\n    if (this.validateType(params, context, ['object'], 'map')) {                                                       // 2862\n      var mapCount = 0;                                                                                                // 2863\n      for (var param in params) {                                                                                      // 2864\n        if (!params.hasOwnProperty(param)) continue;                                                                   // 2865\n        this.validateMember(shape.key, param,                                                                          // 2866\n                            context + '[key=\\'' + param + '\\']')                                                       // 2867\n        this.validateMember(shape.value, params[param],                                                                // 2868\n                            context + '[\\'' + param + '\\']');                                                          // 2869\n        mapCount++;                                                                                                    // 2870\n      }                                                                                                                // 2871\n      this.validateRange(shape, mapCount, context, 'map member count');                                                // 2872\n    }                                                                                                                  // 2873\n  },                                                                                                                   // 2874\n                                                                                                                       // 2875\n  validateScalar: function validateScalar(shape, value, context) {                                                     // 2876\n    switch (shape.type) {                                                                                              // 2877\n      case null:                                                                                                       // 2878\n      case undefined:                                                                                                  // 2879\n      case 'string':                                                                                                   // 2880\n        return this.validateString(shape, value, context);                                                             // 2881\n      case 'base64':                                                                                                   // 2882\n      case 'binary':                                                                                                   // 2883\n        return this.validatePayload(value, context);                                                                   // 2884\n      case 'integer':                                                                                                  // 2885\n      case 'float':                                                                                                    // 2886\n        return this.validateNumber(shape, value, context);                                                             // 2887\n      case 'boolean':                                                                                                  // 2888\n        return this.validateType(value, context, ['boolean']);                                                         // 2889\n      case 'timestamp':                                                                                                // 2890\n        return this.validateType(value, context, [Date,                                                                // 2891\n          /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/, 'number'],                                                 // 2892\n          'Date object, ISO-8601 string, or a UNIX timestamp');                                                        // 2893\n      default:                                                                                                         // 2894\n        return this.fail('UnkownType', 'Unhandled type ' +                                                             // 2895\n                         shape.type + ' for ' + context);                                                              // 2896\n    }                                                                                                                  // 2897\n  },                                                                                                                   // 2898\n                                                                                                                       // 2899\n  validateString: function validateString(shape, value, context) {                                                     // 2900\n    if (this.validateType(value, context, ['string'])) {                                                               // 2901\n      this.validateEnum(shape, value, context);                                                                        // 2902\n      this.validateRange(shape, value.length, context, 'string length');                                               // 2903\n      this.validatePattern(shape, value, context);                                                                     // 2904\n    }                                                                                                                  // 2905\n  },                                                                                                                   // 2906\n                                                                                                                       // 2907\n  validatePattern: function validatePattern(shape, value, context) {                                                   // 2908\n    if (this.validation['pattern'] && shape['pattern'] !== undefined) {                                                // 2909\n      if (!(new RegExp(shape['pattern'])).test(value)) {                                                               // 2910\n        this.fail('PatternMatchError', 'Provided value \"' + value + '\" '                                               // 2911\n          + 'does not match regex pattern /' + shape['pattern'] + '/ for '                                             // 2912\n          + context);                                                                                                  // 2913\n      }                                                                                                                // 2914\n    }                                                                                                                  // 2915\n  },                                                                                                                   // 2916\n                                                                                                                       // 2917\n  validateRange: function validateRange(shape, value, context, descriptor) {                                           // 2918\n    if (this.validation['min']) {                                                                                      // 2919\n      if (shape['min'] !== undefined && value < shape['min']) {                                                        // 2920\n        this.fail('MinRangeError', 'Expected ' + descriptor + ' >= '                                                   // 2921\n          + shape['min'] + ', but found ' + value + ' for ' + context);                                                // 2922\n      }                                                                                                                // 2923\n    }                                                                                                                  // 2924\n    if (this.validation['max']) {                                                                                      // 2925\n      if (shape['max'] !== undefined && value > shape['max']) {                                                        // 2926\n        this.fail('MaxRangeError', 'Expected ' + descriptor + ' <= '                                                   // 2927\n          + shape['max'] + ', but found ' + value + ' for ' + context);                                                // 2928\n      }                                                                                                                // 2929\n    }                                                                                                                  // 2930\n  },                                                                                                                   // 2931\n                                                                                                                       // 2932\n  validateEnum: function validateRange(shape, value, context) {                                                        // 2933\n    if (this.validation['enum'] && shape['enum'] !== undefined) {                                                      // 2934\n      if (shape['enum'].indexOf(value) === -1) {                                                                       // 2935\n        this.fail('EnumError', 'Found string value of ' + value + ', but '                                             // 2936\n          + 'expected ' + shape['enum'].join('|') + ' for ' + context);                                                // 2937\n      }                                                                                                                // 2938\n    }                                                                                                                  // 2939\n  },                                                                                                                   // 2940\n                                                                                                                       // 2941\n  validateType: function validateType(value, context, acceptedTypes, type) {                                           // 2942\n    if (value === null || value === undefined) return false;                                                           // 2943\n                                                                                                                       // 2944\n    var foundInvalidType = false;                                                                                      // 2945\n    for (var i = 0; i < acceptedTypes.length; i++) {                                                                   // 2946\n      if (typeof acceptedTypes[i] === 'string') {                                                                      // 2947\n        if (typeof value === acceptedTypes[i]) return true;                                                            // 2948\n      } else if (acceptedTypes[i] instanceof RegExp) {                                                                 // 2949\n        if ((value || '').toString().match(acceptedTypes[i])) return true;                                             // 2950\n      } else {                                                                                                         // 2951\n        if (value instanceof acceptedTypes[i]) return true;                                                            // 2952\n        if (AWS.util.isType(value, acceptedTypes[i])) return true;                                                     // 2953\n        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();                                         // 2954\n        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);                                                        // 2955\n      }                                                                                                                // 2956\n      foundInvalidType = true;                                                                                         // 2957\n    }                                                                                                                  // 2958\n                                                                                                                       // 2959\n    var acceptedType = type;                                                                                           // 2960\n    if (!acceptedType) {                                                                                               // 2961\n      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');                                          // 2962\n    }                                                                                                                  // 2963\n                                                                                                                       // 2964\n    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';                                                            // 2965\n    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +                                             // 2966\n              vowel + ' ' + acceptedType);                                                                             // 2967\n    return false;                                                                                                      // 2968\n  },                                                                                                                   // 2969\n                                                                                                                       // 2970\n  validateNumber: function validateNumber(shape, value, context) {                                                     // 2971\n    if (value === null || value === undefined) return;                                                                 // 2972\n    if (typeof value === 'string') {                                                                                   // 2973\n      var castedValue = parseFloat(value);                                                                             // 2974\n      if (castedValue.toString() === value) value = castedValue;                                                       // 2975\n    }                                                                                                                  // 2976\n    if (this.validateType(value, context, ['number'])) {                                                               // 2977\n      this.validateRange(shape, value, context, 'numeric value');                                                      // 2978\n    }                                                                                                                  // 2979\n  },                                                                                                                   // 2980\n                                                                                                                       // 2981\n  validatePayload: function validatePayload(value, context) {                                                          // 2982\n    if (value === null || value === undefined) return;                                                                 // 2983\n    if (typeof value === 'string') return;                                                                             // 2984\n    if (value && typeof value.byteLength === 'number') return; // typed arrays                                         // 2985\n    if (AWS.util.isNode()) { // special check for buffer/stream in Node.js                                             // 2986\n      var Stream = AWS.util.nodeRequire('stream').Stream;                                                              // 2987\n      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;                                          // 2988\n    }                                                                                                                  // 2989\n                                                                                                                       // 2990\n    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];                                       // 2991\n    if (value) {                                                                                                       // 2992\n      for (var i = 0; i < types.length; i++) {                                                                         // 2993\n        if (AWS.util.isType(value, types[i])) return;                                                                  // 2994\n        if (AWS.util.typeName(value.constructor) === types[i]) return;                                                 // 2995\n      }                                                                                                                // 2996\n    }                                                                                                                  // 2997\n                                                                                                                       // 2998\n    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +                                            // 2999\n      'string, Buffer, Stream, Blob, or typed array object');                                                          // 3000\n  }                                                                                                                    // 3001\n});                                                                                                                    // 3002\n                                                                                                                       // 3003\n},{\"./core\":4}],28:[function(require,module,exports){                                                                  // 3004\nvar util = require('../util');                                                                                         // 3005\nvar JsonBuilder = require('../json/builder');                                                                          // 3006\nvar JsonParser = require('../json/parser');                                                                            // 3007\n                                                                                                                       // 3008\nfunction buildRequest(req) {                                                                                           // 3009\n  var httpRequest = req.httpRequest;                                                                                   // 3010\n  var api = req.service.api;                                                                                           // 3011\n  var target = api.targetPrefix + '.' + api.operations[req.operation].name;                                            // 3012\n  var version = api.jsonVersion || '1.0';                                                                              // 3013\n  var input = api.operations[req.operation].input;                                                                     // 3014\n  var builder = new JsonBuilder();                                                                                     // 3015\n                                                                                                                       // 3016\n  if (version === 1) version = '1.0';                                                                                  // 3017\n  httpRequest.body = builder.build(req.params || {}, input);                                                           // 3018\n  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;                                           // 3019\n  httpRequest.headers['X-Amz-Target'] = target;                                                                        // 3020\n}                                                                                                                      // 3021\n                                                                                                                       // 3022\nfunction extractError(resp) {                                                                                          // 3023\n  var error = {};                                                                                                      // 3024\n  var httpResponse = resp.httpResponse;                                                                                // 3025\n                                                                                                                       // 3026\n  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';                                             // 3027\n  if (typeof error.code === 'string') {                                                                                // 3028\n    error.code = error.code.split(':')[0];                                                                             // 3029\n  }                                                                                                                    // 3030\n                                                                                                                       // 3031\n  if (httpResponse.body.length > 0) {                                                                                  // 3032\n    var e = JSON.parse(httpResponse.body.toString());                                                                  // 3033\n    if (e.__type || e.code) {                                                                                          // 3034\n      error.code = (e.__type || e.code).split('#').pop();                                                              // 3035\n    }                                                                                                                  // 3036\n    if (error.code === 'RequestEntityTooLarge') {                                                                      // 3037\n      error.message = 'Request body must be less than 1 MB';                                                           // 3038\n    } else {                                                                                                           // 3039\n      error.message = (e.message || e.Message || null);                                                                // 3040\n    }                                                                                                                  // 3041\n  } else {                                                                                                             // 3042\n    error.statusCode = httpResponse.statusCode;                                                                        // 3043\n    error.message = httpResponse.statusCode.toString();                                                                // 3044\n  }                                                                                                                    // 3045\n                                                                                                                       // 3046\n  resp.error = util.error(new Error(), error);                                                                         // 3047\n}                                                                                                                      // 3048\n                                                                                                                       // 3049\nfunction extractData(resp) {                                                                                           // 3050\n  var body = resp.httpResponse.body.toString() || '{}';                                                                // 3051\n  if (resp.request.service.config.convertResponseTypes === false) {                                                    // 3052\n    resp.data = JSON.parse(body);                                                                                      // 3053\n  } else {                                                                                                             // 3054\n    var operation = resp.request.service.api.operations[resp.request.operation];                                       // 3055\n    var shape = operation.output || {};                                                                                // 3056\n    var parser = new JsonParser();                                                                                     // 3057\n    resp.data = parser.parse(body, shape);                                                                             // 3058\n  }                                                                                                                    // 3059\n}                                                                                                                      // 3060\n                                                                                                                       // 3061\nmodule.exports = {                                                                                                     // 3062\n  buildRequest: buildRequest,                                                                                          // 3063\n  extractError: extractError,                                                                                          // 3064\n  extractData: extractData                                                                                             // 3065\n};                                                                                                                     // 3066\n                                                                                                                       // 3067\n},{\"../json/builder\":19,\"../json/parser\":20,\"../util\":59}],29:[function(require,module,exports){                       // 3068\nvar AWS = require('../core');                                                                                          // 3069\nvar util = require('../util');                                                                                         // 3070\nvar QueryParamSerializer = require('../query/query_param_serializer');                                                 // 3071\nvar Shape = require('../model/shape');                                                                                 // 3072\n                                                                                                                       // 3073\nfunction buildRequest(req) {                                                                                           // 3074\n  var operation = req.service.api.operations[req.operation];                                                           // 3075\n  var httpRequest = req.httpRequest;                                                                                   // 3076\n  httpRequest.headers['Content-Type'] =                                                                                // 3077\n    'application/x-www-form-urlencoded; charset=utf-8';                                                                // 3078\n  httpRequest.params = {                                                                                               // 3079\n    Version: req.service.api.apiVersion,                                                                               // 3080\n    Action: operation.name                                                                                             // 3081\n  };                                                                                                                   // 3082\n                                                                                                                       // 3083\n  var builder = new QueryParamSerializer();                                                                            // 3084\n  builder.serialize(req.params, operation.input, function(name, value) {                                               // 3085\n    httpRequest.params[name] = value;                                                                                  // 3086\n  });                                                                                                                  // 3087\n  httpRequest.body = util.queryParamsToString(httpRequest.params);                                                     // 3088\n}                                                                                                                      // 3089\n                                                                                                                       // 3090\nfunction extractError(resp) {                                                                                          // 3091\n  var data, body = resp.httpResponse.body.toString();                                                                  // 3092\n  if (body.match('<UnknownOperationException')) {                                                                      // 3093\n    data = {                                                                                                           // 3094\n      Code: 'UnknownOperation',                                                                                        // 3095\n      Message: 'Unknown operation ' + resp.request.operation                                                           // 3096\n    };                                                                                                                 // 3097\n  } else {                                                                                                             // 3098\n    data = new AWS.XML.Parser().parse(body);                                                                           // 3099\n  }                                                                                                                    // 3100\n                                                                                                                       // 3101\n  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;                                              // 3102\n  if (data.Errors) data = data.Errors;                                                                                 // 3103\n  if (data.Error) data = data.Error;                                                                                   // 3104\n  if (data.Code) {                                                                                                     // 3105\n    resp.error = util.error(new Error(), {                                                                             // 3106\n      code: data.Code,                                                                                                 // 3107\n      message: data.Message                                                                                            // 3108\n    });                                                                                                                // 3109\n  } else {                                                                                                             // 3110\n    resp.error = util.error(new Error(), {                                                                             // 3111\n      code: resp.httpResponse.statusCode,                                                                              // 3112\n      message: null                                                                                                    // 3113\n    });                                                                                                                // 3114\n  }                                                                                                                    // 3115\n}                                                                                                                      // 3116\n                                                                                                                       // 3117\nfunction extractData(resp) {                                                                                           // 3118\n  var req = resp.request;                                                                                              // 3119\n  var operation = req.service.api.operations[req.operation];                                                           // 3120\n  var shape = operation.output || {};                                                                                  // 3121\n  var origRules = shape;                                                                                               // 3122\n                                                                                                                       // 3123\n  if (origRules.resultWrapper) {                                                                                       // 3124\n    var tmp = Shape.create({type: 'structure'});                                                                       // 3125\n    tmp.members[origRules.resultWrapper] = shape;                                                                      // 3126\n    tmp.memberNames = [origRules.resultWrapper];                                                                       // 3127\n    util.property(shape, 'name', shape.resultWrapper);                                                                 // 3128\n    shape = tmp;                                                                                                       // 3129\n  }                                                                                                                    // 3130\n                                                                                                                       // 3131\n  var parser = new AWS.XML.Parser();                                                                                   // 3132\n                                                                                                                       // 3133\n  if (shape && shape.members && !shape.members._XAMZRequestId) {                                                       // 3134\n    var requestIdShape = Shape.create(                                                                                 // 3135\n      { type: 'string' },                                                                                              // 3136\n      { api: { protocol: 'query' } },                                                                                  // 3137\n      'requestId'                                                                                                      // 3138\n    );                                                                                                                 // 3139\n    shape.members._XAMZRequestId = requestIdShape;                                                                     // 3140\n  }                                                                                                                    // 3141\n                                                                                                                       // 3142\n  var data = parser.parse(resp.httpResponse.body.toString(), shape);                                                   // 3143\n  resp.requestId = data._XAMZRequestId || data.requestId;                                                              // 3144\n                                                                                                                       // 3145\n  if (data._XAMZRequestId) delete data._XAMZRequestId;                                                                 // 3146\n                                                                                                                       // 3147\n  if (origRules.resultWrapper) {                                                                                       // 3148\n    if (data[origRules.resultWrapper]) {                                                                               // 3149\n      util.update(data, data[origRules.resultWrapper]);                                                                // 3150\n      delete data[origRules.resultWrapper];                                                                            // 3151\n    }                                                                                                                  // 3152\n  }                                                                                                                    // 3153\n                                                                                                                       // 3154\n  resp.data = data;                                                                                                    // 3155\n}                                                                                                                      // 3156\n                                                                                                                       // 3157\nmodule.exports = {                                                                                                     // 3158\n  buildRequest: buildRequest,                                                                                          // 3159\n  extractError: extractError,                                                                                          // 3160\n  extractData: extractData                                                                                             // 3161\n};                                                                                                                     // 3162\n                                                                                                                       // 3163\n},{\"../core\":4,\"../model/shape\":26,\"../query/query_param_serializer\":33,\"../util\":59}],30:[function(require,module,exports){\nvar util = require('../util');                                                                                         // 3165\n                                                                                                                       // 3166\nfunction populateMethod(req) {                                                                                         // 3167\n  req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;                                       // 3168\n}                                                                                                                      // 3169\n                                                                                                                       // 3170\nfunction populateURI(req) {                                                                                            // 3171\n  var operation = req.service.api.operations[req.operation];                                                           // 3172\n  var input = operation.input;                                                                                         // 3173\n  var uri = [req.httpRequest.endpoint.path, operation.httpPath].join('/');                                             // 3174\n  uri = uri.replace(/\\/+/g, '/');                                                                                      // 3175\n                                                                                                                       // 3176\n  var queryString = {}, queryStringSet = false;                                                                        // 3177\n  util.each(input.members, function (name, member) {                                                                   // 3178\n    var paramValue = req.params[name];                                                                                 // 3179\n    if (paramValue === null || paramValue === undefined) return;                                                       // 3180\n    if (member.location === 'uri') {                                                                                   // 3181\n      var regex = new RegExp('\\\\{' + member.name + '(\\\\+)?\\\\}');                                                       // 3182\n      uri = uri.replace(regex, function(_, plus) {                                                                     // 3183\n        var fn = plus ? util.uriEscapePath : util.uriEscape;                                                           // 3184\n        return fn(String(paramValue));                                                                                 // 3185\n      });                                                                                                              // 3186\n    } else if (member.location === 'querystring') {                                                                    // 3187\n      queryStringSet = true;                                                                                           // 3188\n                                                                                                                       // 3189\n      if (member.type === 'list') {                                                                                    // 3190\n        queryString[member.name] = paramValue.map(function(val) {                                                      // 3191\n          return util.uriEscape(String(val));                                                                          // 3192\n        });                                                                                                            // 3193\n      } else if (member.type === 'map') {                                                                              // 3194\n        util.each(paramValue, function(key, value) {                                                                   // 3195\n          if (Array.isArray(value)) {                                                                                  // 3196\n            queryString[key] = value.map(function(val) {                                                               // 3197\n              return util.uriEscape(String(val));                                                                      // 3198\n            });                                                                                                        // 3199\n          } else {                                                                                                     // 3200\n            queryString[key] = util.uriEscape(String(value));                                                          // 3201\n          }                                                                                                            // 3202\n        });                                                                                                            // 3203\n      } else {                                                                                                         // 3204\n        queryString[member.name] = util.uriEscape(String(paramValue));                                                 // 3205\n      }                                                                                                                // 3206\n    }                                                                                                                  // 3207\n  });                                                                                                                  // 3208\n                                                                                                                       // 3209\n  if (queryStringSet) {                                                                                                // 3210\n    uri += (uri.indexOf('?') >= 0 ? '&' : '?');                                                                        // 3211\n    var parts = [];                                                                                                    // 3212\n    util.arrayEach(Object.keys(queryString).sort(), function(key) {                                                    // 3213\n      if (!Array.isArray(queryString[key])) {                                                                          // 3214\n        queryString[key] = [queryString[key]];                                                                         // 3215\n      }                                                                                                                // 3216\n      for (var i = 0; i < queryString[key].length; i++) {                                                              // 3217\n        parts.push(util.uriEscape(String(key)) + '=' + queryString[key][i]);                                           // 3218\n      }                                                                                                                // 3219\n    });                                                                                                                // 3220\n    uri += parts.join('&');                                                                                            // 3221\n  }                                                                                                                    // 3222\n                                                                                                                       // 3223\n  req.httpRequest.path = uri;                                                                                          // 3224\n}                                                                                                                      // 3225\n                                                                                                                       // 3226\nfunction populateHeaders(req) {                                                                                        // 3227\n  var operation = req.service.api.operations[req.operation];                                                           // 3228\n  util.each(operation.input.members, function (name, member) {                                                         // 3229\n    var value = req.params[name];                                                                                      // 3230\n    if (value === null || value === undefined) return;                                                                 // 3231\n                                                                                                                       // 3232\n    if (member.location === 'headers' && member.type === 'map') {                                                      // 3233\n      util.each(value, function(key, memberValue) {                                                                    // 3234\n        req.httpRequest.headers[member.name + key] = memberValue;                                                      // 3235\n      });                                                                                                              // 3236\n    } else if (member.location === 'header') {                                                                         // 3237\n      value = member.toWireFormat(value).toString();                                                                   // 3238\n      req.httpRequest.headers[member.name] = value;                                                                    // 3239\n    }                                                                                                                  // 3240\n  });                                                                                                                  // 3241\n}                                                                                                                      // 3242\n                                                                                                                       // 3243\nfunction buildRequest(req) {                                                                                           // 3244\n  populateMethod(req);                                                                                                 // 3245\n  populateURI(req);                                                                                                    // 3246\n  populateHeaders(req);                                                                                                // 3247\n}                                                                                                                      // 3248\n                                                                                                                       // 3249\nfunction extractError() {                                                                                              // 3250\n}                                                                                                                      // 3251\n                                                                                                                       // 3252\nfunction extractData(resp) {                                                                                           // 3253\n  var req = resp.request;                                                                                              // 3254\n  var data = {};                                                                                                       // 3255\n  var r = resp.httpResponse;                                                                                           // 3256\n  var operation = req.service.api.operations[req.operation];                                                           // 3257\n  var output = operation.output;                                                                                       // 3258\n                                                                                                                       // 3259\n  var headers = {};                                                                                                    // 3260\n  util.each(r.headers, function (k, v) {                                                                               // 3261\n    headers[k.toLowerCase()] = v;                                                                                      // 3262\n  });                                                                                                                  // 3263\n                                                                                                                       // 3264\n  util.each(output.members, function(name, member) {                                                                   // 3265\n    var header = (member.name || name).toLowerCase();                                                                  // 3266\n    if (member.location === 'headers' && member.type === 'map') {                                                      // 3267\n      data[name] = {};                                                                                                 // 3268\n      var location = member.isLocationName ? member.name : '';                                                         // 3269\n      var pattern = new RegExp('^' + location + '(.+)', 'i');                                                          // 3270\n      util.each(r.headers, function (k, v) {                                                                           // 3271\n        var result = k.match(pattern);                                                                                 // 3272\n        if (result !== null) {                                                                                         // 3273\n          data[name][result[1]] = v;                                                                                   // 3274\n        }                                                                                                              // 3275\n      });                                                                                                              // 3276\n    } else if (member.location === 'header') {                                                                         // 3277\n      if (headers[header] !== undefined) {                                                                             // 3278\n        data[name] = headers[header];                                                                                  // 3279\n      }                                                                                                                // 3280\n    } else if (member.location === 'statusCode') {                                                                     // 3281\n      data[name] = parseInt(r.statusCode, 10);                                                                         // 3282\n    }                                                                                                                  // 3283\n  });                                                                                                                  // 3284\n                                                                                                                       // 3285\n  resp.data = data;                                                                                                    // 3286\n}                                                                                                                      // 3287\n                                                                                                                       // 3288\nmodule.exports = {                                                                                                     // 3289\n  buildRequest: buildRequest,                                                                                          // 3290\n  extractError: extractError,                                                                                          // 3291\n  extractData: extractData                                                                                             // 3292\n};                                                                                                                     // 3293\n                                                                                                                       // 3294\n},{\"../util\":59}],31:[function(require,module,exports){                                                                // 3295\nvar util = require('../util');                                                                                         // 3296\nvar Rest = require('./rest');                                                                                          // 3297\nvar Json = require('./json');                                                                                          // 3298\nvar JsonBuilder = require('../json/builder');                                                                          // 3299\nvar JsonParser = require('../json/parser');                                                                            // 3300\n                                                                                                                       // 3301\nfunction populateBody(req) {                                                                                           // 3302\n  var builder = new JsonBuilder();                                                                                     // 3303\n  var input = req.service.api.operations[req.operation].input;                                                         // 3304\n                                                                                                                       // 3305\n  if (input.payload) {                                                                                                 // 3306\n    var params = {};                                                                                                   // 3307\n    var payloadShape = input.members[input.payload];                                                                   // 3308\n    params = req.params[input.payload];                                                                                // 3309\n    if (params === undefined) return;                                                                                  // 3310\n                                                                                                                       // 3311\n    if (payloadShape.type === 'structure') {                                                                           // 3312\n      req.httpRequest.body = builder.build(params, payloadShape);                                                      // 3313\n    } else { // non-JSON payload                                                                                       // 3314\n      req.httpRequest.body = params;                                                                                   // 3315\n    }                                                                                                                  // 3316\n  } else {                                                                                                             // 3317\n    req.httpRequest.body = builder.build(req.params, input);                                                           // 3318\n  }                                                                                                                    // 3319\n}                                                                                                                      // 3320\n                                                                                                                       // 3321\nfunction buildRequest(req) {                                                                                           // 3322\n  Rest.buildRequest(req);                                                                                              // 3323\n                                                                                                                       // 3324\n  if (['GET', 'HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {                                                 // 3325\n    populateBody(req);                                                                                                 // 3326\n  }                                                                                                                    // 3327\n}                                                                                                                      // 3328\n                                                                                                                       // 3329\nfunction extractError(resp) {                                                                                          // 3330\n  Json.extractError(resp);                                                                                             // 3331\n}                                                                                                                      // 3332\n                                                                                                                       // 3333\nfunction extractData(resp) {                                                                                           // 3334\n  Rest.extractData(resp);                                                                                              // 3335\n                                                                                                                       // 3336\n  var req = resp.request;                                                                                              // 3337\n  var rules = req.service.api.operations[req.operation].output || {};                                                  // 3338\n  if (rules.payload) {                                                                                                 // 3339\n    var payloadMember = rules.members[rules.payload];                                                                  // 3340\n    var body = resp.httpResponse.body;                                                                                 // 3341\n    if (payloadMember.isStreaming) {                                                                                   // 3342\n      resp.data[rules.payload] = body;                                                                                 // 3343\n    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {                                  // 3344\n      var parser = new JsonParser();                                                                                   // 3345\n      resp.data[rules.payload] = parser.parse(body, payloadMember);                                                    // 3346\n    } else {                                                                                                           // 3347\n      resp.data[rules.payload] = body.toString();                                                                      // 3348\n    }                                                                                                                  // 3349\n  } else {                                                                                                             // 3350\n    var data = resp.data;                                                                                              // 3351\n    Json.extractData(resp);                                                                                            // 3352\n    resp.data = util.merge(data, resp.data);                                                                           // 3353\n  }                                                                                                                    // 3354\n}                                                                                                                      // 3355\n                                                                                                                       // 3356\nmodule.exports = {                                                                                                     // 3357\n  buildRequest: buildRequest,                                                                                          // 3358\n  extractError: extractError,                                                                                          // 3359\n  extractData: extractData                                                                                             // 3360\n};                                                                                                                     // 3361\n                                                                                                                       // 3362\n},{\"../json/builder\":19,\"../json/parser\":20,\"../util\":59,\"./json\":28,\"./rest\":30}],32:[function(require,module,exports){\nvar AWS = require('../core');                                                                                          // 3364\nvar util = require('../util');                                                                                         // 3365\nvar Rest = require('./rest');                                                                                          // 3366\n                                                                                                                       // 3367\nfunction populateBody(req) {                                                                                           // 3368\n  var input = req.service.api.operations[req.operation].input;                                                         // 3369\n  var builder = new AWS.XML.Builder();                                                                                 // 3370\n  var params = req.params;                                                                                             // 3371\n                                                                                                                       // 3372\n  var payload = input.payload;                                                                                         // 3373\n  if (payload) {                                                                                                       // 3374\n    var payloadMember = input.members[payload];                                                                        // 3375\n    params = params[payload];                                                                                          // 3376\n    if (params === undefined) return;                                                                                  // 3377\n                                                                                                                       // 3378\n    if (payloadMember.type === 'structure') {                                                                          // 3379\n      var rootElement = payloadMember.name;                                                                            // 3380\n      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);                                  // 3381\n    } else { // non-xml payload                                                                                        // 3382\n      req.httpRequest.body = params;                                                                                   // 3383\n    }                                                                                                                  // 3384\n  } else {                                                                                                             // 3385\n    req.httpRequest.body = builder.toXML(params, input, input.name ||                                                  // 3386\n      input.shape || util.string.upperFirst(req.operation) + 'Request');                                               // 3387\n  }                                                                                                                    // 3388\n}                                                                                                                      // 3389\n                                                                                                                       // 3390\nfunction buildRequest(req) {                                                                                           // 3391\n  Rest.buildRequest(req);                                                                                              // 3392\n                                                                                                                       // 3393\n  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {                                                           // 3394\n    populateBody(req);                                                                                                 // 3395\n  }                                                                                                                    // 3396\n}                                                                                                                      // 3397\n                                                                                                                       // 3398\nfunction extractError(resp) {                                                                                          // 3399\n  Rest.extractError(resp);                                                                                             // 3400\n                                                                                                                       // 3401\n  var data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());                                            // 3402\n  if (data.Errors) data = data.Errors;                                                                                 // 3403\n  if (data.Error) data = data.Error;                                                                                   // 3404\n  if (data.Code) {                                                                                                     // 3405\n    resp.error = util.error(new Error(), {                                                                             // 3406\n      code: data.Code,                                                                                                 // 3407\n      message: data.Message                                                                                            // 3408\n    });                                                                                                                // 3409\n  } else {                                                                                                             // 3410\n    resp.error = util.error(new Error(), {                                                                             // 3411\n      code: resp.httpResponse.statusCode,                                                                              // 3412\n      message: null                                                                                                    // 3413\n    });                                                                                                                // 3414\n  }                                                                                                                    // 3415\n}                                                                                                                      // 3416\n                                                                                                                       // 3417\nfunction extractData(resp) {                                                                                           // 3418\n  Rest.extractData(resp);                                                                                              // 3419\n                                                                                                                       // 3420\n  var parser;                                                                                                          // 3421\n  var req = resp.request;                                                                                              // 3422\n  var body = resp.httpResponse.body;                                                                                   // 3423\n  var operation = req.service.api.operations[req.operation];                                                           // 3424\n  var output = operation.output;                                                                                       // 3425\n                                                                                                                       // 3426\n  var payload = output.payload;                                                                                        // 3427\n  if (payload) {                                                                                                       // 3428\n    var payloadMember = output.members[payload];                                                                       // 3429\n    if (payloadMember.isStreaming) {                                                                                   // 3430\n      resp.data[payload] = body;                                                                                       // 3431\n    } else if (payloadMember.type === 'structure') {                                                                   // 3432\n      parser = new AWS.XML.Parser();                                                                                   // 3433\n      resp.data[payload] = parser.parse(body.toString(), payloadMember);                                               // 3434\n    } else {                                                                                                           // 3435\n      resp.data[payload] = body.toString();                                                                            // 3436\n    }                                                                                                                  // 3437\n  } else if (body.length > 0) {                                                                                        // 3438\n    parser = new AWS.XML.Parser();                                                                                     // 3439\n    var data = parser.parse(body.toString(), output);                                                                  // 3440\n    util.update(resp.data, data);                                                                                      // 3441\n  }                                                                                                                    // 3442\n}                                                                                                                      // 3443\n                                                                                                                       // 3444\nmodule.exports = {                                                                                                     // 3445\n  buildRequest: buildRequest,                                                                                          // 3446\n  extractError: extractError,                                                                                          // 3447\n  extractData: extractData                                                                                             // 3448\n};                                                                                                                     // 3449\n                                                                                                                       // 3450\n},{\"../core\":4,\"../util\":59,\"./rest\":30}],33:[function(require,module,exports){                                        // 3451\nvar util = require('../util');                                                                                         // 3452\n                                                                                                                       // 3453\nfunction QueryParamSerializer() {                                                                                      // 3454\n}                                                                                                                      // 3455\n                                                                                                                       // 3456\nQueryParamSerializer.prototype.serialize = function(params, shape, fn) {                                               // 3457\n  serializeStructure('', params, shape, fn);                                                                           // 3458\n};                                                                                                                     // 3459\n                                                                                                                       // 3460\nfunction ucfirst(shape) {                                                                                              // 3461\n  if (shape.isQueryName || shape.api.protocol !== 'ec2') {                                                             // 3462\n    return shape.name;                                                                                                 // 3463\n  } else {                                                                                                             // 3464\n    return shape.name[0].toUpperCase() + shape.name.substr(1);                                                         // 3465\n  }                                                                                                                    // 3466\n}                                                                                                                      // 3467\n                                                                                                                       // 3468\nfunction serializeStructure(prefix, struct, rules, fn) {                                                               // 3469\n  util.each(rules.members, function(name, member) {                                                                    // 3470\n    var value = struct[name];                                                                                          // 3471\n    if (value === null || value === undefined) return;                                                                 // 3472\n                                                                                                                       // 3473\n    var memberName = ucfirst(member);                                                                                  // 3474\n    memberName = prefix ? prefix + '.' + memberName : memberName;                                                      // 3475\n    serializeMember(memberName, value, member, fn);                                                                    // 3476\n  });                                                                                                                  // 3477\n}                                                                                                                      // 3478\n                                                                                                                       // 3479\nfunction serializeMap(name, map, rules, fn) {                                                                          // 3480\n  var i = 1;                                                                                                           // 3481\n  util.each(map, function (key, value) {                                                                               // 3482\n    var prefix = rules.flattened ? '.' : '.entry.';                                                                    // 3483\n    var position = prefix + (i++) + '.';                                                                               // 3484\n    var keyName = position + (rules.key.name || 'key');                                                                // 3485\n    var valueName = position + (rules.value.name || 'value');                                                          // 3486\n    serializeMember(name + keyName, key, rules.key, fn);                                                               // 3487\n    serializeMember(name + valueName, value, rules.value, fn);                                                         // 3488\n  });                                                                                                                  // 3489\n}                                                                                                                      // 3490\n                                                                                                                       // 3491\nfunction serializeList(name, list, rules, fn) {                                                                        // 3492\n  var memberRules = rules.member || {};                                                                                // 3493\n                                                                                                                       // 3494\n  if (list.length === 0) {                                                                                             // 3495\n    fn.call(this, name, null);                                                                                         // 3496\n    return;                                                                                                            // 3497\n  }                                                                                                                    // 3498\n                                                                                                                       // 3499\n  util.arrayEach(list, function (v, n) {                                                                               // 3500\n    var suffix = '.' + (n + 1);                                                                                        // 3501\n    if (rules.api.protocol === 'ec2') {                                                                                // 3502\n      suffix = suffix + ''; // make linter happy                                                                       // 3503\n    } else if (rules.flattened) {                                                                                      // 3504\n      if (memberRules.name) {                                                                                          // 3505\n        var parts = name.split('.');                                                                                   // 3506\n        parts.pop();                                                                                                   // 3507\n        parts.push(ucfirst(memberRules));                                                                              // 3508\n        name = parts.join('.');                                                                                        // 3509\n      }                                                                                                                // 3510\n    } else {                                                                                                           // 3511\n      suffix = '.member' + suffix;                                                                                     // 3512\n    }                                                                                                                  // 3513\n    serializeMember(name + suffix, v, memberRules, fn);                                                                // 3514\n  });                                                                                                                  // 3515\n}                                                                                                                      // 3516\n                                                                                                                       // 3517\nfunction serializeMember(name, value, rules, fn) {                                                                     // 3518\n  if (value === null || value === undefined) return;                                                                   // 3519\n  if (rules.type === 'structure') {                                                                                    // 3520\n    serializeStructure(name, value, rules, fn);                                                                        // 3521\n  } else if (rules.type === 'list') {                                                                                  // 3522\n    serializeList(name, value, rules, fn);                                                                             // 3523\n  } else if (rules.type === 'map') {                                                                                   // 3524\n    serializeMap(name, value, rules, fn);                                                                              // 3525\n  } else {                                                                                                             // 3526\n    fn(name, rules.toWireFormat(value).toString());                                                                    // 3527\n  }                                                                                                                    // 3528\n}                                                                                                                      // 3529\n                                                                                                                       // 3530\nmodule.exports = QueryParamSerializer;                                                                                 // 3531\n                                                                                                                       // 3532\n},{\"../util\":59}],34:[function(require,module,exports){                                                                // 3533\nvar util = require('./util');                                                                                          // 3534\nvar regionConfig = require('./region_config.json');                                                                    // 3535\n                                                                                                                       // 3536\nfunction generateRegionPrefix(region) {                                                                                // 3537\n  if (!region) return null;                                                                                            // 3538\n                                                                                                                       // 3539\n  var parts = region.split('-');                                                                                       // 3540\n  if (parts.length < 3) return null;                                                                                   // 3541\n  return parts.slice(0, parts.length - 2).join('-') + '-*';                                                            // 3542\n}                                                                                                                      // 3543\n                                                                                                                       // 3544\nfunction derivedKeys(service) {                                                                                        // 3545\n  var region = service.config.region;                                                                                  // 3546\n  var regionPrefix = generateRegionPrefix(region);                                                                     // 3547\n  var endpointPrefix = service.api.endpointPrefix;                                                                     // 3548\n                                                                                                                       // 3549\n  return [                                                                                                             // 3550\n    [region, endpointPrefix],                                                                                          // 3551\n    [regionPrefix, endpointPrefix],                                                                                    // 3552\n    [region, '*'],                                                                                                     // 3553\n    [regionPrefix, '*'],                                                                                               // 3554\n    ['*', endpointPrefix],                                                                                             // 3555\n    ['*', '*']                                                                                                         // 3556\n  ].map(function(item) {                                                                                               // 3557\n    return item[0] && item[1] ? item.join('/') : null;                                                                 // 3558\n  });                                                                                                                  // 3559\n}                                                                                                                      // 3560\n                                                                                                                       // 3561\nfunction applyConfig(service, config) {                                                                                // 3562\n  util.each(config, function(key, value) {                                                                             // 3563\n    if (key === 'globalEndpoint') return;                                                                              // 3564\n    if (service.config[key] === undefined || service.config[key] === null) {                                           // 3565\n      service.config[key] = value;                                                                                     // 3566\n    }                                                                                                                  // 3567\n  });                                                                                                                  // 3568\n}                                                                                                                      // 3569\n                                                                                                                       // 3570\nfunction configureEndpoint(service) {                                                                                  // 3571\n  var keys = derivedKeys(service);                                                                                     // 3572\n  for (var i = 0; i < keys.length; i++) {                                                                              // 3573\n    var key = keys[i];                                                                                                 // 3574\n    if (!key) continue;                                                                                                // 3575\n                                                                                                                       // 3576\n    if (regionConfig.rules.hasOwnProperty(key)) {                                                                      // 3577\n      var config = regionConfig.rules[key];                                                                            // 3578\n      if (typeof config === 'string') {                                                                                // 3579\n        config = regionConfig.patterns[config];                                                                        // 3580\n      }                                                                                                                // 3581\n                                                                                                                       // 3582\n      service.isGlobalEndpoint = !!config.globalEndpoint;                                                              // 3583\n                                                                                                                       // 3584\n      if (!config.signatureVersion) config.signatureVersion = 'v4';                                                    // 3585\n                                                                                                                       // 3586\n      applyConfig(service, config);                                                                                    // 3587\n      return;                                                                                                          // 3588\n    }                                                                                                                  // 3589\n  }                                                                                                                    // 3590\n}                                                                                                                      // 3591\n                                                                                                                       // 3592\nmodule.exports = configureEndpoint;                                                                                    // 3593\n                                                                                                                       // 3594\n},{\"./region_config.json\":35,\"./util\":59}],35:[function(require,module,exports){                                       // 3595\nmodule.exports={                                                                                                       // 3596\n  \"rules\": {                                                                                                           // 3597\n    \"*/*\": {                                                                                                           // 3598\n      \"endpoint\": \"{service}.{region}.amazonaws.com\"                                                                   // 3599\n    },                                                                                                                 // 3600\n    \"cn-*/*\": {                                                                                                        // 3601\n      \"endpoint\": \"{service}.{region}.amazonaws.com.cn\"                                                                // 3602\n    },                                                                                                                 // 3603\n    \"*/cloudfront\": \"globalSSL\",                                                                                       // 3604\n    \"*/iam\": \"globalSSL\",                                                                                              // 3605\n    \"*/sts\": \"globalSSL\",                                                                                              // 3606\n    \"*/importexport\": {                                                                                                // 3607\n      \"endpoint\": \"{service}.amazonaws.com\",                                                                           // 3608\n      \"signatureVersion\": \"v2\",                                                                                        // 3609\n      \"globalEndpoint\": true                                                                                           // 3610\n    },                                                                                                                 // 3611\n    \"*/route53\": {                                                                                                     // 3612\n      \"endpoint\": \"https://{service}.amazonaws.com\",                                                                   // 3613\n      \"signatureVersion\": \"v3https\",                                                                                   // 3614\n      \"globalEndpoint\": true                                                                                           // 3615\n    },                                                                                                                 // 3616\n    \"*/waf\": \"globalSSL\",                                                                                              // 3617\n    \"us-gov-*/iam\": \"globalGovCloud\",                                                                                  // 3618\n    \"us-gov-*/sts\": {                                                                                                  // 3619\n      \"endpoint\": \"{service}.{region}.amazonaws.com\"                                                                   // 3620\n    },                                                                                                                 // 3621\n    \"us-gov-west-1/s3\": \"s3dash\",                                                                                      // 3622\n    \"us-west-1/s3\": \"s3dash\",                                                                                          // 3623\n    \"us-west-2/s3\": \"s3dash\",                                                                                          // 3624\n    \"eu-west-1/s3\": \"s3dash\",                                                                                          // 3625\n    \"ap-southeast-1/s3\": \"s3dash\",                                                                                     // 3626\n    \"ap-southeast-2/s3\": \"s3dash\",                                                                                     // 3627\n    \"ap-northeast-1/s3\": \"s3dash\",                                                                                     // 3628\n    \"sa-east-1/s3\": \"s3dash\",                                                                                          // 3629\n    \"us-east-1/s3\": {                                                                                                  // 3630\n      \"endpoint\": \"{service}.amazonaws.com\",                                                                           // 3631\n      \"signatureVersion\": \"s3\"                                                                                         // 3632\n    },                                                                                                                 // 3633\n    \"us-east-1/sdb\": {                                                                                                 // 3634\n      \"endpoint\": \"{service}.amazonaws.com\",                                                                           // 3635\n      \"signatureVersion\": \"v2\"                                                                                         // 3636\n    },                                                                                                                 // 3637\n    \"*/sdb\": {                                                                                                         // 3638\n      \"endpoint\": \"{service}.{region}.amazonaws.com\",                                                                  // 3639\n      \"signatureVersion\": \"v2\"                                                                                         // 3640\n    }                                                                                                                  // 3641\n  },                                                                                                                   // 3642\n                                                                                                                       // 3643\n  \"patterns\": {                                                                                                        // 3644\n    \"globalSSL\": {                                                                                                     // 3645\n      \"endpoint\": \"https://{service}.amazonaws.com\",                                                                   // 3646\n      \"globalEndpoint\": true                                                                                           // 3647\n    },                                                                                                                 // 3648\n    \"globalGovCloud\": {                                                                                                // 3649\n      \"endpoint\": \"{service}.us-gov.amazonaws.com\"                                                                     // 3650\n    },                                                                                                                 // 3651\n    \"s3dash\": {                                                                                                        // 3652\n      \"endpoint\": \"{service}-{region}.amazonaws.com\",                                                                  // 3653\n      \"signatureVersion\": \"s3\"                                                                                         // 3654\n    }                                                                                                                  // 3655\n  }                                                                                                                    // 3656\n}                                                                                                                      // 3657\n                                                                                                                       // 3658\n},{}],36:[function(require,module,exports){                                                                            // 3659\n(function (process){                                                                                                   // 3660\nvar AWS = require('./core');                                                                                           // 3661\nvar AcceptorStateMachine = require('./state_machine');                                                                 // 3662\nvar inherit = AWS.util.inherit;                                                                                        // 3663\nvar domain = AWS.util.nodeRequire('domain');                                                                           // 3664\n                                                                                                                       // 3665\n                                                                                                                       // 3666\nvar hardErrorStates = {success: 1, error: 1, complete: 1};                                                             // 3667\n                                                                                                                       // 3668\nfunction isTerminalState(machine) {                                                                                    // 3669\n  return hardErrorStates.hasOwnProperty(machine._asm.currentState);                                                    // 3670\n}                                                                                                                      // 3671\n                                                                                                                       // 3672\nvar fsm = new AcceptorStateMachine();                                                                                  // 3673\nfsm.setupStates = function() {                                                                                         // 3674\n  var transition = function(_, done) {                                                                                 // 3675\n    var self = this;                                                                                                   // 3676\n    self._haltHandlersOnError = false;                                                                                 // 3677\n                                                                                                                       // 3678\n    self.emit(self._asm.currentState, function(err) {                                                                  // 3679\n      if (err) {                                                                                                       // 3680\n        if (isTerminalState(self)) {                                                                                   // 3681\n          if (domain && self.domain instanceof domain.Domain) {                                                        // 3682\n            err.domainEmitter = self;                                                                                  // 3683\n            err.domain = self.domain;                                                                                  // 3684\n            err.domainThrown = false;                                                                                  // 3685\n            self.domain.emit('error', err);                                                                            // 3686\n          } else {                                                                                                     // 3687\n            throw err;                                                                                                 // 3688\n          }                                                                                                            // 3689\n        } else {                                                                                                       // 3690\n          self.response.error = err;                                                                                   // 3691\n          done(err);                                                                                                   // 3692\n        }                                                                                                              // 3693\n      } else {                                                                                                         // 3694\n        done(self.response.error);                                                                                     // 3695\n      }                                                                                                                // 3696\n    });                                                                                                                // 3697\n                                                                                                                       // 3698\n  };                                                                                                                   // 3699\n                                                                                                                       // 3700\n  this.addState('validate', 'build', 'error', transition);                                                             // 3701\n  this.addState('build', 'afterBuild', 'restart', transition);                                                         // 3702\n  this.addState('afterBuild', 'sign', 'restart', transition);                                                          // 3703\n  this.addState('sign', 'send', 'retry', transition);                                                                  // 3704\n  this.addState('retry', 'afterRetry', 'afterRetry', transition);                                                      // 3705\n  this.addState('afterRetry', 'sign', 'error', transition);                                                            // 3706\n  this.addState('send', 'validateResponse', 'retry', transition);                                                      // 3707\n  this.addState('validateResponse', 'extractData', 'extractError', transition);                                        // 3708\n  this.addState('extractError', 'extractData', 'retry', transition);                                                   // 3709\n  this.addState('extractData', 'success', 'retry', transition);                                                        // 3710\n  this.addState('restart', 'build', 'error', transition);                                                              // 3711\n  this.addState('success', 'complete', 'complete', transition);                                                        // 3712\n  this.addState('error', 'complete', 'complete', transition);                                                          // 3713\n  this.addState('complete', null, null, transition);                                                                   // 3714\n};                                                                                                                     // 3715\nfsm.setupStates();                                                                                                     // 3716\n                                                                                                                       // 3717\n                                                                                                                       // 3718\nAWS.Request = inherit({                                                                                                // 3719\n                                                                                                                       // 3720\n                                                                                                                       // 3721\n  constructor: function Request(service, operation, params) {                                                          // 3722\n    var endpoint = service.endpoint;                                                                                   // 3723\n    var region = service.config.region;                                                                                // 3724\n    var customUserAgent = service.config.customUserAgent;                                                              // 3725\n                                                                                                                       // 3726\n    if (service.isGlobalEndpoint) region = 'us-east-1';                                                                // 3727\n                                                                                                                       // 3728\n    this.domain = domain && domain.active;                                                                             // 3729\n    this.service = service;                                                                                            // 3730\n    this.operation = operation;                                                                                        // 3731\n    this.params = params || {};                                                                                        // 3732\n    this.httpRequest = new AWS.HttpRequest(endpoint, region, customUserAgent);                                         // 3733\n    this.startTime = AWS.util.date.getDate();                                                                          // 3734\n                                                                                                                       // 3735\n    this.response = new AWS.Response(this);                                                                            // 3736\n    this._asm = new AcceptorStateMachine(fsm.states, 'validate');                                                      // 3737\n    this._haltHandlersOnError = false;                                                                                 // 3738\n                                                                                                                       // 3739\n    AWS.SequentialExecutor.call(this);                                                                                 // 3740\n    this.emit = this.emitEvent;                                                                                        // 3741\n  },                                                                                                                   // 3742\n                                                                                                                       // 3743\n                                                                                                                       // 3744\n                                                                                                                       // 3745\n                                                                                                                       // 3746\n  send: function send(callback) {                                                                                      // 3747\n    if (callback) {                                                                                                    // 3748\n      this.on('complete', function (resp) {                                                                            // 3749\n        callback.call(resp, resp.error, resp.data);                                                                    // 3750\n      });                                                                                                              // 3751\n    }                                                                                                                  // 3752\n    this.runTo();                                                                                                      // 3753\n                                                                                                                       // 3754\n    return this.response;                                                                                              // 3755\n  },                                                                                                                   // 3756\n                                                                                                                       // 3757\n                                                                                                                       // 3758\n  build: function build(callback) {                                                                                    // 3759\n    return this.runTo('send', callback);                                                                               // 3760\n  },                                                                                                                   // 3761\n                                                                                                                       // 3762\n                                                                                                                       // 3763\n  runTo: function runTo(state, done) {                                                                                 // 3764\n    this._asm.runTo(state, done, this);                                                                                // 3765\n    return this;                                                                                                       // 3766\n  },                                                                                                                   // 3767\n                                                                                                                       // 3768\n                                                                                                                       // 3769\n  abort: function abort() {                                                                                            // 3770\n    this.removeAllListeners('validateResponse');                                                                       // 3771\n    this.removeAllListeners('extractError');                                                                           // 3772\n    this.on('validateResponse', function addAbortedError(resp) {                                                       // 3773\n      resp.error = AWS.util.error(new Error('Request aborted by user'), {                                              // 3774\n         code: 'RequestAbortedError', retryable: false                                                                 // 3775\n      });                                                                                                              // 3776\n    });                                                                                                                // 3777\n                                                                                                                       // 3778\n    if (this.httpRequest.stream) { // abort HTTP stream                                                                // 3779\n      this.httpRequest.stream.abort();                                                                                 // 3780\n      if (this.httpRequest._abortCallback) {                                                                           // 3781\n         this.httpRequest._abortCallback();                                                                            // 3782\n      } else {                                                                                                         // 3783\n        this.removeAllListeners('send'); // haven't sent yet, so let's not                                             // 3784\n      }                                                                                                                // 3785\n    }                                                                                                                  // 3786\n                                                                                                                       // 3787\n    return this;                                                                                                       // 3788\n  },                                                                                                                   // 3789\n                                                                                                                       // 3790\n                                                                                                                       // 3791\n  eachPage: function eachPage(callback) {                                                                              // 3792\n    callback = AWS.util.fn.makeAsync(callback, 3);                                                                     // 3793\n                                                                                                                       // 3794\n    function wrappedCallback(response) {                                                                               // 3795\n      callback.call(response, response.error, response.data, function (result) {                                       // 3796\n        if (result === false) return;                                                                                  // 3797\n                                                                                                                       // 3798\n        if (response.hasNextPage()) {                                                                                  // 3799\n          response.nextPage().on('complete', wrappedCallback).send();                                                  // 3800\n        } else {                                                                                                       // 3801\n          callback.call(response, null, null, AWS.util.fn.noop);                                                       // 3802\n        }                                                                                                              // 3803\n      });                                                                                                              // 3804\n    }                                                                                                                  // 3805\n                                                                                                                       // 3806\n    this.on('complete', wrappedCallback).send();                                                                       // 3807\n  },                                                                                                                   // 3808\n                                                                                                                       // 3809\n                                                                                                                       // 3810\n  eachItem: function eachItem(callback) {                                                                              // 3811\n    var self = this;                                                                                                   // 3812\n    function wrappedCallback(err, data) {                                                                              // 3813\n      if (err) return callback(err, null);                                                                             // 3814\n      if (data === null) return callback(null, null);                                                                  // 3815\n                                                                                                                       // 3816\n      var config = self.service.paginationConfig(self.operation);                                                      // 3817\n      var resultKey = config.resultKey;                                                                                // 3818\n      if (Array.isArray(resultKey)) resultKey = resultKey[0];                                                          // 3819\n      var results = AWS.util.jamespath.query(resultKey, data);                                                         // 3820\n      AWS.util.arrayEach(results, function(result) {                                                                   // 3821\n        AWS.util.arrayEach(result, function(item) { callback(null, item); });                                          // 3822\n      });                                                                                                              // 3823\n    }                                                                                                                  // 3824\n                                                                                                                       // 3825\n    this.eachPage(wrappedCallback);                                                                                    // 3826\n  },                                                                                                                   // 3827\n                                                                                                                       // 3828\n                                                                                                                       // 3829\n  isPageable: function isPageable() {                                                                                  // 3830\n    return this.service.paginationConfig(this.operation) ? true : false;                                               // 3831\n  },                                                                                                                   // 3832\n                                                                                                                       // 3833\n                                                                                                                       // 3834\n  createReadStream: function createReadStream() {                                                                      // 3835\n    var streams = AWS.util.nodeRequire('stream');                                                                      // 3836\n    var req = this;                                                                                                    // 3837\n    var stream = null;                                                                                                 // 3838\n                                                                                                                       // 3839\n    if (AWS.HttpClient.streamsApiVersion === 2) {                                                                      // 3840\n      stream = new streams.PassThrough();                                                                              // 3841\n      req.send();                                                                                                      // 3842\n    } else {                                                                                                           // 3843\n      stream = new streams.Stream();                                                                                   // 3844\n      stream.readable = true;                                                                                          // 3845\n                                                                                                                       // 3846\n      stream.sent = false;                                                                                             // 3847\n      stream.on('newListener', function(event) {                                                                       // 3848\n        if (!stream.sent && event === 'data') {                                                                        // 3849\n          stream.sent = true;                                                                                          // 3850\n          process.nextTick(function() { req.send(); });                                                                // 3851\n        }                                                                                                              // 3852\n      });                                                                                                              // 3853\n    }                                                                                                                  // 3854\n                                                                                                                       // 3855\n    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {                                         // 3856\n      if (statusCode < 300) {                                                                                          // 3857\n        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);                                             // 3858\n        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);                                           // 3859\n        req.on('httpError', function streamHttpError(error) {                                                          // 3860\n          resp.error = error;                                                                                          // 3861\n          resp.error.retryable = false;                                                                                // 3862\n        });                                                                                                            // 3863\n                                                                                                                       // 3864\n        var httpStream = resp.httpResponse.createUnbufferedStream();                                                   // 3865\n        if (AWS.HttpClient.streamsApiVersion === 2) {                                                                  // 3866\n          httpStream.pipe(stream);                                                                                     // 3867\n        } else {                                                                                                       // 3868\n          httpStream.on('data', function(arg) {                                                                        // 3869\n            stream.emit('data', arg);                                                                                  // 3870\n          });                                                                                                          // 3871\n          httpStream.on('end', function() {                                                                            // 3872\n            stream.emit('end');                                                                                        // 3873\n          });                                                                                                          // 3874\n        }                                                                                                              // 3875\n                                                                                                                       // 3876\n        httpStream.on('error', function(err) {                                                                         // 3877\n          stream.emit('error', err);                                                                                   // 3878\n        });                                                                                                            // 3879\n      }                                                                                                                // 3880\n    });                                                                                                                // 3881\n                                                                                                                       // 3882\n    this.on('error', function(err) {                                                                                   // 3883\n      stream.emit('error', err);                                                                                       // 3884\n    });                                                                                                                // 3885\n                                                                                                                       // 3886\n    return stream;                                                                                                     // 3887\n  },                                                                                                                   // 3888\n                                                                                                                       // 3889\n                                                                                                                       // 3890\n  emitEvent: function emit(eventName, args, done) {                                                                    // 3891\n    if (typeof args === 'function') { done = args; args = null; }                                                      // 3892\n    if (!done) done = function() { };                                                                                  // 3893\n    if (!args) args = this.eventParameters(eventName, this.response);                                                  // 3894\n                                                                                                                       // 3895\n    var origEmit = AWS.SequentialExecutor.prototype.emit;                                                              // 3896\n    origEmit.call(this, eventName, args, function (err) {                                                              // 3897\n      if (err) this.response.error = err;                                                                              // 3898\n      done.call(this, err);                                                                                            // 3899\n    });                                                                                                                // 3900\n  },                                                                                                                   // 3901\n                                                                                                                       // 3902\n                                                                                                                       // 3903\n  eventParameters: function eventParameters(eventName) {                                                               // 3904\n    switch (eventName) {                                                                                               // 3905\n      case 'restart':                                                                                                  // 3906\n      case 'validate':                                                                                                 // 3907\n      case 'sign':                                                                                                     // 3908\n      case 'build':                                                                                                    // 3909\n      case 'afterValidate':                                                                                            // 3910\n      case 'afterBuild':                                                                                               // 3911\n        return [this];                                                                                                 // 3912\n      case 'error':                                                                                                    // 3913\n        return [this.response.error, this.response];                                                                   // 3914\n      default:                                                                                                         // 3915\n        return [this.response];                                                                                        // 3916\n    }                                                                                                                  // 3917\n  },                                                                                                                   // 3918\n                                                                                                                       // 3919\n                                                                                                                       // 3920\n  presign: function presign(expires, callback) {                                                                       // 3921\n    if (!callback && typeof expires === 'function') {                                                                  // 3922\n      callback = expires;                                                                                              // 3923\n      expires = null;                                                                                                  // 3924\n    }                                                                                                                  // 3925\n    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);                                            // 3926\n  },                                                                                                                   // 3927\n                                                                                                                       // 3928\n                                                                                                                       // 3929\n  toUnauthenticated: function toUnauthenticated() {                                                                    // 3930\n    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);                                     // 3931\n    this.removeListener('sign', AWS.EventListeners.Core.SIGN);                                                         // 3932\n    return this;                                                                                                       // 3933\n  },                                                                                                                   // 3934\n                                                                                                                       // 3935\n                                                                                                                       // 3936\n  toGet: function toGet() {                                                                                            // 3937\n    if (this.service.api.protocol === 'query' ||                                                                       // 3938\n        this.service.api.protocol === 'ec2') {                                                                         // 3939\n      this.removeListener('build', this.buildAsGet);                                                                   // 3940\n      this.addListener('build', this.buildAsGet);                                                                      // 3941\n    }                                                                                                                  // 3942\n    return this;                                                                                                       // 3943\n  },                                                                                                                   // 3944\n                                                                                                                       // 3945\n                                                                                                                       // 3946\n  buildAsGet: function buildAsGet(request) {                                                                           // 3947\n    request.httpRequest.method = 'GET';                                                                                // 3948\n    request.httpRequest.path = request.service.endpoint.path +                                                         // 3949\n                               '?' + request.httpRequest.body;                                                         // 3950\n    request.httpRequest.body = '';                                                                                     // 3951\n                                                                                                                       // 3952\n    delete request.httpRequest.headers['Content-Length'];                                                              // 3953\n    delete request.httpRequest.headers['Content-Type'];                                                                // 3954\n  },                                                                                                                   // 3955\n                                                                                                                       // 3956\n                                                                                                                       // 3957\n  haltHandlersOnError: function haltHandlersOnError() {                                                                // 3958\n    this._haltHandlersOnError = true;                                                                                  // 3959\n  }                                                                                                                    // 3960\n});                                                                                                                    // 3961\n                                                                                                                       // 3962\nAWS.util.mixin(AWS.Request, AWS.SequentialExecutor);                                                                   // 3963\n                                                                                                                       // 3964\n}).call(this,require(\"FWaASH\"))                                                                                        // 3965\n},{\"./core\":4,\"./state_machine\":58,\"FWaASH\":73}],37:[function(require,module,exports){                                 // 3966\n                                                                                                                       // 3967\n                                                                                                                       // 3968\nvar AWS = require('./core');                                                                                           // 3969\nvar inherit = AWS.util.inherit;                                                                                        // 3970\n                                                                                                                       // 3971\n                                                                                                                       // 3972\nAWS.ResourceWaiter = inherit({                                                                                         // 3973\n                                                                                                                       // 3974\n  constructor: function constructor(service, state) {                                                                  // 3975\n    this.service = service;                                                                                            // 3976\n    this.state = state;                                                                                                // 3977\n                                                                                                                       // 3978\n    if (typeof this.state === 'object') {                                                                              // 3979\n      AWS.util.each.call(this, this.state, function (key, value) {                                                     // 3980\n        this.state = key;                                                                                              // 3981\n        this.expectedValue = value;                                                                                    // 3982\n      });                                                                                                              // 3983\n    }                                                                                                                  // 3984\n                                                                                                                       // 3985\n    this.loadWaiterConfig(this.state);                                                                                 // 3986\n    if (!this.expectedValue) {                                                                                         // 3987\n      this.expectedValue = this.config.successValue;                                                                   // 3988\n    }                                                                                                                  // 3989\n  },                                                                                                                   // 3990\n                                                                                                                       // 3991\n  service: null,                                                                                                       // 3992\n                                                                                                                       // 3993\n  state: null,                                                                                                         // 3994\n                                                                                                                       // 3995\n  expectedValue: null,                                                                                                 // 3996\n                                                                                                                       // 3997\n  config: null,                                                                                                        // 3998\n                                                                                                                       // 3999\n  waitDone: false,                                                                                                     // 4000\n                                                                                                                       // 4001\n  Listeners: {                                                                                                         // 4002\n    retry: new AWS.SequentialExecutor().addNamedListeners(function(add) {                                              // 4003\n      add('RETRY_CHECK', 'retry', function(resp) {                                                                     // 4004\n        var waiter = resp.request._waiter;                                                                             // 4005\n        if (resp.error && resp.error.code === 'ResourceNotReady') {                                                    // 4006\n          resp.error.retryDelay = waiter.config.interval * 1000;                                                       // 4007\n        }                                                                                                              // 4008\n      });                                                                                                              // 4009\n    }),                                                                                                                // 4010\n                                                                                                                       // 4011\n    output: new AWS.SequentialExecutor().addNamedListeners(function(add) {                                             // 4012\n      add('CHECK_OUT_ERROR', 'extractError', function CHECK_OUT_ERROR(resp) {                                          // 4013\n        if (resp.error) {                                                                                              // 4014\n          resp.request._waiter.setError(resp, true);                                                                   // 4015\n        }                                                                                                              // 4016\n      });                                                                                                              // 4017\n                                                                                                                       // 4018\n      add('CHECK_OUTPUT', 'extractData', function CHECK_OUTPUT(resp) {                                                 // 4019\n        var waiter = resp.request._waiter;                                                                             // 4020\n        var success = waiter.checkSuccess(resp);                                                                       // 4021\n        if (!success) {                                                                                                // 4022\n          waiter.setError(resp, success === null ? false : true);                                                      // 4023\n        } else {                                                                                                       // 4024\n          resp.error = null;                                                                                           // 4025\n        }                                                                                                              // 4026\n      });                                                                                                              // 4027\n    }),                                                                                                                // 4028\n                                                                                                                       // 4029\n    error: new AWS.SequentialExecutor().addNamedListeners(function(add) {                                              // 4030\n      add('CHECK_ERROR', 'extractError', function CHECK_ERROR(resp) {                                                  // 4031\n        var waiter = resp.request._waiter;                                                                             // 4032\n        var success = waiter.checkError(resp);                                                                         // 4033\n        if (!success) {                                                                                                // 4034\n          waiter.setError(resp, success === null ? false : true);                                                      // 4035\n        } else {                                                                                                       // 4036\n          resp.error = null;                                                                                           // 4037\n          resp.data = {};                                                                                              // 4038\n          resp.request.removeAllListeners('extractData');                                                              // 4039\n        }                                                                                                              // 4040\n      });                                                                                                              // 4041\n                                                                                                                       // 4042\n      add('CHECK_ERR_OUTPUT', 'extractData', function CHECK_ERR_OUTPUT(resp) {                                         // 4043\n        resp.request._waiter.setError(resp, true);                                                                     // 4044\n      });                                                                                                              // 4045\n    })                                                                                                                 // 4046\n  },                                                                                                                   // 4047\n                                                                                                                       // 4048\n                                                                                                                       // 4049\n  wait: function wait(params, callback) {                                                                              // 4050\n    if (typeof params === 'function') {                                                                                // 4051\n      callback = params; params = undefined;                                                                           // 4052\n    }                                                                                                                  // 4053\n                                                                                                                       // 4054\n    var request = this.service.makeRequest(this.config.operation, params);                                             // 4055\n    var listeners = this.Listeners[this.config.successType];                                                           // 4056\n    request._waiter = this;                                                                                            // 4057\n    request.response.maxRetries = this.config.maxAttempts;                                                             // 4058\n    request.addListeners(this.Listeners.retry);                                                                        // 4059\n    if (listeners) request.addListeners(listeners);                                                                    // 4060\n                                                                                                                       // 4061\n    if (callback) request.send(callback);                                                                              // 4062\n    return request;                                                                                                    // 4063\n  },                                                                                                                   // 4064\n                                                                                                                       // 4065\n  setError: function setError(resp, retryable) {                                                                       // 4066\n    resp.data = null;                                                                                                  // 4067\n    resp.error = AWS.util.error(resp.error || new Error(), {                                                           // 4068\n      code: 'ResourceNotReady',                                                                                        // 4069\n      message: 'Resource is not in the state ' + this.state,                                                           // 4070\n      retryable: retryable                                                                                             // 4071\n    });                                                                                                                // 4072\n  },                                                                                                                   // 4073\n                                                                                                                       // 4074\n                                                                                                                       // 4075\n  checkSuccess: function checkSuccess(resp) {                                                                          // 4076\n    if (!this.config.successPath) {                                                                                    // 4077\n      return resp.httpResponse.statusCode < 300;                                                                       // 4078\n    }                                                                                                                  // 4079\n                                                                                                                       // 4080\n    var r = AWS.util.jamespath.find(this.config.successPath, resp.data);                                               // 4081\n                                                                                                                       // 4082\n    if (this.config.failureValue &&                                                                                    // 4083\n        this.config.failureValue.indexOf(r) >= 0) {                                                                    // 4084\n      return null; // fast fail                                                                                        // 4085\n    }                                                                                                                  // 4086\n                                                                                                                       // 4087\n    if (this.expectedValue) {                                                                                          // 4088\n      return r === this.expectedValue;                                                                                 // 4089\n    } else {                                                                                                           // 4090\n      return r ? true : false;                                                                                         // 4091\n    }                                                                                                                  // 4092\n  },                                                                                                                   // 4093\n                                                                                                                       // 4094\n                                                                                                                       // 4095\n  checkError: function checkError(resp) {                                                                              // 4096\n    var value = this.config.successValue;                                                                              // 4097\n    if (typeof value === 'number') {                                                                                   // 4098\n      return resp.httpResponse.statusCode === value;                                                                   // 4099\n    } else {                                                                                                           // 4100\n      return resp.error && resp.error.code === value;                                                                  // 4101\n    }                                                                                                                  // 4102\n  },                                                                                                                   // 4103\n                                                                                                                       // 4104\n                                                                                                                       // 4105\n  loadWaiterConfig: function loadWaiterConfig(state, noException) {                                                    // 4106\n    if (!this.service.api.waiters[state]) {                                                                            // 4107\n      if (noException) return;                                                                                         // 4108\n      throw new AWS.util.error(new Error(), {                                                                          // 4109\n        code: 'StateNotFoundError',                                                                                    // 4110\n        message: 'State ' + state + ' not found.'                                                                      // 4111\n      });                                                                                                              // 4112\n    }                                                                                                                  // 4113\n                                                                                                                       // 4114\n    this.config = this.service.api.waiters[state];                                                                     // 4115\n    var config = this.config;                                                                                          // 4116\n                                                                                                                       // 4117\n    (function () { // anonymous function to avoid max complexity count                                                 // 4118\n      config.successType = config.successType || config.acceptorType;                                                  // 4119\n      config.successPath = config.successPath || config.acceptorPath;                                                  // 4120\n      config.successValue = config.successValue || config.acceptorValue;                                               // 4121\n      config.failureType = config.failureType || config.acceptorType;                                                  // 4122\n      config.failurePath = config.failurePath || config.acceptorPath;                                                  // 4123\n      config.failureValue = config.failureValue || config.acceptorValue;                                               // 4124\n    })();                                                                                                              // 4125\n  }                                                                                                                    // 4126\n});                                                                                                                    // 4127\n                                                                                                                       // 4128\n},{\"./core\":4}],38:[function(require,module,exports){                                                                  // 4129\nvar AWS = require('./core');                                                                                           // 4130\nvar inherit = AWS.util.inherit;                                                                                        // 4131\n                                                                                                                       // 4132\n                                                                                                                       // 4133\nAWS.Response = inherit({                                                                                               // 4134\n                                                                                                                       // 4135\n                                                                                                                       // 4136\n  constructor: function Response(request) {                                                                            // 4137\n    this.request = request;                                                                                            // 4138\n    this.data = null;                                                                                                  // 4139\n    this.error = null;                                                                                                 // 4140\n    this.retryCount = 0;                                                                                               // 4141\n    this.redirectCount = 0;                                                                                            // 4142\n    this.httpResponse = new AWS.HttpResponse();                                                                        // 4143\n    if (request) {                                                                                                     // 4144\n      this.maxRetries = request.service.numRetries();                                                                  // 4145\n      this.maxRedirects = request.service.config.maxRedirects;                                                         // 4146\n    }                                                                                                                  // 4147\n  },                                                                                                                   // 4148\n                                                                                                                       // 4149\n                                                                                                                       // 4150\n  nextPage: function nextPage(callback) {                                                                              // 4151\n    var config;                                                                                                        // 4152\n    var service = this.request.service;                                                                                // 4153\n    var operation = this.request.operation;                                                                            // 4154\n    try {                                                                                                              // 4155\n      config = service.paginationConfig(operation, true);                                                              // 4156\n    } catch (e) { this.error = e; }                                                                                    // 4157\n                                                                                                                       // 4158\n    if (!this.hasNextPage()) {                                                                                         // 4159\n      if (callback) callback(this.error, null);                                                                        // 4160\n      else if (this.error) throw this.error;                                                                           // 4161\n      return null;                                                                                                     // 4162\n    }                                                                                                                  // 4163\n                                                                                                                       // 4164\n    var params = AWS.util.copy(this.request.params);                                                                   // 4165\n    if (!this.nextPageTokens) {                                                                                        // 4166\n      return callback ? callback(null, null) : null;                                                                   // 4167\n    } else {                                                                                                           // 4168\n      var inputTokens = config.inputToken;                                                                             // 4169\n      if (typeof inputTokens === 'string') inputTokens = [inputTokens];                                                // 4170\n      for (var i = 0; i < inputTokens.length; i++) {                                                                   // 4171\n        params[inputTokens[i]] = this.nextPageTokens[i];                                                               // 4172\n      }                                                                                                                // 4173\n      return service.makeRequest(this.request.operation, params, callback);                                            // 4174\n    }                                                                                                                  // 4175\n  },                                                                                                                   // 4176\n                                                                                                                       // 4177\n                                                                                                                       // 4178\n  hasNextPage: function hasNextPage() {                                                                                // 4179\n    this.cacheNextPageTokens();                                                                                        // 4180\n    if (this.nextPageTokens) return true;                                                                              // 4181\n    if (this.nextPageTokens === undefined) return undefined;                                                           // 4182\n    else return false;                                                                                                 // 4183\n  },                                                                                                                   // 4184\n                                                                                                                       // 4185\n                                                                                                                       // 4186\n  cacheNextPageTokens: function cacheNextPageTokens() {                                                                // 4187\n    if (this.hasOwnProperty('nextPageTokens')) return this.nextPageTokens;                                             // 4188\n    this.nextPageTokens = undefined;                                                                                   // 4189\n                                                                                                                       // 4190\n    var config = this.request.service.paginationConfig(this.request.operation);                                        // 4191\n    if (!config) return this.nextPageTokens;                                                                           // 4192\n                                                                                                                       // 4193\n    this.nextPageTokens = null;                                                                                        // 4194\n    if (config.moreResults) {                                                                                          // 4195\n      if (!AWS.util.jamespath.find(config.moreResults, this.data)) {                                                   // 4196\n        return this.nextPageTokens;                                                                                    // 4197\n      }                                                                                                                // 4198\n    }                                                                                                                  // 4199\n                                                                                                                       // 4200\n    var exprs = config.outputToken;                                                                                    // 4201\n    if (typeof exprs === 'string') exprs = [exprs];                                                                    // 4202\n    AWS.util.arrayEach.call(this, exprs, function (expr) {                                                             // 4203\n      var output = AWS.util.jamespath.find(expr, this.data);                                                           // 4204\n      if (output) {                                                                                                    // 4205\n        this.nextPageTokens = this.nextPageTokens || [];                                                               // 4206\n        this.nextPageTokens.push(output);                                                                              // 4207\n      }                                                                                                                // 4208\n    });                                                                                                                // 4209\n                                                                                                                       // 4210\n    return this.nextPageTokens;                                                                                        // 4211\n  }                                                                                                                    // 4212\n                                                                                                                       // 4213\n});                                                                                                                    // 4214\n                                                                                                                       // 4215\n},{\"./core\":4}],39:[function(require,module,exports){                                                                  // 4216\n(function (Buffer){                                                                                                    // 4217\nvar AWS = require('../core');                                                                                          // 4218\nvar byteLength = AWS.util.string.byteLength;                                                                           // 4219\n                                                                                                                       // 4220\n                                                                                                                       // 4221\nAWS.S3.ManagedUpload = AWS.util.inherit({                                                                              // 4222\n                                                                                                                       // 4223\n  constructor: function ManagedUpload(options) {                                                                       // 4224\n    var self = this;                                                                                                   // 4225\n    AWS.SequentialExecutor.call(self);                                                                                 // 4226\n    self.body = null;                                                                                                  // 4227\n    self.sliceFn = null;                                                                                               // 4228\n    self.callback = null;                                                                                              // 4229\n    self.parts = {};                                                                                                   // 4230\n    self.completeInfo = [];                                                                                            // 4231\n    self.fillQueue = function() {                                                                                      // 4232\n      self.callback(new Error('Unsupported body payload ' + typeof self.body));                                        // 4233\n    };                                                                                                                 // 4234\n                                                                                                                       // 4235\n    self.configure(options);                                                                                           // 4236\n  },                                                                                                                   // 4237\n                                                                                                                       // 4238\n                                                                                                                       // 4239\n  configure: function configure(options) {                                                                             // 4240\n    options = options || {};                                                                                           // 4241\n    this.partSize = this.minPartSize;                                                                                  // 4242\n                                                                                                                       // 4243\n    if (options.queueSize) this.queueSize = options.queueSize;                                                         // 4244\n    if (options.partSize) this.partSize = options.partSize;                                                            // 4245\n    if (options.leavePartsOnError) this.leavePartsOnError = true;                                                      // 4246\n                                                                                                                       // 4247\n    if (this.partSize < this.minPartSize) {                                                                            // 4248\n      throw new Error('partSize must be greater than ' +                                                               // 4249\n                      this.minPartSize);                                                                               // 4250\n    }                                                                                                                  // 4251\n                                                                                                                       // 4252\n    this.service = options.service;                                                                                    // 4253\n    this.bindServiceObject(options.params);                                                                            // 4254\n    this.validateBody();                                                                                               // 4255\n    this.adjustTotalBytes();                                                                                           // 4256\n  },                                                                                                                   // 4257\n                                                                                                                       // 4258\n                                                                                                                       // 4259\n  leavePartsOnError: false,                                                                                            // 4260\n                                                                                                                       // 4261\n                                                                                                                       // 4262\n  queueSize: 4,                                                                                                        // 4263\n                                                                                                                       // 4264\n                                                                                                                       // 4265\n  partSize: null,                                                                                                      // 4266\n                                                                                                                       // 4267\n                                                                                                                       // 4268\n  minPartSize: 1024 * 1024 * 5,                                                                                        // 4269\n                                                                                                                       // 4270\n                                                                                                                       // 4271\n  maxTotalParts: 10000,                                                                                                // 4272\n                                                                                                                       // 4273\n                                                                                                                       // 4274\n  send: function(callback) {                                                                                           // 4275\n    var self = this;                                                                                                   // 4276\n    self.failed = false;                                                                                               // 4277\n    self.callback = callback || function(err) { if (err) throw err; };                                                 // 4278\n                                                                                                                       // 4279\n    var runFill = true;                                                                                                // 4280\n    if (self.sliceFn) {                                                                                                // 4281\n      self.fillQueue = self.fillBuffer;                                                                                // 4282\n    } else if (AWS.util.isNode()) {                                                                                    // 4283\n      var Stream = AWS.util.nodeRequire('stream').Stream;                                                              // 4284\n      if (self.body instanceof Stream) {                                                                               // 4285\n        runFill = false;                                                                                               // 4286\n        self.fillQueue = self.fillStream;                                                                              // 4287\n        self.partBuffers = [];                                                                                         // 4288\n        self.body.                                                                                                     // 4289\n          on('readable', function() { self.fillQueue(); }).                                                            // 4290\n          on('end', function() {                                                                                       // 4291\n            self.isDoneChunking = true;                                                                                // 4292\n            self.numParts = self.totalPartNumbers;                                                                     // 4293\n            self.fillQueue.call(self);                                                                                 // 4294\n          });                                                                                                          // 4295\n      }                                                                                                                // 4296\n    }                                                                                                                  // 4297\n                                                                                                                       // 4298\n    if (runFill) self.fillQueue.call(self);                                                                            // 4299\n  },                                                                                                                   // 4300\n                                                                                                                       // 4301\n                                                                                                                       // 4302\n  abort: function() {                                                                                                  // 4303\n    this.cleanup(AWS.util.error(new Error('Request aborted by user'), {                                                // 4304\n      code: 'RequestAbortedError', retryable: false                                                                    // 4305\n    }));                                                                                                               // 4306\n  },                                                                                                                   // 4307\n                                                                                                                       // 4308\n                                                                                                                       // 4309\n  validateBody: function validateBody() {                                                                              // 4310\n    var self = this;                                                                                                   // 4311\n    self.body = self.service.config.params.Body;                                                                       // 4312\n    if (!self.body) throw new Error('params.Body is required');                                                        // 4313\n    if (typeof self.body === 'string') {                                                                               // 4314\n      self.body = new AWS.util.Buffer(self.body);                                                                      // 4315\n    }                                                                                                                  // 4316\n    self.sliceFn = AWS.util.arraySliceFn(self.body);                                                                   // 4317\n  },                                                                                                                   // 4318\n                                                                                                                       // 4319\n                                                                                                                       // 4320\n  bindServiceObject: function bindServiceObject(params) {                                                              // 4321\n    params = params || {};                                                                                             // 4322\n    var self = this;                                                                                                   // 4323\n                                                                                                                       // 4324\n    if (!self.service) {                                                                                               // 4325\n      self.service = new AWS.S3({params: params});                                                                     // 4326\n    } else {                                                                                                           // 4327\n      var config = AWS.util.copy(self.service.config);                                                                 // 4328\n      self.service = new self.service.constructor.__super__(config);                                                   // 4329\n      self.service.config.params =                                                                                     // 4330\n        AWS.util.merge(self.service.config.params || {}, params);                                                      // 4331\n    }                                                                                                                  // 4332\n  },                                                                                                                   // 4333\n                                                                                                                       // 4334\n                                                                                                                       // 4335\n  adjustTotalBytes: function adjustTotalBytes() {                                                                      // 4336\n    var self = this;                                                                                                   // 4337\n    try { // try to get totalBytes                                                                                     // 4338\n      self.totalBytes = byteLength(self.body);                                                                         // 4339\n    } catch (e) { }                                                                                                    // 4340\n                                                                                                                       // 4341\n    if (self.totalBytes) {                                                                                             // 4342\n      var newPartSize = Math.ceil(self.totalBytes / self.maxTotalParts);                                               // 4343\n      if (newPartSize > self.partSize) self.partSize = newPartSize;                                                    // 4344\n    } else {                                                                                                           // 4345\n      self.totalBytes = undefined;                                                                                     // 4346\n    }                                                                                                                  // 4347\n  },                                                                                                                   // 4348\n                                                                                                                       // 4349\n                                                                                                                       // 4350\n  isDoneChunking: false,                                                                                               // 4351\n                                                                                                                       // 4352\n                                                                                                                       // 4353\n  partPos: 0,                                                                                                          // 4354\n                                                                                                                       // 4355\n                                                                                                                       // 4356\n  totalChunkedBytes: 0,                                                                                                // 4357\n                                                                                                                       // 4358\n                                                                                                                       // 4359\n  totalUploadedBytes: 0,                                                                                               // 4360\n                                                                                                                       // 4361\n                                                                                                                       // 4362\n  totalBytes: undefined,                                                                                               // 4363\n                                                                                                                       // 4364\n                                                                                                                       // 4365\n  numParts: 0,                                                                                                         // 4366\n                                                                                                                       // 4367\n                                                                                                                       // 4368\n  totalPartNumbers: 0,                                                                                                 // 4369\n                                                                                                                       // 4370\n                                                                                                                       // 4371\n  activeParts: 0,                                                                                                      // 4372\n                                                                                                                       // 4373\n                                                                                                                       // 4374\n  doneParts: 0,                                                                                                        // 4375\n                                                                                                                       // 4376\n                                                                                                                       // 4377\n  parts: null,                                                                                                         // 4378\n                                                                                                                       // 4379\n                                                                                                                       // 4380\n  completeInfo: null,                                                                                                  // 4381\n                                                                                                                       // 4382\n                                                                                                                       // 4383\n  failed: false,                                                                                                       // 4384\n                                                                                                                       // 4385\n                                                                                                                       // 4386\n  multipartReq: null,                                                                                                  // 4387\n                                                                                                                       // 4388\n                                                                                                                       // 4389\n  partBuffers: null,                                                                                                   // 4390\n                                                                                                                       // 4391\n                                                                                                                       // 4392\n  partBufferLength: 0,                                                                                                 // 4393\n                                                                                                                       // 4394\n                                                                                                                       // 4395\n  fillBuffer: function fillBuffer() {                                                                                  // 4396\n    var self = this;                                                                                                   // 4397\n    var bodyLen = byteLength(self.body);                                                                               // 4398\n                                                                                                                       // 4399\n    if (bodyLen === 0) {                                                                                               // 4400\n      self.isDoneChunking = true;                                                                                      // 4401\n      self.numParts = 1;                                                                                               // 4402\n      self.nextChunk(self.body);                                                                                       // 4403\n      return;                                                                                                          // 4404\n    }                                                                                                                  // 4405\n                                                                                                                       // 4406\n    while (self.activeParts < self.queueSize && self.partPos < bodyLen) {                                              // 4407\n      var endPos = Math.min(self.partPos + self.partSize, bodyLen);                                                    // 4408\n      var buf = self.sliceFn.call(self.body, self.partPos, endPos);                                                    // 4409\n      self.partPos += self.partSize;                                                                                   // 4410\n                                                                                                                       // 4411\n      if (byteLength(buf) < self.partSize || self.partPos === bodyLen) {                                               // 4412\n        self.isDoneChunking = true;                                                                                    // 4413\n        self.numParts = self.totalPartNumbers + 1;                                                                     // 4414\n      }                                                                                                                // 4415\n      self.nextChunk(buf);                                                                                             // 4416\n    }                                                                                                                  // 4417\n  },                                                                                                                   // 4418\n                                                                                                                       // 4419\n                                                                                                                       // 4420\n  fillStream: function fillStream() {                                                                                  // 4421\n    var self = this;                                                                                                   // 4422\n    if (self.activeParts >= self.queueSize) return;                                                                    // 4423\n                                                                                                                       // 4424\n    var buf = self.body.read(self.partSize - self.partBufferLength) ||                                                 // 4425\n              self.body.read();                                                                                        // 4426\n    if (buf) {                                                                                                         // 4427\n      self.partBuffers.push(buf);                                                                                      // 4428\n      self.partBufferLength += buf.length;                                                                             // 4429\n      self.totalChunkedBytes += buf.length;                                                                            // 4430\n    }                                                                                                                  // 4431\n                                                                                                                       // 4432\n    if (self.partBufferLength >= self.partSize) {                                                                      // 4433\n      var pbuf = self.partBuffers.length === 1 ?                                                                       // 4434\n        self.partBuffers[0] : Buffer.concat(self.partBuffers);                                                         // 4435\n      self.partBuffers = [];                                                                                           // 4436\n      self.partBufferLength = 0;                                                                                       // 4437\n                                                                                                                       // 4438\n      if (pbuf.length > self.partSize) {                                                                               // 4439\n        var rest = pbuf.slice(self.partSize);                                                                          // 4440\n        self.partBuffers.push(rest);                                                                                   // 4441\n        self.partBufferLength += rest.length;                                                                          // 4442\n        pbuf = pbuf.slice(0, self.partSize);                                                                           // 4443\n      }                                                                                                                // 4444\n                                                                                                                       // 4445\n      self.nextChunk(pbuf);                                                                                            // 4446\n    }                                                                                                                  // 4447\n                                                                                                                       // 4448\n    if (self.isDoneChunking && !self.isDoneSending) {                                                                  // 4449\n      pbuf = self.partBuffers.length === 1 ?                                                                           // 4450\n          self.partBuffers[0] : Buffer.concat(self.partBuffers);                                                       // 4451\n      self.partBuffers = [];                                                                                           // 4452\n      self.partBufferLength = 0;                                                                                       // 4453\n      self.totalBytes = self.totalChunkedBytes;                                                                        // 4454\n      self.isDoneSending = true;                                                                                       // 4455\n                                                                                                                       // 4456\n      if (self.numParts === 0 || pbuf.length > 0) {                                                                    // 4457\n        self.numParts++;                                                                                               // 4458\n        self.nextChunk(pbuf);                                                                                          // 4459\n      }                                                                                                                // 4460\n    }                                                                                                                  // 4461\n                                                                                                                       // 4462\n    self.body.read(0);                                                                                                 // 4463\n  },                                                                                                                   // 4464\n                                                                                                                       // 4465\n                                                                                                                       // 4466\n  nextChunk: function nextChunk(chunk) {                                                                               // 4467\n    var self = this;                                                                                                   // 4468\n    if (self.failed) return null;                                                                                      // 4469\n                                                                                                                       // 4470\n    var partNumber = ++self.totalPartNumbers;                                                                          // 4471\n    if (self.isDoneChunking && partNumber === 1) {                                                                     // 4472\n      var req = self.service.putObject({Body: chunk});                                                                 // 4473\n      req._managedUpload = self;                                                                                       // 4474\n      req.on('httpUploadProgress', self.progress).send(self.finishSinglePart);                                         // 4475\n      return null;                                                                                                     // 4476\n    } else if (self.service.config.params.ContentMD5) {                                                                // 4477\n      var err = AWS.util.error(new Error('The Content-MD5 you specified is invalid for multi-part uploads.'), {        // 4478\n        code: 'InvalidDigest', retryable: false                                                                        // 4479\n      });                                                                                                              // 4480\n                                                                                                                       // 4481\n      self.cleanup(err);                                                                                               // 4482\n      return null;                                                                                                     // 4483\n    }                                                                                                                  // 4484\n                                                                                                                       // 4485\n    if (self.completeInfo[partNumber] && self.completeInfo[partNumber].ETag !== null) {                                // 4486\n      return null; // Already uploaded this part.                                                                      // 4487\n    }                                                                                                                  // 4488\n                                                                                                                       // 4489\n    self.activeParts++;                                                                                                // 4490\n    if (!self.service.config.params.UploadId) {                                                                        // 4491\n                                                                                                                       // 4492\n      if (!self.multipartReq) { // create multipart                                                                    // 4493\n        self.multipartReq = self.service.createMultipartUpload();                                                      // 4494\n        self.multipartReq.on('success', function(resp) {                                                               // 4495\n          self.service.config.params.UploadId = resp.data.UploadId;                                                    // 4496\n          self.multipartReq = null;                                                                                    // 4497\n        });                                                                                                            // 4498\n        self.queueChunks(chunk, partNumber);                                                                           // 4499\n        self.multipartReq.on('error', function(err) {                                                                  // 4500\n          self.cleanup(err);                                                                                           // 4501\n        });                                                                                                            // 4502\n        self.multipartReq.send();                                                                                      // 4503\n      } else {                                                                                                         // 4504\n        self.queueChunks(chunk, partNumber);                                                                           // 4505\n      }                                                                                                                // 4506\n    } else { // multipart is created, just send                                                                        // 4507\n      self.uploadPart(chunk, partNumber);                                                                              // 4508\n    }                                                                                                                  // 4509\n  },                                                                                                                   // 4510\n                                                                                                                       // 4511\n                                                                                                                       // 4512\n  uploadPart: function uploadPart(chunk, partNumber) {                                                                 // 4513\n    var self = this;                                                                                                   // 4514\n                                                                                                                       // 4515\n    var partParams = {                                                                                                 // 4516\n      Body: chunk,                                                                                                     // 4517\n      ContentLength: AWS.util.string.byteLength(chunk),                                                                // 4518\n      PartNumber: partNumber                                                                                           // 4519\n    };                                                                                                                 // 4520\n                                                                                                                       // 4521\n    var partInfo = {ETag: null, PartNumber: partNumber};                                                               // 4522\n    self.completeInfo[partNumber] = partInfo;                                                                          // 4523\n                                                                                                                       // 4524\n    var req = self.service.uploadPart(partParams);                                                                     // 4525\n    self.parts[partNumber] = req;                                                                                      // 4526\n    req._lastUploadedBytes = 0;                                                                                        // 4527\n    req._managedUpload = self;                                                                                         // 4528\n    req.on('httpUploadProgress', self.progress);                                                                       // 4529\n    req.send(function(err, data) {                                                                                     // 4530\n      delete self.parts[partParams.PartNumber];                                                                        // 4531\n      self.activeParts--;                                                                                              // 4532\n                                                                                                                       // 4533\n      if (!err && (!data || !data.ETag)) {                                                                             // 4534\n        var message = 'No access to ETag property on response.';                                                       // 4535\n        if (AWS.util.isBrowser()) {                                                                                    // 4536\n          message += ' Check CORS configuration to expose ETag header.';                                               // 4537\n        }                                                                                                              // 4538\n                                                                                                                       // 4539\n        err = AWS.util.error(new Error(message), {                                                                     // 4540\n          code: 'ETagMissing', retryable: false                                                                        // 4541\n        });                                                                                                            // 4542\n      }                                                                                                                // 4543\n      if (err) return self.cleanup(err);                                                                               // 4544\n                                                                                                                       // 4545\n      partInfo.ETag = data.ETag;                                                                                       // 4546\n      self.doneParts++;                                                                                                // 4547\n      if (self.isDoneChunking && self.doneParts === self.numParts) {                                                   // 4548\n        self.finishMultiPart();                                                                                        // 4549\n      } else {                                                                                                         // 4550\n        self.fillQueue.call(self);                                                                                     // 4551\n      }                                                                                                                // 4552\n    });                                                                                                                // 4553\n  },                                                                                                                   // 4554\n                                                                                                                       // 4555\n                                                                                                                       // 4556\n  queueChunks: function queueChunks(chunk, partNumber) {                                                               // 4557\n    var self = this;                                                                                                   // 4558\n    self.multipartReq.on('success', function() {                                                                       // 4559\n      self.uploadPart(chunk, partNumber);                                                                              // 4560\n    });                                                                                                                // 4561\n  },                                                                                                                   // 4562\n                                                                                                                       // 4563\n                                                                                                                       // 4564\n  cleanup: function cleanup(err) {                                                                                     // 4565\n    var self = this;                                                                                                   // 4566\n    if (self.failed) return;                                                                                           // 4567\n                                                                                                                       // 4568\n    if (typeof self.body.removeAllListeners === 'function' &&                                                          // 4569\n        typeof self.body.resume === 'function') {                                                                      // 4570\n      self.body.removeAllListeners('readable');                                                                        // 4571\n      self.body.removeAllListeners('end');                                                                             // 4572\n      self.body.resume();                                                                                              // 4573\n    }                                                                                                                  // 4574\n                                                                                                                       // 4575\n    if (self.service.config.params.UploadId && !self.leavePartsOnError) {                                              // 4576\n      self.service.abortMultipartUpload().send();                                                                      // 4577\n    }                                                                                                                  // 4578\n                                                                                                                       // 4579\n    AWS.util.each(self.parts, function(partNumber, part) {                                                             // 4580\n      part.removeAllListeners('complete');                                                                             // 4581\n      part.abort();                                                                                                    // 4582\n    });                                                                                                                // 4583\n                                                                                                                       // 4584\n    self.activeParts = 0;                                                                                              // 4585\n    self.partPos = 0;                                                                                                  // 4586\n    self.numParts = 0;                                                                                                 // 4587\n    self.totalPartNumbers = 0;                                                                                         // 4588\n    self.parts = {};                                                                                                   // 4589\n    self.failed = true;                                                                                                // 4590\n    self.callback(err);                                                                                                // 4591\n  },                                                                                                                   // 4592\n                                                                                                                       // 4593\n                                                                                                                       // 4594\n  finishMultiPart: function finishMultiPart() {                                                                        // 4595\n    var self = this;                                                                                                   // 4596\n    var completeParams = { MultipartUpload: { Parts: self.completeInfo.slice(1) } };                                   // 4597\n    self.service.completeMultipartUpload(completeParams, function(err, data) {                                         // 4598\n      if (err) return self.cleanup(err);                                                                               // 4599\n      else self.callback(err, data);                                                                                   // 4600\n    });                                                                                                                // 4601\n  },                                                                                                                   // 4602\n                                                                                                                       // 4603\n                                                                                                                       // 4604\n  finishSinglePart: function finishSinglePart(err, data) {                                                             // 4605\n    var upload = this.request._managedUpload;                                                                          // 4606\n    var httpReq = this.request.httpRequest;                                                                            // 4607\n    var endpoint = httpReq.endpoint;                                                                                   // 4608\n    if (err) return upload.callback(err);                                                                              // 4609\n    data.Location =                                                                                                    // 4610\n      [endpoint.protocol, '//', endpoint.host, httpReq.path].join('');                                                 // 4611\n    data.key = this.request.params.Key;                                                                                // 4612\n    upload.callback(err, data);                                                                                        // 4613\n  },                                                                                                                   // 4614\n                                                                                                                       // 4615\n                                                                                                                       // 4616\n  progress: function progress(info) {                                                                                  // 4617\n    var upload = this._managedUpload;                                                                                  // 4618\n    if (this.operation === 'putObject') {                                                                              // 4619\n      info.part = 1;                                                                                                   // 4620\n      info.key = this.params.Key;                                                                                      // 4621\n    } else {                                                                                                           // 4622\n      upload.totalUploadedBytes += info.loaded - this._lastUploadedBytes;                                              // 4623\n      this._lastUploadedBytes = info.loaded;                                                                           // 4624\n      info = {                                                                                                         // 4625\n        loaded: upload.totalUploadedBytes,                                                                             // 4626\n        total: upload.totalBytes,                                                                                      // 4627\n        part: this.params.PartNumber,                                                                                  // 4628\n        key: this.params.Key                                                                                           // 4629\n      };                                                                                                               // 4630\n    }                                                                                                                  // 4631\n    upload.emit('httpUploadProgress', [info]);                                                                         // 4632\n  }                                                                                                                    // 4633\n});                                                                                                                    // 4634\n                                                                                                                       // 4635\nAWS.util.mixin(AWS.S3.ManagedUpload, AWS.SequentialExecutor);                                                          // 4636\nmodule.exports = AWS.S3.ManagedUpload;                                                                                 // 4637\n                                                                                                                       // 4638\n}).call(this,require(\"buffer\").Buffer)                                                                                 // 4639\n},{\"../core\":4,\"buffer\":62}],40:[function(require,module,exports){                                                     // 4640\nvar AWS = require('./core');                                                                                           // 4641\n                                                                                                                       // 4642\n                                                                                                                       // 4643\nAWS.SequentialExecutor = AWS.util.inherit({                                                                            // 4644\n                                                                                                                       // 4645\n  constructor: function SequentialExecutor() {                                                                         // 4646\n    this._events = {};                                                                                                 // 4647\n  },                                                                                                                   // 4648\n                                                                                                                       // 4649\n                                                                                                                       // 4650\n  listeners: function listeners(eventName) {                                                                           // 4651\n    return this._events[eventName] ? this._events[eventName].slice(0) : [];                                            // 4652\n  },                                                                                                                   // 4653\n                                                                                                                       // 4654\n  on: function on(eventName, listener) {                                                                               // 4655\n    if (this._events[eventName]) {                                                                                     // 4656\n      this._events[eventName].push(listener);                                                                          // 4657\n    } else {                                                                                                           // 4658\n      this._events[eventName] = [listener];                                                                            // 4659\n    }                                                                                                                  // 4660\n    return this;                                                                                                       // 4661\n  },                                                                                                                   // 4662\n                                                                                                                       // 4663\n                                                                                                                       // 4664\n  onAsync: function onAsync(eventName, listener) {                                                                     // 4665\n    listener._isAsync = true;                                                                                          // 4666\n    return this.on(eventName, listener);                                                                               // 4667\n  },                                                                                                                   // 4668\n                                                                                                                       // 4669\n  removeListener: function removeListener(eventName, listener) {                                                       // 4670\n    var listeners = this._events[eventName];                                                                           // 4671\n    if (listeners) {                                                                                                   // 4672\n      var length = listeners.length;                                                                                   // 4673\n      var position = -1;                                                                                               // 4674\n      for (var i = 0; i < length; ++i) {                                                                               // 4675\n        if (listeners[i] === listener) {                                                                               // 4676\n          position = i;                                                                                                // 4677\n        }                                                                                                              // 4678\n      }                                                                                                                // 4679\n      if (position > -1) {                                                                                             // 4680\n        listeners.splice(position, 1);                                                                                 // 4681\n      }                                                                                                                // 4682\n    }                                                                                                                  // 4683\n    return this;                                                                                                       // 4684\n  },                                                                                                                   // 4685\n                                                                                                                       // 4686\n  removeAllListeners: function removeAllListeners(eventName) {                                                         // 4687\n    if (eventName) {                                                                                                   // 4688\n      delete this._events[eventName];                                                                                  // 4689\n    } else {                                                                                                           // 4690\n      this._events = {};                                                                                               // 4691\n    }                                                                                                                  // 4692\n    return this;                                                                                                       // 4693\n  },                                                                                                                   // 4694\n                                                                                                                       // 4695\n                                                                                                                       // 4696\n  emit: function emit(eventName, eventArgs, doneCallback) {                                                            // 4697\n    if (!doneCallback) doneCallback = function() { };                                                                  // 4698\n    var listeners = this.listeners(eventName);                                                                         // 4699\n    var count = listeners.length;                                                                                      // 4700\n    this.callListeners(listeners, eventArgs, doneCallback);                                                            // 4701\n    return count > 0;                                                                                                  // 4702\n  },                                                                                                                   // 4703\n                                                                                                                       // 4704\n                                                                                                                       // 4705\n  callListeners: function callListeners(listeners, args, doneCallback, prevError) {                                    // 4706\n    var self = this;                                                                                                   // 4707\n    var error = prevError || null;                                                                                     // 4708\n                                                                                                                       // 4709\n    function callNextListener(err) {                                                                                   // 4710\n      if (err) {                                                                                                       // 4711\n        error = AWS.util.error(error || new Error(), err);                                                             // 4712\n        if (self._haltHandlersOnError) {                                                                               // 4713\n          return doneCallback.call(self, error);                                                                       // 4714\n        }                                                                                                              // 4715\n      }                                                                                                                // 4716\n      self.callListeners(listeners, args, doneCallback, error);                                                        // 4717\n    }                                                                                                                  // 4718\n                                                                                                                       // 4719\n    while (listeners.length > 0) {                                                                                     // 4720\n      var listener = listeners.shift();                                                                                // 4721\n      if (listener._isAsync) { // asynchronous listener                                                                // 4722\n        listener.apply(self, args.concat([callNextListener]));                                                         // 4723\n        return; // stop here, callNextListener will continue                                                           // 4724\n      } else { // synchronous listener                                                                                 // 4725\n        try {                                                                                                          // 4726\n          listener.apply(self, args);                                                                                  // 4727\n        } catch (err) {                                                                                                // 4728\n          error = AWS.util.error(error || new Error(), err);                                                           // 4729\n        }                                                                                                              // 4730\n        if (error && self._haltHandlersOnError) {                                                                      // 4731\n          doneCallback.call(self, error);                                                                              // 4732\n          return;                                                                                                      // 4733\n        }                                                                                                              // 4734\n      }                                                                                                                // 4735\n    }                                                                                                                  // 4736\n    doneCallback.call(self, error);                                                                                    // 4737\n  },                                                                                                                   // 4738\n                                                                                                                       // 4739\n                                                                                                                       // 4740\n  addListeners: function addListeners(listeners) {                                                                     // 4741\n    var self = this;                                                                                                   // 4742\n                                                                                                                       // 4743\n    if (listeners._events) listeners = listeners._events;                                                              // 4744\n                                                                                                                       // 4745\n    AWS.util.each(listeners, function(event, callbacks) {                                                              // 4746\n      if (typeof callbacks === 'function') callbacks = [callbacks];                                                    // 4747\n      AWS.util.arrayEach(callbacks, function(callback) {                                                               // 4748\n        self.on(event, callback);                                                                                      // 4749\n      });                                                                                                              // 4750\n    });                                                                                                                // 4751\n                                                                                                                       // 4752\n    return self;                                                                                                       // 4753\n  },                                                                                                                   // 4754\n                                                                                                                       // 4755\n                                                                                                                       // 4756\n  addNamedListener: function addNamedListener(name, eventName, callback) {                                             // 4757\n    this[name] = callback;                                                                                             // 4758\n    this.addListener(eventName, callback);                                                                             // 4759\n    return this;                                                                                                       // 4760\n  },                                                                                                                   // 4761\n                                                                                                                       // 4762\n                                                                                                                       // 4763\n  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback) {                                   // 4764\n    callback._isAsync = true;                                                                                          // 4765\n    return this.addNamedListener(name, eventName, callback);                                                           // 4766\n  },                                                                                                                   // 4767\n                                                                                                                       // 4768\n                                                                                                                       // 4769\n  addNamedListeners: function addNamedListeners(callback) {                                                            // 4770\n    var self = this;                                                                                                   // 4771\n    callback(                                                                                                          // 4772\n      function() {                                                                                                     // 4773\n        self.addNamedListener.apply(self, arguments);                                                                  // 4774\n      },                                                                                                               // 4775\n      function() {                                                                                                     // 4776\n        self.addNamedAsyncListener.apply(self, arguments);                                                             // 4777\n      }                                                                                                                // 4778\n    );                                                                                                                 // 4779\n    return this;                                                                                                       // 4780\n  }                                                                                                                    // 4781\n});                                                                                                                    // 4782\n                                                                                                                       // 4783\n                                                                                                                       // 4784\nAWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;                                    // 4785\n                                                                                                                       // 4786\nmodule.exports = AWS.SequentialExecutor;                                                                               // 4787\n                                                                                                                       // 4788\n},{\"./core\":4}],41:[function(require,module,exports){                                                                  // 4789\nvar AWS = require('./core');                                                                                           // 4790\nvar Api = require('./model/api');                                                                                      // 4791\nvar regionConfig = require('./region_config');                                                                         // 4792\nvar inherit = AWS.util.inherit;                                                                                        // 4793\n                                                                                                                       // 4794\n                                                                                                                       // 4795\nAWS.Service = inherit({                                                                                                // 4796\n                                                                                                                       // 4797\n  constructor: function Service(config) {                                                                              // 4798\n    if (!this.loadServiceClass) {                                                                                      // 4799\n      throw AWS.util.error(new Error(),                                                                                // 4800\n        'Service must be constructed with `new\\' operator');                                                           // 4801\n    }                                                                                                                  // 4802\n    var ServiceClass = this.loadServiceClass(config || {});                                                            // 4803\n    if (ServiceClass) return new ServiceClass(config);                                                                 // 4804\n    this.initialize(config);                                                                                           // 4805\n  },                                                                                                                   // 4806\n                                                                                                                       // 4807\n                                                                                                                       // 4808\n  initialize: function initialize(config) {                                                                            // 4809\n    var svcConfig = AWS.config[this.serviceIdentifier];                                                                // 4810\n                                                                                                                       // 4811\n    this.config = new AWS.Config(AWS.config);                                                                          // 4812\n    if (svcConfig) this.config.update(svcConfig, true);                                                                // 4813\n    if (config) this.config.update(config, true);                                                                      // 4814\n                                                                                                                       // 4815\n    this.validateService();                                                                                            // 4816\n    if (!this.config.endpoint) regionConfig(this);                                                                     // 4817\n                                                                                                                       // 4818\n    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);                                            // 4819\n    this.setEndpoint(this.config.endpoint);                                                                            // 4820\n  },                                                                                                                   // 4821\n                                                                                                                       // 4822\n                                                                                                                       // 4823\n  validateService: function validateService() {                                                                        // 4824\n  },                                                                                                                   // 4825\n                                                                                                                       // 4826\n                                                                                                                       // 4827\n  loadServiceClass: function loadServiceClass(serviceConfig) {                                                         // 4828\n    var config = serviceConfig;                                                                                        // 4829\n    if (!AWS.util.isEmpty(this.api)) {                                                                                 // 4830\n      return null;                                                                                                     // 4831\n    } else if (config.apiConfig) {                                                                                     // 4832\n      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);                                         // 4833\n    } else if (!this.constructor.services) {                                                                           // 4834\n      return null;                                                                                                     // 4835\n    } else {                                                                                                           // 4836\n      config = new AWS.Config(AWS.config);                                                                             // 4837\n      config.update(serviceConfig, true);                                                                              // 4838\n      var version = config.apiVersions[this.constructor.serviceIdentifier];                                            // 4839\n      version = version || config.apiVersion;                                                                          // 4840\n      return this.getLatestServiceClass(version);                                                                      // 4841\n    }                                                                                                                  // 4842\n  },                                                                                                                   // 4843\n                                                                                                                       // 4844\n                                                                                                                       // 4845\n  getLatestServiceClass: function getLatestServiceClass(version) {                                                     // 4846\n    version = this.getLatestServiceVersion(version);                                                                   // 4847\n    if (this.constructor.services[version] === null) {                                                                 // 4848\n      AWS.Service.defineServiceApi(this.constructor, version);                                                         // 4849\n    }                                                                                                                  // 4850\n                                                                                                                       // 4851\n    return this.constructor.services[version];                                                                         // 4852\n  },                                                                                                                   // 4853\n                                                                                                                       // 4854\n                                                                                                                       // 4855\n  getLatestServiceVersion: function getLatestServiceVersion(version) {                                                 // 4856\n    if (!this.constructor.services || this.constructor.services.length === 0) {                                        // 4857\n      throw new Error('No services defined on ' +                                                                      // 4858\n                      this.constructor.serviceIdentifier);                                                             // 4859\n    }                                                                                                                  // 4860\n                                                                                                                       // 4861\n    if (!version) {                                                                                                    // 4862\n      version = 'latest';                                                                                              // 4863\n    } else if (AWS.util.isType(version, Date)) {                                                                       // 4864\n      version = AWS.util.date.iso8601(version).split('T')[0];                                                          // 4865\n    }                                                                                                                  // 4866\n                                                                                                                       // 4867\n    if (Object.hasOwnProperty(this.constructor.services, version)) {                                                   // 4868\n      return version;                                                                                                  // 4869\n    }                                                                                                                  // 4870\n                                                                                                                       // 4871\n    var keys = Object.keys(this.constructor.services).sort();                                                          // 4872\n    var selectedVersion = null;                                                                                        // 4873\n    for (var i = keys.length - 1; i >= 0; i--) {                                                                       // 4874\n      if (keys[i][keys[i].length - 1] !== '*') {                                                                       // 4875\n        selectedVersion = keys[i];                                                                                     // 4876\n      }                                                                                                                // 4877\n      if (keys[i].substr(0, 10) <= version) {                                                                          // 4878\n        return selectedVersion;                                                                                        // 4879\n      }                                                                                                                // 4880\n    }                                                                                                                  // 4881\n                                                                                                                       // 4882\n    throw new Error('Could not find ' + this.constructor.serviceIdentifier +                                           // 4883\n                    ' API to satisfy version constraint `' + version + '\\'');                                          // 4884\n  },                                                                                                                   // 4885\n                                                                                                                       // 4886\n                                                                                                                       // 4887\n  api: {},                                                                                                             // 4888\n                                                                                                                       // 4889\n                                                                                                                       // 4890\n  defaultRetryCount: 3,                                                                                                // 4891\n                                                                                                                       // 4892\n                                                                                                                       // 4893\n  makeRequest: function makeRequest(operation, params, callback) {                                                     // 4894\n    if (typeof params === 'function') {                                                                                // 4895\n      callback = params;                                                                                               // 4896\n      params = null;                                                                                                   // 4897\n    }                                                                                                                  // 4898\n                                                                                                                       // 4899\n    params = params || {};                                                                                             // 4900\n    if (this.config.params) { // copy only toplevel bound params                                                       // 4901\n      var rules = this.api.operations[operation];                                                                      // 4902\n      if (rules) {                                                                                                     // 4903\n        params = AWS.util.copy(params);                                                                                // 4904\n        AWS.util.each(this.config.params, function(key, value) {                                                       // 4905\n          if (rules.input.members[key]) {                                                                              // 4906\n            if (params[key] === undefined || params[key] === null) {                                                   // 4907\n              params[key] = value;                                                                                     // 4908\n            }                                                                                                          // 4909\n          }                                                                                                            // 4910\n        });                                                                                                            // 4911\n      }                                                                                                                // 4912\n    }                                                                                                                  // 4913\n                                                                                                                       // 4914\n    var request = new AWS.Request(this, operation, params);                                                            // 4915\n    this.addAllRequestListeners(request);                                                                              // 4916\n                                                                                                                       // 4917\n    if (callback) request.send(callback);                                                                              // 4918\n    return request;                                                                                                    // 4919\n  },                                                                                                                   // 4920\n                                                                                                                       // 4921\n                                                                                                                       // 4922\n  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {                       // 4923\n    if (typeof params === 'function') {                                                                                // 4924\n      callback = params;                                                                                               // 4925\n      params = {};                                                                                                     // 4926\n    }                                                                                                                  // 4927\n                                                                                                                       // 4928\n    var request = this.makeRequest(operation, params).toUnauthenticated();                                             // 4929\n    return callback ? request.send(callback) : request;                                                                // 4930\n  },                                                                                                                   // 4931\n                                                                                                                       // 4932\n                                                                                                                       // 4933\n  waitFor: function waitFor(state, params, callback) {                                                                 // 4934\n    var waiter = new AWS.ResourceWaiter(this, state);                                                                  // 4935\n    return waiter.wait(params, callback);                                                                              // 4936\n  },                                                                                                                   // 4937\n                                                                                                                       // 4938\n                                                                                                                       // 4939\n  addAllRequestListeners: function addAllRequestListeners(request) {                                                   // 4940\n    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(),                                          // 4941\n                AWS.EventListeners.CorePost];                                                                          // 4942\n    for (var i = 0; i < list.length; i++) {                                                                            // 4943\n      if (list[i]) request.addListeners(list[i]);                                                                      // 4944\n    }                                                                                                                  // 4945\n                                                                                                                       // 4946\n    if (!this.config.paramValidation) {                                                                                // 4947\n      request.removeListener('validate',                                                                               // 4948\n        AWS.EventListeners.Core.VALIDATE_PARAMETERS);                                                                  // 4949\n    }                                                                                                                  // 4950\n                                                                                                                       // 4951\n    if (this.config.logger) { // add logging events                                                                    // 4952\n      request.addListeners(AWS.EventListeners.Logger);                                                                 // 4953\n    }                                                                                                                  // 4954\n                                                                                                                       // 4955\n    this.setupRequestListeners(request);                                                                               // 4956\n  },                                                                                                                   // 4957\n                                                                                                                       // 4958\n                                                                                                                       // 4959\n  setupRequestListeners: function setupRequestListeners() {                                                            // 4960\n  },                                                                                                                   // 4961\n                                                                                                                       // 4962\n                                                                                                                       // 4963\n  getSignerClass: function getSignerClass() {                                                                          // 4964\n    var version;                                                                                                       // 4965\n    if (this.config.signatureVersion) {                                                                                // 4966\n      version = this.config.signatureVersion;                                                                          // 4967\n    } else {                                                                                                           // 4968\n      version = this.api.signatureVersion;                                                                             // 4969\n    }                                                                                                                  // 4970\n    return AWS.Signers.RequestSigner.getVersion(version);                                                              // 4971\n  },                                                                                                                   // 4972\n                                                                                                                       // 4973\n                                                                                                                       // 4974\n  serviceInterface: function serviceInterface() {                                                                      // 4975\n    switch (this.api.protocol) {                                                                                       // 4976\n      case 'ec2': return AWS.EventListeners.Query;                                                                     // 4977\n      case 'query': return AWS.EventListeners.Query;                                                                   // 4978\n      case 'json': return AWS.EventListeners.Json;                                                                     // 4979\n      case 'rest-json': return AWS.EventListeners.RestJson;                                                            // 4980\n      case 'rest-xml': return AWS.EventListeners.RestXml;                                                              // 4981\n    }                                                                                                                  // 4982\n    if (this.api.protocol) {                                                                                           // 4983\n      throw new Error('Invalid service `protocol\\' ' +                                                                 // 4984\n        this.api.protocol + ' in API config');                                                                         // 4985\n    }                                                                                                                  // 4986\n  },                                                                                                                   // 4987\n                                                                                                                       // 4988\n                                                                                                                       // 4989\n  successfulResponse: function successfulResponse(resp) {                                                              // 4990\n    return resp.httpResponse.statusCode < 300;                                                                         // 4991\n  },                                                                                                                   // 4992\n                                                                                                                       // 4993\n                                                                                                                       // 4994\n  numRetries: function numRetries() {                                                                                  // 4995\n    if (this.config.maxRetries !== undefined) {                                                                        // 4996\n      return this.config.maxRetries;                                                                                   // 4997\n    } else {                                                                                                           // 4998\n      return this.defaultRetryCount;                                                                                   // 4999\n    }                                                                                                                  // 5000\n  },                                                                                                                   // 5001\n                                                                                                                       // 5002\n                                                                                                                       // 5003\n  retryDelays: function retryDelays(retryCount) {                                                                      // 5004\n    var retryDelayOptions = this.config.retryDelayOptions || {};                                                       // 5005\n    var customBackoff = retryDelayOptions.customBackoff || null;                                                       // 5006\n    if (typeof customBackoff === 'function') {                                                                         // 5007\n      return customBackoff(retryCount);                                                                                // 5008\n    }                                                                                                                  // 5009\n    var base = retryDelayOptions.base || 30;                                                                           // 5010\n    var delay = Math.random() * (Math.pow(2, retryCount) * base);                                                      // 5011\n    return delay;                                                                                                      // 5012\n  },                                                                                                                   // 5013\n                                                                                                                       // 5014\n                                                                                                                       // 5015\n  retryableError: function retryableError(error) {                                                                     // 5016\n    if (this.networkingError(error)) return true;                                                                      // 5017\n    if (this.expiredCredentialsError(error)) return true;                                                              // 5018\n    if (this.throttledError(error)) return true;                                                                       // 5019\n    if (error.statusCode >= 500) return true;                                                                          // 5020\n    return false;                                                                                                      // 5021\n  },                                                                                                                   // 5022\n                                                                                                                       // 5023\n                                                                                                                       // 5024\n  networkingError: function networkingError(error) {                                                                   // 5025\n    return error.code === 'NetworkingError';                                                                           // 5026\n  },                                                                                                                   // 5027\n                                                                                                                       // 5028\n                                                                                                                       // 5029\n  expiredCredentialsError: function expiredCredentialsError(error) {                                                   // 5030\n    return (error.code === 'ExpiredTokenException');                                                                   // 5031\n  },                                                                                                                   // 5032\n                                                                                                                       // 5033\n                                                                                                                       // 5034\n  clockSkewError: function clockSkewError(error) {                                                                     // 5035\n    switch (error.code) {                                                                                              // 5036\n      case 'RequestTimeTooSkewed':                                                                                     // 5037\n      case 'RequestExpired':                                                                                           // 5038\n      case 'InvalidSignatureException':                                                                                // 5039\n      case 'SignatureDoesNotMatch':                                                                                    // 5040\n      case 'AuthFailure':                                                                                              // 5041\n      case 'RequestInTheFuture':                                                                                       // 5042\n        return true;                                                                                                   // 5043\n      default: return false;                                                                                           // 5044\n    }                                                                                                                  // 5045\n  },                                                                                                                   // 5046\n                                                                                                                       // 5047\n                                                                                                                       // 5048\n  throttledError: function throttledError(error) {                                                                     // 5049\n    switch (error.code) {                                                                                              // 5050\n      case 'ProvisionedThroughputExceededException':                                                                   // 5051\n      case 'Throttling':                                                                                               // 5052\n      case 'ThrottlingException':                                                                                      // 5053\n      case 'RequestLimitExceeded':                                                                                     // 5054\n      case 'RequestThrottled':                                                                                         // 5055\n        return true;                                                                                                   // 5056\n      default:                                                                                                         // 5057\n        return false;                                                                                                  // 5058\n    }                                                                                                                  // 5059\n  },                                                                                                                   // 5060\n                                                                                                                       // 5061\n                                                                                                                       // 5062\n  endpointFromTemplate: function endpointFromTemplate(endpoint) {                                                      // 5063\n    if (typeof endpoint !== 'string') return endpoint;                                                                 // 5064\n                                                                                                                       // 5065\n    var e = endpoint;                                                                                                  // 5066\n    e = e.replace(/\\{service\\}/g, this.api.endpointPrefix);                                                            // 5067\n    e = e.replace(/\\{region\\}/g, this.config.region);                                                                  // 5068\n    e = e.replace(/\\{scheme\\}/g, this.config.sslEnabled ? 'https' : 'http');                                           // 5069\n    return e;                                                                                                          // 5070\n  },                                                                                                                   // 5071\n                                                                                                                       // 5072\n                                                                                                                       // 5073\n  setEndpoint: function setEndpoint(endpoint) {                                                                        // 5074\n    this.endpoint = new AWS.Endpoint(endpoint, this.config);                                                           // 5075\n  },                                                                                                                   // 5076\n                                                                                                                       // 5077\n                                                                                                                       // 5078\n  paginationConfig: function paginationConfig(operation, throwException) {                                             // 5079\n    var paginator = this.api.operations[operation].paginator;                                                          // 5080\n    if (!paginator) {                                                                                                  // 5081\n      if (throwException) {                                                                                            // 5082\n        var e = new Error();                                                                                           // 5083\n        throw AWS.util.error(e, 'No pagination configuration for ' + operation);                                       // 5084\n      }                                                                                                                // 5085\n      return null;                                                                                                     // 5086\n    }                                                                                                                  // 5087\n                                                                                                                       // 5088\n    return paginator;                                                                                                  // 5089\n  }                                                                                                                    // 5090\n});                                                                                                                    // 5091\n                                                                                                                       // 5092\nAWS.util.update(AWS.Service, {                                                                                         // 5093\n                                                                                                                       // 5094\n                                                                                                                       // 5095\n  defineMethods: function defineMethods(svc) {                                                                         // 5096\n    AWS.util.each(svc.prototype.api.operations, function iterator(method) {                                            // 5097\n      if (svc.prototype[method]) return;                                                                               // 5098\n      svc.prototype[method] = function (params, callback) {                                                            // 5099\n        return this.makeRequest(method, params, callback);                                                             // 5100\n      };                                                                                                               // 5101\n    });                                                                                                                // 5102\n  },                                                                                                                   // 5103\n                                                                                                                       // 5104\n                                                                                                                       // 5105\n  defineService: function defineService(serviceIdentifier, versions, features) {                                       // 5106\n    AWS.Service._serviceMap[serviceIdentifier] = true;                                                                 // 5107\n    if (!Array.isArray(versions)) {                                                                                    // 5108\n      features = versions;                                                                                             // 5109\n      versions = [];                                                                                                   // 5110\n    }                                                                                                                  // 5111\n                                                                                                                       // 5112\n    var svc = inherit(AWS.Service, features || {});                                                                    // 5113\n                                                                                                                       // 5114\n    if (typeof serviceIdentifier === 'string') {                                                                       // 5115\n      AWS.Service.addVersions(svc, versions);                                                                          // 5116\n                                                                                                                       // 5117\n      var identifier = svc.serviceIdentifier || serviceIdentifier;                                                     // 5118\n      svc.serviceIdentifier = identifier;                                                                              // 5119\n    } else { // defineService called with an API                                                                       // 5120\n      svc.prototype.api = serviceIdentifier;                                                                           // 5121\n      AWS.Service.defineMethods(svc);                                                                                  // 5122\n    }                                                                                                                  // 5123\n                                                                                                                       // 5124\n    return svc;                                                                                                        // 5125\n  },                                                                                                                   // 5126\n                                                                                                                       // 5127\n                                                                                                                       // 5128\n  addVersions: function addVersions(svc, versions) {                                                                   // 5129\n    if (!Array.isArray(versions)) versions = [versions];                                                               // 5130\n                                                                                                                       // 5131\n    svc.services = svc.services || {};                                                                                 // 5132\n    for (var i = 0; i < versions.length; i++) {                                                                        // 5133\n      if (svc.services[versions[i]] === undefined) {                                                                   // 5134\n        svc.services[versions[i]] = null;                                                                              // 5135\n      }                                                                                                                // 5136\n    }                                                                                                                  // 5137\n                                                                                                                       // 5138\n    svc.apiVersions = Object.keys(svc.services).sort();                                                                // 5139\n  },                                                                                                                   // 5140\n                                                                                                                       // 5141\n                                                                                                                       // 5142\n  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {                                        // 5143\n    var svc = inherit(superclass, {                                                                                    // 5144\n      serviceIdentifier: superclass.serviceIdentifier                                                                  // 5145\n    });                                                                                                                // 5146\n                                                                                                                       // 5147\n    function setApi(api) {                                                                                             // 5148\n      if (api.isApi) {                                                                                                 // 5149\n        svc.prototype.api = api;                                                                                       // 5150\n      } else {                                                                                                         // 5151\n        svc.prototype.api = new Api(api);                                                                              // 5152\n      }                                                                                                                // 5153\n    }                                                                                                                  // 5154\n                                                                                                                       // 5155\n    if (typeof version === 'string') {                                                                                 // 5156\n      if (apiConfig) {                                                                                                 // 5157\n        setApi(apiConfig);                                                                                             // 5158\n      } else {                                                                                                         // 5159\n        try {                                                                                                          // 5160\n          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));                                                // 5161\n        } catch (err) {                                                                                                // 5162\n          throw AWS.util.error(err, {                                                                                  // 5163\n            message: 'Could not find API configuration ' +                                                             // 5164\n              superclass.serviceIdentifier + '-' + version                                                             // 5165\n          });                                                                                                          // 5166\n        }                                                                                                              // 5167\n      }                                                                                                                // 5168\n      if (!superclass.services.hasOwnProperty(version)) {                                                              // 5169\n        superclass.apiVersions = superclass.apiVersions.concat(version).sort();                                        // 5170\n      }                                                                                                                // 5171\n      superclass.services[version] = svc;                                                                              // 5172\n    } else {                                                                                                           // 5173\n      setApi(version);                                                                                                 // 5174\n    }                                                                                                                  // 5175\n                                                                                                                       // 5176\n    AWS.Service.defineMethods(svc);                                                                                    // 5177\n    return svc;                                                                                                        // 5178\n  },                                                                                                                   // 5179\n                                                                                                                       // 5180\n                                                                                                                       // 5181\n  hasService: function(identifier) {                                                                                   // 5182\n    return AWS.Service._serviceMap.hasOwnProperty(identifier);                                                         // 5183\n  },                                                                                                                   // 5184\n                                                                                                                       // 5185\n                                                                                                                       // 5186\n  _serviceMap: {}                                                                                                      // 5187\n});                                                                                                                    // 5188\n                                                                                                                       // 5189\n},{\"./core\":4,\"./model/api\":21,\"./region_config\":34}],42:[function(require,module,exports){                            // 5190\nvar AWS = require('../core');                                                                                          // 5191\n                                                                                                                       // 5192\nrequire('../cloudfront/signer');                                                                                       // 5193\n                                                                                                                       // 5194\nAWS.util.update(AWS.CloudFront.prototype, {                                                                            // 5195\n                                                                                                                       // 5196\n  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5197\n    request.addListener('extractData', AWS.util.hoistPayloadMember);                                                   // 5198\n  }                                                                                                                    // 5199\n                                                                                                                       // 5200\n});                                                                                                                    // 5201\n                                                                                                                       // 5202\n},{\"../cloudfront/signer\":2,\"../core\":4}],43:[function(require,module,exports){                                        // 5203\nvar AWS = require('../core');                                                                                          // 5204\n                                                                                                                       // 5205\nAWS.util.update(AWS.CognitoIdentity.prototype, {                                                                       // 5206\n  getOpenIdToken: function getOpenIdToken(params, callback) {                                                          // 5207\n    return this.makeUnauthenticatedRequest('getOpenIdToken', params, callback);                                        // 5208\n  },                                                                                                                   // 5209\n                                                                                                                       // 5210\n  getId: function getId(params, callback) {                                                                            // 5211\n    return this.makeUnauthenticatedRequest('getId', params, callback);                                                 // 5212\n  },                                                                                                                   // 5213\n                                                                                                                       // 5214\n  getCredentialsForIdentity: function getCredentialsForIdentity(params, callback) {                                    // 5215\n    return this.makeUnauthenticatedRequest('getCredentialsForIdentity', params, callback);                             // 5216\n  }                                                                                                                    // 5217\n});                                                                                                                    // 5218\n                                                                                                                       // 5219\n},{\"../core\":4}],44:[function(require,module,exports){                                                                 // 5220\nvar AWS = require('../core');                                                                                          // 5221\nrequire('../dynamodb/document_client');                                                                                // 5222\n                                                                                                                       // 5223\nAWS.util.update(AWS.DynamoDB.prototype, {                                                                              // 5224\n                                                                                                                       // 5225\n  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5226\n    if (request.service.config.dynamoDbCrc32) {                                                                        // 5227\n      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);                                     // 5228\n      request.addListener('extractData', this.checkCrc32);                                                             // 5229\n      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);                                        // 5230\n    }                                                                                                                  // 5231\n  },                                                                                                                   // 5232\n                                                                                                                       // 5233\n                                                                                                                       // 5234\n  checkCrc32: function checkCrc32(resp) {                                                                              // 5235\n    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {                                    // 5236\n      resp.error = AWS.util.error(new Error(), {                                                                       // 5237\n        code: 'CRC32CheckFailed',                                                                                      // 5238\n        message: 'CRC32 integrity check failed',                                                                       // 5239\n        retryable: true                                                                                                // 5240\n      });                                                                                                              // 5241\n      resp.request.haltHandlersOnError();                                                                              // 5242\n      throw (resp.error);                                                                                              // 5243\n    }                                                                                                                  // 5244\n  },                                                                                                                   // 5245\n                                                                                                                       // 5246\n                                                                                                                       // 5247\n  crc32IsValid: function crc32IsValid(resp) {                                                                          // 5248\n    var crc = resp.httpResponse.headers['x-amz-crc32'];                                                                // 5249\n    if (!crc) return true; // no (valid) CRC32 header                                                                  // 5250\n    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);                                        // 5251\n  },                                                                                                                   // 5252\n                                                                                                                       // 5253\n                                                                                                                       // 5254\n  defaultRetryCount: 10,                                                                                               // 5255\n                                                                                                                       // 5256\n                                                                                                                       // 5257\n  retryDelays: function retryDelays(retryCount) {                                                                      // 5258\n    var delay = retryCount > 0 ? (50 * Math.pow(2, retryCount - 1)) : 0;                                               // 5259\n    return delay;                                                                                                      // 5260\n  }                                                                                                                    // 5261\n});                                                                                                                    // 5262\n                                                                                                                       // 5263\n},{\"../core\":4,\"../dynamodb/document_client\":12}],45:[function(require,module,exports){                                // 5264\nvar AWS = require('../core');                                                                                          // 5265\n                                                                                                                       // 5266\nAWS.util.update(AWS.EC2.prototype, {                                                                                   // 5267\n                                                                                                                       // 5268\n  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5269\n    request.removeListener('extractError', AWS.EventListeners.Query.EXTRACT_ERROR);                                    // 5270\n    request.addListener('extractError', this.extractError);                                                            // 5271\n                                                                                                                       // 5272\n    if (request.operation === 'copySnapshot') {                                                                        // 5273\n      request.onAsync('validate', this.buildCopySnapshotPresignedUrl);                                                 // 5274\n    }                                                                                                                  // 5275\n  },                                                                                                                   // 5276\n                                                                                                                       // 5277\n                                                                                                                       // 5278\n  buildCopySnapshotPresignedUrl: function buildCopySnapshotPresignedUrl(req, done) {                                   // 5279\n    if (req.params.PresignedUrl || req._subRequest) {                                                                  // 5280\n      return done();                                                                                                   // 5281\n    }                                                                                                                  // 5282\n                                                                                                                       // 5283\n    req.params = AWS.util.copy(req.params);                                                                            // 5284\n    req.params.DestinationRegion = req.service.config.region;                                                          // 5285\n                                                                                                                       // 5286\n    var config = AWS.util.copy(req.service.config);                                                                    // 5287\n    delete config.endpoint;                                                                                            // 5288\n    config.region = req.params.SourceRegion;                                                                           // 5289\n    var svc = new req.service.constructor(config);                                                                     // 5290\n    var newReq = svc[req.operation](req.params);                                                                       // 5291\n    newReq._subRequest = true;                                                                                         // 5292\n    newReq.presign(function(err, url) {                                                                                // 5293\n      if (err) done(err);                                                                                              // 5294\n      else {                                                                                                           // 5295\n        req.params.PresignedUrl = url;                                                                                 // 5296\n        done();                                                                                                        // 5297\n      }                                                                                                                // 5298\n    });                                                                                                                // 5299\n  },                                                                                                                   // 5300\n                                                                                                                       // 5301\n                                                                                                                       // 5302\n  extractError: function extractError(resp) {                                                                          // 5303\n    var httpResponse = resp.httpResponse;                                                                              // 5304\n    var data = new AWS.XML.Parser().parse(httpResponse.body.toString() || '');                                         // 5305\n    if (data.Errors) {                                                                                                 // 5306\n      resp.error = AWS.util.error(new Error(), {                                                                       // 5307\n        code: data.Errors.Error.Code,                                                                                  // 5308\n        message: data.Errors.Error.Message                                                                             // 5309\n      });                                                                                                              // 5310\n    } else {                                                                                                           // 5311\n      resp.error = AWS.util.error(new Error(), {                                                                       // 5312\n        code: httpResponse.statusCode,                                                                                 // 5313\n        message: null                                                                                                  // 5314\n      });                                                                                                              // 5315\n    }                                                                                                                  // 5316\n    resp.error.requestId = data.RequestID || null;                                                                     // 5317\n  }                                                                                                                    // 5318\n});                                                                                                                    // 5319\n                                                                                                                       // 5320\n},{\"../core\":4}],46:[function(require,module,exports){                                                                 // 5321\nvar AWS = require('../core');                                                                                          // 5322\n                                                                                                                       // 5323\nAWS.util.update(AWS.MachineLearning.prototype, {                                                                       // 5324\n                                                                                                                       // 5325\n  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5326\n    if (request.operation === 'predict') {                                                                             // 5327\n      request.addListener('build', this.buildEndpoint);                                                                // 5328\n    }                                                                                                                  // 5329\n  },                                                                                                                   // 5330\n                                                                                                                       // 5331\n                                                                                                                       // 5332\n  buildEndpoint: function buildEndpoint(request) {                                                                     // 5333\n    var url = request.params.PredictEndpoint;                                                                          // 5334\n    if (url) {                                                                                                         // 5335\n      request.httpRequest.endpoint = new AWS.Endpoint(url);                                                            // 5336\n    }                                                                                                                  // 5337\n  }                                                                                                                    // 5338\n                                                                                                                       // 5339\n});                                                                                                                    // 5340\n                                                                                                                       // 5341\n},{\"../core\":4}],47:[function(require,module,exports){                                                                 // 5342\nvar AWS = require('../core');                                                                                          // 5343\n                                                                                                                       // 5344\nAWS.util.update(AWS.Route53.prototype, {                                                                               // 5345\n                                                                                                                       // 5346\n  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5347\n    request.on('build', this.sanitizeUrl);                                                                             // 5348\n  },                                                                                                                   // 5349\n                                                                                                                       // 5350\n                                                                                                                       // 5351\n  sanitizeUrl: function sanitizeUrl(request) {                                                                         // 5352\n    var path = request.httpRequest.path;                                                                               // 5353\n    request.httpRequest.path = path.replace(/\\/%2F\\w+%2F/, '/');                                                       // 5354\n  }                                                                                                                    // 5355\n});                                                                                                                    // 5356\n                                                                                                                       // 5357\n},{\"../core\":4}],48:[function(require,module,exports){                                                                 // 5358\nvar AWS = require('../core');                                                                                          // 5359\n                                                                                                                       // 5360\nrequire('../s3/managed_upload');                                                                                       // 5361\n                                                                                                                       // 5362\nAWS.util.update(AWS.S3.prototype, {                                                                                    // 5363\n                                                                                                                       // 5364\n  validateService: function validateService() {                                                                        // 5365\n    if (!this.config.region) this.config.region = 'us-east-1';                                                         // 5366\n                                                                                                                       // 5367\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {                                                       // 5368\n      var msg = 'An endpoint must be provided when configuring ' +                                                     // 5369\n                '`s3BucketEndpoint` to true.';                                                                         // 5370\n      throw AWS.util.error(new Error(),                                                                                // 5371\n        {name: 'InvalidEndpoint', message: msg});                                                                      // 5372\n    }                                                                                                                  // 5373\n  },                                                                                                                   // 5374\n                                                                                                                       // 5375\n                                                                                                                       // 5376\n  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5377\n    request.addListener('validate', this.validateScheme);                                                              // 5378\n    request.addListener('validate', this.validateBucketEndpoint);                                                      // 5379\n    request.addListener('build', this.addContentType);                                                                 // 5380\n    request.addListener('build', this.populateURI);                                                                    // 5381\n    request.addListener('build', this.computeContentMd5);                                                              // 5382\n    request.addListener('build', this.computeSseCustomerKeyMd5);                                                       // 5383\n    request.addListener('afterBuild', this.addExpect100Continue);                                                      // 5384\n    request.removeListener('validate',                                                                                 // 5385\n      AWS.EventListeners.Core.VALIDATE_REGION);                                                                        // 5386\n    request.addListener('extractError', this.extractError);                                                            // 5387\n    request.addListener('extractData', this.extractData);                                                              // 5388\n    request.addListener('extractData', AWS.util.hoistPayloadMember);                                                   // 5389\n    request.addListener('beforePresign', this.prepareSignedUrl);                                                       // 5390\n  },                                                                                                                   // 5391\n                                                                                                                       // 5392\n                                                                                                                       // 5393\n  validateScheme: function(req) {                                                                                      // 5394\n    var params = req.params,                                                                                           // 5395\n        scheme = req.httpRequest.endpoint.protocol,                                                                    // 5396\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;                                          // 5397\n    if (sensitive && scheme !== 'https:') {                                                                            // 5398\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' +                                                 // 5399\n        'to \\'true\\' in your configuration';                                                                           // 5400\n      throw AWS.util.error(new Error(),                                                                                // 5401\n        { code: 'ConfigError', message: msg });                                                                        // 5402\n    }                                                                                                                  // 5403\n  },                                                                                                                   // 5404\n                                                                                                                       // 5405\n                                                                                                                       // 5406\n  validateBucketEndpoint: function(req) {                                                                              // 5407\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {                                                   // 5408\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';                                       // 5409\n      throw AWS.util.error(new Error(),                                                                                // 5410\n        { code: 'ConfigError', message: msg });                                                                        // 5411\n    }                                                                                                                  // 5412\n  },                                                                                                                   // 5413\n                                                                                                                       // 5414\n                                                                                                                       // 5415\n  populateURI: function populateURI(req) {                                                                             // 5416\n    var httpRequest = req.httpRequest;                                                                                 // 5417\n    var b = req.params.Bucket;                                                                                         // 5418\n                                                                                                                       // 5419\n    if (b) {                                                                                                           // 5420\n      if (!req.service.pathStyleBucketName(b)) {                                                                       // 5421\n        if (!req.service.config.s3BucketEndpoint) {                                                                    // 5422\n          httpRequest.endpoint.hostname =                                                                              // 5423\n            b + '.' + httpRequest.endpoint.hostname;                                                                   // 5424\n                                                                                                                       // 5425\n          var port = httpRequest.endpoint.port;                                                                        // 5426\n          if (port !== 80 && port !== 443) {                                                                           // 5427\n            httpRequest.endpoint.host = httpRequest.endpoint.hostname + ':' +                                          // 5428\n              httpRequest.endpoint.port;                                                                               // 5429\n          } else {                                                                                                     // 5430\n            httpRequest.endpoint.host = httpRequest.endpoint.hostname;                                                 // 5431\n          }                                                                                                            // 5432\n        }                                                                                                              // 5433\n                                                                                                                       // 5434\n        httpRequest.virtualHostedBucket = b; // needed for signing the request                                         // 5435\n        httpRequest.path = httpRequest.path.replace(new RegExp('/' + b), '');                                          // 5436\n        if (httpRequest.path[0] !== '/') {                                                                             // 5437\n          httpRequest.path = '/' + httpRequest.path;                                                                   // 5438\n        }                                                                                                              // 5439\n      }                                                                                                                // 5440\n    }                                                                                                                  // 5441\n  },                                                                                                                   // 5442\n                                                                                                                       // 5443\n                                                                                                                       // 5444\n  addExpect100Continue: function addExpect100Continue(req) {                                                           // 5445\n    var len = req.httpRequest.headers['Content-Length'];                                                               // 5446\n    if (AWS.util.isNode() && len >= 1024 * 1024) {                                                                     // 5447\n      req.httpRequest.headers['Expect'] = '100-continue';                                                              // 5448\n    }                                                                                                                  // 5449\n  },                                                                                                                   // 5450\n                                                                                                                       // 5451\n                                                                                                                       // 5452\n  addContentType: function addContentType(req) {                                                                       // 5453\n    var httpRequest = req.httpRequest;                                                                                 // 5454\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {                                               // 5455\n      delete httpRequest.headers['Content-Type'];                                                                      // 5456\n      return;                                                                                                          // 5457\n    }                                                                                                                  // 5458\n                                                                                                                       // 5459\n    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type                                          // 5460\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';                                                // 5461\n    }                                                                                                                  // 5462\n                                                                                                                       // 5463\n    var contentType = httpRequest.headers['Content-Type'];                                                             // 5464\n    if (AWS.util.isBrowser()) {                                                                                        // 5465\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {                                // 5466\n        var charset = '; charset=UTF-8';                                                                               // 5467\n        httpRequest.headers['Content-Type'] += charset;                                                                // 5468\n      } else {                                                                                                         // 5469\n        var replaceFn = function(_, prefix, charsetName) {                                                             // 5470\n          return prefix + charsetName.toUpperCase();                                                                   // 5471\n        };                                                                                                             // 5472\n                                                                                                                       // 5473\n        httpRequest.headers['Content-Type'] =                                                                          // 5474\n          contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);                                                       // 5475\n      }                                                                                                                // 5476\n    }                                                                                                                  // 5477\n  },                                                                                                                   // 5478\n                                                                                                                       // 5479\n                                                                                                                       // 5480\n  computableChecksumOperations: {                                                                                      // 5481\n    putBucketCors: true,                                                                                               // 5482\n    putBucketLifecycle: true,                                                                                          // 5483\n    putBucketLifecycleConfiguration: true,                                                                             // 5484\n    putBucketTagging: true,                                                                                            // 5485\n    deleteObjects: true                                                                                                // 5486\n  },                                                                                                                   // 5487\n                                                                                                                       // 5488\n                                                                                                                       // 5489\n  willComputeChecksums: function willComputeChecksums(req) {                                                           // 5490\n    if (this.computableChecksumOperations[req.operation]) return true;                                                 // 5491\n    if (!this.config.computeChecksums) return false;                                                                   // 5492\n                                                                                                                       // 5493\n    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) &&                                                             // 5494\n        typeof req.httpRequest.body !== 'string') {                                                                    // 5495\n      return false;                                                                                                    // 5496\n    }                                                                                                                  // 5497\n                                                                                                                       // 5498\n    var rules = req.service.api.operations[req.operation].input.members;                                               // 5499\n                                                                                                                       // 5500\n    if (req.service.getSignerClass(req) === AWS.Signers.V4) {                                                          // 5501\n      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;                                                // 5502\n    }                                                                                                                  // 5503\n                                                                                                                       // 5504\n    if (rules.ContentMD5 && !req.params.ContentMD5) return true;                                                       // 5505\n  },                                                                                                                   // 5506\n                                                                                                                       // 5507\n                                                                                                                       // 5508\n  computeContentMd5: function computeContentMd5(req) {                                                                 // 5509\n    if (req.service.willComputeChecksums(req)) {                                                                       // 5510\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');                                                   // 5511\n      req.httpRequest.headers['Content-MD5'] = md5;                                                                    // 5512\n    }                                                                                                                  // 5513\n  },                                                                                                                   // 5514\n                                                                                                                       // 5515\n                                                                                                                       // 5516\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {                                                   // 5517\n    var keys = {                                                                                                       // 5518\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',                                                 // 5519\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'                            // 5520\n    };                                                                                                                 // 5521\n    AWS.util.each(keys, function(key, header) {                                                                        // 5522\n      if (req.params[key]) {                                                                                           // 5523\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');                                                    // 5524\n        req.httpRequest.headers[header] = value;                                                                       // 5525\n      }                                                                                                                // 5526\n    });                                                                                                                // 5527\n  },                                                                                                                   // 5528\n                                                                                                                       // 5529\n                                                                                                                       // 5530\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {                                                      // 5531\n    if (this.config.s3ForcePathStyle) return true;                                                                     // 5532\n    if (this.config.s3BucketEndpoint) return false;                                                                    // 5533\n                                                                                                                       // 5534\n    if (this.dnsCompatibleBucketName(bucketName)) {                                                                    // 5535\n      return (this.config.sslEnabled && bucketName.match(/\\./)) ? true : false;                                        // 5536\n    } else {                                                                                                           // 5537\n      return true; // not dns compatible names must always use path style                                              // 5538\n    }                                                                                                                  // 5539\n  },                                                                                                                   // 5540\n                                                                                                                       // 5541\n                                                                                                                       // 5542\n  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {                                              // 5543\n    var b = bucketName;                                                                                                // 5544\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);                                                   // 5545\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);                                                                       // 5546\n    var dots = new RegExp(/\\.\\./);                                                                                     // 5547\n    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;                                  // 5548\n  },                                                                                                                   // 5549\n                                                                                                                       // 5550\n                                                                                                                       // 5551\n  successfulResponse: function successfulResponse(resp) {                                                              // 5552\n    var req = resp.request;                                                                                            // 5553\n    var httpResponse = resp.httpResponse;                                                                              // 5554\n    if (req.operation === 'completeMultipartUpload' &&                                                                 // 5555\n        httpResponse.body.toString().match('<Error>')) {                                                               // 5556\n      return false;                                                                                                    // 5557\n    } else {                                                                                                           // 5558\n      return httpResponse.statusCode < 300;                                                                            // 5559\n    }                                                                                                                  // 5560\n  },                                                                                                                   // 5561\n                                                                                                                       // 5562\n                                                                                                                       // 5563\n  retryableError: function retryableError(error, request) {                                                            // 5564\n    if (request.operation === 'completeMultipartUpload' &&                                                             // 5565\n        error.statusCode === 200) {                                                                                    // 5566\n      return true;                                                                                                     // 5567\n    } else if (error && error.code === 'RequestTimeout') {                                                             // 5568\n      return true;                                                                                                     // 5569\n    } else if (error && error.code === 'AuthorizationHeaderMalformed' &&                                               // 5570\n        error.region && error.region != request.httpRequest.region) {                                                  // 5571\n      request.httpRequest.region = error.region;                                                                       // 5572\n      return true;                                                                                                     // 5573\n    } else {                                                                                                           // 5574\n      var _super = AWS.Service.prototype.retryableError;                                                               // 5575\n      return _super.call(this, error, request);                                                                        // 5576\n    }                                                                                                                  // 5577\n  },                                                                                                                   // 5578\n                                                                                                                       // 5579\n                                                                                                                       // 5580\n  extractData: function extractData(resp) {                                                                            // 5581\n    var req = resp.request;                                                                                            // 5582\n    if (req.operation === 'getBucketLocation') {                                                                       // 5583\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);                                         // 5584\n      delete resp.data['_'];                                                                                           // 5585\n      if (match) {                                                                                                     // 5586\n        resp.data.LocationConstraint = match[1];                                                                       // 5587\n      } else {                                                                                                         // 5588\n        resp.data.LocationConstraint = '';                                                                             // 5589\n      }                                                                                                                // 5590\n    }                                                                                                                  // 5591\n  },                                                                                                                   // 5592\n                                                                                                                       // 5593\n                                                                                                                       // 5594\n  extractError: function extractError(resp) {                                                                          // 5595\n    var codes = {                                                                                                      // 5596\n      304: 'NotModified',                                                                                              // 5597\n      403: 'Forbidden',                                                                                                // 5598\n      400: 'BadRequest',                                                                                               // 5599\n      404: 'NotFound'                                                                                                  // 5600\n    };                                                                                                                 // 5601\n                                                                                                                       // 5602\n    var code = resp.httpResponse.statusCode;                                                                           // 5603\n    var body = resp.httpResponse.body || '';                                                                           // 5604\n    var requestId = resp.requestId;                                                                                    // 5605\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;                // 5606\n    if (codes[code] && body.length === 0) {                                                                            // 5607\n      resp.error = AWS.util.error(new Error(), {                                                                       // 5608\n        code: codes[resp.httpResponse.statusCode],                                                                     // 5609\n        message: null                                                                                                  // 5610\n      });                                                                                                              // 5611\n    } else {                                                                                                           // 5612\n      var data = new AWS.XML.Parser().parse(body.toString());                                                          // 5613\n      resp.error = AWS.util.error(new Error(), {                                                                       // 5614\n        code: data.Code || code,                                                                                       // 5615\n        message: data.Message || null,                                                                                 // 5616\n        region: data.Region || null                                                                                    // 5617\n      });                                                                                                              // 5618\n    }                                                                                                                  // 5619\n    resp.error.requestId = requestId || null;                                                                          // 5620\n    resp.error.extendedRequestId = extendedRequestId || null;                                                          // 5621\n  },                                                                                                                   // 5622\n                                                                                                                       // 5623\n                                                                                                                       // 5624\n  getSignedUrl: function getSignedUrl(operation, params, callback) {                                                   // 5625\n    params = AWS.util.copy(params || {});                                                                              // 5626\n    var expires = params.Expires || 900;                                                                               // 5627\n    delete params.Expires; // we can't validate this                                                                   // 5628\n    var request = this.makeRequest(operation, params);                                                                 // 5629\n    return request.presign(expires, callback);                                                                         // 5630\n  },                                                                                                                   // 5631\n                                                                                                                       // 5632\n                                                                                                                       // 5633\n  prepareSignedUrl: function prepareSignedUrl(request) {                                                               // 5634\n    request.addListener('validate', request.service.noPresignedContentLength);                                         // 5635\n    request.removeListener('build', request.service.addContentType);                                                   // 5636\n    if (!request.params.Body) {                                                                                        // 5637\n      request.removeListener('build', request.service.computeContentMd5);                                              // 5638\n    } else {                                                                                                           // 5639\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);                                       // 5640\n    }                                                                                                                  // 5641\n  },                                                                                                                   // 5642\n                                                                                                                       // 5643\n  noPresignedContentLength: function noPresignedContentLength(request) {                                               // 5644\n    if (request.params.ContentLength !== undefined) {                                                                  // 5645\n      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',                                                  // 5646\n        message: 'ContentLength is not supported in pre-signed URLs.'});                                               // 5647\n    }                                                                                                                  // 5648\n  },                                                                                                                   // 5649\n                                                                                                                       // 5650\n  createBucket: function createBucket(params, callback) {                                                              // 5651\n    if (typeof params === 'function' || !params) {                                                                     // 5652\n      callback = callback || params;                                                                                   // 5653\n      params = {};                                                                                                     // 5654\n    }                                                                                                                  // 5655\n    var hostname = this.endpoint.hostname;                                                                             // 5656\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {                                   // 5657\n      params.CreateBucketConfiguration = { LocationConstraint: this.config.region };                                   // 5658\n    }                                                                                                                  // 5659\n    return this.makeRequest('createBucket', params, callback);                                                         // 5660\n  },                                                                                                                   // 5661\n                                                                                                                       // 5662\n                                                                                                                       // 5663\n  upload: function upload(params, options, callback) {                                                                 // 5664\n    if (typeof options === 'function' && callback === undefined) {                                                     // 5665\n      callback = options;                                                                                              // 5666\n      options = null;                                                                                                  // 5667\n    }                                                                                                                  // 5668\n                                                                                                                       // 5669\n    options = options || {};                                                                                           // 5670\n    options = AWS.util.merge(options || {}, {service: this, params: params});                                          // 5671\n                                                                                                                       // 5672\n    var uploader = new AWS.S3.ManagedUpload(options);                                                                  // 5673\n    if (typeof callback === 'function') uploader.send(callback);                                                       // 5674\n    return uploader;                                                                                                   // 5675\n  }                                                                                                                    // 5676\n});                                                                                                                    // 5677\n                                                                                                                       // 5678\n},{\"../core\":4,\"../s3/managed_upload\":39}],49:[function(require,module,exports){                                       // 5679\nvar AWS = require('../core');                                                                                          // 5680\n                                                                                                                       // 5681\nAWS.util.update(AWS.SQS.prototype, {                                                                                   // 5682\n                                                                                                                       // 5683\n  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5684\n    request.addListener('build', this.buildEndpoint);                                                                  // 5685\n                                                                                                                       // 5686\n    if (request.service.config.computeChecksums) {                                                                     // 5687\n      if (request.operation === 'sendMessage') {                                                                       // 5688\n        request.addListener('extractData', this.verifySendMessageChecksum);                                            // 5689\n      } else if (request.operation === 'sendMessageBatch') {                                                           // 5690\n        request.addListener('extractData', this.verifySendMessageBatchChecksum);                                       // 5691\n      } else if (request.operation === 'receiveMessage') {                                                             // 5692\n        request.addListener('extractData', this.verifyReceiveMessageChecksum);                                         // 5693\n      }                                                                                                                // 5694\n    }                                                                                                                  // 5695\n  },                                                                                                                   // 5696\n                                                                                                                       // 5697\n                                                                                                                       // 5698\n  verifySendMessageChecksum: function verifySendMessageChecksum(response) {                                            // 5699\n    if (!response.data) return;                                                                                        // 5700\n                                                                                                                       // 5701\n    var md5 = response.data.MD5OfMessageBody;                                                                          // 5702\n    var body = this.params.MessageBody;                                                                                // 5703\n    var calculatedMd5 = this.service.calculateChecksum(body);                                                          // 5704\n    if (calculatedMd5 !== md5) {                                                                                       // 5705\n      var msg = 'Got \"' + response.data.MD5OfMessageBody +                                                             // 5706\n        '\", expecting \"' + calculatedMd5 + '\".';                                                                       // 5707\n      this.service.throwInvalidChecksumError(response,                                                                 // 5708\n        [response.data.MessageId], msg);                                                                               // 5709\n    }                                                                                                                  // 5710\n  },                                                                                                                   // 5711\n                                                                                                                       // 5712\n                                                                                                                       // 5713\n  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {                                  // 5714\n    if (!response.data) return;                                                                                        // 5715\n                                                                                                                       // 5716\n    var service = this.service;                                                                                        // 5717\n    var entries = {};                                                                                                  // 5718\n    var errors = [];                                                                                                   // 5719\n    var messageIds = [];                                                                                               // 5720\n    AWS.util.arrayEach(response.data.Successful, function (entry) {                                                    // 5721\n      entries[entry.Id] = entry;                                                                                       // 5722\n    });                                                                                                                // 5723\n    AWS.util.arrayEach(this.params.Entries, function (entry) {                                                         // 5724\n      if (entries[entry.Id]) {                                                                                         // 5725\n        var md5 = entries[entry.Id].MD5OfMessageBody;                                                                  // 5726\n        var body = entry.MessageBody;                                                                                  // 5727\n        if (!service.isChecksumValid(md5, body)) {                                                                     // 5728\n          errors.push(entry.Id);                                                                                       // 5729\n          messageIds.push(entries[entry.Id].MessageId);                                                                // 5730\n        }                                                                                                              // 5731\n      }                                                                                                                // 5732\n    });                                                                                                                // 5733\n                                                                                                                       // 5734\n    if (errors.length > 0) {                                                                                           // 5735\n      service.throwInvalidChecksumError(response, messageIds,                                                          // 5736\n        'Invalid messages: ' + errors.join(', '));                                                                     // 5737\n    }                                                                                                                  // 5738\n  },                                                                                                                   // 5739\n                                                                                                                       // 5740\n                                                                                                                       // 5741\n  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {                                      // 5742\n    if (!response.data) return;                                                                                        // 5743\n                                                                                                                       // 5744\n    var service = this.service;                                                                                        // 5745\n    var messageIds = [];                                                                                               // 5746\n    AWS.util.arrayEach(response.data.Messages, function(message) {                                                     // 5747\n      var md5 = message.MD5OfBody;                                                                                     // 5748\n      var body = message.Body;                                                                                         // 5749\n      if (!service.isChecksumValid(md5, body)) {                                                                       // 5750\n        messageIds.push(message.MessageId);                                                                            // 5751\n      }                                                                                                                // 5752\n    });                                                                                                                // 5753\n                                                                                                                       // 5754\n    if (messageIds.length > 0) {                                                                                       // 5755\n      service.throwInvalidChecksumError(response, messageIds,                                                          // 5756\n        'Invalid messages: ' + messageIds.join(', '));                                                                 // 5757\n    }                                                                                                                  // 5758\n  },                                                                                                                   // 5759\n                                                                                                                       // 5760\n                                                                                                                       // 5761\n  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {                              // 5762\n    response.error = AWS.util.error(new Error(), {                                                                     // 5763\n      retryable: true,                                                                                                 // 5764\n      code: 'InvalidChecksum',                                                                                         // 5765\n      messageIds: ids,                                                                                                 // 5766\n      message: response.request.operation +                                                                            // 5767\n               ' returned an invalid MD5 response. ' + message                                                         // 5768\n    });                                                                                                                // 5769\n  },                                                                                                                   // 5770\n                                                                                                                       // 5771\n                                                                                                                       // 5772\n  isChecksumValid: function isChecksumValid(checksum, data) {                                                          // 5773\n    return this.calculateChecksum(data) === checksum;                                                                  // 5774\n  },                                                                                                                   // 5775\n                                                                                                                       // 5776\n                                                                                                                       // 5777\n  calculateChecksum: function calculateChecksum(data) {                                                                // 5778\n    return AWS.util.crypto.md5(data, 'hex');                                                                           // 5779\n  },                                                                                                                   // 5780\n                                                                                                                       // 5781\n                                                                                                                       // 5782\n  buildEndpoint: function buildEndpoint(request) {                                                                     // 5783\n    var url = request.httpRequest.params.QueueUrl;                                                                     // 5784\n    if (url) {                                                                                                         // 5785\n      request.httpRequest.endpoint = new AWS.Endpoint(url);                                                            // 5786\n                                                                                                                       // 5787\n      var matches = request.httpRequest.endpoint.host.match(/^sqs\\.(.+?)\\./);                                          // 5788\n      if (matches) request.httpRequest.region = matches[1];                                                            // 5789\n    }                                                                                                                  // 5790\n  }                                                                                                                    // 5791\n});                                                                                                                    // 5792\n                                                                                                                       // 5793\n},{\"../core\":4}],50:[function(require,module,exports){                                                                 // 5794\nvar AWS = require('../core');                                                                                          // 5795\n                                                                                                                       // 5796\nAWS.util.update(AWS.STS.prototype, {                                                                                   // 5797\n                                                                                                                       // 5798\n  credentialsFrom: function credentialsFrom(data, credentials) {                                                       // 5799\n    if (!data) return null;                                                                                            // 5800\n    if (!credentials) credentials = new AWS.TemporaryCredentials();                                                    // 5801\n    credentials.expired = false;                                                                                       // 5802\n    credentials.accessKeyId = data.Credentials.AccessKeyId;                                                            // 5803\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;                                                    // 5804\n    credentials.sessionToken = data.Credentials.SessionToken;                                                          // 5805\n    credentials.expireTime = data.Credentials.Expiration;                                                              // 5806\n    return credentials;                                                                                                // 5807\n  },                                                                                                                   // 5808\n                                                                                                                       // 5809\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {                                    // 5810\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);                             // 5811\n  },                                                                                                                   // 5812\n                                                                                                                       // 5813\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {                                                  // 5814\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);                                    // 5815\n  }                                                                                                                    // 5816\n});                                                                                                                    // 5817\n                                                                                                                       // 5818\n},{\"../core\":4}],51:[function(require,module,exports){                                                                 // 5819\nvar AWS = require('../core');                                                                                          // 5820\nvar inherit = AWS.util.inherit;                                                                                        // 5821\n                                                                                                                       // 5822\n                                                                                                                       // 5823\nvar expiresHeader = 'presigned-expires';                                                                               // 5824\n                                                                                                                       // 5825\n                                                                                                                       // 5826\nfunction signedUrlBuilder(request) {                                                                                   // 5827\n  var expires = request.httpRequest.headers[expiresHeader];                                                            // 5828\n                                                                                                                       // 5829\n  delete request.httpRequest.headers['User-Agent'];                                                                    // 5830\n  delete request.httpRequest.headers['X-Amz-User-Agent'];                                                              // 5831\n                                                                                                                       // 5832\n  if (request.service.getSignerClass() === AWS.Signers.V4) {                                                           // 5833\n    if (expires > 604800) { // one week expiry is invalid                                                              // 5834\n      var message = 'Presigning does not support expiry time greater ' +                                               // 5835\n                    'than a week with SigV4 signing.';                                                                 // 5836\n      throw AWS.util.error(new Error(), {                                                                              // 5837\n        code: 'InvalidExpiryTime', message: message, retryable: false                                                  // 5838\n      });                                                                                                              // 5839\n    }                                                                                                                  // 5840\n    request.httpRequest.headers[expiresHeader] = expires;                                                              // 5841\n  } else if (request.service.getSignerClass() === AWS.Signers.S3) {                                                    // 5842\n    request.httpRequest.headers[expiresHeader] = parseInt(                                                             // 5843\n      AWS.util.date.unixTimestamp() + expires, 10).toString();                                                         // 5844\n  } else {                                                                                                             // 5845\n    throw AWS.util.error(new Error(), {                                                                                // 5846\n      message: 'Presigning only supports S3 or SigV4 signing.',                                                        // 5847\n      code: 'UnsupportedSigner', retryable: false                                                                      // 5848\n    });                                                                                                                // 5849\n  }                                                                                                                    // 5850\n}                                                                                                                      // 5851\n                                                                                                                       // 5852\n                                                                                                                       // 5853\nfunction signedUrlSigner(request) {                                                                                    // 5854\n  var endpoint = request.httpRequest.endpoint;                                                                         // 5855\n  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);                                                         // 5856\n  var queryParams = {};                                                                                                // 5857\n                                                                                                                       // 5858\n  if (parsedUrl.search) {                                                                                              // 5859\n    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));                                               // 5860\n  }                                                                                                                    // 5861\n                                                                                                                       // 5862\n  AWS.util.each(request.httpRequest.headers, function (key, value) {                                                   // 5863\n    if (key === expiresHeader) key = 'Expires';                                                                        // 5864\n    if (key.indexOf('x-amz-meta-') === 0) {                                                                            // 5865\n      key = key.toLowerCase();                                                                                         // 5866\n    }                                                                                                                  // 5867\n    queryParams[key] = value;                                                                                          // 5868\n  });                                                                                                                  // 5869\n  delete request.httpRequest.headers[expiresHeader];                                                                   // 5870\n                                                                                                                       // 5871\n  var auth = queryParams['Authorization'].split(' ');                                                                  // 5872\n  if (auth[0] === 'AWS') {                                                                                             // 5873\n    auth = auth[1].split(':');                                                                                         // 5874\n    queryParams['AWSAccessKeyId'] = auth[0];                                                                           // 5875\n    queryParams['Signature'] = auth[1];                                                                                // 5876\n  } else if (auth[0] === 'AWS4-HMAC-SHA256') { // SigV4 signing                                                        // 5877\n    auth.shift();                                                                                                      // 5878\n    var rest = auth.join(' ');                                                                                         // 5879\n    var signature = rest.match(/Signature=(.*?)(?:,|\\s|\\r?\\n|$)/)[1];                                                  // 5880\n    queryParams['X-Amz-Signature'] = signature;                                                                        // 5881\n    delete queryParams['Expires'];                                                                                     // 5882\n  }                                                                                                                    // 5883\n  delete queryParams['Authorization'];                                                                                 // 5884\n  delete queryParams['Host'];                                                                                          // 5885\n                                                                                                                       // 5886\n  endpoint.pathname = parsedUrl.pathname;                                                                              // 5887\n  endpoint.search = AWS.util.queryParamsToString(queryParams);                                                         // 5888\n}                                                                                                                      // 5889\n                                                                                                                       // 5890\n                                                                                                                       // 5891\nAWS.Signers.Presign = inherit({                                                                                        // 5892\n                                                                                                                       // 5893\n  sign: function sign(request, expireTime, callback) {                                                                 // 5894\n    request.httpRequest.headers[expiresHeader] = expireTime || 3600;                                                   // 5895\n    request.on('build', signedUrlBuilder);                                                                             // 5896\n    request.on('sign', signedUrlSigner);                                                                               // 5897\n    request.removeListener('afterBuild',                                                                               // 5898\n      AWS.EventListeners.Core.SET_CONTENT_LENGTH);                                                                     // 5899\n    request.removeListener('afterBuild',                                                                               // 5900\n      AWS.EventListeners.Core.COMPUTE_SHA256);                                                                         // 5901\n                                                                                                                       // 5902\n    request.emit('beforePresign', [request]);                                                                          // 5903\n                                                                                                                       // 5904\n    if (callback) {                                                                                                    // 5905\n      request.build(function() {                                                                                       // 5906\n        if (this.response.error) callback(this.response.error);                                                        // 5907\n        else {                                                                                                         // 5908\n          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));                                            // 5909\n        }                                                                                                              // 5910\n      });                                                                                                              // 5911\n    } else {                                                                                                           // 5912\n      request.build();                                                                                                 // 5913\n      if (request.response.error) throw request.response.error;                                                        // 5914\n      return AWS.util.urlFormat(request.httpRequest.endpoint);                                                         // 5915\n    }                                                                                                                  // 5916\n  }                                                                                                                    // 5917\n});                                                                                                                    // 5918\n                                                                                                                       // 5919\nmodule.exports = AWS.Signers.Presign;                                                                                  // 5920\n                                                                                                                       // 5921\n},{\"../core\":4}],52:[function(require,module,exports){                                                                 // 5922\nvar AWS = require('../core');                                                                                          // 5923\nvar inherit = AWS.util.inherit;                                                                                        // 5924\n                                                                                                                       // 5925\n                                                                                                                       // 5926\nAWS.Signers.RequestSigner = inherit({                                                                                  // 5927\n  constructor: function RequestSigner(request) {                                                                       // 5928\n    this.request = request;                                                                                            // 5929\n  }                                                                                                                    // 5930\n});                                                                                                                    // 5931\n                                                                                                                       // 5932\nAWS.Signers.RequestSigner.getVersion = function getVersion(version) {                                                  // 5933\n  switch (version) {                                                                                                   // 5934\n    case 'v2': return AWS.Signers.V2;                                                                                  // 5935\n    case 'v3': return AWS.Signers.V3;                                                                                  // 5936\n    case 'v4': return AWS.Signers.V4;                                                                                  // 5937\n    case 's3': return AWS.Signers.S3;                                                                                  // 5938\n    case 'v3https': return AWS.Signers.V3Https;                                                                        // 5939\n  }                                                                                                                    // 5940\n  throw new Error('Unknown signing version ' + version);                                                               // 5941\n};                                                                                                                     // 5942\n                                                                                                                       // 5943\nrequire('./v2');                                                                                                       // 5944\nrequire('./v3');                                                                                                       // 5945\nrequire('./v3https');                                                                                                  // 5946\nrequire('./v4');                                                                                                       // 5947\nrequire('./s3');                                                                                                       // 5948\nrequire('./presign');                                                                                                  // 5949\n                                                                                                                       // 5950\n},{\"../core\":4,\"./presign\":51,\"./s3\":53,\"./v2\":54,\"./v3\":55,\"./v3https\":56,\"./v4\":57}],53:[function(require,module,exports){\nvar AWS = require('../core');                                                                                          // 5952\nvar inherit = AWS.util.inherit;                                                                                        // 5953\n                                                                                                                       // 5954\n                                                                                                                       // 5955\nAWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {                                                                  // 5956\n                                                                                                                       // 5957\n  subResources: {                                                                                                      // 5958\n    'acl': 1,                                                                                                          // 5959\n    'cors': 1,                                                                                                         // 5960\n    'lifecycle': 1,                                                                                                    // 5961\n    'delete': 1,                                                                                                       // 5962\n    'location': 1,                                                                                                     // 5963\n    'logging': 1,                                                                                                      // 5964\n    'notification': 1,                                                                                                 // 5965\n    'partNumber': 1,                                                                                                   // 5966\n    'policy': 1,                                                                                                       // 5967\n    'requestPayment': 1,                                                                                               // 5968\n    'restore': 1,                                                                                                      // 5969\n    'tagging': 1,                                                                                                      // 5970\n    'torrent': 1,                                                                                                      // 5971\n    'uploadId': 1,                                                                                                     // 5972\n    'uploads': 1,                                                                                                      // 5973\n    'versionId': 1,                                                                                                    // 5974\n    'versioning': 1,                                                                                                   // 5975\n    'versions': 1,                                                                                                     // 5976\n    'website': 1                                                                                                       // 5977\n  },                                                                                                                   // 5978\n                                                                                                                       // 5979\n  responseHeaders: {                                                                                                   // 5980\n    'response-content-type': 1,                                                                                        // 5981\n    'response-content-language': 1,                                                                                    // 5982\n    'response-expires': 1,                                                                                             // 5983\n    'response-cache-control': 1,                                                                                       // 5984\n    'response-content-disposition': 1,                                                                                 // 5985\n    'response-content-encoding': 1                                                                                     // 5986\n  },                                                                                                                   // 5987\n                                                                                                                       // 5988\n  addAuthorization: function addAuthorization(credentials, date) {                                                     // 5989\n    if (!this.request.headers['presigned-expires']) {                                                                  // 5990\n      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);                                                 // 5991\n    }                                                                                                                  // 5992\n                                                                                                                       // 5993\n    if (credentials.sessionToken) {                                                                                    // 5994\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;                                         // 5995\n    }                                                                                                                  // 5996\n                                                                                                                       // 5997\n    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());                                       // 5998\n    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;                                                     // 5999\n                                                                                                                       // 6000\n    this.request.headers['Authorization'] = auth;                                                                      // 6001\n  },                                                                                                                   // 6002\n                                                                                                                       // 6003\n  stringToSign: function stringToSign() {                                                                              // 6004\n    var r = this.request;                                                                                              // 6005\n                                                                                                                       // 6006\n    var parts = [];                                                                                                    // 6007\n    parts.push(r.method);                                                                                              // 6008\n    parts.push(r.headers['Content-MD5'] || '');                                                                        // 6009\n    parts.push(r.headers['Content-Type'] || '');                                                                       // 6010\n                                                                                                                       // 6011\n    parts.push(r.headers['presigned-expires'] || '');                                                                  // 6012\n                                                                                                                       // 6013\n    var headers = this.canonicalizedAmzHeaders();                                                                      // 6014\n    if (headers) parts.push(headers);                                                                                  // 6015\n    parts.push(this.canonicalizedResource());                                                                          // 6016\n                                                                                                                       // 6017\n    return parts.join('\\n');                                                                                           // 6018\n                                                                                                                       // 6019\n  },                                                                                                                   // 6020\n                                                                                                                       // 6021\n  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {                                                        // 6022\n                                                                                                                       // 6023\n    var amzHeaders = [];                                                                                               // 6024\n                                                                                                                       // 6025\n    AWS.util.each(this.request.headers, function (name) {                                                              // 6026\n      if (name.match(/^x-amz-/i))                                                                                      // 6027\n        amzHeaders.push(name);                                                                                         // 6028\n    });                                                                                                                // 6029\n                                                                                                                       // 6030\n    amzHeaders.sort(function (a, b) {                                                                                  // 6031\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;                                                               // 6032\n    });                                                                                                                // 6033\n                                                                                                                       // 6034\n    var parts = [];                                                                                                    // 6035\n    AWS.util.arrayEach.call(this, amzHeaders, function (name) {                                                        // 6036\n      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));                                       // 6037\n    });                                                                                                                // 6038\n                                                                                                                       // 6039\n    return parts.join('\\n');                                                                                           // 6040\n                                                                                                                       // 6041\n  },                                                                                                                   // 6042\n                                                                                                                       // 6043\n  canonicalizedResource: function canonicalizedResource() {                                                            // 6044\n                                                                                                                       // 6045\n    var r = this.request;                                                                                              // 6046\n                                                                                                                       // 6047\n    var parts = r.path.split('?');                                                                                     // 6048\n    var path = parts[0];                                                                                               // 6049\n    var querystring = parts[1];                                                                                        // 6050\n                                                                                                                       // 6051\n    var resource = '';                                                                                                 // 6052\n                                                                                                                       // 6053\n    if (r.virtualHostedBucket)                                                                                         // 6054\n      resource += '/' + r.virtualHostedBucket;                                                                         // 6055\n                                                                                                                       // 6056\n    resource += path;                                                                                                  // 6057\n                                                                                                                       // 6058\n    if (querystring) {                                                                                                 // 6059\n                                                                                                                       // 6060\n      var resources = [];                                                                                              // 6061\n                                                                                                                       // 6062\n      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {                                         // 6063\n        var name = param.split('=')[0];                                                                                // 6064\n        var value = param.split('=')[1];                                                                               // 6065\n        if (this.subResources[name] || this.responseHeaders[name]) {                                                   // 6066\n          var subresource = { name: name };                                                                            // 6067\n          if (value !== undefined) {                                                                                   // 6068\n            if (this.subResources[name]) {                                                                             // 6069\n              subresource.value = value;                                                                               // 6070\n            } else {                                                                                                   // 6071\n              subresource.value = decodeURIComponent(value);                                                           // 6072\n            }                                                                                                          // 6073\n          }                                                                                                            // 6074\n          resources.push(subresource);                                                                                 // 6075\n        }                                                                                                              // 6076\n      });                                                                                                              // 6077\n                                                                                                                       // 6078\n      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });                                            // 6079\n                                                                                                                       // 6080\n      if (resources.length) {                                                                                          // 6081\n                                                                                                                       // 6082\n        querystring = [];                                                                                              // 6083\n        AWS.util.arrayEach(resources, function (res) {                                                                 // 6084\n          if (res.value === undefined) {                                                                               // 6085\n            querystring.push(res.name);                                                                                // 6086\n          } else {                                                                                                     // 6087\n            querystring.push(res.name + '=' + res.value);                                                              // 6088\n          }                                                                                                            // 6089\n        });                                                                                                            // 6090\n                                                                                                                       // 6091\n        resource += '?' + querystring.join('&');                                                                       // 6092\n      }                                                                                                                // 6093\n                                                                                                                       // 6094\n    }                                                                                                                  // 6095\n                                                                                                                       // 6096\n    return resource;                                                                                                   // 6097\n                                                                                                                       // 6098\n  },                                                                                                                   // 6099\n                                                                                                                       // 6100\n  sign: function sign(secret, string) {                                                                                // 6101\n    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');                                                     // 6102\n  }                                                                                                                    // 6103\n});                                                                                                                    // 6104\n                                                                                                                       // 6105\nmodule.exports = AWS.Signers.S3;                                                                                       // 6106\n                                                                                                                       // 6107\n},{\"../core\":4}],54:[function(require,module,exports){                                                                 // 6108\nvar AWS = require('../core');                                                                                          // 6109\nvar inherit = AWS.util.inherit;                                                                                        // 6110\n                                                                                                                       // 6111\n                                                                                                                       // 6112\nAWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {                                                                  // 6113\n  addAuthorization: function addAuthorization(credentials, date) {                                                     // 6114\n                                                                                                                       // 6115\n    if (!date) date = AWS.util.date.getDate();                                                                         // 6116\n                                                                                                                       // 6117\n    var r = this.request;                                                                                              // 6118\n                                                                                                                       // 6119\n    r.params.Timestamp = AWS.util.date.iso8601(date);                                                                  // 6120\n    r.params.SignatureVersion = '2';                                                                                   // 6121\n    r.params.SignatureMethod = 'HmacSHA256';                                                                           // 6122\n    r.params.AWSAccessKeyId = credentials.accessKeyId;                                                                 // 6123\n                                                                                                                       // 6124\n    if (credentials.sessionToken) {                                                                                    // 6125\n      r.params.SecurityToken = credentials.sessionToken;                                                               // 6126\n    }                                                                                                                  // 6127\n                                                                                                                       // 6128\n    delete r.params.Signature; // delete old Signature for re-signing                                                  // 6129\n    r.params.Signature = this.signature(credentials);                                                                  // 6130\n                                                                                                                       // 6131\n    r.body = AWS.util.queryParamsToString(r.params);                                                                   // 6132\n    r.headers['Content-Length'] = r.body.length;                                                                       // 6133\n  },                                                                                                                   // 6134\n                                                                                                                       // 6135\n  signature: function signature(credentials) {                                                                         // 6136\n    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');                           // 6137\n  },                                                                                                                   // 6138\n                                                                                                                       // 6139\n  stringToSign: function stringToSign() {                                                                              // 6140\n    var parts = [];                                                                                                    // 6141\n    parts.push(this.request.method);                                                                                   // 6142\n    parts.push(this.request.endpoint.host.toLowerCase());                                                              // 6143\n    parts.push(this.request.pathname());                                                                               // 6144\n    parts.push(AWS.util.queryParamsToString(this.request.params));                                                     // 6145\n    return parts.join('\\n');                                                                                           // 6146\n  }                                                                                                                    // 6147\n                                                                                                                       // 6148\n});                                                                                                                    // 6149\n                                                                                                                       // 6150\nmodule.exports = AWS.Signers.V2;                                                                                       // 6151\n                                                                                                                       // 6152\n},{\"../core\":4}],55:[function(require,module,exports){                                                                 // 6153\nvar AWS = require('../core');                                                                                          // 6154\nvar inherit = AWS.util.inherit;                                                                                        // 6155\n                                                                                                                       // 6156\n                                                                                                                       // 6157\nAWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {                                                                  // 6158\n  addAuthorization: function addAuthorization(credentials, date) {                                                     // 6159\n                                                                                                                       // 6160\n    var datetime = AWS.util.date.rfc822(date);                                                                         // 6161\n                                                                                                                       // 6162\n    this.request.headers['X-Amz-Date'] = datetime;                                                                     // 6163\n                                                                                                                       // 6164\n    if (credentials.sessionToken) {                                                                                    // 6165\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;                                         // 6166\n    }                                                                                                                  // 6167\n                                                                                                                       // 6168\n    this.request.headers['X-Amzn-Authorization'] =                                                                     // 6169\n      this.authorization(credentials, datetime);                                                                       // 6170\n                                                                                                                       // 6171\n  },                                                                                                                   // 6172\n                                                                                                                       // 6173\n  authorization: function authorization(credentials) {                                                                 // 6174\n    return 'AWS3 ' +                                                                                                   // 6175\n      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +                                                              // 6176\n      'Algorithm=HmacSHA256,' +                                                                                        // 6177\n      'SignedHeaders=' + this.signedHeaders() + ',' +                                                                  // 6178\n      'Signature=' + this.signature(credentials);                                                                      // 6179\n  },                                                                                                                   // 6180\n                                                                                                                       // 6181\n  signedHeaders: function signedHeaders() {                                                                            // 6182\n    var headers = [];                                                                                                  // 6183\n    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {                                                    // 6184\n      headers.push(h.toLowerCase());                                                                                   // 6185\n    });                                                                                                                // 6186\n    return headers.sort().join(';');                                                                                   // 6187\n  },                                                                                                                   // 6188\n                                                                                                                       // 6189\n  canonicalHeaders: function canonicalHeaders() {                                                                      // 6190\n    var headers = this.request.headers;                                                                                // 6191\n    var parts = [];                                                                                                    // 6192\n    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {                                                    // 6193\n      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());                                            // 6194\n    });                                                                                                                // 6195\n    return parts.sort().join('\\n') + '\\n';                                                                             // 6196\n  },                                                                                                                   // 6197\n                                                                                                                       // 6198\n  headersToSign: function headersToSign() {                                                                            // 6199\n    var headers = [];                                                                                                  // 6200\n    AWS.util.each(this.request.headers, function iterator(k) {                                                         // 6201\n      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {                                            // 6202\n        headers.push(k);                                                                                               // 6203\n      }                                                                                                                // 6204\n    });                                                                                                                // 6205\n    return headers;                                                                                                    // 6206\n  },                                                                                                                   // 6207\n                                                                                                                       // 6208\n  signature: function signature(credentials) {                                                                         // 6209\n    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');                           // 6210\n  },                                                                                                                   // 6211\n                                                                                                                       // 6212\n  stringToSign: function stringToSign() {                                                                              // 6213\n    var parts = [];                                                                                                    // 6214\n    parts.push(this.request.method);                                                                                   // 6215\n    parts.push('/');                                                                                                   // 6216\n    parts.push('');                                                                                                    // 6217\n    parts.push(this.canonicalHeaders());                                                                               // 6218\n    parts.push(this.request.body);                                                                                     // 6219\n    return AWS.util.crypto.sha256(parts.join('\\n'));                                                                   // 6220\n  }                                                                                                                    // 6221\n                                                                                                                       // 6222\n});                                                                                                                    // 6223\n                                                                                                                       // 6224\nmodule.exports = AWS.Signers.V3;                                                                                       // 6225\n                                                                                                                       // 6226\n},{\"../core\":4}],56:[function(require,module,exports){                                                                 // 6227\nvar AWS = require('../core');                                                                                          // 6228\nvar inherit = AWS.util.inherit;                                                                                        // 6229\n                                                                                                                       // 6230\nrequire('./v3');                                                                                                       // 6231\n                                                                                                                       // 6232\n                                                                                                                       // 6233\nAWS.Signers.V3Https = inherit(AWS.Signers.V3, {                                                                        // 6234\n  authorization: function authorization(credentials) {                                                                 // 6235\n    return 'AWS3-HTTPS ' +                                                                                             // 6236\n      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +                                                              // 6237\n      'Algorithm=HmacSHA256,' +                                                                                        // 6238\n      'Signature=' + this.signature(credentials);                                                                      // 6239\n  },                                                                                                                   // 6240\n                                                                                                                       // 6241\n  stringToSign: function stringToSign() {                                                                              // 6242\n    return this.request.headers['X-Amz-Date'];                                                                         // 6243\n  }                                                                                                                    // 6244\n});                                                                                                                    // 6245\n                                                                                                                       // 6246\nmodule.exports = AWS.Signers.V3Https;                                                                                  // 6247\n                                                                                                                       // 6248\n},{\"../core\":4,\"./v3\":55}],57:[function(require,module,exports){                                                       // 6249\nvar AWS = require('../core');                                                                                          // 6250\nvar inherit = AWS.util.inherit;                                                                                        // 6251\n                                                                                                                       // 6252\n                                                                                                                       // 6253\nvar cachedSecret = {};                                                                                                 // 6254\n                                                                                                                       // 6255\n                                                                                                                       // 6256\nvar expiresHeader = 'presigned-expires';                                                                               // 6257\n                                                                                                                       // 6258\n                                                                                                                       // 6259\nAWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {                                                                  // 6260\n  constructor: function V4(request, serviceName, signatureCache) {                                                     // 6261\n    AWS.Signers.RequestSigner.call(this, request);                                                                     // 6262\n    this.serviceName = serviceName;                                                                                    // 6263\n    this.signatureCache = signatureCache;                                                                              // 6264\n  },                                                                                                                   // 6265\n                                                                                                                       // 6266\n  algorithm: 'AWS4-HMAC-SHA256',                                                                                       // 6267\n                                                                                                                       // 6268\n  addAuthorization: function addAuthorization(credentials, date) {                                                     // 6269\n    var datetime = AWS.util.date.iso8601(date).replace(/[:\\-]|\\.\\d{3}/g, '');                                          // 6270\n                                                                                                                       // 6271\n    if (this.isPresigned()) {                                                                                          // 6272\n      this.updateForPresigned(credentials, datetime);                                                                  // 6273\n    } else {                                                                                                           // 6274\n      this.addHeaders(credentials, datetime);                                                                          // 6275\n    }                                                                                                                  // 6276\n                                                                                                                       // 6277\n    this.request.headers['Authorization'] =                                                                            // 6278\n      this.authorization(credentials, datetime);                                                                       // 6279\n  },                                                                                                                   // 6280\n                                                                                                                       // 6281\n  addHeaders: function addHeaders(credentials, datetime) {                                                             // 6282\n    this.request.headers['X-Amz-Date'] = datetime;                                                                     // 6283\n    if (credentials.sessionToken) {                                                                                    // 6284\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;                                         // 6285\n    }                                                                                                                  // 6286\n  },                                                                                                                   // 6287\n                                                                                                                       // 6288\n  updateForPresigned: function updateForPresigned(credentials, datetime) {                                             // 6289\n    var credString = this.credentialString(datetime);                                                                  // 6290\n    var qs = {                                                                                                         // 6291\n      'X-Amz-Date': datetime,                                                                                          // 6292\n      'X-Amz-Algorithm': this.algorithm,                                                                               // 6293\n      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,                                                  // 6294\n      'X-Amz-Expires': this.request.headers[expiresHeader],                                                            // 6295\n      'X-Amz-SignedHeaders': this.signedHeaders()                                                                      // 6296\n    };                                                                                                                 // 6297\n                                                                                                                       // 6298\n    if (credentials.sessionToken) {                                                                                    // 6299\n      qs['X-Amz-Security-Token'] = credentials.sessionToken;                                                           // 6300\n    }                                                                                                                  // 6301\n                                                                                                                       // 6302\n    if (this.request.headers['Content-Type']) {                                                                        // 6303\n      qs['Content-Type'] = this.request.headers['Content-Type'];                                                       // 6304\n    }                                                                                                                  // 6305\n    if (this.request.headers['Content-MD5']) {                                                                         // 6306\n      qs['Content-MD5'] = this.request.headers['Content-MD5'];                                                         // 6307\n    }                                                                                                                  // 6308\n    if (this.request.headers['Cache-Control']) {                                                                       // 6309\n      qs['Cache-Control'] = this.request.headers['Cache-Control'];                                                     // 6310\n    }                                                                                                                  // 6311\n                                                                                                                       // 6312\n    AWS.util.each.call(this, this.request.headers, function(key, value) {                                              // 6313\n      if (key === expiresHeader) return;                                                                               // 6314\n      if (this.isSignableHeader(key) &&                                                                                // 6315\n          key.toLowerCase().indexOf('x-amz-') === 0) {                                                                 // 6316\n        qs[key] = value;                                                                                               // 6317\n      }                                                                                                                // 6318\n    });                                                                                                                // 6319\n                                                                                                                       // 6320\n    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';                                                         // 6321\n    this.request.path += sep + AWS.util.queryParamsToString(qs);                                                       // 6322\n  },                                                                                                                   // 6323\n                                                                                                                       // 6324\n  authorization: function authorization(credentials, datetime) {                                                       // 6325\n    var parts = [];                                                                                                    // 6326\n    var credString = this.credentialString(datetime);                                                                  // 6327\n    parts.push(this.algorithm + ' Credential=' +                                                                       // 6328\n      credentials.accessKeyId + '/' + credString);                                                                     // 6329\n    parts.push('SignedHeaders=' + this.signedHeaders());                                                               // 6330\n    parts.push('Signature=' + this.signature(credentials, datetime));                                                  // 6331\n    return parts.join(', ');                                                                                           // 6332\n  },                                                                                                                   // 6333\n                                                                                                                       // 6334\n  signature: function signature(credentials, datetime) {                                                               // 6335\n    var cache = null;                                                                                                  // 6336\n    if (this.signatureCache) {                                                                                         // 6337\n      var cache = cachedSecret[this.serviceName];                                                                      // 6338\n    }                                                                                                                  // 6339\n    var date = datetime.substr(0, 8);                                                                                  // 6340\n                                                                                                                       // 6341\n    if (!cache ||                                                                                                      // 6342\n        cache.akid !== credentials.accessKeyId ||                                                                      // 6343\n        cache.region !== this.request.region ||                                                                        // 6344\n        cache.date !== date) {                                                                                         // 6345\n                                                                                                                       // 6346\n      var kSecret = credentials.secretAccessKey;                                                                       // 6347\n      var kDate = AWS.util.crypto.hmac('AWS4' + kSecret, date, 'buffer');                                              // 6348\n      var kRegion = AWS.util.crypto.hmac(kDate, this.request.region, 'buffer');                                        // 6349\n      var kService = AWS.util.crypto.hmac(kRegion, this.serviceName, 'buffer');                                        // 6350\n      var kCredentials = AWS.util.crypto.hmac(kService, 'aws4_request', 'buffer');                                     // 6351\n                                                                                                                       // 6352\n      if (!this.signatureCache) {                                                                                      // 6353\n        return AWS.util.crypto.hmac(kCredentials, this.stringToSign(datetime), 'hex');                                 // 6354\n      }                                                                                                                // 6355\n                                                                                                                       // 6356\n      cachedSecret[this.serviceName] = {                                                                               // 6357\n        region: this.request.region, date: date,                                                                       // 6358\n        key: kCredentials, akid: credentials.accessKeyId                                                               // 6359\n      };                                                                                                               // 6360\n    }                                                                                                                  // 6361\n                                                                                                                       // 6362\n    var key = cachedSecret[this.serviceName].key;                                                                      // 6363\n    return AWS.util.crypto.hmac(key, this.stringToSign(datetime), 'hex');                                              // 6364\n  },                                                                                                                   // 6365\n                                                                                                                       // 6366\n  stringToSign: function stringToSign(datetime) {                                                                      // 6367\n    var parts = [];                                                                                                    // 6368\n    parts.push('AWS4-HMAC-SHA256');                                                                                    // 6369\n    parts.push(datetime);                                                                                              // 6370\n    parts.push(this.credentialString(datetime));                                                                       // 6371\n    parts.push(this.hexEncodedHash(this.canonicalString()));                                                           // 6372\n    return parts.join('\\n');                                                                                           // 6373\n  },                                                                                                                   // 6374\n                                                                                                                       // 6375\n  canonicalString: function canonicalString() {                                                                        // 6376\n    var parts = [], pathname = this.request.pathname();                                                                // 6377\n    if (this.serviceName !== 's3') pathname = AWS.util.uriEscapePath(pathname);                                        // 6378\n                                                                                                                       // 6379\n    parts.push(this.request.method);                                                                                   // 6380\n    parts.push(pathname);                                                                                              // 6381\n    parts.push(this.request.search());                                                                                 // 6382\n    parts.push(this.canonicalHeaders() + '\\n');                                                                        // 6383\n    parts.push(this.signedHeaders());                                                                                  // 6384\n    parts.push(this.hexEncodedBodyHash());                                                                             // 6385\n    return parts.join('\\n');                                                                                           // 6386\n  },                                                                                                                   // 6387\n                                                                                                                       // 6388\n  canonicalHeaders: function canonicalHeaders() {                                                                      // 6389\n    var headers = [];                                                                                                  // 6390\n    AWS.util.each.call(this, this.request.headers, function (key, item) {                                              // 6391\n      headers.push([key, item]);                                                                                       // 6392\n    });                                                                                                                // 6393\n    headers.sort(function (a, b) {                                                                                     // 6394\n      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;                                                         // 6395\n    });                                                                                                                // 6396\n    var parts = [];                                                                                                    // 6397\n    AWS.util.arrayEach.call(this, headers, function (item) {                                                           // 6398\n      var key = item[0].toLowerCase();                                                                                 // 6399\n      if (this.isSignableHeader(key)) {                                                                                // 6400\n        parts.push(key + ':' +                                                                                         // 6401\n          this.canonicalHeaderValues(item[1].toString()));                                                             // 6402\n      }                                                                                                                // 6403\n    });                                                                                                                // 6404\n    return parts.join('\\n');                                                                                           // 6405\n  },                                                                                                                   // 6406\n                                                                                                                       // 6407\n  canonicalHeaderValues: function canonicalHeaderValues(values) {                                                      // 6408\n    return values.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '');                                                      // 6409\n  },                                                                                                                   // 6410\n                                                                                                                       // 6411\n  signedHeaders: function signedHeaders() {                                                                            // 6412\n    var keys = [];                                                                                                     // 6413\n    AWS.util.each.call(this, this.request.headers, function (key) {                                                    // 6414\n      key = key.toLowerCase();                                                                                         // 6415\n      if (this.isSignableHeader(key)) keys.push(key);                                                                  // 6416\n    });                                                                                                                // 6417\n    return keys.sort().join(';');                                                                                      // 6418\n  },                                                                                                                   // 6419\n                                                                                                                       // 6420\n  credentialString: function credentialString(datetime) {                                                              // 6421\n    var parts = [];                                                                                                    // 6422\n    parts.push(datetime.substr(0, 8));                                                                                 // 6423\n    parts.push(this.request.region);                                                                                   // 6424\n    parts.push(this.serviceName);                                                                                      // 6425\n    parts.push('aws4_request');                                                                                        // 6426\n    return parts.join('/');                                                                                            // 6427\n  },                                                                                                                   // 6428\n                                                                                                                       // 6429\n  hexEncodedHash: function hash(string) {                                                                              // 6430\n    return AWS.util.crypto.sha256(string, 'hex');                                                                      // 6431\n  },                                                                                                                   // 6432\n                                                                                                                       // 6433\n  hexEncodedBodyHash: function hexEncodedBodyHash() {                                                                  // 6434\n    if (this.isPresigned() && this.serviceName === 's3') {                                                             // 6435\n      return 'UNSIGNED-PAYLOAD';                                                                                       // 6436\n    } else if (this.request.headers['X-Amz-Content-Sha256']) {                                                         // 6437\n      return this.request.headers['X-Amz-Content-Sha256'];                                                             // 6438\n    } else {                                                                                                           // 6439\n      return this.hexEncodedHash(this.request.body || '');                                                             // 6440\n    }                                                                                                                  // 6441\n  },                                                                                                                   // 6442\n                                                                                                                       // 6443\n  unsignableHeaders: ['authorization', 'content-type', 'content-length',                                               // 6444\n                      'user-agent', expiresHeader],                                                                    // 6445\n                                                                                                                       // 6446\n  isSignableHeader: function isSignableHeader(key) {                                                                   // 6447\n    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;                                                        // 6448\n    return this.unsignableHeaders.indexOf(key) < 0;                                                                    // 6449\n  },                                                                                                                   // 6450\n                                                                                                                       // 6451\n  isPresigned: function isPresigned() {                                                                                // 6452\n    return this.request.headers[expiresHeader] ? true : false;                                                         // 6453\n  }                                                                                                                    // 6454\n                                                                                                                       // 6455\n});                                                                                                                    // 6456\n                                                                                                                       // 6457\nmodule.exports = AWS.Signers.V4;                                                                                       // 6458\n                                                                                                                       // 6459\n},{\"../core\":4}],58:[function(require,module,exports){                                                                 // 6460\nfunction AcceptorStateMachine(states, state) {                                                                         // 6461\n  this.currentState = state || null;                                                                                   // 6462\n  this.states = states || {};                                                                                          // 6463\n}                                                                                                                      // 6464\n                                                                                                                       // 6465\nAcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {                      // 6466\n  if (typeof finalState === 'function') {                                                                              // 6467\n    inputError = bindObject; bindObject = done;                                                                        // 6468\n    done = finalState; finalState = null;                                                                              // 6469\n  }                                                                                                                    // 6470\n                                                                                                                       // 6471\n  var self = this;                                                                                                     // 6472\n  var state = self.states[self.currentState];                                                                          // 6473\n  state.fn.call(bindObject || self, inputError, function(err) {                                                        // 6474\n    if (err) {                                                                                                         // 6475\n      if (state.fail) self.currentState = state.fail;                                                                  // 6476\n      else return done ? done.call(bindObject, err) : null;                                                            // 6477\n    } else {                                                                                                           // 6478\n      if (state.accept) self.currentState = state.accept;                                                              // 6479\n      else return done ? done.call(bindObject) : null;                                                                 // 6480\n    }                                                                                                                  // 6481\n    if (self.currentState === finalState) {                                                                            // 6482\n      return done ? done.call(bindObject, err) : null;                                                                 // 6483\n    }                                                                                                                  // 6484\n                                                                                                                       // 6485\n    self.runTo(finalState, done, bindObject, err);                                                                     // 6486\n  });                                                                                                                  // 6487\n};                                                                                                                     // 6488\n                                                                                                                       // 6489\nAcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {                        // 6490\n  if (typeof acceptState === 'function') {                                                                             // 6491\n    fn = acceptState; acceptState = null; failState = null;                                                            // 6492\n  } else if (typeof failState === 'function') {                                                                        // 6493\n    fn = failState; failState = null;                                                                                  // 6494\n  }                                                                                                                    // 6495\n                                                                                                                       // 6496\n  if (!this.currentState) this.currentState = name;                                                                    // 6497\n  this.states[name] = { accept: acceptState, fail: failState, fn: fn };                                                // 6498\n  return this;                                                                                                         // 6499\n};                                                                                                                     // 6500\n                                                                                                                       // 6501\nmodule.exports = AcceptorStateMachine;                                                                                 // 6502\n                                                                                                                       // 6503\n},{}],59:[function(require,module,exports){                                                                            // 6504\n(function (process){                                                                                                   // 6505\n                                                                                                                       // 6506\n                                                                                                                       // 6507\nvar cryptoLib = require('crypto');                                                                                     // 6508\nvar Buffer = require('buffer').Buffer;                                                                                 // 6509\nvar AWS;                                                                                                               // 6510\n                                                                                                                       // 6511\n                                                                                                                       // 6512\nvar util = {                                                                                                           // 6513\n  engine: function engine() {                                                                                          // 6514\n    if (util.isBrowser() && typeof navigator !== 'undefined') {                                                        // 6515\n      return navigator.userAgent;                                                                                      // 6516\n    } else {                                                                                                           // 6517\n      return process.platform + '/' + process.version;                                                                 // 6518\n    }                                                                                                                  // 6519\n  },                                                                                                                   // 6520\n                                                                                                                       // 6521\n  userAgent: function userAgent() {                                                                                    // 6522\n    var name = util.isBrowser() ? 'js' : 'nodejs';                                                                     // 6523\n    var agent = 'aws-sdk-' + name + '/' + require('./core').VERSION;                                                   // 6524\n    if (name === 'nodejs') agent += ' ' + util.engine();                                                               // 6525\n    return agent;                                                                                                      // 6526\n  },                                                                                                                   // 6527\n                                                                                                                       // 6528\n  isBrowser: function isBrowser() { return process && process.browser; },                                              // 6529\n  isNode: function isNode() { return !util.isBrowser(); },                                                             // 6530\n  nodeRequire: function nodeRequire(module) {                                                                          // 6531\n    if (util.isNode()) return require(module);                                                                         // 6532\n  },                                                                                                                   // 6533\n  multiRequire: function multiRequire(module1, module2) {                                                              // 6534\n    return require(util.isNode() ? module1 : module2);                                                                 // 6535\n  },                                                                                                                   // 6536\n                                                                                                                       // 6537\n  uriEscape: function uriEscape(string) {                                                                              // 6538\n    var output = encodeURIComponent(string);                                                                           // 6539\n    output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);                                                           // 6540\n                                                                                                                       // 6541\n    output = output.replace(/[*]/g, function(ch) {                                                                     // 6542\n      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();                                                        // 6543\n    });                                                                                                                // 6544\n                                                                                                                       // 6545\n    return output;                                                                                                     // 6546\n  },                                                                                                                   // 6547\n                                                                                                                       // 6548\n  uriEscapePath: function uriEscapePath(string) {                                                                      // 6549\n    var parts = [];                                                                                                    // 6550\n    util.arrayEach(string.split('/'), function (part) {                                                                // 6551\n      parts.push(util.uriEscape(part));                                                                                // 6552\n    });                                                                                                                // 6553\n    return parts.join('/');                                                                                            // 6554\n  },                                                                                                                   // 6555\n                                                                                                                       // 6556\n  urlParse: function urlParse(url) {                                                                                   // 6557\n    return require('url').parse(url);                                                                                  // 6558\n  },                                                                                                                   // 6559\n                                                                                                                       // 6560\n  urlFormat: function urlFormat(url) {                                                                                 // 6561\n    return require('url').format(url);                                                                                 // 6562\n  },                                                                                                                   // 6563\n                                                                                                                       // 6564\n  queryStringParse: function queryStringParse(qs) {                                                                    // 6565\n    return require('querystring').parse(qs);                                                                           // 6566\n  },                                                                                                                   // 6567\n                                                                                                                       // 6568\n  queryParamsToString: function queryParamsToString(params) {                                                          // 6569\n    var items = [];                                                                                                    // 6570\n    var escape = util.uriEscape;                                                                                       // 6571\n    var sortedKeys = Object.keys(params).sort();                                                                       // 6572\n                                                                                                                       // 6573\n    util.arrayEach(sortedKeys, function(name) {                                                                        // 6574\n      var value = params[name];                                                                                        // 6575\n      var ename = escape(name);                                                                                        // 6576\n      var result = ename + '=';                                                                                        // 6577\n      if (Array.isArray(value)) {                                                                                      // 6578\n        var vals = [];                                                                                                 // 6579\n        util.arrayEach(value, function(item) { vals.push(escape(item)); });                                            // 6580\n        result = ename + '=' + vals.sort().join('&' + ename + '=');                                                    // 6581\n      } else if (value !== undefined && value !== null) {                                                              // 6582\n        result = ename + '=' + escape(value);                                                                          // 6583\n      }                                                                                                                // 6584\n      items.push(result);                                                                                              // 6585\n    });                                                                                                                // 6586\n                                                                                                                       // 6587\n    return items.join('&');                                                                                            // 6588\n  },                                                                                                                   // 6589\n                                                                                                                       // 6590\n  readFileSync: function readFileSync(path) {                                                                          // 6591\n    if (typeof window !== 'undefined') return null;                                                                    // 6592\n    return util.nodeRequire('fs').readFileSync(path, 'utf-8');                                                         // 6593\n  },                                                                                                                   // 6594\n                                                                                                                       // 6595\n  base64: {                                                                                                            // 6596\n                                                                                                                       // 6597\n    encode: function encode64(string) {                                                                                // 6598\n      return new Buffer(string).toString('base64');                                                                    // 6599\n    },                                                                                                                 // 6600\n                                                                                                                       // 6601\n    decode: function decode64(string) {                                                                                // 6602\n      return new Buffer(string, 'base64');                                                                             // 6603\n    }                                                                                                                  // 6604\n                                                                                                                       // 6605\n  },                                                                                                                   // 6606\n                                                                                                                       // 6607\n  Buffer: Buffer,                                                                                                      // 6608\n                                                                                                                       // 6609\n  buffer: {                                                                                                            // 6610\n    toStream: function toStream(buffer) {                                                                              // 6611\n      if (!util.Buffer.isBuffer(buffer)) buffer = new util.Buffer(buffer);                                             // 6612\n                                                                                                                       // 6613\n      var readable = new (util.nodeRequire('stream').Readable)();                                                      // 6614\n      var pos = 0;                                                                                                     // 6615\n      readable._read = function(size) {                                                                                // 6616\n        if (pos >= buffer.length) return readable.push(null);                                                          // 6617\n                                                                                                                       // 6618\n        var end = pos + size;                                                                                          // 6619\n        if (end > buffer.length) end = buffer.length;                                                                  // 6620\n        readable.push(buffer.slice(pos, end));                                                                         // 6621\n        pos = end;                                                                                                     // 6622\n      };                                                                                                               // 6623\n                                                                                                                       // 6624\n      return readable;                                                                                                 // 6625\n    },                                                                                                                 // 6626\n                                                                                                                       // 6627\n                                                                                                                       // 6628\n    concat: function(buffers) {                                                                                        // 6629\n      var length = 0,                                                                                                  // 6630\n          offset = 0,                                                                                                  // 6631\n          buffer = null, i;                                                                                            // 6632\n                                                                                                                       // 6633\n      for (i = 0; i < buffers.length; i++) {                                                                           // 6634\n        length += buffers[i].length;                                                                                   // 6635\n      }                                                                                                                // 6636\n                                                                                                                       // 6637\n      buffer = new Buffer(length);                                                                                     // 6638\n                                                                                                                       // 6639\n      for (i = 0; i < buffers.length; i++) {                                                                           // 6640\n        buffers[i].copy(buffer, offset);                                                                               // 6641\n        offset += buffers[i].length;                                                                                   // 6642\n      }                                                                                                                // 6643\n                                                                                                                       // 6644\n      return buffer;                                                                                                   // 6645\n    }                                                                                                                  // 6646\n  },                                                                                                                   // 6647\n                                                                                                                       // 6648\n  string: {                                                                                                            // 6649\n    byteLength: function byteLength(string) {                                                                          // 6650\n      if (string === null || string === undefined) return 0;                                                           // 6651\n      if (typeof string === 'string') string = new Buffer(string);                                                     // 6652\n                                                                                                                       // 6653\n      if (typeof string.byteLength === 'number') {                                                                     // 6654\n        return string.byteLength;                                                                                      // 6655\n      } else if (typeof string.length === 'number') {                                                                  // 6656\n        return string.length;                                                                                          // 6657\n      } else if (typeof string.size === 'number') {                                                                    // 6658\n        return string.size;                                                                                            // 6659\n      } else if (typeof string.path === 'string') {                                                                    // 6660\n        return util.nodeRequire('fs').lstatSync(string.path).size;                                                     // 6661\n      } else {                                                                                                         // 6662\n        throw util.error(new Error('Cannot determine length of ' + string),                                            // 6663\n          { object: string });                                                                                         // 6664\n      }                                                                                                                // 6665\n    },                                                                                                                 // 6666\n                                                                                                                       // 6667\n    upperFirst: function upperFirst(string) {                                                                          // 6668\n      return string[0].toUpperCase() + string.substr(1);                                                               // 6669\n    },                                                                                                                 // 6670\n                                                                                                                       // 6671\n    lowerFirst: function lowerFirst(string) {                                                                          // 6672\n      return string[0].toLowerCase() + string.substr(1);                                                               // 6673\n    }                                                                                                                  // 6674\n  },                                                                                                                   // 6675\n                                                                                                                       // 6676\n  ini: {                                                                                                               // 6677\n    parse: function string(ini) {                                                                                      // 6678\n      var currentSection, map = {};                                                                                    // 6679\n      util.arrayEach(ini.split(/\\r?\\n/), function(line) {                                                              // 6680\n        line = line.split(/(^|\\s);/)[0]; // remove comments                                                            // 6681\n        var section = line.match(/^\\s*\\[([^\\[\\]]+)\\]\\s*$/);                                                            // 6682\n        if (section) {                                                                                                 // 6683\n          currentSection = section[1];                                                                                 // 6684\n        } else if (currentSection) {                                                                                   // 6685\n          var item = line.match(/^\\s*(.+?)\\s*=\\s*(.+?)\\s*$/);                                                          // 6686\n          if (item) {                                                                                                  // 6687\n            map[currentSection] = map[currentSection] || {};                                                           // 6688\n            map[currentSection][item[1]] = item[2];                                                                    // 6689\n          }                                                                                                            // 6690\n        }                                                                                                              // 6691\n      });                                                                                                              // 6692\n                                                                                                                       // 6693\n      return map;                                                                                                      // 6694\n    }                                                                                                                  // 6695\n  },                                                                                                                   // 6696\n                                                                                                                       // 6697\n  fn: {                                                                                                                // 6698\n    noop: function() {},                                                                                               // 6699\n                                                                                                                       // 6700\n                                                                                                                       // 6701\n    makeAsync: function makeAsync(fn, expectedArgs) {                                                                  // 6702\n      if (expectedArgs && expectedArgs <= fn.length) {                                                                 // 6703\n        return fn;                                                                                                     // 6704\n      }                                                                                                                // 6705\n                                                                                                                       // 6706\n      return function() {                                                                                              // 6707\n        var args = Array.prototype.slice.call(arguments, 0);                                                           // 6708\n        var callback = args.pop();                                                                                     // 6709\n        var result = fn.apply(null, args);                                                                             // 6710\n        callback(result);                                                                                              // 6711\n      };                                                                                                               // 6712\n    }                                                                                                                  // 6713\n  },                                                                                                                   // 6714\n                                                                                                                       // 6715\n  jamespath: {                                                                                                         // 6716\n    query: function query(expression, data) {                                                                          // 6717\n      if (!data) return [];                                                                                            // 6718\n                                                                                                                       // 6719\n      var results = [];                                                                                                // 6720\n      var expressions = expression.split(/\\s+\\|\\|\\s+/);                                                                // 6721\n      util.arrayEach.call(this, expressions, function (expr) {                                                         // 6722\n        var objects = [data];                                                                                          // 6723\n        var tokens = expr.split('.');                                                                                  // 6724\n        util.arrayEach.call(this, tokens, function (token) {                                                           // 6725\n          var match = token.match('^(.+?)(?:\\\\[(-?\\\\d+|\\\\*|)\\\\])?$');                                                  // 6726\n          var newObjects = [];                                                                                         // 6727\n          util.arrayEach.call(this, objects, function (obj) {                                                          // 6728\n            if (match[1] === '*') {                                                                                    // 6729\n              util.arrayEach.call(this, obj, function (value) {                                                        // 6730\n                newObjects.push(value);                                                                                // 6731\n              });                                                                                                      // 6732\n            } else if (obj.hasOwnProperty(match[1])) {                                                                 // 6733\n              newObjects.push(obj[match[1]]);                                                                          // 6734\n            }                                                                                                          // 6735\n          });                                                                                                          // 6736\n          objects = newObjects;                                                                                        // 6737\n                                                                                                                       // 6738\n          if (match[2] !== undefined) {                                                                                // 6739\n            newObjects = [];                                                                                           // 6740\n            util.arrayEach.call(this, objects, function (obj) {                                                        // 6741\n              if (Array.isArray(obj)) {                                                                                // 6742\n                if (match[2] === '*' || match[2] === '') {                                                             // 6743\n                  newObjects = newObjects.concat(obj);                                                                 // 6744\n                } else {                                                                                               // 6745\n                  var idx = parseInt(match[2], 10);                                                                    // 6746\n                  if (idx < 0) idx = obj.length + idx; // negative indexing                                            // 6747\n                  newObjects.push(obj[idx]);                                                                           // 6748\n                }                                                                                                      // 6749\n              }                                                                                                        // 6750\n            });                                                                                                        // 6751\n            objects = newObjects;                                                                                      // 6752\n          }                                                                                                            // 6753\n                                                                                                                       // 6754\n          if (objects.length === 0) return util.abort;                                                                 // 6755\n        });                                                                                                            // 6756\n                                                                                                                       // 6757\n        if (objects.length > 0) {                                                                                      // 6758\n          results = objects;                                                                                           // 6759\n          return util.abort;                                                                                           // 6760\n        }                                                                                                              // 6761\n      });                                                                                                              // 6762\n                                                                                                                       // 6763\n      return results;                                                                                                  // 6764\n    },                                                                                                                 // 6765\n                                                                                                                       // 6766\n    find: function find(expression, data) {                                                                            // 6767\n      return util.jamespath.query(expression, data)[0];                                                                // 6768\n    }                                                                                                                  // 6769\n  },                                                                                                                   // 6770\n                                                                                                                       // 6771\n                                                                                                                       // 6772\n  date: {                                                                                                              // 6773\n                                                                                                                       // 6774\n                                                                                                                       // 6775\n    getDate: function getDate() {                                                                                      // 6776\n      if (!AWS) AWS = require('./core');                                                                               // 6777\n      if (AWS.config.systemClockOffset) { // use offset when non-zero                                                  // 6778\n        return new Date(new Date().getTime() + AWS.config.systemClockOffset);                                          // 6779\n      } else {                                                                                                         // 6780\n        return new Date();                                                                                             // 6781\n      }                                                                                                                // 6782\n    },                                                                                                                 // 6783\n                                                                                                                       // 6784\n                                                                                                                       // 6785\n    iso8601: function iso8601(date) {                                                                                  // 6786\n      if (date === undefined) { date = util.date.getDate(); }                                                          // 6787\n      return date.toISOString().replace(/\\.\\d{3}Z$/, 'Z');                                                             // 6788\n    },                                                                                                                 // 6789\n                                                                                                                       // 6790\n                                                                                                                       // 6791\n    rfc822: function rfc822(date) {                                                                                    // 6792\n      if (date === undefined) { date = util.date.getDate(); }                                                          // 6793\n      return date.toUTCString();                                                                                       // 6794\n    },                                                                                                                 // 6795\n                                                                                                                       // 6796\n                                                                                                                       // 6797\n    unixTimestamp: function unixTimestamp(date) {                                                                      // 6798\n      if (date === undefined) { date = util.date.getDate(); }                                                          // 6799\n      return date.getTime() / 1000;                                                                                    // 6800\n    },                                                                                                                 // 6801\n                                                                                                                       // 6802\n                                                                                                                       // 6803\n    from: function format(date) {                                                                                      // 6804\n      if (typeof date === 'number') {                                                                                  // 6805\n        return new Date(date * 1000); // unix timestamp                                                                // 6806\n      } else {                                                                                                         // 6807\n        return new Date(date);                                                                                         // 6808\n      }                                                                                                                // 6809\n    },                                                                                                                 // 6810\n                                                                                                                       // 6811\n                                                                                                                       // 6812\n    format: function format(date, formatter) {                                                                         // 6813\n      if (!formatter) formatter = 'iso8601';                                                                           // 6814\n      return util.date[formatter](util.date.from(date));                                                               // 6815\n    },                                                                                                                 // 6816\n                                                                                                                       // 6817\n    parseTimestamp: function parseTimestamp(value) {                                                                   // 6818\n      if (typeof value === 'number') { // unix timestamp (number)                                                      // 6819\n        return new Date(value * 1000);                                                                                 // 6820\n      } else if (value.match(/^\\d+$/)) { // unix timestamp                                                             // 6821\n        return new Date(value * 1000);                                                                                 // 6822\n      } else if (value.match(/^\\d{4}/)) { // iso8601                                                                   // 6823\n        return new Date(value);                                                                                        // 6824\n      } else if (value.match(/^\\w{3},/)) { // rfc822                                                                   // 6825\n        return new Date(value);                                                                                        // 6826\n      } else {                                                                                                         // 6827\n        throw util.error(                                                                                              // 6828\n          new Error('unhandled timestamp format: ' + value),                                                           // 6829\n          {code: 'TimestampParserError'});                                                                             // 6830\n      }                                                                                                                // 6831\n    }                                                                                                                  // 6832\n                                                                                                                       // 6833\n  },                                                                                                                   // 6834\n                                                                                                                       // 6835\n  crypto: {                                                                                                            // 6836\n    crc32Table: [                                                                                                      // 6837\n     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,                                                       // 6838\n     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,                                                       // 6839\n     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,                                                       // 6840\n     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,                                                       // 6841\n     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,                                                       // 6842\n     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,                                                       // 6843\n     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,                                                       // 6844\n     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,                                                       // 6845\n     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,                                                       // 6846\n     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,                                                       // 6847\n     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,                                                       // 6848\n     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,                                                       // 6849\n     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,                                                       // 6850\n     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,                                                       // 6851\n     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,                                                       // 6852\n     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,                                                       // 6853\n     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,                                                       // 6854\n     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,                                                       // 6855\n     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,                                                       // 6856\n     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,                                                       // 6857\n     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,                                                       // 6858\n     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,                                                       // 6859\n     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,                                                       // 6860\n     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,                                                       // 6861\n     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,                                                       // 6862\n     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,                                                       // 6863\n     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,                                                       // 6864\n     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,                                                       // 6865\n     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,                                                       // 6866\n     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,                                                       // 6867\n     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,                                                       // 6868\n     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,                                                       // 6869\n     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,                                                       // 6870\n     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,                                                       // 6871\n     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,                                                       // 6872\n     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,                                                       // 6873\n     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,                                                       // 6874\n     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,                                                       // 6875\n     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,                                                       // 6876\n     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,                                                       // 6877\n     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,                                                       // 6878\n     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,                                                       // 6879\n     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,                                                       // 6880\n     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,                                                       // 6881\n     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,                                                       // 6882\n     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,                                                       // 6883\n     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,                                                       // 6884\n     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,                                                       // 6885\n     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,                                                       // 6886\n     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,                                                       // 6887\n     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,                                                       // 6888\n     0x2D02EF8D],                                                                                                      // 6889\n                                                                                                                       // 6890\n    crc32: function crc32(data) {                                                                                      // 6891\n      var tbl = util.crypto.crc32Table;                                                                                // 6892\n      var crc = 0 ^ -1;                                                                                                // 6893\n                                                                                                                       // 6894\n      if (typeof data === 'string') {                                                                                  // 6895\n        data = new Buffer(data);                                                                                       // 6896\n      }                                                                                                                // 6897\n                                                                                                                       // 6898\n      for (var i = 0; i < data.length; i++) {                                                                          // 6899\n        var code = data.readUInt8(i);                                                                                  // 6900\n        crc = (crc >>> 8) ^ tbl[(crc ^ code) & 0xFF];                                                                  // 6901\n      }                                                                                                                // 6902\n      return (crc ^ -1) >>> 0;                                                                                         // 6903\n    },                                                                                                                 // 6904\n                                                                                                                       // 6905\n    hmac: function hmac(key, string, digest, fn) {                                                                     // 6906\n      if (!digest) digest = 'binary';                                                                                  // 6907\n      if (digest === 'buffer') { digest = undefined; }                                                                 // 6908\n      if (!fn) fn = 'sha256';                                                                                          // 6909\n      if (typeof string === 'string') string = new Buffer(string);                                                     // 6910\n      return cryptoLib.createHmac(fn, key).update(string).digest(digest);                                              // 6911\n    },                                                                                                                 // 6912\n                                                                                                                       // 6913\n    md5: function md5(data, digest, callback) {                                                                        // 6914\n      return util.crypto.hash('md5', data, digest, callback);                                                          // 6915\n    },                                                                                                                 // 6916\n                                                                                                                       // 6917\n    sha256: function sha256(data, digest, callback) {                                                                  // 6918\n      return util.crypto.hash('sha256', data, digest, callback);                                                       // 6919\n    },                                                                                                                 // 6920\n                                                                                                                       // 6921\n    hash: function(algorithm, data, digest, callback) {                                                                // 6922\n      var hash = util.crypto.createHash(algorithm);                                                                    // 6923\n      if (!digest) { digest = 'binary'; }                                                                              // 6924\n      if (digest === 'buffer') { digest = undefined; }                                                                 // 6925\n      if (typeof data === 'string') data = new Buffer(data);                                                           // 6926\n      var sliceFn = util.arraySliceFn(data);                                                                           // 6927\n      var isBuffer = Buffer.isBuffer(data);                                                                            // 6928\n      if (util.isBrowser() && typeof ArrayBuffer !== 'undefined' && data && data.buffer instanceof ArrayBuffer) isBuffer = true;\n                                                                                                                       // 6930\n      if (callback && typeof data === 'object' &&                                                                      // 6931\n          typeof data.on === 'function' && !isBuffer) {                                                                // 6932\n        data.on('data', function(chunk) { hash.update(chunk); });                                                      // 6933\n        data.on('error', function(err) { callback(err); });                                                            // 6934\n        data.on('end', function() { callback(null, hash.digest(digest)); });                                           // 6935\n      } else if (callback && sliceFn && !isBuffer &&                                                                   // 6936\n                 typeof FileReader !== 'undefined') {                                                                  // 6937\n        var index = 0, size = 1024 * 512;                                                                              // 6938\n        var reader = new FileReader();                                                                                 // 6939\n        reader.onerror = function() {                                                                                  // 6940\n          callback(new Error('Failed to read data.'));                                                                 // 6941\n        };                                                                                                             // 6942\n        reader.onload = function() {                                                                                   // 6943\n          var buf = new Buffer(new Uint8Array(reader.result));                                                         // 6944\n          hash.update(buf);                                                                                            // 6945\n          index += buf.length;                                                                                         // 6946\n          reader._continueReading();                                                                                   // 6947\n        };                                                                                                             // 6948\n        reader._continueReading = function() {                                                                         // 6949\n          if (index >= data.size) {                                                                                    // 6950\n            callback(null, hash.digest(digest));                                                                       // 6951\n            return;                                                                                                    // 6952\n          }                                                                                                            // 6953\n                                                                                                                       // 6954\n          var back = index + size;                                                                                     // 6955\n          if (back > data.size) back = data.size;                                                                      // 6956\n          reader.readAsArrayBuffer(sliceFn.call(data, index, back));                                                   // 6957\n        };                                                                                                             // 6958\n                                                                                                                       // 6959\n        reader._continueReading();                                                                                     // 6960\n      } else {                                                                                                         // 6961\n        if (util.isBrowser() && typeof data === 'object' && !isBuffer) {                                               // 6962\n          data = new Buffer(new Uint8Array(data));                                                                     // 6963\n        }                                                                                                              // 6964\n        var out = hash.update(data).digest(digest);                                                                    // 6965\n        if (callback) callback(null, out);                                                                             // 6966\n        return out;                                                                                                    // 6967\n      }                                                                                                                // 6968\n    },                                                                                                                 // 6969\n                                                                                                                       // 6970\n    toHex: function toHex(data) {                                                                                      // 6971\n      var out = [];                                                                                                    // 6972\n      for (var i = 0; i < data.length; i++) {                                                                          // 6973\n        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));                                               // 6974\n      }                                                                                                                // 6975\n      return out.join('');                                                                                             // 6976\n    },                                                                                                                 // 6977\n                                                                                                                       // 6978\n    createHash: function createHash(algorithm) {                                                                       // 6979\n      return cryptoLib.createHash(algorithm);                                                                          // 6980\n    }                                                                                                                  // 6981\n                                                                                                                       // 6982\n  },                                                                                                                   // 6983\n                                                                                                                       // 6984\n                                                                                                                       // 6985\n                                                                                                                       // 6986\n                                                                                                                       // 6987\n  abort: {},                                                                                                           // 6988\n                                                                                                                       // 6989\n  each: function each(object, iterFunction) {                                                                          // 6990\n    for (var key in object) {                                                                                          // 6991\n      if (Object.prototype.hasOwnProperty.call(object, key)) {                                                         // 6992\n        var ret = iterFunction.call(this, key, object[key]);                                                           // 6993\n        if (ret === util.abort) break;                                                                                 // 6994\n      }                                                                                                                // 6995\n    }                                                                                                                  // 6996\n  },                                                                                                                   // 6997\n                                                                                                                       // 6998\n  arrayEach: function arrayEach(array, iterFunction) {                                                                 // 6999\n    for (var idx in array) {                                                                                           // 7000\n      if (array.hasOwnProperty(idx)) {                                                                                 // 7001\n        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));                                              // 7002\n        if (ret === util.abort) break;                                                                                 // 7003\n      }                                                                                                                // 7004\n    }                                                                                                                  // 7005\n  },                                                                                                                   // 7006\n                                                                                                                       // 7007\n  update: function update(obj1, obj2) {                                                                                // 7008\n    util.each(obj2, function iterator(key, item) {                                                                     // 7009\n      obj1[key] = item;                                                                                                // 7010\n    });                                                                                                                // 7011\n    return obj1;                                                                                                       // 7012\n  },                                                                                                                   // 7013\n                                                                                                                       // 7014\n  merge: function merge(obj1, obj2) {                                                                                  // 7015\n    return util.update(util.copy(obj1), obj2);                                                                         // 7016\n  },                                                                                                                   // 7017\n                                                                                                                       // 7018\n  copy: function copy(object) {                                                                                        // 7019\n    if (object === null || object === undefined) return object;                                                        // 7020\n    var dupe = {};                                                                                                     // 7021\n    for (var key in object) {                                                                                          // 7022\n      dupe[key] = object[key];                                                                                         // 7023\n    }                                                                                                                  // 7024\n    return dupe;                                                                                                       // 7025\n  },                                                                                                                   // 7026\n                                                                                                                       // 7027\n  isEmpty: function isEmpty(obj) {                                                                                     // 7028\n    for (var prop in obj) {                                                                                            // 7029\n      if (obj.hasOwnProperty(prop)) {                                                                                  // 7030\n        return false;                                                                                                  // 7031\n      }                                                                                                                // 7032\n    }                                                                                                                  // 7033\n    return true;                                                                                                       // 7034\n  },                                                                                                                   // 7035\n                                                                                                                       // 7036\n  arraySliceFn: function arraySliceFn(obj) {                                                                           // 7037\n    var fn = obj.slice || obj.webkitSlice || obj.mozSlice;                                                             // 7038\n    return typeof fn === 'function' ? fn : null;                                                                       // 7039\n  },                                                                                                                   // 7040\n                                                                                                                       // 7041\n  isType: function isType(obj, type) {                                                                                 // 7042\n    if (typeof type === 'function') type = util.typeName(type);                                                        // 7043\n    return Object.prototype.toString.call(obj) === '[object ' + type + ']';                                            // 7044\n  },                                                                                                                   // 7045\n                                                                                                                       // 7046\n  typeName: function typeName(type) {                                                                                  // 7047\n    if (type.hasOwnProperty('name')) return type.name;                                                                 // 7048\n    var str = type.toString();                                                                                         // 7049\n    var match = str.match(/^\\s*function (.+)\\(/);                                                                      // 7050\n    return match ? match[1] : str;                                                                                     // 7051\n  },                                                                                                                   // 7052\n                                                                                                                       // 7053\n  error: function error(err, options) {                                                                                // 7054\n    var originalError = null;                                                                                          // 7055\n    if (typeof err.message === 'string' && err.message !== '') {                                                       // 7056\n      if (typeof options === 'string' || (options && options.message)) {                                               // 7057\n        originalError = util.copy(err);                                                                                // 7058\n        originalError.message = err.message;                                                                           // 7059\n      }                                                                                                                // 7060\n    }                                                                                                                  // 7061\n    err.message = err.message || null;                                                                                 // 7062\n                                                                                                                       // 7063\n    if (typeof options === 'string') {                                                                                 // 7064\n      err.message = options;                                                                                           // 7065\n    } else if (typeof options === 'object' && options !== null) {                                                      // 7066\n      util.update(err, options);                                                                                       // 7067\n      if (options.message)                                                                                             // 7068\n        err.message = options.message;                                                                                 // 7069\n      if (options.code || options.name)                                                                                // 7070\n        err.code = options.code || options.name;                                                                       // 7071\n      if (options.stack)                                                                                               // 7072\n        err.stack = options.stack;                                                                                     // 7073\n    }                                                                                                                  // 7074\n                                                                                                                       // 7075\n    if (typeof Object.defineProperty === 'function') {                                                                 // 7076\n      Object.defineProperty(err, 'name', {writable: true, enumerable: false});                                         // 7077\n      Object.defineProperty(err, 'message', {enumerable: true});                                                       // 7078\n    }                                                                                                                  // 7079\n                                                                                                                       // 7080\n    err.name = options && options.name || err.name || err.code || 'Error';                                             // 7081\n    err.time = new Date();                                                                                             // 7082\n                                                                                                                       // 7083\n    if (originalError) err.originalError = originalError;                                                              // 7084\n                                                                                                                       // 7085\n    return err;                                                                                                        // 7086\n  },                                                                                                                   // 7087\n                                                                                                                       // 7088\n                                                                                                                       // 7089\n  inherit: function inherit(klass, features) {                                                                         // 7090\n    var newObject = null;                                                                                              // 7091\n    if (features === undefined) {                                                                                      // 7092\n      features = klass;                                                                                                // 7093\n      klass = Object;                                                                                                  // 7094\n      newObject = {};                                                                                                  // 7095\n    } else {                                                                                                           // 7096\n      var ctor = function ConstructorWrapper() {};                                                                     // 7097\n      ctor.prototype = klass.prototype;                                                                                // 7098\n      newObject = new ctor();                                                                                          // 7099\n    }                                                                                                                  // 7100\n                                                                                                                       // 7101\n    if (features.constructor === Object) {                                                                             // 7102\n      features.constructor = function() {                                                                              // 7103\n        if (klass !== Object) {                                                                                        // 7104\n          return klass.apply(this, arguments);                                                                         // 7105\n        }                                                                                                              // 7106\n      };                                                                                                               // 7107\n    }                                                                                                                  // 7108\n                                                                                                                       // 7109\n    features.constructor.prototype = newObject;                                                                        // 7110\n    util.update(features.constructor.prototype, features);                                                             // 7111\n    features.constructor.__super__ = klass;                                                                            // 7112\n    return features.constructor;                                                                                       // 7113\n  },                                                                                                                   // 7114\n                                                                                                                       // 7115\n                                                                                                                       // 7116\n  mixin: function mixin() {                                                                                            // 7117\n    var klass = arguments[0];                                                                                          // 7118\n    for (var i = 1; i < arguments.length; i++) {                                                                       // 7119\n      for (var prop in arguments[i].prototype) {                                                                       // 7120\n        var fn = arguments[i].prototype[prop];                                                                         // 7121\n        if (prop !== 'constructor') {                                                                                  // 7122\n          klass.prototype[prop] = fn;                                                                                  // 7123\n        }                                                                                                              // 7124\n      }                                                                                                                // 7125\n    }                                                                                                                  // 7126\n    return klass;                                                                                                      // 7127\n  },                                                                                                                   // 7128\n                                                                                                                       // 7129\n                                                                                                                       // 7130\n  hideProperties: function hideProperties(obj, props) {                                                                // 7131\n    if (typeof Object.defineProperty !== 'function') return;                                                           // 7132\n                                                                                                                       // 7133\n    util.arrayEach(props, function (key) {                                                                             // 7134\n      Object.defineProperty(obj, key, {                                                                                // 7135\n        enumerable: false, writable: true, configurable: true });                                                      // 7136\n    });                                                                                                                // 7137\n  },                                                                                                                   // 7138\n                                                                                                                       // 7139\n                                                                                                                       // 7140\n  property: function property(obj, name, value, enumerable, isValue) {                                                 // 7141\n    var opts = {                                                                                                       // 7142\n      configurable: true,                                                                                              // 7143\n      enumerable: enumerable !== undefined ? enumerable : true                                                         // 7144\n    };                                                                                                                 // 7145\n    if (typeof value === 'function' && !isValue) {                                                                     // 7146\n      opts.get = value;                                                                                                // 7147\n    }                                                                                                                  // 7148\n    else {                                                                                                             // 7149\n      opts.value = value; opts.writable = true;                                                                        // 7150\n    }                                                                                                                  // 7151\n                                                                                                                       // 7152\n    Object.defineProperty(obj, name, opts);                                                                            // 7153\n  },                                                                                                                   // 7154\n                                                                                                                       // 7155\n                                                                                                                       // 7156\n  memoizedProperty: function memoizedProperty(obj, name, get, enumerable) {                                            // 7157\n    var cachedValue = null;                                                                                            // 7158\n                                                                                                                       // 7159\n    util.property(obj, name, function() {                                                                              // 7160\n      if (cachedValue === null) {                                                                                      // 7161\n        cachedValue = get();                                                                                           // 7162\n      }                                                                                                                // 7163\n      return cachedValue;                                                                                              // 7164\n    }, enumerable);                                                                                                    // 7165\n  },                                                                                                                   // 7166\n                                                                                                                       // 7167\n                                                                                                                       // 7168\n  hoistPayloadMember: function hoistPayloadMember(resp) {                                                              // 7169\n    var req = resp.request;                                                                                            // 7170\n    var operation = req.operation;                                                                                     // 7171\n    var output = req.service.api.operations[operation].output;                                                         // 7172\n    if (output.payload) {                                                                                              // 7173\n      var payloadMember = output.members[output.payload];                                                              // 7174\n      var responsePayload = resp.data[output.payload];                                                                 // 7175\n      if (payloadMember.type === 'structure') {                                                                        // 7176\n        util.each(responsePayload, function(key, value) {                                                              // 7177\n          util.property(resp.data, key, value, false);                                                                 // 7178\n        });                                                                                                            // 7179\n      }                                                                                                                // 7180\n    }                                                                                                                  // 7181\n  },                                                                                                                   // 7182\n                                                                                                                       // 7183\n                                                                                                                       // 7184\n  computeSha256: function computeSha256(body, done) {                                                                  // 7185\n    if (util.isNode()) {                                                                                               // 7186\n      var Stream = util.nodeRequire('stream').Stream;                                                                  // 7187\n      var fs = util.nodeRequire('fs');                                                                                 // 7188\n      if (body instanceof Stream) {                                                                                    // 7189\n        if (typeof body.path === 'string') { // assume file object                                                     // 7190\n          body = fs.createReadStream(body.path);                                                                       // 7191\n        } else { // TODO support other stream types                                                                    // 7192\n          return done(new Error('Non-file stream objects are ' +                                                       // 7193\n                                'not supported with SigV4'));                                                          // 7194\n        }                                                                                                              // 7195\n      }                                                                                                                // 7196\n    }                                                                                                                  // 7197\n                                                                                                                       // 7198\n    util.crypto.sha256(body, 'hex', function(err, sha) {                                                               // 7199\n      if (err) done(err);                                                                                              // 7200\n      else done(null, sha);                                                                                            // 7201\n    });                                                                                                                // 7202\n  },                                                                                                                   // 7203\n                                                                                                                       // 7204\n                                                                                                                       // 7205\n  isClockSkewed: function isClockSkewed(serverTime) {                                                                  // 7206\n    if (serverTime) {                                                                                                  // 7207\n      util.property(AWS.config, 'isClockSkewed',                                                                       // 7208\n        Math.abs(new Date().getTime() - serverTime) >= 300000, false);                                                 // 7209\n      return AWS.config.isClockSkewed;                                                                                 // 7210\n    }                                                                                                                  // 7211\n  },                                                                                                                   // 7212\n                                                                                                                       // 7213\n  applyClockOffset: function applyClockOffset(serverTime) {                                                            // 7214\n    if (serverTime)                                                                                                    // 7215\n      AWS.config.systemClockOffset = serverTime - new Date().getTime();                                                // 7216\n  },                                                                                                                   // 7217\n                                                                                                                       // 7218\n                                                                                                                       // 7219\n  extractRequestId: function extractRequestId(resp) {                                                                  // 7220\n    var requestId = resp.httpResponse.headers['x-amz-request-id'] ||                                                   // 7221\n                     resp.httpResponse.headers['x-amzn-requestid'];                                                    // 7222\n                                                                                                                       // 7223\n    if (!requestId && resp.data && resp.data.ResponseMetadata) {                                                       // 7224\n      requestId = resp.data.ResponseMetadata.RequestId;                                                                // 7225\n    }                                                                                                                  // 7226\n                                                                                                                       // 7227\n    if (requestId) {                                                                                                   // 7228\n      resp.requestId = requestId;                                                                                      // 7229\n    }                                                                                                                  // 7230\n                                                                                                                       // 7231\n    if (resp.error) {                                                                                                  // 7232\n      resp.error.requestId = requestId;                                                                                // 7233\n    }                                                                                                                  // 7234\n  }                                                                                                                    // 7235\n};                                                                                                                     // 7236\n                                                                                                                       // 7237\nmodule.exports = util;                                                                                                 // 7238\n                                                                                                                       // 7239\n}).call(this,require(\"FWaASH\"))                                                                                        // 7240\n},{\"./core\":4,\"FWaASH\":73,\"buffer\":62,\"crypto\":66,\"querystring\":77,\"url\":78}],60:[function(require,module,exports){    // 7241\nvar util = require('../util');                                                                                         // 7242\nvar Shape = require('../model/shape');                                                                                 // 7243\n                                                                                                                       // 7244\nfunction DomXmlParser() { }                                                                                            // 7245\n                                                                                                                       // 7246\nDomXmlParser.prototype.parse = function(xml, shape) {                                                                  // 7247\n  if (xml.replace(/^\\s+/, '') === '') return {};                                                                       // 7248\n                                                                                                                       // 7249\n  var result, error;                                                                                                   // 7250\n  try {                                                                                                                // 7251\n    if (window.DOMParser) {                                                                                            // 7252\n      try {                                                                                                            // 7253\n        var parser = new DOMParser();                                                                                  // 7254\n        result = parser.parseFromString(xml, 'text/xml');                                                              // 7255\n      } catch (syntaxError) {                                                                                          // 7256\n        throw util.error(new Error('Parse error in document'),                                                         // 7257\n          {                                                                                                            // 7258\n            originalError: syntaxError,                                                                                // 7259\n            code: 'XMLParserError',                                                                                    // 7260\n            retryable: true                                                                                            // 7261\n          });                                                                                                          // 7262\n      }                                                                                                                // 7263\n                                                                                                                       // 7264\n      if (result.documentElement === null) {                                                                           // 7265\n        throw util.error(new Error('Cannot parse empty document.'),                                                    // 7266\n          {                                                                                                            // 7267\n            code: 'XMLParserError',                                                                                    // 7268\n            retryable: true                                                                                            // 7269\n          });                                                                                                          // 7270\n      }                                                                                                                // 7271\n                                                                                                                       // 7272\n      var isError = result.getElementsByTagName('parsererror')[0];                                                     // 7273\n      if (isError && (isError.parentNode === result ||                                                                 // 7274\n          isError.parentNode.nodeName === 'body' ||                                                                    // 7275\n          isError.parentNode.parentNode === result ||                                                                  // 7276\n          isError.parentNode.parentNode.nodeName === 'body')) {                                                        // 7277\n        var errorElement = isError.getElementsByTagName('div')[0] || isError;                                          // 7278\n        throw util.error(new Error(errorElement.textContent || 'Parser error in document'),                            // 7279\n          {                                                                                                            // 7280\n            code: 'XMLParserError',                                                                                    // 7281\n            retryable: true                                                                                            // 7282\n          });                                                                                                          // 7283\n      }                                                                                                                // 7284\n    } else if (window.ActiveXObject) {                                                                                 // 7285\n      result = new window.ActiveXObject('Microsoft.XMLDOM');                                                           // 7286\n      result.async = false;                                                                                            // 7287\n                                                                                                                       // 7288\n      if (!result.loadXML(xml)) {                                                                                      // 7289\n        throw util.error(new Error('Parse error in document'),                                                         // 7290\n          {                                                                                                            // 7291\n            code: 'XMLParserError',                                                                                    // 7292\n            retryable: true                                                                                            // 7293\n          });                                                                                                          // 7294\n      }                                                                                                                // 7295\n    } else {                                                                                                           // 7296\n      throw new Error('Cannot load XML parser');                                                                       // 7297\n    }                                                                                                                  // 7298\n  } catch (e) {                                                                                                        // 7299\n    error = e;                                                                                                         // 7300\n  }                                                                                                                    // 7301\n                                                                                                                       // 7302\n  if (result && result.documentElement && !error) {                                                                    // 7303\n    var data = parseXml(result.documentElement, shape);                                                                // 7304\n    var metadata = result.getElementsByTagName('ResponseMetadata')[0];                                                 // 7305\n    if (metadata) {                                                                                                    // 7306\n      data.ResponseMetadata = parseXml(metadata, {});                                                                  // 7307\n    }                                                                                                                  // 7308\n    return data;                                                                                                       // 7309\n  } else if (error) {                                                                                                  // 7310\n    throw util.error(error || new Error(), {code: 'XMLParserError', retryable: true});                                 // 7311\n  } else { // empty xml document                                                                                       // 7312\n    return {};                                                                                                         // 7313\n  }                                                                                                                    // 7314\n};                                                                                                                     // 7315\n                                                                                                                       // 7316\nfunction parseXml(xml, shape) {                                                                                        // 7317\n  if (!shape) shape = {};                                                                                              // 7318\n  switch (shape.type) {                                                                                                // 7319\n    case 'structure': return parseStructure(xml, shape);                                                               // 7320\n    case 'map': return parseMap(xml, shape);                                                                           // 7321\n    case 'list': return parseList(xml, shape);                                                                         // 7322\n    case undefined: case null: return parseUnknown(xml);                                                               // 7323\n    default: return parseScalar(xml, shape);                                                                           // 7324\n  }                                                                                                                    // 7325\n}                                                                                                                      // 7326\n                                                                                                                       // 7327\nfunction parseStructure(xml, shape) {                                                                                  // 7328\n  var data = {};                                                                                                       // 7329\n  if (xml === null) return data;                                                                                       // 7330\n                                                                                                                       // 7331\n  util.each(shape.members, function(memberName, memberShape) {                                                         // 7332\n    if (memberShape.isXmlAttribute) {                                                                                  // 7333\n      if (xml.attributes.hasOwnProperty(memberShape.name)) {                                                           // 7334\n        var value = xml.attributes[memberShape.name].value;                                                            // 7335\n        data[memberName] = parseXml({textContent: value}, memberShape);                                                // 7336\n      }                                                                                                                // 7337\n    } else {                                                                                                           // 7338\n      var xmlChild = memberShape.flattened ? xml :                                                                     // 7339\n        xml.getElementsByTagName(memberShape.name)[0];                                                                 // 7340\n      if (xmlChild) {                                                                                                  // 7341\n        data[memberName] = parseXml(xmlChild, memberShape);                                                            // 7342\n      } else if (!memberShape.flattened && memberShape.type === 'list') {                                              // 7343\n        data[memberName] = memberShape.defaultValue;                                                                   // 7344\n      }                                                                                                                // 7345\n    }                                                                                                                  // 7346\n  });                                                                                                                  // 7347\n                                                                                                                       // 7348\n  return data;                                                                                                         // 7349\n}                                                                                                                      // 7350\n                                                                                                                       // 7351\nfunction parseMap(xml, shape) {                                                                                        // 7352\n  var data = {};                                                                                                       // 7353\n  var xmlKey = shape.key.name || 'key';                                                                                // 7354\n  var xmlValue = shape.value.name || 'value';                                                                          // 7355\n  var tagName = shape.flattened ? shape.name : 'entry';                                                                // 7356\n                                                                                                                       // 7357\n  var child = xml.firstElementChild;                                                                                   // 7358\n  while (child) {                                                                                                      // 7359\n    if (child.nodeName === tagName) {                                                                                  // 7360\n      var key = child.getElementsByTagName(xmlKey)[0].textContent;                                                     // 7361\n      var value = child.getElementsByTagName(xmlValue)[0];                                                             // 7362\n      data[key] = parseXml(value, shape.value);                                                                        // 7363\n    }                                                                                                                  // 7364\n    child = child.nextElementSibling;                                                                                  // 7365\n  }                                                                                                                    // 7366\n  return data;                                                                                                         // 7367\n}                                                                                                                      // 7368\n                                                                                                                       // 7369\nfunction parseList(xml, shape) {                                                                                       // 7370\n  var data = [];                                                                                                       // 7371\n  var tagName = shape.flattened ? shape.name : (shape.member.name || 'member');                                        // 7372\n                                                                                                                       // 7373\n  var child = xml.firstElementChild;                                                                                   // 7374\n  while (child) {                                                                                                      // 7375\n    if (child.nodeName === tagName) {                                                                                  // 7376\n      data.push(parseXml(child, shape.member));                                                                        // 7377\n    }                                                                                                                  // 7378\n    child = child.nextElementSibling;                                                                                  // 7379\n  }                                                                                                                    // 7380\n  return data;                                                                                                         // 7381\n}                                                                                                                      // 7382\n                                                                                                                       // 7383\nfunction parseScalar(xml, shape) {                                                                                     // 7384\n  if (xml.getAttribute) {                                                                                              // 7385\n    var encoding = xml.getAttribute('encoding');                                                                       // 7386\n    if (encoding === 'base64') {                                                                                       // 7387\n      shape = new Shape.create({type: encoding});                                                                      // 7388\n    }                                                                                                                  // 7389\n  }                                                                                                                    // 7390\n                                                                                                                       // 7391\n  var text = xml.textContent;                                                                                          // 7392\n  if (text === '') text = null;                                                                                        // 7393\n  if (typeof shape.toType === 'function') {                                                                            // 7394\n    return shape.toType(text);                                                                                         // 7395\n  } else {                                                                                                             // 7396\n    return text;                                                                                                       // 7397\n  }                                                                                                                    // 7398\n}                                                                                                                      // 7399\n                                                                                                                       // 7400\nfunction parseUnknown(xml) {                                                                                           // 7401\n  if (xml === undefined || xml === null) return '';                                                                    // 7402\n                                                                                                                       // 7403\n  if (!xml.firstElementChild) {                                                                                        // 7404\n    if (xml.parentNode.parentNode === null) return {};                                                                 // 7405\n    if (xml.childNodes.length === 0) return '';                                                                        // 7406\n    else return xml.textContent;                                                                                       // 7407\n  }                                                                                                                    // 7408\n                                                                                                                       // 7409\n  var shape = {type: 'structure', members: {}};                                                                        // 7410\n  var child = xml.firstElementChild;                                                                                   // 7411\n  while (child) {                                                                                                      // 7412\n    var tag = child.nodeName;                                                                                          // 7413\n    if (shape.members.hasOwnProperty(tag)) {                                                                           // 7414\n      shape.members[tag].type = 'list';                                                                                // 7415\n    } else {                                                                                                           // 7416\n      shape.members[tag] = {name: tag};                                                                                // 7417\n    }                                                                                                                  // 7418\n    child = child.nextElementSibling;                                                                                  // 7419\n  }                                                                                                                    // 7420\n  return parseStructure(xml, shape);                                                                                   // 7421\n}                                                                                                                      // 7422\n                                                                                                                       // 7423\nmodule.exports = DomXmlParser;                                                                                         // 7424\n                                                                                                                       // 7425\n},{\"../model/shape\":26,\"../util\":59}],61:[function(require,module,exports){                                            // 7426\nvar util = require('../util');                                                                                         // 7427\nvar builder = require('xmlbuilder');                                                                                   // 7428\n                                                                                                                       // 7429\nfunction XmlBuilder() { }                                                                                              // 7430\n                                                                                                                       // 7431\nXmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {                                           // 7432\n  var xml = builder.create(rootElement);                                                                               // 7433\n  applyNamespaces(xml, shape);                                                                                         // 7434\n  serialize(xml, params, shape);                                                                                       // 7435\n  return xml.children.length > 0 || noEmpty ? xml.root().toString() : '';                                              // 7436\n};                                                                                                                     // 7437\n                                                                                                                       // 7438\nfunction serialize(xml, value, shape) {                                                                                // 7439\n  switch (shape.type) {                                                                                                // 7440\n    case 'structure': return serializeStructure(xml, value, shape);                                                    // 7441\n    case 'map': return serializeMap(xml, value, shape);                                                                // 7442\n    case 'list': return serializeList(xml, value, shape);                                                              // 7443\n    default: return serializeScalar(xml, value, shape);                                                                // 7444\n  }                                                                                                                    // 7445\n}                                                                                                                      // 7446\n                                                                                                                       // 7447\nfunction serializeStructure(xml, params, shape) {                                                                      // 7448\n  util.arrayEach(shape.memberNames, function(memberName) {                                                             // 7449\n    var memberShape = shape.members[memberName];                                                                       // 7450\n    if (memberShape.location !== 'body') return;                                                                       // 7451\n                                                                                                                       // 7452\n    var value = params[memberName];                                                                                    // 7453\n    var name = memberShape.name;                                                                                       // 7454\n    if (value !== undefined && value !== null) {                                                                       // 7455\n      if (memberShape.isXmlAttribute) {                                                                                // 7456\n        xml.att(name, value);                                                                                          // 7457\n      } else if (memberShape.flattened) {                                                                              // 7458\n        serialize(xml, value, memberShape);                                                                            // 7459\n      } else {                                                                                                         // 7460\n        var element = xml.ele(name);                                                                                   // 7461\n        applyNamespaces(element, memberShape);                                                                         // 7462\n        serialize(element, value, memberShape);                                                                        // 7463\n      }                                                                                                                // 7464\n    }                                                                                                                  // 7465\n  });                                                                                                                  // 7466\n}                                                                                                                      // 7467\n                                                                                                                       // 7468\nfunction serializeMap(xml, map, shape) {                                                                               // 7469\n  var xmlKey = shape.key.name || 'key';                                                                                // 7470\n  var xmlValue = shape.value.name || 'value';                                                                          // 7471\n                                                                                                                       // 7472\n  util.each(map, function(key, value) {                                                                                // 7473\n    var entry = xml.ele(shape.flattened ? shape.name : 'entry');                                                       // 7474\n    serialize(entry.ele(xmlKey), key, shape.key);                                                                      // 7475\n    serialize(entry.ele(xmlValue), value, shape.value);                                                                // 7476\n  });                                                                                                                  // 7477\n}                                                                                                                      // 7478\n                                                                                                                       // 7479\nfunction serializeList(xml, list, shape) {                                                                             // 7480\n  if (shape.flattened) {                                                                                               // 7481\n    util.arrayEach(list, function(value) {                                                                             // 7482\n      var name = shape.member.name || shape.name;                                                                      // 7483\n      var element = xml.ele(name);                                                                                     // 7484\n      serialize(element, value, shape.member);                                                                         // 7485\n    });                                                                                                                // 7486\n  } else {                                                                                                             // 7487\n    util.arrayEach(list, function(value) {                                                                             // 7488\n      var name = shape.member.name || 'member';                                                                        // 7489\n      var element = xml.ele(name);                                                                                     // 7490\n      serialize(element, value, shape.member);                                                                         // 7491\n    });                                                                                                                // 7492\n  }                                                                                                                    // 7493\n}                                                                                                                      // 7494\n                                                                                                                       // 7495\nfunction serializeScalar(xml, value, shape) {                                                                          // 7496\n  xml.txt(shape.toWireFormat(value));                                                                                  // 7497\n}                                                                                                                      // 7498\n                                                                                                                       // 7499\nfunction applyNamespaces(xml, shape) {                                                                                 // 7500\n  var uri, prefix = 'xmlns';                                                                                           // 7501\n  if (shape.xmlNamespaceUri) {                                                                                         // 7502\n    uri = shape.xmlNamespaceUri;                                                                                       // 7503\n    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;                                            // 7504\n  } else if (xml.isRoot && shape.api.xmlNamespaceUri) {                                                                // 7505\n    uri = shape.api.xmlNamespaceUri;                                                                                   // 7506\n  }                                                                                                                    // 7507\n                                                                                                                       // 7508\n  if (uri) xml.att(prefix, uri);                                                                                       // 7509\n}                                                                                                                      // 7510\n                                                                                                                       // 7511\nmodule.exports = XmlBuilder;                                                                                           // 7512\n                                                                                                                       // 7513\n},{\"../util\":59,\"xmlbuilder\":97}],62:[function(require,module,exports){                                                // 7514\n                                                                                                                       // 7515\n                                                                                                                       // 7516\nvar base64 = require('base64-js')                                                                                      // 7517\nvar ieee754 = require('ieee754')                                                                                       // 7518\n                                                                                                                       // 7519\nexports.Buffer = Buffer                                                                                                // 7520\nexports.SlowBuffer = Buffer                                                                                            // 7521\nexports.INSPECT_MAX_BYTES = 50                                                                                         // 7522\nBuffer.poolSize = 8192                                                                                                 // 7523\n                                                                                                                       // 7524\n                                                                                                                       // 7525\nBuffer._useTypedArrays = (function () {                                                                                // 7526\n  try {                                                                                                                // 7527\n    var buf = new ArrayBuffer(0)                                                                                       // 7528\n    var arr = new Uint8Array(buf)                                                                                      // 7529\n    arr.foo = function () { return 42 }                                                                                // 7530\n    return 42 === arr.foo() &&                                                                                         // 7531\n        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`                                              // 7532\n  } catch (e) {                                                                                                        // 7533\n    return false                                                                                                       // 7534\n  }                                                                                                                    // 7535\n})()                                                                                                                   // 7536\n                                                                                                                       // 7537\n                                                                                                                       // 7538\nfunction Buffer (subject, encoding, noZero) {                                                                          // 7539\n  if (!(this instanceof Buffer))                                                                                       // 7540\n    return new Buffer(subject, encoding, noZero)                                                                       // 7541\n                                                                                                                       // 7542\n  var type = typeof subject                                                                                            // 7543\n                                                                                                                       // 7544\n  if (encoding === 'base64' && type === 'string') {                                                                    // 7545\n    subject = stringtrim(subject)                                                                                      // 7546\n    while (subject.length % 4 !== 0) {                                                                                 // 7547\n      subject = subject + '='                                                                                          // 7548\n    }                                                                                                                  // 7549\n  }                                                                                                                    // 7550\n                                                                                                                       // 7551\n  var length                                                                                                           // 7552\n  if (type === 'number')                                                                                               // 7553\n    length = coerce(subject)                                                                                           // 7554\n  else if (type === 'string')                                                                                          // 7555\n    length = Buffer.byteLength(subject, encoding)                                                                      // 7556\n  else if (type === 'object')                                                                                          // 7557\n    length = coerce(subject.length) // assume that object is array-like                                                // 7558\n  else                                                                                                                 // 7559\n    throw new Error('First argument needs to be a number, array or string.')                                           // 7560\n                                                                                                                       // 7561\n  var buf                                                                                                              // 7562\n  if (Buffer._useTypedArrays) {                                                                                        // 7563\n    buf = Buffer._augment(new Uint8Array(length))                                                                      // 7564\n  } else {                                                                                                             // 7565\n    buf = this                                                                                                         // 7566\n    buf.length = length                                                                                                // 7567\n    buf._isBuffer = true                                                                                               // 7568\n  }                                                                                                                    // 7569\n                                                                                                                       // 7570\n  var i                                                                                                                // 7571\n  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {                                              // 7572\n    buf._set(subject)                                                                                                  // 7573\n  } else if (isArrayish(subject)) {                                                                                    // 7574\n    for (i = 0; i < length; i++) {                                                                                     // 7575\n      if (Buffer.isBuffer(subject))                                                                                    // 7576\n        buf[i] = subject.readUInt8(i)                                                                                  // 7577\n      else                                                                                                             // 7578\n        buf[i] = subject[i]                                                                                            // 7579\n    }                                                                                                                  // 7580\n  } else if (type === 'string') {                                                                                      // 7581\n    buf.write(subject, 0, encoding)                                                                                    // 7582\n  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {                                                // 7583\n    for (i = 0; i < length; i++) {                                                                                     // 7584\n      buf[i] = 0                                                                                                       // 7585\n    }                                                                                                                  // 7586\n  }                                                                                                                    // 7587\n                                                                                                                       // 7588\n  return buf                                                                                                           // 7589\n}                                                                                                                      // 7590\n                                                                                                                       // 7591\n                                                                                                                       // 7592\nBuffer.isEncoding = function (encoding) {                                                                              // 7593\n  switch (String(encoding).toLowerCase()) {                                                                            // 7594\n    case 'hex':                                                                                                        // 7595\n    case 'utf8':                                                                                                       // 7596\n    case 'utf-8':                                                                                                      // 7597\n    case 'ascii':                                                                                                      // 7598\n    case 'binary':                                                                                                     // 7599\n    case 'base64':                                                                                                     // 7600\n    case 'raw':                                                                                                        // 7601\n    case 'ucs2':                                                                                                       // 7602\n    case 'ucs-2':                                                                                                      // 7603\n    case 'utf16le':                                                                                                    // 7604\n    case 'utf-16le':                                                                                                   // 7605\n      return true                                                                                                      // 7606\n    default:                                                                                                           // 7607\n      return false                                                                                                     // 7608\n  }                                                                                                                    // 7609\n}                                                                                                                      // 7610\n                                                                                                                       // 7611\nBuffer.isBuffer = function (b) {                                                                                       // 7612\n  return !!(b !== null && b !== undefined && b._isBuffer)                                                              // 7613\n}                                                                                                                      // 7614\n                                                                                                                       // 7615\nBuffer.byteLength = function (str, encoding) {                                                                         // 7616\n  var ret                                                                                                              // 7617\n  str = str + ''                                                                                                       // 7618\n  switch (encoding || 'utf8') {                                                                                        // 7619\n    case 'hex':                                                                                                        // 7620\n      ret = str.length / 2                                                                                             // 7621\n      break                                                                                                            // 7622\n    case 'utf8':                                                                                                       // 7623\n    case 'utf-8':                                                                                                      // 7624\n      ret = utf8ToBytes(str).length                                                                                    // 7625\n      break                                                                                                            // 7626\n    case 'ascii':                                                                                                      // 7627\n    case 'binary':                                                                                                     // 7628\n    case 'raw':                                                                                                        // 7629\n      ret = str.length                                                                                                 // 7630\n      break                                                                                                            // 7631\n    case 'base64':                                                                                                     // 7632\n      ret = base64ToBytes(str).length                                                                                  // 7633\n      break                                                                                                            // 7634\n    case 'ucs2':                                                                                                       // 7635\n    case 'ucs-2':                                                                                                      // 7636\n    case 'utf16le':                                                                                                    // 7637\n    case 'utf-16le':                                                                                                   // 7638\n      ret = str.length * 2                                                                                             // 7639\n      break                                                                                                            // 7640\n    default:                                                                                                           // 7641\n      throw new Error('Unknown encoding')                                                                              // 7642\n  }                                                                                                                    // 7643\n  return ret                                                                                                           // 7644\n}                                                                                                                      // 7645\n                                                                                                                       // 7646\nBuffer.concat = function (list, totalLength) {                                                                         // 7647\n  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\\n' +                                                // 7648\n      'list should be an Array.')                                                                                      // 7649\n                                                                                                                       // 7650\n  if (list.length === 0) {                                                                                             // 7651\n    return new Buffer(0)                                                                                               // 7652\n  } else if (list.length === 1) {                                                                                      // 7653\n    return list[0]                                                                                                     // 7654\n  }                                                                                                                    // 7655\n                                                                                                                       // 7656\n  var i                                                                                                                // 7657\n  if (typeof totalLength !== 'number') {                                                                               // 7658\n    totalLength = 0                                                                                                    // 7659\n    for (i = 0; i < list.length; i++) {                                                                                // 7660\n      totalLength += list[i].length                                                                                    // 7661\n    }                                                                                                                  // 7662\n  }                                                                                                                    // 7663\n                                                                                                                       // 7664\n  var buf = new Buffer(totalLength)                                                                                    // 7665\n  var pos = 0                                                                                                          // 7666\n  for (i = 0; i < list.length; i++) {                                                                                  // 7667\n    var item = list[i]                                                                                                 // 7668\n    item.copy(buf, pos)                                                                                                // 7669\n    pos += item.length                                                                                                 // 7670\n  }                                                                                                                    // 7671\n  return buf                                                                                                           // 7672\n}                                                                                                                      // 7673\n                                                                                                                       // 7674\n                                                                                                                       // 7675\nfunction _hexWrite (buf, string, offset, length) {                                                                     // 7676\n  offset = Number(offset) || 0                                                                                         // 7677\n  var remaining = buf.length - offset                                                                                  // 7678\n  if (!length) {                                                                                                       // 7679\n    length = remaining                                                                                                 // 7680\n  } else {                                                                                                             // 7681\n    length = Number(length)                                                                                            // 7682\n    if (length > remaining) {                                                                                          // 7683\n      length = remaining                                                                                               // 7684\n    }                                                                                                                  // 7685\n  }                                                                                                                    // 7686\n                                                                                                                       // 7687\n  var strLen = string.length                                                                                           // 7688\n  assert(strLen % 2 === 0, 'Invalid hex string')                                                                       // 7689\n                                                                                                                       // 7690\n  if (length > strLen / 2) {                                                                                           // 7691\n    length = strLen / 2                                                                                                // 7692\n  }                                                                                                                    // 7693\n  for (var i = 0; i < length; i++) {                                                                                   // 7694\n    var byte = parseInt(string.substr(i * 2, 2), 16)                                                                   // 7695\n    assert(!isNaN(byte), 'Invalid hex string')                                                                         // 7696\n    buf[offset + i] = byte                                                                                             // 7697\n  }                                                                                                                    // 7698\n  Buffer._charsWritten = i * 2                                                                                         // 7699\n  return i                                                                                                             // 7700\n}                                                                                                                      // 7701\n                                                                                                                       // 7702\nfunction _utf8Write (buf, string, offset, length) {                                                                    // 7703\n  var charsWritten = Buffer._charsWritten =                                                                            // 7704\n    blitBuffer(utf8ToBytes(string), buf, offset, length)                                                               // 7705\n  return charsWritten                                                                                                  // 7706\n}                                                                                                                      // 7707\n                                                                                                                       // 7708\nfunction _asciiWrite (buf, string, offset, length) {                                                                   // 7709\n  var charsWritten = Buffer._charsWritten =                                                                            // 7710\n    blitBuffer(asciiToBytes(string), buf, offset, length)                                                              // 7711\n  return charsWritten                                                                                                  // 7712\n}                                                                                                                      // 7713\n                                                                                                                       // 7714\nfunction _binaryWrite (buf, string, offset, length) {                                                                  // 7715\n  return _asciiWrite(buf, string, offset, length)                                                                      // 7716\n}                                                                                                                      // 7717\n                                                                                                                       // 7718\nfunction _base64Write (buf, string, offset, length) {                                                                  // 7719\n  var charsWritten = Buffer._charsWritten =                                                                            // 7720\n    blitBuffer(base64ToBytes(string), buf, offset, length)                                                             // 7721\n  return charsWritten                                                                                                  // 7722\n}                                                                                                                      // 7723\n                                                                                                                       // 7724\nfunction _utf16leWrite (buf, string, offset, length) {                                                                 // 7725\n  var charsWritten = Buffer._charsWritten =                                                                            // 7726\n    blitBuffer(utf16leToBytes(string), buf, offset, length)                                                            // 7727\n  return charsWritten                                                                                                  // 7728\n}                                                                                                                      // 7729\n                                                                                                                       // 7730\nBuffer.prototype.write = function (string, offset, length, encoding) {                                                 // 7731\n  if (isFinite(offset)) {                                                                                              // 7732\n    if (!isFinite(length)) {                                                                                           // 7733\n      encoding = length                                                                                                // 7734\n      length = undefined                                                                                               // 7735\n    }                                                                                                                  // 7736\n  } else {  // legacy                                                                                                  // 7737\n    var swap = encoding                                                                                                // 7738\n    encoding = offset                                                                                                  // 7739\n    offset = length                                                                                                    // 7740\n    length = swap                                                                                                      // 7741\n  }                                                                                                                    // 7742\n                                                                                                                       // 7743\n  offset = Number(offset) || 0                                                                                         // 7744\n  var remaining = this.length - offset                                                                                 // 7745\n  if (!length) {                                                                                                       // 7746\n    length = remaining                                                                                                 // 7747\n  } else {                                                                                                             // 7748\n    length = Number(length)                                                                                            // 7749\n    if (length > remaining) {                                                                                          // 7750\n      length = remaining                                                                                               // 7751\n    }                                                                                                                  // 7752\n  }                                                                                                                    // 7753\n  encoding = String(encoding || 'utf8').toLowerCase()                                                                  // 7754\n                                                                                                                       // 7755\n  var ret                                                                                                              // 7756\n  switch (encoding) {                                                                                                  // 7757\n    case 'hex':                                                                                                        // 7758\n      ret = _hexWrite(this, string, offset, length)                                                                    // 7759\n      break                                                                                                            // 7760\n    case 'utf8':                                                                                                       // 7761\n    case 'utf-8':                                                                                                      // 7762\n      ret = _utf8Write(this, string, offset, length)                                                                   // 7763\n      break                                                                                                            // 7764\n    case 'ascii':                                                                                                      // 7765\n      ret = _asciiWrite(this, string, offset, length)                                                                  // 7766\n      break                                                                                                            // 7767\n    case 'binary':                                                                                                     // 7768\n      ret = _binaryWrite(this, string, offset, length)                                                                 // 7769\n      break                                                                                                            // 7770\n    case 'base64':                                                                                                     // 7771\n      ret = _base64Write(this, string, offset, length)                                                                 // 7772\n      break                                                                                                            // 7773\n    case 'ucs2':                                                                                                       // 7774\n    case 'ucs-2':                                                                                                      // 7775\n    case 'utf16le':                                                                                                    // 7776\n    case 'utf-16le':                                                                                                   // 7777\n      ret = _utf16leWrite(this, string, offset, length)                                                                // 7778\n      break                                                                                                            // 7779\n    default:                                                                                                           // 7780\n      throw new Error('Unknown encoding')                                                                              // 7781\n  }                                                                                                                    // 7782\n  return ret                                                                                                           // 7783\n}                                                                                                                      // 7784\n                                                                                                                       // 7785\nBuffer.prototype.toString = function (encoding, start, end) {                                                          // 7786\n  var self = this                                                                                                      // 7787\n                                                                                                                       // 7788\n  encoding = String(encoding || 'utf8').toLowerCase()                                                                  // 7789\n  start = Number(start) || 0                                                                                           // 7790\n  end = (end !== undefined)                                                                                            // 7791\n    ? Number(end)                                                                                                      // 7792\n    : end = self.length                                                                                                // 7793\n                                                                                                                       // 7794\n  if (end === start)                                                                                                   // 7795\n    return ''                                                                                                          // 7796\n                                                                                                                       // 7797\n  var ret                                                                                                              // 7798\n  switch (encoding) {                                                                                                  // 7799\n    case 'hex':                                                                                                        // 7800\n      ret = _hexSlice(self, start, end)                                                                                // 7801\n      break                                                                                                            // 7802\n    case 'utf8':                                                                                                       // 7803\n    case 'utf-8':                                                                                                      // 7804\n      ret = _utf8Slice(self, start, end)                                                                               // 7805\n      break                                                                                                            // 7806\n    case 'ascii':                                                                                                      // 7807\n      ret = _asciiSlice(self, start, end)                                                                              // 7808\n      break                                                                                                            // 7809\n    case 'binary':                                                                                                     // 7810\n      ret = _binarySlice(self, start, end)                                                                             // 7811\n      break                                                                                                            // 7812\n    case 'base64':                                                                                                     // 7813\n      ret = _base64Slice(self, start, end)                                                                             // 7814\n      break                                                                                                            // 7815\n    case 'ucs2':                                                                                                       // 7816\n    case 'ucs-2':                                                                                                      // 7817\n    case 'utf16le':                                                                                                    // 7818\n    case 'utf-16le':                                                                                                   // 7819\n      ret = _utf16leSlice(self, start, end)                                                                            // 7820\n      break                                                                                                            // 7821\n    default:                                                                                                           // 7822\n      throw new Error('Unknown encoding')                                                                              // 7823\n  }                                                                                                                    // 7824\n  return ret                                                                                                           // 7825\n}                                                                                                                      // 7826\n                                                                                                                       // 7827\nBuffer.prototype.toJSON = function () {                                                                                // 7828\n  return {                                                                                                             // 7829\n    type: 'Buffer',                                                                                                    // 7830\n    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 7831\n  }                                                                                                                    // 7832\n}                                                                                                                      // 7833\n                                                                                                                       // 7834\nBuffer.prototype.copy = function (target, target_start, start, end) {                                                  // 7835\n  var source = this                                                                                                    // 7836\n                                                                                                                       // 7837\n  if (!start) start = 0                                                                                                // 7838\n  if (!end && end !== 0) end = this.length                                                                             // 7839\n  if (!target_start) target_start = 0                                                                                  // 7840\n                                                                                                                       // 7841\n  if (end === start) return                                                                                            // 7842\n  if (target.length === 0 || source.length === 0) return                                                               // 7843\n                                                                                                                       // 7844\n  assert(end >= start, 'sourceEnd < sourceStart')                                                                      // 7845\n  assert(target_start >= 0 && target_start < target.length,                                                            // 7846\n      'targetStart out of bounds')                                                                                     // 7847\n  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')                                             // 7848\n  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')                                                  // 7849\n                                                                                                                       // 7850\n  if (end > this.length)                                                                                               // 7851\n    end = this.length                                                                                                  // 7852\n  if (target.length - target_start < end - start)                                                                      // 7853\n    end = target.length - target_start + start                                                                         // 7854\n                                                                                                                       // 7855\n  var len = end - start                                                                                                // 7856\n                                                                                                                       // 7857\n  if (len < 100 || !Buffer._useTypedArrays) {                                                                          // 7858\n    for (var i = 0; i < len; i++)                                                                                      // 7859\n      target[i + target_start] = this[i + start]                                                                       // 7860\n  } else {                                                                                                             // 7861\n    target._set(this.subarray(start, start + len), target_start)                                                       // 7862\n  }                                                                                                                    // 7863\n}                                                                                                                      // 7864\n                                                                                                                       // 7865\nfunction _base64Slice (buf, start, end) {                                                                              // 7866\n  if (start === 0 && end === buf.length) {                                                                             // 7867\n    return base64.fromByteArray(buf)                                                                                   // 7868\n  } else {                                                                                                             // 7869\n    return base64.fromByteArray(buf.slice(start, end))                                                                 // 7870\n  }                                                                                                                    // 7871\n}                                                                                                                      // 7872\n                                                                                                                       // 7873\nfunction _utf8Slice (buf, start, end) {                                                                                // 7874\n  var res = ''                                                                                                         // 7875\n  var tmp = ''                                                                                                         // 7876\n  end = Math.min(buf.length, end)                                                                                      // 7877\n                                                                                                                       // 7878\n  for (var i = start; i < end; i++) {                                                                                  // 7879\n    if (buf[i] <= 0x7F) {                                                                                              // 7880\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])                                                         // 7881\n      tmp = ''                                                                                                         // 7882\n    } else {                                                                                                           // 7883\n      tmp += '%' + buf[i].toString(16)                                                                                 // 7884\n    }                                                                                                                  // 7885\n  }                                                                                                                    // 7886\n                                                                                                                       // 7887\n  return res + decodeUtf8Char(tmp)                                                                                     // 7888\n}                                                                                                                      // 7889\n                                                                                                                       // 7890\nfunction _asciiSlice (buf, start, end) {                                                                               // 7891\n  var ret = ''                                                                                                         // 7892\n  end = Math.min(buf.length, end)                                                                                      // 7893\n                                                                                                                       // 7894\n  for (var i = start; i < end; i++)                                                                                    // 7895\n    ret += String.fromCharCode(buf[i])                                                                                 // 7896\n  return ret                                                                                                           // 7897\n}                                                                                                                      // 7898\n                                                                                                                       // 7899\nfunction _binarySlice (buf, start, end) {                                                                              // 7900\n  return _asciiSlice(buf, start, end)                                                                                  // 7901\n}                                                                                                                      // 7902\n                                                                                                                       // 7903\nfunction _hexSlice (buf, start, end) {                                                                                 // 7904\n  var len = buf.length                                                                                                 // 7905\n                                                                                                                       // 7906\n  if (!start || start < 0) start = 0                                                                                   // 7907\n  if (!end || end < 0 || end > len) end = len                                                                          // 7908\n                                                                                                                       // 7909\n  var out = ''                                                                                                         // 7910\n  for (var i = start; i < end; i++) {                                                                                  // 7911\n    out += toHex(buf[i])                                                                                               // 7912\n  }                                                                                                                    // 7913\n  return out                                                                                                           // 7914\n}                                                                                                                      // 7915\n                                                                                                                       // 7916\nfunction _utf16leSlice (buf, start, end) {                                                                             // 7917\n  var bytes = buf.slice(start, end)                                                                                    // 7918\n  var res = ''                                                                                                         // 7919\n  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 7920\n    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)                                                            // 7921\n  }                                                                                                                    // 7922\n  return res                                                                                                           // 7923\n}                                                                                                                      // 7924\n                                                                                                                       // 7925\nBuffer.prototype.slice = function (start, end) {                                                                       // 7926\n  var len = this.length                                                                                                // 7927\n  start = clamp(start, len, 0)                                                                                         // 7928\n  end = clamp(end, len, len)                                                                                           // 7929\n                                                                                                                       // 7930\n  if (Buffer._useTypedArrays) {                                                                                        // 7931\n    return Buffer._augment(this.subarray(start, end))                                                                  // 7932\n  } else {                                                                                                             // 7933\n    var sliceLen = end - start                                                                                         // 7934\n    var newBuf = new Buffer(sliceLen, undefined, true)                                                                 // 7935\n    for (var i = 0; i < sliceLen; i++) {                                                                               // 7936\n      newBuf[i] = this[i + start]                                                                                      // 7937\n    }                                                                                                                  // 7938\n    return newBuf                                                                                                      // 7939\n  }                                                                                                                    // 7940\n}                                                                                                                      // 7941\n                                                                                                                       // 7942\nBuffer.prototype.get = function (offset) {                                                                             // 7943\n  console.log('.get() is deprecated. Access using array indexes instead.')                                             // 7944\n  return this.readUInt8(offset)                                                                                        // 7945\n}                                                                                                                      // 7946\n                                                                                                                       // 7947\nBuffer.prototype.set = function (v, offset) {                                                                          // 7948\n  console.log('.set() is deprecated. Access using array indexes instead.')                                             // 7949\n  return this.writeUInt8(v, offset)                                                                                    // 7950\n}                                                                                                                      // 7951\n                                                                                                                       // 7952\nBuffer.prototype.readUInt8 = function (offset, noAssert) {                                                             // 7953\n  if (!noAssert) {                                                                                                     // 7954\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 7955\n    assert(offset < this.length, 'Trying to read beyond buffer length')                                                // 7956\n  }                                                                                                                    // 7957\n                                                                                                                       // 7958\n  if (offset >= this.length)                                                                                           // 7959\n    return                                                                                                             // 7960\n                                                                                                                       // 7961\n  return this[offset]                                                                                                  // 7962\n}                                                                                                                      // 7963\n                                                                                                                       // 7964\nfunction _readUInt16 (buf, offset, littleEndian, noAssert) {                                                           // 7965\n  if (!noAssert) {                                                                                                     // 7966\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 7967\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 7968\n    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')                                             // 7969\n  }                                                                                                                    // 7970\n                                                                                                                       // 7971\n  var len = buf.length                                                                                                 // 7972\n  if (offset >= len)                                                                                                   // 7973\n    return                                                                                                             // 7974\n                                                                                                                       // 7975\n  var val                                                                                                              // 7976\n  if (littleEndian) {                                                                                                  // 7977\n    val = buf[offset]                                                                                                  // 7978\n    if (offset + 1 < len)                                                                                              // 7979\n      val |= buf[offset + 1] << 8                                                                                      // 7980\n  } else {                                                                                                             // 7981\n    val = buf[offset] << 8                                                                                             // 7982\n    if (offset + 1 < len)                                                                                              // 7983\n      val |= buf[offset + 1]                                                                                           // 7984\n  }                                                                                                                    // 7985\n  return val                                                                                                           // 7986\n}                                                                                                                      // 7987\n                                                                                                                       // 7988\nBuffer.prototype.readUInt16LE = function (offset, noAssert) {                                                          // 7989\n  return _readUInt16(this, offset, true, noAssert)                                                                     // 7990\n}                                                                                                                      // 7991\n                                                                                                                       // 7992\nBuffer.prototype.readUInt16BE = function (offset, noAssert) {                                                          // 7993\n  return _readUInt16(this, offset, false, noAssert)                                                                    // 7994\n}                                                                                                                      // 7995\n                                                                                                                       // 7996\nfunction _readUInt32 (buf, offset, littleEndian, noAssert) {                                                           // 7997\n  if (!noAssert) {                                                                                                     // 7998\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 7999\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8000\n    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')                                             // 8001\n  }                                                                                                                    // 8002\n                                                                                                                       // 8003\n  var len = buf.length                                                                                                 // 8004\n  if (offset >= len)                                                                                                   // 8005\n    return                                                                                                             // 8006\n                                                                                                                       // 8007\n  var val                                                                                                              // 8008\n  if (littleEndian) {                                                                                                  // 8009\n    if (offset + 2 < len)                                                                                              // 8010\n      val = buf[offset + 2] << 16                                                                                      // 8011\n    if (offset + 1 < len)                                                                                              // 8012\n      val |= buf[offset + 1] << 8                                                                                      // 8013\n    val |= buf[offset]                                                                                                 // 8014\n    if (offset + 3 < len)                                                                                              // 8015\n      val = val + (buf[offset + 3] << 24 >>> 0)                                                                        // 8016\n  } else {                                                                                                             // 8017\n    if (offset + 1 < len)                                                                                              // 8018\n      val = buf[offset + 1] << 16                                                                                      // 8019\n    if (offset + 2 < len)                                                                                              // 8020\n      val |= buf[offset + 2] << 8                                                                                      // 8021\n    if (offset + 3 < len)                                                                                              // 8022\n      val |= buf[offset + 3]                                                                                           // 8023\n    val = val + (buf[offset] << 24 >>> 0)                                                                              // 8024\n  }                                                                                                                    // 8025\n  return val                                                                                                           // 8026\n}                                                                                                                      // 8027\n                                                                                                                       // 8028\nBuffer.prototype.readUInt32LE = function (offset, noAssert) {                                                          // 8029\n  return _readUInt32(this, offset, true, noAssert)                                                                     // 8030\n}                                                                                                                      // 8031\n                                                                                                                       // 8032\nBuffer.prototype.readUInt32BE = function (offset, noAssert) {                                                          // 8033\n  return _readUInt32(this, offset, false, noAssert)                                                                    // 8034\n}                                                                                                                      // 8035\n                                                                                                                       // 8036\nBuffer.prototype.readInt8 = function (offset, noAssert) {                                                              // 8037\n  if (!noAssert) {                                                                                                     // 8038\n    assert(offset !== undefined && offset !== null,                                                                    // 8039\n        'missing offset')                                                                                              // 8040\n    assert(offset < this.length, 'Trying to read beyond buffer length')                                                // 8041\n  }                                                                                                                    // 8042\n                                                                                                                       // 8043\n  if (offset >= this.length)                                                                                           // 8044\n    return                                                                                                             // 8045\n                                                                                                                       // 8046\n  var neg = this[offset] & 0x80                                                                                        // 8047\n  if (neg)                                                                                                             // 8048\n    return (0xff - this[offset] + 1) * -1                                                                              // 8049\n  else                                                                                                                 // 8050\n    return this[offset]                                                                                                // 8051\n}                                                                                                                      // 8052\n                                                                                                                       // 8053\nfunction _readInt16 (buf, offset, littleEndian, noAssert) {                                                            // 8054\n  if (!noAssert) {                                                                                                     // 8055\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8056\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8057\n    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')                                             // 8058\n  }                                                                                                                    // 8059\n                                                                                                                       // 8060\n  var len = buf.length                                                                                                 // 8061\n  if (offset >= len)                                                                                                   // 8062\n    return                                                                                                             // 8063\n                                                                                                                       // 8064\n  var val = _readUInt16(buf, offset, littleEndian, true)                                                               // 8065\n  var neg = val & 0x8000                                                                                               // 8066\n  if (neg)                                                                                                             // 8067\n    return (0xffff - val + 1) * -1                                                                                     // 8068\n  else                                                                                                                 // 8069\n    return val                                                                                                         // 8070\n}                                                                                                                      // 8071\n                                                                                                                       // 8072\nBuffer.prototype.readInt16LE = function (offset, noAssert) {                                                           // 8073\n  return _readInt16(this, offset, true, noAssert)                                                                      // 8074\n}                                                                                                                      // 8075\n                                                                                                                       // 8076\nBuffer.prototype.readInt16BE = function (offset, noAssert) {                                                           // 8077\n  return _readInt16(this, offset, false, noAssert)                                                                     // 8078\n}                                                                                                                      // 8079\n                                                                                                                       // 8080\nfunction _readInt32 (buf, offset, littleEndian, noAssert) {                                                            // 8081\n  if (!noAssert) {                                                                                                     // 8082\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8083\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8084\n    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')                                             // 8085\n  }                                                                                                                    // 8086\n                                                                                                                       // 8087\n  var len = buf.length                                                                                                 // 8088\n  if (offset >= len)                                                                                                   // 8089\n    return                                                                                                             // 8090\n                                                                                                                       // 8091\n  var val = _readUInt32(buf, offset, littleEndian, true)                                                               // 8092\n  var neg = val & 0x80000000                                                                                           // 8093\n  if (neg)                                                                                                             // 8094\n    return (0xffffffff - val + 1) * -1                                                                                 // 8095\n  else                                                                                                                 // 8096\n    return val                                                                                                         // 8097\n}                                                                                                                      // 8098\n                                                                                                                       // 8099\nBuffer.prototype.readInt32LE = function (offset, noAssert) {                                                           // 8100\n  return _readInt32(this, offset, true, noAssert)                                                                      // 8101\n}                                                                                                                      // 8102\n                                                                                                                       // 8103\nBuffer.prototype.readInt32BE = function (offset, noAssert) {                                                           // 8104\n  return _readInt32(this, offset, false, noAssert)                                                                     // 8105\n}                                                                                                                      // 8106\n                                                                                                                       // 8107\nfunction _readFloat (buf, offset, littleEndian, noAssert) {                                                            // 8108\n  if (!noAssert) {                                                                                                     // 8109\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8110\n    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')                                             // 8111\n  }                                                                                                                    // 8112\n                                                                                                                       // 8113\n  return ieee754.read(buf, offset, littleEndian, 23, 4)                                                                // 8114\n}                                                                                                                      // 8115\n                                                                                                                       // 8116\nBuffer.prototype.readFloatLE = function (offset, noAssert) {                                                           // 8117\n  return _readFloat(this, offset, true, noAssert)                                                                      // 8118\n}                                                                                                                      // 8119\n                                                                                                                       // 8120\nBuffer.prototype.readFloatBE = function (offset, noAssert) {                                                           // 8121\n  return _readFloat(this, offset, false, noAssert)                                                                     // 8122\n}                                                                                                                      // 8123\n                                                                                                                       // 8124\nfunction _readDouble (buf, offset, littleEndian, noAssert) {                                                           // 8125\n  if (!noAssert) {                                                                                                     // 8126\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8127\n    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')                                             // 8128\n  }                                                                                                                    // 8129\n                                                                                                                       // 8130\n  return ieee754.read(buf, offset, littleEndian, 52, 8)                                                                // 8131\n}                                                                                                                      // 8132\n                                                                                                                       // 8133\nBuffer.prototype.readDoubleLE = function (offset, noAssert) {                                                          // 8134\n  return _readDouble(this, offset, true, noAssert)                                                                     // 8135\n}                                                                                                                      // 8136\n                                                                                                                       // 8137\nBuffer.prototype.readDoubleBE = function (offset, noAssert) {                                                          // 8138\n  return _readDouble(this, offset, false, noAssert)                                                                    // 8139\n}                                                                                                                      // 8140\n                                                                                                                       // 8141\nBuffer.prototype.writeUInt8 = function (value, offset, noAssert) {                                                     // 8142\n  if (!noAssert) {                                                                                                     // 8143\n    assert(value !== undefined && value !== null, 'missing value')                                                     // 8144\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8145\n    assert(offset < this.length, 'trying to write beyond buffer length')                                               // 8146\n    verifuint(value, 0xff)                                                                                             // 8147\n  }                                                                                                                    // 8148\n                                                                                                                       // 8149\n  if (offset >= this.length) return                                                                                    // 8150\n                                                                                                                       // 8151\n  this[offset] = value                                                                                                 // 8152\n}                                                                                                                      // 8153\n                                                                                                                       // 8154\nfunction _writeUInt16 (buf, value, offset, littleEndian, noAssert) {                                                   // 8155\n  if (!noAssert) {                                                                                                     // 8156\n    assert(value !== undefined && value !== null, 'missing value')                                                     // 8157\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8158\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8159\n    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')                                            // 8160\n    verifuint(value, 0xffff)                                                                                           // 8161\n  }                                                                                                                    // 8162\n                                                                                                                       // 8163\n  var len = buf.length                                                                                                 // 8164\n  if (offset >= len)                                                                                                   // 8165\n    return                                                                                                             // 8166\n                                                                                                                       // 8167\n  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {                                                         // 8168\n    buf[offset + i] =                                                                                                  // 8169\n        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                                       // 8170\n            (littleEndian ? i : 1 - i) * 8                                                                             // 8171\n  }                                                                                                                    // 8172\n}                                                                                                                      // 8173\n                                                                                                                       // 8174\nBuffer.prototype.writeUInt16LE = function (value, offset, noAssert) {                                                  // 8175\n  _writeUInt16(this, value, offset, true, noAssert)                                                                    // 8176\n}                                                                                                                      // 8177\n                                                                                                                       // 8178\nBuffer.prototype.writeUInt16BE = function (value, offset, noAssert) {                                                  // 8179\n  _writeUInt16(this, value, offset, false, noAssert)                                                                   // 8180\n}                                                                                                                      // 8181\n                                                                                                                       // 8182\nfunction _writeUInt32 (buf, value, offset, littleEndian, noAssert) {                                                   // 8183\n  if (!noAssert) {                                                                                                     // 8184\n    assert(value !== undefined && value !== null, 'missing value')                                                     // 8185\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8186\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8187\n    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')                                            // 8188\n    verifuint(value, 0xffffffff)                                                                                       // 8189\n  }                                                                                                                    // 8190\n                                                                                                                       // 8191\n  var len = buf.length                                                                                                 // 8192\n  if (offset >= len)                                                                                                   // 8193\n    return                                                                                                             // 8194\n                                                                                                                       // 8195\n  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {                                                         // 8196\n    buf[offset + i] =                                                                                                  // 8197\n        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                              // 8198\n  }                                                                                                                    // 8199\n}                                                                                                                      // 8200\n                                                                                                                       // 8201\nBuffer.prototype.writeUInt32LE = function (value, offset, noAssert) {                                                  // 8202\n  _writeUInt32(this, value, offset, true, noAssert)                                                                    // 8203\n}                                                                                                                      // 8204\n                                                                                                                       // 8205\nBuffer.prototype.writeUInt32BE = function (value, offset, noAssert) {                                                  // 8206\n  _writeUInt32(this, value, offset, false, noAssert)                                                                   // 8207\n}                                                                                                                      // 8208\n                                                                                                                       // 8209\nBuffer.prototype.writeInt8 = function (value, offset, noAssert) {                                                      // 8210\n  if (!noAssert) {                                                                                                     // 8211\n    assert(value !== undefined && value !== null, 'missing value')                                                     // 8212\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8213\n    assert(offset < this.length, 'Trying to write beyond buffer length')                                               // 8214\n    verifsint(value, 0x7f, -0x80)                                                                                      // 8215\n  }                                                                                                                    // 8216\n                                                                                                                       // 8217\n  if (offset >= this.length)                                                                                           // 8218\n    return                                                                                                             // 8219\n                                                                                                                       // 8220\n  if (value >= 0)                                                                                                      // 8221\n    this.writeUInt8(value, offset, noAssert)                                                                           // 8222\n  else                                                                                                                 // 8223\n    this.writeUInt8(0xff + value + 1, offset, noAssert)                                                                // 8224\n}                                                                                                                      // 8225\n                                                                                                                       // 8226\nfunction _writeInt16 (buf, value, offset, littleEndian, noAssert) {                                                    // 8227\n  if (!noAssert) {                                                                                                     // 8228\n    assert(value !== undefined && value !== null, 'missing value')                                                     // 8229\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8230\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8231\n    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')                                            // 8232\n    verifsint(value, 0x7fff, -0x8000)                                                                                  // 8233\n  }                                                                                                                    // 8234\n                                                                                                                       // 8235\n  var len = buf.length                                                                                                 // 8236\n  if (offset >= len)                                                                                                   // 8237\n    return                                                                                                             // 8238\n                                                                                                                       // 8239\n  if (value >= 0)                                                                                                      // 8240\n    _writeUInt16(buf, value, offset, littleEndian, noAssert)                                                           // 8241\n  else                                                                                                                 // 8242\n    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)                                              // 8243\n}                                                                                                                      // 8244\n                                                                                                                       // 8245\nBuffer.prototype.writeInt16LE = function (value, offset, noAssert) {                                                   // 8246\n  _writeInt16(this, value, offset, true, noAssert)                                                                     // 8247\n}                                                                                                                      // 8248\n                                                                                                                       // 8249\nBuffer.prototype.writeInt16BE = function (value, offset, noAssert) {                                                   // 8250\n  _writeInt16(this, value, offset, false, noAssert)                                                                    // 8251\n}                                                                                                                      // 8252\n                                                                                                                       // 8253\nfunction _writeInt32 (buf, value, offset, littleEndian, noAssert) {                                                    // 8254\n  if (!noAssert) {                                                                                                     // 8255\n    assert(value !== undefined && value !== null, 'missing value')                                                     // 8256\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8257\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8258\n    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')                                            // 8259\n    verifsint(value, 0x7fffffff, -0x80000000)                                                                          // 8260\n  }                                                                                                                    // 8261\n                                                                                                                       // 8262\n  var len = buf.length                                                                                                 // 8263\n  if (offset >= len)                                                                                                   // 8264\n    return                                                                                                             // 8265\n                                                                                                                       // 8266\n  if (value >= 0)                                                                                                      // 8267\n    _writeUInt32(buf, value, offset, littleEndian, noAssert)                                                           // 8268\n  else                                                                                                                 // 8269\n    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)                                          // 8270\n}                                                                                                                      // 8271\n                                                                                                                       // 8272\nBuffer.prototype.writeInt32LE = function (value, offset, noAssert) {                                                   // 8273\n  _writeInt32(this, value, offset, true, noAssert)                                                                     // 8274\n}                                                                                                                      // 8275\n                                                                                                                       // 8276\nBuffer.prototype.writeInt32BE = function (value, offset, noAssert) {                                                   // 8277\n  _writeInt32(this, value, offset, false, noAssert)                                                                    // 8278\n}                                                                                                                      // 8279\n                                                                                                                       // 8280\nfunction _writeFloat (buf, value, offset, littleEndian, noAssert) {                                                    // 8281\n  if (!noAssert) {                                                                                                     // 8282\n    assert(value !== undefined && value !== null, 'missing value')                                                     // 8283\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8284\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8285\n    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')                                            // 8286\n    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)                                               // 8287\n  }                                                                                                                    // 8288\n                                                                                                                       // 8289\n  var len = buf.length                                                                                                 // 8290\n  if (offset >= len)                                                                                                   // 8291\n    return                                                                                                             // 8292\n                                                                                                                       // 8293\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 8294\n}                                                                                                                      // 8295\n                                                                                                                       // 8296\nBuffer.prototype.writeFloatLE = function (value, offset, noAssert) {                                                   // 8297\n  _writeFloat(this, value, offset, true, noAssert)                                                                     // 8298\n}                                                                                                                      // 8299\n                                                                                                                       // 8300\nBuffer.prototype.writeFloatBE = function (value, offset, noAssert) {                                                   // 8301\n  _writeFloat(this, value, offset, false, noAssert)                                                                    // 8302\n}                                                                                                                      // 8303\n                                                                                                                       // 8304\nfunction _writeDouble (buf, value, offset, littleEndian, noAssert) {                                                   // 8305\n  if (!noAssert) {                                                                                                     // 8306\n    assert(value !== undefined && value !== null, 'missing value')                                                     // 8307\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8308\n    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8309\n    assert(offset + 7 < buf.length,                                                                                    // 8310\n        'Trying to write beyond buffer length')                                                                        // 8311\n    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)                                             // 8312\n  }                                                                                                                    // 8313\n                                                                                                                       // 8314\n  var len = buf.length                                                                                                 // 8315\n  if (offset >= len)                                                                                                   // 8316\n    return                                                                                                             // 8317\n                                                                                                                       // 8318\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 8319\n}                                                                                                                      // 8320\n                                                                                                                       // 8321\nBuffer.prototype.writeDoubleLE = function (value, offset, noAssert) {                                                  // 8322\n  _writeDouble(this, value, offset, true, noAssert)                                                                    // 8323\n}                                                                                                                      // 8324\n                                                                                                                       // 8325\nBuffer.prototype.writeDoubleBE = function (value, offset, noAssert) {                                                  // 8326\n  _writeDouble(this, value, offset, false, noAssert)                                                                   // 8327\n}                                                                                                                      // 8328\n                                                                                                                       // 8329\nBuffer.prototype.fill = function (value, start, end) {                                                                 // 8330\n  if (!value) value = 0                                                                                                // 8331\n  if (!start) start = 0                                                                                                // 8332\n  if (!end) end = this.length                                                                                          // 8333\n                                                                                                                       // 8334\n  if (typeof value === 'string') {                                                                                     // 8335\n    value = value.charCodeAt(0)                                                                                        // 8336\n  }                                                                                                                    // 8337\n                                                                                                                       // 8338\n  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')                                          // 8339\n  assert(end >= start, 'end < start')                                                                                  // 8340\n                                                                                                                       // 8341\n  if (end === start) return                                                                                            // 8342\n  if (this.length === 0) return                                                                                        // 8343\n                                                                                                                       // 8344\n  assert(start >= 0 && start < this.length, 'start out of bounds')                                                     // 8345\n  assert(end >= 0 && end <= this.length, 'end out of bounds')                                                          // 8346\n                                                                                                                       // 8347\n  for (var i = start; i < end; i++) {                                                                                  // 8348\n    this[i] = value                                                                                                    // 8349\n  }                                                                                                                    // 8350\n}                                                                                                                      // 8351\n                                                                                                                       // 8352\nBuffer.prototype.inspect = function () {                                                                               // 8353\n  var out = []                                                                                                         // 8354\n  var len = this.length                                                                                                // 8355\n  for (var i = 0; i < len; i++) {                                                                                      // 8356\n    out[i] = toHex(this[i])                                                                                            // 8357\n    if (i === exports.INSPECT_MAX_BYTES) {                                                                             // 8358\n      out[i + 1] = '...'                                                                                               // 8359\n      break                                                                                                            // 8360\n    }                                                                                                                  // 8361\n  }                                                                                                                    // 8362\n  return '<Buffer ' + out.join(' ') + '>'                                                                              // 8363\n}                                                                                                                      // 8364\n                                                                                                                       // 8365\n                                                                                                                       // 8366\nBuffer.prototype.toArrayBuffer = function () {                                                                         // 8367\n  if (typeof Uint8Array !== 'undefined') {                                                                             // 8368\n    if (Buffer._useTypedArrays) {                                                                                      // 8369\n      return (new Buffer(this)).buffer                                                                                 // 8370\n    } else {                                                                                                           // 8371\n      var buf = new Uint8Array(this.length)                                                                            // 8372\n      for (var i = 0, len = buf.length; i < len; i += 1)                                                               // 8373\n        buf[i] = this[i]                                                                                               // 8374\n      return buf.buffer                                                                                                // 8375\n    }                                                                                                                  // 8376\n  } else {                                                                                                             // 8377\n    throw new Error('Buffer.toArrayBuffer not supported in this browser')                                              // 8378\n  }                                                                                                                    // 8379\n}                                                                                                                      // 8380\n                                                                                                                       // 8381\n                                                                                                                       // 8382\nfunction stringtrim (str) {                                                                                            // 8383\n  if (str.trim) return str.trim()                                                                                      // 8384\n  return str.replace(/^\\s+|\\s+$/g, '')                                                                                 // 8385\n}                                                                                                                      // 8386\n                                                                                                                       // 8387\nvar BP = Buffer.prototype                                                                                              // 8388\n                                                                                                                       // 8389\n                                                                                                                       // 8390\nBuffer._augment = function (arr) {                                                                                     // 8391\n  arr._isBuffer = true                                                                                                 // 8392\n                                                                                                                       // 8393\n  arr._get = arr.get                                                                                                   // 8394\n  arr._set = arr.set                                                                                                   // 8395\n                                                                                                                       // 8396\n  arr.get = BP.get                                                                                                     // 8397\n  arr.set = BP.set                                                                                                     // 8398\n                                                                                                                       // 8399\n  arr.write = BP.write                                                                                                 // 8400\n  arr.toString = BP.toString                                                                                           // 8401\n  arr.toLocaleString = BP.toString                                                                                     // 8402\n  arr.toJSON = BP.toJSON                                                                                               // 8403\n  arr.copy = BP.copy                                                                                                   // 8404\n  arr.slice = BP.slice                                                                                                 // 8405\n  arr.readUInt8 = BP.readUInt8                                                                                         // 8406\n  arr.readUInt16LE = BP.readUInt16LE                                                                                   // 8407\n  arr.readUInt16BE = BP.readUInt16BE                                                                                   // 8408\n  arr.readUInt32LE = BP.readUInt32LE                                                                                   // 8409\n  arr.readUInt32BE = BP.readUInt32BE                                                                                   // 8410\n  arr.readInt8 = BP.readInt8                                                                                           // 8411\n  arr.readInt16LE = BP.readInt16LE                                                                                     // 8412\n  arr.readInt16BE = BP.readInt16BE                                                                                     // 8413\n  arr.readInt32LE = BP.readInt32LE                                                                                     // 8414\n  arr.readInt32BE = BP.readInt32BE                                                                                     // 8415\n  arr.readFloatLE = BP.readFloatLE                                                                                     // 8416\n  arr.readFloatBE = BP.readFloatBE                                                                                     // 8417\n  arr.readDoubleLE = BP.readDoubleLE                                                                                   // 8418\n  arr.readDoubleBE = BP.readDoubleBE                                                                                   // 8419\n  arr.writeUInt8 = BP.writeUInt8                                                                                       // 8420\n  arr.writeUInt16LE = BP.writeUInt16LE                                                                                 // 8421\n  arr.writeUInt16BE = BP.writeUInt16BE                                                                                 // 8422\n  arr.writeUInt32LE = BP.writeUInt32LE                                                                                 // 8423\n  arr.writeUInt32BE = BP.writeUInt32BE                                                                                 // 8424\n  arr.writeInt8 = BP.writeInt8                                                                                         // 8425\n  arr.writeInt16LE = BP.writeInt16LE                                                                                   // 8426\n  arr.writeInt16BE = BP.writeInt16BE                                                                                   // 8427\n  arr.writeInt32LE = BP.writeInt32LE                                                                                   // 8428\n  arr.writeInt32BE = BP.writeInt32BE                                                                                   // 8429\n  arr.writeFloatLE = BP.writeFloatLE                                                                                   // 8430\n  arr.writeFloatBE = BP.writeFloatBE                                                                                   // 8431\n  arr.writeDoubleLE = BP.writeDoubleLE                                                                                 // 8432\n  arr.writeDoubleBE = BP.writeDoubleBE                                                                                 // 8433\n  arr.fill = BP.fill                                                                                                   // 8434\n  arr.inspect = BP.inspect                                                                                             // 8435\n  arr.toArrayBuffer = BP.toArrayBuffer                                                                                 // 8436\n                                                                                                                       // 8437\n  return arr                                                                                                           // 8438\n}                                                                                                                      // 8439\n                                                                                                                       // 8440\nfunction clamp (index, len, defaultValue) {                                                                            // 8441\n  if (typeof index !== 'number') return defaultValue                                                                   // 8442\n  index = ~~index;  // Coerce to integer.                                                                              // 8443\n  if (index >= len) return len                                                                                         // 8444\n  if (index >= 0) return index                                                                                         // 8445\n  index += len                                                                                                         // 8446\n  if (index >= 0) return index                                                                                         // 8447\n  return 0                                                                                                             // 8448\n}                                                                                                                      // 8449\n                                                                                                                       // 8450\nfunction coerce (length) {                                                                                             // 8451\n  length = ~~Math.ceil(+length)                                                                                        // 8452\n  return length < 0 ? 0 : length                                                                                       // 8453\n}                                                                                                                      // 8454\n                                                                                                                       // 8455\nfunction isArray (subject) {                                                                                           // 8456\n  return (Array.isArray || function (subject) {                                                                        // 8457\n    return Object.prototype.toString.call(subject) === '[object Array]'                                                // 8458\n  })(subject)                                                                                                          // 8459\n}                                                                                                                      // 8460\n                                                                                                                       // 8461\nfunction isArrayish (subject) {                                                                                        // 8462\n  return isArray(subject) || Buffer.isBuffer(subject) ||                                                               // 8463\n      subject && typeof subject === 'object' &&                                                                        // 8464\n      typeof subject.length === 'number'                                                                               // 8465\n}                                                                                                                      // 8466\n                                                                                                                       // 8467\nfunction toHex (n) {                                                                                                   // 8468\n  if (n < 16) return '0' + n.toString(16)                                                                              // 8469\n  return n.toString(16)                                                                                                // 8470\n}                                                                                                                      // 8471\n                                                                                                                       // 8472\nfunction utf8ToBytes (str) {                                                                                           // 8473\n  var byteArray = []                                                                                                   // 8474\n  for (var i = 0; i < str.length; i++) {                                                                               // 8475\n    var b = str.charCodeAt(i)                                                                                          // 8476\n    if (b <= 0x7F)                                                                                                     // 8477\n      byteArray.push(str.charCodeAt(i))                                                                                // 8478\n    else {                                                                                                             // 8479\n      var start = i                                                                                                    // 8480\n      if (b >= 0xD800 && b <= 0xDFFF) i++                                                                              // 8481\n      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')                                           // 8482\n      for (var j = 0; j < h.length; j++)                                                                               // 8483\n        byteArray.push(parseInt(h[j], 16))                                                                             // 8484\n    }                                                                                                                  // 8485\n  }                                                                                                                    // 8486\n  return byteArray                                                                                                     // 8487\n}                                                                                                                      // 8488\n                                                                                                                       // 8489\nfunction asciiToBytes (str) {                                                                                          // 8490\n  var byteArray = []                                                                                                   // 8491\n  for (var i = 0; i < str.length; i++) {                                                                               // 8492\n    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 8493\n  }                                                                                                                    // 8494\n  return byteArray                                                                                                     // 8495\n}                                                                                                                      // 8496\n                                                                                                                       // 8497\nfunction utf16leToBytes (str) {                                                                                        // 8498\n  var c, hi, lo                                                                                                        // 8499\n  var byteArray = []                                                                                                   // 8500\n  for (var i = 0; i < str.length; i++) {                                                                               // 8501\n    c = str.charCodeAt(i)                                                                                              // 8502\n    hi = c >> 8                                                                                                        // 8503\n    lo = c % 256                                                                                                       // 8504\n    byteArray.push(lo)                                                                                                 // 8505\n    byteArray.push(hi)                                                                                                 // 8506\n  }                                                                                                                    // 8507\n                                                                                                                       // 8508\n  return byteArray                                                                                                     // 8509\n}                                                                                                                      // 8510\n                                                                                                                       // 8511\nfunction base64ToBytes (str) {                                                                                         // 8512\n  return base64.toByteArray(str)                                                                                       // 8513\n}                                                                                                                      // 8514\n                                                                                                                       // 8515\nfunction blitBuffer (src, dst, offset, length) {                                                                       // 8516\n  var pos                                                                                                              // 8517\n  for (var i = 0; i < length; i++) {                                                                                   // 8518\n    if ((i + offset >= dst.length) || (i >= src.length))                                                               // 8519\n      break                                                                                                            // 8520\n    dst[i + offset] = src[i]                                                                                           // 8521\n  }                                                                                                                    // 8522\n  return i                                                                                                             // 8523\n}                                                                                                                      // 8524\n                                                                                                                       // 8525\nfunction decodeUtf8Char (str) {                                                                                        // 8526\n  try {                                                                                                                // 8527\n    return decodeURIComponent(str)                                                                                     // 8528\n  } catch (err) {                                                                                                      // 8529\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char                                                           // 8530\n  }                                                                                                                    // 8531\n}                                                                                                                      // 8532\n                                                                                                                       // 8533\n                                                                                                                       // 8534\nfunction verifuint (value, max) {                                                                                      // 8535\n  assert(typeof value === 'number', 'cannot write a non-number as a number')                                           // 8536\n  assert(value >= 0, 'specified a negative value for writing an unsigned value')                                       // 8537\n  assert(value <= max, 'value is larger than maximum value for type')                                                  // 8538\n  assert(Math.floor(value) === value, 'value has a fractional component')                                              // 8539\n}                                                                                                                      // 8540\n                                                                                                                       // 8541\nfunction verifsint (value, max, min) {                                                                                 // 8542\n  assert(typeof value === 'number', 'cannot write a non-number as a number')                                           // 8543\n  assert(value <= max, 'value larger than maximum allowed value')                                                      // 8544\n  assert(value >= min, 'value smaller than minimum allowed value')                                                     // 8545\n  assert(Math.floor(value) === value, 'value has a fractional component')                                              // 8546\n}                                                                                                                      // 8547\n                                                                                                                       // 8548\nfunction verifIEEE754 (value, max, min) {                                                                              // 8549\n  assert(typeof value === 'number', 'cannot write a non-number as a number')                                           // 8550\n  assert(value <= max, 'value larger than maximum allowed value')                                                      // 8551\n  assert(value >= min, 'value smaller than minimum allowed value')                                                     // 8552\n}                                                                                                                      // 8553\n                                                                                                                       // 8554\nfunction assert (test, message) {                                                                                      // 8555\n  if (!test) throw new Error(message || 'Failed assertion')                                                            // 8556\n}                                                                                                                      // 8557\n                                                                                                                       // 8558\n},{\"base64-js\":63,\"ieee754\":64}],63:[function(require,module,exports){                                                 // 8559\nvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';                                       // 8560\n                                                                                                                       // 8561\n;(function (exports) {                                                                                                 // 8562\n\t'use strict';                                                                                                         // 8563\n                                                                                                                       // 8564\n  var Arr = (typeof Uint8Array !== 'undefined')                                                                        // 8565\n    ? Uint8Array                                                                                                       // 8566\n    : Array                                                                                                            // 8567\n                                                                                                                       // 8568\n\tvar PLUS   = '+'.charCodeAt(0)                                                                                        // 8569\n\tvar SLASH  = '/'.charCodeAt(0)                                                                                        // 8570\n\tvar NUMBER = '0'.charCodeAt(0)                                                                                        // 8571\n\tvar LOWER  = 'a'.charCodeAt(0)                                                                                        // 8572\n\tvar UPPER  = 'A'.charCodeAt(0)                                                                                        // 8573\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)                                                                                 // 8574\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)                                                                                // 8575\n                                                                                                                       // 8576\n\tfunction decode (elt) {                                                                                               // 8577\n\t\tvar code = elt.charCodeAt(0)                                                                                         // 8578\n\t\tif (code === PLUS ||                                                                                                 // 8579\n\t\t    code === PLUS_URL_SAFE)                                                                                          // 8580\n\t\t\treturn 62 // '+'                                                                                                    // 8581\n\t\tif (code === SLASH ||                                                                                                // 8582\n\t\t    code === SLASH_URL_SAFE)                                                                                         // 8583\n\t\t\treturn 63 // '/'                                                                                                    // 8584\n\t\tif (code < NUMBER)                                                                                                   // 8585\n\t\t\treturn -1 //no match                                                                                                // 8586\n\t\tif (code < NUMBER + 10)                                                                                              // 8587\n\t\t\treturn code - NUMBER + 26 + 26                                                                                      // 8588\n\t\tif (code < UPPER + 26)                                                                                               // 8589\n\t\t\treturn code - UPPER                                                                                                 // 8590\n\t\tif (code < LOWER + 26)                                                                                               // 8591\n\t\t\treturn code - LOWER + 26                                                                                            // 8592\n\t}                                                                                                                     // 8593\n                                                                                                                       // 8594\n\tfunction b64ToByteArray (b64) {                                                                                       // 8595\n\t\tvar i, j, l, tmp, placeHolders, arr                                                                                  // 8596\n                                                                                                                       // 8597\n\t\tif (b64.length % 4 > 0) {                                                                                            // 8598\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')                                                   // 8599\n\t\t}                                                                                                                    // 8600\n                                                                                                                       // 8601\n\t\tvar len = b64.length                                                                                                 // 8602\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0                                 // 8603\n                                                                                                                       // 8604\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)                                                                     // 8605\n                                                                                                                       // 8606\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length                                                                   // 8607\n                                                                                                                       // 8608\n\t\tvar L = 0                                                                                                            // 8609\n                                                                                                                       // 8610\n\t\tfunction push (v) {                                                                                                  // 8611\n\t\t\tarr[L++] = v                                                                                                        // 8612\n\t\t}                                                                                                                    // 8613\n                                                                                                                       // 8614\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 8615\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)                                                                                        // 8617\n\t\t\tpush((tmp & 0xFF00) >> 8)                                                                                           // 8618\n\t\t\tpush(tmp & 0xFF)                                                                                                    // 8619\n\t\t}                                                                                                                    // 8620\n                                                                                                                       // 8621\n\t\tif (placeHolders === 2) {                                                                                            // 8622\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)                                               // 8623\n\t\t\tpush(tmp & 0xFF)                                                                                                    // 8624\n\t\t} else if (placeHolders === 1) {                                                                                     // 8625\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)           // 8626\n\t\t\tpush((tmp >> 8) & 0xFF)                                                                                             // 8627\n\t\t\tpush(tmp & 0xFF)                                                                                                    // 8628\n\t\t}                                                                                                                    // 8629\n                                                                                                                       // 8630\n\t\treturn arr                                                                                                           // 8631\n\t}                                                                                                                     // 8632\n                                                                                                                       // 8633\n\tfunction uint8ToBase64 (uint8) {                                                                                      // 8634\n\t\tvar i,                                                                                                               // 8635\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes                                               // 8636\n\t\t\toutput = \"\",                                                                                                        // 8637\n\t\t\ttemp, length                                                                                                        // 8638\n                                                                                                                       // 8639\n\t\tfunction encode (num) {                                                                                              // 8640\n\t\t\treturn lookup.charAt(num)                                                                                           // 8641\n\t\t}                                                                                                                    // 8642\n                                                                                                                       // 8643\n\t\tfunction tripletToBase64 (num) {                                                                                     // 8644\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)           // 8645\n\t\t}                                                                                                                    // 8646\n                                                                                                                       // 8647\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {                                                // 8648\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 8649\n\t\t\toutput += tripletToBase64(temp)                                                                                     // 8650\n\t\t}                                                                                                                    // 8651\n                                                                                                                       // 8652\n\t\tswitch (extraBytes) {                                                                                                // 8653\n\t\t\tcase 1:                                                                                                             // 8654\n\t\t\t\ttemp = uint8[uint8.length - 1]                                                                                     // 8655\n\t\t\t\toutput += encode(temp >> 2)                                                                                        // 8656\n\t\t\t\toutput += encode((temp << 4) & 0x3F)                                                                               // 8657\n\t\t\t\toutput += '=='                                                                                                     // 8658\n\t\t\t\tbreak                                                                                                              // 8659\n\t\t\tcase 2:                                                                                                             // 8660\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])                                                  // 8661\n\t\t\t\toutput += encode(temp >> 10)                                                                                       // 8662\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)                                                                               // 8663\n\t\t\t\toutput += encode((temp << 2) & 0x3F)                                                                               // 8664\n\t\t\t\toutput += '='                                                                                                      // 8665\n\t\t\t\tbreak                                                                                                              // 8666\n\t\t}                                                                                                                    // 8667\n                                                                                                                       // 8668\n\t\treturn output                                                                                                        // 8669\n\t}                                                                                                                     // 8670\n                                                                                                                       // 8671\n\texports.toByteArray = b64ToByteArray                                                                                  // 8672\n\texports.fromByteArray = uint8ToBase64                                                                                 // 8673\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))                                                    // 8674\n                                                                                                                       // 8675\n},{}],64:[function(require,module,exports){                                                                            // 8676\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 8677\n  var e, m                                                                                                             // 8678\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 8679\n  var eMax = (1 << eLen) - 1                                                                                           // 8680\n  var eBias = eMax >> 1                                                                                                // 8681\n  var nBits = -7                                                                                                       // 8682\n  var i = isLE ? (nBytes - 1) : 0                                                                                      // 8683\n  var d = isLE ? -1 : 1                                                                                                // 8684\n  var s = buffer[offset + i]                                                                                           // 8685\n                                                                                                                       // 8686\n  i += d                                                                                                               // 8687\n                                                                                                                       // 8688\n  e = s & ((1 << (-nBits)) - 1)                                                                                        // 8689\n  s >>= (-nBits)                                                                                                       // 8690\n  nBits += eLen                                                                                                        // 8691\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 8692\n                                                                                                                       // 8693\n  m = e & ((1 << (-nBits)) - 1)                                                                                        // 8694\n  e >>= (-nBits)                                                                                                       // 8695\n  nBits += mLen                                                                                                        // 8696\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 8697\n                                                                                                                       // 8698\n  if (e === 0) {                                                                                                       // 8699\n    e = 1 - eBias                                                                                                      // 8700\n  } else if (e === eMax) {                                                                                             // 8701\n    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 8702\n  } else {                                                                                                             // 8703\n    m = m + Math.pow(2, mLen)                                                                                          // 8704\n    e = e - eBias                                                                                                      // 8705\n  }                                                                                                                    // 8706\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 8707\n}                                                                                                                      // 8708\n                                                                                                                       // 8709\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 8710\n  var e, m, c                                                                                                          // 8711\n  var eLen = nBytes * 8 - mLen - 1                                                                                     // 8712\n  var eMax = (1 << eLen) - 1                                                                                           // 8713\n  var eBias = eMax >> 1                                                                                                // 8714\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 8715\n  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 8716\n  var d = isLE ? 1 : -1                                                                                                // 8717\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 8718\n                                                                                                                       // 8719\n  value = Math.abs(value)                                                                                              // 8720\n                                                                                                                       // 8721\n  if (isNaN(value) || value === Infinity) {                                                                            // 8722\n    m = isNaN(value) ? 1 : 0                                                                                           // 8723\n    e = eMax                                                                                                           // 8724\n  } else {                                                                                                             // 8725\n    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 8726\n    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 8727\n      e--                                                                                                              // 8728\n      c *= 2                                                                                                           // 8729\n    }                                                                                                                  // 8730\n    if (e + eBias >= 1) {                                                                                              // 8731\n      value += rt / c                                                                                                  // 8732\n    } else {                                                                                                           // 8733\n      value += rt * Math.pow(2, 1 - eBias)                                                                             // 8734\n    }                                                                                                                  // 8735\n    if (value * c >= 2) {                                                                                              // 8736\n      e++                                                                                                              // 8737\n      c /= 2                                                                                                           // 8738\n    }                                                                                                                  // 8739\n                                                                                                                       // 8740\n    if (e + eBias >= eMax) {                                                                                           // 8741\n      m = 0                                                                                                            // 8742\n      e = eMax                                                                                                         // 8743\n    } else if (e + eBias >= 1) {                                                                                       // 8744\n      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 8745\n      e = e + eBias                                                                                                    // 8746\n    } else {                                                                                                           // 8747\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 8748\n      e = 0                                                                                                            // 8749\n    }                                                                                                                  // 8750\n  }                                                                                                                    // 8751\n                                                                                                                       // 8752\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 8753\n                                                                                                                       // 8754\n  e = (e << mLen) | m                                                                                                  // 8755\n  eLen += mLen                                                                                                         // 8756\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 8757\n                                                                                                                       // 8758\n  buffer[offset + i - d] |= s * 128                                                                                    // 8759\n}                                                                                                                      // 8760\n                                                                                                                       // 8761\n},{}],65:[function(require,module,exports){                                                                            // 8762\nvar Buffer = require('buffer').Buffer;                                                                                 // 8763\nvar intSize = 4;                                                                                                       // 8764\nvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);                                                              // 8765\nvar chrsz = 8;                                                                                                         // 8766\n                                                                                                                       // 8767\nfunction toArray(buf, bigEndian) {                                                                                     // 8768\n  if ((buf.length % intSize) !== 0) {                                                                                  // 8769\n    var len = buf.length + (intSize - (buf.length % intSize));                                                         // 8770\n    buf = Buffer.concat([buf, zeroBuffer], len);                                                                       // 8771\n  }                                                                                                                    // 8772\n                                                                                                                       // 8773\n  var arr = [];                                                                                                        // 8774\n  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;                                                              // 8775\n  for (var i = 0; i < buf.length; i += intSize) {                                                                      // 8776\n    arr.push(fn.call(buf, i));                                                                                         // 8777\n  }                                                                                                                    // 8778\n  return arr;                                                                                                          // 8779\n}                                                                                                                      // 8780\n                                                                                                                       // 8781\nfunction toBuffer(arr, size, bigEndian) {                                                                              // 8782\n  var buf = new Buffer(size);                                                                                          // 8783\n  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;                                                            // 8784\n  for (var i = 0; i < arr.length; i++) {                                                                               // 8785\n    fn.call(buf, arr[i], i * 4, true);                                                                                 // 8786\n  }                                                                                                                    // 8787\n  return buf;                                                                                                          // 8788\n}                                                                                                                      // 8789\n                                                                                                                       // 8790\nfunction hash(buf, fn, hashSize, bigEndian) {                                                                          // 8791\n  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);                                                                    // 8792\n  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);                                                           // 8793\n  return toBuffer(arr, hashSize, bigEndian);                                                                           // 8794\n}                                                                                                                      // 8795\n                                                                                                                       // 8796\nmodule.exports = { hash: hash };                                                                                       // 8797\n                                                                                                                       // 8798\n},{\"buffer\":62}],66:[function(require,module,exports){                                                                 // 8799\nvar Buffer = require('buffer').Buffer                                                                                  // 8800\nvar sha = require('./sha')                                                                                             // 8801\nvar sha256 = require('./sha256')                                                                                       // 8802\nvar rng = require('./rng')                                                                                             // 8803\nvar md5 = require('./md5')                                                                                             // 8804\n                                                                                                                       // 8805\nvar algorithms = {                                                                                                     // 8806\n  sha1: sha,                                                                                                           // 8807\n  sha256: sha256,                                                                                                      // 8808\n  md5: md5                                                                                                             // 8809\n}                                                                                                                      // 8810\n                                                                                                                       // 8811\nvar blocksize = 64                                                                                                     // 8812\nvar zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)                                                             // 8813\nfunction hmac(fn, key, data) {                                                                                         // 8814\n  if(!Buffer.isBuffer(key)) key = new Buffer(key)                                                                      // 8815\n  if(!Buffer.isBuffer(data)) data = new Buffer(data)                                                                   // 8816\n                                                                                                                       // 8817\n  if(key.length > blocksize) {                                                                                         // 8818\n    key = fn(key)                                                                                                      // 8819\n  } else if(key.length < blocksize) {                                                                                  // 8820\n    key = Buffer.concat([key, zeroBuffer], blocksize)                                                                  // 8821\n  }                                                                                                                    // 8822\n                                                                                                                       // 8823\n  var ipad = new Buffer(blocksize), opad = new Buffer(blocksize)                                                       // 8824\n  for(var i = 0; i < blocksize; i++) {                                                                                 // 8825\n    ipad[i] = key[i] ^ 0x36                                                                                            // 8826\n    opad[i] = key[i] ^ 0x5C                                                                                            // 8827\n  }                                                                                                                    // 8828\n                                                                                                                       // 8829\n  var hash = fn(Buffer.concat([ipad, data]))                                                                           // 8830\n  return fn(Buffer.concat([opad, hash]))                                                                               // 8831\n}                                                                                                                      // 8832\n                                                                                                                       // 8833\nfunction hash(alg, key) {                                                                                              // 8834\n  alg = alg || 'sha1'                                                                                                  // 8835\n  var fn = algorithms[alg]                                                                                             // 8836\n  var bufs = []                                                                                                        // 8837\n  var length = 0                                                                                                       // 8838\n  if(!fn) error('algorithm:', alg, 'is not yet supported')                                                             // 8839\n  return {                                                                                                             // 8840\n    update: function (data) {                                                                                          // 8841\n      if(!Buffer.isBuffer(data)) data = new Buffer(data)                                                               // 8842\n                                                                                                                       // 8843\n      bufs.push(data)                                                                                                  // 8844\n      length += data.length                                                                                            // 8845\n      return this                                                                                                      // 8846\n    },                                                                                                                 // 8847\n    digest: function (enc) {                                                                                           // 8848\n      var buf = Buffer.concat(bufs)                                                                                    // 8849\n      var r = key ? hmac(fn, key, buf) : fn(buf)                                                                       // 8850\n      bufs = null                                                                                                      // 8851\n      return enc ? r.toString(enc) : r                                                                                 // 8852\n    }                                                                                                                  // 8853\n  }                                                                                                                    // 8854\n}                                                                                                                      // 8855\n                                                                                                                       // 8856\nfunction error () {                                                                                                    // 8857\n  var m = [].slice.call(arguments).join(' ')                                                                           // 8858\n  throw new Error([                                                                                                    // 8859\n    m,                                                                                                                 // 8860\n    'we accept pull requests',                                                                                         // 8861\n    'http://github.com/dominictarr/crypto-browserify'                                                                  // 8862\n    ].join('\\n'))                                                                                                      // 8863\n}                                                                                                                      // 8864\n                                                                                                                       // 8865\nexports.createHash = function (alg) { return hash(alg) }                                                               // 8866\nexports.createHmac = function (alg, key) { return hash(alg, key) }                                                     // 8867\nexports.randomBytes = function(size, callback) {                                                                       // 8868\n  if (callback && callback.call) {                                                                                     // 8869\n    try {                                                                                                              // 8870\n      callback.call(this, undefined, new Buffer(rng(size)))                                                            // 8871\n    } catch (err) { callback(err) }                                                                                    // 8872\n  } else {                                                                                                             // 8873\n    return new Buffer(rng(size))                                                                                       // 8874\n  }                                                                                                                    // 8875\n}                                                                                                                      // 8876\n                                                                                                                       // 8877\nfunction each(a, f) {                                                                                                  // 8878\n  for(var i in a)                                                                                                      // 8879\n    f(a[i], i)                                                                                                         // 8880\n}                                                                                                                      // 8881\n                                                                                                                       // 8882\neach(['createCredentials'                                                                                              // 8883\n, 'createCipher'                                                                                                       // 8884\n, 'createCipheriv'                                                                                                     // 8885\n, 'createDecipher'                                                                                                     // 8886\n, 'createDecipheriv'                                                                                                   // 8887\n, 'createSign'                                                                                                         // 8888\n, 'createVerify'                                                                                                       // 8889\n, 'createDiffieHellman'                                                                                                // 8890\n, 'pbkdf2'], function (name) {                                                                                         // 8891\n  exports[name] = function () {                                                                                        // 8892\n    error('sorry,', name, 'is not implemented yet')                                                                    // 8893\n  }                                                                                                                    // 8894\n})                                                                                                                     // 8895\n                                                                                                                       // 8896\n},{\"./md5\":67,\"./rng\":68,\"./sha\":69,\"./sha256\":70,\"buffer\":62}],67:[function(require,module,exports){                  // 8897\n                                                                                                                       // 8898\n                                                                                                                       // 8899\nvar helpers = require('./helpers');                                                                                    // 8900\n                                                                                                                       // 8901\n                                                                                                                       // 8902\nfunction md5_vm_test()                                                                                                 // 8903\n{                                                                                                                      // 8904\n  return hex_md5(\"abc\") == \"900150983cd24fb0d6963f7d28e17f72\";                                                         // 8905\n}                                                                                                                      // 8906\n                                                                                                                       // 8907\n                                                                                                                       // 8908\nfunction core_md5(x, len)                                                                                              // 8909\n{                                                                                                                      // 8910\n                                                                                                                       // 8911\n  x[len >> 5] |= 0x80 << ((len) % 32);                                                                                 // 8912\n  x[(((len + 64) >>> 9) << 4) + 14] = len;                                                                             // 8913\n                                                                                                                       // 8914\n  var a =  1732584193;                                                                                                 // 8915\n  var b = -271733879;                                                                                                  // 8916\n  var c = -1732584194;                                                                                                 // 8917\n  var d =  271733878;                                                                                                  // 8918\n                                                                                                                       // 8919\n  for(var i = 0; i < x.length; i += 16)                                                                                // 8920\n  {                                                                                                                    // 8921\n    var olda = a;                                                                                                      // 8922\n    var oldb = b;                                                                                                      // 8923\n    var oldc = c;                                                                                                      // 8924\n    var oldd = d;                                                                                                      // 8925\n                                                                                                                       // 8926\n    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);                                                                   // 8927\n    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);                                                                   // 8928\n    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);                                                                   // 8929\n    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);                                                                  // 8930\n    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);                                                                   // 8931\n    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);                                                                  // 8932\n    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);                                                                  // 8933\n    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);                                                                    // 8934\n    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);                                                                  // 8935\n    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);                                                                  // 8936\n    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);                                                                       // 8937\n    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);                                                                  // 8938\n    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);                                                                  // 8939\n    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);                                                                    // 8940\n    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);                                                                  // 8941\n    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);                                                                  // 8942\n                                                                                                                       // 8943\n    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);                                                                   // 8944\n    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);                                                                  // 8945\n    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);                                                                   // 8946\n    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);                                                                   // 8947\n    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);                                                                   // 8948\n    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);                                                                    // 8949\n    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);                                                                   // 8950\n    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);                                                                   // 8951\n    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);                                                                   // 8952\n    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);                                                                  // 8953\n    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);                                                                   // 8954\n    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);                                                                  // 8955\n    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);                                                                  // 8956\n    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);                                                                    // 8957\n    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);                                                                  // 8958\n    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);                                                                  // 8959\n                                                                                                                       // 8960\n    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);                                                                      // 8961\n    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);                                                                  // 8962\n    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);                                                                  // 8963\n    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);                                                                    // 8964\n    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);                                                                  // 8965\n    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);                                                                  // 8966\n    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);                                                                   // 8967\n    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);                                                                  // 8968\n    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);                                                                   // 8969\n    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);                                                                   // 8970\n    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);                                                                   // 8971\n    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);                                                                    // 8972\n    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);                                                                   // 8973\n    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);                                                                   // 8974\n    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);                                                                   // 8975\n    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);                                                                   // 8976\n                                                                                                                       // 8977\n    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);                                                                   // 8978\n    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);                                                                  // 8979\n    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);                                                                  // 8980\n    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);                                                                    // 8981\n    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);                                                                  // 8982\n    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);                                                                  // 8983\n    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);                                                                     // 8984\n    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);                                                                  // 8985\n    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);                                                                  // 8986\n    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);                                                                    // 8987\n    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);                                                                  // 8988\n    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);                                                                  // 8989\n    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);                                                                   // 8990\n    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);                                                                  // 8991\n    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);                                                                   // 8992\n    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);                                                                   // 8993\n                                                                                                                       // 8994\n    a = safe_add(a, olda);                                                                                             // 8995\n    b = safe_add(b, oldb);                                                                                             // 8996\n    c = safe_add(c, oldc);                                                                                             // 8997\n    d = safe_add(d, oldd);                                                                                             // 8998\n  }                                                                                                                    // 8999\n  return Array(a, b, c, d);                                                                                            // 9000\n                                                                                                                       // 9001\n}                                                                                                                      // 9002\n                                                                                                                       // 9003\n                                                                                                                       // 9004\nfunction md5_cmn(q, a, b, x, s, t)                                                                                     // 9005\n{                                                                                                                      // 9006\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);                                             // 9007\n}                                                                                                                      // 9008\nfunction md5_ff(a, b, c, d, x, s, t)                                                                                   // 9009\n{                                                                                                                      // 9010\n  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);                                                                 // 9011\n}                                                                                                                      // 9012\nfunction md5_gg(a, b, c, d, x, s, t)                                                                                   // 9013\n{                                                                                                                      // 9014\n  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);                                                                 // 9015\n}                                                                                                                      // 9016\nfunction md5_hh(a, b, c, d, x, s, t)                                                                                   // 9017\n{                                                                                                                      // 9018\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);                                                                            // 9019\n}                                                                                                                      // 9020\nfunction md5_ii(a, b, c, d, x, s, t)                                                                                   // 9021\n{                                                                                                                      // 9022\n  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);                                                                       // 9023\n}                                                                                                                      // 9024\n                                                                                                                       // 9025\n                                                                                                                       // 9026\nfunction safe_add(x, y)                                                                                                // 9027\n{                                                                                                                      // 9028\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                               // 9029\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                                       // 9030\n  return (msw << 16) | (lsw & 0xFFFF);                                                                                 // 9031\n}                                                                                                                      // 9032\n                                                                                                                       // 9033\n                                                                                                                       // 9034\nfunction bit_rol(num, cnt)                                                                                             // 9035\n{                                                                                                                      // 9036\n  return (num << cnt) | (num >>> (32 - cnt));                                                                          // 9037\n}                                                                                                                      // 9038\n                                                                                                                       // 9039\nmodule.exports = function md5(buf) {                                                                                   // 9040\n  return helpers.hash(buf, core_md5, 16);                                                                              // 9041\n};                                                                                                                     // 9042\n                                                                                                                       // 9043\n},{\"./helpers\":65}],68:[function(require,module,exports){                                                              // 9044\n(function() {                                                                                                          // 9045\n  var _global = this;                                                                                                  // 9046\n                                                                                                                       // 9047\n  var mathRNG, whatwgRNG;                                                                                              // 9048\n                                                                                                                       // 9049\n  mathRNG = function(size) {                                                                                           // 9050\n    var bytes = new Array(size);                                                                                       // 9051\n    var r;                                                                                                             // 9052\n                                                                                                                       // 9053\n    for (var i = 0, r; i < size; i++) {                                                                                // 9054\n      if ((i & 0x03) == 0) r = Math.random() * 0x100000000;                                                            // 9055\n      bytes[i] = r >>> ((i & 0x03) << 3) & 0xff;                                                                       // 9056\n    }                                                                                                                  // 9057\n                                                                                                                       // 9058\n    return bytes;                                                                                                      // 9059\n  }                                                                                                                    // 9060\n                                                                                                                       // 9061\n  if (_global.crypto && crypto.getRandomValues) {                                                                      // 9062\n    whatwgRNG = function(size) {                                                                                       // 9063\n      var bytes = new Uint8Array(size);                                                                                // 9064\n      crypto.getRandomValues(bytes);                                                                                   // 9065\n      return bytes;                                                                                                    // 9066\n    }                                                                                                                  // 9067\n  }                                                                                                                    // 9068\n                                                                                                                       // 9069\n  module.exports = whatwgRNG || mathRNG;                                                                               // 9070\n                                                                                                                       // 9071\n}())                                                                                                                   // 9072\n                                                                                                                       // 9073\n},{}],69:[function(require,module,exports){                                                                            // 9074\n                                                                                                                       // 9075\n                                                                                                                       // 9076\nvar helpers = require('./helpers');                                                                                    // 9077\n                                                                                                                       // 9078\n                                                                                                                       // 9079\nfunction core_sha1(x, len)                                                                                             // 9080\n{                                                                                                                      // 9081\n                                                                                                                       // 9082\n  x[len >> 5] |= 0x80 << (24 - len % 32);                                                                              // 9083\n  x[((len + 64 >> 9) << 4) + 15] = len;                                                                                // 9084\n                                                                                                                       // 9085\n  var w = Array(80);                                                                                                   // 9086\n  var a =  1732584193;                                                                                                 // 9087\n  var b = -271733879;                                                                                                  // 9088\n  var c = -1732584194;                                                                                                 // 9089\n  var d =  271733878;                                                                                                  // 9090\n  var e = -1009589776;                                                                                                 // 9091\n                                                                                                                       // 9092\n  for(var i = 0; i < x.length; i += 16)                                                                                // 9093\n  {                                                                                                                    // 9094\n    var olda = a;                                                                                                      // 9095\n    var oldb = b;                                                                                                      // 9096\n    var oldc = c;                                                                                                      // 9097\n    var oldd = d;                                                                                                      // 9098\n    var olde = e;                                                                                                      // 9099\n                                                                                                                       // 9100\n    for(var j = 0; j < 80; j++)                                                                                        // 9101\n    {                                                                                                                  // 9102\n      if(j < 16) w[j] = x[i + j];                                                                                      // 9103\n      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);                                                         // 9104\n      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),                                                       // 9105\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));                                                       // 9106\n      e = d;                                                                                                           // 9107\n      d = c;                                                                                                           // 9108\n      c = rol(b, 30);                                                                                                  // 9109\n      b = a;                                                                                                           // 9110\n      a = t;                                                                                                           // 9111\n    }                                                                                                                  // 9112\n                                                                                                                       // 9113\n    a = safe_add(a, olda);                                                                                             // 9114\n    b = safe_add(b, oldb);                                                                                             // 9115\n    c = safe_add(c, oldc);                                                                                             // 9116\n    d = safe_add(d, oldd);                                                                                             // 9117\n    e = safe_add(e, olde);                                                                                             // 9118\n  }                                                                                                                    // 9119\n  return Array(a, b, c, d, e);                                                                                         // 9120\n                                                                                                                       // 9121\n}                                                                                                                      // 9122\n                                                                                                                       // 9123\n                                                                                                                       // 9124\nfunction sha1_ft(t, b, c, d)                                                                                           // 9125\n{                                                                                                                      // 9126\n  if(t < 20) return (b & c) | ((~b) & d);                                                                              // 9127\n  if(t < 40) return b ^ c ^ d;                                                                                         // 9128\n  if(t < 60) return (b & c) | (b & d) | (c & d);                                                                       // 9129\n  return b ^ c ^ d;                                                                                                    // 9130\n}                                                                                                                      // 9131\n                                                                                                                       // 9132\n                                                                                                                       // 9133\nfunction sha1_kt(t)                                                                                                    // 9134\n{                                                                                                                      // 9135\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :                                                             // 9136\n         (t < 60) ? -1894007588 : -899497514;                                                                          // 9137\n}                                                                                                                      // 9138\n                                                                                                                       // 9139\n                                                                                                                       // 9140\nfunction safe_add(x, y)                                                                                                // 9141\n{                                                                                                                      // 9142\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                               // 9143\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                                       // 9144\n  return (msw << 16) | (lsw & 0xFFFF);                                                                                 // 9145\n}                                                                                                                      // 9146\n                                                                                                                       // 9147\n                                                                                                                       // 9148\nfunction rol(num, cnt)                                                                                                 // 9149\n{                                                                                                                      // 9150\n  return (num << cnt) | (num >>> (32 - cnt));                                                                          // 9151\n}                                                                                                                      // 9152\n                                                                                                                       // 9153\nmodule.exports = function sha1(buf) {                                                                                  // 9154\n  return helpers.hash(buf, core_sha1, 20, true);                                                                       // 9155\n};                                                                                                                     // 9156\n                                                                                                                       // 9157\n},{\"./helpers\":65}],70:[function(require,module,exports){                                                              // 9158\n                                                                                                                       // 9159\n                                                                                                                       // 9160\n                                                                                                                       // 9161\nvar helpers = require('./helpers');                                                                                    // 9162\n                                                                                                                       // 9163\nvar safe_add = function(x, y) {                                                                                        // 9164\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                               // 9165\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                                       // 9166\n  return (msw << 16) | (lsw & 0xFFFF);                                                                                 // 9167\n};                                                                                                                     // 9168\n                                                                                                                       // 9169\nvar S = function(X, n) {                                                                                               // 9170\n  return (X >>> n) | (X << (32 - n));                                                                                  // 9171\n};                                                                                                                     // 9172\n                                                                                                                       // 9173\nvar R = function(X, n) {                                                                                               // 9174\n  return (X >>> n);                                                                                                    // 9175\n};                                                                                                                     // 9176\n                                                                                                                       // 9177\nvar Ch = function(x, y, z) {                                                                                           // 9178\n  return ((x & y) ^ ((~x) & z));                                                                                       // 9179\n};                                                                                                                     // 9180\n                                                                                                                       // 9181\nvar Maj = function(x, y, z) {                                                                                          // 9182\n  return ((x & y) ^ (x & z) ^ (y & z));                                                                                // 9183\n};                                                                                                                     // 9184\n                                                                                                                       // 9185\nvar Sigma0256 = function(x) {                                                                                          // 9186\n  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));                                                                              // 9187\n};                                                                                                                     // 9188\n                                                                                                                       // 9189\nvar Sigma1256 = function(x) {                                                                                          // 9190\n  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));                                                                              // 9191\n};                                                                                                                     // 9192\n                                                                                                                       // 9193\nvar Gamma0256 = function(x) {                                                                                          // 9194\n  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));                                                                               // 9195\n};                                                                                                                     // 9196\n                                                                                                                       // 9197\nvar Gamma1256 = function(x) {                                                                                          // 9198\n  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));                                                                             // 9199\n};                                                                                                                     // 9200\n                                                                                                                       // 9201\nvar core_sha256 = function(m, l) {                                                                                     // 9202\n  var K = new Array(0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0xFC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x6CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2);\n  var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);\n    var W = new Array(64);                                                                                             // 9205\n    var a, b, c, d, e, f, g, h, i, j;                                                                                  // 9206\n    var T1, T2;                                                                                                        // 9207\n                                                                                                                       // 9208\n  m[l >> 5] |= 0x80 << (24 - l % 32);                                                                                  // 9209\n  m[((l + 64 >> 9) << 4) + 15] = l;                                                                                    // 9210\n  for (var i = 0; i < m.length; i += 16) {                                                                             // 9211\n    a = HASH[0]; b = HASH[1]; c = HASH[2]; d = HASH[3]; e = HASH[4]; f = HASH[5]; g = HASH[6]; h = HASH[7];            // 9212\n    for (var j = 0; j < 64; j++) {                                                                                     // 9213\n      if (j < 16) {                                                                                                    // 9214\n        W[j] = m[j + i];                                                                                               // 9215\n      } else {                                                                                                         // 9216\n        W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);           // 9217\n      }                                                                                                                // 9218\n      T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);                           // 9219\n      T2 = safe_add(Sigma0256(a), Maj(a, b, c));                                                                       // 9220\n      h = g; g = f; f = e; e = safe_add(d, T1); d = c; c = b; b = a; a = safe_add(T1, T2);                             // 9221\n    }                                                                                                                  // 9222\n    HASH[0] = safe_add(a, HASH[0]); HASH[1] = safe_add(b, HASH[1]); HASH[2] = safe_add(c, HASH[2]); HASH[3] = safe_add(d, HASH[3]);\n    HASH[4] = safe_add(e, HASH[4]); HASH[5] = safe_add(f, HASH[5]); HASH[6] = safe_add(g, HASH[6]); HASH[7] = safe_add(h, HASH[7]);\n  }                                                                                                                    // 9225\n  return HASH;                                                                                                         // 9226\n};                                                                                                                     // 9227\n                                                                                                                       // 9228\nmodule.exports = function sha256(buf) {                                                                                // 9229\n  return helpers.hash(buf, core_sha256, 32, true);                                                                     // 9230\n};                                                                                                                     // 9231\n                                                                                                                       // 9232\n},{\"./helpers\":65}],71:[function(require,module,exports){                                                              // 9233\n                                                                                                                       // 9234\nfunction EventEmitter() {                                                                                              // 9235\n  this._events = this._events || {};                                                                                   // 9236\n  this._maxListeners = this._maxListeners || undefined;                                                                // 9237\n}                                                                                                                      // 9238\nmodule.exports = EventEmitter;                                                                                         // 9239\n                                                                                                                       // 9240\nEventEmitter.EventEmitter = EventEmitter;                                                                              // 9241\n                                                                                                                       // 9242\nEventEmitter.prototype._events = undefined;                                                                            // 9243\nEventEmitter.prototype._maxListeners = undefined;                                                                      // 9244\n                                                                                                                       // 9245\nEventEmitter.defaultMaxListeners = 10;                                                                                 // 9246\n                                                                                                                       // 9247\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 9248\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 9249\n    throw TypeError('n must be a positive number');                                                                    // 9250\n  this._maxListeners = n;                                                                                              // 9251\n  return this;                                                                                                         // 9252\n};                                                                                                                     // 9253\n                                                                                                                       // 9254\nEventEmitter.prototype.emit = function(type) {                                                                         // 9255\n  var er, handler, len, args, i, listeners;                                                                            // 9256\n                                                                                                                       // 9257\n  if (!this._events)                                                                                                   // 9258\n    this._events = {};                                                                                                 // 9259\n                                                                                                                       // 9260\n  if (type === 'error') {                                                                                              // 9261\n    if (!this._events.error ||                                                                                         // 9262\n        (isObject(this._events.error) && !this._events.error.length)) {                                                // 9263\n      er = arguments[1];                                                                                               // 9264\n      if (er instanceof Error) {                                                                                       // 9265\n        throw er; // Unhandled 'error' event                                                                           // 9266\n      }                                                                                                                // 9267\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                                         // 9268\n    }                                                                                                                  // 9269\n  }                                                                                                                    // 9270\n                                                                                                                       // 9271\n  handler = this._events[type];                                                                                        // 9272\n                                                                                                                       // 9273\n  if (isUndefined(handler))                                                                                            // 9274\n    return false;                                                                                                      // 9275\n                                                                                                                       // 9276\n  if (isFunction(handler)) {                                                                                           // 9277\n    switch (arguments.length) {                                                                                        // 9278\n      case 1:                                                                                                          // 9279\n        handler.call(this);                                                                                            // 9280\n        break;                                                                                                         // 9281\n      case 2:                                                                                                          // 9282\n        handler.call(this, arguments[1]);                                                                              // 9283\n        break;                                                                                                         // 9284\n      case 3:                                                                                                          // 9285\n        handler.call(this, arguments[1], arguments[2]);                                                                // 9286\n        break;                                                                                                         // 9287\n      default:                                                                                                         // 9288\n        len = arguments.length;                                                                                        // 9289\n        args = new Array(len - 1);                                                                                     // 9290\n        for (i = 1; i < len; i++)                                                                                      // 9291\n          args[i - 1] = arguments[i];                                                                                  // 9292\n        handler.apply(this, args);                                                                                     // 9293\n    }                                                                                                                  // 9294\n  } else if (isObject(handler)) {                                                                                      // 9295\n    len = arguments.length;                                                                                            // 9296\n    args = new Array(len - 1);                                                                                         // 9297\n    for (i = 1; i < len; i++)                                                                                          // 9298\n      args[i - 1] = arguments[i];                                                                                      // 9299\n                                                                                                                       // 9300\n    listeners = handler.slice();                                                                                       // 9301\n    len = listeners.length;                                                                                            // 9302\n    for (i = 0; i < len; i++)                                                                                          // 9303\n      listeners[i].apply(this, args);                                                                                  // 9304\n  }                                                                                                                    // 9305\n                                                                                                                       // 9306\n  return true;                                                                                                         // 9307\n};                                                                                                                     // 9308\n                                                                                                                       // 9309\nEventEmitter.prototype.addListener = function(type, listener) {                                                        // 9310\n  var m;                                                                                                               // 9311\n                                                                                                                       // 9312\n  if (!isFunction(listener))                                                                                           // 9313\n    throw TypeError('listener must be a function');                                                                    // 9314\n                                                                                                                       // 9315\n  if (!this._events)                                                                                                   // 9316\n    this._events = {};                                                                                                 // 9317\n                                                                                                                       // 9318\n  if (this._events.newListener)                                                                                        // 9319\n    this.emit('newListener', type,                                                                                     // 9320\n              isFunction(listener.listener) ?                                                                          // 9321\n              listener.listener : listener);                                                                           // 9322\n                                                                                                                       // 9323\n  if (!this._events[type])                                                                                             // 9324\n    this._events[type] = listener;                                                                                     // 9325\n  else if (isObject(this._events[type]))                                                                               // 9326\n    this._events[type].push(listener);                                                                                 // 9327\n  else                                                                                                                 // 9328\n    this._events[type] = [this._events[type], listener];                                                               // 9329\n                                                                                                                       // 9330\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 9331\n    var m;                                                                                                             // 9332\n    if (!isUndefined(this._maxListeners)) {                                                                            // 9333\n      m = this._maxListeners;                                                                                          // 9334\n    } else {                                                                                                           // 9335\n      m = EventEmitter.defaultMaxListeners;                                                                            // 9336\n    }                                                                                                                  // 9337\n                                                                                                                       // 9338\n    if (m && m > 0 && this._events[type].length > m) {                                                                 // 9339\n      this._events[type].warned = true;                                                                                // 9340\n      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 9341\n                    'leak detected. %d listeners added. ' +                                                            // 9342\n                    'Use emitter.setMaxListeners() to increase limit.',                                                // 9343\n                    this._events[type].length);                                                                        // 9344\n      if (typeof console.trace === 'function') {                                                                       // 9345\n        console.trace();                                                                                               // 9346\n      }                                                                                                                // 9347\n    }                                                                                                                  // 9348\n  }                                                                                                                    // 9349\n                                                                                                                       // 9350\n  return this;                                                                                                         // 9351\n};                                                                                                                     // 9352\n                                                                                                                       // 9353\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 9354\n                                                                                                                       // 9355\nEventEmitter.prototype.once = function(type, listener) {                                                               // 9356\n  if (!isFunction(listener))                                                                                           // 9357\n    throw TypeError('listener must be a function');                                                                    // 9358\n                                                                                                                       // 9359\n  var fired = false;                                                                                                   // 9360\n                                                                                                                       // 9361\n  function g() {                                                                                                       // 9362\n    this.removeListener(type, g);                                                                                      // 9363\n                                                                                                                       // 9364\n    if (!fired) {                                                                                                      // 9365\n      fired = true;                                                                                                    // 9366\n      listener.apply(this, arguments);                                                                                 // 9367\n    }                                                                                                                  // 9368\n  }                                                                                                                    // 9369\n                                                                                                                       // 9370\n  g.listener = listener;                                                                                               // 9371\n  this.on(type, g);                                                                                                    // 9372\n                                                                                                                       // 9373\n  return this;                                                                                                         // 9374\n};                                                                                                                     // 9375\n                                                                                                                       // 9376\nEventEmitter.prototype.removeListener = function(type, listener) {                                                     // 9377\n  var list, position, length, i;                                                                                       // 9378\n                                                                                                                       // 9379\n  if (!isFunction(listener))                                                                                           // 9380\n    throw TypeError('listener must be a function');                                                                    // 9381\n                                                                                                                       // 9382\n  if (!this._events || !this._events[type])                                                                            // 9383\n    return this;                                                                                                       // 9384\n                                                                                                                       // 9385\n  list = this._events[type];                                                                                           // 9386\n  length = list.length;                                                                                                // 9387\n  position = -1;                                                                                                       // 9388\n                                                                                                                       // 9389\n  if (list === listener ||                                                                                             // 9390\n      (isFunction(list.listener) && list.listener === listener)) {                                                     // 9391\n    delete this._events[type];                                                                                         // 9392\n    if (this._events.removeListener)                                                                                   // 9393\n      this.emit('removeListener', type, listener);                                                                     // 9394\n                                                                                                                       // 9395\n  } else if (isObject(list)) {                                                                                         // 9396\n    for (i = length; i-- > 0;) {                                                                                       // 9397\n      if (list[i] === listener ||                                                                                      // 9398\n          (list[i].listener && list[i].listener === listener)) {                                                       // 9399\n        position = i;                                                                                                  // 9400\n        break;                                                                                                         // 9401\n      }                                                                                                                // 9402\n    }                                                                                                                  // 9403\n                                                                                                                       // 9404\n    if (position < 0)                                                                                                  // 9405\n      return this;                                                                                                     // 9406\n                                                                                                                       // 9407\n    if (list.length === 1) {                                                                                           // 9408\n      list.length = 0;                                                                                                 // 9409\n      delete this._events[type];                                                                                       // 9410\n    } else {                                                                                                           // 9411\n      list.splice(position, 1);                                                                                        // 9412\n    }                                                                                                                  // 9413\n                                                                                                                       // 9414\n    if (this._events.removeListener)                                                                                   // 9415\n      this.emit('removeListener', type, listener);                                                                     // 9416\n  }                                                                                                                    // 9417\n                                                                                                                       // 9418\n  return this;                                                                                                         // 9419\n};                                                                                                                     // 9420\n                                                                                                                       // 9421\nEventEmitter.prototype.removeAllListeners = function(type) {                                                           // 9422\n  var key, listeners;                                                                                                  // 9423\n                                                                                                                       // 9424\n  if (!this._events)                                                                                                   // 9425\n    return this;                                                                                                       // 9426\n                                                                                                                       // 9427\n  if (!this._events.removeListener) {                                                                                  // 9428\n    if (arguments.length === 0)                                                                                        // 9429\n      this._events = {};                                                                                               // 9430\n    else if (this._events[type])                                                                                       // 9431\n      delete this._events[type];                                                                                       // 9432\n    return this;                                                                                                       // 9433\n  }                                                                                                                    // 9434\n                                                                                                                       // 9435\n  if (arguments.length === 0) {                                                                                        // 9436\n    for (key in this._events) {                                                                                        // 9437\n      if (key === 'removeListener') continue;                                                                          // 9438\n      this.removeAllListeners(key);                                                                                    // 9439\n    }                                                                                                                  // 9440\n    this.removeAllListeners('removeListener');                                                                         // 9441\n    this._events = {};                                                                                                 // 9442\n    return this;                                                                                                       // 9443\n  }                                                                                                                    // 9444\n                                                                                                                       // 9445\n  listeners = this._events[type];                                                                                      // 9446\n                                                                                                                       // 9447\n  if (isFunction(listeners)) {                                                                                         // 9448\n    this.removeListener(type, listeners);                                                                              // 9449\n  } else {                                                                                                             // 9450\n    while (listeners.length)                                                                                           // 9451\n      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 9452\n  }                                                                                                                    // 9453\n  delete this._events[type];                                                                                           // 9454\n                                                                                                                       // 9455\n  return this;                                                                                                         // 9456\n};                                                                                                                     // 9457\n                                                                                                                       // 9458\nEventEmitter.prototype.listeners = function(type) {                                                                    // 9459\n  var ret;                                                                                                             // 9460\n  if (!this._events || !this._events[type])                                                                            // 9461\n    ret = [];                                                                                                          // 9462\n  else if (isFunction(this._events[type]))                                                                             // 9463\n    ret = [this._events[type]];                                                                                        // 9464\n  else                                                                                                                 // 9465\n    ret = this._events[type].slice();                                                                                  // 9466\n  return ret;                                                                                                          // 9467\n};                                                                                                                     // 9468\n                                                                                                                       // 9469\nEventEmitter.listenerCount = function(emitter, type) {                                                                 // 9470\n  var ret;                                                                                                             // 9471\n  if (!emitter._events || !emitter._events[type])                                                                      // 9472\n    ret = 0;                                                                                                           // 9473\n  else if (isFunction(emitter._events[type]))                                                                          // 9474\n    ret = 1;                                                                                                           // 9475\n  else                                                                                                                 // 9476\n    ret = emitter._events[type].length;                                                                                // 9477\n  return ret;                                                                                                          // 9478\n};                                                                                                                     // 9479\n                                                                                                                       // 9480\nfunction isFunction(arg) {                                                                                             // 9481\n  return typeof arg === 'function';                                                                                    // 9482\n}                                                                                                                      // 9483\n                                                                                                                       // 9484\nfunction isNumber(arg) {                                                                                               // 9485\n  return typeof arg === 'number';                                                                                      // 9486\n}                                                                                                                      // 9487\n                                                                                                                       // 9488\nfunction isObject(arg) {                                                                                               // 9489\n  return typeof arg === 'object' && arg !== null;                                                                      // 9490\n}                                                                                                                      // 9491\n                                                                                                                       // 9492\nfunction isUndefined(arg) {                                                                                            // 9493\n  return arg === void 0;                                                                                               // 9494\n}                                                                                                                      // 9495\n                                                                                                                       // 9496\n},{}],72:[function(require,module,exports){                                                                            // 9497\nif (typeof Object.create === 'function') {                                                                             // 9498\n  module.exports = function inherits(ctor, superCtor) {                                                                // 9499\n    ctor.super_ = superCtor                                                                                            // 9500\n    ctor.prototype = Object.create(superCtor.prototype, {                                                              // 9501\n      constructor: {                                                                                                   // 9502\n        value: ctor,                                                                                                   // 9503\n        enumerable: false,                                                                                             // 9504\n        writable: true,                                                                                                // 9505\n        configurable: true                                                                                             // 9506\n      }                                                                                                                // 9507\n    });                                                                                                                // 9508\n  };                                                                                                                   // 9509\n} else {                                                                                                               // 9510\n  module.exports = function inherits(ctor, superCtor) {                                                                // 9511\n    ctor.super_ = superCtor                                                                                            // 9512\n    var TempCtor = function () {}                                                                                      // 9513\n    TempCtor.prototype = superCtor.prototype                                                                           // 9514\n    ctor.prototype = new TempCtor()                                                                                    // 9515\n    ctor.prototype.constructor = ctor                                                                                  // 9516\n  }                                                                                                                    // 9517\n}                                                                                                                      // 9518\n                                                                                                                       // 9519\n},{}],73:[function(require,module,exports){                                                                            // 9520\n                                                                                                                       // 9521\nvar process = module.exports = {};                                                                                     // 9522\n                                                                                                                       // 9523\nprocess.nextTick = (function () {                                                                                      // 9524\n    var canSetImmediate = typeof window !== 'undefined'                                                                // 9525\n    && window.setImmediate;                                                                                            // 9526\n    var canPost = typeof window !== 'undefined'                                                                        // 9527\n    && window.postMessage && window.addEventListener                                                                   // 9528\n    ;                                                                                                                  // 9529\n                                                                                                                       // 9530\n    if (canSetImmediate) {                                                                                             // 9531\n        return function (f) { return window.setImmediate(f) };                                                         // 9532\n    }                                                                                                                  // 9533\n                                                                                                                       // 9534\n    if (canPost) {                                                                                                     // 9535\n        var queue = [];                                                                                                // 9536\n        window.addEventListener('message', function (ev) {                                                             // 9537\n            var source = ev.source;                                                                                    // 9538\n            if ((source === window || source === null) && ev.data === 'process-tick') {                                // 9539\n                ev.stopPropagation();                                                                                  // 9540\n                if (queue.length > 0) {                                                                                // 9541\n                    var fn = queue.shift();                                                                            // 9542\n                    fn();                                                                                              // 9543\n                }                                                                                                      // 9544\n            }                                                                                                          // 9545\n        }, true);                                                                                                      // 9546\n                                                                                                                       // 9547\n        return function nextTick(fn) {                                                                                 // 9548\n            queue.push(fn);                                                                                            // 9549\n            window.postMessage('process-tick', '*');                                                                   // 9550\n        };                                                                                                             // 9551\n    }                                                                                                                  // 9552\n                                                                                                                       // 9553\n    return function nextTick(fn) {                                                                                     // 9554\n        setTimeout(fn, 0);                                                                                             // 9555\n    };                                                                                                                 // 9556\n})();                                                                                                                  // 9557\n                                                                                                                       // 9558\nprocess.title = 'browser';                                                                                             // 9559\nprocess.browser = true;                                                                                                // 9560\nprocess.env = {};                                                                                                      // 9561\nprocess.argv = [];                                                                                                     // 9562\n                                                                                                                       // 9563\nfunction noop() {}                                                                                                     // 9564\n                                                                                                                       // 9565\nprocess.on = noop;                                                                                                     // 9566\nprocess.addListener = noop;                                                                                            // 9567\nprocess.once = noop;                                                                                                   // 9568\nprocess.off = noop;                                                                                                    // 9569\nprocess.removeListener = noop;                                                                                         // 9570\nprocess.removeAllListeners = noop;                                                                                     // 9571\nprocess.emit = noop;                                                                                                   // 9572\n                                                                                                                       // 9573\nprocess.binding = function (name) {                                                                                    // 9574\n    throw new Error('process.binding is not supported');                                                               // 9575\n}                                                                                                                      // 9576\n                                                                                                                       // 9577\nprocess.cwd = function () { return '/' };                                                                              // 9578\nprocess.chdir = function (dir) {                                                                                       // 9579\n    throw new Error('process.chdir is not supported');                                                                 // 9580\n};                                                                                                                     // 9581\n                                                                                                                       // 9582\n},{}],74:[function(require,module,exports){                                                                            // 9583\n(function (global){                                                                                                    // 9584\n                                                                                                                       // 9585\n;(function(root) {                                                                                                     // 9586\n                                                                                                                       // 9587\n                                                                                                                       // 9588\n\tvar freeExports = typeof exports == 'object' && exports;                                                              // 9589\n\tvar freeModule = typeof module == 'object' && module &&                                                               // 9590\n\t\tmodule.exports == freeExports && module;                                                                             // 9591\n\tvar freeGlobal = typeof global == 'object' && global;                                                                 // 9592\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {                                           // 9593\n\t\troot = freeGlobal;                                                                                                   // 9594\n\t}                                                                                                                     // 9595\n                                                                                                                       // 9596\n                                                                                                                       // 9597\n\tvar punycode,                                                                                                         // 9598\n                                                                                                                       // 9599\n                                                                                                                       // 9600\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1                                                                     // 9601\n                                                                                                                       // 9602\n                                                                                                                       // 9603\n\tbase = 36,                                                                                                            // 9604\n\ttMin = 1,                                                                                                             // 9605\n\ttMax = 26,                                                                                                            // 9606\n\tskew = 38,                                                                                                            // 9607\n\tdamp = 700,                                                                                                           // 9608\n\tinitialBias = 72,                                                                                                     // 9609\n\tinitialN = 128, // 0x80                                                                                               // 9610\n\tdelimiter = '-', // '\\x2D'                                                                                            // 9611\n                                                                                                                       // 9612\n                                                                                                                       // 9613\n\tregexPunycode = /^xn--/,                                                                                              // 9614\n\tregexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars                                                // 9615\n\tregexSeparators = /\\x2E|\\u3002|\\uFF0E|\\uFF61/g, // RFC 3490 separators                                                // 9616\n                                                                                                                       // 9617\n                                                                                                                       // 9618\n\terrors = {                                                                                                            // 9619\n\t\t'overflow': 'Overflow: input needs wider integers to process',                                                       // 9620\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',                                                       // 9621\n\t\t'invalid-input': 'Invalid input'                                                                                     // 9622\n\t},                                                                                                                    // 9623\n                                                                                                                       // 9624\n                                                                                                                       // 9625\n\tbaseMinusTMin = base - tMin,                                                                                          // 9626\n\tfloor = Math.floor,                                                                                                   // 9627\n\tstringFromCharCode = String.fromCharCode,                                                                             // 9628\n                                                                                                                       // 9629\n                                                                                                                       // 9630\n\tkey;                                                                                                                  // 9631\n                                                                                                                       // 9632\n                                                                                                                       // 9633\n                                                                                                                       // 9634\n                                                                                                                       // 9635\n\tfunction error(type) {                                                                                                // 9636\n\t\tthrow RangeError(errors[type]);                                                                                      // 9637\n\t}                                                                                                                     // 9638\n                                                                                                                       // 9639\n                                                                                                                       // 9640\n\tfunction map(array, fn) {                                                                                             // 9641\n\t\tvar length = array.length;                                                                                           // 9642\n\t\twhile (length--) {                                                                                                   // 9643\n\t\t\tarray[length] = fn(array[length]);                                                                                  // 9644\n\t\t}                                                                                                                    // 9645\n\t\treturn array;                                                                                                        // 9646\n\t}                                                                                                                     // 9647\n                                                                                                                       // 9648\n                                                                                                                       // 9649\n\tfunction mapDomain(string, fn) {                                                                                      // 9650\n\t\treturn map(string.split(regexSeparators), fn).join('.');                                                             // 9651\n\t}                                                                                                                     // 9652\n                                                                                                                       // 9653\n                                                                                                                       // 9654\n\tfunction ucs2decode(string) {                                                                                         // 9655\n\t\tvar output = [],                                                                                                     // 9656\n\t\t    counter = 0,                                                                                                     // 9657\n\t\t    length = string.length,                                                                                          // 9658\n\t\t    value,                                                                                                           // 9659\n\t\t    extra;                                                                                                           // 9660\n\t\twhile (counter < length) {                                                                                           // 9661\n\t\t\tvalue = string.charCodeAt(counter++);                                                                               // 9662\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {                                                       // 9663\n\t\t\t\textra = string.charCodeAt(counter++);                                                                              // 9664\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate                                                                 // 9665\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                                                 // 9666\n\t\t\t\t} else {                                                                                                           // 9667\n\t\t\t\t\toutput.push(value);                                                                                               // 9668\n\t\t\t\t\tcounter--;                                                                                                        // 9669\n\t\t\t\t}                                                                                                                  // 9670\n\t\t\t} else {                                                                                                            // 9671\n\t\t\t\toutput.push(value);                                                                                                // 9672\n\t\t\t}                                                                                                                   // 9673\n\t\t}                                                                                                                    // 9674\n\t\treturn output;                                                                                                       // 9675\n\t}                                                                                                                     // 9676\n                                                                                                                       // 9677\n                                                                                                                       // 9678\n\tfunction ucs2encode(array) {                                                                                          // 9679\n\t\treturn map(array, function(value) {                                                                                  // 9680\n\t\t\tvar output = '';                                                                                                    // 9681\n\t\t\tif (value > 0xFFFF) {                                                                                               // 9682\n\t\t\t\tvalue -= 0x10000;                                                                                                  // 9683\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);                                                       // 9684\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;                                                                                    // 9685\n\t\t\t}                                                                                                                   // 9686\n\t\t\toutput += stringFromCharCode(value);                                                                                // 9687\n\t\t\treturn output;                                                                                                      // 9688\n\t\t}).join('');                                                                                                         // 9689\n\t}                                                                                                                     // 9690\n                                                                                                                       // 9691\n                                                                                                                       // 9692\n\tfunction basicToDigit(codePoint) {                                                                                    // 9693\n\t\tif (codePoint - 48 < 10) {                                                                                           // 9694\n\t\t\treturn codePoint - 22;                                                                                              // 9695\n\t\t}                                                                                                                    // 9696\n\t\tif (codePoint - 65 < 26) {                                                                                           // 9697\n\t\t\treturn codePoint - 65;                                                                                              // 9698\n\t\t}                                                                                                                    // 9699\n\t\tif (codePoint - 97 < 26) {                                                                                           // 9700\n\t\t\treturn codePoint - 97;                                                                                              // 9701\n\t\t}                                                                                                                    // 9702\n\t\treturn base;                                                                                                         // 9703\n\t}                                                                                                                     // 9704\n                                                                                                                       // 9705\n                                                                                                                       // 9706\n\tfunction digitToBasic(digit, flag) {                                                                                  // 9707\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);                                                          // 9708\n\t}                                                                                                                     // 9709\n                                                                                                                       // 9710\n                                                                                                                       // 9711\n\tfunction adapt(delta, numPoints, firstTime) {                                                                         // 9712\n\t\tvar k = 0;                                                                                                           // 9713\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;                                                                // 9714\n\t\tdelta += floor(delta / numPoints);                                                                                   // 9715\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {                                        // 9716\n\t\t\tdelta = floor(delta / baseMinusTMin);                                                                               // 9717\n\t\t}                                                                                                                    // 9718\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));                                                      // 9719\n\t}                                                                                                                     // 9720\n                                                                                                                       // 9721\n                                                                                                                       // 9722\n\tfunction decode(input) {                                                                                              // 9723\n\t\tvar output = [],                                                                                                     // 9724\n\t\t    inputLength = input.length,                                                                                      // 9725\n\t\t    out,                                                                                                             // 9726\n\t\t    i = 0,                                                                                                           // 9727\n\t\t    n = initialN,                                                                                                    // 9728\n\t\t    bias = initialBias,                                                                                              // 9729\n\t\t    basic,                                                                                                           // 9730\n\t\t    j,                                                                                                               // 9731\n\t\t    index,                                                                                                           // 9732\n\t\t    oldi,                                                                                                            // 9733\n\t\t    w,                                                                                                               // 9734\n\t\t    k,                                                                                                               // 9735\n\t\t    digit,                                                                                                           // 9736\n\t\t    t,                                                                                                               // 9737\n                                                                                                                       // 9738\n\t\t    baseMinusT;                                                                                                      // 9739\n                                                                                                                       // 9740\n                                                                                                                       // 9741\n\t\tbasic = input.lastIndexOf(delimiter);                                                                                // 9742\n\t\tif (basic < 0) {                                                                                                     // 9743\n\t\t\tbasic = 0;                                                                                                          // 9744\n\t\t}                                                                                                                    // 9745\n                                                                                                                       // 9746\n\t\tfor (j = 0; j < basic; ++j) {                                                                                        // 9747\n\t\t\tif (input.charCodeAt(j) >= 0x80) {                                                                                  // 9748\n\t\t\t\terror('not-basic');                                                                                                // 9749\n\t\t\t}                                                                                                                   // 9750\n\t\t\toutput.push(input.charCodeAt(j));                                                                                   // 9751\n\t\t}                                                                                                                    // 9752\n                                                                                                                       // 9753\n                                                                                                                       // 9754\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {                            // 9755\n                                                                                                                       // 9756\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {                                                    // 9757\n                                                                                                                       // 9758\n\t\t\t\tif (index >= inputLength) {                                                                                        // 9759\n\t\t\t\t\terror('invalid-input');                                                                                           // 9760\n\t\t\t\t}                                                                                                                  // 9761\n                                                                                                                       // 9762\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));                                                                   // 9763\n                                                                                                                       // 9764\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {                                                            // 9765\n\t\t\t\t\terror('overflow');                                                                                                // 9766\n\t\t\t\t}                                                                                                                  // 9767\n                                                                                                                       // 9768\n\t\t\t\ti += digit * w;                                                                                                    // 9769\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);                                                       // 9770\n                                                                                                                       // 9771\n\t\t\t\tif (digit < t) {                                                                                                   // 9772\n\t\t\t\t\tbreak;                                                                                                            // 9773\n\t\t\t\t}                                                                                                                  // 9774\n                                                                                                                       // 9775\n\t\t\t\tbaseMinusT = base - t;                                                                                             // 9776\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {                                                                              // 9777\n\t\t\t\t\terror('overflow');                                                                                                // 9778\n\t\t\t\t}                                                                                                                  // 9779\n                                                                                                                       // 9780\n\t\t\t\tw *= baseMinusT;                                                                                                   // 9781\n                                                                                                                       // 9782\n\t\t\t}                                                                                                                   // 9783\n                                                                                                                       // 9784\n\t\t\tout = output.length + 1;                                                                                            // 9785\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);                                                                             // 9786\n                                                                                                                       // 9787\n\t\t\tif (floor(i / out) > maxInt - n) {                                                                                  // 9788\n\t\t\t\terror('overflow');                                                                                                 // 9789\n\t\t\t}                                                                                                                   // 9790\n                                                                                                                       // 9791\n\t\t\tn += floor(i / out);                                                                                                // 9792\n\t\t\ti %= out;                                                                                                           // 9793\n                                                                                                                       // 9794\n\t\t\toutput.splice(i++, 0, n);                                                                                           // 9795\n                                                                                                                       // 9796\n\t\t}                                                                                                                    // 9797\n                                                                                                                       // 9798\n\t\treturn ucs2encode(output);                                                                                           // 9799\n\t}                                                                                                                     // 9800\n                                                                                                                       // 9801\n                                                                                                                       // 9802\n\tfunction encode(input) {                                                                                              // 9803\n\t\tvar n,                                                                                                               // 9804\n\t\t    delta,                                                                                                           // 9805\n\t\t    handledCPCount,                                                                                                  // 9806\n\t\t    basicLength,                                                                                                     // 9807\n\t\t    bias,                                                                                                            // 9808\n\t\t    j,                                                                                                               // 9809\n\t\t    m,                                                                                                               // 9810\n\t\t    q,                                                                                                               // 9811\n\t\t    k,                                                                                                               // 9812\n\t\t    t,                                                                                                               // 9813\n\t\t    currentValue,                                                                                                    // 9814\n\t\t    output = [],                                                                                                     // 9815\n                                                                                                                       // 9816\n\t\t    inputLength,                                                                                                     // 9817\n                                                                                                                       // 9818\n\t\t    handledCPCountPlusOne,                                                                                           // 9819\n\t\t    baseMinusT,                                                                                                      // 9820\n\t\t    qMinusT;                                                                                                         // 9821\n                                                                                                                       // 9822\n\t\tinput = ucs2decode(input);                                                                                           // 9823\n                                                                                                                       // 9824\n\t\tinputLength = input.length;                                                                                          // 9825\n                                                                                                                       // 9826\n\t\tn = initialN;                                                                                                        // 9827\n\t\tdelta = 0;                                                                                                           // 9828\n\t\tbias = initialBias;                                                                                                  // 9829\n                                                                                                                       // 9830\n\t\tfor (j = 0; j < inputLength; ++j) {                                                                                  // 9831\n\t\t\tcurrentValue = input[j];                                                                                            // 9832\n\t\t\tif (currentValue < 0x80) {                                                                                          // 9833\n\t\t\t\toutput.push(stringFromCharCode(currentValue));                                                                     // 9834\n\t\t\t}                                                                                                                   // 9835\n\t\t}                                                                                                                    // 9836\n                                                                                                                       // 9837\n\t\thandledCPCount = basicLength = output.length;                                                                        // 9838\n                                                                                                                       // 9839\n                                                                                                                       // 9840\n\t\tif (basicLength) {                                                                                                   // 9841\n\t\t\toutput.push(delimiter);                                                                                             // 9842\n\t\t}                                                                                                                    // 9843\n                                                                                                                       // 9844\n\t\twhile (handledCPCount < inputLength) {                                                                               // 9845\n                                                                                                                       // 9846\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {                                                                     // 9847\n\t\t\t\tcurrentValue = input[j];                                                                                           // 9848\n\t\t\t\tif (currentValue >= n && currentValue < m) {                                                                       // 9849\n\t\t\t\t\tm = currentValue;                                                                                                 // 9850\n\t\t\t\t}                                                                                                                  // 9851\n\t\t\t}                                                                                                                   // 9852\n                                                                                                                       // 9853\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;                                                                         // 9854\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {                                                      // 9855\n\t\t\t\terror('overflow');                                                                                                 // 9856\n\t\t\t}                                                                                                                   // 9857\n                                                                                                                       // 9858\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;                                                                           // 9859\n\t\t\tn = m;                                                                                                              // 9860\n                                                                                                                       // 9861\n\t\t\tfor (j = 0; j < inputLength; ++j) {                                                                                 // 9862\n\t\t\t\tcurrentValue = input[j];                                                                                           // 9863\n                                                                                                                       // 9864\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {                                                                        // 9865\n\t\t\t\t\terror('overflow');                                                                                                // 9866\n\t\t\t\t}                                                                                                                  // 9867\n                                                                                                                       // 9868\n\t\t\t\tif (currentValue == n) {                                                                                           // 9869\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {                                                        // 9870\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);                                                     // 9871\n\t\t\t\t\t\tif (q < t) {                                                                                                     // 9872\n\t\t\t\t\t\t\tbreak;                                                                                                          // 9873\n\t\t\t\t\t\t}                                                                                                                // 9874\n\t\t\t\t\t\tqMinusT = q - t;                                                                                                 // 9875\n\t\t\t\t\t\tbaseMinusT = base - t;                                                                                           // 9876\n\t\t\t\t\t\toutput.push(                                                                                                     // 9877\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))                                                   // 9878\n\t\t\t\t\t\t);                                                                                                               // 9879\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);                                                                                 // 9880\n\t\t\t\t\t}                                                                                                                 // 9881\n                                                                                                                       // 9882\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));                                                              // 9883\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);                                        // 9884\n\t\t\t\t\tdelta = 0;                                                                                                        // 9885\n\t\t\t\t\t++handledCPCount;                                                                                                 // 9886\n\t\t\t\t}                                                                                                                  // 9887\n\t\t\t}                                                                                                                   // 9888\n                                                                                                                       // 9889\n\t\t\t++delta;                                                                                                            // 9890\n\t\t\t++n;                                                                                                                // 9891\n                                                                                                                       // 9892\n\t\t}                                                                                                                    // 9893\n\t\treturn output.join('');                                                                                              // 9894\n\t}                                                                                                                     // 9895\n                                                                                                                       // 9896\n                                                                                                                       // 9897\n\tfunction toUnicode(domain) {                                                                                          // 9898\n\t\treturn mapDomain(domain, function(string) {                                                                          // 9899\n\t\t\treturn regexPunycode.test(string)                                                                                   // 9900\n\t\t\t\t? decode(string.slice(4).toLowerCase())                                                                            // 9901\n\t\t\t\t: string;                                                                                                          // 9902\n\t\t});                                                                                                                  // 9903\n\t}                                                                                                                     // 9904\n                                                                                                                       // 9905\n                                                                                                                       // 9906\n\tfunction toASCII(domain) {                                                                                            // 9907\n\t\treturn mapDomain(domain, function(string) {                                                                          // 9908\n\t\t\treturn regexNonASCII.test(string)                                                                                   // 9909\n\t\t\t\t? 'xn--' + encode(string)                                                                                          // 9910\n\t\t\t\t: string;                                                                                                          // 9911\n\t\t});                                                                                                                  // 9912\n\t}                                                                                                                     // 9913\n                                                                                                                       // 9914\n                                                                                                                       // 9915\n                                                                                                                       // 9916\n                                                                                                                       // 9917\n\tpunycode = {                                                                                                          // 9918\n                                                                                                                       // 9919\n\t\t'version': '1.2.4',                                                                                                  // 9920\n                                                                                                                       // 9921\n\t\t'ucs2': {                                                                                                            // 9922\n\t\t\t'decode': ucs2decode,                                                                                               // 9923\n\t\t\t'encode': ucs2encode                                                                                                // 9924\n\t\t},                                                                                                                   // 9925\n\t\t'decode': decode,                                                                                                    // 9926\n\t\t'encode': encode,                                                                                                    // 9927\n\t\t'toASCII': toASCII,                                                                                                  // 9928\n\t\t'toUnicode': toUnicode                                                                                               // 9929\n\t};                                                                                                                    // 9930\n                                                                                                                       // 9931\n                                                                                                                       // 9932\n\tif (                                                                                                                  // 9933\n\t\ttypeof define == 'function' &&                                                                                       // 9934\n\t\ttypeof define.amd == 'object' &&                                                                                     // 9935\n\t\tdefine.amd                                                                                                           // 9936\n\t) {                                                                                                                   // 9937\n\t\tdefine('punycode', function() {                                                                                      // 9938\n\t\t\treturn punycode;                                                                                                    // 9939\n\t\t});                                                                                                                  // 9940\n\t} else if (freeExports && !freeExports.nodeType) {                                                                    // 9941\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+                                                                   // 9942\n\t\t\tfreeModule.exports = punycode;                                                                                      // 9943\n\t\t} else { // in Narwhal or RingoJS v0.7.0-                                                                            // 9944\n\t\t\tfor (key in punycode) {                                                                                             // 9945\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);                                                // 9946\n\t\t\t}                                                                                                                   // 9947\n\t\t}                                                                                                                    // 9948\n\t} else { // in Rhino or a web browser                                                                                 // 9949\n\t\troot.punycode = punycode;                                                                                            // 9950\n\t}                                                                                                                     // 9951\n                                                                                                                       // 9952\n}(this));                                                                                                              // 9953\n                                                                                                                       // 9954\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})                         // 9955\n},{}],75:[function(require,module,exports){                                                                            // 9956\n                                                                                                                       // 9957\n'use strict';                                                                                                          // 9958\n                                                                                                                       // 9959\nfunction hasOwnProperty(obj, prop) {                                                                                   // 9960\n  return Object.prototype.hasOwnProperty.call(obj, prop);                                                              // 9961\n}                                                                                                                      // 9962\n                                                                                                                       // 9963\nmodule.exports = function(qs, sep, eq, options) {                                                                      // 9964\n  sep = sep || '&';                                                                                                    // 9965\n  eq = eq || '=';                                                                                                      // 9966\n  var obj = {};                                                                                                        // 9967\n                                                                                                                       // 9968\n  if (typeof qs !== 'string' || qs.length === 0) {                                                                     // 9969\n    return obj;                                                                                                        // 9970\n  }                                                                                                                    // 9971\n                                                                                                                       // 9972\n  var regexp = /\\+/g;                                                                                                  // 9973\n  qs = qs.split(sep);                                                                                                  // 9974\n                                                                                                                       // 9975\n  var maxKeys = 1000;                                                                                                  // 9976\n  if (options && typeof options.maxKeys === 'number') {                                                                // 9977\n    maxKeys = options.maxKeys;                                                                                         // 9978\n  }                                                                                                                    // 9979\n                                                                                                                       // 9980\n  var len = qs.length;                                                                                                 // 9981\n  if (maxKeys > 0 && len > maxKeys) {                                                                                  // 9982\n    len = maxKeys;                                                                                                     // 9983\n  }                                                                                                                    // 9984\n                                                                                                                       // 9985\n  for (var i = 0; i < len; ++i) {                                                                                      // 9986\n    var x = qs[i].replace(regexp, '%20'),                                                                              // 9987\n        idx = x.indexOf(eq),                                                                                           // 9988\n        kstr, vstr, k, v;                                                                                              // 9989\n                                                                                                                       // 9990\n    if (idx >= 0) {                                                                                                    // 9991\n      kstr = x.substr(0, idx);                                                                                         // 9992\n      vstr = x.substr(idx + 1);                                                                                        // 9993\n    } else {                                                                                                           // 9994\n      kstr = x;                                                                                                        // 9995\n      vstr = '';                                                                                                       // 9996\n    }                                                                                                                  // 9997\n                                                                                                                       // 9998\n    k = decodeURIComponent(kstr);                                                                                      // 9999\n    v = decodeURIComponent(vstr);                                                                                      // 10000\n                                                                                                                       // 10001\n    if (!hasOwnProperty(obj, k)) {                                                                                     // 10002\n      obj[k] = v;                                                                                                      // 10003\n    } else if (isArray(obj[k])) {                                                                                      // 10004\n      obj[k].push(v);                                                                                                  // 10005\n    } else {                                                                                                           // 10006\n      obj[k] = [obj[k], v];                                                                                            // 10007\n    }                                                                                                                  // 10008\n  }                                                                                                                    // 10009\n                                                                                                                       // 10010\n  return obj;                                                                                                          // 10011\n};                                                                                                                     // 10012\n                                                                                                                       // 10013\nvar isArray = Array.isArray || function (xs) {                                                                         // 10014\n  return Object.prototype.toString.call(xs) === '[object Array]';                                                      // 10015\n};                                                                                                                     // 10016\n                                                                                                                       // 10017\n},{}],76:[function(require,module,exports){                                                                            // 10018\n                                                                                                                       // 10019\n'use strict';                                                                                                          // 10020\n                                                                                                                       // 10021\nvar stringifyPrimitive = function(v) {                                                                                 // 10022\n  switch (typeof v) {                                                                                                  // 10023\n    case 'string':                                                                                                     // 10024\n      return v;                                                                                                        // 10025\n                                                                                                                       // 10026\n    case 'boolean':                                                                                                    // 10027\n      return v ? 'true' : 'false';                                                                                     // 10028\n                                                                                                                       // 10029\n    case 'number':                                                                                                     // 10030\n      return isFinite(v) ? v : '';                                                                                     // 10031\n                                                                                                                       // 10032\n    default:                                                                                                           // 10033\n      return '';                                                                                                       // 10034\n  }                                                                                                                    // 10035\n};                                                                                                                     // 10036\n                                                                                                                       // 10037\nmodule.exports = function(obj, sep, eq, name) {                                                                        // 10038\n  sep = sep || '&';                                                                                                    // 10039\n  eq = eq || '=';                                                                                                      // 10040\n  if (obj === null) {                                                                                                  // 10041\n    obj = undefined;                                                                                                   // 10042\n  }                                                                                                                    // 10043\n                                                                                                                       // 10044\n  if (typeof obj === 'object') {                                                                                       // 10045\n    return map(objectKeys(obj), function(k) {                                                                          // 10046\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;                                                         // 10047\n      if (isArray(obj[k])) {                                                                                           // 10048\n        return obj[k].map(function(v) {                                                                                // 10049\n          return ks + encodeURIComponent(stringifyPrimitive(v));                                                       // 10050\n        }).join(sep);                                                                                                  // 10051\n      } else {                                                                                                         // 10052\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));                                                    // 10053\n      }                                                                                                                // 10054\n    }).join(sep);                                                                                                      // 10055\n                                                                                                                       // 10056\n  }                                                                                                                    // 10057\n                                                                                                                       // 10058\n  if (!name) return '';                                                                                                // 10059\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +                                                           // 10060\n         encodeURIComponent(stringifyPrimitive(obj));                                                                  // 10061\n};                                                                                                                     // 10062\n                                                                                                                       // 10063\nvar isArray = Array.isArray || function (xs) {                                                                         // 10064\n  return Object.prototype.toString.call(xs) === '[object Array]';                                                      // 10065\n};                                                                                                                     // 10066\n                                                                                                                       // 10067\nfunction map (xs, f) {                                                                                                 // 10068\n  if (xs.map) return xs.map(f);                                                                                        // 10069\n  var res = [];                                                                                                        // 10070\n  for (var i = 0; i < xs.length; i++) {                                                                                // 10071\n    res.push(f(xs[i], i));                                                                                             // 10072\n  }                                                                                                                    // 10073\n  return res;                                                                                                          // 10074\n}                                                                                                                      // 10075\n                                                                                                                       // 10076\nvar objectKeys = Object.keys || function (obj) {                                                                       // 10077\n  var res = [];                                                                                                        // 10078\n  for (var key in obj) {                                                                                               // 10079\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);                                                 // 10080\n  }                                                                                                                    // 10081\n  return res;                                                                                                          // 10082\n};                                                                                                                     // 10083\n                                                                                                                       // 10084\n},{}],77:[function(require,module,exports){                                                                            // 10085\n'use strict';                                                                                                          // 10086\n                                                                                                                       // 10087\nexports.decode = exports.parse = require('./decode');                                                                  // 10088\nexports.encode = exports.stringify = require('./encode');                                                              // 10089\n                                                                                                                       // 10090\n},{\"./decode\":75,\"./encode\":76}],78:[function(require,module,exports){                                                 // 10091\n                                                                                                                       // 10092\nvar punycode = require('punycode');                                                                                    // 10093\n                                                                                                                       // 10094\nexports.parse = urlParse;                                                                                              // 10095\nexports.resolve = urlResolve;                                                                                          // 10096\nexports.resolveObject = urlResolveObject;                                                                              // 10097\nexports.format = urlFormat;                                                                                            // 10098\n                                                                                                                       // 10099\nexports.Url = Url;                                                                                                     // 10100\n                                                                                                                       // 10101\nfunction Url() {                                                                                                       // 10102\n  this.protocol = null;                                                                                                // 10103\n  this.slashes = null;                                                                                                 // 10104\n  this.auth = null;                                                                                                    // 10105\n  this.host = null;                                                                                                    // 10106\n  this.port = null;                                                                                                    // 10107\n  this.hostname = null;                                                                                                // 10108\n  this.hash = null;                                                                                                    // 10109\n  this.search = null;                                                                                                  // 10110\n  this.query = null;                                                                                                   // 10111\n  this.pathname = null;                                                                                                // 10112\n  this.path = null;                                                                                                    // 10113\n  this.href = null;                                                                                                    // 10114\n}                                                                                                                      // 10115\n                                                                                                                       // 10116\n                                                                                                                       // 10117\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,                                                                             // 10118\n    portPattern = /:[0-9]*$/,                                                                                          // 10119\n                                                                                                                       // 10120\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],                                                              // 10121\n                                                                                                                       // 10122\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),                                                           // 10123\n                                                                                                                       // 10124\n    autoEscape = ['\\''].concat(unwise),                                                                                // 10125\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),                                                       // 10126\n    hostEndingChars = ['/', '?', '#'],                                                                                 // 10127\n    hostnameMaxLen = 255,                                                                                              // 10128\n    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,                                                                     // 10129\n    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,                                                                 // 10130\n    unsafeProtocol = {                                                                                                 // 10131\n      'javascript': true,                                                                                              // 10132\n      'javascript:': true                                                                                              // 10133\n    },                                                                                                                 // 10134\n    hostlessProtocol = {                                                                                               // 10135\n      'javascript': true,                                                                                              // 10136\n      'javascript:': true                                                                                              // 10137\n    },                                                                                                                 // 10138\n    slashedProtocol = {                                                                                                // 10139\n      'http': true,                                                                                                    // 10140\n      'https': true,                                                                                                   // 10141\n      'ftp': true,                                                                                                     // 10142\n      'gopher': true,                                                                                                  // 10143\n      'file': true,                                                                                                    // 10144\n      'http:': true,                                                                                                   // 10145\n      'https:': true,                                                                                                  // 10146\n      'ftp:': true,                                                                                                    // 10147\n      'gopher:': true,                                                                                                 // 10148\n      'file:': true                                                                                                    // 10149\n    },                                                                                                                 // 10150\n    querystring = require('querystring');                                                                              // 10151\n                                                                                                                       // 10152\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {                                                          // 10153\n  if (url && isObject(url) && url instanceof Url) return url;                                                          // 10154\n                                                                                                                       // 10155\n  var u = new Url;                                                                                                     // 10156\n  u.parse(url, parseQueryString, slashesDenoteHost);                                                                   // 10157\n  return u;                                                                                                            // 10158\n}                                                                                                                      // 10159\n                                                                                                                       // 10160\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {                                             // 10161\n  if (!isString(url)) {                                                                                                // 10162\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);                                        // 10163\n  }                                                                                                                    // 10164\n                                                                                                                       // 10165\n  var rest = url;                                                                                                      // 10166\n                                                                                                                       // 10167\n  rest = rest.trim();                                                                                                  // 10168\n                                                                                                                       // 10169\n  var proto = protocolPattern.exec(rest);                                                                              // 10170\n  if (proto) {                                                                                                         // 10171\n    proto = proto[0];                                                                                                  // 10172\n    var lowerProto = proto.toLowerCase();                                                                              // 10173\n    this.protocol = lowerProto;                                                                                        // 10174\n    rest = rest.substr(proto.length);                                                                                  // 10175\n  }                                                                                                                    // 10176\n                                                                                                                       // 10177\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {                                              // 10178\n    var slashes = rest.substr(0, 2) === '//';                                                                          // 10179\n    if (slashes && !(proto && hostlessProtocol[proto])) {                                                              // 10180\n      rest = rest.substr(2);                                                                                           // 10181\n      this.slashes = true;                                                                                             // 10182\n    }                                                                                                                  // 10183\n  }                                                                                                                    // 10184\n                                                                                                                       // 10185\n  if (!hostlessProtocol[proto] &&                                                                                      // 10186\n      (slashes || (proto && !slashedProtocol[proto]))) {                                                               // 10187\n                                                                                                                       // 10188\n                                                                                                                       // 10189\n                                                                                                                       // 10190\n    var hostEnd = -1;                                                                                                  // 10191\n    for (var i = 0; i < hostEndingChars.length; i++) {                                                                 // 10192\n      var hec = rest.indexOf(hostEndingChars[i]);                                                                      // 10193\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))                                                             // 10194\n        hostEnd = hec;                                                                                                 // 10195\n    }                                                                                                                  // 10196\n                                                                                                                       // 10197\n    var auth, atSign;                                                                                                  // 10198\n    if (hostEnd === -1) {                                                                                              // 10199\n      atSign = rest.lastIndexOf('@');                                                                                  // 10200\n    } else {                                                                                                           // 10201\n      atSign = rest.lastIndexOf('@', hostEnd);                                                                         // 10202\n    }                                                                                                                  // 10203\n                                                                                                                       // 10204\n    if (atSign !== -1) {                                                                                               // 10205\n      auth = rest.slice(0, atSign);                                                                                    // 10206\n      rest = rest.slice(atSign + 1);                                                                                   // 10207\n      this.auth = decodeURIComponent(auth);                                                                            // 10208\n    }                                                                                                                  // 10209\n                                                                                                                       // 10210\n    hostEnd = -1;                                                                                                      // 10211\n    for (var i = 0; i < nonHostChars.length; i++) {                                                                    // 10212\n      var hec = rest.indexOf(nonHostChars[i]);                                                                         // 10213\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))                                                             // 10214\n        hostEnd = hec;                                                                                                 // 10215\n    }                                                                                                                  // 10216\n    if (hostEnd === -1)                                                                                                // 10217\n      hostEnd = rest.length;                                                                                           // 10218\n                                                                                                                       // 10219\n    this.host = rest.slice(0, hostEnd);                                                                                // 10220\n    rest = rest.slice(hostEnd);                                                                                        // 10221\n                                                                                                                       // 10222\n    this.parseHost();                                                                                                  // 10223\n                                                                                                                       // 10224\n    this.hostname = this.hostname || '';                                                                               // 10225\n                                                                                                                       // 10226\n    var ipv6Hostname = this.hostname[0] === '[' &&                                                                     // 10227\n        this.hostname[this.hostname.length - 1] === ']';                                                               // 10228\n                                                                                                                       // 10229\n    if (!ipv6Hostname) {                                                                                               // 10230\n      var hostparts = this.hostname.split(/\\./);                                                                       // 10231\n      for (var i = 0, l = hostparts.length; i < l; i++) {                                                              // 10232\n        var part = hostparts[i];                                                                                       // 10233\n        if (!part) continue;                                                                                           // 10234\n        if (!part.match(hostnamePartPattern)) {                                                                        // 10235\n          var newpart = '';                                                                                            // 10236\n          for (var j = 0, k = part.length; j < k; j++) {                                                               // 10237\n            if (part.charCodeAt(j) > 127) {                                                                            // 10238\n              newpart += 'x';                                                                                          // 10239\n            } else {                                                                                                   // 10240\n              newpart += part[j];                                                                                      // 10241\n            }                                                                                                          // 10242\n          }                                                                                                            // 10243\n          if (!newpart.match(hostnamePartPattern)) {                                                                   // 10244\n            var validParts = hostparts.slice(0, i);                                                                    // 10245\n            var notHost = hostparts.slice(i + 1);                                                                      // 10246\n            var bit = part.match(hostnamePartStart);                                                                   // 10247\n            if (bit) {                                                                                                 // 10248\n              validParts.push(bit[1]);                                                                                 // 10249\n              notHost.unshift(bit[2]);                                                                                 // 10250\n            }                                                                                                          // 10251\n            if (notHost.length) {                                                                                      // 10252\n              rest = '/' + notHost.join('.') + rest;                                                                   // 10253\n            }                                                                                                          // 10254\n            this.hostname = validParts.join('.');                                                                      // 10255\n            break;                                                                                                     // 10256\n          }                                                                                                            // 10257\n        }                                                                                                              // 10258\n      }                                                                                                                // 10259\n    }                                                                                                                  // 10260\n                                                                                                                       // 10261\n    if (this.hostname.length > hostnameMaxLen) {                                                                       // 10262\n      this.hostname = '';                                                                                              // 10263\n    } else {                                                                                                           // 10264\n      this.hostname = this.hostname.toLowerCase();                                                                     // 10265\n    }                                                                                                                  // 10266\n                                                                                                                       // 10267\n    if (!ipv6Hostname) {                                                                                               // 10268\n      var domainArray = this.hostname.split('.');                                                                      // 10269\n      var newOut = [];                                                                                                 // 10270\n      for (var i = 0; i < domainArray.length; ++i) {                                                                   // 10271\n        var s = domainArray[i];                                                                                        // 10272\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?                                                                        // 10273\n            'xn--' + punycode.encode(s) : s);                                                                          // 10274\n      }                                                                                                                // 10275\n      this.hostname = newOut.join('.');                                                                                // 10276\n    }                                                                                                                  // 10277\n                                                                                                                       // 10278\n    var p = this.port ? ':' + this.port : '';                                                                          // 10279\n    var h = this.hostname || '';                                                                                       // 10280\n    this.host = h + p;                                                                                                 // 10281\n    this.href += this.host;                                                                                            // 10282\n                                                                                                                       // 10283\n    if (ipv6Hostname) {                                                                                                // 10284\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);                                               // 10285\n      if (rest[0] !== '/') {                                                                                           // 10286\n        rest = '/' + rest;                                                                                             // 10287\n      }                                                                                                                // 10288\n    }                                                                                                                  // 10289\n  }                                                                                                                    // 10290\n                                                                                                                       // 10291\n  if (!unsafeProtocol[lowerProto]) {                                                                                   // 10292\n                                                                                                                       // 10293\n    for (var i = 0, l = autoEscape.length; i < l; i++) {                                                               // 10294\n      var ae = autoEscape[i];                                                                                          // 10295\n      var esc = encodeURIComponent(ae);                                                                                // 10296\n      if (esc === ae) {                                                                                                // 10297\n        esc = escape(ae);                                                                                              // 10298\n      }                                                                                                                // 10299\n      rest = rest.split(ae).join(esc);                                                                                 // 10300\n    }                                                                                                                  // 10301\n  }                                                                                                                    // 10302\n                                                                                                                       // 10303\n                                                                                                                       // 10304\n  var hash = rest.indexOf('#');                                                                                        // 10305\n  if (hash !== -1) {                                                                                                   // 10306\n    this.hash = rest.substr(hash);                                                                                     // 10307\n    rest = rest.slice(0, hash);                                                                                        // 10308\n  }                                                                                                                    // 10309\n  var qm = rest.indexOf('?');                                                                                          // 10310\n  if (qm !== -1) {                                                                                                     // 10311\n    this.search = rest.substr(qm);                                                                                     // 10312\n    this.query = rest.substr(qm + 1);                                                                                  // 10313\n    if (parseQueryString) {                                                                                            // 10314\n      this.query = querystring.parse(this.query);                                                                      // 10315\n    }                                                                                                                  // 10316\n    rest = rest.slice(0, qm);                                                                                          // 10317\n  } else if (parseQueryString) {                                                                                       // 10318\n    this.search = '';                                                                                                  // 10319\n    this.query = {};                                                                                                   // 10320\n  }                                                                                                                    // 10321\n  if (rest) this.pathname = rest;                                                                                      // 10322\n  if (slashedProtocol[lowerProto] &&                                                                                   // 10323\n      this.hostname && !this.pathname) {                                                                               // 10324\n    this.pathname = '/';                                                                                               // 10325\n  }                                                                                                                    // 10326\n                                                                                                                       // 10327\n  if (this.pathname || this.search) {                                                                                  // 10328\n    var p = this.pathname || '';                                                                                       // 10329\n    var s = this.search || '';                                                                                         // 10330\n    this.path = p + s;                                                                                                 // 10331\n  }                                                                                                                    // 10332\n                                                                                                                       // 10333\n  this.href = this.format();                                                                                           // 10334\n  return this;                                                                                                         // 10335\n};                                                                                                                     // 10336\n                                                                                                                       // 10337\nfunction urlFormat(obj) {                                                                                              // 10338\n  if (isString(obj)) obj = urlParse(obj);                                                                              // 10339\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);                                                    // 10340\n  return obj.format();                                                                                                 // 10341\n}                                                                                                                      // 10342\n                                                                                                                       // 10343\nUrl.prototype.format = function() {                                                                                    // 10344\n  var auth = this.auth || '';                                                                                          // 10345\n  if (auth) {                                                                                                          // 10346\n    auth = encodeURIComponent(auth);                                                                                   // 10347\n    auth = auth.replace(/%3A/i, ':');                                                                                  // 10348\n    auth += '@';                                                                                                       // 10349\n  }                                                                                                                    // 10350\n                                                                                                                       // 10351\n  var protocol = this.protocol || '',                                                                                  // 10352\n      pathname = this.pathname || '',                                                                                  // 10353\n      hash = this.hash || '',                                                                                          // 10354\n      host = false,                                                                                                    // 10355\n      query = '';                                                                                                      // 10356\n                                                                                                                       // 10357\n  if (this.host) {                                                                                                     // 10358\n    host = auth + this.host;                                                                                           // 10359\n  } else if (this.hostname) {                                                                                          // 10360\n    host = auth + (this.hostname.indexOf(':') === -1 ?                                                                 // 10361\n        this.hostname :                                                                                                // 10362\n        '[' + this.hostname + ']');                                                                                    // 10363\n    if (this.port) {                                                                                                   // 10364\n      host += ':' + this.port;                                                                                         // 10365\n    }                                                                                                                  // 10366\n  }                                                                                                                    // 10367\n                                                                                                                       // 10368\n  if (this.query &&                                                                                                    // 10369\n      isObject(this.query) &&                                                                                          // 10370\n      Object.keys(this.query).length) {                                                                                // 10371\n    query = querystring.stringify(this.query);                                                                         // 10372\n  }                                                                                                                    // 10373\n                                                                                                                       // 10374\n  var search = this.search || (query && ('?' + query)) || '';                                                          // 10375\n                                                                                                                       // 10376\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';                                                        // 10377\n                                                                                                                       // 10378\n  if (this.slashes ||                                                                                                  // 10379\n      (!protocol || slashedProtocol[protocol]) && host !== false) {                                                    // 10380\n    host = '//' + (host || '');                                                                                        // 10381\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;                                             // 10382\n  } else if (!host) {                                                                                                  // 10383\n    host = '';                                                                                                         // 10384\n  }                                                                                                                    // 10385\n                                                                                                                       // 10386\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;                                                               // 10387\n  if (search && search.charAt(0) !== '?') search = '?' + search;                                                       // 10388\n                                                                                                                       // 10389\n  pathname = pathname.replace(/[?#]/g, function(match) {                                                               // 10390\n    return encodeURIComponent(match);                                                                                  // 10391\n  });                                                                                                                  // 10392\n  search = search.replace('#', '%23');                                                                                 // 10393\n                                                                                                                       // 10394\n  return protocol + host + pathname + search + hash;                                                                   // 10395\n};                                                                                                                     // 10396\n                                                                                                                       // 10397\nfunction urlResolve(source, relative) {                                                                                // 10398\n  return urlParse(source, false, true).resolve(relative);                                                              // 10399\n}                                                                                                                      // 10400\n                                                                                                                       // 10401\nUrl.prototype.resolve = function(relative) {                                                                           // 10402\n  return this.resolveObject(urlParse(relative, false, true)).format();                                                 // 10403\n};                                                                                                                     // 10404\n                                                                                                                       // 10405\nfunction urlResolveObject(source, relative) {                                                                          // 10406\n  if (!source) return relative;                                                                                        // 10407\n  return urlParse(source, false, true).resolveObject(relative);                                                        // 10408\n}                                                                                                                      // 10409\n                                                                                                                       // 10410\nUrl.prototype.resolveObject = function(relative) {                                                                     // 10411\n  if (isString(relative)) {                                                                                            // 10412\n    var rel = new Url();                                                                                               // 10413\n    rel.parse(relative, false, true);                                                                                  // 10414\n    relative = rel;                                                                                                    // 10415\n  }                                                                                                                    // 10416\n                                                                                                                       // 10417\n  var result = new Url();                                                                                              // 10418\n  Object.keys(this).forEach(function(k) {                                                                              // 10419\n    result[k] = this[k];                                                                                               // 10420\n  }, this);                                                                                                            // 10421\n                                                                                                                       // 10422\n  result.hash = relative.hash;                                                                                         // 10423\n                                                                                                                       // 10424\n  if (relative.href === '') {                                                                                          // 10425\n    result.href = result.format();                                                                                     // 10426\n    return result;                                                                                                     // 10427\n  }                                                                                                                    // 10428\n                                                                                                                       // 10429\n  if (relative.slashes && !relative.protocol) {                                                                        // 10430\n    Object.keys(relative).forEach(function(k) {                                                                        // 10431\n      if (k !== 'protocol')                                                                                            // 10432\n        result[k] = relative[k];                                                                                       // 10433\n    });                                                                                                                // 10434\n                                                                                                                       // 10435\n    if (slashedProtocol[result.protocol] &&                                                                            // 10436\n        result.hostname && !result.pathname) {                                                                         // 10437\n      result.path = result.pathname = '/';                                                                             // 10438\n    }                                                                                                                  // 10439\n                                                                                                                       // 10440\n    result.href = result.format();                                                                                     // 10441\n    return result;                                                                                                     // 10442\n  }                                                                                                                    // 10443\n                                                                                                                       // 10444\n  if (relative.protocol && relative.protocol !== result.protocol) {                                                    // 10445\n    if (!slashedProtocol[relative.protocol]) {                                                                         // 10446\n      Object.keys(relative).forEach(function(k) {                                                                      // 10447\n        result[k] = relative[k];                                                                                       // 10448\n      });                                                                                                              // 10449\n      result.href = result.format();                                                                                   // 10450\n      return result;                                                                                                   // 10451\n    }                                                                                                                  // 10452\n                                                                                                                       // 10453\n    result.protocol = relative.protocol;                                                                               // 10454\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {                                                      // 10455\n      var relPath = (relative.pathname || '').split('/');                                                              // 10456\n      while (relPath.length && !(relative.host = relPath.shift()));                                                    // 10457\n      if (!relative.host) relative.host = '';                                                                          // 10458\n      if (!relative.hostname) relative.hostname = '';                                                                  // 10459\n      if (relPath[0] !== '') relPath.unshift('');                                                                      // 10460\n      if (relPath.length < 2) relPath.unshift('');                                                                     // 10461\n      result.pathname = relPath.join('/');                                                                             // 10462\n    } else {                                                                                                           // 10463\n      result.pathname = relative.pathname;                                                                             // 10464\n    }                                                                                                                  // 10465\n    result.search = relative.search;                                                                                   // 10466\n    result.query = relative.query;                                                                                     // 10467\n    result.host = relative.host || '';                                                                                 // 10468\n    result.auth = relative.auth;                                                                                       // 10469\n    result.hostname = relative.hostname || relative.host;                                                              // 10470\n    result.port = relative.port;                                                                                       // 10471\n    if (result.pathname || result.search) {                                                                            // 10472\n      var p = result.pathname || '';                                                                                   // 10473\n      var s = result.search || '';                                                                                     // 10474\n      result.path = p + s;                                                                                             // 10475\n    }                                                                                                                  // 10476\n    result.slashes = result.slashes || relative.slashes;                                                               // 10477\n    result.href = result.format();                                                                                     // 10478\n    return result;                                                                                                     // 10479\n  }                                                                                                                    // 10480\n                                                                                                                       // 10481\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),                                            // 10482\n      isRelAbs = (                                                                                                     // 10483\n          relative.host ||                                                                                             // 10484\n          relative.pathname && relative.pathname.charAt(0) === '/'                                                     // 10485\n      ),                                                                                                               // 10486\n      mustEndAbs = (isRelAbs || isSourceAbs ||                                                                         // 10487\n                    (result.host && relative.pathname)),                                                               // 10488\n      removeAllDots = mustEndAbs,                                                                                      // 10489\n      srcPath = result.pathname && result.pathname.split('/') || [],                                                   // 10490\n      relPath = relative.pathname && relative.pathname.split('/') || [],                                               // 10491\n      psychotic = result.protocol && !slashedProtocol[result.protocol];                                                // 10492\n                                                                                                                       // 10493\n  if (psychotic) {                                                                                                     // 10494\n    result.hostname = '';                                                                                              // 10495\n    result.port = null;                                                                                                // 10496\n    if (result.host) {                                                                                                 // 10497\n      if (srcPath[0] === '') srcPath[0] = result.host;                                                                 // 10498\n      else srcPath.unshift(result.host);                                                                               // 10499\n    }                                                                                                                  // 10500\n    result.host = '';                                                                                                  // 10501\n    if (relative.protocol) {                                                                                           // 10502\n      relative.hostname = null;                                                                                        // 10503\n      relative.port = null;                                                                                            // 10504\n      if (relative.host) {                                                                                             // 10505\n        if (relPath[0] === '') relPath[0] = relative.host;                                                             // 10506\n        else relPath.unshift(relative.host);                                                                           // 10507\n      }                                                                                                                // 10508\n      relative.host = null;                                                                                            // 10509\n    }                                                                                                                  // 10510\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');                                               // 10511\n  }                                                                                                                    // 10512\n                                                                                                                       // 10513\n  if (isRelAbs) {                                                                                                      // 10514\n    result.host = (relative.host || relative.host === '') ?                                                            // 10515\n                  relative.host : result.host;                                                                         // 10516\n    result.hostname = (relative.hostname || relative.hostname === '') ?                                                // 10517\n                      relative.hostname : result.hostname;                                                             // 10518\n    result.search = relative.search;                                                                                   // 10519\n    result.query = relative.query;                                                                                     // 10520\n    srcPath = relPath;                                                                                                 // 10521\n  } else if (relPath.length) {                                                                                         // 10522\n    if (!srcPath) srcPath = [];                                                                                        // 10523\n    srcPath.pop();                                                                                                     // 10524\n    srcPath = srcPath.concat(relPath);                                                                                 // 10525\n    result.search = relative.search;                                                                                   // 10526\n    result.query = relative.query;                                                                                     // 10527\n  } else if (!isNullOrUndefined(relative.search)) {                                                                    // 10528\n    if (psychotic) {                                                                                                   // 10529\n      result.hostname = result.host = srcPath.shift();                                                                 // 10530\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?                                                   // 10531\n                       result.host.split('@') : false;                                                                 // 10532\n      if (authInHost) {                                                                                                // 10533\n        result.auth = authInHost.shift();                                                                              // 10534\n        result.host = result.hostname = authInHost.shift();                                                            // 10535\n      }                                                                                                                // 10536\n    }                                                                                                                  // 10537\n    result.search = relative.search;                                                                                   // 10538\n    result.query = relative.query;                                                                                     // 10539\n    if (!isNull(result.pathname) || !isNull(result.search)) {                                                          // 10540\n      result.path = (result.pathname ? result.pathname : '') +                                                         // 10541\n                    (result.search ? result.search : '');                                                              // 10542\n    }                                                                                                                  // 10543\n    result.href = result.format();                                                                                     // 10544\n    return result;                                                                                                     // 10545\n  }                                                                                                                    // 10546\n                                                                                                                       // 10547\n  if (!srcPath.length) {                                                                                               // 10548\n    result.pathname = null;                                                                                            // 10549\n    if (result.search) {                                                                                               // 10550\n      result.path = '/' + result.search;                                                                               // 10551\n    } else {                                                                                                           // 10552\n      result.path = null;                                                                                              // 10553\n    }                                                                                                                  // 10554\n    result.href = result.format();                                                                                     // 10555\n    return result;                                                                                                     // 10556\n  }                                                                                                                    // 10557\n                                                                                                                       // 10558\n  var last = srcPath.slice(-1)[0];                                                                                     // 10559\n  var hasTrailingSlash = (                                                                                             // 10560\n      (result.host || relative.host) && (last === '.' || last === '..') ||                                             // 10561\n      last === '');                                                                                                    // 10562\n                                                                                                                       // 10563\n  var up = 0;                                                                                                          // 10564\n  for (var i = srcPath.length; i >= 0; i--) {                                                                          // 10565\n    last = srcPath[i];                                                                                                 // 10566\n    if (last == '.') {                                                                                                 // 10567\n      srcPath.splice(i, 1);                                                                                            // 10568\n    } else if (last === '..') {                                                                                        // 10569\n      srcPath.splice(i, 1);                                                                                            // 10570\n      up++;                                                                                                            // 10571\n    } else if (up) {                                                                                                   // 10572\n      srcPath.splice(i, 1);                                                                                            // 10573\n      up--;                                                                                                            // 10574\n    }                                                                                                                  // 10575\n  }                                                                                                                    // 10576\n                                                                                                                       // 10577\n  if (!mustEndAbs && !removeAllDots) {                                                                                 // 10578\n    for (; up--; up) {                                                                                                 // 10579\n      srcPath.unshift('..');                                                                                           // 10580\n    }                                                                                                                  // 10581\n  }                                                                                                                    // 10582\n                                                                                                                       // 10583\n  if (mustEndAbs && srcPath[0] !== '' &&                                                                               // 10584\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {                                                                 // 10585\n    srcPath.unshift('');                                                                                               // 10586\n  }                                                                                                                    // 10587\n                                                                                                                       // 10588\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {                                                    // 10589\n    srcPath.push('');                                                                                                  // 10590\n  }                                                                                                                    // 10591\n                                                                                                                       // 10592\n  var isAbsolute = srcPath[0] === '' ||                                                                                // 10593\n      (srcPath[0] && srcPath[0].charAt(0) === '/');                                                                    // 10594\n                                                                                                                       // 10595\n  if (psychotic) {                                                                                                     // 10596\n    result.hostname = result.host = isAbsolute ? '' :                                                                  // 10597\n                                    srcPath.length ? srcPath.shift() : '';                                             // 10598\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?                                                     // 10599\n                     result.host.split('@') : false;                                                                   // 10600\n    if (authInHost) {                                                                                                  // 10601\n      result.auth = authInHost.shift();                                                                                // 10602\n      result.host = result.hostname = authInHost.shift();                                                              // 10603\n    }                                                                                                                  // 10604\n  }                                                                                                                    // 10605\n                                                                                                                       // 10606\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);                                                          // 10607\n                                                                                                                       // 10608\n  if (mustEndAbs && !isAbsolute) {                                                                                     // 10609\n    srcPath.unshift('');                                                                                               // 10610\n  }                                                                                                                    // 10611\n                                                                                                                       // 10612\n  if (!srcPath.length) {                                                                                               // 10613\n    result.pathname = null;                                                                                            // 10614\n    result.path = null;                                                                                                // 10615\n  } else {                                                                                                             // 10616\n    result.pathname = srcPath.join('/');                                                                               // 10617\n  }                                                                                                                    // 10618\n                                                                                                                       // 10619\n  if (!isNull(result.pathname) || !isNull(result.search)) {                                                            // 10620\n    result.path = (result.pathname ? result.pathname : '') +                                                           // 10621\n                  (result.search ? result.search : '');                                                                // 10622\n  }                                                                                                                    // 10623\n  result.auth = relative.auth || result.auth;                                                                          // 10624\n  result.slashes = result.slashes || relative.slashes;                                                                 // 10625\n  result.href = result.format();                                                                                       // 10626\n  return result;                                                                                                       // 10627\n};                                                                                                                     // 10628\n                                                                                                                       // 10629\nUrl.prototype.parseHost = function() {                                                                                 // 10630\n  var host = this.host;                                                                                                // 10631\n  var port = portPattern.exec(host);                                                                                   // 10632\n  if (port) {                                                                                                          // 10633\n    port = port[0];                                                                                                    // 10634\n    if (port !== ':') {                                                                                                // 10635\n      this.port = port.substr(1);                                                                                      // 10636\n    }                                                                                                                  // 10637\n    host = host.substr(0, host.length - port.length);                                                                  // 10638\n  }                                                                                                                    // 10639\n  if (host) this.hostname = host;                                                                                      // 10640\n};                                                                                                                     // 10641\n                                                                                                                       // 10642\nfunction isString(arg) {                                                                                               // 10643\n  return typeof arg === \"string\";                                                                                      // 10644\n}                                                                                                                      // 10645\n                                                                                                                       // 10646\nfunction isObject(arg) {                                                                                               // 10647\n  return typeof arg === 'object' && arg !== null;                                                                      // 10648\n}                                                                                                                      // 10649\n                                                                                                                       // 10650\nfunction isNull(arg) {                                                                                                 // 10651\n  return arg === null;                                                                                                 // 10652\n}                                                                                                                      // 10653\nfunction isNullOrUndefined(arg) {                                                                                      // 10654\n  return  arg == null;                                                                                                 // 10655\n}                                                                                                                      // 10656\n                                                                                                                       // 10657\n},{\"punycode\":74,\"querystring\":77}],79:[function(require,module,exports){                                              // 10658\nmodule.exports = function isBuffer(arg) {                                                                              // 10659\n  return arg && typeof arg === 'object'                                                                                // 10660\n    && typeof arg.copy === 'function'                                                                                  // 10661\n    && typeof arg.fill === 'function'                                                                                  // 10662\n    && typeof arg.readUInt8 === 'function';                                                                            // 10663\n}                                                                                                                      // 10664\n},{}],80:[function(require,module,exports){                                                                            // 10665\n(function (process,global){                                                                                            // 10666\n                                                                                                                       // 10667\nvar formatRegExp = /%[sdj%]/g;                                                                                         // 10668\nexports.format = function(f) {                                                                                         // 10669\n  if (!isString(f)) {                                                                                                  // 10670\n    var objects = [];                                                                                                  // 10671\n    for (var i = 0; i < arguments.length; i++) {                                                                       // 10672\n      objects.push(inspect(arguments[i]));                                                                             // 10673\n    }                                                                                                                  // 10674\n    return objects.join(' ');                                                                                          // 10675\n  }                                                                                                                    // 10676\n                                                                                                                       // 10677\n  var i = 1;                                                                                                           // 10678\n  var args = arguments;                                                                                                // 10679\n  var len = args.length;                                                                                               // 10680\n  var str = String(f).replace(formatRegExp, function(x) {                                                              // 10681\n    if (x === '%') return '%';                                                                                         // 10682\n    if (i >= len) return x;                                                                                            // 10683\n    switch (x) {                                                                                                       // 10684\n      case '%s': return String(args[i++]);                                                                             // 10685\n      case '%d': return Number(args[i++]);                                                                             // 10686\n      case '%j':                                                                                                       // 10687\n        try {                                                                                                          // 10688\n          return JSON.stringify(args[i++]);                                                                            // 10689\n        } catch (_) {                                                                                                  // 10690\n          return '[Circular]';                                                                                         // 10691\n        }                                                                                                              // 10692\n      default:                                                                                                         // 10693\n        return x;                                                                                                      // 10694\n    }                                                                                                                  // 10695\n  });                                                                                                                  // 10696\n  for (var x = args[i]; i < len; x = args[++i]) {                                                                      // 10697\n    if (isNull(x) || !isObject(x)) {                                                                                   // 10698\n      str += ' ' + x;                                                                                                  // 10699\n    } else {                                                                                                           // 10700\n      str += ' ' + inspect(x);                                                                                         // 10701\n    }                                                                                                                  // 10702\n  }                                                                                                                    // 10703\n  return str;                                                                                                          // 10704\n};                                                                                                                     // 10705\n                                                                                                                       // 10706\n                                                                                                                       // 10707\nexports.deprecate = function(fn, msg) {                                                                                // 10708\n  if (isUndefined(global.process)) {                                                                                   // 10709\n    return function() {                                                                                                // 10710\n      return exports.deprecate(fn, msg).apply(this, arguments);                                                        // 10711\n    };                                                                                                                 // 10712\n  }                                                                                                                    // 10713\n                                                                                                                       // 10714\n  if (process.noDeprecation === true) {                                                                                // 10715\n    return fn;                                                                                                         // 10716\n  }                                                                                                                    // 10717\n                                                                                                                       // 10718\n  var warned = false;                                                                                                  // 10719\n  function deprecated() {                                                                                              // 10720\n    if (!warned) {                                                                                                     // 10721\n      if (process.throwDeprecation) {                                                                                  // 10722\n        throw new Error(msg);                                                                                          // 10723\n      } else if (process.traceDeprecation) {                                                                           // 10724\n        console.trace(msg);                                                                                            // 10725\n      } else {                                                                                                         // 10726\n        console.error(msg);                                                                                            // 10727\n      }                                                                                                                // 10728\n      warned = true;                                                                                                   // 10729\n    }                                                                                                                  // 10730\n    return fn.apply(this, arguments);                                                                                  // 10731\n  }                                                                                                                    // 10732\n                                                                                                                       // 10733\n  return deprecated;                                                                                                   // 10734\n};                                                                                                                     // 10735\n                                                                                                                       // 10736\n                                                                                                                       // 10737\nvar debugs = {};                                                                                                       // 10738\nvar debugEnviron;                                                                                                      // 10739\nexports.debuglog = function(set) {                                                                                     // 10740\n  if (isUndefined(debugEnviron))                                                                                       // 10741\n    debugEnviron = process.env.NODE_DEBUG || '';                                                                       // 10742\n  set = set.toUpperCase();                                                                                             // 10743\n  if (!debugs[set]) {                                                                                                  // 10744\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {                                                     // 10745\n      var pid = process.pid;                                                                                           // 10746\n      debugs[set] = function() {                                                                                       // 10747\n        var msg = exports.format.apply(exports, arguments);                                                            // 10748\n        console.error('%s %d: %s', set, pid, msg);                                                                     // 10749\n      };                                                                                                               // 10750\n    } else {                                                                                                           // 10751\n      debugs[set] = function() {};                                                                                     // 10752\n    }                                                                                                                  // 10753\n  }                                                                                                                    // 10754\n  return debugs[set];                                                                                                  // 10755\n};                                                                                                                     // 10756\n                                                                                                                       // 10757\n                                                                                                                       // 10758\n                                                                                                                       // 10759\n                                                                                                                       // 10760\nfunction inspect(obj, opts) {                                                                                          // 10761\n  var ctx = {                                                                                                          // 10762\n    seen: [],                                                                                                          // 10763\n    stylize: stylizeNoColor                                                                                            // 10764\n  };                                                                                                                   // 10765\n  if (arguments.length >= 3) ctx.depth = arguments[2];                                                                 // 10766\n  if (arguments.length >= 4) ctx.colors = arguments[3];                                                                // 10767\n  if (isBoolean(opts)) {                                                                                               // 10768\n    ctx.showHidden = opts;                                                                                             // 10769\n  } else if (opts) {                                                                                                   // 10770\n    exports._extend(ctx, opts);                                                                                        // 10771\n  }                                                                                                                    // 10772\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;                                                             // 10773\n  if (isUndefined(ctx.depth)) ctx.depth = 2;                                                                           // 10774\n  if (isUndefined(ctx.colors)) ctx.colors = false;                                                                     // 10775\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;                                                        // 10776\n  if (ctx.colors) ctx.stylize = stylizeWithColor;                                                                      // 10777\n  return formatValue(ctx, obj, ctx.depth);                                                                             // 10778\n}                                                                                                                      // 10779\nexports.inspect = inspect;                                                                                             // 10780\n                                                                                                                       // 10781\n                                                                                                                       // 10782\ninspect.colors = {                                                                                                     // 10783\n  'bold' : [1, 22],                                                                                                    // 10784\n  'italic' : [3, 23],                                                                                                  // 10785\n  'underline' : [4, 24],                                                                                               // 10786\n  'inverse' : [7, 27],                                                                                                 // 10787\n  'white' : [37, 39],                                                                                                  // 10788\n  'grey' : [90, 39],                                                                                                   // 10789\n  'black' : [30, 39],                                                                                                  // 10790\n  'blue' : [34, 39],                                                                                                   // 10791\n  'cyan' : [36, 39],                                                                                                   // 10792\n  'green' : [32, 39],                                                                                                  // 10793\n  'magenta' : [35, 39],                                                                                                // 10794\n  'red' : [31, 39],                                                                                                    // 10795\n  'yellow' : [33, 39]                                                                                                  // 10796\n};                                                                                                                     // 10797\n                                                                                                                       // 10798\ninspect.styles = {                                                                                                     // 10799\n  'special': 'cyan',                                                                                                   // 10800\n  'number': 'yellow',                                                                                                  // 10801\n  'boolean': 'yellow',                                                                                                 // 10802\n  'undefined': 'grey',                                                                                                 // 10803\n  'null': 'bold',                                                                                                      // 10804\n  'string': 'green',                                                                                                   // 10805\n  'date': 'magenta',                                                                                                   // 10806\n  'regexp': 'red'                                                                                                      // 10807\n};                                                                                                                     // 10808\n                                                                                                                       // 10809\n                                                                                                                       // 10810\nfunction stylizeWithColor(str, styleType) {                                                                            // 10811\n  var style = inspect.styles[styleType];                                                                               // 10812\n                                                                                                                       // 10813\n  if (style) {                                                                                                         // 10814\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +                                                          // 10815\n           '\\u001b[' + inspect.colors[style][1] + 'm';                                                                 // 10816\n  } else {                                                                                                             // 10817\n    return str;                                                                                                        // 10818\n  }                                                                                                                    // 10819\n}                                                                                                                      // 10820\n                                                                                                                       // 10821\n                                                                                                                       // 10822\nfunction stylizeNoColor(str, styleType) {                                                                              // 10823\n  return str;                                                                                                          // 10824\n}                                                                                                                      // 10825\n                                                                                                                       // 10826\n                                                                                                                       // 10827\nfunction arrayToHash(array) {                                                                                          // 10828\n  var hash = {};                                                                                                       // 10829\n                                                                                                                       // 10830\n  array.forEach(function(val, idx) {                                                                                   // 10831\n    hash[val] = true;                                                                                                  // 10832\n  });                                                                                                                  // 10833\n                                                                                                                       // 10834\n  return hash;                                                                                                         // 10835\n}                                                                                                                      // 10836\n                                                                                                                       // 10837\n                                                                                                                       // 10838\nfunction formatValue(ctx, value, recurseTimes) {                                                                       // 10839\n  if (ctx.customInspect &&                                                                                             // 10840\n      value &&                                                                                                         // 10841\n      isFunction(value.inspect) &&                                                                                     // 10842\n      value.inspect !== exports.inspect &&                                                                             // 10843\n      !(value.constructor && value.constructor.prototype === value)) {                                                 // 10844\n    var ret = value.inspect(recurseTimes, ctx);                                                                        // 10845\n    if (!isString(ret)) {                                                                                              // 10846\n      ret = formatValue(ctx, ret, recurseTimes);                                                                       // 10847\n    }                                                                                                                  // 10848\n    return ret;                                                                                                        // 10849\n  }                                                                                                                    // 10850\n                                                                                                                       // 10851\n  var primitive = formatPrimitive(ctx, value);                                                                         // 10852\n  if (primitive) {                                                                                                     // 10853\n    return primitive;                                                                                                  // 10854\n  }                                                                                                                    // 10855\n                                                                                                                       // 10856\n  var keys = Object.keys(value);                                                                                       // 10857\n  var visibleKeys = arrayToHash(keys);                                                                                 // 10858\n                                                                                                                       // 10859\n  if (ctx.showHidden) {                                                                                                // 10860\n    keys = Object.getOwnPropertyNames(value);                                                                          // 10861\n  }                                                                                                                    // 10862\n                                                                                                                       // 10863\n  if (isError(value)                                                                                                   // 10864\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {                                         // 10865\n    return formatError(value);                                                                                         // 10866\n  }                                                                                                                    // 10867\n                                                                                                                       // 10868\n  if (keys.length === 0) {                                                                                             // 10869\n    if (isFunction(value)) {                                                                                           // 10870\n      var name = value.name ? ': ' + value.name : '';                                                                  // 10871\n      return ctx.stylize('[Function' + name + ']', 'special');                                                         // 10872\n    }                                                                                                                  // 10873\n    if (isRegExp(value)) {                                                                                             // 10874\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 10875\n    }                                                                                                                  // 10876\n    if (isDate(value)) {                                                                                               // 10877\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');                                                 // 10878\n    }                                                                                                                  // 10879\n    if (isError(value)) {                                                                                              // 10880\n      return formatError(value);                                                                                       // 10881\n    }                                                                                                                  // 10882\n  }                                                                                                                    // 10883\n                                                                                                                       // 10884\n  var base = '', array = false, braces = ['{', '}'];                                                                   // 10885\n                                                                                                                       // 10886\n  if (isArray(value)) {                                                                                                // 10887\n    array = true;                                                                                                      // 10888\n    braces = ['[', ']'];                                                                                               // 10889\n  }                                                                                                                    // 10890\n                                                                                                                       // 10891\n  if (isFunction(value)) {                                                                                             // 10892\n    var n = value.name ? ': ' + value.name : '';                                                                       // 10893\n    base = ' [Function' + n + ']';                                                                                     // 10894\n  }                                                                                                                    // 10895\n                                                                                                                       // 10896\n  if (isRegExp(value)) {                                                                                               // 10897\n    base = ' ' + RegExp.prototype.toString.call(value);                                                                // 10898\n  }                                                                                                                    // 10899\n                                                                                                                       // 10900\n  if (isDate(value)) {                                                                                                 // 10901\n    base = ' ' + Date.prototype.toUTCString.call(value);                                                               // 10902\n  }                                                                                                                    // 10903\n                                                                                                                       // 10904\n  if (isError(value)) {                                                                                                // 10905\n    base = ' ' + formatError(value);                                                                                   // 10906\n  }                                                                                                                    // 10907\n                                                                                                                       // 10908\n  if (keys.length === 0 && (!array || value.length == 0)) {                                                            // 10909\n    return braces[0] + base + braces[1];                                                                               // 10910\n  }                                                                                                                    // 10911\n                                                                                                                       // 10912\n  if (recurseTimes < 0) {                                                                                              // 10913\n    if (isRegExp(value)) {                                                                                             // 10914\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 10915\n    } else {                                                                                                           // 10916\n      return ctx.stylize('[Object]', 'special');                                                                       // 10917\n    }                                                                                                                  // 10918\n  }                                                                                                                    // 10919\n                                                                                                                       // 10920\n  ctx.seen.push(value);                                                                                                // 10921\n                                                                                                                       // 10922\n  var output;                                                                                                          // 10923\n  if (array) {                                                                                                         // 10924\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);                                                 // 10925\n  } else {                                                                                                             // 10926\n    output = keys.map(function(key) {                                                                                  // 10927\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);                                        // 10928\n    });                                                                                                                // 10929\n  }                                                                                                                    // 10930\n                                                                                                                       // 10931\n  ctx.seen.pop();                                                                                                      // 10932\n                                                                                                                       // 10933\n  return reduceToSingleString(output, base, braces);                                                                   // 10934\n}                                                                                                                      // 10935\n                                                                                                                       // 10936\n                                                                                                                       // 10937\nfunction formatPrimitive(ctx, value) {                                                                                 // 10938\n  if (isUndefined(value))                                                                                              // 10939\n    return ctx.stylize('undefined', 'undefined');                                                                      // 10940\n  if (isString(value)) {                                                                                               // 10941\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')                                                    // 10942\n                                             .replace(/'/g, \"\\\\'\")                                                     // 10943\n                                             .replace(/\\\\\"/g, '\"') + '\\'';                                             // 10944\n    return ctx.stylize(simple, 'string');                                                                              // 10945\n  }                                                                                                                    // 10946\n  if (isNumber(value))                                                                                                 // 10947\n    return ctx.stylize('' + value, 'number');                                                                          // 10948\n  if (isBoolean(value))                                                                                                // 10949\n    return ctx.stylize('' + value, 'boolean');                                                                         // 10950\n  if (isNull(value))                                                                                                   // 10951\n    return ctx.stylize('null', 'null');                                                                                // 10952\n}                                                                                                                      // 10953\n                                                                                                                       // 10954\n                                                                                                                       // 10955\nfunction formatError(value) {                                                                                          // 10956\n  return '[' + Error.prototype.toString.call(value) + ']';                                                             // 10957\n}                                                                                                                      // 10958\n                                                                                                                       // 10959\n                                                                                                                       // 10960\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {                                                    // 10961\n  var output = [];                                                                                                     // 10962\n  for (var i = 0, l = value.length; i < l; ++i) {                                                                      // 10963\n    if (hasOwnProperty(value, String(i))) {                                                                            // 10964\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 10965\n          String(i), true));                                                                                           // 10966\n    } else {                                                                                                           // 10967\n      output.push('');                                                                                                 // 10968\n    }                                                                                                                  // 10969\n  }                                                                                                                    // 10970\n  keys.forEach(function(key) {                                                                                         // 10971\n    if (!key.match(/^\\d+$/)) {                                                                                         // 10972\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 10973\n          key, true));                                                                                                 // 10974\n    }                                                                                                                  // 10975\n  });                                                                                                                  // 10976\n  return output;                                                                                                       // 10977\n}                                                                                                                      // 10978\n                                                                                                                       // 10979\n                                                                                                                       // 10980\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {                                           // 10981\n  var name, str, desc;                                                                                                 // 10982\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };                                         // 10983\n  if (desc.get) {                                                                                                      // 10984\n    if (desc.set) {                                                                                                    // 10985\n      str = ctx.stylize('[Getter/Setter]', 'special');                                                                 // 10986\n    } else {                                                                                                           // 10987\n      str = ctx.stylize('[Getter]', 'special');                                                                        // 10988\n    }                                                                                                                  // 10989\n  } else {                                                                                                             // 10990\n    if (desc.set) {                                                                                                    // 10991\n      str = ctx.stylize('[Setter]', 'special');                                                                        // 10992\n    }                                                                                                                  // 10993\n  }                                                                                                                    // 10994\n  if (!hasOwnProperty(visibleKeys, key)) {                                                                             // 10995\n    name = '[' + key + ']';                                                                                            // 10996\n  }                                                                                                                    // 10997\n  if (!str) {                                                                                                          // 10998\n    if (ctx.seen.indexOf(desc.value) < 0) {                                                                            // 10999\n      if (isNull(recurseTimes)) {                                                                                      // 11000\n        str = formatValue(ctx, desc.value, null);                                                                      // 11001\n      } else {                                                                                                         // 11002\n        str = formatValue(ctx, desc.value, recurseTimes - 1);                                                          // 11003\n      }                                                                                                                // 11004\n      if (str.indexOf('\\n') > -1) {                                                                                    // 11005\n        if (array) {                                                                                                   // 11006\n          str = str.split('\\n').map(function(line) {                                                                   // 11007\n            return '  ' + line;                                                                                        // 11008\n          }).join('\\n').substr(2);                                                                                     // 11009\n        } else {                                                                                                       // 11010\n          str = '\\n' + str.split('\\n').map(function(line) {                                                            // 11011\n            return '   ' + line;                                                                                       // 11012\n          }).join('\\n');                                                                                               // 11013\n        }                                                                                                              // 11014\n      }                                                                                                                // 11015\n    } else {                                                                                                           // 11016\n      str = ctx.stylize('[Circular]', 'special');                                                                      // 11017\n    }                                                                                                                  // 11018\n  }                                                                                                                    // 11019\n  if (isUndefined(name)) {                                                                                             // 11020\n    if (array && key.match(/^\\d+$/)) {                                                                                 // 11021\n      return str;                                                                                                      // 11022\n    }                                                                                                                  // 11023\n    name = JSON.stringify('' + key);                                                                                   // 11024\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {                                                                  // 11025\n      name = name.substr(1, name.length - 2);                                                                          // 11026\n      name = ctx.stylize(name, 'name');                                                                                // 11027\n    } else {                                                                                                           // 11028\n      name = name.replace(/'/g, \"\\\\'\")                                                                                 // 11029\n                 .replace(/\\\\\"/g, '\"')                                                                                 // 11030\n                 .replace(/(^\"|\"$)/g, \"'\");                                                                            // 11031\n      name = ctx.stylize(name, 'string');                                                                              // 11032\n    }                                                                                                                  // 11033\n  }                                                                                                                    // 11034\n                                                                                                                       // 11035\n  return name + ': ' + str;                                                                                            // 11036\n}                                                                                                                      // 11037\n                                                                                                                       // 11038\n                                                                                                                       // 11039\nfunction reduceToSingleString(output, base, braces) {                                                                  // 11040\n  var numLinesEst = 0;                                                                                                 // 11041\n  var length = output.reduce(function(prev, cur) {                                                                     // 11042\n    numLinesEst++;                                                                                                     // 11043\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;                                                                         // 11044\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;                                                       // 11045\n  }, 0);                                                                                                               // 11046\n                                                                                                                       // 11047\n  if (length > 60) {                                                                                                   // 11048\n    return braces[0] +                                                                                                 // 11049\n           (base === '' ? '' : base + '\\n ') +                                                                         // 11050\n           ' ' +                                                                                                       // 11051\n           output.join(',\\n  ') +                                                                                      // 11052\n           ' ' +                                                                                                       // 11053\n           braces[1];                                                                                                  // 11054\n  }                                                                                                                    // 11055\n                                                                                                                       // 11056\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];                                                 // 11057\n}                                                                                                                      // 11058\n                                                                                                                       // 11059\n                                                                                                                       // 11060\nfunction isArray(ar) {                                                                                                 // 11061\n  return Array.isArray(ar);                                                                                            // 11062\n}                                                                                                                      // 11063\nexports.isArray = isArray;                                                                                             // 11064\n                                                                                                                       // 11065\nfunction isBoolean(arg) {                                                                                              // 11066\n  return typeof arg === 'boolean';                                                                                     // 11067\n}                                                                                                                      // 11068\nexports.isBoolean = isBoolean;                                                                                         // 11069\n                                                                                                                       // 11070\nfunction isNull(arg) {                                                                                                 // 11071\n  return arg === null;                                                                                                 // 11072\n}                                                                                                                      // 11073\nexports.isNull = isNull;                                                                                               // 11074\n                                                                                                                       // 11075\nfunction isNullOrUndefined(arg) {                                                                                      // 11076\n  return arg == null;                                                                                                  // 11077\n}                                                                                                                      // 11078\nexports.isNullOrUndefined = isNullOrUndefined;                                                                         // 11079\n                                                                                                                       // 11080\nfunction isNumber(arg) {                                                                                               // 11081\n  return typeof arg === 'number';                                                                                      // 11082\n}                                                                                                                      // 11083\nexports.isNumber = isNumber;                                                                                           // 11084\n                                                                                                                       // 11085\nfunction isString(arg) {                                                                                               // 11086\n  return typeof arg === 'string';                                                                                      // 11087\n}                                                                                                                      // 11088\nexports.isString = isString;                                                                                           // 11089\n                                                                                                                       // 11090\nfunction isSymbol(arg) {                                                                                               // 11091\n  return typeof arg === 'symbol';                                                                                      // 11092\n}                                                                                                                      // 11093\nexports.isSymbol = isSymbol;                                                                                           // 11094\n                                                                                                                       // 11095\nfunction isUndefined(arg) {                                                                                            // 11096\n  return arg === void 0;                                                                                               // 11097\n}                                                                                                                      // 11098\nexports.isUndefined = isUndefined;                                                                                     // 11099\n                                                                                                                       // 11100\nfunction isRegExp(re) {                                                                                                // 11101\n  return isObject(re) && objectToString(re) === '[object RegExp]';                                                     // 11102\n}                                                                                                                      // 11103\nexports.isRegExp = isRegExp;                                                                                           // 11104\n                                                                                                                       // 11105\nfunction isObject(arg) {                                                                                               // 11106\n  return typeof arg === 'object' && arg !== null;                                                                      // 11107\n}                                                                                                                      // 11108\nexports.isObject = isObject;                                                                                           // 11109\n                                                                                                                       // 11110\nfunction isDate(d) {                                                                                                   // 11111\n  return isObject(d) && objectToString(d) === '[object Date]';                                                         // 11112\n}                                                                                                                      // 11113\nexports.isDate = isDate;                                                                                               // 11114\n                                                                                                                       // 11115\nfunction isError(e) {                                                                                                  // 11116\n  return isObject(e) &&                                                                                                // 11117\n      (objectToString(e) === '[object Error]' || e instanceof Error);                                                  // 11118\n}                                                                                                                      // 11119\nexports.isError = isError;                                                                                             // 11120\n                                                                                                                       // 11121\nfunction isFunction(arg) {                                                                                             // 11122\n  return typeof arg === 'function';                                                                                    // 11123\n}                                                                                                                      // 11124\nexports.isFunction = isFunction;                                                                                       // 11125\n                                                                                                                       // 11126\nfunction isPrimitive(arg) {                                                                                            // 11127\n  return arg === null ||                                                                                               // 11128\n         typeof arg === 'boolean' ||                                                                                   // 11129\n         typeof arg === 'number' ||                                                                                    // 11130\n         typeof arg === 'string' ||                                                                                    // 11131\n         typeof arg === 'symbol' ||  // ES6 symbol                                                                     // 11132\n         typeof arg === 'undefined';                                                                                   // 11133\n}                                                                                                                      // 11134\nexports.isPrimitive = isPrimitive;                                                                                     // 11135\n                                                                                                                       // 11136\nexports.isBuffer = require('./support/isBuffer');                                                                      // 11137\n                                                                                                                       // 11138\nfunction objectToString(o) {                                                                                           // 11139\n  return Object.prototype.toString.call(o);                                                                            // 11140\n}                                                                                                                      // 11141\n                                                                                                                       // 11142\n                                                                                                                       // 11143\nfunction pad(n) {                                                                                                      // 11144\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);                                                               // 11145\n}                                                                                                                      // 11146\n                                                                                                                       // 11147\n                                                                                                                       // 11148\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',                                           // 11149\n              'Oct', 'Nov', 'Dec'];                                                                                    // 11150\n                                                                                                                       // 11151\nfunction timestamp() {                                                                                                 // 11152\n  var d = new Date();                                                                                                  // 11153\n  var time = [pad(d.getHours()),                                                                                       // 11154\n              pad(d.getMinutes()),                                                                                     // 11155\n              pad(d.getSeconds())].join(':');                                                                          // 11156\n  return [d.getDate(), months[d.getMonth()], time].join(' ');                                                          // 11157\n}                                                                                                                      // 11158\n                                                                                                                       // 11159\n                                                                                                                       // 11160\nexports.log = function() {                                                                                             // 11161\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));                                       // 11162\n};                                                                                                                     // 11163\n                                                                                                                       // 11164\n                                                                                                                       // 11165\n                                                                                                                       // 11166\nexports.inherits = require('inherits');                                                                                // 11167\n                                                                                                                       // 11168\nexports._extend = function(origin, add) {                                                                              // 11169\n  if (!add || !isObject(add)) return origin;                                                                           // 11170\n                                                                                                                       // 11171\n  var keys = Object.keys(add);                                                                                         // 11172\n  var i = keys.length;                                                                                                 // 11173\n  while (i--) {                                                                                                        // 11174\n    origin[keys[i]] = add[keys[i]];                                                                                    // 11175\n  }                                                                                                                    // 11176\n  return origin;                                                                                                       // 11177\n};                                                                                                                     // 11178\n                                                                                                                       // 11179\nfunction hasOwnProperty(obj, prop) {                                                                                   // 11180\n  return Object.prototype.hasOwnProperty.call(obj, prop);                                                              // 11181\n}                                                                                                                      // 11182\n                                                                                                                       // 11183\n}).call(this,require(\"FWaASH\"),typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})       // 11184\n},{\"./support/isBuffer\":79,\"FWaASH\":73,\"inherits\":72}],81:[function(require,module,exports){                           // 11185\n(function() {                                                                                                          // 11186\n  var XMLAttribute, create;                                                                                            // 11187\n                                                                                                                       // 11188\n  create = require('lodash/object/create');                                                                            // 11189\n                                                                                                                       // 11190\n  module.exports = XMLAttribute = (function() {                                                                        // 11191\n    function XMLAttribute(parent, name, value) {                                                                       // 11192\n      this.stringify = parent.stringify;                                                                               // 11193\n      if (name == null) {                                                                                              // 11194\n        throw new Error(\"Missing attribute name of element \" + parent.name);                                           // 11195\n      }                                                                                                                // 11196\n      if (value == null) {                                                                                             // 11197\n        throw new Error(\"Missing attribute value for attribute \" + name + \" of element \" + parent.name);               // 11198\n      }                                                                                                                // 11199\n      this.name = this.stringify.attName(name);                                                                        // 11200\n      this.value = this.stringify.attValue(value);                                                                     // 11201\n    }                                                                                                                  // 11202\n                                                                                                                       // 11203\n    XMLAttribute.prototype.clone = function() {                                                                        // 11204\n      return create(XMLAttribute.prototype, this);                                                                     // 11205\n    };                                                                                                                 // 11206\n                                                                                                                       // 11207\n    XMLAttribute.prototype.toString = function(options, level) {                                                       // 11208\n      return ' ' + this.name + '=\"' + this.value + '\"';                                                                // 11209\n    };                                                                                                                 // 11210\n                                                                                                                       // 11211\n    return XMLAttribute;                                                                                               // 11212\n                                                                                                                       // 11213\n  })();                                                                                                                // 11214\n                                                                                                                       // 11215\n}).call(this);                                                                                                         // 11216\n                                                                                                                       // 11217\n},{\"lodash/object/create\":140}],82:[function(require,module,exports){                                                  // 11218\n(function() {                                                                                                          // 11219\n  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;                                              // 11220\n                                                                                                                       // 11221\n  XMLStringifier = require('./XMLStringifier');                                                                        // 11222\n                                                                                                                       // 11223\n  XMLDeclaration = require('./XMLDeclaration');                                                                        // 11224\n                                                                                                                       // 11225\n  XMLDocType = require('./XMLDocType');                                                                                // 11226\n                                                                                                                       // 11227\n  XMLElement = require('./XMLElement');                                                                                // 11228\n                                                                                                                       // 11229\n  module.exports = XMLBuilder = (function() {                                                                          // 11230\n    function XMLBuilder(name, options) {                                                                               // 11231\n      var root, temp;                                                                                                  // 11232\n      if (name == null) {                                                                                              // 11233\n        throw new Error(\"Root element needs a name\");                                                                  // 11234\n      }                                                                                                                // 11235\n      if (options == null) {                                                                                           // 11236\n        options = {};                                                                                                  // 11237\n      }                                                                                                                // 11238\n      this.options = options;                                                                                          // 11239\n      this.stringify = new XMLStringifier(options);                                                                    // 11240\n      temp = new XMLElement(this, 'doc');                                                                              // 11241\n      root = temp.element(name);                                                                                       // 11242\n      root.isRoot = true;                                                                                              // 11243\n      root.documentObject = this;                                                                                      // 11244\n      this.rootObject = root;                                                                                          // 11245\n      if (!options.headless) {                                                                                         // 11246\n        root.declaration(options);                                                                                     // 11247\n        if ((options.pubID != null) || (options.sysID != null)) {                                                      // 11248\n          root.doctype(options);                                                                                       // 11249\n        }                                                                                                              // 11250\n      }                                                                                                                // 11251\n    }                                                                                                                  // 11252\n                                                                                                                       // 11253\n    XMLBuilder.prototype.root = function() {                                                                           // 11254\n      return this.rootObject;                                                                                          // 11255\n    };                                                                                                                 // 11256\n                                                                                                                       // 11257\n    XMLBuilder.prototype.end = function(options) {                                                                     // 11258\n      return this.toString(options);                                                                                   // 11259\n    };                                                                                                                 // 11260\n                                                                                                                       // 11261\n    XMLBuilder.prototype.toString = function(options) {                                                                // 11262\n      var indent, newline, offset, pretty, r, ref, ref1, ref2;                                                         // 11263\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11264\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11265\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11266\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 11267\n      r = '';                                                                                                          // 11268\n      if (this.xmldec != null) {                                                                                       // 11269\n        r += this.xmldec.toString(options);                                                                            // 11270\n      }                                                                                                                // 11271\n      if (this.doctype != null) {                                                                                      // 11272\n        r += this.doctype.toString(options);                                                                           // 11273\n      }                                                                                                                // 11274\n      r += this.rootObject.toString(options);                                                                          // 11275\n      if (pretty && r.slice(-newline.length) === newline) {                                                            // 11276\n        r = r.slice(0, -newline.length);                                                                               // 11277\n      }                                                                                                                // 11278\n      return r;                                                                                                        // 11279\n    };                                                                                                                 // 11280\n                                                                                                                       // 11281\n    return XMLBuilder;                                                                                                 // 11282\n                                                                                                                       // 11283\n  })();                                                                                                                // 11284\n                                                                                                                       // 11285\n}).call(this);                                                                                                         // 11286\n                                                                                                                       // 11287\n},{\"./XMLDeclaration\":89,\"./XMLDocType\":90,\"./XMLElement\":91,\"./XMLStringifier\":95}],83:[function(require,module,exports){\n(function() {                                                                                                          // 11289\n  var XMLCData, XMLNode, create,                                                                                       // 11290\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;                                                                                       // 11292\n                                                                                                                       // 11293\n  create = require('lodash/object/create');                                                                            // 11294\n                                                                                                                       // 11295\n  XMLNode = require('./XMLNode');                                                                                      // 11296\n                                                                                                                       // 11297\n  module.exports = XMLCData = (function(superClass) {                                                                  // 11298\n    extend(XMLCData, superClass);                                                                                      // 11299\n                                                                                                                       // 11300\n    function XMLCData(parent, text) {                                                                                  // 11301\n      XMLCData.__super__.constructor.call(this, parent);                                                               // 11302\n      if (text == null) {                                                                                              // 11303\n        throw new Error(\"Missing CDATA text\");                                                                         // 11304\n      }                                                                                                                // 11305\n      this.text = this.stringify.cdata(text);                                                                          // 11306\n    }                                                                                                                  // 11307\n                                                                                                                       // 11308\n    XMLCData.prototype.clone = function() {                                                                            // 11309\n      return create(XMLCData.prototype, this);                                                                         // 11310\n    };                                                                                                                 // 11311\n                                                                                                                       // 11312\n    XMLCData.prototype.toString = function(options, level) {                                                           // 11313\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11314\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11315\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11316\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11317\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 11318\n      level || (level = 0);                                                                                            // 11319\n      space = new Array(level + offset + 1).join(indent);                                                              // 11320\n      r = '';                                                                                                          // 11321\n      if (pretty) {                                                                                                    // 11322\n        r += space;                                                                                                    // 11323\n      }                                                                                                                // 11324\n      r += '<![CDATA[' + this.text + ']]>';                                                                            // 11325\n      if (pretty) {                                                                                                    // 11326\n        r += newline;                                                                                                  // 11327\n      }                                                                                                                // 11328\n      return r;                                                                                                        // 11329\n    };                                                                                                                 // 11330\n                                                                                                                       // 11331\n    return XMLCData;                                                                                                   // 11332\n                                                                                                                       // 11333\n  })(XMLNode);                                                                                                         // 11334\n                                                                                                                       // 11335\n}).call(this);                                                                                                         // 11336\n                                                                                                                       // 11337\n},{\"./XMLNode\":92,\"lodash/object/create\":140}],84:[function(require,module,exports){                                   // 11338\n(function() {                                                                                                          // 11339\n  var XMLComment, XMLNode, create,                                                                                     // 11340\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;                                                                                       // 11342\n                                                                                                                       // 11343\n  create = require('lodash/object/create');                                                                            // 11344\n                                                                                                                       // 11345\n  XMLNode = require('./XMLNode');                                                                                      // 11346\n                                                                                                                       // 11347\n  module.exports = XMLComment = (function(superClass) {                                                                // 11348\n    extend(XMLComment, superClass);                                                                                    // 11349\n                                                                                                                       // 11350\n    function XMLComment(parent, text) {                                                                                // 11351\n      XMLComment.__super__.constructor.call(this, parent);                                                             // 11352\n      if (text == null) {                                                                                              // 11353\n        throw new Error(\"Missing comment text\");                                                                       // 11354\n      }                                                                                                                // 11355\n      this.text = this.stringify.comment(text);                                                                        // 11356\n    }                                                                                                                  // 11357\n                                                                                                                       // 11358\n    XMLComment.prototype.clone = function() {                                                                          // 11359\n      return create(XMLComment.prototype, this);                                                                       // 11360\n    };                                                                                                                 // 11361\n                                                                                                                       // 11362\n    XMLComment.prototype.toString = function(options, level) {                                                         // 11363\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11364\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11365\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11366\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11367\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 11368\n      level || (level = 0);                                                                                            // 11369\n      space = new Array(level + offset + 1).join(indent);                                                              // 11370\n      r = '';                                                                                                          // 11371\n      if (pretty) {                                                                                                    // 11372\n        r += space;                                                                                                    // 11373\n      }                                                                                                                // 11374\n      r += '<!-- ' + this.text + ' -->';                                                                               // 11375\n      if (pretty) {                                                                                                    // 11376\n        r += newline;                                                                                                  // 11377\n      }                                                                                                                // 11378\n      return r;                                                                                                        // 11379\n    };                                                                                                                 // 11380\n                                                                                                                       // 11381\n    return XMLComment;                                                                                                 // 11382\n                                                                                                                       // 11383\n  })(XMLNode);                                                                                                         // 11384\n                                                                                                                       // 11385\n}).call(this);                                                                                                         // 11386\n                                                                                                                       // 11387\n},{\"./XMLNode\":92,\"lodash/object/create\":140}],85:[function(require,module,exports){                                   // 11388\n(function() {                                                                                                          // 11389\n  var XMLDTDAttList, create;                                                                                           // 11390\n                                                                                                                       // 11391\n  create = require('lodash/object/create');                                                                            // 11392\n                                                                                                                       // 11393\n  module.exports = XMLDTDAttList = (function() {                                                                       // 11394\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {        // 11395\n      this.stringify = parent.stringify;                                                                               // 11396\n      if (elementName == null) {                                                                                       // 11397\n        throw new Error(\"Missing DTD element name\");                                                                   // 11398\n      }                                                                                                                // 11399\n      if (attributeName == null) {                                                                                     // 11400\n        throw new Error(\"Missing DTD attribute name\");                                                                 // 11401\n      }                                                                                                                // 11402\n      if (!attributeType) {                                                                                            // 11403\n        throw new Error(\"Missing DTD attribute type\");                                                                 // 11404\n      }                                                                                                                // 11405\n      if (!defaultValueType) {                                                                                         // 11406\n        throw new Error(\"Missing DTD attribute default\");                                                              // 11407\n      }                                                                                                                // 11408\n      if (defaultValueType.indexOf('#') !== 0) {                                                                       // 11409\n        defaultValueType = '#' + defaultValueType;                                                                     // 11410\n      }                                                                                                                // 11411\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {                                         // 11412\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT\");              // 11413\n      }                                                                                                                // 11414\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {                                            // 11415\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT\");                                           // 11416\n      }                                                                                                                // 11417\n      this.elementName = this.stringify.eleName(elementName);                                                          // 11418\n      this.attributeName = this.stringify.attName(attributeName);                                                      // 11419\n      this.attributeType = this.stringify.dtdAttType(attributeType);                                                   // 11420\n      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);                                                  // 11421\n      this.defaultValueType = defaultValueType;                                                                        // 11422\n    }                                                                                                                  // 11423\n                                                                                                                       // 11424\n    XMLDTDAttList.prototype.clone = function() {                                                                       // 11425\n      return create(XMLDTDAttList.prototype, this);                                                                    // 11426\n    };                                                                                                                 // 11427\n                                                                                                                       // 11428\n    XMLDTDAttList.prototype.toString = function(options, level) {                                                      // 11429\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11430\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11431\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11432\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11433\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 11434\n      level || (level = 0);                                                                                            // 11435\n      space = new Array(level + offset + 1).join(indent);                                                              // 11436\n      r = '';                                                                                                          // 11437\n      if (pretty) {                                                                                                    // 11438\n        r += space;                                                                                                    // 11439\n      }                                                                                                                // 11440\n      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;                      // 11441\n      if (this.defaultValueType !== '#DEFAULT') {                                                                      // 11442\n        r += ' ' + this.defaultValueType;                                                                              // 11443\n      }                                                                                                                // 11444\n      if (this.defaultValue) {                                                                                         // 11445\n        r += ' \"' + this.defaultValue + '\"';                                                                           // 11446\n      }                                                                                                                // 11447\n      r += '>';                                                                                                        // 11448\n      if (pretty) {                                                                                                    // 11449\n        r += newline;                                                                                                  // 11450\n      }                                                                                                                // 11451\n      return r;                                                                                                        // 11452\n    };                                                                                                                 // 11453\n                                                                                                                       // 11454\n    return XMLDTDAttList;                                                                                              // 11455\n                                                                                                                       // 11456\n  })();                                                                                                                // 11457\n                                                                                                                       // 11458\n}).call(this);                                                                                                         // 11459\n                                                                                                                       // 11460\n},{\"lodash/object/create\":140}],86:[function(require,module,exports){                                                  // 11461\n(function() {                                                                                                          // 11462\n  var XMLDTDElement, create, isArray;                                                                                  // 11463\n                                                                                                                       // 11464\n  create = require('lodash/object/create');                                                                            // 11465\n                                                                                                                       // 11466\n  isArray = require('lodash/lang/isArray');                                                                            // 11467\n                                                                                                                       // 11468\n  module.exports = XMLDTDElement = (function() {                                                                       // 11469\n    function XMLDTDElement(parent, name, value) {                                                                      // 11470\n      this.stringify = parent.stringify;                                                                               // 11471\n      if (name == null) {                                                                                              // 11472\n        throw new Error(\"Missing DTD element name\");                                                                   // 11473\n      }                                                                                                                // 11474\n      if (!value) {                                                                                                    // 11475\n        value = '(#PCDATA)';                                                                                           // 11476\n      }                                                                                                                // 11477\n      if (isArray(value)) {                                                                                            // 11478\n        value = '(' + value.join(',') + ')';                                                                           // 11479\n      }                                                                                                                // 11480\n      this.name = this.stringify.eleName(name);                                                                        // 11481\n      this.value = this.stringify.dtdElementValue(value);                                                              // 11482\n    }                                                                                                                  // 11483\n                                                                                                                       // 11484\n    XMLDTDElement.prototype.clone = function() {                                                                       // 11485\n      return create(XMLDTDElement.prototype, this);                                                                    // 11486\n    };                                                                                                                 // 11487\n                                                                                                                       // 11488\n    XMLDTDElement.prototype.toString = function(options, level) {                                                      // 11489\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11490\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11491\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11492\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11493\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 11494\n      level || (level = 0);                                                                                            // 11495\n      space = new Array(level + offset + 1).join(indent);                                                              // 11496\n      r = '';                                                                                                          // 11497\n      if (pretty) {                                                                                                    // 11498\n        r += space;                                                                                                    // 11499\n      }                                                                                                                // 11500\n      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';                                                          // 11501\n      if (pretty) {                                                                                                    // 11502\n        r += newline;                                                                                                  // 11503\n      }                                                                                                                // 11504\n      return r;                                                                                                        // 11505\n    };                                                                                                                 // 11506\n                                                                                                                       // 11507\n    return XMLDTDElement;                                                                                              // 11508\n                                                                                                                       // 11509\n  })();                                                                                                                // 11510\n                                                                                                                       // 11511\n}).call(this);                                                                                                         // 11512\n                                                                                                                       // 11513\n},{\"lodash/lang/isArray\":132,\"lodash/object/create\":140}],87:[function(require,module,exports){                        // 11514\n(function() {                                                                                                          // 11515\n  var XMLDTDEntity, create, isObject;                                                                                  // 11516\n                                                                                                                       // 11517\n  create = require('lodash/object/create');                                                                            // 11518\n                                                                                                                       // 11519\n  isObject = require('lodash/lang/isObject');                                                                          // 11520\n                                                                                                                       // 11521\n  module.exports = XMLDTDEntity = (function() {                                                                        // 11522\n    function XMLDTDEntity(parent, pe, name, value) {                                                                   // 11523\n      this.stringify = parent.stringify;                                                                               // 11524\n      if (name == null) {                                                                                              // 11525\n        throw new Error(\"Missing entity name\");                                                                        // 11526\n      }                                                                                                                // 11527\n      if (value == null) {                                                                                             // 11528\n        throw new Error(\"Missing entity value\");                                                                       // 11529\n      }                                                                                                                // 11530\n      this.pe = !!pe;                                                                                                  // 11531\n      this.name = this.stringify.eleName(name);                                                                        // 11532\n      if (!isObject(value)) {                                                                                          // 11533\n        this.value = this.stringify.dtdEntityValue(value);                                                             // 11534\n      } else {                                                                                                         // 11535\n        if (!value.pubID && !value.sysID) {                                                                            // 11536\n          throw new Error(\"Public and/or system identifiers are required for an external entity\");                     // 11537\n        }                                                                                                              // 11538\n        if (value.pubID && !value.sysID) {                                                                             // 11539\n          throw new Error(\"System identifier is required for a public external entity\");                               // 11540\n        }                                                                                                              // 11541\n        if (value.pubID != null) {                                                                                     // 11542\n          this.pubID = this.stringify.dtdPubID(value.pubID);                                                           // 11543\n        }                                                                                                              // 11544\n        if (value.sysID != null) {                                                                                     // 11545\n          this.sysID = this.stringify.dtdSysID(value.sysID);                                                           // 11546\n        }                                                                                                              // 11547\n        if (value.nData != null) {                                                                                     // 11548\n          this.nData = this.stringify.dtdNData(value.nData);                                                           // 11549\n        }                                                                                                              // 11550\n        if (this.pe && this.nData) {                                                                                   // 11551\n          throw new Error(\"Notation declaration is not allowed in a parameter entity\");                                // 11552\n        }                                                                                                              // 11553\n      }                                                                                                                // 11554\n    }                                                                                                                  // 11555\n                                                                                                                       // 11556\n    XMLDTDEntity.prototype.clone = function() {                                                                        // 11557\n      return create(XMLDTDEntity.prototype, this);                                                                     // 11558\n    };                                                                                                                 // 11559\n                                                                                                                       // 11560\n    XMLDTDEntity.prototype.toString = function(options, level) {                                                       // 11561\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11562\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11563\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11564\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11565\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 11566\n      level || (level = 0);                                                                                            // 11567\n      space = new Array(level + offset + 1).join(indent);                                                              // 11568\n      r = '';                                                                                                          // 11569\n      if (pretty) {                                                                                                    // 11570\n        r += space;                                                                                                    // 11571\n      }                                                                                                                // 11572\n      r += '<!ENTITY';                                                                                                 // 11573\n      if (this.pe) {                                                                                                   // 11574\n        r += ' %';                                                                                                     // 11575\n      }                                                                                                                // 11576\n      r += ' ' + this.name;                                                                                            // 11577\n      if (this.value) {                                                                                                // 11578\n        r += ' \"' + this.value + '\"';                                                                                  // 11579\n      } else {                                                                                                         // 11580\n        if (this.pubID && this.sysID) {                                                                                // 11581\n          r += ' PUBLIC \"' + this.pubID + '\" \"' + this.sysID + '\"';                                                    // 11582\n        } else if (this.sysID) {                                                                                       // 11583\n          r += ' SYSTEM \"' + this.sysID + '\"';                                                                         // 11584\n        }                                                                                                              // 11585\n        if (this.nData) {                                                                                              // 11586\n          r += ' NDATA ' + this.nData;                                                                                 // 11587\n        }                                                                                                              // 11588\n      }                                                                                                                // 11589\n      r += '>';                                                                                                        // 11590\n      if (pretty) {                                                                                                    // 11591\n        r += newline;                                                                                                  // 11592\n      }                                                                                                                // 11593\n      return r;                                                                                                        // 11594\n    };                                                                                                                 // 11595\n                                                                                                                       // 11596\n    return XMLDTDEntity;                                                                                               // 11597\n                                                                                                                       // 11598\n  })();                                                                                                                // 11599\n                                                                                                                       // 11600\n}).call(this);                                                                                                         // 11601\n                                                                                                                       // 11602\n},{\"lodash/lang/isObject\":136,\"lodash/object/create\":140}],88:[function(require,module,exports){                       // 11603\n(function() {                                                                                                          // 11604\n  var XMLDTDNotation, create;                                                                                          // 11605\n                                                                                                                       // 11606\n  create = require('lodash/object/create');                                                                            // 11607\n                                                                                                                       // 11608\n  module.exports = XMLDTDNotation = (function() {                                                                      // 11609\n    function XMLDTDNotation(parent, name, value) {                                                                     // 11610\n      this.stringify = parent.stringify;                                                                               // 11611\n      if (name == null) {                                                                                              // 11612\n        throw new Error(\"Missing notation name\");                                                                      // 11613\n      }                                                                                                                // 11614\n      if (!value.pubID && !value.sysID) {                                                                              // 11615\n        throw new Error(\"Public or system identifiers are required for an external entity\");                           // 11616\n      }                                                                                                                // 11617\n      this.name = this.stringify.eleName(name);                                                                        // 11618\n      if (value.pubID != null) {                                                                                       // 11619\n        this.pubID = this.stringify.dtdPubID(value.pubID);                                                             // 11620\n      }                                                                                                                // 11621\n      if (value.sysID != null) {                                                                                       // 11622\n        this.sysID = this.stringify.dtdSysID(value.sysID);                                                             // 11623\n      }                                                                                                                // 11624\n    }                                                                                                                  // 11625\n                                                                                                                       // 11626\n    XMLDTDNotation.prototype.clone = function() {                                                                      // 11627\n      return create(XMLDTDNotation.prototype, this);                                                                   // 11628\n    };                                                                                                                 // 11629\n                                                                                                                       // 11630\n    XMLDTDNotation.prototype.toString = function(options, level) {                                                     // 11631\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11632\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11633\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11634\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11635\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 11636\n      level || (level = 0);                                                                                            // 11637\n      space = new Array(level + offset + 1).join(indent);                                                              // 11638\n      r = '';                                                                                                          // 11639\n      if (pretty) {                                                                                                    // 11640\n        r += space;                                                                                                    // 11641\n      }                                                                                                                // 11642\n      r += '<!NOTATION ' + this.name;                                                                                  // 11643\n      if (this.pubID && this.sysID) {                                                                                  // 11644\n        r += ' PUBLIC \"' + this.pubID + '\" \"' + this.sysID + '\"';                                                      // 11645\n      } else if (this.pubID) {                                                                                         // 11646\n        r += ' PUBLIC \"' + this.pubID + '\"';                                                                           // 11647\n      } else if (this.sysID) {                                                                                         // 11648\n        r += ' SYSTEM \"' + this.sysID + '\"';                                                                           // 11649\n      }                                                                                                                // 11650\n      r += '>';                                                                                                        // 11651\n      if (pretty) {                                                                                                    // 11652\n        r += newline;                                                                                                  // 11653\n      }                                                                                                                // 11654\n      return r;                                                                                                        // 11655\n    };                                                                                                                 // 11656\n                                                                                                                       // 11657\n    return XMLDTDNotation;                                                                                             // 11658\n                                                                                                                       // 11659\n  })();                                                                                                                // 11660\n                                                                                                                       // 11661\n}).call(this);                                                                                                         // 11662\n                                                                                                                       // 11663\n},{\"lodash/object/create\":140}],89:[function(require,module,exports){                                                  // 11664\n(function() {                                                                                                          // 11665\n  var XMLDeclaration, XMLNode, create, isObject,                                                                       // 11666\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;                                                                                       // 11668\n                                                                                                                       // 11669\n  create = require('lodash/object/create');                                                                            // 11670\n                                                                                                                       // 11671\n  isObject = require('lodash/lang/isObject');                                                                          // 11672\n                                                                                                                       // 11673\n  XMLNode = require('./XMLNode');                                                                                      // 11674\n                                                                                                                       // 11675\n  module.exports = XMLDeclaration = (function(superClass) {                                                            // 11676\n    extend(XMLDeclaration, superClass);                                                                                // 11677\n                                                                                                                       // 11678\n    function XMLDeclaration(parent, version, encoding, standalone) {                                                   // 11679\n      var ref;                                                                                                         // 11680\n      XMLDeclaration.__super__.constructor.call(this, parent);                                                         // 11681\n      if (isObject(version)) {                                                                                         // 11682\n        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;                    // 11683\n      }                                                                                                                // 11684\n      if (!version) {                                                                                                  // 11685\n        version = '1.0';                                                                                               // 11686\n      }                                                                                                                // 11687\n      if (version != null) {                                                                                           // 11688\n        this.version = this.stringify.xmlVersion(version);                                                             // 11689\n      }                                                                                                                // 11690\n      if (encoding != null) {                                                                                          // 11691\n        this.encoding = this.stringify.xmlEncoding(encoding);                                                          // 11692\n      }                                                                                                                // 11693\n      if (standalone != null) {                                                                                        // 11694\n        this.standalone = this.stringify.xmlStandalone(standalone);                                                    // 11695\n      }                                                                                                                // 11696\n    }                                                                                                                  // 11697\n                                                                                                                       // 11698\n    XMLDeclaration.prototype.clone = function() {                                                                      // 11699\n      return create(XMLDeclaration.prototype, this);                                                                   // 11700\n    };                                                                                                                 // 11701\n                                                                                                                       // 11702\n    XMLDeclaration.prototype.toString = function(options, level) {                                                     // 11703\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11704\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11705\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11706\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11707\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 11708\n      level || (level = 0);                                                                                            // 11709\n      space = new Array(level + offset + 1).join(indent);                                                              // 11710\n      r = '';                                                                                                          // 11711\n      if (pretty) {                                                                                                    // 11712\n        r += space;                                                                                                    // 11713\n      }                                                                                                                // 11714\n      r += '<?xml';                                                                                                    // 11715\n      if (this.version != null) {                                                                                      // 11716\n        r += ' version=\"' + this.version + '\"';                                                                        // 11717\n      }                                                                                                                // 11718\n      if (this.encoding != null) {                                                                                     // 11719\n        r += ' encoding=\"' + this.encoding + '\"';                                                                      // 11720\n      }                                                                                                                // 11721\n      if (this.standalone != null) {                                                                                   // 11722\n        r += ' standalone=\"' + this.standalone + '\"';                                                                  // 11723\n      }                                                                                                                // 11724\n      r += '?>';                                                                                                       // 11725\n      if (pretty) {                                                                                                    // 11726\n        r += newline;                                                                                                  // 11727\n      }                                                                                                                // 11728\n      return r;                                                                                                        // 11729\n    };                                                                                                                 // 11730\n                                                                                                                       // 11731\n    return XMLDeclaration;                                                                                             // 11732\n                                                                                                                       // 11733\n  })(XMLNode);                                                                                                         // 11734\n                                                                                                                       // 11735\n}).call(this);                                                                                                         // 11736\n                                                                                                                       // 11737\n},{\"./XMLNode\":92,\"lodash/lang/isObject\":136,\"lodash/object/create\":140}],90:[function(require,module,exports){        // 11738\n(function() {                                                                                                          // 11739\n  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;\n                                                                                                                       // 11741\n  create = require('lodash/object/create');                                                                            // 11742\n                                                                                                                       // 11743\n  isObject = require('lodash/lang/isObject');                                                                          // 11744\n                                                                                                                       // 11745\n  XMLCData = require('./XMLCData');                                                                                    // 11746\n                                                                                                                       // 11747\n  XMLComment = require('./XMLComment');                                                                                // 11748\n                                                                                                                       // 11749\n  XMLDTDAttList = require('./XMLDTDAttList');                                                                          // 11750\n                                                                                                                       // 11751\n  XMLDTDEntity = require('./XMLDTDEntity');                                                                            // 11752\n                                                                                                                       // 11753\n  XMLDTDElement = require('./XMLDTDElement');                                                                          // 11754\n                                                                                                                       // 11755\n  XMLDTDNotation = require('./XMLDTDNotation');                                                                        // 11756\n                                                                                                                       // 11757\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');                                                    // 11758\n                                                                                                                       // 11759\n  module.exports = XMLDocType = (function() {                                                                          // 11760\n    function XMLDocType(parent, pubID, sysID) {                                                                        // 11761\n      var ref, ref1;                                                                                                   // 11762\n      this.documentObject = parent;                                                                                    // 11763\n      this.stringify = this.documentObject.stringify;                                                                  // 11764\n      this.children = [];                                                                                              // 11765\n      if (isObject(pubID)) {                                                                                           // 11766\n        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;                                                             // 11767\n      }                                                                                                                // 11768\n      if (sysID == null) {                                                                                             // 11769\n        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];                                                       // 11770\n      }                                                                                                                // 11771\n      if (pubID != null) {                                                                                             // 11772\n        this.pubID = this.stringify.dtdPubID(pubID);                                                                   // 11773\n      }                                                                                                                // 11774\n      if (sysID != null) {                                                                                             // 11775\n        this.sysID = this.stringify.dtdSysID(sysID);                                                                   // 11776\n      }                                                                                                                // 11777\n    }                                                                                                                  // 11778\n                                                                                                                       // 11779\n    XMLDocType.prototype.clone = function() {                                                                          // 11780\n      return create(XMLDocType.prototype, this);                                                                       // 11781\n    };                                                                                                                 // 11782\n                                                                                                                       // 11783\n    XMLDocType.prototype.element = function(name, value) {                                                             // 11784\n      var child;                                                                                                       // 11785\n      child = new XMLDTDElement(this, name, value);                                                                    // 11786\n      this.children.push(child);                                                                                       // 11787\n      return this;                                                                                                     // 11788\n    };                                                                                                                 // 11789\n                                                                                                                       // 11790\n    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var child;                                                                                                       // 11792\n      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);      // 11793\n      this.children.push(child);                                                                                       // 11794\n      return this;                                                                                                     // 11795\n    };                                                                                                                 // 11796\n                                                                                                                       // 11797\n    XMLDocType.prototype.entity = function(name, value) {                                                              // 11798\n      var child;                                                                                                       // 11799\n      child = new XMLDTDEntity(this, false, name, value);                                                              // 11800\n      this.children.push(child);                                                                                       // 11801\n      return this;                                                                                                     // 11802\n    };                                                                                                                 // 11803\n                                                                                                                       // 11804\n    XMLDocType.prototype.pEntity = function(name, value) {                                                             // 11805\n      var child;                                                                                                       // 11806\n      child = new XMLDTDEntity(this, true, name, value);                                                               // 11807\n      this.children.push(child);                                                                                       // 11808\n      return this;                                                                                                     // 11809\n    };                                                                                                                 // 11810\n                                                                                                                       // 11811\n    XMLDocType.prototype.notation = function(name, value) {                                                            // 11812\n      var child;                                                                                                       // 11813\n      child = new XMLDTDNotation(this, name, value);                                                                   // 11814\n      this.children.push(child);                                                                                       // 11815\n      return this;                                                                                                     // 11816\n    };                                                                                                                 // 11817\n                                                                                                                       // 11818\n    XMLDocType.prototype.cdata = function(value) {                                                                     // 11819\n      var child;                                                                                                       // 11820\n      child = new XMLCData(this, value);                                                                               // 11821\n      this.children.push(child);                                                                                       // 11822\n      return this;                                                                                                     // 11823\n    };                                                                                                                 // 11824\n                                                                                                                       // 11825\n    XMLDocType.prototype.comment = function(value) {                                                                   // 11826\n      var child;                                                                                                       // 11827\n      child = new XMLComment(this, value);                                                                             // 11828\n      this.children.push(child);                                                                                       // 11829\n      return this;                                                                                                     // 11830\n    };                                                                                                                 // 11831\n                                                                                                                       // 11832\n    XMLDocType.prototype.instruction = function(target, value) {                                                       // 11833\n      var child;                                                                                                       // 11834\n      child = new XMLProcessingInstruction(this, target, value);                                                       // 11835\n      this.children.push(child);                                                                                       // 11836\n      return this;                                                                                                     // 11837\n    };                                                                                                                 // 11838\n                                                                                                                       // 11839\n    XMLDocType.prototype.root = function() {                                                                           // 11840\n      return this.documentObject.root();                                                                               // 11841\n    };                                                                                                                 // 11842\n                                                                                                                       // 11843\n    XMLDocType.prototype.document = function() {                                                                       // 11844\n      return this.documentObject;                                                                                      // 11845\n    };                                                                                                                 // 11846\n                                                                                                                       // 11847\n    XMLDocType.prototype.toString = function(options, level) {                                                         // 11848\n      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;                             // 11849\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11850\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11851\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11852\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 11853\n      level || (level = 0);                                                                                            // 11854\n      space = new Array(level + offset + 1).join(indent);                                                              // 11855\n      r = '';                                                                                                          // 11856\n      if (pretty) {                                                                                                    // 11857\n        r += space;                                                                                                    // 11858\n      }                                                                                                                // 11859\n      r += '<!DOCTYPE ' + this.root().name;                                                                            // 11860\n      if (this.pubID && this.sysID) {                                                                                  // 11861\n        r += ' PUBLIC \"' + this.pubID + '\" \"' + this.sysID + '\"';                                                      // 11862\n      } else if (this.sysID) {                                                                                         // 11863\n        r += ' SYSTEM \"' + this.sysID + '\"';                                                                           // 11864\n      }                                                                                                                // 11865\n      if (this.children.length > 0) {                                                                                  // 11866\n        r += ' [';                                                                                                     // 11867\n        if (pretty) {                                                                                                  // 11868\n          r += newline;                                                                                                // 11869\n        }                                                                                                              // 11870\n        ref3 = this.children;                                                                                          // 11871\n        for (i = 0, len = ref3.length; i < len; i++) {                                                                 // 11872\n          child = ref3[i];                                                                                             // 11873\n          r += child.toString(options, level + 1);                                                                     // 11874\n        }                                                                                                              // 11875\n        r += ']';                                                                                                      // 11876\n      }                                                                                                                // 11877\n      r += '>';                                                                                                        // 11878\n      if (pretty) {                                                                                                    // 11879\n        r += newline;                                                                                                  // 11880\n      }                                                                                                                // 11881\n      return r;                                                                                                        // 11882\n    };                                                                                                                 // 11883\n                                                                                                                       // 11884\n    XMLDocType.prototype.ele = function(name, value) {                                                                 // 11885\n      return this.element(name, value);                                                                                // 11886\n    };                                                                                                                 // 11887\n                                                                                                                       // 11888\n    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {   // 11889\n      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);                  // 11890\n    };                                                                                                                 // 11891\n                                                                                                                       // 11892\n    XMLDocType.prototype.ent = function(name, value) {                                                                 // 11893\n      return this.entity(name, value);                                                                                 // 11894\n    };                                                                                                                 // 11895\n                                                                                                                       // 11896\n    XMLDocType.prototype.pent = function(name, value) {                                                                // 11897\n      return this.pEntity(name, value);                                                                                // 11898\n    };                                                                                                                 // 11899\n                                                                                                                       // 11900\n    XMLDocType.prototype.not = function(name, value) {                                                                 // 11901\n      return this.notation(name, value);                                                                               // 11902\n    };                                                                                                                 // 11903\n                                                                                                                       // 11904\n    XMLDocType.prototype.dat = function(value) {                                                                       // 11905\n      return this.cdata(value);                                                                                        // 11906\n    };                                                                                                                 // 11907\n                                                                                                                       // 11908\n    XMLDocType.prototype.com = function(value) {                                                                       // 11909\n      return this.comment(value);                                                                                      // 11910\n    };                                                                                                                 // 11911\n                                                                                                                       // 11912\n    XMLDocType.prototype.ins = function(target, value) {                                                               // 11913\n      return this.instruction(target, value);                                                                          // 11914\n    };                                                                                                                 // 11915\n                                                                                                                       // 11916\n    XMLDocType.prototype.up = function() {                                                                             // 11917\n      return this.root();                                                                                              // 11918\n    };                                                                                                                 // 11919\n                                                                                                                       // 11920\n    XMLDocType.prototype.doc = function() {                                                                            // 11921\n      return this.document();                                                                                          // 11922\n    };                                                                                                                 // 11923\n                                                                                                                       // 11924\n    return XMLDocType;                                                                                                 // 11925\n                                                                                                                       // 11926\n  })();                                                                                                                // 11927\n                                                                                                                       // 11928\n}).call(this);                                                                                                         // 11929\n                                                                                                                       // 11930\n},{\"./XMLCData\":83,\"./XMLComment\":84,\"./XMLDTDAttList\":85,\"./XMLDTDElement\":86,\"./XMLDTDEntity\":87,\"./XMLDTDNotation\":88,\"./XMLProcessingInstruction\":93,\"lodash/lang/isObject\":136,\"lodash/object/create\":140}],91:[function(require,module,exports){\n(function() {                                                                                                          // 11932\n  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isArray, isFunction, isObject,       // 11933\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;                                                                                       // 11935\n                                                                                                                       // 11936\n  create = require('lodash/object/create');                                                                            // 11937\n                                                                                                                       // 11938\n  isObject = require('lodash/lang/isObject');                                                                          // 11939\n                                                                                                                       // 11940\n  isArray = require('lodash/lang/isArray');                                                                            // 11941\n                                                                                                                       // 11942\n  isFunction = require('lodash/lang/isFunction');                                                                      // 11943\n                                                                                                                       // 11944\n  every = require('lodash/collection/every');                                                                          // 11945\n                                                                                                                       // 11946\n  XMLNode = require('./XMLNode');                                                                                      // 11947\n                                                                                                                       // 11948\n  XMLAttribute = require('./XMLAttribute');                                                                            // 11949\n                                                                                                                       // 11950\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');                                                    // 11951\n                                                                                                                       // 11952\n  module.exports = XMLElement = (function(superClass) {                                                                // 11953\n    extend(XMLElement, superClass);                                                                                    // 11954\n                                                                                                                       // 11955\n    function XMLElement(parent, name, attributes) {                                                                    // 11956\n      XMLElement.__super__.constructor.call(this, parent);                                                             // 11957\n      if (name == null) {                                                                                              // 11958\n        throw new Error(\"Missing element name\");                                                                       // 11959\n      }                                                                                                                // 11960\n      this.name = this.stringify.eleName(name);                                                                        // 11961\n      this.children = [];                                                                                              // 11962\n      this.instructions = [];                                                                                          // 11963\n      this.attributes = {};                                                                                            // 11964\n      if (attributes != null) {                                                                                        // 11965\n        this.attribute(attributes);                                                                                    // 11966\n      }                                                                                                                // 11967\n    }                                                                                                                  // 11968\n                                                                                                                       // 11969\n    XMLElement.prototype.clone = function() {                                                                          // 11970\n      var att, attName, clonedSelf, i, len, pi, ref, ref1;                                                             // 11971\n      clonedSelf = create(XMLElement.prototype, this);                                                                 // 11972\n      if (clonedSelf.isRoot) {                                                                                         // 11973\n        clonedSelf.documentObject = null;                                                                              // 11974\n      }                                                                                                                // 11975\n      clonedSelf.attributes = {};                                                                                      // 11976\n      ref = this.attributes;                                                                                           // 11977\n      for (attName in ref) {                                                                                           // 11978\n        if (!hasProp.call(ref, attName)) continue;                                                                     // 11979\n        att = ref[attName];                                                                                            // 11980\n        clonedSelf.attributes[attName] = att.clone();                                                                  // 11981\n      }                                                                                                                // 11982\n      clonedSelf.instructions = [];                                                                                    // 11983\n      ref1 = this.instructions;                                                                                        // 11984\n      for (i = 0, len = ref1.length; i < len; i++) {                                                                   // 11985\n        pi = ref1[i];                                                                                                  // 11986\n        clonedSelf.instructions.push(pi.clone());                                                                      // 11987\n      }                                                                                                                // 11988\n      clonedSelf.children = [];                                                                                        // 11989\n      this.children.forEach(function(child) {                                                                          // 11990\n        var clonedChild;                                                                                               // 11991\n        clonedChild = child.clone();                                                                                   // 11992\n        clonedChild.parent = clonedSelf;                                                                               // 11993\n        return clonedSelf.children.push(clonedChild);                                                                  // 11994\n      });                                                                                                              // 11995\n      return clonedSelf;                                                                                               // 11996\n    };                                                                                                                 // 11997\n                                                                                                                       // 11998\n    XMLElement.prototype.attribute = function(name, value) {                                                           // 11999\n      var attName, attValue;                                                                                           // 12000\n      if (name != null) {                                                                                              // 12001\n        name = name.valueOf();                                                                                         // 12002\n      }                                                                                                                // 12003\n      if (isObject(name)) {                                                                                            // 12004\n        for (attName in name) {                                                                                        // 12005\n          if (!hasProp.call(name, attName)) continue;                                                                  // 12006\n          attValue = name[attName];                                                                                    // 12007\n          this.attribute(attName, attValue);                                                                           // 12008\n        }                                                                                                              // 12009\n      } else {                                                                                                         // 12010\n        if (isFunction(value)) {                                                                                       // 12011\n          value = value.apply();                                                                                       // 12012\n        }                                                                                                              // 12013\n        if (!this.options.skipNullAttributes || (value != null)) {                                                     // 12014\n          this.attributes[name] = new XMLAttribute(this, name, value);                                                 // 12015\n        }                                                                                                              // 12016\n      }                                                                                                                // 12017\n      return this;                                                                                                     // 12018\n    };                                                                                                                 // 12019\n                                                                                                                       // 12020\n    XMLElement.prototype.removeAttribute = function(name) {                                                            // 12021\n      var attName, i, len;                                                                                             // 12022\n      if (name == null) {                                                                                              // 12023\n        throw new Error(\"Missing attribute name\");                                                                     // 12024\n      }                                                                                                                // 12025\n      name = name.valueOf();                                                                                           // 12026\n      if (isArray(name)) {                                                                                             // 12027\n        for (i = 0, len = name.length; i < len; i++) {                                                                 // 12028\n          attName = name[i];                                                                                           // 12029\n          delete this.attributes[attName];                                                                             // 12030\n        }                                                                                                              // 12031\n      } else {                                                                                                         // 12032\n        delete this.attributes[name];                                                                                  // 12033\n      }                                                                                                                // 12034\n      return this;                                                                                                     // 12035\n    };                                                                                                                 // 12036\n                                                                                                                       // 12037\n    XMLElement.prototype.instruction = function(target, value) {                                                       // 12038\n      var i, insTarget, insValue, instruction, len;                                                                    // 12039\n      if (target != null) {                                                                                            // 12040\n        target = target.valueOf();                                                                                     // 12041\n      }                                                                                                                // 12042\n      if (value != null) {                                                                                             // 12043\n        value = value.valueOf();                                                                                       // 12044\n      }                                                                                                                // 12045\n      if (isArray(target)) {                                                                                           // 12046\n        for (i = 0, len = target.length; i < len; i++) {                                                               // 12047\n          insTarget = target[i];                                                                                       // 12048\n          this.instruction(insTarget);                                                                                 // 12049\n        }                                                                                                              // 12050\n      } else if (isObject(target)) {                                                                                   // 12051\n        for (insTarget in target) {                                                                                    // 12052\n          if (!hasProp.call(target, insTarget)) continue;                                                              // 12053\n          insValue = target[insTarget];                                                                                // 12054\n          this.instruction(insTarget, insValue);                                                                       // 12055\n        }                                                                                                              // 12056\n      } else {                                                                                                         // 12057\n        if (isFunction(value)) {                                                                                       // 12058\n          value = value.apply();                                                                                       // 12059\n        }                                                                                                              // 12060\n        instruction = new XMLProcessingInstruction(this, target, value);                                               // 12061\n        this.instructions.push(instruction);                                                                           // 12062\n      }                                                                                                                // 12063\n      return this;                                                                                                     // 12064\n    };                                                                                                                 // 12065\n                                                                                                                       // 12066\n    XMLElement.prototype.toString = function(options, level) {                                                         // 12067\n      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 12069\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 12070\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 12071\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 12072\n      level || (level = 0);                                                                                            // 12073\n      space = new Array(level + offset + 1).join(indent);                                                              // 12074\n      r = '';                                                                                                          // 12075\n      ref3 = this.instructions;                                                                                        // 12076\n      for (i = 0, len = ref3.length; i < len; i++) {                                                                   // 12077\n        instruction = ref3[i];                                                                                         // 12078\n        r += instruction.toString(options, level + 1);                                                                 // 12079\n      }                                                                                                                // 12080\n      if (pretty) {                                                                                                    // 12081\n        r += space;                                                                                                    // 12082\n      }                                                                                                                // 12083\n      r += '<' + this.name;                                                                                            // 12084\n      ref4 = this.attributes;                                                                                          // 12085\n      for (name in ref4) {                                                                                             // 12086\n        if (!hasProp.call(ref4, name)) continue;                                                                       // 12087\n        att = ref4[name];                                                                                              // 12088\n        r += att.toString(options);                                                                                    // 12089\n      }                                                                                                                // 12090\n      if (this.children.length === 0 || every(this.children, function(e) {                                             // 12091\n        return e.value === '';                                                                                         // 12092\n      })) {                                                                                                            // 12093\n        r += '/>';                                                                                                     // 12094\n        if (pretty) {                                                                                                  // 12095\n          r += newline;                                                                                                // 12096\n        }                                                                                                              // 12097\n      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {                           // 12098\n        r += '>';                                                                                                      // 12099\n        r += this.children[0].value;                                                                                   // 12100\n        r += '</' + this.name + '>';                                                                                   // 12101\n        r += newline;                                                                                                  // 12102\n      } else {                                                                                                         // 12103\n        r += '>';                                                                                                      // 12104\n        if (pretty) {                                                                                                  // 12105\n          r += newline;                                                                                                // 12106\n        }                                                                                                              // 12107\n        ref5 = this.children;                                                                                          // 12108\n        for (j = 0, len1 = ref5.length; j < len1; j++) {                                                               // 12109\n          child = ref5[j];                                                                                             // 12110\n          r += child.toString(options, level + 1);                                                                     // 12111\n        }                                                                                                              // 12112\n        if (pretty) {                                                                                                  // 12113\n          r += space;                                                                                                  // 12114\n        }                                                                                                              // 12115\n        r += '</' + this.name + '>';                                                                                   // 12116\n        if (pretty) {                                                                                                  // 12117\n          r += newline;                                                                                                // 12118\n        }                                                                                                              // 12119\n      }                                                                                                                // 12120\n      return r;                                                                                                        // 12121\n    };                                                                                                                 // 12122\n                                                                                                                       // 12123\n    XMLElement.prototype.att = function(name, value) {                                                                 // 12124\n      return this.attribute(name, value);                                                                              // 12125\n    };                                                                                                                 // 12126\n                                                                                                                       // 12127\n    XMLElement.prototype.ins = function(target, value) {                                                               // 12128\n      return this.instruction(target, value);                                                                          // 12129\n    };                                                                                                                 // 12130\n                                                                                                                       // 12131\n    XMLElement.prototype.a = function(name, value) {                                                                   // 12132\n      return this.attribute(name, value);                                                                              // 12133\n    };                                                                                                                 // 12134\n                                                                                                                       // 12135\n    XMLElement.prototype.i = function(target, value) {                                                                 // 12136\n      return this.instruction(target, value);                                                                          // 12137\n    };                                                                                                                 // 12138\n                                                                                                                       // 12139\n    return XMLElement;                                                                                                 // 12140\n                                                                                                                       // 12141\n  })(XMLNode);                                                                                                         // 12142\n                                                                                                                       // 12143\n}).call(this);                                                                                                         // 12144\n                                                                                                                       // 12145\n},{\"./XMLAttribute\":81,\"./XMLNode\":92,\"./XMLProcessingInstruction\":93,\"lodash/collection/every\":98,\"lodash/lang/isArray\":132,\"lodash/lang/isFunction\":134,\"lodash/lang/isObject\":136,\"lodash/object/create\":140}],92:[function(require,module,exports){\n(function() {                                                                                                          // 12147\n  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isArray, isEmpty, isFunction, isObject,\n    hasProp = {}.hasOwnProperty;                                                                                       // 12149\n                                                                                                                       // 12150\n  isObject = require('lodash/lang/isObject');                                                                          // 12151\n                                                                                                                       // 12152\n  isArray = require('lodash/lang/isArray');                                                                            // 12153\n                                                                                                                       // 12154\n  isFunction = require('lodash/lang/isFunction');                                                                      // 12155\n                                                                                                                       // 12156\n  isEmpty = require('lodash/lang/isEmpty');                                                                            // 12157\n                                                                                                                       // 12158\n  XMLElement = null;                                                                                                   // 12159\n                                                                                                                       // 12160\n  XMLCData = null;                                                                                                     // 12161\n                                                                                                                       // 12162\n  XMLComment = null;                                                                                                   // 12163\n                                                                                                                       // 12164\n  XMLDeclaration = null;                                                                                               // 12165\n                                                                                                                       // 12166\n  XMLDocType = null;                                                                                                   // 12167\n                                                                                                                       // 12168\n  XMLRaw = null;                                                                                                       // 12169\n                                                                                                                       // 12170\n  XMLText = null;                                                                                                      // 12171\n                                                                                                                       // 12172\n  module.exports = XMLNode = (function() {                                                                             // 12173\n    function XMLNode(parent) {                                                                                         // 12174\n      this.parent = parent;                                                                                            // 12175\n      this.options = this.parent.options;                                                                              // 12176\n      this.stringify = this.parent.stringify;                                                                          // 12177\n      if (XMLElement === null) {                                                                                       // 12178\n        XMLElement = require('./XMLElement');                                                                          // 12179\n        XMLCData = require('./XMLCData');                                                                              // 12180\n        XMLComment = require('./XMLComment');                                                                          // 12181\n        XMLDeclaration = require('./XMLDeclaration');                                                                  // 12182\n        XMLDocType = require('./XMLDocType');                                                                          // 12183\n        XMLRaw = require('./XMLRaw');                                                                                  // 12184\n        XMLText = require('./XMLText');                                                                                // 12185\n      }                                                                                                                // 12186\n    }                                                                                                                  // 12187\n                                                                                                                       // 12188\n    XMLNode.prototype.clone = function() {                                                                             // 12189\n      throw new Error(\"Cannot clone generic XMLNode\");                                                                 // 12190\n    };                                                                                                                 // 12191\n                                                                                                                       // 12192\n    XMLNode.prototype.element = function(name, attributes, text) {                                                     // 12193\n      var item, j, key, lastChild, len, ref, val;                                                                      // 12194\n      lastChild = null;                                                                                                // 12195\n      if (attributes == null) {                                                                                        // 12196\n        attributes = {};                                                                                               // 12197\n      }                                                                                                                // 12198\n      attributes = attributes.valueOf();                                                                               // 12199\n      if (!isObject(attributes)) {                                                                                     // 12200\n        ref = [attributes, text], text = ref[0], attributes = ref[1];                                                  // 12201\n      }                                                                                                                // 12202\n      if (name != null) {                                                                                              // 12203\n        name = name.valueOf();                                                                                         // 12204\n      }                                                                                                                // 12205\n      if (isArray(name)) {                                                                                             // 12206\n        for (j = 0, len = name.length; j < len; j++) {                                                                 // 12207\n          item = name[j];                                                                                              // 12208\n          lastChild = this.element(item);                                                                              // 12209\n        }                                                                                                              // 12210\n      } else if (isFunction(name)) {                                                                                   // 12211\n        lastChild = this.element(name.apply());                                                                        // 12212\n      } else if (isObject(name)) {                                                                                     // 12213\n        for (key in name) {                                                                                            // 12214\n          if (!hasProp.call(name, key)) continue;                                                                      // 12215\n          val = name[key];                                                                                             // 12216\n          if (isFunction(val)) {                                                                                       // 12217\n            val = val.apply();                                                                                         // 12218\n          }                                                                                                            // 12219\n          if ((isObject(val)) && (isEmpty(val))) {                                                                     // 12220\n            val = null;                                                                                                // 12221\n          }                                                                                                            // 12222\n          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);                          // 12224\n          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {\n            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);                         // 12226\n          } else if (isObject(val)) {                                                                                  // 12227\n            if (!this.options.ignoreDecorators && this.stringify.convertListKey && key.indexOf(this.stringify.convertListKey) === 0 && isArray(val)) {\n              lastChild = this.element(val);                                                                           // 12229\n            } else {                                                                                                   // 12230\n              lastChild = this.element(key);                                                                           // 12231\n              lastChild.element(val);                                                                                  // 12232\n            }                                                                                                          // 12233\n          } else {                                                                                                     // 12234\n            lastChild = this.element(key, val);                                                                        // 12235\n          }                                                                                                            // 12236\n        }                                                                                                              // 12237\n      } else {                                                                                                         // 12238\n        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n          lastChild = this.text(text);                                                                                 // 12240\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n          lastChild = this.cdata(text);                                                                                // 12242\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n          lastChild = this.comment(text);                                                                              // 12244\n        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n          lastChild = this.raw(text);                                                                                  // 12246\n        } else {                                                                                                       // 12247\n          lastChild = this.node(name, attributes, text);                                                               // 12248\n        }                                                                                                              // 12249\n      }                                                                                                                // 12250\n      if (lastChild == null) {                                                                                         // 12251\n        throw new Error(\"Could not create any elements with: \" + name);                                                // 12252\n      }                                                                                                                // 12253\n      return lastChild;                                                                                                // 12254\n    };                                                                                                                 // 12255\n                                                                                                                       // 12256\n    XMLNode.prototype.insertBefore = function(name, attributes, text) {                                                // 12257\n      var child, i, removed;                                                                                           // 12258\n      if (this.isRoot) {                                                                                               // 12259\n        throw new Error(\"Cannot insert elements at root level\");                                                       // 12260\n      }                                                                                                                // 12261\n      i = this.parent.children.indexOf(this);                                                                          // 12262\n      removed = this.parent.children.splice(i);                                                                        // 12263\n      child = this.parent.element(name, attributes, text);                                                             // 12264\n      Array.prototype.push.apply(this.parent.children, removed);                                                       // 12265\n      return child;                                                                                                    // 12266\n    };                                                                                                                 // 12267\n                                                                                                                       // 12268\n    XMLNode.prototype.insertAfter = function(name, attributes, text) {                                                 // 12269\n      var child, i, removed;                                                                                           // 12270\n      if (this.isRoot) {                                                                                               // 12271\n        throw new Error(\"Cannot insert elements at root level\");                                                       // 12272\n      }                                                                                                                // 12273\n      i = this.parent.children.indexOf(this);                                                                          // 12274\n      removed = this.parent.children.splice(i + 1);                                                                    // 12275\n      child = this.parent.element(name, attributes, text);                                                             // 12276\n      Array.prototype.push.apply(this.parent.children, removed);                                                       // 12277\n      return child;                                                                                                    // 12278\n    };                                                                                                                 // 12279\n                                                                                                                       // 12280\n    XMLNode.prototype.remove = function() {                                                                            // 12281\n      var i, ref;                                                                                                      // 12282\n      if (this.isRoot) {                                                                                               // 12283\n        throw new Error(\"Cannot remove the root element\");                                                             // 12284\n      }                                                                                                                // 12285\n      i = this.parent.children.indexOf(this);                                                                          // 12286\n      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;                                     // 12287\n      return this.parent;                                                                                              // 12288\n    };                                                                                                                 // 12289\n                                                                                                                       // 12290\n    XMLNode.prototype.node = function(name, attributes, text) {                                                        // 12291\n      var child, ref;                                                                                                  // 12292\n      if (name != null) {                                                                                              // 12293\n        name = name.valueOf();                                                                                         // 12294\n      }                                                                                                                // 12295\n      if (attributes == null) {                                                                                        // 12296\n        attributes = {};                                                                                               // 12297\n      }                                                                                                                // 12298\n      attributes = attributes.valueOf();                                                                               // 12299\n      if (!isObject(attributes)) {                                                                                     // 12300\n        ref = [attributes, text], text = ref[0], attributes = ref[1];                                                  // 12301\n      }                                                                                                                // 12302\n      child = new XMLElement(this, name, attributes);                                                                  // 12303\n      if (text != null) {                                                                                              // 12304\n        child.text(text);                                                                                              // 12305\n      }                                                                                                                // 12306\n      this.children.push(child);                                                                                       // 12307\n      return child;                                                                                                    // 12308\n    };                                                                                                                 // 12309\n                                                                                                                       // 12310\n    XMLNode.prototype.text = function(value) {                                                                         // 12311\n      var child;                                                                                                       // 12312\n      child = new XMLText(this, value);                                                                                // 12313\n      this.children.push(child);                                                                                       // 12314\n      return this;                                                                                                     // 12315\n    };                                                                                                                 // 12316\n                                                                                                                       // 12317\n    XMLNode.prototype.cdata = function(value) {                                                                        // 12318\n      var child;                                                                                                       // 12319\n      child = new XMLCData(this, value);                                                                               // 12320\n      this.children.push(child);                                                                                       // 12321\n      return this;                                                                                                     // 12322\n    };                                                                                                                 // 12323\n                                                                                                                       // 12324\n    XMLNode.prototype.comment = function(value) {                                                                      // 12325\n      var child;                                                                                                       // 12326\n      child = new XMLComment(this, value);                                                                             // 12327\n      this.children.push(child);                                                                                       // 12328\n      return this;                                                                                                     // 12329\n    };                                                                                                                 // 12330\n                                                                                                                       // 12331\n    XMLNode.prototype.raw = function(value) {                                                                          // 12332\n      var child;                                                                                                       // 12333\n      child = new XMLRaw(this, value);                                                                                 // 12334\n      this.children.push(child);                                                                                       // 12335\n      return this;                                                                                                     // 12336\n    };                                                                                                                 // 12337\n                                                                                                                       // 12338\n    XMLNode.prototype.declaration = function(version, encoding, standalone) {                                          // 12339\n      var doc, xmldec;                                                                                                 // 12340\n      doc = this.document();                                                                                           // 12341\n      xmldec = new XMLDeclaration(doc, version, encoding, standalone);                                                 // 12342\n      doc.xmldec = xmldec;                                                                                             // 12343\n      return doc.root();                                                                                               // 12344\n    };                                                                                                                 // 12345\n                                                                                                                       // 12346\n    XMLNode.prototype.doctype = function(pubID, sysID) {                                                               // 12347\n      var doc, doctype;                                                                                                // 12348\n      doc = this.document();                                                                                           // 12349\n      doctype = new XMLDocType(doc, pubID, sysID);                                                                     // 12350\n      doc.doctype = doctype;                                                                                           // 12351\n      return doctype;                                                                                                  // 12352\n    };                                                                                                                 // 12353\n                                                                                                                       // 12354\n    XMLNode.prototype.up = function() {                                                                                // 12355\n      if (this.isRoot) {                                                                                               // 12356\n        throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");             // 12357\n      }                                                                                                                // 12358\n      return this.parent;                                                                                              // 12359\n    };                                                                                                                 // 12360\n                                                                                                                       // 12361\n    XMLNode.prototype.root = function() {                                                                              // 12362\n      var child;                                                                                                       // 12363\n      if (this.isRoot) {                                                                                               // 12364\n        return this;                                                                                                   // 12365\n      }                                                                                                                // 12366\n      child = this.parent;                                                                                             // 12367\n      while (!child.isRoot) {                                                                                          // 12368\n        child = child.parent;                                                                                          // 12369\n      }                                                                                                                // 12370\n      return child;                                                                                                    // 12371\n    };                                                                                                                 // 12372\n                                                                                                                       // 12373\n    XMLNode.prototype.document = function() {                                                                          // 12374\n      return this.root().documentObject;                                                                               // 12375\n    };                                                                                                                 // 12376\n                                                                                                                       // 12377\n    XMLNode.prototype.end = function(options) {                                                                        // 12378\n      return this.document().toString(options);                                                                        // 12379\n    };                                                                                                                 // 12380\n                                                                                                                       // 12381\n    XMLNode.prototype.prev = function() {                                                                              // 12382\n      var i;                                                                                                           // 12383\n      if (this.isRoot) {                                                                                               // 12384\n        throw new Error(\"Root node has no siblings\");                                                                  // 12385\n      }                                                                                                                // 12386\n      i = this.parent.children.indexOf(this);                                                                          // 12387\n      if (i < 1) {                                                                                                     // 12388\n        throw new Error(\"Already at the first node\");                                                                  // 12389\n      }                                                                                                                // 12390\n      return this.parent.children[i - 1];                                                                              // 12391\n    };                                                                                                                 // 12392\n                                                                                                                       // 12393\n    XMLNode.prototype.next = function() {                                                                              // 12394\n      var i;                                                                                                           // 12395\n      if (this.isRoot) {                                                                                               // 12396\n        throw new Error(\"Root node has no siblings\");                                                                  // 12397\n      }                                                                                                                // 12398\n      i = this.parent.children.indexOf(this);                                                                          // 12399\n      if (i === -1 || i === this.parent.children.length - 1) {                                                         // 12400\n        throw new Error(\"Already at the last node\");                                                                   // 12401\n      }                                                                                                                // 12402\n      return this.parent.children[i + 1];                                                                              // 12403\n    };                                                                                                                 // 12404\n                                                                                                                       // 12405\n    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {                                                        // 12406\n      var clonedRoot;                                                                                                  // 12407\n      clonedRoot = xmlbuilder.root().clone();                                                                          // 12408\n      clonedRoot.parent = this;                                                                                        // 12409\n      clonedRoot.isRoot = false;                                                                                       // 12410\n      this.children.push(clonedRoot);                                                                                  // 12411\n      return this;                                                                                                     // 12412\n    };                                                                                                                 // 12413\n                                                                                                                       // 12414\n    XMLNode.prototype.ele = function(name, attributes, text) {                                                         // 12415\n      return this.element(name, attributes, text);                                                                     // 12416\n    };                                                                                                                 // 12417\n                                                                                                                       // 12418\n    XMLNode.prototype.nod = function(name, attributes, text) {                                                         // 12419\n      return this.node(name, attributes, text);                                                                        // 12420\n    };                                                                                                                 // 12421\n                                                                                                                       // 12422\n    XMLNode.prototype.txt = function(value) {                                                                          // 12423\n      return this.text(value);                                                                                         // 12424\n    };                                                                                                                 // 12425\n                                                                                                                       // 12426\n    XMLNode.prototype.dat = function(value) {                                                                          // 12427\n      return this.cdata(value);                                                                                        // 12428\n    };                                                                                                                 // 12429\n                                                                                                                       // 12430\n    XMLNode.prototype.com = function(value) {                                                                          // 12431\n      return this.comment(value);                                                                                      // 12432\n    };                                                                                                                 // 12433\n                                                                                                                       // 12434\n    XMLNode.prototype.doc = function() {                                                                               // 12435\n      return this.document();                                                                                          // 12436\n    };                                                                                                                 // 12437\n                                                                                                                       // 12438\n    XMLNode.prototype.dec = function(version, encoding, standalone) {                                                  // 12439\n      return this.declaration(version, encoding, standalone);                                                          // 12440\n    };                                                                                                                 // 12441\n                                                                                                                       // 12442\n    XMLNode.prototype.dtd = function(pubID, sysID) {                                                                   // 12443\n      return this.doctype(pubID, sysID);                                                                               // 12444\n    };                                                                                                                 // 12445\n                                                                                                                       // 12446\n    XMLNode.prototype.e = function(name, attributes, text) {                                                           // 12447\n      return this.element(name, attributes, text);                                                                     // 12448\n    };                                                                                                                 // 12449\n                                                                                                                       // 12450\n    XMLNode.prototype.n = function(name, attributes, text) {                                                           // 12451\n      return this.node(name, attributes, text);                                                                        // 12452\n    };                                                                                                                 // 12453\n                                                                                                                       // 12454\n    XMLNode.prototype.t = function(value) {                                                                            // 12455\n      return this.text(value);                                                                                         // 12456\n    };                                                                                                                 // 12457\n                                                                                                                       // 12458\n    XMLNode.prototype.d = function(value) {                                                                            // 12459\n      return this.cdata(value);                                                                                        // 12460\n    };                                                                                                                 // 12461\n                                                                                                                       // 12462\n    XMLNode.prototype.c = function(value) {                                                                            // 12463\n      return this.comment(value);                                                                                      // 12464\n    };                                                                                                                 // 12465\n                                                                                                                       // 12466\n    XMLNode.prototype.r = function(value) {                                                                            // 12467\n      return this.raw(value);                                                                                          // 12468\n    };                                                                                                                 // 12469\n                                                                                                                       // 12470\n    XMLNode.prototype.u = function() {                                                                                 // 12471\n      return this.up();                                                                                                // 12472\n    };                                                                                                                 // 12473\n                                                                                                                       // 12474\n    return XMLNode;                                                                                                    // 12475\n                                                                                                                       // 12476\n  })();                                                                                                                // 12477\n                                                                                                                       // 12478\n}).call(this);                                                                                                         // 12479\n                                                                                                                       // 12480\n},{\"./XMLCData\":83,\"./XMLComment\":84,\"./XMLDeclaration\":89,\"./XMLDocType\":90,\"./XMLElement\":91,\"./XMLRaw\":94,\"./XMLText\":96,\"lodash/lang/isArray\":132,\"lodash/lang/isEmpty\":133,\"lodash/lang/isFunction\":134,\"lodash/lang/isObject\":136}],93:[function(require,module,exports){\n(function() {                                                                                                          // 12482\n  var XMLProcessingInstruction, create;                                                                                // 12483\n                                                                                                                       // 12484\n  create = require('lodash/object/create');                                                                            // 12485\n                                                                                                                       // 12486\n  module.exports = XMLProcessingInstruction = (function() {                                                            // 12487\n    function XMLProcessingInstruction(parent, target, value) {                                                         // 12488\n      this.stringify = parent.stringify;                                                                               // 12489\n      if (target == null) {                                                                                            // 12490\n        throw new Error(\"Missing instruction target\");                                                                 // 12491\n      }                                                                                                                // 12492\n      this.target = this.stringify.insTarget(target);                                                                  // 12493\n      if (value) {                                                                                                     // 12494\n        this.value = this.stringify.insValue(value);                                                                   // 12495\n      }                                                                                                                // 12496\n    }                                                                                                                  // 12497\n                                                                                                                       // 12498\n    XMLProcessingInstruction.prototype.clone = function() {                                                            // 12499\n      return create(XMLProcessingInstruction.prototype, this);                                                         // 12500\n    };                                                                                                                 // 12501\n                                                                                                                       // 12502\n    XMLProcessingInstruction.prototype.toString = function(options, level) {                                           // 12503\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 12504\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 12505\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 12506\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 12507\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 12508\n      level || (level = 0);                                                                                            // 12509\n      space = new Array(level + offset + 1).join(indent);                                                              // 12510\n      r = '';                                                                                                          // 12511\n      if (pretty) {                                                                                                    // 12512\n        r += space;                                                                                                    // 12513\n      }                                                                                                                // 12514\n      r += '<?';                                                                                                       // 12515\n      r += this.target;                                                                                                // 12516\n      if (this.value) {                                                                                                // 12517\n        r += ' ' + this.value;                                                                                         // 12518\n      }                                                                                                                // 12519\n      r += '?>';                                                                                                       // 12520\n      if (pretty) {                                                                                                    // 12521\n        r += newline;                                                                                                  // 12522\n      }                                                                                                                // 12523\n      return r;                                                                                                        // 12524\n    };                                                                                                                 // 12525\n                                                                                                                       // 12526\n    return XMLProcessingInstruction;                                                                                   // 12527\n                                                                                                                       // 12528\n  })();                                                                                                                // 12529\n                                                                                                                       // 12530\n}).call(this);                                                                                                         // 12531\n                                                                                                                       // 12532\n},{\"lodash/object/create\":140}],94:[function(require,module,exports){                                                  // 12533\n(function() {                                                                                                          // 12534\n  var XMLNode, XMLRaw, create,                                                                                         // 12535\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;                                                                                       // 12537\n                                                                                                                       // 12538\n  create = require('lodash/object/create');                                                                            // 12539\n                                                                                                                       // 12540\n  XMLNode = require('./XMLNode');                                                                                      // 12541\n                                                                                                                       // 12542\n  module.exports = XMLRaw = (function(superClass) {                                                                    // 12543\n    extend(XMLRaw, superClass);                                                                                        // 12544\n                                                                                                                       // 12545\n    function XMLRaw(parent, text) {                                                                                    // 12546\n      XMLRaw.__super__.constructor.call(this, parent);                                                                 // 12547\n      if (text == null) {                                                                                              // 12548\n        throw new Error(\"Missing raw text\");                                                                           // 12549\n      }                                                                                                                // 12550\n      this.value = this.stringify.raw(text);                                                                           // 12551\n    }                                                                                                                  // 12552\n                                                                                                                       // 12553\n    XMLRaw.prototype.clone = function() {                                                                              // 12554\n      return create(XMLRaw.prototype, this);                                                                           // 12555\n    };                                                                                                                 // 12556\n                                                                                                                       // 12557\n    XMLRaw.prototype.toString = function(options, level) {                                                             // 12558\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 12559\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 12560\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 12561\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 12562\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 12563\n      level || (level = 0);                                                                                            // 12564\n      space = new Array(level + offset + 1).join(indent);                                                              // 12565\n      r = '';                                                                                                          // 12566\n      if (pretty) {                                                                                                    // 12567\n        r += space;                                                                                                    // 12568\n      }                                                                                                                // 12569\n      r += this.value;                                                                                                 // 12570\n      if (pretty) {                                                                                                    // 12571\n        r += newline;                                                                                                  // 12572\n      }                                                                                                                // 12573\n      return r;                                                                                                        // 12574\n    };                                                                                                                 // 12575\n                                                                                                                       // 12576\n    return XMLRaw;                                                                                                     // 12577\n                                                                                                                       // 12578\n  })(XMLNode);                                                                                                         // 12579\n                                                                                                                       // 12580\n}).call(this);                                                                                                         // 12581\n                                                                                                                       // 12582\n},{\"./XMLNode\":92,\"lodash/object/create\":140}],95:[function(require,module,exports){                                   // 12583\n(function() {                                                                                                          // 12584\n  var XMLStringifier,                                                                                                  // 12585\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                  // 12586\n    hasProp = {}.hasOwnProperty;                                                                                       // 12587\n                                                                                                                       // 12588\n  module.exports = XMLStringifier = (function() {                                                                      // 12589\n    function XMLStringifier(options) {                                                                                 // 12590\n      this.assertLegalChar = bind(this.assertLegalChar, this);                                                         // 12591\n      var key, ref, value;                                                                                             // 12592\n      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;                               // 12593\n      ref = (options != null ? options.stringify : void 0) || {};                                                      // 12594\n      for (key in ref) {                                                                                               // 12595\n        if (!hasProp.call(ref, key)) continue;                                                                         // 12596\n        value = ref[key];                                                                                              // 12597\n        this[key] = value;                                                                                             // 12598\n      }                                                                                                                // 12599\n    }                                                                                                                  // 12600\n                                                                                                                       // 12601\n    XMLStringifier.prototype.eleName = function(val) {                                                                 // 12602\n      val = '' + val || '';                                                                                            // 12603\n      return this.assertLegalChar(val);                                                                                // 12604\n    };                                                                                                                 // 12605\n                                                                                                                       // 12606\n    XMLStringifier.prototype.eleText = function(val) {                                                                 // 12607\n      val = '' + val || '';                                                                                            // 12608\n      return this.assertLegalChar(this.elEscape(val));                                                                 // 12609\n    };                                                                                                                 // 12610\n                                                                                                                       // 12611\n    XMLStringifier.prototype.cdata = function(val) {                                                                   // 12612\n      val = '' + val || '';                                                                                            // 12613\n      if (val.match(/]]>/)) {                                                                                          // 12614\n        throw new Error(\"Invalid CDATA text: \" + val);                                                                 // 12615\n      }                                                                                                                // 12616\n      return this.assertLegalChar(val);                                                                                // 12617\n    };                                                                                                                 // 12618\n                                                                                                                       // 12619\n    XMLStringifier.prototype.comment = function(val) {                                                                 // 12620\n      val = '' + val || '';                                                                                            // 12621\n      if (val.match(/--/)) {                                                                                           // 12622\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);                                           // 12623\n      }                                                                                                                // 12624\n      return this.assertLegalChar(val);                                                                                // 12625\n    };                                                                                                                 // 12626\n                                                                                                                       // 12627\n    XMLStringifier.prototype.raw = function(val) {                                                                     // 12628\n      return '' + val || '';                                                                                           // 12629\n    };                                                                                                                 // 12630\n                                                                                                                       // 12631\n    XMLStringifier.prototype.attName = function(val) {                                                                 // 12632\n      return '' + val || '';                                                                                           // 12633\n    };                                                                                                                 // 12634\n                                                                                                                       // 12635\n    XMLStringifier.prototype.attValue = function(val) {                                                                // 12636\n      val = '' + val || '';                                                                                            // 12637\n      return this.attEscape(val);                                                                                      // 12638\n    };                                                                                                                 // 12639\n                                                                                                                       // 12640\n    XMLStringifier.prototype.insTarget = function(val) {                                                               // 12641\n      return '' + val || '';                                                                                           // 12642\n    };                                                                                                                 // 12643\n                                                                                                                       // 12644\n    XMLStringifier.prototype.insValue = function(val) {                                                                // 12645\n      val = '' + val || '';                                                                                            // 12646\n      if (val.match(/\\?>/)) {                                                                                          // 12647\n        throw new Error(\"Invalid processing instruction value: \" + val);                                               // 12648\n      }                                                                                                                // 12649\n      return val;                                                                                                      // 12650\n    };                                                                                                                 // 12651\n                                                                                                                       // 12652\n    XMLStringifier.prototype.xmlVersion = function(val) {                                                              // 12653\n      val = '' + val || '';                                                                                            // 12654\n      if (!val.match(/1\\.[0-9]+/)) {                                                                                   // 12655\n        throw new Error(\"Invalid version number: \" + val);                                                             // 12656\n      }                                                                                                                // 12657\n      return val;                                                                                                      // 12658\n    };                                                                                                                 // 12659\n                                                                                                                       // 12660\n    XMLStringifier.prototype.xmlEncoding = function(val) {                                                             // 12661\n      val = '' + val || '';                                                                                            // 12662\n      if (!val.match(/[A-Za-z](?:[A-Za-z0-9._-]|-)*/)) {                                                               // 12663\n        throw new Error(\"Invalid encoding: \" + val);                                                                   // 12664\n      }                                                                                                                // 12665\n      return val;                                                                                                      // 12666\n    };                                                                                                                 // 12667\n                                                                                                                       // 12668\n    XMLStringifier.prototype.xmlStandalone = function(val) {                                                           // 12669\n      if (val) {                                                                                                       // 12670\n        return \"yes\";                                                                                                  // 12671\n      } else {                                                                                                         // 12672\n        return \"no\";                                                                                                   // 12673\n      }                                                                                                                // 12674\n    };                                                                                                                 // 12675\n                                                                                                                       // 12676\n    XMLStringifier.prototype.dtdPubID = function(val) {                                                                // 12677\n      return '' + val || '';                                                                                           // 12678\n    };                                                                                                                 // 12679\n                                                                                                                       // 12680\n    XMLStringifier.prototype.dtdSysID = function(val) {                                                                // 12681\n      return '' + val || '';                                                                                           // 12682\n    };                                                                                                                 // 12683\n                                                                                                                       // 12684\n    XMLStringifier.prototype.dtdElementValue = function(val) {                                                         // 12685\n      return '' + val || '';                                                                                           // 12686\n    };                                                                                                                 // 12687\n                                                                                                                       // 12688\n    XMLStringifier.prototype.dtdAttType = function(val) {                                                              // 12689\n      return '' + val || '';                                                                                           // 12690\n    };                                                                                                                 // 12691\n                                                                                                                       // 12692\n    XMLStringifier.prototype.dtdAttDefault = function(val) {                                                           // 12693\n      if (val != null) {                                                                                               // 12694\n        return '' + val || '';                                                                                         // 12695\n      } else {                                                                                                         // 12696\n        return val;                                                                                                    // 12697\n      }                                                                                                                // 12698\n    };                                                                                                                 // 12699\n                                                                                                                       // 12700\n    XMLStringifier.prototype.dtdEntityValue = function(val) {                                                          // 12701\n      return '' + val || '';                                                                                           // 12702\n    };                                                                                                                 // 12703\n                                                                                                                       // 12704\n    XMLStringifier.prototype.dtdNData = function(val) {                                                                // 12705\n      return '' + val || '';                                                                                           // 12706\n    };                                                                                                                 // 12707\n                                                                                                                       // 12708\n    XMLStringifier.prototype.convertAttKey = '@';                                                                      // 12709\n                                                                                                                       // 12710\n    XMLStringifier.prototype.convertPIKey = '?';                                                                       // 12711\n                                                                                                                       // 12712\n    XMLStringifier.prototype.convertTextKey = '#text';                                                                 // 12713\n                                                                                                                       // 12714\n    XMLStringifier.prototype.convertCDataKey = '#cdata';                                                               // 12715\n                                                                                                                       // 12716\n    XMLStringifier.prototype.convertCommentKey = '#comment';                                                           // 12717\n                                                                                                                       // 12718\n    XMLStringifier.prototype.convertRawKey = '#raw';                                                                   // 12719\n                                                                                                                       // 12720\n    XMLStringifier.prototype.convertListKey = '#list';                                                                 // 12721\n                                                                                                                       // 12722\n    XMLStringifier.prototype.assertLegalChar = function(str) {                                                         // 12723\n      var chars, chr;                                                                                                  // 12724\n      if (this.allowSurrogateChars) {                                                                                  // 12725\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uFFFE-\\uFFFF]/;                                              // 12726\n      } else {                                                                                                         // 12727\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;                                 // 12728\n      }                                                                                                                // 12729\n      chr = str.match(chars);                                                                                          // 12730\n      if (chr) {                                                                                                       // 12731\n        throw new Error(\"Invalid character (\" + chr + \") in string: \" + str + \" at index \" + chr.index);               // 12732\n      }                                                                                                                // 12733\n      return str;                                                                                                      // 12734\n    };                                                                                                                 // 12735\n                                                                                                                       // 12736\n    XMLStringifier.prototype.elEscape = function(str) {                                                                // 12737\n      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');           // 12738\n    };                                                                                                                 // 12739\n                                                                                                                       // 12740\n    XMLStringifier.prototype.attEscape = function(str) {                                                               // 12741\n      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };                                                                                                                 // 12743\n                                                                                                                       // 12744\n    return XMLStringifier;                                                                                             // 12745\n                                                                                                                       // 12746\n  })();                                                                                                                // 12747\n                                                                                                                       // 12748\n}).call(this);                                                                                                         // 12749\n                                                                                                                       // 12750\n},{}],96:[function(require,module,exports){                                                                            // 12751\n(function() {                                                                                                          // 12752\n  var XMLNode, XMLText, create,                                                                                        // 12753\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;                                                                                       // 12755\n                                                                                                                       // 12756\n  create = require('lodash/object/create');                                                                            // 12757\n                                                                                                                       // 12758\n  XMLNode = require('./XMLNode');                                                                                      // 12759\n                                                                                                                       // 12760\n  module.exports = XMLText = (function(superClass) {                                                                   // 12761\n    extend(XMLText, superClass);                                                                                       // 12762\n                                                                                                                       // 12763\n    function XMLText(parent, text) {                                                                                   // 12764\n      XMLText.__super__.constructor.call(this, parent);                                                                // 12765\n      if (text == null) {                                                                                              // 12766\n        throw new Error(\"Missing element text\");                                                                       // 12767\n      }                                                                                                                // 12768\n      this.value = this.stringify.eleText(text);                                                                       // 12769\n    }                                                                                                                  // 12770\n                                                                                                                       // 12771\n    XMLText.prototype.clone = function() {                                                                             // 12772\n      return create(XMLText.prototype, this);                                                                          // 12773\n    };                                                                                                                 // 12774\n                                                                                                                       // 12775\n    XMLText.prototype.toString = function(options, level) {                                                            // 12776\n      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 12777\n      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 12778\n      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 12779\n      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 12780\n      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\\n';                             // 12781\n      level || (level = 0);                                                                                            // 12782\n      space = new Array(level + offset + 1).join(indent);                                                              // 12783\n      r = '';                                                                                                          // 12784\n      if (pretty) {                                                                                                    // 12785\n        r += space;                                                                                                    // 12786\n      }                                                                                                                // 12787\n      r += this.value;                                                                                                 // 12788\n      if (pretty) {                                                                                                    // 12789\n        r += newline;                                                                                                  // 12790\n      }                                                                                                                // 12791\n      return r;                                                                                                        // 12792\n    };                                                                                                                 // 12793\n                                                                                                                       // 12794\n    return XMLText;                                                                                                    // 12795\n                                                                                                                       // 12796\n  })(XMLNode);                                                                                                         // 12797\n                                                                                                                       // 12798\n}).call(this);                                                                                                         // 12799\n                                                                                                                       // 12800\n},{\"./XMLNode\":92,\"lodash/object/create\":140}],97:[function(require,module,exports){                                   // 12801\n(function() {                                                                                                          // 12802\n  var XMLBuilder, assign;                                                                                              // 12803\n                                                                                                                       // 12804\n  assign = require('lodash/object/assign');                                                                            // 12805\n                                                                                                                       // 12806\n  XMLBuilder = require('./XMLBuilder');                                                                                // 12807\n                                                                                                                       // 12808\n  module.exports.create = function(name, xmldec, doctype, options) {                                                   // 12809\n    options = assign({}, xmldec, doctype, options);                                                                    // 12810\n    return new XMLBuilder(name, options).root();                                                                       // 12811\n  };                                                                                                                   // 12812\n                                                                                                                       // 12813\n}).call(this);                                                                                                         // 12814\n                                                                                                                       // 12815\n},{\"./XMLBuilder\":82,\"lodash/object/assign\":139}],98:[function(require,module,exports){                                // 12816\nvar arrayEvery = require('../internal/arrayEvery'),                                                                    // 12817\n    baseCallback = require('../internal/baseCallback'),                                                                // 12818\n    baseEvery = require('../internal/baseEvery'),                                                                      // 12819\n    isArray = require('../lang/isArray');                                                                              // 12820\n                                                                                                                       // 12821\n                                                                                                                       // 12822\nfunction every(collection, predicate, thisArg) {                                                                       // 12823\n  var func = isArray(collection) ? arrayEvery : baseEvery;                                                             // 12824\n  if (typeof predicate != 'function' || typeof thisArg != 'undefined') {                                               // 12825\n    predicate = baseCallback(predicate, thisArg, 3);                                                                   // 12826\n  }                                                                                                                    // 12827\n  return func(collection, predicate);                                                                                  // 12828\n}                                                                                                                      // 12829\n                                                                                                                       // 12830\nmodule.exports = every;                                                                                                // 12831\n                                                                                                                       // 12832\n},{\"../internal/arrayEvery\":99,\"../internal/baseCallback\":101,\"../internal/baseEvery\":105,\"../lang/isArray\":132}],99:[function(require,module,exports){\n                                                                                                                       // 12834\nfunction arrayEvery(array, predicate) {                                                                                // 12835\n  var index = -1,                                                                                                      // 12836\n      length = array.length;                                                                                           // 12837\n                                                                                                                       // 12838\n  while (++index < length) {                                                                                           // 12839\n    if (!predicate(array[index], index, array)) {                                                                      // 12840\n      return false;                                                                                                    // 12841\n    }                                                                                                                  // 12842\n  }                                                                                                                    // 12843\n  return true;                                                                                                         // 12844\n}                                                                                                                      // 12845\n                                                                                                                       // 12846\nmodule.exports = arrayEvery;                                                                                           // 12847\n                                                                                                                       // 12848\n},{}],100:[function(require,module,exports){                                                                           // 12849\nvar baseCopy = require('./baseCopy'),                                                                                  // 12850\n    keys = require('../object/keys');                                                                                  // 12851\n                                                                                                                       // 12852\n                                                                                                                       // 12853\nfunction baseAssign(object, source, customizer) {                                                                      // 12854\n  var props = keys(source);                                                                                            // 12855\n  if (!customizer) {                                                                                                   // 12856\n    return baseCopy(source, object, props);                                                                            // 12857\n  }                                                                                                                    // 12858\n  var index = -1,                                                                                                      // 12859\n      length = props.length;                                                                                           // 12860\n                                                                                                                       // 12861\n  while (++index < length) {                                                                                           // 12862\n    var key = props[index],                                                                                            // 12863\n        value = object[key],                                                                                           // 12864\n        result = customizer(value, source[key], key, object, source);                                                  // 12865\n                                                                                                                       // 12866\n    if ((result === result ? (result !== value) : (value === value)) ||                                                // 12867\n        (typeof value == 'undefined' && !(key in object))) {                                                           // 12868\n      object[key] = result;                                                                                            // 12869\n    }                                                                                                                  // 12870\n  }                                                                                                                    // 12871\n  return object;                                                                                                       // 12872\n}                                                                                                                      // 12873\n                                                                                                                       // 12874\nmodule.exports = baseAssign;                                                                                           // 12875\n                                                                                                                       // 12876\n},{\"../object/keys\":141,\"./baseCopy\":102}],101:[function(require,module,exports){                                      // 12877\nvar baseMatches = require('./baseMatches'),                                                                            // 12878\n    baseMatchesProperty = require('./baseMatchesProperty'),                                                            // 12879\n    baseProperty = require('./baseProperty'),                                                                          // 12880\n    bindCallback = require('./bindCallback'),                                                                          // 12881\n    identity = require('../utility/identity'),                                                                         // 12882\n    isBindable = require('./isBindable');                                                                              // 12883\n                                                                                                                       // 12884\n                                                                                                                       // 12885\nfunction baseCallback(func, thisArg, argCount) {                                                                       // 12886\n  var type = typeof func;                                                                                              // 12887\n  if (type == 'function') {                                                                                            // 12888\n    return (typeof thisArg != 'undefined' && isBindable(func))                                                         // 12889\n      ? bindCallback(func, thisArg, argCount)                                                                          // 12890\n      : func;                                                                                                          // 12891\n  }                                                                                                                    // 12892\n  if (func == null) {                                                                                                  // 12893\n    return identity;                                                                                                   // 12894\n  }                                                                                                                    // 12895\n  if (type == 'object') {                                                                                              // 12896\n    return baseMatches(func);                                                                                          // 12897\n  }                                                                                                                    // 12898\n  return typeof thisArg == 'undefined'                                                                                 // 12899\n    ? baseProperty(func + '')                                                                                          // 12900\n    : baseMatchesProperty(func + '', thisArg);                                                                         // 12901\n}                                                                                                                      // 12902\n                                                                                                                       // 12903\nmodule.exports = baseCallback;                                                                                         // 12904\n                                                                                                                       // 12905\n},{\"../utility/identity\":145,\"./baseMatches\":112,\"./baseMatchesProperty\":113,\"./baseProperty\":114,\"./bindCallback\":117,\"./isBindable\":122}],102:[function(require,module,exports){\n                                                                                                                       // 12907\nfunction baseCopy(source, object, props) {                                                                             // 12908\n  if (!props) {                                                                                                        // 12909\n    props = object;                                                                                                    // 12910\n    object = {};                                                                                                       // 12911\n  }                                                                                                                    // 12912\n  var index = -1,                                                                                                      // 12913\n      length = props.length;                                                                                           // 12914\n                                                                                                                       // 12915\n  while (++index < length) {                                                                                           // 12916\n    var key = props[index];                                                                                            // 12917\n    object[key] = source[key];                                                                                         // 12918\n  }                                                                                                                    // 12919\n  return object;                                                                                                       // 12920\n}                                                                                                                      // 12921\n                                                                                                                       // 12922\nmodule.exports = baseCopy;                                                                                             // 12923\n                                                                                                                       // 12924\n},{}],103:[function(require,module,exports){                                                                           // 12925\n(function (global){                                                                                                    // 12926\nvar isObject = require('../lang/isObject');                                                                            // 12927\n                                                                                                                       // 12928\n                                                                                                                       // 12929\nvar baseCreate = (function() {                                                                                         // 12930\n  function Object() {}                                                                                                 // 12931\n  return function(prototype) {                                                                                         // 12932\n    if (isObject(prototype)) {                                                                                         // 12933\n      Object.prototype = prototype;                                                                                    // 12934\n      var result = new Object;                                                                                         // 12935\n      Object.prototype = null;                                                                                         // 12936\n    }                                                                                                                  // 12937\n    return result || global.Object();                                                                                  // 12938\n  };                                                                                                                   // 12939\n}());                                                                                                                  // 12940\n                                                                                                                       // 12941\nmodule.exports = baseCreate;                                                                                           // 12942\n                                                                                                                       // 12943\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})                         // 12944\n},{\"../lang/isObject\":136}],104:[function(require,module,exports){                                                     // 12945\nvar baseForOwn = require('./baseForOwn'),                                                                              // 12946\n    isLength = require('./isLength'),                                                                                  // 12947\n    toObject = require('./toObject');                                                                                  // 12948\n                                                                                                                       // 12949\n                                                                                                                       // 12950\nfunction baseEach(collection, iteratee) {                                                                              // 12951\n  var length = collection ? collection.length : 0;                                                                     // 12952\n  if (!isLength(length)) {                                                                                             // 12953\n    return baseForOwn(collection, iteratee);                                                                           // 12954\n  }                                                                                                                    // 12955\n  var index = -1,                                                                                                      // 12956\n      iterable = toObject(collection);                                                                                 // 12957\n                                                                                                                       // 12958\n  while (++index < length) {                                                                                           // 12959\n    if (iteratee(iterable[index], index, iterable) === false) {                                                        // 12960\n      break;                                                                                                           // 12961\n    }                                                                                                                  // 12962\n  }                                                                                                                    // 12963\n  return collection;                                                                                                   // 12964\n}                                                                                                                      // 12965\n                                                                                                                       // 12966\nmodule.exports = baseEach;                                                                                             // 12967\n                                                                                                                       // 12968\n},{\"./baseForOwn\":107,\"./isLength\":125,\"./toObject\":130}],105:[function(require,module,exports){                       // 12969\nvar baseEach = require('./baseEach');                                                                                  // 12970\n                                                                                                                       // 12971\n                                                                                                                       // 12972\nfunction baseEvery(collection, predicate) {                                                                            // 12973\n  var result = true;                                                                                                   // 12974\n  baseEach(collection, function(value, index, collection) {                                                            // 12975\n    result = !!predicate(value, index, collection);                                                                    // 12976\n    return result;                                                                                                     // 12977\n  });                                                                                                                  // 12978\n  return result;                                                                                                       // 12979\n}                                                                                                                      // 12980\n                                                                                                                       // 12981\nmodule.exports = baseEvery;                                                                                            // 12982\n                                                                                                                       // 12983\n},{\"./baseEach\":104}],106:[function(require,module,exports){                                                           // 12984\nvar toObject = require('./toObject');                                                                                  // 12985\n                                                                                                                       // 12986\n                                                                                                                       // 12987\nfunction baseFor(object, iteratee, keysFunc) {                                                                         // 12988\n  var index = -1,                                                                                                      // 12989\n      iterable = toObject(object),                                                                                     // 12990\n      props = keysFunc(object),                                                                                        // 12991\n      length = props.length;                                                                                           // 12992\n                                                                                                                       // 12993\n  while (++index < length) {                                                                                           // 12994\n    var key = props[index];                                                                                            // 12995\n    if (iteratee(iterable[key], key, iterable) === false) {                                                            // 12996\n      break;                                                                                                           // 12997\n    }                                                                                                                  // 12998\n  }                                                                                                                    // 12999\n  return object;                                                                                                       // 13000\n}                                                                                                                      // 13001\n                                                                                                                       // 13002\nmodule.exports = baseFor;                                                                                              // 13003\n                                                                                                                       // 13004\n},{\"./toObject\":130}],107:[function(require,module,exports){                                                           // 13005\nvar baseFor = require('./baseFor'),                                                                                    // 13006\n    keys = require('../object/keys');                                                                                  // 13007\n                                                                                                                       // 13008\n                                                                                                                       // 13009\nfunction baseForOwn(object, iteratee) {                                                                                // 13010\n  return baseFor(object, iteratee, keys);                                                                              // 13011\n}                                                                                                                      // 13012\n                                                                                                                       // 13013\nmodule.exports = baseForOwn;                                                                                           // 13014\n                                                                                                                       // 13015\n},{\"../object/keys\":141,\"./baseFor\":106}],108:[function(require,module,exports){                                       // 13016\nvar baseIsEqualDeep = require('./baseIsEqualDeep');                                                                    // 13017\n                                                                                                                       // 13018\n                                                                                                                       // 13019\nfunction baseIsEqual(value, other, customizer, isWhere, stackA, stackB) {                                              // 13020\n  if (value === other) {                                                                                               // 13021\n    return value !== 0 || (1 / value == 1 / other);                                                                    // 13022\n  }                                                                                                                    // 13023\n  var valType = typeof value,                                                                                          // 13024\n      othType = typeof other;                                                                                          // 13025\n                                                                                                                       // 13026\n  if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||                // 13027\n      value == null || other == null) {                                                                                // 13028\n    return value !== value && other !== other;                                                                         // 13029\n  }                                                                                                                    // 13030\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isWhere, stackA, stackB);                              // 13031\n}                                                                                                                      // 13032\n                                                                                                                       // 13033\nmodule.exports = baseIsEqual;                                                                                          // 13034\n                                                                                                                       // 13035\n},{\"./baseIsEqualDeep\":109}],109:[function(require,module,exports){                                                    // 13036\nvar equalArrays = require('./equalArrays'),                                                                            // 13037\n    equalByTag = require('./equalByTag'),                                                                              // 13038\n    equalObjects = require('./equalObjects'),                                                                          // 13039\n    isArray = require('../lang/isArray'),                                                                              // 13040\n    isTypedArray = require('../lang/isTypedArray');                                                                    // 13041\n                                                                                                                       // 13042\n                                                                                                                       // 13043\nvar argsTag = '[object Arguments]',                                                                                    // 13044\n    arrayTag = '[object Array]',                                                                                       // 13045\n    objectTag = '[object Object]';                                                                                     // 13046\n                                                                                                                       // 13047\n                                                                                                                       // 13048\nvar objectProto = Object.prototype;                                                                                    // 13049\n                                                                                                                       // 13050\n                                                                                                                       // 13051\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13052\n                                                                                                                       // 13053\n                                                                                                                       // 13054\nvar objToString = objectProto.toString;                                                                                // 13055\n                                                                                                                       // 13056\n                                                                                                                       // 13057\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, isWhere, stackA, stackB) {                              // 13058\n  var objIsArr = isArray(object),                                                                                      // 13059\n      othIsArr = isArray(other),                                                                                       // 13060\n      objTag = arrayTag,                                                                                               // 13061\n      othTag = arrayTag;                                                                                               // 13062\n                                                                                                                       // 13063\n  if (!objIsArr) {                                                                                                     // 13064\n    objTag = objToString.call(object);                                                                                 // 13065\n    if (objTag == argsTag) {                                                                                           // 13066\n      objTag = objectTag;                                                                                              // 13067\n    } else if (objTag != objectTag) {                                                                                  // 13068\n      objIsArr = isTypedArray(object);                                                                                 // 13069\n    }                                                                                                                  // 13070\n  }                                                                                                                    // 13071\n  if (!othIsArr) {                                                                                                     // 13072\n    othTag = objToString.call(other);                                                                                  // 13073\n    if (othTag == argsTag) {                                                                                           // 13074\n      othTag = objectTag;                                                                                              // 13075\n    } else if (othTag != objectTag) {                                                                                  // 13076\n      othIsArr = isTypedArray(other);                                                                                  // 13077\n    }                                                                                                                  // 13078\n  }                                                                                                                    // 13079\n  var objIsObj = objTag == objectTag,                                                                                  // 13080\n      othIsObj = othTag == objectTag,                                                                                  // 13081\n      isSameTag = objTag == othTag;                                                                                    // 13082\n                                                                                                                       // 13083\n  if (isSameTag && !(objIsArr || objIsObj)) {                                                                          // 13084\n    return equalByTag(object, other, objTag);                                                                          // 13085\n  }                                                                                                                    // 13086\n  var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                             // 13087\n      othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                              // 13088\n                                                                                                                       // 13089\n  if (valWrapped || othWrapped) {                                                                                      // 13090\n    return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isWhere, stackA, stackB);\n  }                                                                                                                    // 13092\n  if (!isSameTag) {                                                                                                    // 13093\n    return false;                                                                                                      // 13094\n  }                                                                                                                    // 13095\n  stackA || (stackA = []);                                                                                             // 13096\n  stackB || (stackB = []);                                                                                             // 13097\n                                                                                                                       // 13098\n  var length = stackA.length;                                                                                          // 13099\n  while (length--) {                                                                                                   // 13100\n    if (stackA[length] == object) {                                                                                    // 13101\n      return stackB[length] == other;                                                                                  // 13102\n    }                                                                                                                  // 13103\n  }                                                                                                                    // 13104\n  stackA.push(object);                                                                                                 // 13105\n  stackB.push(other);                                                                                                  // 13106\n                                                                                                                       // 13107\n  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isWhere, stackA, stackB); // 13108\n                                                                                                                       // 13109\n  stackA.pop();                                                                                                        // 13110\n  stackB.pop();                                                                                                        // 13111\n                                                                                                                       // 13112\n  return result;                                                                                                       // 13113\n}                                                                                                                      // 13114\n                                                                                                                       // 13115\nmodule.exports = baseIsEqualDeep;                                                                                      // 13116\n                                                                                                                       // 13117\n},{\"../lang/isArray\":132,\"../lang/isTypedArray\":138,\"./equalArrays\":119,\"./equalByTag\":120,\"./equalObjects\":121}],110:[function(require,module,exports){\n                                                                                                                       // 13119\nfunction baseIsFunction(value) {                                                                                       // 13120\n  return typeof value == 'function' || false;                                                                          // 13121\n}                                                                                                                      // 13122\n                                                                                                                       // 13123\nmodule.exports = baseIsFunction;                                                                                       // 13124\n                                                                                                                       // 13125\n},{}],111:[function(require,module,exports){                                                                           // 13126\nvar baseIsEqual = require('./baseIsEqual');                                                                            // 13127\n                                                                                                                       // 13128\n                                                                                                                       // 13129\nvar objectProto = Object.prototype;                                                                                    // 13130\n                                                                                                                       // 13131\n                                                                                                                       // 13132\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13133\n                                                                                                                       // 13134\n                                                                                                                       // 13135\nfunction baseIsMatch(object, props, values, strictCompareFlags, customizer) {                                          // 13136\n  var length = props.length;                                                                                           // 13137\n  if (object == null) {                                                                                                // 13138\n    return !length;                                                                                                    // 13139\n  }                                                                                                                    // 13140\n  var index = -1,                                                                                                      // 13141\n      noCustomizer = !customizer;                                                                                      // 13142\n                                                                                                                       // 13143\n  while (++index < length) {                                                                                           // 13144\n    if ((noCustomizer && strictCompareFlags[index])                                                                    // 13145\n          ? values[index] !== object[props[index]]                                                                     // 13146\n          : !hasOwnProperty.call(object, props[index])                                                                 // 13147\n        ) {                                                                                                            // 13148\n      return false;                                                                                                    // 13149\n    }                                                                                                                  // 13150\n  }                                                                                                                    // 13151\n  index = -1;                                                                                                          // 13152\n  while (++index < length) {                                                                                           // 13153\n    var key = props[index];                                                                                            // 13154\n    if (noCustomizer && strictCompareFlags[index]) {                                                                   // 13155\n      var result = hasOwnProperty.call(object, key);                                                                   // 13156\n    } else {                                                                                                           // 13157\n      var objValue = object[key],                                                                                      // 13158\n          srcValue = values[index];                                                                                    // 13159\n                                                                                                                       // 13160\n      result = customizer ? customizer(objValue, srcValue, key) : undefined;                                           // 13161\n      if (typeof result == 'undefined') {                                                                              // 13162\n        result = baseIsEqual(srcValue, objValue, customizer, true);                                                    // 13163\n      }                                                                                                                // 13164\n    }                                                                                                                  // 13165\n    if (!result) {                                                                                                     // 13166\n      return false;                                                                                                    // 13167\n    }                                                                                                                  // 13168\n  }                                                                                                                    // 13169\n  return true;                                                                                                         // 13170\n}                                                                                                                      // 13171\n                                                                                                                       // 13172\nmodule.exports = baseIsMatch;                                                                                          // 13173\n                                                                                                                       // 13174\n},{\"./baseIsEqual\":108}],112:[function(require,module,exports){                                                        // 13175\nvar baseIsMatch = require('./baseIsMatch'),                                                                            // 13176\n    isStrictComparable = require('./isStrictComparable'),                                                              // 13177\n    keys = require('../object/keys');                                                                                  // 13178\n                                                                                                                       // 13179\n                                                                                                                       // 13180\nvar objectProto = Object.prototype;                                                                                    // 13181\n                                                                                                                       // 13182\n                                                                                                                       // 13183\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13184\n                                                                                                                       // 13185\n                                                                                                                       // 13186\nfunction baseMatches(source) {                                                                                         // 13187\n  var props = keys(source),                                                                                            // 13188\n      length = props.length;                                                                                           // 13189\n                                                                                                                       // 13190\n  if (length == 1) {                                                                                                   // 13191\n    var key = props[0],                                                                                                // 13192\n        value = source[key];                                                                                           // 13193\n                                                                                                                       // 13194\n    if (isStrictComparable(value)) {                                                                                   // 13195\n      return function(object) {                                                                                        // 13196\n        return object != null && object[key] === value && hasOwnProperty.call(object, key);                            // 13197\n      };                                                                                                               // 13198\n    }                                                                                                                  // 13199\n  }                                                                                                                    // 13200\n  var values = Array(length),                                                                                          // 13201\n      strictCompareFlags = Array(length);                                                                              // 13202\n                                                                                                                       // 13203\n  while (length--) {                                                                                                   // 13204\n    value = source[props[length]];                                                                                     // 13205\n    values[length] = value;                                                                                            // 13206\n    strictCompareFlags[length] = isStrictComparable(value);                                                            // 13207\n  }                                                                                                                    // 13208\n  return function(object) {                                                                                            // 13209\n    return baseIsMatch(object, props, values, strictCompareFlags);                                                     // 13210\n  };                                                                                                                   // 13211\n}                                                                                                                      // 13212\n                                                                                                                       // 13213\nmodule.exports = baseMatches;                                                                                          // 13214\n                                                                                                                       // 13215\n},{\"../object/keys\":141,\"./baseIsMatch\":111,\"./isStrictComparable\":127}],113:[function(require,module,exports){        // 13216\nvar baseIsEqual = require('./baseIsEqual'),                                                                            // 13217\n    isStrictComparable = require('./isStrictComparable');                                                              // 13218\n                                                                                                                       // 13219\n                                                                                                                       // 13220\nfunction baseMatchesProperty(key, value) {                                                                             // 13221\n  if (isStrictComparable(value)) {                                                                                     // 13222\n    return function(object) {                                                                                          // 13223\n      return object != null && object[key] === value;                                                                  // 13224\n    };                                                                                                                 // 13225\n  }                                                                                                                    // 13226\n  return function(object) {                                                                                            // 13227\n    return object != null && baseIsEqual(value, object[key], null, true);                                              // 13228\n  };                                                                                                                   // 13229\n}                                                                                                                      // 13230\n                                                                                                                       // 13231\nmodule.exports = baseMatchesProperty;                                                                                  // 13232\n                                                                                                                       // 13233\n},{\"./baseIsEqual\":108,\"./isStrictComparable\":127}],114:[function(require,module,exports){                             // 13234\n                                                                                                                       // 13235\nfunction baseProperty(key) {                                                                                           // 13236\n  return function(object) {                                                                                            // 13237\n    return object == null ? undefined : object[key];                                                                   // 13238\n  };                                                                                                                   // 13239\n}                                                                                                                      // 13240\n                                                                                                                       // 13241\nmodule.exports = baseProperty;                                                                                         // 13242\n                                                                                                                       // 13243\n},{}],115:[function(require,module,exports){                                                                           // 13244\nvar identity = require('../utility/identity'),                                                                         // 13245\n    metaMap = require('./metaMap');                                                                                    // 13246\n                                                                                                                       // 13247\n                                                                                                                       // 13248\nvar baseSetData = !metaMap ? identity : function(func, data) {                                                         // 13249\n  metaMap.set(func, data);                                                                                             // 13250\n  return func;                                                                                                         // 13251\n};                                                                                                                     // 13252\n                                                                                                                       // 13253\nmodule.exports = baseSetData;                                                                                          // 13254\n                                                                                                                       // 13255\n},{\"../utility/identity\":145,\"./metaMap\":128}],116:[function(require,module,exports){                                  // 13256\n                                                                                                                       // 13257\nfunction baseToString(value) {                                                                                         // 13258\n  if (typeof value == 'string') {                                                                                      // 13259\n    return value;                                                                                                      // 13260\n  }                                                                                                                    // 13261\n  return value == null ? '' : (value + '');                                                                            // 13262\n}                                                                                                                      // 13263\n                                                                                                                       // 13264\nmodule.exports = baseToString;                                                                                         // 13265\n                                                                                                                       // 13266\n},{}],117:[function(require,module,exports){                                                                           // 13267\nvar identity = require('../utility/identity');                                                                         // 13268\n                                                                                                                       // 13269\n                                                                                                                       // 13270\nfunction bindCallback(func, thisArg, argCount) {                                                                       // 13271\n  if (typeof func != 'function') {                                                                                     // 13272\n    return identity;                                                                                                   // 13273\n  }                                                                                                                    // 13274\n  if (typeof thisArg == 'undefined') {                                                                                 // 13275\n    return func;                                                                                                       // 13276\n  }                                                                                                                    // 13277\n  switch (argCount) {                                                                                                  // 13278\n    case 1: return function(value) {                                                                                   // 13279\n      return func.call(thisArg, value);                                                                                // 13280\n    };                                                                                                                 // 13281\n    case 3: return function(value, index, collection) {                                                                // 13282\n      return func.call(thisArg, value, index, collection);                                                             // 13283\n    };                                                                                                                 // 13284\n    case 4: return function(accumulator, value, index, collection) {                                                   // 13285\n      return func.call(thisArg, accumulator, value, index, collection);                                                // 13286\n    };                                                                                                                 // 13287\n    case 5: return function(value, other, key, object, source) {                                                       // 13288\n      return func.call(thisArg, value, other, key, object, source);                                                    // 13289\n    };                                                                                                                 // 13290\n  }                                                                                                                    // 13291\n  return function() {                                                                                                  // 13292\n    return func.apply(thisArg, arguments);                                                                             // 13293\n  };                                                                                                                   // 13294\n}                                                                                                                      // 13295\n                                                                                                                       // 13296\nmodule.exports = bindCallback;                                                                                         // 13297\n                                                                                                                       // 13298\n},{\"../utility/identity\":145}],118:[function(require,module,exports){                                                  // 13299\nvar bindCallback = require('./bindCallback'),                                                                          // 13300\n    isIterateeCall = require('./isIterateeCall');                                                                      // 13301\n                                                                                                                       // 13302\n                                                                                                                       // 13303\nfunction createAssigner(assigner) {                                                                                    // 13304\n  return function() {                                                                                                  // 13305\n    var args = arguments,                                                                                              // 13306\n        length = args.length,                                                                                          // 13307\n        object = args[0];                                                                                              // 13308\n                                                                                                                       // 13309\n    if (length < 2 || object == null) {                                                                                // 13310\n      return object;                                                                                                   // 13311\n    }                                                                                                                  // 13312\n    var customizer = args[length - 2],                                                                                 // 13313\n        thisArg = args[length - 1],                                                                                    // 13314\n        guard = args[3];                                                                                               // 13315\n                                                                                                                       // 13316\n    if (length > 3 && typeof customizer == 'function') {                                                               // 13317\n      customizer = bindCallback(customizer, thisArg, 5);                                                               // 13318\n      length -= 2;                                                                                                     // 13319\n    } else {                                                                                                           // 13320\n      customizer = (length > 2 && typeof thisArg == 'function') ? thisArg : null;                                      // 13321\n      length -= (customizer ? 1 : 0);                                                                                  // 13322\n    }                                                                                                                  // 13323\n    if (guard && isIterateeCall(args[1], args[2], guard)) {                                                            // 13324\n      customizer = length == 3 ? null : customizer;                                                                    // 13325\n      length = 2;                                                                                                      // 13326\n    }                                                                                                                  // 13327\n    var index = 0;                                                                                                     // 13328\n    while (++index < length) {                                                                                         // 13329\n      var source = args[index];                                                                                        // 13330\n      if (source) {                                                                                                    // 13331\n        assigner(object, source, customizer);                                                                          // 13332\n      }                                                                                                                // 13333\n    }                                                                                                                  // 13334\n    return object;                                                                                                     // 13335\n  };                                                                                                                   // 13336\n}                                                                                                                      // 13337\n                                                                                                                       // 13338\nmodule.exports = createAssigner;                                                                                       // 13339\n                                                                                                                       // 13340\n},{\"./bindCallback\":117,\"./isIterateeCall\":124}],119:[function(require,module,exports){                                // 13341\n                                                                                                                       // 13342\nfunction equalArrays(array, other, equalFunc, customizer, isWhere, stackA, stackB) {                                   // 13343\n  var index = -1,                                                                                                      // 13344\n      arrLength = array.length,                                                                                        // 13345\n      othLength = other.length,                                                                                        // 13346\n      result = true;                                                                                                   // 13347\n                                                                                                                       // 13348\n  if (arrLength != othLength && !(isWhere && othLength > arrLength)) {                                                 // 13349\n    return false;                                                                                                      // 13350\n  }                                                                                                                    // 13351\n  while (result && ++index < arrLength) {                                                                              // 13352\n    var arrValue = array[index],                                                                                       // 13353\n        othValue = other[index];                                                                                       // 13354\n                                                                                                                       // 13355\n    result = undefined;                                                                                                // 13356\n    if (customizer) {                                                                                                  // 13357\n      result = isWhere                                                                                                 // 13358\n        ? customizer(othValue, arrValue, index)                                                                        // 13359\n        : customizer(arrValue, othValue, index);                                                                       // 13360\n    }                                                                                                                  // 13361\n    if (typeof result == 'undefined') {                                                                                // 13362\n      if (isWhere) {                                                                                                   // 13363\n        var othIndex = othLength;                                                                                      // 13364\n        while (othIndex--) {                                                                                           // 13365\n          othValue = other[othIndex];                                                                                  // 13366\n          result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);\n          if (result) {                                                                                                // 13368\n            break;                                                                                                     // 13369\n          }                                                                                                            // 13370\n        }                                                                                                              // 13371\n      } else {                                                                                                         // 13372\n        result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);\n      }                                                                                                                // 13374\n    }                                                                                                                  // 13375\n  }                                                                                                                    // 13376\n  return !!result;                                                                                                     // 13377\n}                                                                                                                      // 13378\n                                                                                                                       // 13379\nmodule.exports = equalArrays;                                                                                          // 13380\n                                                                                                                       // 13381\n},{}],120:[function(require,module,exports){                                                                           // 13382\n                                                                                                                       // 13383\nvar boolTag = '[object Boolean]',                                                                                      // 13384\n    dateTag = '[object Date]',                                                                                         // 13385\n    errorTag = '[object Error]',                                                                                       // 13386\n    numberTag = '[object Number]',                                                                                     // 13387\n    regexpTag = '[object RegExp]',                                                                                     // 13388\n    stringTag = '[object String]';                                                                                     // 13389\n                                                                                                                       // 13390\n                                                                                                                       // 13391\nfunction equalByTag(object, other, tag) {                                                                              // 13392\n  switch (tag) {                                                                                                       // 13393\n    case boolTag:                                                                                                      // 13394\n    case dateTag:                                                                                                      // 13395\n      return +object == +other;                                                                                        // 13396\n                                                                                                                       // 13397\n    case errorTag:                                                                                                     // 13398\n      return object.name == other.name && object.message == other.message;                                             // 13399\n                                                                                                                       // 13400\n    case numberTag:                                                                                                    // 13401\n      return (object != +object)                                                                                       // 13402\n        ? other != +other                                                                                              // 13403\n        : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);                                            // 13404\n                                                                                                                       // 13405\n    case regexpTag:                                                                                                    // 13406\n    case stringTag:                                                                                                    // 13407\n      return object == (other + '');                                                                                   // 13408\n  }                                                                                                                    // 13409\n  return false;                                                                                                        // 13410\n}                                                                                                                      // 13411\n                                                                                                                       // 13412\nmodule.exports = equalByTag;                                                                                           // 13413\n                                                                                                                       // 13414\n},{}],121:[function(require,module,exports){                                                                           // 13415\nvar keys = require('../object/keys');                                                                                  // 13416\n                                                                                                                       // 13417\n                                                                                                                       // 13418\nvar objectProto = Object.prototype;                                                                                    // 13419\n                                                                                                                       // 13420\n                                                                                                                       // 13421\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13422\n                                                                                                                       // 13423\n                                                                                                                       // 13424\nfunction equalObjects(object, other, equalFunc, customizer, isWhere, stackA, stackB) {                                 // 13425\n  var objProps = keys(object),                                                                                         // 13426\n      objLength = objProps.length,                                                                                     // 13427\n      othProps = keys(other),                                                                                          // 13428\n      othLength = othProps.length;                                                                                     // 13429\n                                                                                                                       // 13430\n  if (objLength != othLength && !isWhere) {                                                                            // 13431\n    return false;                                                                                                      // 13432\n  }                                                                                                                    // 13433\n  var hasCtor,                                                                                                         // 13434\n      index = -1;                                                                                                      // 13435\n                                                                                                                       // 13436\n  while (++index < objLength) {                                                                                        // 13437\n    var key = objProps[index],                                                                                         // 13438\n        result = hasOwnProperty.call(other, key);                                                                      // 13439\n                                                                                                                       // 13440\n    if (result) {                                                                                                      // 13441\n      var objValue = object[key],                                                                                      // 13442\n          othValue = other[key];                                                                                       // 13443\n                                                                                                                       // 13444\n      result = undefined;                                                                                              // 13445\n      if (customizer) {                                                                                                // 13446\n        result = isWhere                                                                                               // 13447\n          ? customizer(othValue, objValue, key)                                                                        // 13448\n          : customizer(objValue, othValue, key);                                                                       // 13449\n      }                                                                                                                // 13450\n      if (typeof result == 'undefined') {                                                                              // 13451\n        result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isWhere, stackA, stackB);\n      }                                                                                                                // 13453\n    }                                                                                                                  // 13454\n    if (!result) {                                                                                                     // 13455\n      return false;                                                                                                    // 13456\n    }                                                                                                                  // 13457\n    hasCtor || (hasCtor = key == 'constructor');                                                                       // 13458\n  }                                                                                                                    // 13459\n  if (!hasCtor) {                                                                                                      // 13460\n    var objCtor = object.constructor,                                                                                  // 13461\n        othCtor = other.constructor;                                                                                   // 13462\n                                                                                                                       // 13463\n    if (objCtor != othCtor &&                                                                                          // 13464\n        ('constructor' in object && 'constructor' in other) &&                                                         // 13465\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                                // 13466\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                               // 13467\n      return false;                                                                                                    // 13468\n    }                                                                                                                  // 13469\n  }                                                                                                                    // 13470\n  return true;                                                                                                         // 13471\n}                                                                                                                      // 13472\n                                                                                                                       // 13473\nmodule.exports = equalObjects;                                                                                         // 13474\n                                                                                                                       // 13475\n},{\"../object/keys\":141}],122:[function(require,module,exports){                                                       // 13476\nvar baseSetData = require('./baseSetData'),                                                                            // 13477\n    isNative = require('../lang/isNative'),                                                                            // 13478\n    support = require('../support');                                                                                   // 13479\n                                                                                                                       // 13480\n                                                                                                                       // 13481\nvar reFuncName = /^\\s*function[ \\n\\r\\t]+\\w/;                                                                           // 13482\n                                                                                                                       // 13483\n                                                                                                                       // 13484\nvar reThis = /\\bthis\\b/;                                                                                               // 13485\n                                                                                                                       // 13486\n                                                                                                                       // 13487\nvar fnToString = Function.prototype.toString;                                                                          // 13488\n                                                                                                                       // 13489\n                                                                                                                       // 13490\nfunction isBindable(func) {                                                                                            // 13491\n  var result = !(support.funcNames ? func.name : support.funcDecomp);                                                  // 13492\n                                                                                                                       // 13493\n  if (!result) {                                                                                                       // 13494\n    var source = fnToString.call(func);                                                                                // 13495\n    if (!support.funcNames) {                                                                                          // 13496\n      result = !reFuncName.test(source);                                                                               // 13497\n    }                                                                                                                  // 13498\n    if (!result) {                                                                                                     // 13499\n      result = reThis.test(source) || isNative(func);                                                                  // 13500\n      baseSetData(func, result);                                                                                       // 13501\n    }                                                                                                                  // 13502\n  }                                                                                                                    // 13503\n  return result;                                                                                                       // 13504\n}                                                                                                                      // 13505\n                                                                                                                       // 13506\nmodule.exports = isBindable;                                                                                           // 13507\n                                                                                                                       // 13508\n},{\"../lang/isNative\":135,\"../support\":144,\"./baseSetData\":115}],123:[function(require,module,exports){                // 13509\n                                                                                                                       // 13510\nvar MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;                                                                            // 13511\n                                                                                                                       // 13512\n                                                                                                                       // 13513\nfunction isIndex(value, length) {                                                                                      // 13514\n  value = +value;                                                                                                      // 13515\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 13516\n  return value > -1 && value % 1 == 0 && value < length;                                                               // 13517\n}                                                                                                                      // 13518\n                                                                                                                       // 13519\nmodule.exports = isIndex;                                                                                              // 13520\n                                                                                                                       // 13521\n},{}],124:[function(require,module,exports){                                                                           // 13522\nvar isIndex = require('./isIndex'),                                                                                    // 13523\n    isLength = require('./isLength'),                                                                                  // 13524\n    isObject = require('../lang/isObject');                                                                            // 13525\n                                                                                                                       // 13526\n                                                                                                                       // 13527\nfunction isIterateeCall(value, index, object) {                                                                        // 13528\n  if (!isObject(object)) {                                                                                             // 13529\n    return false;                                                                                                      // 13530\n  }                                                                                                                    // 13531\n  var type = typeof index;                                                                                             // 13532\n  if (type == 'number') {                                                                                              // 13533\n    var length = object.length,                                                                                        // 13534\n        prereq = isLength(length) && isIndex(index, length);                                                           // 13535\n  } else {                                                                                                             // 13536\n    prereq = type == 'string' && index in object;                                                                      // 13537\n  }                                                                                                                    // 13538\n  if (prereq) {                                                                                                        // 13539\n    var other = object[index];                                                                                         // 13540\n    return value === value ? (value === other) : (other !== other);                                                    // 13541\n  }                                                                                                                    // 13542\n  return false;                                                                                                        // 13543\n}                                                                                                                      // 13544\n                                                                                                                       // 13545\nmodule.exports = isIterateeCall;                                                                                       // 13546\n                                                                                                                       // 13547\n},{\"../lang/isObject\":136,\"./isIndex\":123,\"./isLength\":125}],125:[function(require,module,exports){                    // 13548\n                                                                                                                       // 13549\nvar MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;                                                                            // 13550\n                                                                                                                       // 13551\n                                                                                                                       // 13552\nfunction isLength(value) {                                                                                             // 13553\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                        // 13554\n}                                                                                                                      // 13555\n                                                                                                                       // 13556\nmodule.exports = isLength;                                                                                             // 13557\n                                                                                                                       // 13558\n},{}],126:[function(require,module,exports){                                                                           // 13559\n                                                                                                                       // 13560\nfunction isObjectLike(value) {                                                                                         // 13561\n  return (value && typeof value == 'object') || false;                                                                 // 13562\n}                                                                                                                      // 13563\n                                                                                                                       // 13564\nmodule.exports = isObjectLike;                                                                                         // 13565\n                                                                                                                       // 13566\n},{}],127:[function(require,module,exports){                                                                           // 13567\nvar isObject = require('../lang/isObject');                                                                            // 13568\n                                                                                                                       // 13569\n                                                                                                                       // 13570\nfunction isStrictComparable(value) {                                                                                   // 13571\n  return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));                                      // 13572\n}                                                                                                                      // 13573\n                                                                                                                       // 13574\nmodule.exports = isStrictComparable;                                                                                   // 13575\n                                                                                                                       // 13576\n},{\"../lang/isObject\":136}],128:[function(require,module,exports){                                                     // 13577\n(function (global){                                                                                                    // 13578\nvar isNative = require('../lang/isNative');                                                                            // 13579\n                                                                                                                       // 13580\n                                                                                                                       // 13581\nvar WeakMap = isNative(WeakMap = global.WeakMap) && WeakMap;                                                           // 13582\n                                                                                                                       // 13583\n                                                                                                                       // 13584\nvar metaMap = WeakMap && new WeakMap;                                                                                  // 13585\n                                                                                                                       // 13586\nmodule.exports = metaMap;                                                                                              // 13587\n                                                                                                                       // 13588\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})                         // 13589\n},{\"../lang/isNative\":135}],129:[function(require,module,exports){                                                     // 13590\nvar isArguments = require('../lang/isArguments'),                                                                      // 13591\n    isArray = require('../lang/isArray'),                                                                              // 13592\n    isIndex = require('./isIndex'),                                                                                    // 13593\n    isLength = require('./isLength'),                                                                                  // 13594\n    keysIn = require('../object/keysIn'),                                                                              // 13595\n    support = require('../support');                                                                                   // 13596\n                                                                                                                       // 13597\n                                                                                                                       // 13598\nvar objectProto = Object.prototype;                                                                                    // 13599\n                                                                                                                       // 13600\n                                                                                                                       // 13601\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13602\n                                                                                                                       // 13603\n                                                                                                                       // 13604\nfunction shimKeys(object) {                                                                                            // 13605\n  var props = keysIn(object),                                                                                          // 13606\n      propsLength = props.length,                                                                                      // 13607\n      length = propsLength && object.length;                                                                           // 13608\n                                                                                                                       // 13609\n  var allowIndexes = length && isLength(length) &&                                                                     // 13610\n    (isArray(object) || (support.nonEnumArgs && isArguments(object)));                                                 // 13611\n                                                                                                                       // 13612\n  var index = -1,                                                                                                      // 13613\n      result = [];                                                                                                     // 13614\n                                                                                                                       // 13615\n  while (++index < propsLength) {                                                                                      // 13616\n    var key = props[index];                                                                                            // 13617\n    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {                                  // 13618\n      result.push(key);                                                                                                // 13619\n    }                                                                                                                  // 13620\n  }                                                                                                                    // 13621\n  return result;                                                                                                       // 13622\n}                                                                                                                      // 13623\n                                                                                                                       // 13624\nmodule.exports = shimKeys;                                                                                             // 13625\n                                                                                                                       // 13626\n},{\"../lang/isArguments\":131,\"../lang/isArray\":132,\"../object/keysIn\":142,\"../support\":144,\"./isIndex\":123,\"./isLength\":125}],130:[function(require,module,exports){\nvar isObject = require('../lang/isObject');                                                                            // 13628\n                                                                                                                       // 13629\n                                                                                                                       // 13630\nfunction toObject(value) {                                                                                             // 13631\n  return isObject(value) ? value : Object(value);                                                                      // 13632\n}                                                                                                                      // 13633\n                                                                                                                       // 13634\nmodule.exports = toObject;                                                                                             // 13635\n                                                                                                                       // 13636\n},{\"../lang/isObject\":136}],131:[function(require,module,exports){                                                     // 13637\nvar isLength = require('../internal/isLength'),                                                                        // 13638\n    isObjectLike = require('../internal/isObjectLike');                                                                // 13639\n                                                                                                                       // 13640\n                                                                                                                       // 13641\nvar argsTag = '[object Arguments]';                                                                                    // 13642\n                                                                                                                       // 13643\n                                                                                                                       // 13644\nvar objectProto = Object.prototype;                                                                                    // 13645\n                                                                                                                       // 13646\n                                                                                                                       // 13647\nvar objToString = objectProto.toString;                                                                                // 13648\n                                                                                                                       // 13649\n                                                                                                                       // 13650\nfunction isArguments(value) {                                                                                          // 13651\n  var length = isObjectLike(value) ? value.length : undefined;                                                         // 13652\n  return (isLength(length) && objToString.call(value) == argsTag) || false;                                            // 13653\n}                                                                                                                      // 13654\n                                                                                                                       // 13655\nmodule.exports = isArguments;                                                                                          // 13656\n                                                                                                                       // 13657\n},{\"../internal/isLength\":125,\"../internal/isObjectLike\":126}],132:[function(require,module,exports){                  // 13658\nvar isLength = require('../internal/isLength'),                                                                        // 13659\n    isNative = require('./isNative'),                                                                                  // 13660\n    isObjectLike = require('../internal/isObjectLike');                                                                // 13661\n                                                                                                                       // 13662\n                                                                                                                       // 13663\nvar arrayTag = '[object Array]';                                                                                       // 13664\n                                                                                                                       // 13665\n                                                                                                                       // 13666\nvar objectProto = Object.prototype;                                                                                    // 13667\n                                                                                                                       // 13668\n                                                                                                                       // 13669\nvar objToString = objectProto.toString;                                                                                // 13670\n                                                                                                                       // 13671\n                                                                                                                       // 13672\nvar nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray;                                          // 13673\n                                                                                                                       // 13674\n                                                                                                                       // 13675\nvar isArray = nativeIsArray || function(value) {                                                                       // 13676\n  return (isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag) || false;              // 13677\n};                                                                                                                     // 13678\n                                                                                                                       // 13679\nmodule.exports = isArray;                                                                                              // 13680\n                                                                                                                       // 13681\n},{\"../internal/isLength\":125,\"../internal/isObjectLike\":126,\"./isNative\":135}],133:[function(require,module,exports){ // 13682\nvar isArguments = require('./isArguments'),                                                                            // 13683\n    isArray = require('./isArray'),                                                                                    // 13684\n    isFunction = require('./isFunction'),                                                                              // 13685\n    isLength = require('../internal/isLength'),                                                                        // 13686\n    isObjectLike = require('../internal/isObjectLike'),                                                                // 13687\n    isString = require('./isString'),                                                                                  // 13688\n    keys = require('../object/keys');                                                                                  // 13689\n                                                                                                                       // 13690\n                                                                                                                       // 13691\nfunction isEmpty(value) {                                                                                              // 13692\n  if (value == null) {                                                                                                 // 13693\n    return true;                                                                                                       // 13694\n  }                                                                                                                    // 13695\n  var length = value.length;                                                                                           // 13696\n  if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||                                  // 13697\n      (isObjectLike(value) && isFunction(value.splice)))) {                                                            // 13698\n    return !length;                                                                                                    // 13699\n  }                                                                                                                    // 13700\n  return !keys(value).length;                                                                                          // 13701\n}                                                                                                                      // 13702\n                                                                                                                       // 13703\nmodule.exports = isEmpty;                                                                                              // 13704\n                                                                                                                       // 13705\n},{\"../internal/isLength\":125,\"../internal/isObjectLike\":126,\"../object/keys\":141,\"./isArguments\":131,\"./isArray\":132,\"./isFunction\":134,\"./isString\":137}],134:[function(require,module,exports){\n(function (global){                                                                                                    // 13707\nvar baseIsFunction = require('../internal/baseIsFunction'),                                                            // 13708\n    isNative = require('./isNative');                                                                                  // 13709\n                                                                                                                       // 13710\n                                                                                                                       // 13711\nvar funcTag = '[object Function]';                                                                                     // 13712\n                                                                                                                       // 13713\n                                                                                                                       // 13714\nvar objectProto = Object.prototype;                                                                                    // 13715\n                                                                                                                       // 13716\n                                                                                                                       // 13717\nvar objToString = objectProto.toString;                                                                                // 13718\n                                                                                                                       // 13719\n                                                                                                                       // 13720\nvar Uint8Array = isNative(Uint8Array = global.Uint8Array) && Uint8Array;                                               // 13721\n                                                                                                                       // 13722\n                                                                                                                       // 13723\nvar isFunction = !(baseIsFunction(/x/) || (Uint8Array && !baseIsFunction(Uint8Array))) ? baseIsFunction : function(value) {\n  return objToString.call(value) == funcTag;                                                                           // 13725\n};                                                                                                                     // 13726\n                                                                                                                       // 13727\nmodule.exports = isFunction;                                                                                           // 13728\n                                                                                                                       // 13729\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})                         // 13730\n},{\"../internal/baseIsFunction\":110,\"./isNative\":135}],135:[function(require,module,exports){                          // 13731\nvar escapeRegExp = require('../string/escapeRegExp'),                                                                  // 13732\n    isObjectLike = require('../internal/isObjectLike');                                                                // 13733\n                                                                                                                       // 13734\n                                                                                                                       // 13735\nvar funcTag = '[object Function]';                                                                                     // 13736\n                                                                                                                       // 13737\n                                                                                                                       // 13738\nvar reHostCtor = /^\\[object .+?Constructor\\]$/;                                                                        // 13739\n                                                                                                                       // 13740\n                                                                                                                       // 13741\nvar objectProto = Object.prototype;                                                                                    // 13742\n                                                                                                                       // 13743\n                                                                                                                       // 13744\nvar fnToString = Function.prototype.toString;                                                                          // 13745\n                                                                                                                       // 13746\n                                                                                                                       // 13747\nvar objToString = objectProto.toString;                                                                                // 13748\n                                                                                                                       // 13749\n                                                                                                                       // 13750\nvar reNative = RegExp('^' +                                                                                            // 13751\n  escapeRegExp(objToString)                                                                                            // 13752\n  .replace(/toString|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                          // 13753\n);                                                                                                                     // 13754\n                                                                                                                       // 13755\n                                                                                                                       // 13756\nfunction isNative(value) {                                                                                             // 13757\n  if (value == null) {                                                                                                 // 13758\n    return false;                                                                                                      // 13759\n  }                                                                                                                    // 13760\n  if (objToString.call(value) == funcTag) {                                                                            // 13761\n    return reNative.test(fnToString.call(value));                                                                      // 13762\n  }                                                                                                                    // 13763\n  return (isObjectLike(value) && reHostCtor.test(value)) || false;                                                     // 13764\n}                                                                                                                      // 13765\n                                                                                                                       // 13766\nmodule.exports = isNative;                                                                                             // 13767\n                                                                                                                       // 13768\n},{\"../internal/isObjectLike\":126,\"../string/escapeRegExp\":143}],136:[function(require,module,exports){                // 13769\n                                                                                                                       // 13770\nfunction isObject(value) {                                                                                             // 13771\n  var type = typeof value;                                                                                             // 13772\n  return type == 'function' || (value && type == 'object') || false;                                                   // 13773\n}                                                                                                                      // 13774\n                                                                                                                       // 13775\nmodule.exports = isObject;                                                                                             // 13776\n                                                                                                                       // 13777\n},{}],137:[function(require,module,exports){                                                                           // 13778\nvar isObjectLike = require('../internal/isObjectLike');                                                                // 13779\n                                                                                                                       // 13780\n                                                                                                                       // 13781\nvar stringTag = '[object String]';                                                                                     // 13782\n                                                                                                                       // 13783\n                                                                                                                       // 13784\nvar objectProto = Object.prototype;                                                                                    // 13785\n                                                                                                                       // 13786\n                                                                                                                       // 13787\nvar objToString = objectProto.toString;                                                                                // 13788\n                                                                                                                       // 13789\n                                                                                                                       // 13790\nfunction isString(value) {                                                                                             // 13791\n  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag) || false;           // 13792\n}                                                                                                                      // 13793\n                                                                                                                       // 13794\nmodule.exports = isString;                                                                                             // 13795\n                                                                                                                       // 13796\n},{\"../internal/isObjectLike\":126}],138:[function(require,module,exports){                                             // 13797\nvar isLength = require('../internal/isLength'),                                                                        // 13798\n    isObjectLike = require('../internal/isObjectLike');                                                                // 13799\n                                                                                                                       // 13800\n                                                                                                                       // 13801\nvar argsTag = '[object Arguments]',                                                                                    // 13802\n    arrayTag = '[object Array]',                                                                                       // 13803\n    boolTag = '[object Boolean]',                                                                                      // 13804\n    dateTag = '[object Date]',                                                                                         // 13805\n    errorTag = '[object Error]',                                                                                       // 13806\n    funcTag = '[object Function]',                                                                                     // 13807\n    mapTag = '[object Map]',                                                                                           // 13808\n    numberTag = '[object Number]',                                                                                     // 13809\n    objectTag = '[object Object]',                                                                                     // 13810\n    regexpTag = '[object RegExp]',                                                                                     // 13811\n    setTag = '[object Set]',                                                                                           // 13812\n    stringTag = '[object String]',                                                                                     // 13813\n    weakMapTag = '[object WeakMap]';                                                                                   // 13814\n                                                                                                                       // 13815\nvar arrayBufferTag = '[object ArrayBuffer]',                                                                           // 13816\n    float32Tag = '[object Float32Array]',                                                                              // 13817\n    float64Tag = '[object Float64Array]',                                                                              // 13818\n    int8Tag = '[object Int8Array]',                                                                                    // 13819\n    int16Tag = '[object Int16Array]',                                                                                  // 13820\n    int32Tag = '[object Int32Array]',                                                                                  // 13821\n    uint8Tag = '[object Uint8Array]',                                                                                  // 13822\n    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 13823\n    uint16Tag = '[object Uint16Array]',                                                                                // 13824\n    uint32Tag = '[object Uint32Array]';                                                                                // 13825\n                                                                                                                       // 13826\n                                                                                                                       // 13827\nvar typedArrayTags = {};                                                                                               // 13828\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                              // 13829\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                   // 13830\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                  // 13831\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                          // 13832\ntypedArrayTags[uint32Tag] = true;                                                                                      // 13833\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                   // 13834\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                             // 13835\ntypedArrayTags[dateTag] = typedArrayTags[errorTag] =                                                                   // 13836\ntypedArrayTags[funcTag] = typedArrayTags[mapTag] =                                                                     // 13837\ntypedArrayTags[numberTag] = typedArrayTags[objectTag] =                                                                // 13838\ntypedArrayTags[regexpTag] = typedArrayTags[setTag] =                                                                   // 13839\ntypedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;                                                        // 13840\n                                                                                                                       // 13841\n                                                                                                                       // 13842\nvar objectProto = Object.prototype;                                                                                    // 13843\n                                                                                                                       // 13844\n                                                                                                                       // 13845\nvar objToString = objectProto.toString;                                                                                // 13846\n                                                                                                                       // 13847\n                                                                                                                       // 13848\nfunction isTypedArray(value) {                                                                                         // 13849\n  return (isObjectLike(value) && isLength(value.length) && typedArrayTags[objToString.call(value)]) || false;          // 13850\n}                                                                                                                      // 13851\n                                                                                                                       // 13852\nmodule.exports = isTypedArray;                                                                                         // 13853\n                                                                                                                       // 13854\n},{\"../internal/isLength\":125,\"../internal/isObjectLike\":126}],139:[function(require,module,exports){                  // 13855\nvar baseAssign = require('../internal/baseAssign'),                                                                    // 13856\n    createAssigner = require('../internal/createAssigner');                                                            // 13857\n                                                                                                                       // 13858\n                                                                                                                       // 13859\nvar assign = createAssigner(baseAssign);                                                                               // 13860\n                                                                                                                       // 13861\nmodule.exports = assign;                                                                                               // 13862\n                                                                                                                       // 13863\n},{\"../internal/baseAssign\":100,\"../internal/createAssigner\":118}],140:[function(require,module,exports){              // 13864\nvar baseCopy = require('../internal/baseCopy'),                                                                        // 13865\n    baseCreate = require('../internal/baseCreate'),                                                                    // 13866\n    isIterateeCall = require('../internal/isIterateeCall'),                                                            // 13867\n    keys = require('./keys');                                                                                          // 13868\n                                                                                                                       // 13869\n                                                                                                                       // 13870\nfunction create(prototype, properties, guard) {                                                                        // 13871\n  var result = baseCreate(prototype);                                                                                  // 13872\n  if (guard && isIterateeCall(prototype, properties, guard)) {                                                         // 13873\n    properties = null;                                                                                                 // 13874\n  }                                                                                                                    // 13875\n  return properties ? baseCopy(properties, result, keys(properties)) : result;                                         // 13876\n}                                                                                                                      // 13877\n                                                                                                                       // 13878\nmodule.exports = create;                                                                                               // 13879\n                                                                                                                       // 13880\n},{\"../internal/baseCopy\":102,\"../internal/baseCreate\":103,\"../internal/isIterateeCall\":124,\"./keys\":141}],141:[function(require,module,exports){\nvar isLength = require('../internal/isLength'),                                                                        // 13882\n    isNative = require('../lang/isNative'),                                                                            // 13883\n    isObject = require('../lang/isObject'),                                                                            // 13884\n    shimKeys = require('../internal/shimKeys');                                                                        // 13885\n                                                                                                                       // 13886\n                                                                                                                       // 13887\nvar nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys;                                                     // 13888\n                                                                                                                       // 13889\n                                                                                                                       // 13890\nvar keys = !nativeKeys ? shimKeys : function(object) {                                                                 // 13891\n  if (object) {                                                                                                        // 13892\n    var Ctor = object.constructor,                                                                                     // 13893\n        length = object.length;                                                                                        // 13894\n  }                                                                                                                    // 13895\n  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||                                                      // 13896\n      (typeof object != 'function' && (length && isLength(length)))) {                                                 // 13897\n    return shimKeys(object);                                                                                           // 13898\n  }                                                                                                                    // 13899\n  return isObject(object) ? nativeKeys(object) : [];                                                                   // 13900\n};                                                                                                                     // 13901\n                                                                                                                       // 13902\nmodule.exports = keys;                                                                                                 // 13903\n                                                                                                                       // 13904\n},{\"../internal/isLength\":125,\"../internal/shimKeys\":129,\"../lang/isNative\":135,\"../lang/isObject\":136}],142:[function(require,module,exports){\nvar isArguments = require('../lang/isArguments'),                                                                      // 13906\n    isArray = require('../lang/isArray'),                                                                              // 13907\n    isIndex = require('../internal/isIndex'),                                                                          // 13908\n    isLength = require('../internal/isLength'),                                                                        // 13909\n    isObject = require('../lang/isObject'),                                                                            // 13910\n    support = require('../support');                                                                                   // 13911\n                                                                                                                       // 13912\n                                                                                                                       // 13913\nvar objectProto = Object.prototype;                                                                                    // 13914\n                                                                                                                       // 13915\n                                                                                                                       // 13916\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13917\n                                                                                                                       // 13918\n                                                                                                                       // 13919\nfunction keysIn(object) {                                                                                              // 13920\n  if (object == null) {                                                                                                // 13921\n    return [];                                                                                                         // 13922\n  }                                                                                                                    // 13923\n  if (!isObject(object)) {                                                                                             // 13924\n    object = Object(object);                                                                                           // 13925\n  }                                                                                                                    // 13926\n  var length = object.length;                                                                                          // 13927\n  length = (length && isLength(length) &&                                                                              // 13928\n    (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;                                 // 13929\n                                                                                                                       // 13930\n  var Ctor = object.constructor,                                                                                       // 13931\n      index = -1,                                                                                                      // 13932\n      isProto = typeof Ctor == 'function' && Ctor.prototype === object,                                                // 13933\n      result = Array(length),                                                                                          // 13934\n      skipIndexes = length > 0;                                                                                        // 13935\n                                                                                                                       // 13936\n  while (++index < length) {                                                                                           // 13937\n    result[index] = (index + '');                                                                                      // 13938\n  }                                                                                                                    // 13939\n  for (var key in object) {                                                                                            // 13940\n    if (!(skipIndexes && isIndex(key, length)) &&                                                                      // 13941\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                                   // 13942\n      result.push(key);                                                                                                // 13943\n    }                                                                                                                  // 13944\n  }                                                                                                                    // 13945\n  return result;                                                                                                       // 13946\n}                                                                                                                      // 13947\n                                                                                                                       // 13948\nmodule.exports = keysIn;                                                                                               // 13949\n                                                                                                                       // 13950\n},{\"../internal/isIndex\":123,\"../internal/isLength\":125,\"../lang/isArguments\":131,\"../lang/isArray\":132,\"../lang/isObject\":136,\"../support\":144}],143:[function(require,module,exports){\nvar baseToString = require('../internal/baseToString');                                                                // 13952\n                                                                                                                       // 13953\n                                                                                                                       // 13954\nvar reRegExpChars = /[.*+?^${}()|[\\]\\/\\\\]/g,                                                                           // 13955\n    reHasRegExpChars = RegExp(reRegExpChars.source);                                                                   // 13956\n                                                                                                                       // 13957\n                                                                                                                       // 13958\nfunction escapeRegExp(string) {                                                                                        // 13959\n  string = baseToString(string);                                                                                       // 13960\n  return (string && reHasRegExpChars.test(string))                                                                     // 13961\n    ? string.replace(reRegExpChars, '\\\\$&')                                                                            // 13962\n    : string;                                                                                                          // 13963\n}                                                                                                                      // 13964\n                                                                                                                       // 13965\nmodule.exports = escapeRegExp;                                                                                         // 13966\n                                                                                                                       // 13967\n},{\"../internal/baseToString\":116}],144:[function(require,module,exports){                                             // 13968\n(function (global){                                                                                                    // 13969\nvar isNative = require('./lang/isNative');                                                                             // 13970\n                                                                                                                       // 13971\n                                                                                                                       // 13972\nvar reThis = /\\bthis\\b/;                                                                                               // 13973\n                                                                                                                       // 13974\n                                                                                                                       // 13975\nvar objectProto = Object.prototype;                                                                                    // 13976\n                                                                                                                       // 13977\n                                                                                                                       // 13978\nvar document = (document = global.window) && document.document;                                                        // 13979\n                                                                                                                       // 13980\n                                                                                                                       // 13981\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;                                                           // 13982\n                                                                                                                       // 13983\n                                                                                                                       // 13984\nvar support = {};                                                                                                      // 13985\n                                                                                                                       // 13986\n(function(x) {                                                                                                         // 13987\n                                                                                                                       // 13988\n                                                                                                                       // 13989\n  support.funcDecomp = !isNative(global.WinRTError) && reThis.test(function() { return this; });                       // 13990\n                                                                                                                       // 13991\n                                                                                                                       // 13992\n  support.funcNames = typeof Function.name == 'string';                                                                // 13993\n                                                                                                                       // 13994\n                                                                                                                       // 13995\n  try {                                                                                                                // 13996\n    support.dom = document.createDocumentFragment().nodeType === 11;                                                   // 13997\n  } catch(e) {                                                                                                         // 13998\n    support.dom = false;                                                                                               // 13999\n  }                                                                                                                    // 14000\n                                                                                                                       // 14001\n                                                                                                                       // 14002\n  try {                                                                                                                // 14003\n    support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);                                                    // 14004\n  } catch(e) {                                                                                                         // 14005\n    support.nonEnumArgs = true;                                                                                        // 14006\n  }                                                                                                                    // 14007\n}(0, 0));                                                                                                              // 14008\n                                                                                                                       // 14009\nmodule.exports = support;                                                                                              // 14010\n                                                                                                                       // 14011\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})                         // 14012\n},{\"./lang/isNative\":135}],145:[function(require,module,exports){                                                      // 14013\n                                                                                                                       // 14014\nfunction identity(value) {                                                                                             // 14015\n  return value;                                                                                                        // 14016\n}                                                                                                                      // 14017\n                                                                                                                       // 14018\nmodule.exports = identity;                                                                                             // 14019\n                                                                                                                       // 14020\n},{}]},{},[1])                                                                                                         // 14021\n                                                                                                                       // 14022\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/peerlibrary:aws-sdk/client.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAWS = window.AWS;                                                                                                      // 1\ndelete window.AWS;                                                                                                     // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['peerlibrary:aws-sdk'] = {}, {\n  AWS: AWS\n});\n\n})();\n","servePath":"/packages/peerlibrary_aws-sdk.js"}]