[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar HTTP = Package.http.HTTP;\nvar EJSON = Package.ejson.EJSON;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar DDP = Package['ddp-client'].DDP;\n\n/* Package-scope variables */\nvar SearchSource;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                       //\n// packages/meteorhacks_search-source/lib/client.js                                      //\n//                                                                                       //\n///////////////////////////////////////////////////////////////////////////////////////////\n                                                                                         //\nSearchSource = function SearchSource(source, fields, options) {                          // 1\n  this.source = source;                                                                  // 2\n  this.searchFields = fields;                                                            // 3\n  this.currentQuery = null;                                                              // 4\n  this.options = options || {};                                                          // 5\n                                                                                         // 6\n  this.status =  new ReactiveVar({loaded: true});                                        // 7\n  this.metaData = new ReactiveVar({});                                                   // 8\n  this.history = {};                                                                     // 9\n  this.store = new Mongo.Collection(null);                                               // 10\n                                                                                         // 11\n  this._storeDep = new Tracker.Dependency();                                             // 12\n  this._currentQueryDep = new Tracker.Dependency();                                      // 13\n  this._currentVersion = 0;                                                              // 14\n  this._loadedVersion = 0;                                                               // 15\n}                                                                                        // 16\n                                                                                         // 17\nSearchSource.prototype._loadData = function(query, options) {                            // 18\n  var self = this;                                                                       // 19\n  var version = 0;                                                                       // 20\n  var historyKey = query + EJSON.stringify(options);                                     // 21\n  if(this._canUseHistory(historyKey)) {                                                  // 22\n    this._updateStore(this.history[historyKey].data);                                    // 23\n    this.metaData.set(this.history[historyKey].metadata);                                // 24\n    self._storeDep.changed();                                                            // 25\n  } else {                                                                               // 26\n    this.status.set({loading: true});                                                    // 27\n    version = ++this._currentVersion;                                                    // 28\n    this._fetch(this.source, query, options, handleData);                                // 29\n  }                                                                                      // 30\n                                                                                         // 31\n  function handleData(err, payload) {                                                    // 32\n    if(err) {                                                                            // 33\n      self.status.set({error: err});                                                     // 34\n      throw err;                                                                         // 35\n    } else {                                                                             // 36\n      if(payload instanceof Array) {                                                     // 37\n        var data = payload;                                                              // 38\n        var metadata = {};                                                               // 39\n      } else {                                                                           // 40\n        var data = payload.data;                                                         // 41\n        var metadata = payload.metadata;                                                 // 42\n        self.metaData.set(payload.metadata || {});                                       // 43\n      }                                                                                  // 44\n                                                                                         // 45\n      if(self.options.keepHistory) {                                                     // 46\n        self.history[historyKey] = {data: data, loaded: new Date(), metadata: metadata};\n      }                                                                                  // 48\n                                                                                         // 49\n      if(version > self._loadedVersion) {                                                // 50\n        self._updateStore(data);                                                         // 51\n        self._loadedVersion = version;                                                   // 52\n      }                                                                                  // 53\n                                                                                         // 54\n      if(version == self._currentVersion) {                                              // 55\n        self.status.set({loaded: true});                                                 // 56\n      }                                                                                  // 57\n                                                                                         // 58\n      self._storeDep.changed();                                                          // 59\n    }                                                                                    // 60\n  }                                                                                      // 61\n};                                                                                       // 62\n                                                                                         // 63\nSearchSource.prototype._canUseHistory = function(historyKey) {                           // 64\n  var historyItem = this.history[historyKey];                                            // 65\n  if(this.options.keepHistory && historyItem) {                                          // 66\n    var diff = Date.now() - historyItem.loaded.getTime();                                // 67\n    return diff < this.options.keepHistory;                                              // 68\n  }                                                                                      // 69\n                                                                                         // 70\n  return false;                                                                          // 71\n};                                                                                       // 72\n                                                                                         // 73\nSearchSource.prototype._updateStore = function(data) {                                   // 74\n  var self = this;                                                                       // 75\n  var storeIds = _.pluck(this.store.find().fetch(), \"_id\");                              // 76\n  var currentIds = [];                                                                   // 77\n  data.forEach(function(item) {                                                          // 78\n    currentIds.push(item._id);                                                           // 79\n    self.store.update(item._id, item, {upsert: true});                                   // 80\n  });                                                                                    // 81\n                                                                                         // 82\n  // Remove items in client DB that we no longer need                                    // 83\n  var currentIdMappings  = {};                                                           // 84\n  _.each(currentIds, function(currentId) {                                               // 85\n    // to support Object Ids                                                             // 86\n    var str = (currentId._str)? currentId._str : currentId;                              // 87\n    currentIdMappings[str] = true;                                                       // 88\n  });                                                                                    // 89\n                                                                                         // 90\n  _.each(storeIds, function(storeId) {                                                   // 91\n    // to support Object Ids                                                             // 92\n    var str = (storeId._str)? storeId._str : storeId;                                    // 93\n    if(!currentIdMappings[str]) {                                                        // 94\n      self.store.remove(storeId);                                                        // 95\n    }                                                                                    // 96\n  });                                                                                    // 97\n};                                                                                       // 98\n                                                                                         // 99\nSearchSource.prototype.search = function(query, options) {                               // 100\n  this.currentQuery = query;                                                             // 101\n  this._currentQueryDep.changed();                                                       // 102\n                                                                                         // 103\n  this._loadData(query, options);                                                        // 104\n                                                                                         // 105\n  if(this.options.localSearch) {                                                         // 106\n    this._storeDep.changed();                                                            // 107\n  }                                                                                      // 108\n};                                                                                       // 109\n                                                                                         // 110\nSearchSource.prototype.getData = function(options, getCursor) {                          // 111\n  options = options || {};                                                               // 112\n  var self = this;                                                                       // 113\n  this._storeDep.depend();                                                               // 114\n  var selector = {$or: []};                                                              // 115\n                                                                                         // 116\n  var regExp = this._buildRegExp(self.currentQuery);                                     // 117\n                                                                                         // 118\n  // only do client side searching if we are on the loading state                        // 119\n  // once loaded, we need to send all of them                                            // 120\n  if(this.getStatus().loading) {                                                         // 121\n    self.searchFields.forEach(function(field) {                                          // 122\n      var singleQuery = {};                                                              // 123\n      singleQuery[field] = regExp;                                                       // 124\n      selector['$or'].push(singleQuery);                                                 // 125\n    });                                                                                  // 126\n  } else {                                                                               // 127\n    selector = {};                                                                       // 128\n  }                                                                                      // 129\n                                                                                         // 130\n  function transform(doc) {                                                              // 131\n    if(options.transform) {                                                              // 132\n      self.searchFields.forEach(function(field) {                                        // 133\n        if(self.currentQuery && doc[field]) {                                            // 134\n          doc[field] = options.transform(doc[field], regExp, field, self.currentQuery);  // 135\n        }                                                                                // 136\n      });                                                                                // 137\n    }                                                                                    // 138\n    if(options.docTransform) {                                                           // 139\n      return options.docTransform(doc);                                                  // 140\n    }                                                                                    // 141\n                                                                                         // 142\n    return doc;                                                                          // 143\n  }                                                                                      // 144\n                                                                                         // 145\n  var cursor = this.store.find(selector, {                                               // 146\n    sort: options.sort,                                                                  // 147\n    limit: options.limit,                                                                // 148\n    transform: transform                                                                 // 149\n  });                                                                                    // 150\n                                                                                         // 151\n  if(getCursor) {                                                                        // 152\n    return cursor;                                                                       // 153\n  }                                                                                      // 154\n                                                                                         // 155\n  return cursor.fetch();                                                                 // 156\n};                                                                                       // 157\n                                                                                         // 158\nSearchSource.prototype._fetch = function(source, query, options, callback) {             // 159\n  if(typeof this.fetchData == 'function') {                                              // 160\n    this.fetchData(query, options, callback);                                            // 161\n  } else if(Meteor.status().connected) {                                                 // 162\n    this._fetchDDP.apply(this, arguments);                                               // 163\n  } else {                                                                               // 164\n    this._fetchHttp.apply(this, arguments);                                              // 165\n  }                                                                                      // 166\n};                                                                                       // 167\n                                                                                         // 168\nSearchSource.prototype._fetchDDP = function(source, query, options, callback) {          // 169\n  Meteor.call(\"search.source\", this.source, query, options, callback);                   // 170\n};                                                                                       // 171\n                                                                                         // 172\nSearchSource.prototype._fetchHttp = function(source, query, options, callback) {         // 173\n  var payload = {                                                                        // 174\n    source: source,                                                                      // 175\n    query: query,                                                                        // 176\n    options: options                                                                     // 177\n  };                                                                                     // 178\n                                                                                         // 179\n  var headers = {                                                                        // 180\n    \"Content-Type\": \"text/ejson\"                                                         // 181\n  };                                                                                     // 182\n                                                                                         // 183\n  HTTP.post('/_search-source', {                                                         // 184\n    content: EJSON.stringify(payload),                                                   // 185\n    headers: headers                                                                     // 186\n  }, function(err, res) {                                                                // 187\n    if(err) {                                                                            // 188\n      callback(err);                                                                     // 189\n    } else {                                                                             // 190\n      var response = EJSON.parse(res.content);                                           // 191\n      if(response.error) {                                                               // 192\n        callback(response.error);                                                        // 193\n      } else {                                                                           // 194\n        callback(null, response.data);                                                   // 195\n      }                                                                                  // 196\n    }                                                                                    // 197\n  });                                                                                    // 198\n};                                                                                       // 199\n                                                                                         // 200\nSearchSource.prototype.getMetadata = function() {                                        // 201\n  return this.metaData.get();                                                            // 202\n};                                                                                       // 203\n                                                                                         // 204\nSearchSource.prototype.getCurrentQuery = function() {                                    // 205\n  this._currentQueryDep.depend();                                                        // 206\n  return this.currentQuery;                                                              // 207\n}                                                                                        // 208\n                                                                                         // 209\nSearchSource.prototype.getStatus = function() {                                          // 210\n  return this.status.get();                                                              // 211\n};                                                                                       // 212\n                                                                                         // 213\nSearchSource.prototype.cleanHistory = function() {                                       // 214\n  this.history = {};                                                                     // 215\n};                                                                                       // 216\n                                                                                         // 217\nSearchSource.prototype._buildRegExp = function(query) {                                  // 218\n  query = query || \"\";                                                                   // 219\n                                                                                         // 220\n  var afterFilteredRegExpChars = query.replace(this._getRegExpFilterRegExp(), \"\\\\$&\");   // 221\n  var parts = afterFilteredRegExpChars.trim().split(' ');                                // 222\n                                                                                         // 223\n  return new RegExp(\"(\" + parts.join('|') + \")\", \"ig\");                                  // 224\n};                                                                                       // 225\n                                                                                         // 226\nSearchSource.prototype._getRegExpFilterRegExp = _.once(function() {                      // 227\n  var regExpChars = [                                                                    // 228\n    \"\\\\\", \"^\", \"$\", \"*\", \"+\", \"?\", \".\",                                                  // 229\n     \"(\", \")\", \":\", \"|\", \"{\", \"}\", \"[\", \"]\",                                             // 230\n     \"=\", \"!\", \",\"                                                                       // 231\n  ];                                                                                     // 232\n  var regExpCharsReplace = _.map(regExpChars, function(c) {                              // 233\n    return \"\\\\\" + c;                                                                     // 234\n  }).join(\"|\");                                                                          // 235\n  return new RegExp(\"(\" + regExpCharsReplace + \")\", \"g\");                                // 236\n});                                                                                      // 237\n///////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['meteorhacks:search-source'] = {}, {\n  SearchSource: SearchSource\n});\n\n})();\n","servePath":"/packages/meteorhacks_search-source.js","sourceMap":{"version":3,"sources":["/packages/meteorhacks_search-source/lib/client.js"],"names":[],"mappingsfile":"/packages/meteorhacks_search-source.js","sourcesContent":["SearchSource = function SearchSource(source, fields, options) {\n  this.source = source;\n  this.searchFields = fields;\n  this.currentQuery = null;\n  this.options = options || {};\n\n  this.status =  new ReactiveVar({loaded: true});\n  this.metaData = new ReactiveVar({});\n  this.history = {};\n  this.store = new Mongo.Collection(null);\n\n  this._storeDep = new Tracker.Dependency();\n  this._currentQueryDep = new Tracker.Dependency();\n  this._currentVersion = 0;\n  this._loadedVersion = 0;\n}\n\nSearchSource.prototype._loadData = function(query, options) {\n  var self = this;\n  var version = 0;\n  var historyKey = query + EJSON.stringify(options);\n  if(this._canUseHistory(historyKey)) {\n    this._updateStore(this.history[historyKey].data);\n    this.metaData.set(this.history[historyKey].metadata);\n    self._storeDep.changed();\n  } else {\n    this.status.set({loading: true});\n    version = ++this._currentVersion;\n    this._fetch(this.source, query, options, handleData);\n  }\n\n  function handleData(err, payload) {\n    if(err) {\n      self.status.set({error: err});\n      throw err;\n    } else {\n      if(payload instanceof Array) {\n        var data = payload;\n        var metadata = {};\n      } else {\n        var data = payload.data;\n        var metadata = payload.metadata;\n        self.metaData.set(payload.metadata || {});\n      }\n\n      if(self.options.keepHistory) {\n        self.history[historyKey] = {data: data, loaded: new Date(), metadata: metadata};\n      }\n\n      if(version > self._loadedVersion) {\n        self._updateStore(data);\n        self._loadedVersion = version;\n      }\n\n      if(version == self._currentVersion) {\n        self.status.set({loaded: true});\n      }\n\n      self._storeDep.changed();\n    }\n  }\n};\n\nSearchSource.prototype._canUseHistory = function(historyKey) {\n  var historyItem = this.history[historyKey];\n  if(this.options.keepHistory && historyItem) {\n    var diff = Date.now() - historyItem.loaded.getTime();\n    return diff < this.options.keepHistory;\n  }\n\n  return false;\n};\n\nSearchSource.prototype._updateStore = function(data) {\n  var self = this;\n  var storeIds = _.pluck(this.store.find().fetch(), \"_id\");\n  var currentIds = [];\n  data.forEach(function(item) {\n    currentIds.push(item._id);\n    self.store.update(item._id, item, {upsert: true});\n  });\n\n  // Remove items in client DB that we no longer need\n  var currentIdMappings  = {};\n  _.each(currentIds, function(currentId) {\n    // to support Object Ids\n    var str = (currentId._str)? currentId._str : currentId;\n    currentIdMappings[str] = true;\n  });\n\n  _.each(storeIds, function(storeId) {\n    // to support Object Ids\n    var str = (storeId._str)? storeId._str : storeId;\n    if(!currentIdMappings[str]) {\n      self.store.remove(storeId);\n    }\n  });\n};\n\nSearchSource.prototype.search = function(query, options) {\n  this.currentQuery = query;\n  this._currentQueryDep.changed();\n\n  this._loadData(query, options);\n\n  if(this.options.localSearch) {\n    this._storeDep.changed();\n  }\n};\n\nSearchSource.prototype.getData = function(options, getCursor) {\n  options = options || {};\n  var self = this;\n  this._storeDep.depend();\n  var selector = {$or: []};\n\n  var regExp = this._buildRegExp(self.currentQuery);\n\n  // only do client side searching if we are on the loading state\n  // once loaded, we need to send all of them\n  if(this.getStatus().loading) {\n    self.searchFields.forEach(function(field) {\n      var singleQuery = {};\n      singleQuery[field] = regExp;\n      selector['$or'].push(singleQuery);\n    });\n  } else {\n    selector = {};\n  }\n\n  function transform(doc) {\n    if(options.transform) {\n      self.searchFields.forEach(function(field) {\n        if(self.currentQuery && doc[field]) {\n          doc[field] = options.transform(doc[field], regExp, field, self.currentQuery);\n        }\n      });\n    }\n    if(options.docTransform) {\n      return options.docTransform(doc);\n    }\n\n    return doc;\n  }\n\n  var cursor = this.store.find(selector, {\n    sort: options.sort,\n    limit: options.limit,\n    transform: transform\n  });\n\n  if(getCursor) {\n    return cursor;\n  }\n\n  return cursor.fetch();\n};\n\nSearchSource.prototype._fetch = function(source, query, options, callback) {\n  if(typeof this.fetchData == 'function') {\n    this.fetchData(query, options, callback);\n  } else if(Meteor.status().connected) {\n    this._fetchDDP.apply(this, arguments);\n  } else {\n    this._fetchHttp.apply(this, arguments);\n  }\n};\n\nSearchSource.prototype._fetchDDP = function(source, query, options, callback) {\n  Meteor.call(\"search.source\", this.source, query, options, callback);\n};\n\nSearchSource.prototype._fetchHttp = function(source, query, options, callback) {\n  var payload = {\n    source: source,\n    query: query,\n    options: options\n  };\n\n  var headers = {\n    \"Content-Type\": \"text/ejson\"\n  };\n\n  HTTP.post('/_search-source', {\n    content: EJSON.stringify(payload),\n    headers: headers\n  }, function(err, res) {\n    if(err) {\n      callback(err);\n    } else {\n      var response = EJSON.parse(res.content);\n      if(response.error) {\n        callback(response.error);\n      } else {\n        callback(null, response.data);\n      }\n    }\n  });\n};\n\nSearchSource.prototype.getMetadata = function() {\n  return this.metaData.get();\n};\n\nSearchSource.prototype.getCurrentQuery = function() {\n  this._currentQueryDep.depend();\n  return this.currentQuery;\n}\n\nSearchSource.prototype.getStatus = function() {\n  return this.status.get();\n};\n\nSearchSource.prototype.cleanHistory = function() {\n  this.history = {};\n};\n\nSearchSource.prototype._buildRegExp = function(query) {\n  query = query || \"\";\n\n  var afterFilteredRegExpChars = query.replace(this._getRegExpFilterRegExp(), \"\\\\$&\");\n  var parts = afterFilteredRegExpChars.trim().split(' ');\n\n  return new RegExp(\"(\" + parts.join('|') + \")\", \"ig\");\n};\n\nSearchSource.prototype._getRegExpFilterRegExp = _.once(function() {\n  var regExpChars = [\n    \"\\\\\", \"^\", \"$\", \"*\", \"+\", \"?\", \".\",\n     \"(\", \")\", \":\", \"|\", \"{\", \"}\", \"[\", \"]\",\n     \"=\", \"!\", \",\"\n  ];\n  var regExpCharsReplace = _.map(regExpChars, function(c) {\n    return \"\\\\\" + c;\n  }).join(\"|\");\n  return new RegExp(\"(\" + regExpCharsReplace + \")\", \"g\");\n});"]}}]