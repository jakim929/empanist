[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Hooks;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:template-extension\":{\"lib\":{\"hooks.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/hooks.js                                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nHooks = {                                                                                                       // 1\n  global: {                                                                                                     // 2\n    created: [],                                                                                                // 3\n    rendered: [],                                                                                               // 4\n    destroyed: []                                                                                               // 5\n  },                                                                                                            // 2\n  master: {                                                                                                     // 7\n    created: function () {                                                                                      // 8\n      function created() {                                                                                      // 8\n        Hooks.runGlobal('created', this, arguments);                                                            // 9\n      }                                                                                                         // 10\n                                                                                                                //\n      return created;                                                                                           // 8\n    }(),                                                                                                        // 8\n    rendered: function () {                                                                                     // 11\n      function rendered() {                                                                                     // 11\n        Hooks.runGlobal('rendered', this, arguments);                                                           // 12\n      }                                                                                                         // 13\n                                                                                                                //\n      return rendered;                                                                                          // 11\n    }(),                                                                                                        // 11\n    destroyed: function () {                                                                                    // 14\n      function destroyed() {                                                                                    // 14\n        Hooks.runGlobal('destroyed', this, arguments);                                                          // 15\n      }                                                                                                         // 16\n                                                                                                                //\n      return destroyed;                                                                                         // 14\n    }()                                                                                                         // 14\n  }                                                                                                             // 7\n};                                                                                                              // 1\n                                                                                                                //\nHooks.addGlobal = function (template) {                                                                         // 20\n  // For each hookType, define the hooks for this template.                                                     //\n  // Since we might call this multiple times from startup code                                                  //\n  // and other functions, make sure we do it only once.                                                         //\n  // Doing it twice would create an infinite loop of self-calling                                               //\n  // hooks.                                                                                                     //\n  if (!template._hasTemplateExtensionMasterHooks) {                                                             // 26\n    template.onCreated(Hooks.master.created);                                                                   // 27\n    template.onRendered(Hooks.master.rendered);                                                                 // 28\n    template.onDestroyed(Hooks.master.destroyed);                                                               // 29\n                                                                                                                //\n    template._hasTemplateExtensionMasterHooks = true;                                                           // 31\n  }                                                                                                             // 32\n};                                                                                                              // 33\n                                                                                                                //\nHooks.runGlobal = function (type, template, args) {                                                             // 35\n  for (var _iterator = Hooks.global[type], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;                                                                                                   // 36\n                                                                                                                //\n    if (_isArray) {                                                                                             // 36\n      if (_i >= _iterator.length) break;                                                                        // 36\n      _ref = _iterator[_i++];                                                                                   // 36\n    } else {                                                                                                    // 36\n      _i = _iterator.next();                                                                                    // 36\n      if (_i.done) break;                                                                                       // 36\n      _ref = _i.value;                                                                                          // 36\n    }                                                                                                           // 36\n                                                                                                                //\n    var hook = _ref;                                                                                            // 36\n                                                                                                                //\n    hook.apply(template, args);                                                                                 // 37\n  }                                                                                                             // 38\n};                                                                                                              // 39\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-for-each.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-for-each.js                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.forEach = function (callback) {                                                                        // 1\n  // for some reason we get the \"body\" template twice when looping, so                                          //\n  // we track that and only call the callback once.                                                             //\n  var alreadyDidBody = false;                                                                                   // 4\n  for (var t in meteorBabelHelpers.sanitizeForInObject(Template)) {                                             // 5\n    if (Template.hasOwnProperty(t)) {                                                                           // 6\n      var tmpl = Template[t];                                                                                   // 7\n      if (Blaze.isTemplate(tmpl)) {                                                                             // 8\n        var name = tmpl.viewName;                                                                               // 9\n        if (name === \"body\") {                                                                                  // 10\n          if (!alreadyDidBody) {                                                                                // 11\n            alreadyDidBody = true;                                                                              // 12\n            callback(tmpl);                                                                                     // 13\n          }                                                                                                     // 14\n        } else if (name !== 'Template.__dynamic' && name !== 'Template.__dynamicWithDataContext') {             // 15\n          callback(tmpl);                                                                                       // 16\n        }                                                                                                       // 17\n      }                                                                                                         // 18\n    }                                                                                                           // 19\n  }                                                                                                             // 20\n};                                                                                                              // 21\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-hooks.js\":[\"babel-runtime/helpers/typeof\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-hooks.js                                                     //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                         //\n                                                                                                                //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                //\n                                                                                                                //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }               //\n                                                                                                                //\nTemplate.prototype.hooks = function (hooks) {                                                                   // 1\n  if (!hooks || (typeof hooks === \"undefined\" ? \"undefined\" : (0, _typeof3[\"default\"])(hooks)) !== \"object\") {  // 2\n    throw new Error(\"hooks argument must be an object with created, rendered, and/or destroyed properties, each set to a function\");\n  }                                                                                                             // 4\n                                                                                                                //\n  if (typeof hooks.created === 'function') this.onCreated(hooks.created);                                       // 6\n  if (typeof hooks.rendered === 'function') this.onRendered(hooks.rendered);                                    // 7\n  if (typeof hooks.destroyed === 'function') this.onDestroyed(hooks.destroyed);                                 // 8\n};                                                                                                              // 9\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"template-global-hooks.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-global-hooks.js                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Setup for multiple hooks support                                                                             //\n// We assume that no other code will be directly defining                                                       //\n// a hook once the client has started.                                                                          //\nMeteor.startup(function () {                                                                                    // 4\n  Template.forEach(function (template) {                                                                        // 5\n    Hooks.addGlobal(template);                                                                                  // 6\n  });                                                                                                           // 7\n});                                                                                                             // 8\n                                                                                                                //\nTemplate.onCreated = function (hook) {                                                                          // 10\n  Hooks.global.created.push(hook);                                                                              // 11\n};                                                                                                              // 12\n                                                                                                                //\nTemplate.onRendered = function (hook) {                                                                         // 14\n  Hooks.global.rendered.push(hook);                                                                             // 15\n};                                                                                                              // 16\n                                                                                                                //\nTemplate.onDestroyed = function (hook) {                                                                        // 18\n  Hooks.global.destroyed.push(hook);                                                                            // 19\n};                                                                                                              // 20\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-for-each-instance.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-for-each-instance.js                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate._renderedInstances = [];                                                                               // 1\n                                                                                                                //\nTemplate.onRendered(function () {                                                                               // 3\n  Template._renderedInstances.push(this);                                                                       // 4\n});                                                                                                             // 5\n                                                                                                                //\nTemplate.onDestroyed(function () {                                                                              // 7\n  var i = Template._renderedInstances.indexOf(this);                                                            // 8\n  if (i > -1) Template._renderedInstances.splice(i, 1);                                                         // 9\n});                                                                                                             // 10\n                                                                                                                //\nTemplate.forEachCurrentlyRenderedInstance = function (func) {                                                   // 12\n  Template._renderedInstances.forEach(func);                                                                    // 13\n};                                                                                                              // 14\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-inherits-events-from.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-inherits-events-from.js                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.inheritsEventsFrom = function () {                                                           // 1\n  function inheritsEventsFrom(otherTemplate) {                                                                  // 1\n    var self = this;                                                                                            // 2\n                                                                                                                //\n    self.__eventMaps = self.__eventMaps || [];                                                                  // 4\n                                                                                                                //\n    function inheritEvents(template) {                                                                          // 6\n      // String template names can be provided and template object is looked up                                 //\n      if (typeof template === 'string') template = Template[template];                                          // 8\n      if (!template) return;                                                                                    // 9\n                                                                                                                //\n      self.__eventMaps = self.__eventMaps.concat(template.__eventMaps);                                         // 11\n    }                                                                                                           // 12\n                                                                                                                //\n    // Accept an array as otherTemplate argument                                                                //\n    if (_.isArray(otherTemplate)) {                                                                             // 15\n      _.each(otherTemplate, inheritEvents);                                                                     // 16\n    } else {                                                                                                    // 17\n      //otherTemplate is a string                                                                               //\n      inheritEvents(otherTemplate);                                                                             // 18\n    }                                                                                                           // 19\n  }                                                                                                             // 20\n                                                                                                                //\n  return inheritsEventsFrom;                                                                                    // 1\n}();                                                                                                            // 1\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-inherits-helpers-from.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-inherits-helpers-from.js                                     //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.inheritsHelpersFrom = function () {                                                          // 1\n  function inheritsHelpersFrom(otherTemplate) {                                                                 // 1\n    var self = this;                                                                                            // 2\n                                                                                                                //\n    function inheritHelpers(template) {                                                                         // 4\n      // String template names can be provided and template object is looked up                                 //\n      if (typeof template === 'string') template = Template[template];                                          // 6\n      if (!template) return;                                                                                    // 7\n                                                                                                                //\n      var inheritedHelpers = {};                                                                                // 9\n      _.each(template.__helpers, function (helper, name) {                                                      // 10\n        if (name.charAt(0) === \" \") inheritedHelpers[name.slice(1)] = helper;                                   // 11\n      });                                                                                                       // 12\n                                                                                                                //\n      self.helpers(inheritedHelpers);                                                                           // 14\n    }                                                                                                           // 15\n                                                                                                                //\n    // Accept an array as otherTemplate argument                                                                //\n    if (_.isArray(otherTemplate)) {                                                                             // 18\n      _.each(otherTemplate, inheritHelpers);                                                                    // 19\n    } else {                                                                                                    // 20\n      //otherTemplate is a string                                                                               //\n      inheritHelpers(otherTemplate);                                                                            // 21\n    }                                                                                                           // 22\n  }                                                                                                             // 23\n                                                                                                                //\n  return inheritsHelpersFrom;                                                                                   // 1\n}();                                                                                                            // 1\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-inherits-hooks-from.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-inherits-hooks-from.js                                       //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.inheritsHooksFrom = function () {                                                            // 1\n  function inheritsHooksFrom(otherTemplate) {                                                                   // 1\n    var self = this;                                                                                            // 2\n                                                                                                                //\n    function inheritHooks(template) {                                                                           // 4\n      // String template names can be provided and template object is looked up                                 //\n      if (typeof template === 'string') template = Template[template];                                          // 6\n      if (!template) return;                                                                                    // 7\n                                                                                                                //\n      // For this to work properly, need to ensure that we've defined                                           //\n      // the global hook hook for the other template already.                                                   //\n      Hooks.addGlobal(template);                                                                                // 11\n                                                                                                                //\n      for (var _iterator = template._callbacks.created, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;                                                                                               // 13\n                                                                                                                //\n        if (_isArray) {                                                                                         // 13\n          if (_i >= _iterator.length) break;                                                                    // 13\n          _ref = _iterator[_i++];                                                                               // 13\n        } else {                                                                                                // 13\n          _i = _iterator.next();                                                                                // 13\n          if (_i.done) break;                                                                                   // 13\n          _ref = _i.value;                                                                                      // 13\n        }                                                                                                       // 13\n                                                                                                                //\n        var hook = _ref;                                                                                        // 13\n                                                                                                                //\n        // Don't copy the master hook because every template already has it                                     //\n        if (hook === Hooks.master.created) continue;                                                            // 15\n        self.onCreated(hook);                                                                                   // 16\n      }                                                                                                         // 17\n                                                                                                                //\n      for (var _iterator2 = template._callbacks.rendered, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;                                                                                              // 19\n                                                                                                                //\n        if (_isArray2) {                                                                                        // 19\n          if (_i2 >= _iterator2.length) break;                                                                  // 19\n          _ref2 = _iterator2[_i2++];                                                                            // 19\n        } else {                                                                                                // 19\n          _i2 = _iterator2.next();                                                                              // 19\n          if (_i2.done) break;                                                                                  // 19\n          _ref2 = _i2.value;                                                                                    // 19\n        }                                                                                                       // 19\n                                                                                                                //\n        var _hook = _ref2;                                                                                      // 19\n                                                                                                                //\n        // Don't copy the master hook because every template already has it                                     //\n        if (_hook === Hooks.master.rendered) continue;                                                          // 21\n        self.onRendered(_hook);                                                                                 // 22\n      }                                                                                                         // 23\n                                                                                                                //\n      for (var _iterator3 = template._callbacks.destroyed, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;                                                                                              // 25\n                                                                                                                //\n        if (_isArray3) {                                                                                        // 25\n          if (_i3 >= _iterator3.length) break;                                                                  // 25\n          _ref3 = _iterator3[_i3++];                                                                            // 25\n        } else {                                                                                                // 25\n          _i3 = _iterator3.next();                                                                              // 25\n          if (_i3.done) break;                                                                                  // 25\n          _ref3 = _i3.value;                                                                                    // 25\n        }                                                                                                       // 25\n                                                                                                                //\n        var _hook2 = _ref3;                                                                                     // 25\n                                                                                                                //\n        // Don't copy the master hook because every template already has it                                     //\n        if (_hook2 === Hooks.master.destroyed) continue;                                                        // 27\n        self.onDestroyed(_hook2);                                                                               // 28\n      }                                                                                                         // 29\n    }                                                                                                           // 30\n                                                                                                                //\n    // Accept an array as otherTemplate argument                                                                //\n    if (_.isArray(otherTemplate)) {                                                                             // 33\n      _.each(otherTemplate, inheritHooks);                                                                      // 34\n    } else {                                                                                                    // 35\n      //otherTemplate is a string                                                                               //\n      inheritHooks(otherTemplate);                                                                              // 36\n    }                                                                                                           // 37\n  }                                                                                                             // 38\n                                                                                                                //\n  return inheritsHooksFrom;                                                                                     // 1\n}();                                                                                                            // 1\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-register-helpers.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-register-helpers.js                                          //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.registerHelpers = function (helpers) {                                                                 // 1\n  if (!helpers) return;                                                                                         // 2\n                                                                                                                //\n  for (var name in meteorBabelHelpers.sanitizeForInObject(helpers)) {                                           // 4\n    if (helpers.hasOwnProperty(name)) {                                                                         // 5\n      Template.registerHelper(name, helpers[name]);                                                             // 6\n    }                                                                                                           // 7\n  }                                                                                                             // 8\n};                                                                                                              // 9\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-replaces.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-replaces.js                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.replaces = function () {                                                                     // 1\n  function replaces(otherTemplate) {                                                                            // 1\n    var self = this;                                                                                            // 2\n                                                                                                                //\n    function replaceRender(template) {                                                                          // 4\n      // String template names can be provided and template object is looked up                                 //\n      if (typeof template === 'string') template = Template[template];                                          // 6\n      if (!template) return;                                                                                    // 7\n                                                                                                                //\n      template.renderFunction = self.renderFunction;                                                            // 9\n    }                                                                                                           // 10\n                                                                                                                //\n    // Accept an array as otherTemplate argument                                                                //\n    if (_.isArray(otherTemplate)) {                                                                             // 13\n      _.each(otherTemplate, replaceRender);                                                                     // 14\n    } else {                                                                                                    // 15\n      replaceRender(otherTemplate);                                                                             // 16\n    }                                                                                                           // 17\n  }                                                                                                             // 18\n                                                                                                                //\n  return replaces;                                                                                              // 1\n}();                                                                                                            // 1\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-clear-event-maps.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-clear-event-maps.js                                          //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.clearEventMaps = function () {                                                               // 1\n  function clearEventMaps() {                                                                                   // 1\n    this.__eventMaps = [];                                                                                      // 2\n  }                                                                                                             // 3\n                                                                                                                //\n  return clearEventMaps;                                                                                        // 1\n}();                                                                                                            // 1\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-copy-as.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-copy-as.js                                                   //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.copyAs = function () {                                                                       // 1\n  function copyAs(newTemplateName) {                                                                            // 1\n    var self = this;                                                                                            // 2\n                                                                                                                //\n    function createNewTemplate(templateName) {                                                                  // 4\n      var newTemplate = Template[templateName] = new Template(\"Template.\" + templateName, self.renderFunction);\n                                                                                                                //\n      newTemplate.inheritsHelpersFrom(self);                                                                    // 8\n      newTemplate.inheritsEventsFrom(self);                                                                     // 9\n      newTemplate.inheritsHooksFrom(self);                                                                      // 10\n                                                                                                                //\n      return newTemplate;                                                                                       // 12\n    }                                                                                                           // 13\n                                                                                                                //\n    // Check if newTemplateName is an array                                                                     //\n    if (_.isArray(newTemplateName)) {                                                                           // 16\n      var result = [];                                                                                          // 17\n      for (var _iterator = newTemplateName, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;                                                                                               // 18\n                                                                                                                //\n        if (_isArray) {                                                                                         // 18\n          if (_i >= _iterator.length) break;                                                                    // 18\n          _ref = _iterator[_i++];                                                                               // 18\n        } else {                                                                                                // 18\n          _i = _iterator.next();                                                                                // 18\n          if (_i.done) break;                                                                                   // 18\n          _ref = _i.value;                                                                                      // 18\n        }                                                                                                       // 18\n                                                                                                                //\n        var name = _ref;                                                                                        // 18\n                                                                                                                //\n        result.push(createNewTemplate(name));                                                                   // 19\n      }                                                                                                         // 20\n      return result;                                                                                            // 21\n    } else {                                                                                                    // 22\n      //newTemplateName is a string                                                                             //\n      return createNewTemplate(newTemplateName);                                                                // 23\n    }                                                                                                           // 24\n  }                                                                                                             // 25\n                                                                                                                //\n  return copyAs;                                                                                                // 1\n}();                                                                                                            // 1\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-instance-parent.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-instance-parent.js                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Access parent template instance. \"height\" is the number of levels beyond the                                 //\n// current template instance to look. By default block helper template instances                                //\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.                                      //\n// See https://github.com/meteor/meteor/issues/3071                                                             //\nBlaze.TemplateInstance.prototype.parent = function () {                                                         // 5\n  function parent(height, includeBlockHelpers) {                                                                // 5\n    // If height is null or undefined, we default to 1, the first parent.                                       //\n    if (height == null) height = 1;                                                                             // 7\n                                                                                                                //\n    var i = 0;                                                                                                  // 9\n    var template = this;                                                                                        // 10\n    while (i < height && template) {                                                                            // 11\n      var view = parentView(template.view, includeBlockHelpers);                                                // 12\n      // We skip contentBlock views which are injected by Meteor when using                                     //\n      // block helpers (in addition to block helper view). This matches more                                    //\n      // the visual structure of templates and not the internal implementation.                                 //\n      while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {       // 16\n        view = parentView(view, includeBlockHelpers);                                                           // 17\n      }                                                                                                         // 18\n      if (!view) return null;                                                                                   // 19\n      // Body view has template field, but not templateInstance,                                                //\n      // which more or less signals that we reached the top.                                                    //\n      template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;                  // 22\n      i++;                                                                                                      // 23\n    }                                                                                                           // 24\n    return template;                                                                                            // 25\n  }                                                                                                             // 26\n                                                                                                                //\n  return parent;                                                                                                // 5\n}();                                                                                                            // 5\n                                                                                                                //\nfunction parentView(view, includeBlockHelpers) {                                                                // 28\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;                                   // 29\n  return view.parentView;                                                                                       // 30\n}                                                                                                               // 31\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-instance-get.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-instance-get.js                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Allow easy access to a template instance field when you do not know exactly                                  //\n// on which instance (this, or parent, or parent's parent, ...) a field is defined.                             //\n// This allows easy restructuring of templates in HTML, moving things to included                               //\n// templates without having to change everywhere in the code instance levels.                                   //\n// It also allows different structures of templates, when once template is included                             //\n// at one level, and some other time at another. Levels do not matter anymore, just                             //\n// that the field exists somewhere.                                                                             //\nBlaze.TemplateInstance.prototype.get = function () {                                                            // 8\n  function get(fieldName) {                                                                                     // 8\n    var template = this;                                                                                        // 9\n                                                                                                                //\n    while (template) {                                                                                          // 11\n      if (fieldName in template) return template[fieldName];                                                    // 12\n      template = template.parent(1, true);                                                                      // 13\n    }                                                                                                           // 14\n  }                                                                                                             // 15\n                                                                                                                //\n  return get;                                                                                                   // 8\n}();                                                                                                            // 8\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-parent-data-function.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-parent-data-function.js                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Allow to specify a function to test parent data for at various                                               //\n// levels, instead of specifying a fixed number of levels to traverse.                                          //\nvar originalParentData = Blaze._parentData;                                                                     // 3\nBlaze._parentData = function (height, _functionWrapped) {                                                       // 4\n  // If height is not a function, simply call original implementation.                                          //\n  if (typeof height !== 'function') return originalParentData(height, _functionWrapped);                        // 6\n                                                                                                                //\n  var theWith = Blaze.getView('with');                                                                          // 8\n  var test = function test() {                                                                                  // 9\n    return height(theWith.dataVar.get());                                                                       // 9\n  };                                                                                                            // 9\n  while (theWith) {                                                                                             // 10\n    if (Tracker.nonreactive(test)) break;                                                                       // 11\n    theWith = Blaze.getView(theWith, 'with');                                                                   // 12\n  }                                                                                                             // 13\n                                                                                                                //\n  // _functionWrapped is internal and will not be                                                               //\n  // specified with non numeric height, so we ignore it.                                                        //\n  if (!theWith) return null;                                                                                    // 17\n  // This registers a Tracker dependency.                                                                       //\n  return theWith.dataVar.get();                                                                                 // 19\n};                                                                                                              // 20\n                                                                                                                //\nTemplate.parentData = Blaze._parentData;                                                                        // 22\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/hooks.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-for-each.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-hooks.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-global-hooks.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-for-each-instance.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-inherits-events-from.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-inherits-helpers-from.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-inherits-hooks-from.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-register-helpers.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-replaces.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-clear-event-maps.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-copy-as.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-instance-parent.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-instance-get.js\");\nrequire(\"./node_modules/meteor/aldeed:template-extension/lib/template-parent-data-function.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aldeed:template-extension'] = {};\n\n})();\n","servePath":"/packages/aldeed_template-extension.js","sourceMap":{"version":3,"sources":["/packages/aldeed:template-extension/lib/hooks.js","/packages/aldeed:template-extension/lib/template-for-each.js","/packages/aldeed:template-extension/lib/template-hooks.js","/packages/aldeed:template-extension/lib/template-global-hooks.js","/packages/aldeed:template-extension/lib/template-for-each-instance.js","/packages/aldeed:template-extension/lib/template-inherits-events-from.js","/packages/aldeed:template-extension/lib/template-inherits-helpers-from.js","/packages/aldeed:template-extension/lib/template-inherits-hooks-from.js","/packages/aldeed:template-extension/lib/template-register-helpers.js","/packages/aldeed:template-extension/lib/template-replaces.js","/packages/aldeed:template-extension/lib/template-clear-event-maps.js","/packages/aldeed:template-extension/lib/template-copy-as.js","/packages/aldeed:template-extension/lib/template-instance-parent.js","/packages/aldeed:template-extension/lib/template-instance-get.js","/packages/aldeed:template-extension/lib/template-parent-data-function.js"],"names":[],"mappings":"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","file":"/packages/aldeed_template-extension.js","sourcesContent":["Hooks = {\n  global: {\n    created: [],\n    rendered: [],\n    destroyed: []\n  },\n  master: {\n    created: function () {\n      Hooks.runGlobal('created', this, arguments);\n    },\n    rendered: function () {\n      Hooks.runGlobal('rendered', this, arguments);\n    },\n    destroyed: function () {\n      Hooks.runGlobal('destroyed', this, arguments);\n    }\n  }\n};\n\nHooks.addGlobal = (template) => {\n  // For each hookType, define the hooks for this template.\n  // Since we might call this multiple times from startup code\n  // and other functions, make sure we do it only once.\n  // Doing it twice would create an infinite loop of self-calling\n  // hooks.\n  if (!template._hasTemplateExtensionMasterHooks) {\n    template.onCreated(Hooks.master.created);\n    template.onRendered(Hooks.master.rendered);\n    template.onDestroyed(Hooks.master.destroyed);\n    \n    template._hasTemplateExtensionMasterHooks = true;\n  }\n};\n\nHooks.runGlobal = (type, template, args) => {\n  for (let hook of Hooks.global[type]) {\n    hook.apply(template, args);\n  }\n};\n","Template.forEach = (callback) => {\n  // for some reason we get the \"body\" template twice when looping, so\n  // we track that and only call the callback once.\n  var alreadyDidBody = false;\n  for (var t in Template) {\n    if (Template.hasOwnProperty(t)) {\n      var tmpl = Template[t];\n      if (Blaze.isTemplate(tmpl)) {\n        let name = tmpl.viewName;\n        if (name === \"body\") {\n          if (!alreadyDidBody) {\n            alreadyDidBody = true;\n            callback(tmpl);\n          }\n        } else if (name !== 'Template.__dynamic' && name !== 'Template.__dynamicWithDataContext') {\n          callback(tmpl);\n        }\n      }\n    }\n  }\n};\n","Template.prototype.hooks = function (hooks) {\n  if (!hooks || typeof hooks !== \"object\") {\n    throw new Error(\"hooks argument must be an object with created, rendered, and/or destroyed properties, each set to a function\");\n  }\n  \n  if (typeof hooks.created === 'function') this.onCreated(hooks.created);\n  if (typeof hooks.rendered === 'function') this.onRendered(hooks.rendered);\n  if (typeof hooks.destroyed === 'function') this.onDestroyed(hooks.destroyed);\n};\n","// Setup for multiple hooks support\n// We assume that no other code will be directly defining\n// a hook once the client has started.\nMeteor.startup(() => {\n  Template.forEach((template) => {\n    Hooks.addGlobal(template);\n  });\n});\n\nTemplate.onCreated = (hook) => {\n  Hooks.global.created.push(hook);\n};\n\nTemplate.onRendered = (hook) => {\n  Hooks.global.rendered.push(hook);\n};\n\nTemplate.onDestroyed = (hook) => {\n  Hooks.global.destroyed.push(hook);\n};\n","Template._renderedInstances = [];\n\nTemplate.onRendered(function () {\n  Template._renderedInstances.push(this);\n});\n\nTemplate.onDestroyed(function () {\n  var i = Template._renderedInstances.indexOf(this);\n  if (i > -1) Template._renderedInstances.splice(i, 1);\n});\n\nTemplate.forEachCurrentlyRenderedInstance = (func) => {\n  Template._renderedInstances.forEach(func);\n};\n","Template.prototype.inheritsEventsFrom = function inheritsEventsFrom(otherTemplate) {\n  var self = this;\n  \n  self.__eventMaps = self.__eventMaps || [];\n\n  function inheritEvents(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    self.__eventMaps = self.__eventMaps.concat(template.__eventMaps);\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritEvents);\n  } else { //otherTemplate is a string\n    inheritEvents(otherTemplate);\n  }\n};\n","Template.prototype.inheritsHelpersFrom = function inheritsHelpersFrom(otherTemplate) {\n  var self = this;\n  \n  function inheritHelpers(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    let inheritedHelpers = {};\n    _.each(template.__helpers, (helper, name) => {\n      if (name.charAt(0) === \" \") inheritedHelpers[name.slice(1)] = helper;\n    });\n\n    self.helpers(inheritedHelpers);\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritHelpers);\n  } else { //otherTemplate is a string\n    inheritHelpers(otherTemplate);\n  }\n};\n","Template.prototype.inheritsHooksFrom = function inheritsHooksFrom(otherTemplate) {\n  var self = this;\n  \n  function inheritHooks(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    // For this to work properly, need to ensure that we've defined\n    // the global hook hook for the other template already.\n    Hooks.addGlobal(template);\n    \n    for (let hook of template._callbacks.created) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.created) continue;\n      self.onCreated(hook);\n    }\n    \n    for (let hook of template._callbacks.rendered) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.rendered) continue;\n      self.onRendered(hook);\n    }\n    \n    for (let hook of template._callbacks.destroyed) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.destroyed) continue;\n      self.onDestroyed(hook);\n    }\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritHooks);\n  } else { //otherTemplate is a string\n    inheritHooks(otherTemplate);\n  }\n};\n","Template.registerHelpers = (helpers) => {\n  if (!helpers) return;\n\n  for (let name in helpers) {\n    if (helpers.hasOwnProperty(name)) {\n      Template.registerHelper(name, helpers[name]);\n    }\n  }\n};\n","Template.prototype.replaces = function replaces(otherTemplate) {\n  var self = this;\n\n  function replaceRender(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n\n    template.renderFunction = self.renderFunction;\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, replaceRender);\n  } else {\n    replaceRender(otherTemplate);\n  }\n};\n","Template.prototype.clearEventMaps = function clearEventMaps() {\n  this.__eventMaps = [];\n};\n","Template.prototype.copyAs = function copyAs(newTemplateName) {\n  var self = this;\n\n  function createNewTemplate(templateName) {\n    var newTemplate =\n    Template[templateName] = new Template(`Template.${templateName}`, self.renderFunction);\n\n    newTemplate.inheritsHelpersFrom(self);\n    newTemplate.inheritsEventsFrom(self);\n    newTemplate.inheritsHooksFrom(self);\n\n    return newTemplate;\n  }\n\n  // Check if newTemplateName is an array\n  if (_.isArray(newTemplateName)) {\n    let result = [];\n    for (let name of newTemplateName) {\n      result.push(createNewTemplate(name));\n    }\n    return result;\n  } else { //newTemplateName is a string\n    return createNewTemplate(newTemplateName);\n  }\n};\n","// Access parent template instance. \"height\" is the number of levels beyond the\n// current template instance to look. By default block helper template instances\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.\n// See https://github.com/meteor/meteor/issues/3071\nBlaze.TemplateInstance.prototype.parent = function parent(height, includeBlockHelpers) {\n  // If height is null or undefined, we default to 1, the first parent.\n  if (height == null) height = 1;\n\n  var i = 0;\n  var template = this;\n  while (i < height && template) {\n    var view = parentView(template.view, includeBlockHelpers);\n    // We skip contentBlock views which are injected by Meteor when using\n    // block helpers (in addition to block helper view). This matches more\n    // the visual structure of templates and not the internal implementation.\n    while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {\n      view = parentView(view, includeBlockHelpers);\n    }\n    if (!view) return null;\n    // Body view has template field, but not templateInstance,\n    // which more or less signals that we reached the top.\n    template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;\n    i++;\n  }\n  return template;\n};\n\nfunction parentView(view, includeBlockHelpers) {\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;\n  return view.parentView;\n}\n","// Allow easy access to a template instance field when you do not know exactly\n// on which instance (this, or parent, or parent's parent, ...) a field is defined.\n// This allows easy restructuring of templates in HTML, moving things to included\n// templates without having to change everywhere in the code instance levels.\n// It also allows different structures of templates, when once template is included\n// at one level, and some other time at another. Levels do not matter anymore, just\n// that the field exists somewhere.\nBlaze.TemplateInstance.prototype.get = function get(fieldName) {\n  var template = this;\n\n  while (template) {\n    if (fieldName in template) return template[fieldName];\n    template = template.parent(1, true);\n  }\n};\n","// Allow to specify a function to test parent data for at various\n// levels, instead of specifying a fixed number of levels to traverse.\nvar originalParentData = Blaze._parentData;\nBlaze._parentData = function (height, _functionWrapped) {\n  // If height is not a function, simply call original implementation.\n  if (typeof height !== 'function') return originalParentData(height, _functionWrapped);\n\n  var theWith = Blaze.getView('with');\n  var test = () => { return height(theWith.dataVar.get()); };\n  while (theWith) {\n    if (Tracker.nonreactive(test)) break;\n    theWith = Blaze.getView(theWith, 'with');\n  }\n\n  // _functionWrapped is internal and will not be\n  // specified with non numeric height, so we ignore it.\n  if (!theWith) return null;\n  // This registers a Tracker dependency.\n  return theWith.dataVar.get();\n};\n\nTemplate.parentData = Blaze._parentData;\n"]}}]