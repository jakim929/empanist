[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Index, Engine, ReactiveEngine, Cursor, SearchCollection, MongoDBEngine, MinimongoEngine, MongoTextIndexEngine, EasySearch;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"easysearch:core\":{\"lib\":{\"core\":{\"index.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/createClass\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_core/lib/core/index.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require('babel-runtime/helpers/createClass');                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * An Index represents the main entry point for searching with EasySearch. It relies on                                //\n * the given engine to have the search functionality and defines the data that should be searchable.                   //\n *                                                                                                                     //\n * @type {Index}                                                                                                       //\n */                                                                                                                    //\nIndex = function () {                                                                                                  // 7\n  /**                                                                                                                  //\n   * Constructor                                                                                                       //\n   *                                                                                                                   //\n   * @param {Object} config Configuration                                                                              //\n   *                                                                                                                   //\n   * @constructor                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\n  function Index(config) {                                                                                             // 15\n    (0, _classCallCheck3['default'])(this, Index);                                                                     // 15\n                                                                                                                       //\n    check(config, Object);                                                                                             // 16\n    check(config.collection, Meteor.Collection);                                                                       // 17\n    check(config.fields, [String]);                                                                                    // 18\n                                                                                                                       //\n    if (!(config.engine instanceof Engine)) {                                                                          // 20\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');                                // 21\n    }                                                                                                                  // 22\n                                                                                                                       //\n    if (!config.name) config.name = (config.collection._name || '').toLowerCase();                                     // 24\n                                                                                                                       //\n    this.config = _.extend(Index.defaultConfiguration, config);                                                        // 27\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });   // 28\n                                                                                                                       //\n    // Engine specific code on index creation                                                                          //\n    config.engine.onIndexCreate(this.config);                                                                          // 31\n  }                                                                                                                    // 32\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Default configuration for an index.                                                                               //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Search the index.                                                                                                 //\n   *                                                                                                                   //\n   * @param {Object|String} searchDefinition Search definition                                                         //\n   * @param {Object}        options          Options                                                                   //\n   *                                                                                                                   //\n   * @returns {Cursor}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n  Index.prototype.search = function search(searchDefinition) {                                                         // 7\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                             // 54\n                                                                                                                       //\n    this.config.engine.checkSearchParam(searchDefinition, this.config);                                                // 55\n                                                                                                                       //\n    check(options, {                                                                                                   // 57\n      limit: Match.Optional(Number),                                                                                   // 58\n      skip: Match.Optional(Number),                                                                                    // 59\n      props: Match.Optional(Object)                                                                                    // 60\n    });                                                                                                                // 57\n                                                                                                                       //\n    options = {                                                                                                        // 63\n      search: this._getSearchOptions(options),                                                                         // 64\n      index: this.config                                                                                               // 65\n    };                                                                                                                 // 63\n                                                                                                                       //\n    if (!this.config.permission(options.search)) {                                                                     // 68\n      throw new Meteor.Error('not-allowed', \"Not allowed to search this index!\");                                      // 69\n    }                                                                                                                  // 70\n                                                                                                                       //\n    return this.config.engine.search(searchDefinition, options);                                                       // 72\n  };                                                                                                                   // 73\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Returns the search options based on the given options.                                                            //\n   *                                                                                                                   //\n   * @param {Object} options Options to use                                                                            //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Index.prototype._getSearchOptions = function _getSearchOptions(options) {                                            // 7\n    return _.defaults(Meteor.userId ? { userId: Meteor.userId() } : {}, options, this.defaultSearchOptions);           // 83\n  };                                                                                                                   // 84\n                                                                                                                       //\n  (0, _createClass3['default'])(Index, null, [{                                                                        // 7\n    key: 'defaultConfiguration',                                                                                       // 7\n    get: function get() {                                                                                              // 7\n      return {                                                                                                         // 40\n        permission: function permission() {                                                                            // 41\n          return true;                                                                                                 // 41\n        },                                                                                                             // 41\n        defaultSearchOptions: {}                                                                                       // 42\n      };                                                                                                               // 40\n    }                                                                                                                  // 44\n  }]);                                                                                                                 // 7\n  return Index;                                                                                                        // 7\n}();                                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"engine.js\":[\"babel-runtime/helpers/classCallCheck\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_core/lib/core/engine.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * An Engine is the technology used for searching with EasySearch, with                                                //\n * customizable configuration to how it interacts with the data from the Index.                                        //\n *                                                                                                                     //\n * @type {Engine}                                                                                                      //\n */                                                                                                                    //\nEngine = function () {                                                                                                 // 7\n  /**                                                                                                                  //\n   * Constructor                                                                                                       //\n   *                                                                                                                   //\n   * @param {Object} config configuration                                                                              //\n   *                                                                                                                   //\n   * @constructor                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\n  function Engine() {                                                                                                  // 15\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];                              // 15\n    (0, _classCallCheck3['default'])(this, Engine);                                                                    // 15\n                                                                                                                       //\n    if (this.constructor === Engine) {                                                                                 // 16\n      throw new Error('Cannot initialize instance of Engine');                                                         // 17\n    }                                                                                                                  // 18\n                                                                                                                       //\n    if (!_.isFunction(this.search)) {                                                                                  // 20\n      throw new Error('Engine needs to implement search method');                                                      // 21\n    }                                                                                                                  // 22\n                                                                                                                       //\n    this.config = _.defaults({}, config, this.defaultConfiguration());                                                 // 24\n  }                                                                                                                    // 25\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return default configuration.                                                                                     //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Engine.prototype.defaultConfiguration = function defaultConfiguration() {                                            // 7\n    return {};                                                                                                         // 33\n  };                                                                                                                   // 34\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Call a configuration method with the engine scope.                                                                //\n   *                                                                                                                   //\n   * @param {String} methodName Method name                                                                            //\n   * @param {Object} args       Arguments for the method                                                               //\n   *                                                                                                                   //\n   * @returns {*}                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Engine.prototype.callConfigMethod = function callConfigMethod(methodName) {                                          // 7\n    check(methodName, String);                                                                                         // 45\n                                                                                                                       //\n    var func = this.config[methodName];                                                                                // 47\n                                                                                                                       //\n    if (func) {                                                                                                        // 49\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {        // 49\n        args[_key - 1] = arguments[_key];                                                                              // 44\n      }                                                                                                                // 49\n                                                                                                                       //\n      return func.apply(this, args);                                                                                   // 50\n    }                                                                                                                  // 51\n  };                                                                                                                   // 52\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Check the given search parameter for validity                                                                     //\n   *                                                                                                                   //\n   * @param search                                                                                                     //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Engine.prototype.checkSearchParam = function checkSearchParam(search) {                                              // 7\n    check(search, String);                                                                                             // 60\n  };                                                                                                                   // 61\n                                                                                                                       //\n  /**                                                                                                                  //\n   *Code to run on index creation                                                                                      //\n   *                                                                                                                   //\n   * @param {Object} indexConfig Index configuraction                                                                  //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Engine.prototype.onIndexCreate = function onIndexCreate(indexConfig) {                                               // 7\n    if (!indexConfig.allowedFields) {                                                                                  // 69\n      indexConfig.allowedFields = indexConfig.fields;                                                                  // 70\n    }                                                                                                                  // 71\n  };                                                                                                                   // 72\n                                                                                                                       //\n  return Engine;                                                                                                       // 7\n}();                                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"reactive-engine.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_core/lib/core/reactive-engine.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * A ReactiveEngine handles the reactive logic, such as subscribing                                                    //\n * and publishing documents into a self contained collection.                                                          //\n *                                                                                                                     //\n * @type {ReactiveEngine}                                                                                              //\n */                                                                                                                    //\nReactiveEngine = function (_Engine) {                                                                                  // 7\n  (0, _inherits3['default'])(ReactiveEngine, _Engine);                                                                 // 7\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Constructor.                                                                                                      //\n   *                                                                                                                   //\n   * @param {Object} config Configuration                                                                              //\n   *                                                                                                                   //\n   * @constructor                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\n  function ReactiveEngine(config) {                                                                                    // 15\n    (0, _classCallCheck3['default'])(this, ReactiveEngine);                                                            // 15\n                                                                                                                       //\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _Engine.call(this, config));                         // 15\n                                                                                                                       //\n    if (_this === _this.constructor) {                                                                                 // 18\n      throw new Error('Cannot initialize instance of ReactiveEngine');                                                 // 19\n    }                                                                                                                  // 20\n                                                                                                                       //\n    if (!_.isFunction(_this.getSearchCursor)) {                                                                        // 22\n      throw new Error('Reactive engine needs to implement getSearchCursor method');                                    // 23\n    }                                                                                                                  // 24\n    return _this;                                                                                                      // 15\n  }                                                                                                                    // 25\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return default configuration.                                                                                     //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  ReactiveEngine.prototype.defaultConfiguration = function defaultConfiguration() {                                    // 7\n    return _.defaults({}, {                                                                                            // 33\n      transform: function transform(doc) {                                                                             // 34\n        return doc;                                                                                                    // 34\n      },                                                                                                               // 34\n      beforePublish: function beforePublish(event, doc) {                                                              // 35\n        return doc;                                                                                                    // 35\n      }                                                                                                                // 35\n    }, _Engine.prototype.defaultConfiguration.call(this));                                                             // 33\n  };                                                                                                                   // 37\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Code to run on index creation                                                                                     //\n   *                                                                                                                   //\n   * @param {Object} indexConfig Index configuration                                                                   //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  ReactiveEngine.prototype.onIndexCreate = function onIndexCreate(indexConfig) {                                       // 7\n    _Engine.prototype.onIndexCreate.call(this, indexConfig);                                                           // 45\n    indexConfig.searchCollection = new SearchCollection(indexConfig, this);                                            // 46\n    indexConfig.mongoCollection = indexConfig.searchCollection._collection;                                            // 47\n  };                                                                                                                   // 48\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Transform the search definition.                                                                                  //\n   *                                                                                                                   //\n   * @param {String|Object} searchDefinition Search definition                                                         //\n   * @param {Object}        options          Search and index options                                                  //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  ReactiveEngine.prototype.transformSearchDefinition = function transformSearchDefinition(searchDefinition, options) {\n    if (_.isString(searchDefinition)) {                                                                                // 59\n      (function () {                                                                                                   // 59\n        var obj = {};                                                                                                  // 60\n                                                                                                                       //\n        _.each(options.index.fields, function (field) {                                                                // 62\n          obj[field] = searchDefinition;                                                                               // 63\n        });                                                                                                            // 64\n                                                                                                                       //\n        searchDefinition = obj;                                                                                        // 66\n      })();                                                                                                            // 59\n    }                                                                                                                  // 67\n                                                                                                                       //\n    return searchDefinition;                                                                                           // 69\n  };                                                                                                                   // 70\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Check the given search parameter for validity                                                                     //\n   *                                                                                                                   //\n   * @param search                                                                                                     //\n   * @param indexOptions                                                                                               //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  ReactiveEngine.prototype.checkSearchParam = function checkSearchParam(search, indexOptions) {                        // 7\n    check(search, Match.OneOf(String, Object));                                                                        // 79\n                                                                                                                       //\n    if (_.isObject(search)) {                                                                                          // 81\n      _.each(search, function (val, field) {                                                                           // 82\n        check(val, String);                                                                                            // 83\n                                                                                                                       //\n        if (-1 === _.indexOf(indexOptions.allowedFields, field)) {                                                     // 85\n          throw new Meteor.Error('Not allowed to search over field \"' + field + '\"');                                  // 86\n        }                                                                                                              // 87\n      });                                                                                                              // 88\n    }                                                                                                                  // 89\n  };                                                                                                                   // 90\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Reactively search on the collection.                                                                              //\n   *                                                                                                                   //\n   * @param {Object} searchDefinition Search definition                                                                //\n   * @param {Object} options          Options                                                                          //\n   *                                                                                                                   //\n   * @returns {Cursor}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  ReactiveEngine.prototype.search = function search(searchDefinition, options) {                                       // 7\n    if (Meteor.isClient) {                                                                                             // 101\n      return options.index.searchCollection.find(searchDefinition, options.search);                                    // 102\n    } else {                                                                                                           // 103\n      return this.getSearchCursor(this.transformSearchDefinition(searchDefinition, options), options);                 // 104\n    }                                                                                                                  // 108\n  };                                                                                                                   // 109\n                                                                                                                       //\n  return ReactiveEngine;                                                                                               // 7\n}(Engine);                                                                                                             // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"cursor.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/createClass\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_core/lib/core/cursor.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * A Cursor represents a pointer to the search results. Since it's specific                                            //\n * to EasySearch it can also be used to check for valid return values.                                                 //\n *                                                                                                                     //\n * @type {Cursor}                                                                                                      //\n */                                                                                                                    //\nCursor = function () {                                                                                                 // 7\n  /**                                                                                                                  //\n   * Constructor                                                                                                       //\n   *                                                                                                                   //\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor                                                       //\n   * @param {Number}       count         Count of all documents found                                                  //\n   * @param {Boolean}      isReady       Cursor is ready                                                               //\n   * @param {Object}       publishHandle Publish handle to stop if on client                                           //\n   *                                                                                                                   //\n   * @constructor                                                                                                      //\n   *                                                                                                                   //\n   */                                                                                                                  //\n                                                                                                                       //\n  function Cursor(mongoCursor, count) {                                                                                // 19\n    var isReady = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];                           // 19\n    var publishHandle = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];                     // 19\n    (0, _classCallCheck3[\"default\"])(this, Cursor);                                                                    // 19\n                                                                                                                       //\n    check(mongoCursor.fetch, Function);                                                                                // 20\n    check(count, Number);                                                                                              // 21\n    check(isReady, Match.Optional(Boolean));                                                                           // 22\n    check(publishHandle, Match.OneOf(null, Object));                                                                   // 23\n                                                                                                                       //\n    this._mongoCursor = mongoCursor;                                                                                   // 25\n    this._count = count;                                                                                               // 26\n    this._isReady = isReady;                                                                                           // 27\n    this._publishHandle = publishHandle;                                                                               // 28\n  }                                                                                                                    // 29\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Fetch the search results.                                                                                         //\n   *                                                                                                                   //\n   * @returns {[Object]}                                                                                               //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Cursor.prototype.fetch = function fetch() {                                                                          // 7\n    return this._mongoCursor.fetch();                                                                                  // 37\n  };                                                                                                                   // 38\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Stop the subscription handle associated with the cursor.                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Cursor.prototype.stop = function stop() {                                                                            // 7\n    if (this._publishHandle) {                                                                                         // 44\n      return this._publishHandle.stop();                                                                               // 45\n    }                                                                                                                  // 46\n  };                                                                                                                   // 47\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return count of all documents found                                                                               //\n   *                                                                                                                   //\n   * @returns {Number}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Cursor.prototype.count = function count() {                                                                          // 7\n    return this._count;                                                                                                // 55\n  };                                                                                                                   // 56\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return if the cursor is ready.                                                                                    //\n   *                                                                                                                   //\n   * @returns {Boolean}                                                                                                //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  Cursor.prototype.isReady = function isReady() {                                                                      // 7\n    return this._isReady;                                                                                              // 64\n  };                                                                                                                   // 65\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return the raw mongo cursor.                                                                                      //\n   *                                                                                                                   //\n   * @returns {Mongo.Cursor}                                                                                           //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  (0, _createClass3[\"default\"])(Cursor, [{                                                                             // 7\n    key: \"mongoCursor\",                                                                                                // 7\n    get: function get() {                                                                                              // 7\n      return this._mongoCursor;                                                                                        // 73\n    }                                                                                                                  // 74\n                                                                                                                       //\n    /**                                                                                                                //\n     * Return a fake empty cursor, without data.                                                                       //\n     *                                                                                                                 //\n     * @returns {Object}                                                                                               //\n     */                                                                                                                //\n                                                                                                                       //\n  }], [{                                                                                                               // 7\n    key: \"emptyCursor\",                                                                                                // 7\n    get: function get() {                                                                                              // 7\n      return { fetch: function fetch() {                                                                               // 82\n          return [];                                                                                                   // 82\n        }, observe: function observe() {                                                                               // 82\n          return { stop: function stop() {                                                                             // 82\n              return null;                                                                                             // 82\n            } };                                                                                                       // 82\n        }, stop: function stop() {} };                                                                                 // 82\n    }                                                                                                                  // 83\n  }]);                                                                                                                 // 7\n  return Cursor;                                                                                                       // 7\n}();                                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"search-collection.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/createClass\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_core/lib/core/search-collection.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _createClass2 = require('babel-runtime/helpers/createClass');                                                      //\n                                                                                                                       //\nvar _createClass3 = _interopRequireDefault(_createClass2);                                                             //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * A search collection represents a reactive collection on the client,                                                 //\n * which is used by the ReactiveEngine for searching.                                                                  //\n *                                                                                                                     //\n * @type {SearchCollection}                                                                                            //\n */                                                                                                                    //\nSearchCollection = function () {                                                                                       // 7\n  /**                                                                                                                  //\n   * Constructor                                                                                                       //\n   *                                                                                                                   //\n   * @param {Object}         indexConfiguration Index configuration                                                    //\n   * @param {ReactiveEngine} engine             Reactive Engine                                                        //\n   *                                                                                                                   //\n   * @constructor                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\n  function SearchCollection(indexConfiguration, engine) {                                                              // 16\n    (0, _classCallCheck3['default'])(this, SearchCollection);                                                          // 16\n                                                                                                                       //\n    check(indexConfiguration, Object);                                                                                 // 17\n    check(indexConfiguration.name, Match.OneOf(String, null));                                                         // 18\n                                                                                                                       //\n    if (!(engine instanceof ReactiveEngine)) {                                                                         // 20\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');                        // 21\n    }                                                                                                                  // 22\n                                                                                                                       //\n    this._indexConfiguration = indexConfiguration;                                                                     // 24\n    this._name = indexConfiguration.name + '/easySearch';                                                              // 25\n    this._engine = engine;                                                                                             // 26\n                                                                                                                       //\n    if (Meteor.isClient) {                                                                                             // 28\n      this._collection = new Meteor.Collection(this._name);                                                            // 29\n    } else if (Meteor.isServer) {                                                                                      // 30\n      this._setUpPublication();                                                                                        // 31\n    }                                                                                                                  // 32\n  }                                                                                                                    // 33\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Get name                                                                                                          //\n   *                                                                                                                   //\n   * @returns {String}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Find documents on the client.                                                                                     //\n   *                                                                                                                   //\n   * @param {Object} searchDefinition Search definition                                                                //\n   * @param {Object} options          Options                                                                          //\n   *                                                                                                                   //\n   * @returns {Cursor}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n  SearchCollection.prototype.find = function find(searchDefinition, options) {                                         // 7\n    if (!Meteor.isClient) {                                                                                            // 62\n      throw new Error('find can only be used on client');                                                              // 63\n    }                                                                                                                  // 64\n                                                                                                                       //\n    var publishHandle = Meteor.subscribe(this.name, searchDefinition, options);                                        // 66\n                                                                                                                       //\n    var count = this._getCount(searchDefinition);                                                                      // 68\n    var mongoCursor = this._getMongoCursor(searchDefinition, options);                                                 // 69\n                                                                                                                       //\n    if (!_.isNumber(count)) {                                                                                          // 71\n      return new Cursor(mongoCursor, 0, false);                                                                        // 72\n    }                                                                                                                  // 73\n                                                                                                                       //\n    return new Cursor(mongoCursor, count, true, publishHandle);                                                        // 75\n  };                                                                                                                   // 76\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Get the count of the cursor.                                                                                      //\n   *                                                                                                                   //\n   * @params {Object} searchDefinition Search definition                                                               //\n   *                                                                                                                   //\n   * @returns {Cursor.count}                                                                                           //\n   *                                                                                                                   //\n   * @private                                                                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  SearchCollection.prototype._getCount = function _getCount(searchDefinition) {                                        // 7\n    var countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));                         // 88\n                                                                                                                       //\n    if (countDoc) {                                                                                                    // 90\n      return countDoc.count;                                                                                           // 91\n    }                                                                                                                  // 92\n  };                                                                                                                   // 93\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Get the mongo cursor.                                                                                             //\n   *                                                                                                                   //\n   * @param {Object} searchDefinition Search definition                                                                //\n   * @param {Object} options          Search options                                                                   //\n   *                                                                                                                   //\n   * @returns {Cursor}                                                                                                 //\n   * @private                                                                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  SearchCollection.prototype._getMongoCursor = function _getMongoCursor(searchDefinition, options) {                   // 7\n    var _this = this;                                                                                                  // 104\n                                                                                                                       //\n    return this._collection.find({ __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options.props) }, {\n      transform: function transform(doc) {                                                                             // 108\n        delete doc.__searchDefinition;                                                                                 // 109\n        delete doc.__searchOptions;                                                                                    // 110\n        delete doc.__sortPosition;                                                                                     // 111\n                                                                                                                       //\n        doc = _this.engine.config.transform(doc);                                                                      // 113\n                                                                                                                       //\n        return doc;                                                                                                    // 115\n      },                                                                                                               // 116\n      sort: ['__sortPosition']                                                                                         // 117\n    });                                                                                                                // 107\n  };                                                                                                                   // 120\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return a unique document id for publication.                                                                      //\n   *                                                                                                                   //\n   * @param {Document} doc                                                                                             //\n   *                                                                                                                   //\n   * @returns string                                                                                                   //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  SearchCollection.prototype.generateId = function generateId(doc) {                                                   // 7\n    return doc._id + doc.__searchDefinition + doc.__searchOptions;                                                     // 130\n  };                                                                                                                   // 131\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Add custom fields to the given document                                                                           //\n   *                                                                                                                   //\n   * @param {Document} doc                                                                                             //\n   * @param {Object}   data                                                                                            //\n   * @returns {*}                                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  SearchCollection.prototype.addCustomFields = function addCustomFields(doc, data) {                                   // 7\n    _.forEach(data, function (val, key) {                                                                              // 141\n      doc['__' + key] = val;                                                                                           // 142\n    });                                                                                                                // 143\n                                                                                                                       //\n    return doc;                                                                                                        // 145\n  };                                                                                                                   // 146\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Set up publication.                                                                                               //\n   *                                                                                                                   //\n   * @private                                                                                                          //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  SearchCollection.prototype._setUpPublication = function _setUpPublication() {                                        // 7\n    var collectionScope = this,                                                                                        // 154\n        collectionName = this.name;                                                                                    // 154\n                                                                                                                       //\n    Meteor.publish(collectionName, function (searchDefinition, options) {                                              // 157\n      var _this2 = this;                                                                                               // 157\n                                                                                                                       //\n      check(searchDefinition, Match.OneOf(String, Object));                                                            // 158\n      check(options, Object);                                                                                          // 159\n                                                                                                                       //\n      var definitionString = JSON.stringify(searchDefinition),                                                         // 161\n          optionsString = JSON.stringify(options.props);                                                               // 161\n                                                                                                                       //\n      options.userId = this.userId;                                                                                    // 164\n      options.publicationScope = this;                                                                                 // 165\n                                                                                                                       //\n      if (!collectionScope._indexConfiguration.permission(options)) {                                                  // 167\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");                             // 168\n      }                                                                                                                // 169\n                                                                                                                       //\n      collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);                  // 171\n                                                                                                                       //\n      var cursor = collectionScope.engine.search(searchDefinition, {                                                   // 173\n        search: options,                                                                                               // 174\n        index: collectionScope._indexConfiguration                                                                     // 175\n      });                                                                                                              // 173\n                                                                                                                       //\n      var count = cursor.count();                                                                                      // 178\n                                                                                                                       //\n      this.added(collectionName, 'searchCount' + definitionString, { count: count });                                  // 180\n                                                                                                                       //\n      var resultsHandle = cursor.mongoCursor.observe({                                                                 // 182\n        addedAt: function addedAt(doc, atIndex, before) {                                                              // 183\n          doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);                          // 184\n          doc = collectionScope.addCustomFields(doc, {                                                                 // 185\n            searchDefinition: definitionString,                                                                        // 186\n            searchOptions: optionsString,                                                                              // 187\n            sortPosition: atIndex,                                                                                     // 188\n            originalId: doc._id                                                                                        // 189\n          });                                                                                                          // 185\n                                                                                                                       //\n          _this2.added(collectionName, collectionScope.generateId(doc), doc);                                          // 192\n        },                                                                                                             // 193\n        changedAt: function changedAt(doc, oldDoc, atIndex) {                                                          // 194\n          doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);                        // 195\n          doc = collectionScope.addCustomFields(doc, {                                                                 // 196\n            searchDefinition: definitionString,                                                                        // 197\n            searchOptions: optionsString,                                                                              // 198\n            sortPosition: atIndex,                                                                                     // 199\n            originalId: doc._id                                                                                        // 200\n          });                                                                                                          // 196\n                                                                                                                       //\n          _this2.changed(collectionName, collectionScope.generateId(doc), doc);                                        // 203\n        },                                                                                                             // 204\n        movedTo: function movedTo(doc, fromIndex, toIndex, before) {                                                   // 205\n          doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);               // 206\n          doc = collectionScope.addCustomFields(doc, {                                                                 // 207\n            searchDefinition: definitionString,                                                                        // 208\n            searchOptions: optionsString,                                                                              // 209\n            sortPosition: toIndex                                                                                      // 210\n          });                                                                                                          // 207\n                                                                                                                       //\n          var beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);                              // 213\n                                                                                                                       //\n          if (beforeDoc) {                                                                                             // 215\n            beforeDoc = collectionScope.addCustomFields(beforeDoc, {                                                   // 216\n              searchDefinition: definitionString,                                                                      // 217\n              searchOptions: optionsString,                                                                            // 218\n              sortPosition: fromIndex                                                                                  // 219\n            });                                                                                                        // 216\n            _this2.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);                          // 221\n          }                                                                                                            // 222\n                                                                                                                       //\n          _this2.changed(collectionName, collectionScope.generateId(doc), doc);                                        // 224\n        },                                                                                                             // 225\n        removedAt: function removedAt(doc, atIndex) {                                                                  // 226\n          doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);                                // 227\n          doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n          _this2.removed(collectionName, collectionScope.generateId(doc));                                             // 229\n        }                                                                                                              // 230\n      });                                                                                                              // 182\n                                                                                                                       //\n      this.onStop(function () {                                                                                        // 233\n        resultsHandle.stop();                                                                                          // 234\n      });                                                                                                              // 235\n                                                                                                                       //\n      this.ready();                                                                                                    // 237\n    });                                                                                                                // 238\n  };                                                                                                                   // 239\n                                                                                                                       //\n  (0, _createClass3['default'])(SearchCollection, [{                                                                   // 7\n    key: 'name',                                                                                                       // 7\n    get: function get() {                                                                                              // 7\n      return this._name;                                                                                               // 41\n    }                                                                                                                  // 42\n                                                                                                                       //\n    /**                                                                                                                //\n     * Get engine                                                                                                      //\n     *                                                                                                                 //\n     * @returns {ReactiveEngine}                                                                                       //\n     */                                                                                                                //\n                                                                                                                       //\n  }, {                                                                                                                 // 7\n    key: 'engine',                                                                                                     // 7\n    get: function get() {                                                                                              // 7\n      return this._engine;                                                                                             // 50\n    }                                                                                                                  // 51\n  }]);                                                                                                                 // 7\n  return SearchCollection;                                                                                             // 7\n}();                                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"engines\":{\"mongo-db.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_core/lib/engines/mongo-db.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications         //\n * are handled within the Engine.                                                                                      //\n *                                                                                                                     //\n * @type {MongoDBEngine}                                                                                               //\n */                                                                                                                    //\nMongoDBEngine = function (_ReactiveEngine) {                                                                           // 7\n  (0, _inherits3['default'])(MongoDBEngine, _ReactiveEngine);                                                          // 7\n                                                                                                                       //\n  function MongoDBEngine() {                                                                                           // 7\n    (0, _classCallCheck3['default'])(this, MongoDBEngine);                                                             // 7\n    return (0, _possibleConstructorReturn3['default'])(this, _ReactiveEngine.apply(this, arguments));                  // 7\n  }                                                                                                                    // 7\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return default configuration.                                                                                     //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n  MongoDBEngine.prototype.defaultConfiguration = function defaultConfiguration() {                                     // 7\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _ReactiveEngine.prototype.defaultConfiguration.call(this));\n  };                                                                                                                   // 15\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.                    //\n   *                                                                                                                   //\n   * @param {Object} engineScope Scope of the engine                                                                   //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  MongoDBEngine.defaultMongoConfiguration = function defaultMongoConfiguration(engineScope) {                          // 7\n    return {                                                                                                           // 25\n      aggregation: '$or',                                                                                              // 26\n      selector: function selector(searchObject, options, aggregation) {                                                // 27\n        var selector = {};                                                                                             // 28\n                                                                                                                       //\n        selector[aggregation] = [];                                                                                    // 30\n                                                                                                                       //\n        _.each(searchObject, function (searchString, field) {                                                          // 32\n          var fieldSelector = engineScope.callConfigMethod('selectorPerField', field, searchString, options);          // 33\n                                                                                                                       //\n          if (fieldSelector) {                                                                                         // 37\n            selector[aggregation].push(fieldSelector);                                                                 // 38\n          }                                                                                                            // 39\n        });                                                                                                            // 40\n                                                                                                                       //\n        return selector;                                                                                               // 42\n      },                                                                                                               // 43\n      selectorPerField: function selectorPerField(field, searchString) {                                               // 44\n        var selector = {};                                                                                             // 45\n                                                                                                                       //\n        selector[field] = { '$regex': '.*' + searchString + '.*', '$options': 'i' };                                   // 47\n                                                                                                                       //\n        return selector;                                                                                               // 49\n      },                                                                                                               // 50\n      sort: function sort(searchObject, options) {                                                                     // 51\n        return options.index.fields;                                                                                   // 52\n      }                                                                                                                // 53\n    };                                                                                                                 // 25\n  };                                                                                                                   // 55\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return the find options for the mongo find query.                                                                 //\n   *                                                                                                                   //\n   * @param {String} searchDefinition Search definition                                                                //\n   * @param {Object} options          Search and index options                                                         //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  MongoDBEngine.prototype.getFindOptions = function getFindOptions(searchDefinition, options) {                        // 7\n    return {                                                                                                           // 64\n      sort: this.callConfigMethod('sort', searchDefinition, options),                                                  // 65\n      limit: options.search.limit,                                                                                     // 66\n      skip: options.search.skip,                                                                                       // 67\n      fields: this.callConfigMethod('fields', searchDefinition, options)                                               // 68\n    };                                                                                                                 // 64\n  };                                                                                                                   // 70\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return the reactive search cursor.                                                                                //\n   *                                                                                                                   //\n   * @param {String} searchDefinition Search definition                                                                //\n   * @param {Object} options          Search and index options                                                         //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  MongoDBEngine.prototype.getSearchCursor = function getSearchCursor(searchDefinition, options) {                      // 7\n    var selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),              // 79\n        findOptions = this.getFindOptions(searchDefinition, options),                                                  // 79\n        collection = options.index.collection;                                                                         // 79\n                                                                                                                       //\n    check(options, Object);                                                                                            // 83\n    check(selector, Object);                                                                                           // 84\n    check(findOptions, Object);                                                                                        // 85\n                                                                                                                       //\n    return new Cursor(collection.find(selector, findOptions), collection.find(selector).count());                      // 87\n  };                                                                                                                   // 91\n                                                                                                                       //\n  return MongoDBEngine;                                                                                                // 7\n}(ReactiveEngine);                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"minimongo.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_core/lib/engines/minimongo.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * The MinimongEngine lets you search the index on the client-side.                                                    //\n *                                                                                                                     //\n * @type {MinimongoEngine}                                                                                             //\n */                                                                                                                    //\nMinimongoEngine = function (_Engine) {                                                                                 // 6\n  (0, _inherits3['default'])(MinimongoEngine, _Engine);                                                                // 6\n                                                                                                                       //\n  function MinimongoEngine() {                                                                                         // 6\n    (0, _classCallCheck3['default'])(this, MinimongoEngine);                                                           // 6\n    return (0, _possibleConstructorReturn3['default'])(this, _Engine.apply(this, arguments));                          // 6\n  }                                                                                                                    // 6\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return default configuration.                                                                                     //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n  MinimongoEngine.prototype.defaultConfiguration = function defaultConfiguration() {                                   // 6\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _Engine.prototype.defaultConfiguration.call(this));\n  };                                                                                                                   // 14\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Search the index.                                                                                                 //\n   *                                                                                                                   //\n   * @param {Object} searchDefinition Search definition                                                                //\n   * @param {Object} options          Object of options                                                                //\n   *                                                                                                                   //\n   * @returns {cursor}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  MinimongoEngine.prototype.search = function search(searchDefinition, options) {                                      // 6\n    if (!Meteor.isClient) {                                                                                            // 25\n      throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');                               // 26\n    }                                                                                                                  // 27\n                                                                                                                       //\n    searchDefinition = this.transformSearchDefinition(searchDefinition, options);                                      // 29\n                                                                                                                       //\n    // check() calls are in getSearchCursor method                                                                     //\n    return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);                           // 32\n  };                                                                                                                   // 33\n                                                                                                                       //\n  return MinimongoEngine;                                                                                              // 6\n}(Engine);                                                                                                             // 6\n                                                                                                                       //\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;                                // 36\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;              // 37\n                                                                                                                       //\nMinimongoEngine.prototype.getFindOptions = function () {                                                               // 39\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                               // 39\n    args[_key] = arguments[_key];                                                                                      // 39\n  }                                                                                                                    // 39\n                                                                                                                       //\n  var findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);                                          // 40\n                                                                                                                       //\n  findOptions.transform = this.config.transform;                                                                       // 42\n                                                                                                                       //\n  return findOptions;                                                                                                  // 44\n};                                                                                                                     // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mongo-text-index.js\":[\"babel-runtime/helpers/classCallCheck\",\"babel-runtime/helpers/possibleConstructorReturn\",\"babel-runtime/helpers/inherits\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_core/lib/engines/mongo-text-index.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require('babel-runtime/helpers/inherits');                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //\n                                                                                                                       //\n/**                                                                                                                    //\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.                                         //\n *                                                                                                                     //\n * @type {MongoTextIndexEngine}                                                                                        //\n */                                                                                                                    //\nMongoTextIndexEngine = function (_ReactiveEngine) {                                                                    // 6\n  (0, _inherits3['default'])(MongoTextIndexEngine, _ReactiveEngine);                                                   // 6\n                                                                                                                       //\n  function MongoTextIndexEngine() {                                                                                    // 6\n    (0, _classCallCheck3['default'])(this, MongoTextIndexEngine);                                                      // 6\n    return (0, _possibleConstructorReturn3['default'])(this, _ReactiveEngine.apply(this, arguments));                  // 6\n  }                                                                                                                    // 6\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Return default configuration.                                                                                     //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n  MongoTextIndexEngine.prototype.defaultConfiguration = function defaultConfiguration() {                              // 6\n    var mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);                                            // 13\n                                                                                                                       //\n    mongoConfiguration.selector = function (searchString) {                                                            // 15\n      if (searchString.trim()) {                                                                                       // 16\n        return { $text: { $search: searchString } };                                                                   // 17\n      }                                                                                                                // 18\n                                                                                                                       //\n      return {};                                                                                                       // 20\n    };                                                                                                                 // 21\n                                                                                                                       //\n    return _.defaults({}, mongoConfiguration, _ReactiveEngine.prototype.defaultConfiguration.call(this));              // 23\n  };                                                                                                                   // 24\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Setup the index on creation.                                                                                      //\n   *                                                                                                                   //\n   * @param {Object} indexConfig Index configuration                                                                   //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  MongoTextIndexEngine.prototype.onIndexCreate = function onIndexCreate(indexConfig) {                                 // 6\n    _ReactiveEngine.prototype.onIndexCreate.call(this, indexConfig);                                                   // 32\n                                                                                                                       //\n    if (Meteor.isServer) {                                                                                             // 34\n      (function () {                                                                                                   // 34\n        var textIndexesConfig = {};                                                                                    // 35\n                                                                                                                       //\n        _.each(indexConfig.fields, function (field) {                                                                  // 37\n          textIndexesConfig[field] = 'text';                                                                           // 38\n        });                                                                                                            // 39\n                                                                                                                       //\n        if (indexConfig.weights) {                                                                                     // 41\n          textIndexesConfig.weights = options.weights();                                                               // 42\n        }                                                                                                              // 43\n                                                                                                                       //\n        indexConfig.collection._ensureIndex(textIndexesConfig);                                                        // 45\n      })();                                                                                                            // 34\n    }                                                                                                                  // 46\n  };                                                                                                                   // 47\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Transform the search definition.                                                                                  //\n   *                                                                                                                   //\n   * @param {String|Object} searchDefinition Search definition                                                         //\n   * @param {Object}        options          Search and index options                                                  //\n   *                                                                                                                   //\n   * @returns {Object}                                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  MongoTextIndexEngine.prototype.transformSearchDefinition = function transformSearchDefinition(searchDefinition, options) {\n    return searchDefinition;                                                                                           // 58\n  };                                                                                                                   // 59\n                                                                                                                       //\n  /**                                                                                                                  //\n   * Check the given search parameter for validity                                                                     //\n   *                                                                                                                   //\n   * @param search                                                                                                     //\n   */                                                                                                                  //\n                                                                                                                       //\n                                                                                                                       //\n  MongoTextIndexEngine.prototype.checkSearchParam = function checkSearchParam(search) {                                // 6\n    check(search, String);                                                                                             // 67\n  };                                                                                                                   // 68\n                                                                                                                       //\n  return MongoTextIndexEngine;                                                                                         // 6\n}(ReactiveEngine);                                                                                                     // 6\n                                                                                                                       //\n// Explicitely inherit getSearchCursor method functionality                                                            //\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;                              // 72\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;                                // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"globals.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_core/lib/globals.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nEasySearch = {                                                                                                         // 1\n  // Core                                                                                                              //\n  Index: Index,                                                                                                        // 3\n  Engine: Engine,                                                                                                      // 4\n  ReactiveEngine: ReactiveEngine,                                                                                      // 5\n  Cursor: Cursor,                                                                                                      // 6\n  // Engines                                                                                                           //\n  MongoDB: MongoDBEngine,                                                                                              // 8\n  Minimongo: MinimongoEngine,                                                                                          // 9\n  MongoTextIndex: MongoTextIndexEngine                                                                                 // 10\n};                                                                                                                     // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/index.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/engine.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/reactive-engine.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/cursor.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/core/search-collection.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/engines/mongo-db.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/engines/minimongo.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/engines/mongo-text-index.js\");\nrequire(\"./node_modules/meteor/easysearch:core/lib/globals.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['easysearch:core'] = {}, {\n  EasySearch: EasySearch\n});\n\n})();\n","servePath":"/packages/easysearch_core.js","sourceMap":{"version":3,"sources":["/packages/easysearch:core/lib/core/index.js","/packages/easysearch:core/lib/core/engine.js","/packages/easysearch:core/lib/core/reactive-engine.js","/packages/easysearch:core/lib/core/cursor.js","/packages/easysearch:core/lib/core/search-collection.js","/packages/easysearch:core/lib/engines/mongo-db.js","/packages/easysearch:core/lib/engines/minimongo.js","/packages/easysearch:core/lib/engines/mongo-text-index.js","/packages/easysearch:core/lib/globals.js"],"names":[],"mappings":"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","file":"/packages/easysearch_core.js","sourcesContent":["/**\n * An Index represents the main entry point for searching with EasySearch. It relies on\n * the given engine to have the search functionality and defines the data that should be searchable.\n *\n * @type {Index}\n */\nIndex = class Index {\n  /**\n   * Constructor\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n  constructor(config) {\n    check(config, Object);\n    check(config.collection, Meteor.Collection);\n    check(config.fields, [String]);\n\n    if (!(config.engine instanceof Engine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');\n    }\n\n    if (!config.name)\n      config.name = (config.collection._name || '').toLowerCase();\n\n    this.config = _.extend(Index.defaultConfiguration, config);\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });\n\n    // Engine specific code on index creation\n    config.engine.onIndexCreate(this.config);\n  }\n\n  /**\n   * Default configuration for an index.\n   *\n   * @returns {Object}\n   */\n  static get defaultConfiguration() {\n    return {\n      permission: () => true,\n      defaultSearchOptions: {}\n    };\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object|String} searchDefinition Search definition\n   * @param {Object}        options          Options\n   *\n   * @returns {Cursor}\n   */\n  search(searchDefinition, options = {}) {\n    this.config.engine.checkSearchParam(searchDefinition, this.config);\n\n    check(options, {\n      limit: Match.Optional(Number),\n      skip: Match.Optional(Number),\n      props: Match.Optional(Object)\n    });\n\n    options = {\n      search: this._getSearchOptions(options),\n      index: this.config\n    };\n\n    if (!this.config.permission(options.search)) {\n      throw new Meteor.Error('not-allowed', \"Not allowed to search this index!\");\n    }\n\n    return this.config.engine.search(searchDefinition, options);\n  }\n\n  /**\n   * Returns the search options based on the given options.\n   *\n   * @param {Object} options Options to use\n   *\n   * @returns {Object}\n   */\n  _getSearchOptions(options) {\n    return _.defaults(( Meteor.userId ? { userId: Meteor.userId() } : {} ), options, this.defaultSearchOptions);\n  }\n};\n","/**\n * An Engine is the technology used for searching with EasySearch, with\n * customizable configuration to how it interacts with the data from the Index.\n *\n * @type {Engine}\n */\nEngine = class Engine {\n  /**\n   * Constructor\n   *\n   * @param {Object} config configuration\n   *\n   * @constructor\n   */\n  constructor(config = {}) {\n    if (this.constructor === Engine) {\n      throw new Error('Cannot initialize instance of Engine');\n    }\n\n    if (!_.isFunction(this.search)) {\n      throw new Error('Engine needs to implement search method');\n    }\n\n    this.config = _.defaults({}, config, this.defaultConfiguration());\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return {};\n  }\n\n  /**\n   * Call a configuration method with the engine scope.\n   *\n   * @param {String} methodName Method name\n   * @param {Object} args       Arguments for the method\n   *\n   * @returns {*}\n   */\n  callConfigMethod(methodName, ...args) {\n    check(methodName, String);\n\n    let func = this.config[methodName];\n\n    if (func) {\n      return func.apply(this, args);\n    }\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n\n  /**\n   *Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuraction\n   */\n  onIndexCreate(indexConfig) {\n    if (!indexConfig.allowedFields) {\n      indexConfig.allowedFields = indexConfig.fields;\n    }\n  }\n};\n","/**\n * A ReactiveEngine handles the reactive logic, such as subscribing\n * and publishing documents into a self contained collection.\n *\n * @type {ReactiveEngine}\n */\nReactiveEngine = class ReactiveEngine extends Engine {\n  /**\n   * Constructor.\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n  constructor(config) {\n    super(config);\n\n    if (this === this.constructor) {\n      throw new Error('Cannot initialize instance of ReactiveEngine');\n    }\n\n    if (!_.isFunction(this.getSearchCursor)) {\n      throw new Error('Reactive engine needs to implement getSearchCursor method');\n    }\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, {\n      transform: (doc) => doc,\n      beforePublish: (event, doc) => doc\n    }, super.defaultConfiguration());\n  }\n\n  /**\n   * Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n  onIndexCreate(indexConfig) {\n    super.onIndexCreate(indexConfig);\n    indexConfig.searchCollection = new SearchCollection(indexConfig, this);\n    indexConfig.mongoCollection = indexConfig.searchCollection._collection;\n  }\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n  transformSearchDefinition(searchDefinition, options) {\n    if (_.isString(searchDefinition)) {\n      let obj = {};\n\n      _.each(options.index.fields, function (field) {\n        obj[field] = searchDefinition;\n      });\n\n      searchDefinition = obj;\n    }\n\n    return searchDefinition;\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   * @param indexOptions\n   */\n  checkSearchParam(search, indexOptions) {\n    check(search, Match.OneOf(String, Object));\n\n    if (_.isObject(search)) {\n      _.each(search, function (val, field) {\n        check(val, String);\n\n        if (-1 === _.indexOf(indexOptions.allowedFields, field)) {\n          throw new Meteor.Error(`Not allowed to search over field \"${field}\"`);\n        }\n      });\n    }\n  }\n\n  /**\n   * Reactively search on the collection.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  search(searchDefinition, options) {\n    if (Meteor.isClient) {\n      return options.index.searchCollection.find(searchDefinition, options.search);\n    } else {\n      return this.getSearchCursor(\n        this.transformSearchDefinition(searchDefinition, options),\n        options\n      );\n    }\n  }\n};\n","/**\n * A Cursor represents a pointer to the search results. Since it's specific\n * to EasySearch it can also be used to check for valid return values.\n *\n * @type {Cursor}\n */\nCursor = class Cursor {\n  /**\n   * Constructor\n   *\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor\n   * @param {Number}       count         Count of all documents found\n   * @param {Boolean}      isReady       Cursor is ready\n   * @param {Object}       publishHandle Publish handle to stop if on client\n   *\n   * @constructor\n   *\n   */\n  constructor(mongoCursor, count, isReady = true, publishHandle = null) {\n    check(mongoCursor.fetch, Function);\n    check(count, Number);\n    check(isReady, Match.Optional(Boolean));\n    check(publishHandle, Match.OneOf(null, Object));\n\n    this._mongoCursor = mongoCursor;\n    this._count = count;\n    this._isReady = isReady;\n    this._publishHandle = publishHandle;\n  }\n\n  /**\n   * Fetch the search results.\n   *\n   * @returns {[Object]}\n   */\n  fetch() {\n    return this._mongoCursor.fetch();\n  }\n\n /**\n  * Stop the subscription handle associated with the cursor.\n  */\n  stop() {\n    if (this._publishHandle) {\n      return this._publishHandle.stop();\n    }\n  }\n\n  /**\n   * Return count of all documents found\n   *\n   * @returns {Number}\n   */\n  count() {\n    return this._count;\n  }\n\n  /**\n   * Return if the cursor is ready.\n   *\n   * @returns {Boolean}\n   */\n  isReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Return the raw mongo cursor.\n   *\n   * @returns {Mongo.Cursor}\n   */\n  get mongoCursor() {\n    return this._mongoCursor;\n  }\n\n  /**\n   * Return a fake empty cursor, without data.\n   *\n   * @returns {Object}\n   */\n  static get emptyCursor() {\n    return { fetch: () => [], observe: () => { return { stop: () => null }; }, stop: () => {} };\n  }\n};\n","/**\n * A search collection represents a reactive collection on the client,\n * which is used by the ReactiveEngine for searching.\n *\n * @type {SearchCollection}\n */\nSearchCollection = class SearchCollection {\n  /**\n   * Constructor\n   *\n   * @param {Object}         indexConfiguration Index configuration\n   * @param {ReactiveEngine} engine             Reactive Engine\n   *\n   * @constructor\n   */\n  constructor(indexConfiguration, engine) {\n    check(indexConfiguration, Object);\n    check(indexConfiguration.name, Match.OneOf(String, null));\n\n    if (!(engine instanceof ReactiveEngine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');\n    }\n\n    this._indexConfiguration = indexConfiguration;\n    this._name = `${indexConfiguration.name}/easySearch`;\n    this._engine = engine;\n\n    if (Meteor.isClient) {\n      this._collection = new Meteor.Collection(this._name);\n    } else if (Meteor.isServer) {\n      this._setUpPublication();\n    }\n  }\n\n  /**\n   * Get name\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Get engine\n   *\n   * @returns {ReactiveEngine}\n   */\n  get engine() {\n    return this._engine;\n  }\n\n  /**\n   * Find documents on the client.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  find(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Error('find can only be used on client');\n    }\n\n    let publishHandle = Meteor.subscribe(this.name, searchDefinition, options);\n\n    let count = this._getCount(searchDefinition);\n    let mongoCursor = this._getMongoCursor(searchDefinition, options);\n\n    if (!_.isNumber(count)) {\n      return new Cursor(mongoCursor, 0, false);\n    }\n\n    return new Cursor(mongoCursor, count, true, publishHandle);\n  }\n\n  /**\n   * Get the count of the cursor.\n   *\n   * @params {Object} searchDefinition Search definition\n   *\n   * @returns {Cursor.count}\n   *\n   * @private\n   */\n  _getCount(searchDefinition) {\n    let countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));\n\n    if (countDoc) {\n      return countDoc.count;\n    }\n  }\n\n  /**\n   * Get the mongo cursor.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Search options\n   *\n   * @returns {Cursor}\n   * @private\n   */\n  _getMongoCursor(searchDefinition, options) {\n    return this._collection.find(\n      { __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options.props) },\n      {\n        transform: (doc) => {\n          delete doc.__searchDefinition;\n          delete doc.__searchOptions;\n          delete doc.__sortPosition;\n\n          doc = this.engine.config.transform(doc);\n\n          return doc;\n        },\n        sort: ['__sortPosition']\n      }\n    );\n  }\n\n  /**\n   * Return a unique document id for publication.\n   *\n   * @param {Document} doc\n   *\n   * @returns string\n   */\n  generateId(doc) {\n    return doc._id + doc.__searchDefinition + doc.__searchOptions;\n  }\n\n  /**\n   * Add custom fields to the given document\n   *\n   * @param {Document} doc\n   * @param {Object}   data\n   * @returns {*}\n   */\n  addCustomFields(doc, data) {\n    _.forEach(data, function (val, key) {\n      doc['__' + key] = val;\n    });\n\n    return doc;\n  }\n\n  /**\n   * Set up publication.\n   *\n   * @private\n   */\n  _setUpPublication() {\n    var collectionScope = this,\n      collectionName = this.name;\n\n    Meteor.publish(collectionName, function (searchDefinition, options) {\n      check(searchDefinition, Match.OneOf(String, Object));\n      check(options, Object);\n\n      let definitionString = JSON.stringify(searchDefinition),\n        optionsString = JSON.stringify(options.props);\n\n      options.userId = this.userId;\n      options.publicationScope = this;\n\n      if (!collectionScope._indexConfiguration.permission(options)) {\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n      }\n\n      collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);\n\n      let cursor = collectionScope.engine.search(searchDefinition, {\n        search: options,\n        index: collectionScope._indexConfiguration\n      });\n\n      const count = cursor.count();\n\n      this.added(collectionName, 'searchCount' + definitionString, { count: count });\n\n      let resultsHandle = cursor.mongoCursor.observe({\n        addedAt: (doc, atIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.added(collectionName, collectionScope.generateId(doc), doc);\n        },\n        changedAt: (doc, oldDoc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc)\n        },\n        movedTo: (doc, fromIndex, toIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: toIndex\n          });\n\n          let beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);\n\n          if (beforeDoc) {\n            beforeDoc = collectionScope.addCustomFields(beforeDoc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: fromIndex\n            });\n            this.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);\n          }\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc);\n        },\n        removedAt: (doc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);\n          doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n          this.removed(collectionName, collectionScope.generateId(doc));\n        }\n      });\n\n      this.onStop(function () {\n        resultsHandle.stop();\n      });\n\n      this.ready();\n    });\n  }\n};\n","/**\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications\n * are handled within the Engine.\n *\n * @type {MongoDBEngine}\n */\nMongoDBEngine = class MongoDBEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.\n   *\n   * @param {Object} engineScope Scope of the engine\n   *\n   * @returns {Object}\n   */\n  static defaultMongoConfiguration(engineScope) {\n    return {\n      aggregation: '$or',\n      selector(searchObject, options, aggregation) {\n        let selector = {};\n\n        selector[aggregation] = [];\n\n        _.each(searchObject, (searchString, field) => {\n          let fieldSelector = engineScope.callConfigMethod(\n            'selectorPerField', field, searchString, options\n          );\n\n          if (fieldSelector) {\n            selector[aggregation].push(fieldSelector);\n          }\n        });\n\n        return selector;\n      },\n      selectorPerField(field, searchString) {\n        let selector = {};\n\n        selector[field] = { '$regex' : `.*${searchString}.*`, '$options' : 'i'};\n\n        return selector\n      },\n      sort(searchObject, options) {\n        return options.index.fields;\n      }\n    };\n  }\n\n  /**\n   * Return the find options for the mongo find query.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getFindOptions(searchDefinition, options) {\n    return {\n      sort: this.callConfigMethod('sort', searchDefinition, options),\n      limit: options.search.limit,\n      skip: options.search.skip,\n      fields: this.callConfigMethod('fields', searchDefinition, options)\n    };\n  }\n\n  /**\n   * Return the reactive search cursor.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getSearchCursor(searchDefinition, options) {\n    let selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),\n      findOptions = this.getFindOptions(searchDefinition, options),\n      collection = options.index.collection;\n\n    check(options, Object);\n    check(selector, Object);\n    check(findOptions, Object);\n\n    return new Cursor(\n      collection.find(selector, findOptions),\n      collection.find(selector).count()\n    );\n  }\n};\n","/**\n * The MinimongEngine lets you search the index on the client-side.\n *\n * @type {MinimongoEngine}\n */\nMinimongoEngine = class MinimongoEngine extends Engine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Object of options\n   *\n   * @returns {cursor}\n   */\n  search(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');\n    }\n\n    searchDefinition = this.transformSearchDefinition(searchDefinition, options);\n\n    // check() calls are in getSearchCursor method\n    return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);\n  }\n};\n\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;\n\nMinimongoEngine.prototype.getFindOptions = function (...args) {\n  let findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);\n\n  findOptions.transform = this.config.transform;\n\n  return findOptions;\n};\n","/**\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.\n *\n * @type {MongoTextIndexEngine}\n */\nMongoTextIndexEngine = class MongoTextIndexEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    let mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);\n\n    mongoConfiguration.selector = function (searchString) {\n      if (searchString.trim()) {\n        return { $text: { $search: searchString } };\n      }\n\n      return {};\n    };\n\n    return _.defaults({}, mongoConfiguration, super.defaultConfiguration());\n  }\n\n  /**\n   * Setup the index on creation.\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n  onIndexCreate(indexConfig) {\n    super.onIndexCreate(indexConfig);\n\n    if (Meteor.isServer) {\n      let textIndexesConfig = {};\n\n      _.each(indexConfig.fields, function (field) {\n        textIndexesConfig[field] = 'text';\n      });\n\n      if (indexConfig.weights) {\n        textIndexesConfig.weights = options.weights();\n      }\n\n      indexConfig.collection._ensureIndex(textIndexesConfig);\n    }\n  }\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n  transformSearchDefinition(searchDefinition, options) {\n    return searchDefinition;\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n};\n\n// Explicitely inherit getSearchCursor method functionality\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;\n","EasySearch = {\n  // Core\n  Index,\n  Engine,\n  ReactiveEngine,\n  Cursor,\n  // Engines\n  MongoDB: MongoDBEngine,\n  Minimongo: MinimongoEngine,\n  MongoTextIndex: MongoTextIndexEngine\n};\n"]}}]