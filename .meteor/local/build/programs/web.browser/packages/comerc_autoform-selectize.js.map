{"version":3,"sources":["meteor://ðŸ’»app/packages/comerc_autoform-selectize/template.autoform-selectize.js","meteor://ðŸ’»app/packages/comerc_autoform-selectize/autoform-selectize.js","meteor://ðŸ’»app/packages/comerc_autoform-selectize/template.autoform-selectize-input.js","meteor://ðŸ’»app/packages/comerc_autoform-selectize/autoform-selectize-input.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;;;;;;;;ACtmH;;;;;;;;;;;;;;;;;;AClOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH","file":"/packages/comerc_autoform-selectize.js","sourcesContent":["\nTemplate.__checkName(\"afSelectize\");\nTemplate[\"afSelectize\"] = new Template(\"Template.afSelectize\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  }), \"\\n    \", Blaze.Unless(function() {\n    return Spacebars.call(view.lookup(\"isReactiveOptions\"));\n  }, function() {\n    return [ \"\\n      \", Blaze.Each(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n    }, function() {\n      return [ \"\\n        \", Blaze.If(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n      }, function() {\n        return [ \"\\n          \", HTML.OPTGROUP({\n          label: function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n          }\n        }, \"\\n          \", Blaze.Each(function() {\n          return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n        }, function() {\n          return [ \"\\n          \", HTML.OPTION(HTML.Attrs(function() {\n            return Spacebars.attrMustache(view.lookup(\"optionAtts\"));\n          }), Blaze.View(\"lookup:..label\", function() {\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n          })), \"\\n          \" ];\n        }), \"\\n          \"), \"\\n        \" ];\n      }, function() {\n        return [ \"\\n          \", HTML.OPTION(HTML.Attrs(function() {\n          return Spacebars.attrMustache(view.lookup(\"optionAtts\"));\n        }), Blaze.View(\"lookup:..label\", function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n        })), \"\\n        \" ];\n      }), \"\\n      \" ];\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","AutoForm.addInputType(\"selectize\", {\n  template: \"afSelectize\",\n  valueOut: function () {\n    // FIXME: may be related https://github.com/aldeed/meteor-autoform/issues/569\n    if (this[0].selectize) {\n      return this[0].selectize.getValue();\n    }\n  },\n  valueConverters: {\n    \"stringArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          return $.trim(item);\n        });\n      }\n      return val;\n    },\n    \"number\": AutoForm.Utility.stringToNumber,\n    \"numberArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToNumber(item);\n        });\n      }\n      return val;\n    },\n    \"boolean\": AutoForm.Utility.stringToBool,\n    \"booleanArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToBool(item);\n        });\n      }\n      return val;\n    },\n    \"date\": AutoForm.Utility.stringToDate,\n    \"dateArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToDate(item);\n        });\n      }\n      return val;\n    }\n  },\n  contextAdjust: function (context) {\n    //can fix issues with some browsers selecting the firstOption instead of the selected option\n    context.atts.autocomplete = 'off';\n\n    var itemAtts = _.omit(context.atts, 'firstOption');\n    var firstOption = context.atts.firstOption;\n\n    // build items list\n    context.items = [];\n\n    // If a firstOption was provided, add that to the items list first\n    if (firstOption === false) {\n      // nothing\n    } else if (typeof firstOption === 'string' || typeof _defaults.firstOption === \"string\") {\n      context.items.push({\n        name: context.name,\n        label: (typeof firstOption === 'string' ? firstOption : _defaults.firstOption),\n        value: '',\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        //\n        // Setting this to an empty string caused problems if option with value\n        // 1 was in the options list because Spacebars evaluates \"\" to 1 and\n        // considers that a duplicate.\n        // See https://github.com/aldeed/meteor-autoform/issues/656\n        _id: 'AUTOFORM_EMPTY_FIRST_OPTION',\n        selected: false,\n        // atts: itemAtts\n      });\n    }\n\n    var fetchOpt = function fetchOpt(opt) {\n      return {\n        name: context.name,\n        label: opt.label,\n        value: opt.value,\n        // _id must be included because it is a special property that\n        // #each uses to track unique list items when adding and removing them\n        // See https://github.com/meteor/meteor/issues/2174\n        _id: opt.value,\n        selected: _.isArray(context.value) ?\n          _.include(context.value, opt.value) : (opt.value === context.value),\n        // atts: itemAtts\n      };\n    };\n\n    // Add all defined options\n    _.each(context.selectOptions, function(opt) {\n      if (opt.optgroup) {\n        context.items.push({\n          optgroup: opt.optgroup,\n          items: _.map(opt.options, fetchOpt)\n        });\n      } else {\n        context.items.push(fetchOpt(opt));\n      }\n    });\n\n    return context;\n  }\n});\n\nTemplate.afSelectize.helpers({\n  optionAtts: function () {\n    var item = this\n    var atts = {\n      value: item.value\n    };\n    if (item.selected) {\n      atts.selected = '';\n    }\n    return atts;\n  },\n  atts: function () {\n    var atts = _.clone(this.atts);\n    // TODO: if (style == 'bootstrap3') ...\n    // Add bootstrap class\n    atts = AutoForm.Utility.addClass(atts, 'form-control');\n    delete atts.selectizeOptions;\n    delete atts.isReactiveOptions;\n    return atts;\n  },\n  isReactiveOptions: function () {\n    var isReactiveOptions;\n    if (_.has(this.atts, 'isReactiveOptions')) {\n      isReactiveOptions = this.atts.isReactiveOptions;\n    } else {\n      isReactiveOptions = _defaults.isReactiveOptions;\n    }\n    return isReactiveOptions;\n  }\n});\n\nTemplate.afSelectize.events({\n  \"click .selectized\": function (event) {\n    // TODO: https://github.com/selectize/selectize.js/issues/658\n    $(event.toElement).next().children(\":first-child\").children(\"input:first\").focus();\n  }\n});\n\nTemplate.afSelectize.rendered = function () {\n  var selectizeOptions = this.data.atts.selectizeOptions || {};\n  // selectize rearranges one option from the middle of the list\n  // https://github.com/selectize/selectize.js/issues/640#issuecomment-71788203\n  if (!selectizeOptions.sortField) {\n    selectizeOptions.sortField = 'text';\n  }\n  // instanciate selectize\n  this.$('select').selectize(selectizeOptions);\n\n  var isReactiveOptions;\n  if (_.has(this.data.atts, 'isReactiveOptions')) {\n    isReactiveOptions = this.data.atts.isReactiveOptions;\n  } else {\n    isReactiveOptions = _defaults.isReactiveOptions;\n  }\n\n  if (isReactiveOptions) {\n    var test = false;\n    var selectize = this.$('select')[0].selectize;\n    this.autorun(function () {\n      var items = Template.currentData().items;\n      // FIXED double autorun\n      // TODO may be computation.firstRun?\n      test = !test;\n      if (test) {\n        _refreshSelectizeOptions(selectize, items);\n      }\n    });\n  }\n};\n\nTemplate.afSelectize.destroyed = function () {\n  this.$('select')[0].selectize.destroy();\n};\n\nvar _defaults = {\n  firstOption: 'Select an option',\n  isReactiveOptions: false\n};\n\nAutoForm.Selectize = {};\nAutoForm.Selectize.setDefaults = function (o) {\n  if (_.has(o, 'firstOption')) {\n    _defaults.firstOption = o.firstOption;\n  }\n  if (_.has(o, 'isReactiveOptions')) {\n    _defaults.isReactiveOptions = o.isReactiveOptions;\n  }\n}\n\nvar _refreshSelectizeOptions = function (selectize, options) {\n  var items = selectize.items;\n\n  selectize.clearOptions();\n\n  _.each(options, function (option) {\n    if (option.optgroup) {\n      selectize.addOptionGroup(option.optgroup, {label: option.optgroup});\n      _.each(option.items, function (groupOption) {\n        selectize.addOption({value: groupOption.value, text: groupOption.label, optgroup: option.optgroup});\n        if (groupOption.selected) {\n          selectize.addItem(groupOption.value, true);\n        }\n      });\n    } else if (option.value) {\n      selectize.addOption({value: option.value, text: option.label});\n      if (option.selected) {\n        selectize.addItem(option.value, true);\n      }\n    }\n  });\n\n  _.each(items, function (item) {\n    selectize.addItem(item, true);\n  });\n};\n","\nTemplate.__checkName(\"afSelectizeInput\");\nTemplate[\"afSelectizeInput\"] = new Template(\"Template.afSelectizeInput\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs({\n    type: \"text\",\n    value: function() {\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));\n    }\n  }, function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  }));\n}));\n","AutoForm.addInputType(\"selectize-input\", {\n  template: \"afSelectizeInput\",\n  valueOut: function () {\n    if (this[0].selectize) {\n      return this[0].selectize.getValue();\n    }\n  },\n  valueConverters: {\n    \"stringArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          return $.trim(item);\n        });\n      }\n      return val;\n    },\n    \"number\": AutoForm.Utility.stringToNumber,\n    \"numberArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToNumber(item);\n        });\n      }\n      return val;\n    },\n    \"boolean\": AutoForm.Utility.stringToBool,\n    \"booleanArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToBool(item);\n        });\n      }\n      return val;\n    },\n    \"date\": AutoForm.Utility.stringToDate,\n    \"dateArray\": function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToDate(item);\n        });\n      }\n      return val;\n    }\n  }\n});\n\nTemplate.afSelectizeInput.helpers({\n  atts: function afSelectAtts() {\n    var atts = _.clone(this.atts);\n    // TODO: if (style == 'bootstrap3') ...\n    // Add bootstrap class\n    atts = AutoForm.Utility.addClass(atts, \"form-control\");\n    delete atts.selectizeOptions;\n    return atts;\n  }\n});\n\nTemplate.afSelectizeInput.events({\n  \"click .selectized\": function (event) {\n    // TODO: https://github.com/selectize/selectize.js/issues/658\n    $(event.toElement).next().children(\":first-child\").children(\"input:first\").focus();\n  }\n});\n\nTemplate.afSelectizeInput.rendered = function () {\n  var selectizeOptions = this.data.atts.selectizeOptions || {};\n  // selectize rearranges one option from the middle of the list\n  // https://github.com/selectize/selectize.js/issues/640#issuecomment-71788203\n  if (!selectizeOptions.sortField) {\n    selectizeOptions.sortField = 'text';\n  }\n  // instanciate selectize\n  this.$('input').selectize(selectizeOptions);\n};\n\nTemplate.afSelectizeInput.destroyed = function () {\n  this.$('input')[0].selectize.destroy();\n};\n"]}