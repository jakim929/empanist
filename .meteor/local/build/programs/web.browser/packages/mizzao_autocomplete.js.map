{"version":3,"sources":["meteor://ðŸ’»app/packages/mizzao_autocomplete/packages/mizzao_autocomplete.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH","file":"/packages/mizzao_autocomplete.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mizzao:autocomplete/template.inputs.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n                                                                                                                      // 1\nTemplate.__checkName(\"inputAutocomplete\");                                                                            // 2\nTemplate[\"inputAutocomplete\"] = new Template(\"Template.inputAutocomplete\", (function() {                              // 3\n  var view = this;                                                                                                    // 4\n  return [ HTML.INPUT(HTML.Attrs({                                                                                    // 5\n    type: \"text\"                                                                                                      // 6\n  }, function() {                                                                                                     // 7\n    return Spacebars.attrMustache(view.lookup(\"attributes\"));                                                         // 8\n  })), \"\\n    \", Spacebars.include(view.lookupTemplate(\"autocompleteContainer\")) ];                                   // 9\n}));                                                                                                                  // 10\n                                                                                                                      // 11\nTemplate.__checkName(\"textareaAutocomplete\");                                                                         // 12\nTemplate[\"textareaAutocomplete\"] = new Template(\"Template.textareaAutocomplete\", (function() {                        // 13\n  var view = this;                                                                                                    // 14\n  return [ HTML.TEXTAREA(HTML.Attrs(function() {                                                                      // 15\n    return Spacebars.attrMustache(view.lookup(\"attributes\"));                                                         // 16\n  }, {                                                                                                                // 17\n    value: function() {                                                                                               // 18\n      return Blaze._InOuterTemplateScope(view, function() {                                                           // 19\n        return Spacebars.include(function() {                                                                         // 20\n          return Spacebars.call(view.templateContentBlock);                                                           // 21\n        });                                                                                                           // 22\n      });                                                                                                             // 23\n    }                                                                                                                 // 24\n  })), \"\\n    \", Spacebars.include(view.lookupTemplate(\"autocompleteContainer\")) ];                                   // 25\n}));                                                                                                                  // 26\n                                                                                                                      // 27\nTemplate.__checkName(\"_autocompleteContainer\");                                                                       // 28\nTemplate[\"_autocompleteContainer\"] = new Template(\"Template._autocompleteContainer\", (function() {                    // 29\n  var view = this;                                                                                                    // 30\n  return Blaze.If(function() {                                                                                        // 31\n    return Spacebars.call(view.lookup(\"isShowing\"));                                                                  // 32\n  }, function() {                                                                                                     // 33\n    return [ \"\\n    \", HTML.DIV({                                                                                     // 34\n      \"class\": \"-autocomplete-container\"                                                                              // 35\n    }, \"\\n        \", Blaze.If(function() {                                                                            // 36\n      return Spacebars.call(view.lookup(\"isLoaded\"));                                                                 // 37\n    }, function() {                                                                                                   // 38\n      return [ \"\\n            \", Blaze.Unless(function() {                                                            // 39\n        return Spacebars.call(view.lookup(\"empty\"));                                                                  // 40\n      }, function() {                                                                                                 // 41\n        return [ \"\\n            \", HTML.UL({                                                                          // 42\n          \"class\": \"-autocomplete-list\"                                                                               // 43\n        }, \"\\n                \", Blaze.Each(function() {                                                              // 44\n          return Spacebars.call(view.lookup(\"filteredList\"));                                                         // 45\n        }, function() {                                                                                               // 46\n          return [ \"\\n                \", HTML.LI({                                                                    // 47\n            \"class\": \"-autocomplete-item\"                                                                             // 48\n          }, \"\\n                    \", Spacebars.With(function() {                                                    // 49\n            return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"currentTemplate\"));                               // 50\n          }, function() {                                                                                             // 51\n            return [ \"\\n                        \", Spacebars.With(function() {                                        // 52\n              return Spacebars.call(view.lookup(\"..\"));                                                               // 53\n            }, function() {                                                                                           // 54\n              return [ \"  \\n                            \", Spacebars.include(view.lookupTemplate(\"..\")), \"  \\n                        \" ];\n            }), \"\\n                    \" ];                                                                           // 56\n          }), \"\\n                \"), \"\\n                \" ];                                                          // 57\n        }), \"\\n            \"), \"\\n            \" ];                                                                    // 58\n      }, function() {                                                                                                 // 59\n        return [ \"\\n                \", Spacebars.include(view.lookupTemplate(\"noMatchTemplate\")), \"\\n            \" ]; // 60\n      }), \"\\n        \" ];                                                                                             // 61\n    }, function() {                                                                                                   // 62\n      return [ \"\\n            \", HTML.I(\"loading...\"), \"\\n        \" ];                                                // 63\n    }), \"\\n    \"), \"\\n    \" ];                                                                                        // 64\n  });                                                                                                                 // 65\n}));                                                                                                                  // 66\n                                                                                                                      // 67\nTemplate.__checkName(\"_noMatch\");                                                                                     // 68\nTemplate[\"_noMatch\"] = new Template(\"Template._noMatch\", (function() {                                                // 69\n  var view = this;                                                                                                    // 70\n  return HTML.Raw(\"(<i>no matches</i>)\");                                                                             // 71\n}));                                                                                                                  // 72\n                                                                                                                      // 73\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mizzao:autocomplete/autocomplete-client.coffee.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar AutoCompleteRecords, getField, getFindParams, getRegExp, isServerSearch, isWholeField, validateRule,                  \n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nAutoCompleteRecords = new Mongo.Collection(\"autocompleteRecords\");\n\nisServerSearch = function(rule) {\n  return _.isString(rule.collection);\n};\n\nvalidateRule = function(rule) {\n  if ((rule.subscription != null) && !Match.test(rule.collection, String)) {\n    throw new Error(\"Collection name must be specified as string for server-side search\");\n  }\n  if (rule.callback != null) {\n    return console.warn(\"autocomplete no longer supports callbacks; use event listeners instead.\");\n  }\n};\n\nisWholeField = function(rule) {\n  return !rule.token;\n};\n\ngetRegExp = function(rule) {\n  if (!isWholeField(rule)) {\n    return new RegExp('(^|\\\\b|\\\\s)' + rule.token + '([\\\\w.]*)$');\n  } else {\n    return new RegExp('(^)(.*)$');\n  }\n};\n\ngetFindParams = function(rule, filter, limit) {\n  var options, selector, sortspec;\n  selector = _.extend({}, rule.filter || {});\n  options = {\n    limit: limit\n  };\n  if (!filter) {\n    return [selector, options];\n  }\n  if (rule.sort && rule.field) {\n    sortspec = {};\n    sortspec[rule.field] = 1;\n    options.sort = sortspec;\n  }\n  if (_.isFunction(rule.selector)) {\n    _.extend(selector, rule.selector(filter));\n  } else {\n    selector[rule.field] = {\n      $regex: rule.matchAll ? filter : \"^\" + filter,\n      $options: typeof rule.options === 'undefined' ? 'i' : rule.options\n    };\n  }\n  return [selector, options];\n};\n\ngetField = function(obj, str) {\n  var key, _i, _len, _ref;\n  _ref = str.split(\".\");\n  for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n    key = _ref[_i];\n    obj = obj[key];\n  }\n  return obj;\n};\n\nthis.AutoComplete = (function() {\n  AutoComplete.KEYS = [40, 38, 13, 27, 9];\n\n  function AutoComplete(settings) {\n    this.onItemClick = __bind(this.onItemClick, this);\n    var rule, _i, _len, _ref;\n    this.limit = settings.limit || 5;\n    this.position = settings.position || \"bottom\";\n    this.rules = settings.rules;\n    _ref = this.rules;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      rule = _ref[_i];\n      validateRule(rule);\n    }\n    this.expressions = (function() {\n      var _j, _len1, _ref1, _results;\n      _ref1 = this.rules;\n      _results = [];\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n        rule = _ref1[_j];\n        _results.push(getRegExp(rule));\n      }\n      return _results;\n    }).call(this);\n    this.matched = -1;\n    this.loaded = true;\n    this.ruleDep = new Deps.Dependency;\n    this.filterDep = new Deps.Dependency;\n    this.loadingDep = new Deps.Dependency;\n    this.sub = null;\n    this.comp = Deps.autorun((function(_this) {\n      return function() {\n        var filter, options, selector, subName, _ref1, _ref2;\n        if ((_ref1 = _this.sub) != null) {\n          _ref1.stop();\n        }\n        if (!((rule = _this.matchedRule()) && (filter = _this.getFilter()) !== null)) {\n          return;\n        }\n        if (!isServerSearch(rule)) {\n          _this.setLoaded(true);\n          return;\n        }\n        _ref2 = getFindParams(rule, filter, _this.limit), selector = _ref2[0], options = _ref2[1];\n        _this.setLoaded(false);\n        subName = rule.subscription || \"autocomplete-recordset\";\n        return _this.sub = Meteor.subscribe(subName, selector, options, rule.collection, function() {\n          return _this.setLoaded(true);\n        });\n      };\n    })(this));\n  }\n\n  AutoComplete.prototype.teardown = function() {\n    return this.comp.stop();\n  };\n\n  AutoComplete.prototype.matchedRule = function() {\n    this.ruleDep.depend();\n    if (this.matched >= 0) {\n      return this.rules[this.matched];\n    } else {\n      return null;\n    }\n  };\n\n  AutoComplete.prototype.setMatchedRule = function(i) {\n    this.matched = i;\n    return this.ruleDep.changed();\n  };\n\n  AutoComplete.prototype.getFilter = function() {\n    this.filterDep.depend();\n    return this.filter;\n  };\n\n  AutoComplete.prototype.setFilter = function(x) {\n    this.filter = x;\n    this.filterDep.changed();\n    return this.filter;\n  };\n\n  AutoComplete.prototype.isLoaded = function() {\n    this.loadingDep.depend();\n    return this.loaded;\n  };\n\n  AutoComplete.prototype.setLoaded = function(val) {\n    if (val === this.loaded) {\n      return;\n    }\n    this.loaded = val;\n    return this.loadingDep.changed();\n  };\n\n  AutoComplete.prototype.onKeyUp = function() {\n    var breakLoop, i, matches, startpos, val, _results;\n    if (!this.$element) {\n      return;\n    }\n    startpos = this.element.selectionStart;\n    val = this.getText().substring(0, startpos);\n\n    /*\n      Matching on multiple expressions.\n      We always go from a matched state to an unmatched one\n      before going to a different matched one.\n     */\n    i = 0;\n    breakLoop = false;\n    _results = [];\n    while (i < this.expressions.length) {\n      matches = val.match(this.expressions[i]);\n      if (!matches && this.matched === i) {\n        this.setMatchedRule(-1);\n        breakLoop = true;\n      }\n      if (matches && this.matched === -1) {\n        this.setMatchedRule(i);\n        breakLoop = true;\n      }\n      if (matches && this.filter !== matches[2]) {\n        this.setFilter(matches[2]);\n        breakLoop = true;\n      }\n      if (breakLoop) {\n        break;\n      }\n      _results.push(i++);\n    }\n    return _results;\n  };\n\n  AutoComplete.prototype.onKeyDown = function(e) {\n    if (this.matched === -1 || (this.constructor.KEYS.indexOf(e.keyCode) < 0)) {\n      return;\n    }\n    switch (e.keyCode) {\n      case 9:\n      case 13:\n        if (this.select()) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n        break;\n      case 40:\n        e.preventDefault();\n        this.next();\n        break;\n      case 38:\n        e.preventDefault();\n        this.prev();\n        break;\n      case 27:\n        this.$element.blur();\n        this.hideList();\n    }\n  };\n\n  AutoComplete.prototype.onFocus = function() {\n    return Meteor.defer((function(_this) {\n      return function() {\n        return _this.onKeyUp();\n      };\n    })(this));\n  };\n\n  AutoComplete.prototype.onBlur = function() {\n    return Meteor.setTimeout((function(_this) {\n      return function() {\n        return _this.hideList();\n      };\n    })(this), 500);\n  };\n\n  AutoComplete.prototype.onItemClick = function(doc, e) {\n    return this.processSelection(doc, this.rules[this.matched]);\n  };\n\n  AutoComplete.prototype.onItemHover = function(doc, e) {\n    this.tmplInst.$(\".-autocomplete-item\").removeClass(\"selected\");\n    return $(e.target).closest(\".-autocomplete-item\").addClass(\"selected\");\n  };\n\n  AutoComplete.prototype.filteredList = function() {\n    var filter, options, rule, selector, _ref;\n    filter = this.getFilter();\n    if (this.matched === -1) {\n      return null;\n    }\n    rule = this.rules[this.matched];\n    if (!(rule.token || filter)) {\n      return null;\n    }\n    _ref = getFindParams(rule, filter, this.limit), selector = _ref[0], options = _ref[1];\n    Meteor.defer((function(_this) {\n      return function() {\n        return _this.ensureSelection();\n      };\n    })(this));\n    if (isServerSearch(rule)) {\n      return AutoCompleteRecords.find({}, options);\n    }\n    return rule.collection.find(selector, options);\n  };\n\n  AutoComplete.prototype.isShowing = function() {\n    var rule, showing;\n    rule = this.matchedRule();\n    showing = (rule != null) && (rule.token || this.getFilter());\n    if (showing) {\n      Meteor.defer((function(_this) {\n        return function() {\n          _this.positionContainer();\n          return _this.ensureSelection();\n        };\n      })(this));\n    }\n    return showing;\n  };\n\n  AutoComplete.prototype.select = function() {\n    var doc, node;\n    node = this.tmplInst.find(\".-autocomplete-item.selected\");\n    if (node == null) {\n      return false;\n    }\n    doc = Blaze.getData(node);\n    if (!doc) {\n      return false;\n    }\n    this.processSelection(doc, this.rules[this.matched]);\n    return true;\n  };\n\n  AutoComplete.prototype.processSelection = function(doc, rule) {\n    var replacement;\n    replacement = getField(doc, rule.field);\n    if (!isWholeField(rule)) {\n      this.replace(replacement, rule);\n      this.hideList();\n    } else {\n      this.setText(replacement);\n      this.onBlur();\n    }\n    this.$element.trigger(\"autocompleteselect\", doc);\n  };\n\n  AutoComplete.prototype.replace = function(replacement) {\n    var finalFight, fullStuff, newPosition, posfix, separator, startpos, val;\n    startpos = this.element.selectionStart;\n    fullStuff = this.getText();\n    val = fullStuff.substring(0, startpos);\n    val = val.replace(this.expressions[this.matched], \"$1\" + this.rules[this.matched].token + replacement);\n    posfix = fullStuff.substring(startpos, fullStuff.length);\n    separator = (posfix.match(/^\\s/) ? \"\" : \" \");\n    finalFight = val + separator + posfix;\n    this.setText(finalFight);\n    newPosition = val.length + 1;\n    this.element.setSelectionRange(newPosition, newPosition);\n  };\n\n  AutoComplete.prototype.hideList = function() {\n    this.setMatchedRule(-1);\n    return this.setFilter(null);\n  };\n\n  AutoComplete.prototype.getText = function() {\n    return this.$element.val() || this.$element.text();\n  };\n\n  AutoComplete.prototype.setText = function(text) {\n    if (this.$element.is(\"input,textarea\")) {\n      return this.$element.val(text);\n    } else {\n      return this.$element.html(text);\n    }\n  };\n\n\n  /*\n    Rendering functions\n   */\n\n  AutoComplete.prototype.positionContainer = function() {\n    var offset, pos, position, rule;\n    position = this.$element.position();\n    rule = this.matchedRule();\n    offset = getCaretCoordinates(this.element, this.element.selectionStart);\n    if ((rule != null) && isWholeField(rule)) {\n      pos = {\n        left: position.left,\n        width: this.$element.outerWidth()\n      };\n    } else {\n      pos = {\n        left: position.left + offset.left\n      };\n    }\n    if (this.position === \"top\") {\n      pos.bottom = this.$element.offsetParent().height() - position.top - offset.top;\n    } else {\n      pos.top = position.top + offset.top + parseInt(this.$element.css('font-size'));\n    }\n    return this.tmplInst.$(\".-autocomplete-container\").css(pos);\n  };\n\n  AutoComplete.prototype.ensureSelection = function() {\n    var selectedItem;\n    selectedItem = this.tmplInst.$(\".-autocomplete-item.selected\");\n    if (!selectedItem.length) {\n      return this.tmplInst.$(\".-autocomplete-item:first-child\").addClass(\"selected\");\n    }\n  };\n\n  AutoComplete.prototype.next = function() {\n    var currentItem, next;\n    currentItem = this.tmplInst.$(\".-autocomplete-item.selected\");\n    if (!currentItem.length) {\n      return;\n    }\n    currentItem.removeClass(\"selected\");\n    next = currentItem.next();\n    if (next.length) {\n      return next.addClass(\"selected\");\n    } else {\n      return this.tmplInst.$(\".-autocomplete-item:first-child\").addClass(\"selected\");\n    }\n  };\n\n  AutoComplete.prototype.prev = function() {\n    var currentItem, prev;\n    currentItem = this.tmplInst.$(\".-autocomplete-item.selected\");\n    if (!currentItem.length) {\n      return;\n    }\n    currentItem.removeClass(\"selected\");\n    prev = currentItem.prev();\n    if (prev.length) {\n      return prev.addClass(\"selected\");\n    } else {\n      return this.tmplInst.$(\".-autocomplete-item:last-child\").addClass(\"selected\");\n    }\n  };\n\n  AutoComplete.prototype.currentTemplate = function() {\n    return this.rules[this.matched].template;\n  };\n\n  return AutoComplete;\n\n})();\n\nAutocompleteTest = {\n  records: AutoCompleteRecords,\n  getRegExp: getRegExp,\n  getFindParams: getFindParams\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/mizzao:autocomplete/templates.coffee.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar acEvents, attributes, autocompleteHelpers;\n\nacEvents = {\n  \"keydown\": function(e, t) {\n    return t.ac.onKeyDown(e);\n  },\n  \"keyup\": function(e, t) {\n    return t.ac.onKeyUp(e);\n  },\n  \"focus\": function(e, t) {\n    return t.ac.onFocus(e);\n  },\n  \"blur\": function(e, t) {\n    return t.ac.onBlur(e);\n  }\n};\n\nTemplate.inputAutocomplete.events(acEvents);\n\nTemplate.textareaAutocomplete.events(acEvents);\n\nattributes = function() {\n  return _.omit(this, 'settings');\n};\n\nautocompleteHelpers = {\n  attributes: attributes,\n  autocompleteContainer: new Template('AutocompleteContainer', function() {\n    var ac;\n    ac = new AutoComplete(Blaze.getData().settings);\n    this.parentView.templateInstance().ac = ac;\n    this.onViewReady(function() {\n      ac.element = this.parentView.firstNode();\n      return ac.$element = $(ac.element);\n    });\n    return Blaze.With(ac, function() {\n      return Template._autocompleteContainer;\n    });\n  })\n};\n\nTemplate.inputAutocomplete.helpers(autocompleteHelpers);\n\nTemplate.textareaAutocomplete.helpers(autocompleteHelpers);\n\nTemplate._autocompleteContainer.rendered = function() {\n  return this.data.tmplInst = this;\n};\n\nTemplate._autocompleteContainer.destroyed = function() {\n  return this.data.teardown();\n};\n\n\n/*\n  List rendering helpers\n */\n\nTemplate._autocompleteContainer.events({\n  \"click .-autocomplete-item\": function(e, t) {\n    return t.data.onItemClick(this, e);\n  },\n  \"mouseenter .-autocomplete-item\": function(e, t) {\n    return t.data.onItemHover(this, e);\n  }\n});\n\nTemplate._autocompleteContainer.helpers({\n  empty: function() {\n    return this.filteredList().count() === 0;\n  },\n  noMatchTemplate: function() {\n    return this.matchedRule().noMatchTemplate || Template._noMatch;\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}