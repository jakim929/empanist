{"version":3,"sources":["meteor://ðŸ’»app/packages/spiderable/spiderable.js","meteor://ðŸ’»app/packages/spiderable/spiderable_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA,gG;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iG","file":"/packages/spiderable.js","sourcesContent":["Spiderable = {};\n\n","// We want to provide a deteriministic indicator of when the page is 'done'\n// This is non-trivial: e.g. an infinite stream of tweets is never done.\n//\n// We do this instead:\n//   We are done sometime after all initial subscriptions are ready\n//   Initial subscriptions are those started in the top-level script execution,\n//   or from a Meteor.startup callback when Meteor.startup is called in\n//   top-level script execution.\n//\n// Note that we don't guarantee that we won't wait longer than we have to;\n// extra subscriptions may be made, and extra data past the minimum may be\n// received.\n//\n// We set this 'started' flag as Package.spiderable.Spiderable._initialSubscriptionsStarted\n// This is used by our phantomjs to determine when the subscriptions are started;\n// it then polls until all subscriptions are ready.\n\nSpiderable._initialSubscriptionsStarted = false;\n\nSpiderable._onReadyHook = new Hook({\n  debugPrintExceptions: \"Spiderable.addReadyCondition callback\"\n});\n\n// register a new onReady hook for validation\nSpiderable.addReadyCondition = function (fn) {\n  return Spiderable._onReadyHook.register(fn);\n};\n\n//\n// register default hooks\n\n// top level code ready\nSpiderable.addReadyCondition(function () {\n  // subs & top level code (startup) completed\n  return Spiderable._initialSubscriptionsStarted;\n})\nvar startupCallbacksDone = function () {\n  Spiderable._initialSubscriptionsStarted = true;\n};\n// This extra indirection is how we get called last\nvar topLevelCodeDone = function () {\n  // We'd like to use Meteor.startup here I think, but docs/behaviour of that is wrong\n  Meteor._setImmediate(function () { startupCallbacksDone(); });\n};\nMeteor.startup(function () { topLevelCodeDone(); });\n\n// all ddp subs ready\nSpiderable.addReadyCondition(function () {\n  Tracker.flush();\n  return DDP._allSubscriptionsReady();\n})\n\n// run all hooks and return true if they all pass\nSpiderable.isReady = function () {\n  var isReady = true;\n  Spiderable._onReadyHook.each(function (callback) {\n    if (callback()) {\n      return true; // next callback\n    } else {\n      isReady = false;\n      return false; // stop immediately\n    }\n  });\n  return isReady;\n};\n\n"]}