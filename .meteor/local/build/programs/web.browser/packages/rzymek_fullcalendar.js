//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var moment = Package['momentjs:moment'].moment;
var Template = Package.templating.Template;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var Spacebars = Package.spacebars.Spacebars;
var HTML = Package.htmljs.HTML;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/fullcalendar.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.7.2                                                                                                 // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2016 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery', 'moment' ], factory);                                                                             // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'), require('moment'));                                                      // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery, moment);                                                                                             // 15
	}                                                                                                                     // 16
})(function($, moment) {                                                                                               // 17
                                                                                                                       // 18
;;                                                                                                                     // 19
                                                                                                                       // 20
var FC = $.fullCalendar = {                                                                                            // 21
	version: "2.7.2",                                                                                                     // 22
	internalApiVersion: 3                                                                                                 // 23
};                                                                                                                     // 24
var fcViews = FC.views = {};                                                                                           // 25
                                                                                                                       // 26
                                                                                                                       // 27
$.fn.fullCalendar = function(options) {                                                                                // 28
	var args = Array.prototype.slice.call(arguments, 1); // for a possible method call                                    // 29
	var res = this; // what this function will return (this jQuery object by default)                                     // 30
                                                                                                                       // 31
	this.each(function(i, _element) { // loop each DOM element involved                                                   // 32
		var element = $(_element);                                                                                           // 33
		var calendar = element.data('fullCalendar'); // get the existing calendar object (if any)                            // 34
		var singleRes; // the returned value of this single method call                                                      // 35
                                                                                                                       // 36
		// a method call                                                                                                     // 37
		if (typeof options === 'string') {                                                                                   // 38
			if (calendar && $.isFunction(calendar[options])) {                                                                  // 39
				singleRes = calendar[options].apply(calendar, args);                                                               // 40
				if (!i) {                                                                                                          // 41
					res = singleRes; // record the first method call result                                                           // 42
				}                                                                                                                  // 43
				if (options === 'destroy') { // for the destroy method, must remove Calendar object data                           // 44
					element.removeData('fullCalendar');                                                                               // 45
				}                                                                                                                  // 46
			}                                                                                                                   // 47
		}                                                                                                                    // 48
		// a new calendar initialization                                                                                     // 49
		else if (!calendar) { // don't initialize twice                                                                      // 50
			calendar = new Calendar(element, options);                                                                          // 51
			element.data('fullCalendar', calendar);                                                                             // 52
			calendar.render();                                                                                                  // 53
		}                                                                                                                    // 54
	});                                                                                                                   // 55
	                                                                                                                      // 56
	return res;                                                                                                           // 57
};                                                                                                                     // 58
                                                                                                                       // 59
                                                                                                                       // 60
var complexOptions = [ // names of options that are objects whose properties should be combined                        // 61
	'header',                                                                                                             // 62
	'buttonText',                                                                                                         // 63
	'buttonIcons',                                                                                                        // 64
	'themeButtonIcons'                                                                                                    // 65
];                                                                                                                     // 66
                                                                                                                       // 67
                                                                                                                       // 68
// Merges an array of option objects into a single object                                                              // 69
function mergeOptions(optionObjs) {                                                                                    // 70
	return mergeProps(optionObjs, complexOptions);                                                                        // 71
}                                                                                                                      // 72
                                                                                                                       // 73
                                                                                                                       // 74
// Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.         // 75
// Converts View-Option-Hashes into the View-Specific-Options format.                                                  // 76
function massageOverrides(input) {                                                                                     // 77
	var overrides = { views: input.views || {} }; // the output. ensure a `views` hash                                    // 78
	var subObj;                                                                                                           // 79
                                                                                                                       // 80
	// iterate through all option override properties (except `views`)                                                    // 81
	$.each(input, function(name, val) {                                                                                   // 82
		if (name != 'views') {                                                                                               // 83
                                                                                                                       // 84
			// could the value be a legacy View-Option-Hash?                                                                    // 85
			if (                                                                                                                // 86
				$.isPlainObject(val) &&                                                                                            // 87
				!/(time|duration|interval)$/i.test(name) && // exclude duration options. might be given as objects                 // 88
				$.inArray(name, complexOptions) == -1 // complex options aren't allowed to be View-Option-Hashes                   // 89
			) {                                                                                                                 // 90
				subObj = null;                                                                                                     // 91
                                                                                                                       // 92
				// iterate through the properties of this possible View-Option-Hash value                                          // 93
				$.each(val, function(subName, subVal) {                                                                            // 94
                                                                                                                       // 95
					// is the property targeting a view?                                                                              // 96
					if (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)) {                              // 97
						if (!overrides.views[subName]) { // ensure the view-target entry exists                                          // 98
							overrides.views[subName] = {};                                                                                  // 99
						}                                                                                                                // 100
						overrides.views[subName][name] = subVal; // record the value in the `views` object                               // 101
					}                                                                                                                 // 102
					else { // a non-View-Option-Hash property                                                                         // 103
						if (!subObj) {                                                                                                   // 104
							subObj = {};                                                                                                    // 105
						}                                                                                                                // 106
						subObj[subName] = subVal; // accumulate these unrelated values for later                                         // 107
					}                                                                                                                 // 108
				});                                                                                                                // 109
                                                                                                                       // 110
				if (subObj) { // non-View-Option-Hash properties? transfer them as-is                                              // 111
					overrides[name] = subObj;                                                                                         // 112
				}                                                                                                                  // 113
			}                                                                                                                   // 114
			else {                                                                                                              // 115
				overrides[name] = val; // transfer normal options as-is                                                            // 116
			}                                                                                                                   // 117
		}                                                                                                                    // 118
	});                                                                                                                   // 119
                                                                                                                       // 120
	return overrides;                                                                                                     // 121
}                                                                                                                      // 122
                                                                                                                       // 123
;;                                                                                                                     // 124
                                                                                                                       // 125
// exports                                                                                                             // 126
FC.intersectRanges = intersectRanges;                                                                                  // 127
FC.applyAll = applyAll;                                                                                                // 128
FC.debounce = debounce;                                                                                                // 129
FC.isInt = isInt;                                                                                                      // 130
FC.htmlEscape = htmlEscape;                                                                                            // 131
FC.cssToStr = cssToStr;                                                                                                // 132
FC.proxy = proxy;                                                                                                      // 133
FC.capitaliseFirstLetter = capitaliseFirstLetter;                                                                      // 134
                                                                                                                       // 135
                                                                                                                       // 136
/* FullCalendar-specific DOM Utilities                                                                                 // 137
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 139
                                                                                                                       // 140
// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left     // 141
// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.                 // 142
function compensateScroll(rowEls, scrollbarWidths) {                                                                   // 143
	if (scrollbarWidths.left) {                                                                                           // 144
		rowEls.css({                                                                                                         // 145
			'border-left-width': 1,                                                                                             // 146
			'margin-left': scrollbarWidths.left - 1                                                                             // 147
		});                                                                                                                  // 148
	}                                                                                                                     // 149
	if (scrollbarWidths.right) {                                                                                          // 150
		rowEls.css({                                                                                                         // 151
			'border-right-width': 1,                                                                                            // 152
			'margin-right': scrollbarWidths.right - 1                                                                           // 153
		});                                                                                                                  // 154
	}                                                                                                                     // 155
}                                                                                                                      // 156
                                                                                                                       // 157
                                                                                                                       // 158
// Undoes compensateScroll and restores all borders/margins                                                            // 159
function uncompensateScroll(rowEls) {                                                                                  // 160
	rowEls.css({                                                                                                          // 161
		'margin-left': '',                                                                                                   // 162
		'margin-right': '',                                                                                                  // 163
		'border-left-width': '',                                                                                             // 164
		'border-right-width': ''                                                                                             // 165
	});                                                                                                                   // 166
}                                                                                                                      // 167
                                                                                                                       // 168
                                                                                                                       // 169
// Make the mouse cursor express that an event is not allowed in the current area                                      // 170
function disableCursor() {                                                                                             // 171
	$('body').addClass('fc-not-allowed');                                                                                 // 172
}                                                                                                                      // 173
                                                                                                                       // 174
                                                                                                                       // 175
// Returns the mouse cursor to its original look                                                                       // 176
function enableCursor() {                                                                                              // 177
	$('body').removeClass('fc-not-allowed');                                                                              // 178
}                                                                                                                      // 179
                                                                                                                       // 180
                                                                                                                       // 181
// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.                   // 182
// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering       // 183
// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and            // 184
// reduces the available height.                                                                                       // 185
function distributeHeight(els, availableHeight, shouldRedistribute) {                                                  // 186
                                                                                                                       // 187
	// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,            // 188
	// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.                              // 189
                                                                                                                       // 190
	var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element                                    // 191
	var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*     // 192
	var flexEls = []; // elements that are allowed to expand. array of DOM nodes                                          // 193
	var flexOffsets = []; // amount of vertical space it takes up                                                         // 194
	var flexHeights = []; // actual css height                                                                            // 195
	var usedHeight = 0;                                                                                                   // 196
                                                                                                                       // 197
	undistributeHeight(els); // give all elements their natural height                                                    // 198
                                                                                                                       // 199
	// find elements that are below the recommended height (expandable).                                                  // 200
	// important to query for heights in a single first pass (to avoid reflow oscillation).                               // 201
	els.each(function(i, el) {                                                                                            // 202
		var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;                                                      // 203
		var naturalOffset = $(el).outerHeight(true);                                                                         // 204
                                                                                                                       // 205
		if (naturalOffset < minOffset) {                                                                                     // 206
			flexEls.push(el);                                                                                                   // 207
			flexOffsets.push(naturalOffset);                                                                                    // 208
			flexHeights.push($(el).height());                                                                                   // 209
		}                                                                                                                    // 210
		else {                                                                                                               // 211
			// this element stretches past recommended height (non-expandable). mark the space as occupied.                     // 212
			usedHeight += naturalOffset;                                                                                        // 213
		}                                                                                                                    // 214
	});                                                                                                                   // 215
                                                                                                                       // 216
	// readjust the recommended height to only consider the height available to non-maxed-out rows.                       // 217
	if (shouldRedistribute) {                                                                                             // 218
		availableHeight -= usedHeight;                                                                                       // 219
		minOffset1 = Math.floor(availableHeight / flexEls.length);                                                           // 220
		minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*                     // 221
	}                                                                                                                     // 222
                                                                                                                       // 223
	// assign heights to all expandable elements                                                                          // 224
	$(flexEls).each(function(i, el) {                                                                                     // 225
		var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;                                                  // 226
		var naturalOffset = flexOffsets[i];                                                                                  // 227
		var naturalHeight = flexHeights[i];                                                                                  // 228
		var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding                          // 229
                                                                                                                       // 230
		if (naturalOffset < minOffset) { // we check this again because redistribution might have changed things             // 231
			$(el).height(newHeight);                                                                                            // 232
		}                                                                                                                    // 233
	});                                                                                                                   // 234
}                                                                                                                      // 235
                                                                                                                       // 236
                                                                                                                       // 237
// Undoes distrubuteHeight, restoring all els to their natural height                                                  // 238
function undistributeHeight(els) {                                                                                     // 239
	els.height('');                                                                                                       // 240
}                                                                                                                      // 241
                                                                                                                       // 242
                                                                                                                       // 243
// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the
// cells to be that width.                                                                                             // 245
// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline        // 246
function matchCellWidths(els) {                                                                                        // 247
	var maxInnerWidth = 0;                                                                                                // 248
                                                                                                                       // 249
	els.find('> span').each(function(i, innerEl) {                                                                        // 250
		var innerWidth = $(innerEl).outerWidth();                                                                            // 251
		if (innerWidth > maxInnerWidth) {                                                                                    // 252
			maxInnerWidth = innerWidth;                                                                                         // 253
		}                                                                                                                    // 254
	});                                                                                                                   // 255
                                                                                                                       // 256
	maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance                     // 257
                                                                                                                       // 258
	els.width(maxInnerWidth);                                                                                             // 259
                                                                                                                       // 260
	return maxInnerWidth;                                                                                                 // 261
}                                                                                                                      // 262
                                                                                                                       // 263
                                                                                                                       // 264
// Given one element that resides inside another,                                                                      // 265
// Subtracts the height of the inner element from the outer element.                                                   // 266
function subtractInnerElHeight(outerEl, innerEl) {                                                                     // 267
	var both = outerEl.add(innerEl);                                                                                      // 268
	var diff;                                                                                                             // 269
                                                                                                                       // 270
	// effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked              // 271
	both.css({                                                                                                            // 272
		position: 'relative', // cause a reflow, which will force fresh dimension recalculation                              // 273
		left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll           // 274
	});                                                                                                                   // 275
	diff = outerEl.outerHeight() - innerEl.outerHeight(); // grab the dimensions                                          // 276
	both.css({ position: '', left: '' }); // undo hack                                                                    // 277
                                                                                                                       // 278
	return diff;                                                                                                          // 279
}                                                                                                                      // 280
                                                                                                                       // 281
                                                                                                                       // 282
/* Element Geom Utilities                                                                                              // 283
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 285
FC.getOuterRect = getOuterRect;                                                                                        // 286
FC.getClientRect = getClientRect;                                                                                      // 287
FC.getContentRect = getContentRect;                                                                                    // 288
FC.getScrollbarWidths = getScrollbarWidths;                                                                            // 289
                                                                                                                       // 290
                                                                                                                       // 291
// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51                                        // 292
function getScrollParent(el) {                                                                                         // 293
	var position = el.css('position'),                                                                                    // 294
		scrollParent = el.parents().filter(function() {                                                                      // 295
			var parent = $(this);                                                                                               // 296
			return (/(auto|scroll)/).test(                                                                                      // 297
				parent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')                                       // 298
			);                                                                                                                  // 299
		}).eq(0);                                                                                                            // 300
                                                                                                                       // 301
	return position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;              // 302
}                                                                                                                      // 303
                                                                                                                       // 304
                                                                                                                       // 305
// Queries the outer bounding area of a jQuery element.                                                                // 306
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 307
// Origin is optional.                                                                                                 // 308
function getOuterRect(el, origin) {                                                                                    // 309
	var offset = el.offset();                                                                                             // 310
	var left = offset.left - (origin ? origin.left : 0);                                                                  // 311
	var top = offset.top - (origin ? origin.top : 0);                                                                     // 312
                                                                                                                       // 313
	return {                                                                                                              // 314
		left: left,                                                                                                          // 315
		right: left + el.outerWidth(),                                                                                       // 316
		top: top,                                                                                                            // 317
		bottom: top + el.outerHeight()                                                                                       // 318
	};                                                                                                                    // 319
}                                                                                                                      // 320
                                                                                                                       // 321
                                                                                                                       // 322
// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.           // 323
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 324
// Origin is optional.                                                                                                 // 325
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 326
function getClientRect(el, origin) {                                                                                   // 327
	var offset = el.offset();                                                                                             // 328
	var scrollbarWidths = getScrollbarWidths(el);                                                                         // 329
	var left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left - (origin ? origin.left : 0);    // 330
	var top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top - (origin ? origin.top : 0);         // 331
                                                                                                                       // 332
	return {                                                                                                              // 333
		left: left,                                                                                                          // 334
		right: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars                                  // 335
		top: top,                                                                                                            // 336
		bottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars                                 // 337
	};                                                                                                                    // 338
}                                                                                                                      // 339
                                                                                                                       // 340
                                                                                                                       // 341
// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.              // 342
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 343
// Origin is optional.                                                                                                 // 344
function getContentRect(el, origin) {                                                                                  // 345
	var offset = el.offset(); // just outside of border, margin not included                                              // 346
	var left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left') -                     // 347
		(origin ? origin.left : 0);                                                                                          // 348
	var top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top') -                         // 349
		(origin ? origin.top : 0);                                                                                           // 350
                                                                                                                       // 351
	return {                                                                                                              // 352
		left: left,                                                                                                          // 353
		right: left + el.width(),                                                                                            // 354
		top: top,                                                                                                            // 355
		bottom: top + el.height()                                                                                            // 356
	};                                                                                                                    // 357
}                                                                                                                      // 358
                                                                                                                       // 359
                                                                                                                       // 360
// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.                           // 361
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 362
function getScrollbarWidths(el) {                                                                                      // 363
	var leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars          // 364
	var widths = {                                                                                                        // 365
		left: 0,                                                                                                             // 366
		right: 0,                                                                                                            // 367
		top: 0,                                                                                                              // 368
		bottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar               // 369
	};                                                                                                                    // 370
                                                                                                                       // 371
	if (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?                 // 372
		widths.left = leftRightWidth;                                                                                        // 373
	}                                                                                                                     // 374
	else {                                                                                                                // 375
		widths.right = leftRightWidth;                                                                                       // 376
	}                                                                                                                     // 377
                                                                                                                       // 378
	return widths;                                                                                                        // 379
}                                                                                                                      // 380
                                                                                                                       // 381
                                                                                                                       // 382
// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side                 // 383
                                                                                                                       // 384
var _isLeftRtlScrollbars = null;                                                                                       // 385
                                                                                                                       // 386
function getIsLeftRtlScrollbars() { // responsible for caching the computation                                         // 387
	if (_isLeftRtlScrollbars === null) {                                                                                  // 388
		_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();                                                                 // 389
	}                                                                                                                     // 390
	return _isLeftRtlScrollbars;                                                                                          // 391
}                                                                                                                      // 392
                                                                                                                       // 393
function computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it                          // 394
	var el = $('<div><div/></div>')                                                                                       // 395
		.css({                                                                                                               // 396
			position: 'absolute',                                                                                               // 397
			top: -1000,                                                                                                         // 398
			left: 0,                                                                                                            // 399
			border: 0,                                                                                                          // 400
			padding: 0,                                                                                                         // 401
			overflow: 'scroll',                                                                                                 // 402
			direction: 'rtl'                                                                                                    // 403
		})                                                                                                                   // 404
		.appendTo('body');                                                                                                   // 405
	var innerEl = el.children();                                                                                          // 406
	var res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?      // 407
	el.remove();                                                                                                          // 408
	return res;                                                                                                           // 409
}                                                                                                                      // 410
                                                                                                                       // 411
                                                                                                                       // 412
// Retrieves a jQuery element's computed CSS value as a floating-point number.                                         // 413
// If the queried value is non-numeric (ex: IE can return "medium" for border width), will just return zero.           // 414
function getCssFloat(el, prop) {                                                                                       // 415
	return parseFloat(el.css(prop)) || 0;                                                                                 // 416
}                                                                                                                      // 417
                                                                                                                       // 418
                                                                                                                       // 419
/* Mouse / Touch Utilities                                                                                             // 420
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 422
FC.preventDefault = preventDefault;                                                                                    // 423
                                                                                                                       // 424
                                                                                                                       // 425
// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)              // 426
function isPrimaryMouseButton(ev) {                                                                                    // 427
	return ev.which == 1 && !ev.ctrlKey;                                                                                  // 428
}                                                                                                                      // 429
                                                                                                                       // 430
                                                                                                                       // 431
function getEvX(ev) {                                                                                                  // 432
	if (ev.pageX !== undefined) {                                                                                         // 433
		return ev.pageX;                                                                                                     // 434
	}                                                                                                                     // 435
	var touches = ev.originalEvent.touches;                                                                               // 436
	if (touches) {                                                                                                        // 437
		return touches[0].pageX;                                                                                             // 438
	}                                                                                                                     // 439
}                                                                                                                      // 440
                                                                                                                       // 441
                                                                                                                       // 442
function getEvY(ev) {                                                                                                  // 443
	if (ev.pageY !== undefined) {                                                                                         // 444
		return ev.pageY;                                                                                                     // 445
	}                                                                                                                     // 446
	var touches = ev.originalEvent.touches;                                                                               // 447
	if (touches) {                                                                                                        // 448
		return touches[0].pageY;                                                                                             // 449
	}                                                                                                                     // 450
}                                                                                                                      // 451
                                                                                                                       // 452
                                                                                                                       // 453
function getEvIsTouch(ev) {                                                                                            // 454
	return /^touch/.test(ev.type);                                                                                        // 455
}                                                                                                                      // 456
                                                                                                                       // 457
                                                                                                                       // 458
function preventSelection(el) {                                                                                        // 459
	el.addClass('fc-unselectable')                                                                                        // 460
		.on('selectstart', preventDefault);                                                                                  // 461
}                                                                                                                      // 462
                                                                                                                       // 463
                                                                                                                       // 464
// Stops a mouse/touch event from doing it's native browser action                                                     // 465
function preventDefault(ev) {                                                                                          // 466
	ev.preventDefault();                                                                                                  // 467
}                                                                                                                      // 468
                                                                                                                       // 469
                                                                                                                       // 470
// attach a handler to get called when ANY scroll action happens on the page.                                          // 471
// this was impossible to do with normal on/off because 'scroll' doesn't bubble.                                       // 472
// http://stackoverflow.com/a/32954565/96342                                                                           // 473
// returns `true` on success.                                                                                          // 474
function bindAnyScroll(handler) {                                                                                      // 475
	if (window.addEventListener) {                                                                                        // 476
		window.addEventListener('scroll', handler, true); // useCapture=true                                                 // 477
		return true;                                                                                                         // 478
	}                                                                                                                     // 479
	return false;                                                                                                         // 480
}                                                                                                                      // 481
                                                                                                                       // 482
                                                                                                                       // 483
// undoes bindAnyScroll. must pass in the original function.                                                           // 484
// returns `true` on success.                                                                                          // 485
function unbindAnyScroll(handler) {                                                                                    // 486
	if (window.removeEventListener) {                                                                                     // 487
		window.removeEventListener('scroll', handler, true); // useCapture=true                                              // 488
		return true;                                                                                                         // 489
	}                                                                                                                     // 490
	return false;                                                                                                         // 491
}                                                                                                                      // 492
                                                                                                                       // 493
                                                                                                                       // 494
/* General Geometry Utils                                                                                              // 495
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 497
FC.intersectRects = intersectRects;                                                                                    // 498
                                                                                                                       // 499
// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false      // 500
function intersectRects(rect1, rect2) {                                                                                // 501
	var res = {                                                                                                           // 502
		left: Math.max(rect1.left, rect2.left),                                                                              // 503
		right: Math.min(rect1.right, rect2.right),                                                                           // 504
		top: Math.max(rect1.top, rect2.top),                                                                                 // 505
		bottom: Math.min(rect1.bottom, rect2.bottom)                                                                         // 506
	};                                                                                                                    // 507
                                                                                                                       // 508
	if (res.left < res.right && res.top < res.bottom) {                                                                   // 509
		return res;                                                                                                          // 510
	}                                                                                                                     // 511
	return false;                                                                                                         // 512
}                                                                                                                      // 513
                                                                                                                       // 514
                                                                                                                       // 515
// Returns a new point that will have been moved to reside within the given rectangle                                  // 516
function constrainPoint(point, rect) {                                                                                 // 517
	return {                                                                                                              // 518
		left: Math.min(Math.max(point.left, rect.left), rect.right),                                                         // 519
		top: Math.min(Math.max(point.top, rect.top), rect.bottom)                                                            // 520
	};                                                                                                                    // 521
}                                                                                                                      // 522
                                                                                                                       // 523
                                                                                                                       // 524
// Returns a point that is the center of the given rectangle                                                           // 525
function getRectCenter(rect) {                                                                                         // 526
	return {                                                                                                              // 527
		left: (rect.left + rect.right) / 2,                                                                                  // 528
		top: (rect.top + rect.bottom) / 2                                                                                    // 529
	};                                                                                                                    // 530
}                                                                                                                      // 531
                                                                                                                       // 532
                                                                                                                       // 533
// Subtracts point2's coordinates from point1's coordinates, returning a delta                                         // 534
function diffPoints(point1, point2) {                                                                                  // 535
	return {                                                                                                              // 536
		left: point1.left - point2.left,                                                                                     // 537
		top: point1.top - point2.top                                                                                         // 538
	};                                                                                                                    // 539
}                                                                                                                      // 540
                                                                                                                       // 541
                                                                                                                       // 542
/* Object Ordering by Field                                                                                            // 543
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 545
FC.parseFieldSpecs = parseFieldSpecs;                                                                                  // 546
FC.compareByFieldSpecs = compareByFieldSpecs;                                                                          // 547
FC.compareByFieldSpec = compareByFieldSpec;                                                                            // 548
FC.flexibleCompare = flexibleCompare;                                                                                  // 549
                                                                                                                       // 550
                                                                                                                       // 551
function parseFieldSpecs(input) {                                                                                      // 552
	var specs = [];                                                                                                       // 553
	var tokens = [];                                                                                                      // 554
	var i, token;                                                                                                         // 555
                                                                                                                       // 556
	if (typeof input === 'string') {                                                                                      // 557
		tokens = input.split(/\s*,\s*/);                                                                                     // 558
	}                                                                                                                     // 559
	else if (typeof input === 'function') {                                                                               // 560
		tokens = [ input ];                                                                                                  // 561
	}                                                                                                                     // 562
	else if ($.isArray(input)) {                                                                                          // 563
		tokens = input;                                                                                                      // 564
	}                                                                                                                     // 565
                                                                                                                       // 566
	for (i = 0; i < tokens.length; i++) {                                                                                 // 567
		token = tokens[i];                                                                                                   // 568
                                                                                                                       // 569
		if (typeof token === 'string') {                                                                                     // 570
			specs.push(                                                                                                         // 571
				token.charAt(0) == '-' ?                                                                                           // 572
					{ field: token.substring(1), order: -1 } :                                                                        // 573
					{ field: token, order: 1 }                                                                                        // 574
			);                                                                                                                  // 575
		}                                                                                                                    // 576
		else if (typeof token === 'function') {                                                                              // 577
			specs.push({ func: token });                                                                                        // 578
		}                                                                                                                    // 579
	}                                                                                                                     // 580
                                                                                                                       // 581
	return specs;                                                                                                         // 582
}                                                                                                                      // 583
                                                                                                                       // 584
                                                                                                                       // 585
function compareByFieldSpecs(obj1, obj2, fieldSpecs) {                                                                 // 586
	var i;                                                                                                                // 587
	var cmp;                                                                                                              // 588
                                                                                                                       // 589
	for (i = 0; i < fieldSpecs.length; i++) {                                                                             // 590
		cmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i]);                                                                 // 591
		if (cmp) {                                                                                                           // 592
			return cmp;                                                                                                         // 593
		}                                                                                                                    // 594
	}                                                                                                                     // 595
                                                                                                                       // 596
	return 0;                                                                                                             // 597
}                                                                                                                      // 598
                                                                                                                       // 599
                                                                                                                       // 600
function compareByFieldSpec(obj1, obj2, fieldSpec) {                                                                   // 601
	if (fieldSpec.func) {                                                                                                 // 602
		return fieldSpec.func(obj1, obj2);                                                                                   // 603
	}                                                                                                                     // 604
	return flexibleCompare(obj1[fieldSpec.field], obj2[fieldSpec.field]) *                                                // 605
		(fieldSpec.order || 1);                                                                                              // 606
}                                                                                                                      // 607
                                                                                                                       // 608
                                                                                                                       // 609
function flexibleCompare(a, b) {                                                                                       // 610
	if (!a && !b) {                                                                                                       // 611
		return 0;                                                                                                            // 612
	}                                                                                                                     // 613
	if (b == null) {                                                                                                      // 614
		return -1;                                                                                                           // 615
	}                                                                                                                     // 616
	if (a == null) {                                                                                                      // 617
		return 1;                                                                                                            // 618
	}                                                                                                                     // 619
	if ($.type(a) === 'string' || $.type(b) === 'string') {                                                               // 620
		return String(a).localeCompare(String(b));                                                                           // 621
	}                                                                                                                     // 622
	return a - b;                                                                                                         // 623
}                                                                                                                      // 624
                                                                                                                       // 625
                                                                                                                       // 626
/* FullCalendar-specific Misc Utilities                                                                                // 627
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 629
                                                                                                                       // 630
// Computes the intersection of the two ranges. Returns undefined if no intersection.                                  // 631
// Expects all dates to be normalized to the same timezone beforehand.                                                 // 632
// TODO: move to date section?                                                                                         // 633
function intersectRanges(subjectRange, constraintRange) {                                                              // 634
	var subjectStart = subjectRange.start;                                                                                // 635
	var subjectEnd = subjectRange.end;                                                                                    // 636
	var constraintStart = constraintRange.start;                                                                          // 637
	var constraintEnd = constraintRange.end;                                                                              // 638
	var segStart, segEnd;                                                                                                 // 639
	var isStart, isEnd;                                                                                                   // 640
                                                                                                                       // 641
	if (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?                              // 642
                                                                                                                       // 643
		if (subjectStart >= constraintStart) {                                                                               // 644
			segStart = subjectStart.clone();                                                                                    // 645
			isStart = true;                                                                                                     // 646
		}                                                                                                                    // 647
		else {                                                                                                               // 648
			segStart = constraintStart.clone();                                                                                 // 649
			isStart =  false;                                                                                                   // 650
		}                                                                                                                    // 651
                                                                                                                       // 652
		if (subjectEnd <= constraintEnd) {                                                                                   // 653
			segEnd = subjectEnd.clone();                                                                                        // 654
			isEnd = true;                                                                                                       // 655
		}                                                                                                                    // 656
		else {                                                                                                               // 657
			segEnd = constraintEnd.clone();                                                                                     // 658
			isEnd = false;                                                                                                      // 659
		}                                                                                                                    // 660
                                                                                                                       // 661
		return {                                                                                                             // 662
			start: segStart,                                                                                                    // 663
			end: segEnd,                                                                                                        // 664
			isStart: isStart,                                                                                                   // 665
			isEnd: isEnd                                                                                                        // 666
		};                                                                                                                   // 667
	}                                                                                                                     // 668
}                                                                                                                      // 669
                                                                                                                       // 670
                                                                                                                       // 671
/* Date Utilities                                                                                                      // 672
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 674
FC.computeIntervalUnit = computeIntervalUnit;                                                                          // 675
FC.divideRangeByDuration = divideRangeByDuration;                                                                      // 676
FC.divideDurationByDuration = divideDurationByDuration;                                                                // 677
FC.multiplyDuration = multiplyDuration;                                                                                // 678
FC.durationHasTime = durationHasTime;                                                                                  // 679
                                                                                                                       // 680
var dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];                                                      // 681
var intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];                     // 682
                                                                                                                       // 683
                                                                                                                       // 684
// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.                  // 685
// Moments will have their timezones normalized.                                                                       // 686
function diffDayTime(a, b) {                                                                                           // 687
	return moment.duration({                                                                                              // 688
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),                                                     // 689
		ms: a.time() - b.time() // time-of-day from day start. disregards timezone                                           // 690
	});                                                                                                                   // 691
}                                                                                                                      // 692
                                                                                                                       // 693
                                                                                                                       // 694
// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.                // 695
function diffDay(a, b) {                                                                                               // 696
	return moment.duration({                                                                                              // 697
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days')                                                      // 698
	});                                                                                                                   // 699
}                                                                                                                      // 700
                                                                                                                       // 701
                                                                                                                       // 702
// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.           // 703
function diffByUnit(a, b, unit) {                                                                                      // 704
	return moment.duration(                                                                                               // 705
		Math.round(a.diff(b, unit, true)), // returnFloat=true                                                               // 706
		unit                                                                                                                 // 707
	);                                                                                                                    // 708
}                                                                                                                      // 709
                                                                                                                       // 710
                                                                                                                       // 711
// Computes the unit name of the largest whole-unit period of time.                                                    // 712
// For example, 48 hours will be "days" whereas 49 hours will be "hours".                                              // 713
// Accepts start/end, a range object, or an original duration object.                                                  // 714
function computeIntervalUnit(start, end) {                                                                             // 715
	var i, unit;                                                                                                          // 716
	var val;                                                                                                              // 717
                                                                                                                       // 718
	for (i = 0; i < intervalUnits.length; i++) {                                                                          // 719
		unit = intervalUnits[i];                                                                                             // 720
		val = computeRangeAs(unit, start, end);                                                                              // 721
                                                                                                                       // 722
		if (val >= 1 && isInt(val)) {                                                                                        // 723
			break;                                                                                                              // 724
		}                                                                                                                    // 725
	}                                                                                                                     // 726
                                                                                                                       // 727
	return unit; // will be "milliseconds" if nothing else matches                                                        // 728
}                                                                                                                      // 729
                                                                                                                       // 730
                                                                                                                       // 731
// Computes the number of units (like "hours") in the given range.                                                     // 732
// Range can be a {start,end} object, separate start/end args, or a Duration.                                          // 733
// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling                 // 734
// of month-diffing logic (which tends to vary from version to version).                                               // 735
function computeRangeAs(unit, start, end) {                                                                            // 736
                                                                                                                       // 737
	if (end != null) { // given start, end                                                                                // 738
		return end.diff(start, unit, true);                                                                                  // 739
	}                                                                                                                     // 740
	else if (moment.isDuration(start)) { // given duration                                                                // 741
		return start.as(unit);                                                                                               // 742
	}                                                                                                                     // 743
	else { // given { start, end } range object                                                                           // 744
		return start.end.diff(start.start, unit, true);                                                                      // 745
	}                                                                                                                     // 746
}                                                                                                                      // 747
                                                                                                                       // 748
                                                                                                                       // 749
// Intelligently divides a range (specified by a start/end params) by a duration                                       // 750
function divideRangeByDuration(start, end, dur) {                                                                      // 751
	var months;                                                                                                           // 752
                                                                                                                       // 753
	if (durationHasTime(dur)) {                                                                                           // 754
		return (end - start) / dur;                                                                                          // 755
	}                                                                                                                     // 756
	months = dur.asMonths();                                                                                              // 757
	if (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 758
		return end.diff(start, 'months', true) / months;                                                                     // 759
	}                                                                                                                     // 760
	return end.diff(start, 'days', true) / dur.asDays();                                                                  // 761
}                                                                                                                      // 762
                                                                                                                       // 763
                                                                                                                       // 764
// Intelligently divides one duration by another                                                                       // 765
function divideDurationByDuration(dur1, dur2) {                                                                        // 766
	var months1, months2;                                                                                                 // 767
                                                                                                                       // 768
	if (durationHasTime(dur1) || durationHasTime(dur2)) {                                                                 // 769
		return dur1 / dur2;                                                                                                  // 770
	}                                                                                                                     // 771
	months1 = dur1.asMonths();                                                                                            // 772
	months2 = dur2.asMonths();                                                                                            // 773
	if (                                                                                                                  // 774
		Math.abs(months1) >= 1 && isInt(months1) &&                                                                          // 775
		Math.abs(months2) >= 1 && isInt(months2)                                                                             // 776
	) {                                                                                                                   // 777
		return months1 / months2;                                                                                            // 778
	}                                                                                                                     // 779
	return dur1.asDays() / dur2.asDays();                                                                                 // 780
}                                                                                                                      // 781
                                                                                                                       // 782
                                                                                                                       // 783
// Intelligently multiplies a duration by a number                                                                     // 784
function multiplyDuration(dur, n) {                                                                                    // 785
	var months;                                                                                                           // 786
                                                                                                                       // 787
	if (durationHasTime(dur)) {                                                                                           // 788
		return moment.duration(dur * n);                                                                                     // 789
	}                                                                                                                     // 790
	months = dur.asMonths();                                                                                              // 791
	if (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 792
		return moment.duration({ months: months * n });                                                                      // 793
	}                                                                                                                     // 794
	return moment.duration({ days: dur.asDays() * n });                                                                   // 795
}                                                                                                                      // 796
                                                                                                                       // 797
                                                                                                                       // 798
// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)                    // 799
function durationHasTime(dur) {                                                                                        // 800
	return Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());                                  // 801
}                                                                                                                      // 802
                                                                                                                       // 803
                                                                                                                       // 804
function isNativeDate(input) {                                                                                         // 805
	return  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;                           // 806
}                                                                                                                      // 807
                                                                                                                       // 808
                                                                                                                       // 809
// Returns a boolean about whether the given input is a time string, like "06:40:00" or "06:00"                        // 810
function isTimeString(str) {                                                                                           // 811
	return /^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(str);                                                                 // 812
}                                                                                                                      // 813
                                                                                                                       // 814
                                                                                                                       // 815
/* Logging and Debug                                                                                                   // 816
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 818
FC.log = function() {                                                                                                  // 819
	var console = window.console;                                                                                         // 820
                                                                                                                       // 821
	if (console && console.log) {                                                                                         // 822
		return console.log.apply(console, arguments);                                                                        // 823
	}                                                                                                                     // 824
};                                                                                                                     // 825
                                                                                                                       // 826
FC.warn = function() {                                                                                                 // 827
	var console = window.console;                                                                                         // 828
                                                                                                                       // 829
	if (console && console.warn) {                                                                                        // 830
		return console.warn.apply(console, arguments);                                                                       // 831
	}                                                                                                                     // 832
	else {                                                                                                                // 833
		return FC.log.apply(FC, arguments);                                                                                  // 834
	}                                                                                                                     // 835
};                                                                                                                     // 836
                                                                                                                       // 837
                                                                                                                       // 838
/* General Utilities                                                                                                   // 839
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 841
var hasOwnPropMethod = {}.hasOwnProperty;                                                                              // 842
                                                                                                                       // 843
                                                                                                                       // 844
// Merges an array of objects into a single object.                                                                    // 845
// The second argument allows for an array of property names who's object values will be merged together.              // 846
function mergeProps(propObjs, complexProps) {                                                                          // 847
	var dest = {};                                                                                                        // 848
	var i, name;                                                                                                          // 849
	var complexObjs;                                                                                                      // 850
	var j, val;                                                                                                           // 851
	var props;                                                                                                            // 852
                                                                                                                       // 853
	if (complexProps) {                                                                                                   // 854
		for (i = 0; i < complexProps.length; i++) {                                                                          // 855
			name = complexProps[i];                                                                                             // 856
			complexObjs = [];                                                                                                   // 857
                                                                                                                       // 858
			// collect the trailing object values, stopping when a non-object is discovered                                     // 859
			for (j = propObjs.length - 1; j >= 0; j--) {                                                                        // 860
				val = propObjs[j][name];                                                                                           // 861
                                                                                                                       // 862
				if (typeof val === 'object') {                                                                                     // 863
					complexObjs.unshift(val);                                                                                         // 864
				}                                                                                                                  // 865
				else if (val !== undefined) {                                                                                      // 866
					dest[name] = val; // if there were no objects, this value will be used                                            // 867
					break;                                                                                                            // 868
				}                                                                                                                  // 869
			}                                                                                                                   // 870
                                                                                                                       // 871
			// if the trailing values were objects, use the merged value                                                        // 872
			if (complexObjs.length) {                                                                                           // 873
				dest[name] = mergeProps(complexObjs);                                                                              // 874
			}                                                                                                                   // 875
		}                                                                                                                    // 876
	}                                                                                                                     // 877
                                                                                                                       // 878
	// copy values into the destination, going from last to first                                                         // 879
	for (i = propObjs.length - 1; i >= 0; i--) {                                                                          // 880
		props = propObjs[i];                                                                                                 // 881
                                                                                                                       // 882
		for (name in props) {                                                                                                // 883
			if (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign                    // 884
				dest[name] = props[name];                                                                                          // 885
			}                                                                                                                   // 886
		}                                                                                                                    // 887
	}                                                                                                                     // 888
                                                                                                                       // 889
	return dest;                                                                                                          // 890
}                                                                                                                      // 891
                                                                                                                       // 892
                                                                                                                       // 893
// Create an object that has the given prototype. Just like Object.create                                              // 894
function createObject(proto) {                                                                                         // 895
	var f = function() {};                                                                                                // 896
	f.prototype = proto;                                                                                                  // 897
	return new f();                                                                                                       // 898
}                                                                                                                      // 899
                                                                                                                       // 900
                                                                                                                       // 901
function copyOwnProps(src, dest) {                                                                                     // 902
	for (var name in src) {                                                                                               // 903
		if (hasOwnProp(src, name)) {                                                                                         // 904
			dest[name] = src[name];                                                                                             // 905
		}                                                                                                                    // 906
	}                                                                                                                     // 907
}                                                                                                                      // 908
                                                                                                                       // 909
                                                                                                                       // 910
// Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:                // 911
// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug                         // 912
function copyNativeMethods(src, dest) {                                                                                // 913
	var names = [ 'constructor', 'toString', 'valueOf' ];                                                                 // 914
	var i, name;                                                                                                          // 915
                                                                                                                       // 916
	for (i = 0; i < names.length; i++) {                                                                                  // 917
		name = names[i];                                                                                                     // 918
                                                                                                                       // 919
		if (src[name] !== Object.prototype[name]) {                                                                          // 920
			dest[name] = src[name];                                                                                             // 921
		}                                                                                                                    // 922
	}                                                                                                                     // 923
}                                                                                                                      // 924
                                                                                                                       // 925
                                                                                                                       // 926
function hasOwnProp(obj, name) {                                                                                       // 927
	return hasOwnPropMethod.call(obj, name);                                                                              // 928
}                                                                                                                      // 929
                                                                                                                       // 930
                                                                                                                       // 931
// Is the given value a non-object non-function value?                                                                 // 932
function isAtomic(val) {                                                                                               // 933
	return /undefined|null|boolean|number|string/.test($.type(val));                                                      // 934
}                                                                                                                      // 935
                                                                                                                       // 936
                                                                                                                       // 937
function applyAll(functions, thisObj, args) {                                                                          // 938
	if ($.isFunction(functions)) {                                                                                        // 939
		functions = [ functions ];                                                                                           // 940
	}                                                                                                                     // 941
	if (functions) {                                                                                                      // 942
		var i;                                                                                                               // 943
		var ret;                                                                                                             // 944
		for (i=0; i<functions.length; i++) {                                                                                 // 945
			ret = functions[i].apply(thisObj, args) || ret;                                                                     // 946
		}                                                                                                                    // 947
		return ret;                                                                                                          // 948
	}                                                                                                                     // 949
}                                                                                                                      // 950
                                                                                                                       // 951
                                                                                                                       // 952
function firstDefined() {                                                                                              // 953
	for (var i=0; i<arguments.length; i++) {                                                                              // 954
		if (arguments[i] !== undefined) {                                                                                    // 955
			return arguments[i];                                                                                                // 956
		}                                                                                                                    // 957
	}                                                                                                                     // 958
}                                                                                                                      // 959
                                                                                                                       // 960
                                                                                                                       // 961
function htmlEscape(s) {                                                                                               // 962
	return (s + '').replace(/&/g, '&amp;')                                                                                // 963
		.replace(/</g, '&lt;')                                                                                               // 964
		.replace(/>/g, '&gt;')                                                                                               // 965
		.replace(/'/g, '&#039;')                                                                                             // 966
		.replace(/"/g, '&quot;')                                                                                             // 967
		.replace(/\n/g, '<br />');                                                                                           // 968
}                                                                                                                      // 969
                                                                                                                       // 970
                                                                                                                       // 971
function stripHtmlEntities(text) {                                                                                     // 972
	return text.replace(/&.*?;/g, '');                                                                                    // 973
}                                                                                                                      // 974
                                                                                                                       // 975
                                                                                                                       // 976
// Given a hash of CSS properties, returns a string of CSS.                                                            // 977
// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.           // 978
function cssToStr(cssProps) {                                                                                          // 979
	var statements = [];                                                                                                  // 980
                                                                                                                       // 981
	$.each(cssProps, function(name, val) {                                                                                // 982
		if (val != null) {                                                                                                   // 983
			statements.push(name + ':' + val);                                                                                  // 984
		}                                                                                                                    // 985
	});                                                                                                                   // 986
                                                                                                                       // 987
	return statements.join(';');                                                                                          // 988
}                                                                                                                      // 989
                                                                                                                       // 990
                                                                                                                       // 991
function capitaliseFirstLetter(str) {                                                                                  // 992
	return str.charAt(0).toUpperCase() + str.slice(1);                                                                    // 993
}                                                                                                                      // 994
                                                                                                                       // 995
                                                                                                                       // 996
function compareNumbers(a, b) { // for .sort()                                                                         // 997
	return a - b;                                                                                                         // 998
}                                                                                                                      // 999
                                                                                                                       // 1000
                                                                                                                       // 1001
function isInt(n) {                                                                                                    // 1002
	return n % 1 === 0;                                                                                                   // 1003
}                                                                                                                      // 1004
                                                                                                                       // 1005
                                                                                                                       // 1006
// Returns a method bound to the given object context.                                                                 // 1007
// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with   // 1008
// different contexts as identical when binding/unbinding events.                                                      // 1009
function proxy(obj, methodName) {                                                                                      // 1010
	var method = obj[methodName];                                                                                         // 1011
                                                                                                                       // 1012
	return function() {                                                                                                   // 1013
		return method.apply(obj, arguments);                                                                                 // 1014
	};                                                                                                                    // 1015
}                                                                                                                      // 1016
                                                                                                                       // 1017
                                                                                                                       // 1018
// Returns a function, that, as long as it continues to be invoked, will not                                           // 1019
// be triggered. The function will be called after it stops being called for                                           // 1020
// N milliseconds. If `immediate` is passed, trigger the function on the                                               // 1021
// leading edge, instead of the trailing.                                                                              // 1022
// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714                                               // 1023
function debounce(func, wait, immediate) {                                                                             // 1024
	var timeout, args, context, timestamp, result;                                                                        // 1025
                                                                                                                       // 1026
	var later = function() {                                                                                              // 1027
		var last = +new Date() - timestamp;                                                                                  // 1028
		if (last < wait) {                                                                                                   // 1029
			timeout = setTimeout(later, wait - last);                                                                           // 1030
		}                                                                                                                    // 1031
		else {                                                                                                               // 1032
			timeout = null;                                                                                                     // 1033
			if (!immediate) {                                                                                                   // 1034
				result = func.apply(context, args);                                                                                // 1035
				context = args = null;                                                                                             // 1036
			}                                                                                                                   // 1037
		}                                                                                                                    // 1038
	};                                                                                                                    // 1039
                                                                                                                       // 1040
	return function() {                                                                                                   // 1041
		context = this;                                                                                                      // 1042
		args = arguments;                                                                                                    // 1043
		timestamp = +new Date();                                                                                             // 1044
		var callNow = immediate && !timeout;                                                                                 // 1045
		if (!timeout) {                                                                                                      // 1046
			timeout = setTimeout(later, wait);                                                                                  // 1047
		}                                                                                                                    // 1048
		if (callNow) {                                                                                                       // 1049
			result = func.apply(context, args);                                                                                 // 1050
			context = args = null;                                                                                              // 1051
		}                                                                                                                    // 1052
		return result;                                                                                                       // 1053
	};                                                                                                                    // 1054
}                                                                                                                      // 1055
                                                                                                                       // 1056
;;                                                                                                                     // 1057
                                                                                                                       // 1058
var ambigDateOfMonthRegex = /^\s*\d{4}-\d\d$/;                                                                         // 1059
var ambigTimeOrZoneRegex =                                                                                             // 1060
	/^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/;                     // 1061
var newMomentProto = moment.fn; // where we will attach our new methods                                                // 1062
var oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods                                  // 1063
var allowValueOptimization;                                                                                            // 1064
var setUTCValues; // function defined below                                                                            // 1065
var setLocalValues; // function defined below                                                                          // 1066
                                                                                                                       // 1067
                                                                                                                       // 1068
// Creating                                                                                                            // 1069
// -------------------------------------------------------------------------------------------------                   // 1070
                                                                                                                       // 1071
// Creates a new moment, similar to the vanilla moment(...) constructor, but with                                      // 1072
// extra features (ambiguous time, enhanced formatting). When given an existing moment,                                // 1073
// it will function as a clone (and retain the zone of the moment). Anything else will                                 // 1074
// result in a moment in the local zone.                                                                               // 1075
FC.moment = function() {                                                                                               // 1076
	return makeMoment(arguments);                                                                                         // 1077
};                                                                                                                     // 1078
                                                                                                                       // 1079
// Sames as FC.moment, but forces the resulting moment to be in the UTC timezone.                                      // 1080
FC.moment.utc = function() {                                                                                           // 1081
	var mom = makeMoment(arguments, true);                                                                                // 1082
                                                                                                                       // 1083
	// Force it into UTC because makeMoment doesn't guarantee it                                                          // 1084
	// (if given a pre-existing moment for example)                                                                       // 1085
	if (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone                                               // 1086
		mom.utc();                                                                                                           // 1087
	}                                                                                                                     // 1088
                                                                                                                       // 1089
	return mom;                                                                                                           // 1090
};                                                                                                                     // 1091
                                                                                                                       // 1092
// Same as FC.moment, but when given an ISO8601 string, the timezone offset is preserved.                              // 1093
// ISO8601 strings with no timezone offset will become ambiguously zoned.                                              // 1094
FC.moment.parseZone = function() {                                                                                     // 1095
	return makeMoment(arguments, true, true);                                                                             // 1096
};                                                                                                                     // 1097
                                                                                                                       // 1098
// Builds an enhanced moment from args. When given an existing moment, it clones. When given a                         // 1099
// native Date, or called with no arguments (the current time), the resulting moment will be local.                    // 1100
// Anything else needs to be "parsed" (a string or an array), and will be affected by:                                 // 1101
//    parseAsUTC - if there is no zone information, should we parse the input in UTC?                                  // 1102
//    parseZone - if there is zone information, should we force the zone of the moment?                                // 1103
function makeMoment(args, parseAsUTC, parseZone) {                                                                     // 1104
	var input = args[0];                                                                                                  // 1105
	var isSingleString = args.length == 1 && typeof input === 'string';                                                   // 1106
	var isAmbigTime;                                                                                                      // 1107
	var isAmbigZone;                                                                                                      // 1108
	var ambigMatch;                                                                                                       // 1109
	var mom;                                                                                                              // 1110
                                                                                                                       // 1111
	if (moment.isMoment(input)) {                                                                                         // 1112
		mom = moment.apply(null, args); // clone it                                                                          // 1113
		transferAmbigs(input, mom); // the ambig flags weren't transfered with the clone                                     // 1114
	}                                                                                                                     // 1115
	else if (isNativeDate(input) || input === undefined) {                                                                // 1116
		mom = moment.apply(null, args); // will be local                                                                     // 1117
	}                                                                                                                     // 1118
	else { // "parsing" is required                                                                                       // 1119
		isAmbigTime = false;                                                                                                 // 1120
		isAmbigZone = false;                                                                                                 // 1121
                                                                                                                       // 1122
		if (isSingleString) {                                                                                                // 1123
			if (ambigDateOfMonthRegex.test(input)) {                                                                            // 1124
				// accept strings like '2014-05', but convert to the first of the month                                            // 1125
				input += '-01';                                                                                                    // 1126
				args = [ input ]; // for when we pass it on to moment's constructor                                                // 1127
				isAmbigTime = true;                                                                                                // 1128
				isAmbigZone = true;                                                                                                // 1129
			}                                                                                                                   // 1130
			else if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {                                                         // 1131
				isAmbigTime = !ambigMatch[5]; // no time part?                                                                     // 1132
				isAmbigZone = true;                                                                                                // 1133
			}                                                                                                                   // 1134
		}                                                                                                                    // 1135
		else if ($.isArray(input)) {                                                                                         // 1136
			// arrays have no timezone information, so assume ambiguous zone                                                    // 1137
			isAmbigZone = true;                                                                                                 // 1138
		}                                                                                                                    // 1139
		// otherwise, probably a string with a format                                                                        // 1140
                                                                                                                       // 1141
		if (parseAsUTC || isAmbigTime) {                                                                                     // 1142
			mom = moment.utc.apply(moment, args);                                                                               // 1143
		}                                                                                                                    // 1144
		else {                                                                                                               // 1145
			mom = moment.apply(null, args);                                                                                     // 1146
		}                                                                                                                    // 1147
                                                                                                                       // 1148
		if (isAmbigTime) {                                                                                                   // 1149
			mom._ambigTime = true;                                                                                              // 1150
			mom._ambigZone = true; // ambiguous time always means ambiguous zone                                                // 1151
		}                                                                                                                    // 1152
		else if (parseZone) { // let's record the inputted zone somehow                                                      // 1153
			if (isAmbigZone) {                                                                                                  // 1154
				mom._ambigZone = true;                                                                                             // 1155
			}                                                                                                                   // 1156
			else if (isSingleString) {                                                                                          // 1157
				if (mom.utcOffset) {                                                                                               // 1158
					mom.utcOffset(input); // if not a valid zone, will assign UTC                                                     // 1159
				}                                                                                                                  // 1160
				else {                                                                                                             // 1161
					mom.zone(input); // for moment-pre-2.9                                                                            // 1162
				}                                                                                                                  // 1163
			}                                                                                                                   // 1164
		}                                                                                                                    // 1165
	}                                                                                                                     // 1166
                                                                                                                       // 1167
	mom._fullCalendar = true; // flag for extended functionality                                                          // 1168
                                                                                                                       // 1169
	return mom;                                                                                                           // 1170
}                                                                                                                      // 1171
                                                                                                                       // 1172
                                                                                                                       // 1173
// A clone method that works with the flags related to our enhanced functionality.                                     // 1174
// In the future, use moment.momentProperties                                                                          // 1175
newMomentProto.clone = function() {                                                                                    // 1176
	var mom = oldMomentProto.clone.apply(this, arguments);                                                                // 1177
                                                                                                                       // 1178
	// these flags weren't transfered with the clone                                                                      // 1179
	transferAmbigs(this, mom);                                                                                            // 1180
	if (this._fullCalendar) {                                                                                             // 1181
		mom._fullCalendar = true;                                                                                            // 1182
	}                                                                                                                     // 1183
                                                                                                                       // 1184
	return mom;                                                                                                           // 1185
};                                                                                                                     // 1186
                                                                                                                       // 1187
                                                                                                                       // 1188
// Week Number                                                                                                         // 1189
// -------------------------------------------------------------------------------------------------                   // 1190
                                                                                                                       // 1191
                                                                                                                       // 1192
// Returns the week number, considering the locale's custom week number calcuation                                     // 1193
// `weeks` is an alias for `week`                                                                                      // 1194
newMomentProto.week = newMomentProto.weeks = function(input) {                                                         // 1195
	var weekCalc = (this._locale || this._lang) // works pre-moment-2.8                                                   // 1196
		._fullCalendar_weekCalc;                                                                                             // 1197
                                                                                                                       // 1198
	if (input == null && typeof weekCalc === 'function') { // custom function only works for getter                       // 1199
		return weekCalc(this);                                                                                               // 1200
	}                                                                                                                     // 1201
	else if (weekCalc === 'ISO') {                                                                                        // 1202
		return oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter                                           // 1203
	}                                                                                                                     // 1204
                                                                                                                       // 1205
	return oldMomentProto.week.apply(this, arguments); // local getter/setter                                             // 1206
};                                                                                                                     // 1207
                                                                                                                       // 1208
                                                                                                                       // 1209
// Time-of-day                                                                                                         // 1210
// -------------------------------------------------------------------------------------------------                   // 1211
                                                                                                                       // 1212
// GETTER                                                                                                              // 1213
// Returns a Duration with the hours/minutes/seconds/ms values of the moment.                                          // 1214
// If the moment has an ambiguous time, a duration of 00:00 will be returned.                                          // 1215
//                                                                                                                     // 1216
// SETTER                                                                                                              // 1217
// You can supply a Duration, a Moment, or a Duration-like argument.                                                   // 1218
// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.                           // 1219
newMomentProto.time = function(time) {                                                                                 // 1220
                                                                                                                       // 1221
	// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.                  // 1222
	// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.    // 1223
	if (!this._fullCalendar) {                                                                                            // 1224
		return oldMomentProto.time.apply(this, arguments);                                                                   // 1225
	}                                                                                                                     // 1226
                                                                                                                       // 1227
	if (time == null) { // getter                                                                                         // 1228
		return moment.duration({                                                                                             // 1229
			hours: this.hours(),                                                                                                // 1230
			minutes: this.minutes(),                                                                                            // 1231
			seconds: this.seconds(),                                                                                            // 1232
			milliseconds: this.milliseconds()                                                                                   // 1233
		});                                                                                                                  // 1234
	}                                                                                                                     // 1235
	else { // setter                                                                                                      // 1236
                                                                                                                       // 1237
		this._ambigTime = false; // mark that the moment now has a time                                                      // 1238
                                                                                                                       // 1239
		if (!moment.isDuration(time) && !moment.isMoment(time)) {                                                            // 1240
			time = moment.duration(time);                                                                                       // 1241
		}                                                                                                                    // 1242
                                                                                                                       // 1243
		// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).                                   // 1244
		// Only for Duration times, not Moment times.                                                                        // 1245
		var dayHours = 0;                                                                                                    // 1246
		if (moment.isDuration(time)) {                                                                                       // 1247
			dayHours = Math.floor(time.asDays()) * 24;                                                                          // 1248
		}                                                                                                                    // 1249
                                                                                                                       // 1250
		// We need to set the individual fields.                                                                             // 1251
		// Can't use startOf('day') then add duration. In case of DST at start of day.                                       // 1252
		return this.hours(dayHours + time.hours())                                                                           // 1253
			.minutes(time.minutes())                                                                                            // 1254
			.seconds(time.seconds())                                                                                            // 1255
			.milliseconds(time.milliseconds());                                                                                 // 1256
	}                                                                                                                     // 1257
};                                                                                                                     // 1258
                                                                                                                       // 1259
// Converts the moment to UTC, stripping out its time-of-day and timezone offset,                                      // 1260
// but preserving its YMD. A moment with a stripped time will display no time                                          // 1261
// nor timezone offset when .format() is called.                                                                       // 1262
newMomentProto.stripTime = function() {                                                                                // 1263
	var a;                                                                                                                // 1264
                                                                                                                       // 1265
	if (!this._ambigTime) {                                                                                               // 1266
                                                                                                                       // 1267
		// get the values before any conversion happens                                                                      // 1268
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1269
                                                                                                                       // 1270
		// TODO: use keepLocalTime in the future                                                                             // 1271
		this.utc(); // set the internal UTC flag (will clear the ambig flags)                                                // 1272
		setUTCValues(this, a.slice(0, 3)); // set the year/month/date. time will be zero                                     // 1273
                                                                                                                       // 1274
		// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1275
		// which clears all ambig flags. Same with setUTCValues with moment-timezone.                                        // 1276
		this._ambigTime = true;                                                                                              // 1277
		this._ambigZone = true; // if ambiguous time, also ambiguous timezone offset                                         // 1278
	}                                                                                                                     // 1279
                                                                                                                       // 1280
	return this; // for chaining                                                                                          // 1281
};                                                                                                                     // 1282
                                                                                                                       // 1283
// Returns if the moment has a non-ambiguous time (boolean)                                                            // 1284
newMomentProto.hasTime = function() {                                                                                  // 1285
	return !this._ambigTime;                                                                                              // 1286
};                                                                                                                     // 1287
                                                                                                                       // 1288
                                                                                                                       // 1289
// Timezone                                                                                                            // 1290
// -------------------------------------------------------------------------------------------------                   // 1291
                                                                                                                       // 1292
// Converts the moment to UTC, stripping out its timezone offset, but preserving its                                   // 1293
// YMD and time-of-day. A moment with a stripped timezone offset will display no                                       // 1294
// timezone offset when .format() is called.                                                                           // 1295
// TODO: look into Moment's keepLocalTime functionality                                                                // 1296
newMomentProto.stripZone = function() {                                                                                // 1297
	var a, wasAmbigTime;                                                                                                  // 1298
                                                                                                                       // 1299
	if (!this._ambigZone) {                                                                                               // 1300
                                                                                                                       // 1301
		// get the values before any conversion happens                                                                      // 1302
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1303
		wasAmbigTime = this._ambigTime;                                                                                      // 1304
                                                                                                                       // 1305
		this.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)                // 1306
		setUTCValues(this, a); // will set the year/month/date/hours/minutes/seconds/ms                                      // 1307
                                                                                                                       // 1308
		// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore                       // 1309
		this._ambigTime = wasAmbigTime || false;                                                                             // 1310
                                                                                                                       // 1311
		// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1312
		// which clears the ambig flags. Same with setUTCValues with moment-timezone.                                        // 1313
		this._ambigZone = true;                                                                                              // 1314
	}                                                                                                                     // 1315
                                                                                                                       // 1316
	return this; // for chaining                                                                                          // 1317
};                                                                                                                     // 1318
                                                                                                                       // 1319
// Returns of the moment has a non-ambiguous timezone offset (boolean)                                                 // 1320
newMomentProto.hasZone = function() {                                                                                  // 1321
	return !this._ambigZone;                                                                                              // 1322
};                                                                                                                     // 1323
                                                                                                                       // 1324
                                                                                                                       // 1325
// this method implicitly marks a zone                                                                                 // 1326
newMomentProto.local = function() {                                                                                    // 1327
	var a = this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array                                       // 1328
	var wasAmbigZone = this._ambigZone;                                                                                   // 1329
                                                                                                                       // 1330
	oldMomentProto.local.apply(this, arguments);                                                                          // 1331
                                                                                                                       // 1332
	// ensure non-ambiguous                                                                                               // 1333
	// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals                    // 1334
	this._ambigTime = false;                                                                                              // 1335
	this._ambigZone = false;                                                                                              // 1336
                                                                                                                       // 1337
	if (wasAmbigZone) {                                                                                                   // 1338
		// If the moment was ambiguously zoned, the date fields were stored as UTC.                                          // 1339
		// We want to preserve these, but in local time.                                                                     // 1340
		// TODO: look into Moment's keepLocalTime functionality                                                              // 1341
		setLocalValues(this, a);                                                                                             // 1342
	}                                                                                                                     // 1343
                                                                                                                       // 1344
	return this; // for chaining                                                                                          // 1345
};                                                                                                                     // 1346
                                                                                                                       // 1347
                                                                                                                       // 1348
// implicitly marks a zone                                                                                             // 1349
newMomentProto.utc = function() {                                                                                      // 1350
	oldMomentProto.utc.apply(this, arguments);                                                                            // 1351
                                                                                                                       // 1352
	// ensure non-ambiguous                                                                                               // 1353
	// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals                      // 1354
	this._ambigTime = false;                                                                                              // 1355
	this._ambigZone = false;                                                                                              // 1356
                                                                                                                       // 1357
	return this;                                                                                                          // 1358
};                                                                                                                     // 1359
                                                                                                                       // 1360
                                                                                                                       // 1361
// methods for arbitrarily manipulating timezone offset.                                                               // 1362
// should clear time/zone ambiguity when called.                                                                       // 1363
$.each([                                                                                                               // 1364
	'zone', // only in moment-pre-2.9. deprecated afterwards                                                              // 1365
	'utcOffset'                                                                                                           // 1366
], function(i, name) {                                                                                                 // 1367
	if (oldMomentProto[name]) { // original method exists?                                                                // 1368
                                                                                                                       // 1369
		// this method implicitly marks a zone (will probably get called upon .utc() and .local())                           // 1370
		newMomentProto[name] = function(tzo) {                                                                               // 1371
                                                                                                                       // 1372
			if (tzo != null) { // setter                                                                                        // 1373
				// these assignments needs to happen before the original zone method is called.                                    // 1374
				// I forget why, something to do with a browser crash.                                                             // 1375
				this._ambigTime = false;                                                                                           // 1376
				this._ambigZone = false;                                                                                           // 1377
			}                                                                                                                   // 1378
                                                                                                                       // 1379
			return oldMomentProto[name].apply(this, arguments);                                                                 // 1380
		};                                                                                                                   // 1381
	}                                                                                                                     // 1382
});                                                                                                                    // 1383
                                                                                                                       // 1384
                                                                                                                       // 1385
// Formatting                                                                                                          // 1386
// -------------------------------------------------------------------------------------------------                   // 1387
                                                                                                                       // 1388
newMomentProto.format = function() {                                                                                   // 1389
	if (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?                        // 1390
		return formatDate(this, arguments[0]); // our extended formatting                                                    // 1391
	}                                                                                                                     // 1392
	if (this._ambigTime) {                                                                                                // 1393
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1394
	}                                                                                                                     // 1395
	if (this._ambigZone) {                                                                                                // 1396
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1397
	}                                                                                                                     // 1398
	return oldMomentProto.format.apply(this, arguments);                                                                  // 1399
};                                                                                                                     // 1400
                                                                                                                       // 1401
newMomentProto.toISOString = function() {                                                                              // 1402
	if (this._ambigTime) {                                                                                                // 1403
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1404
	}                                                                                                                     // 1405
	if (this._ambigZone) {                                                                                                // 1406
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1407
	}                                                                                                                     // 1408
	return oldMomentProto.toISOString.apply(this, arguments);                                                             // 1409
};                                                                                                                     // 1410
                                                                                                                       // 1411
                                                                                                                       // 1412
// Querying                                                                                                            // 1413
// -------------------------------------------------------------------------------------------------                   // 1414
                                                                                                                       // 1415
// Is the moment within the specified range? `end` is exclusive.                                                       // 1416
// FYI, this method is not a standard Moment method, so always do our enhanced logic.                                  // 1417
newMomentProto.isWithin = function(start, end) {                                                                       // 1418
	var a = commonlyAmbiguate([ this, start, end ]);                                                                      // 1419
	return a[0] >= a[1] && a[0] < a[2];                                                                                   // 1420
};                                                                                                                     // 1421
                                                                                                                       // 1422
// When isSame is called with units, timezone ambiguity is normalized before the comparison happens.                   // 1423
// If no units specified, the two moments must be identically the same, with matching ambig flags.                     // 1424
newMomentProto.isSame = function(input, units) {                                                                       // 1425
	var a;                                                                                                                // 1426
                                                                                                                       // 1427
	// only do custom logic if this is an enhanced moment                                                                 // 1428
	if (!this._fullCalendar) {                                                                                            // 1429
		return oldMomentProto.isSame.apply(this, arguments);                                                                 // 1430
	}                                                                                                                     // 1431
                                                                                                                       // 1432
	if (units) {                                                                                                          // 1433
		a = commonlyAmbiguate([ this, input ], true); // normalize timezones but don't erase times                           // 1434
		return oldMomentProto.isSame.call(a[0], a[1], units);                                                                // 1435
	}                                                                                                                     // 1436
	else {                                                                                                                // 1437
		input = FC.moment.parseZone(input); // normalize input                                                               // 1438
		return oldMomentProto.isSame.call(this, input) &&                                                                    // 1439
			Boolean(this._ambigTime) === Boolean(input._ambigTime) &&                                                           // 1440
			Boolean(this._ambigZone) === Boolean(input._ambigZone);                                                             // 1441
	}                                                                                                                     // 1442
};                                                                                                                     // 1443
                                                                                                                       // 1444
// Make these query methods work with ambiguous moments                                                                // 1445
$.each([                                                                                                               // 1446
	'isBefore',                                                                                                           // 1447
	'isAfter'                                                                                                             // 1448
], function(i, methodName) {                                                                                           // 1449
	newMomentProto[methodName] = function(input, units) {                                                                 // 1450
		var a;                                                                                                               // 1451
                                                                                                                       // 1452
		// only do custom logic if this is an enhanced moment                                                                // 1453
		if (!this._fullCalendar) {                                                                                           // 1454
			return oldMomentProto[methodName].apply(this, arguments);                                                           // 1455
		}                                                                                                                    // 1456
                                                                                                                       // 1457
		a = commonlyAmbiguate([ this, input ]);                                                                              // 1458
		return oldMomentProto[methodName].call(a[0], a[1], units);                                                           // 1459
	};                                                                                                                    // 1460
});                                                                                                                    // 1461
                                                                                                                       // 1462
                                                                                                                       // 1463
// Misc Internals                                                                                                      // 1464
// -------------------------------------------------------------------------------------------------                   // 1465
                                                                                                                       // 1466
// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.                      // 1467
// for example, of one moment has ambig time, but not others, all moments will have their time stripped.               // 1468
// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.                                      // 1469
// returns the original moments if no modifications are necessary.                                                     // 1470
function commonlyAmbiguate(inputs, preserveTime) {                                                                     // 1471
	var anyAmbigTime = false;                                                                                             // 1472
	var anyAmbigZone = false;                                                                                             // 1473
	var len = inputs.length;                                                                                              // 1474
	var moms = [];                                                                                                        // 1475
	var i, mom;                                                                                                           // 1476
                                                                                                                       // 1477
	// parse inputs into real moments and query their ambig flags                                                         // 1478
	for (i = 0; i < len; i++) {                                                                                           // 1479
		mom = inputs[i];                                                                                                     // 1480
		if (!moment.isMoment(mom)) {                                                                                         // 1481
			mom = FC.moment.parseZone(mom);                                                                                     // 1482
		}                                                                                                                    // 1483
		anyAmbigTime = anyAmbigTime || mom._ambigTime;                                                                       // 1484
		anyAmbigZone = anyAmbigZone || mom._ambigZone;                                                                       // 1485
		moms.push(mom);                                                                                                      // 1486
	}                                                                                                                     // 1487
                                                                                                                       // 1488
	// strip each moment down to lowest common ambiguity                                                                  // 1489
	// use clones to avoid modifying the original moments                                                                 // 1490
	for (i = 0; i < len; i++) {                                                                                           // 1491
		mom = moms[i];                                                                                                       // 1492
		if (!preserveTime && anyAmbigTime && !mom._ambigTime) {                                                              // 1493
			moms[i] = mom.clone().stripTime();                                                                                  // 1494
		}                                                                                                                    // 1495
		else if (anyAmbigZone && !mom._ambigZone) {                                                                          // 1496
			moms[i] = mom.clone().stripZone();                                                                                  // 1497
		}                                                                                                                    // 1498
	}                                                                                                                     // 1499
                                                                                                                       // 1500
	return moms;                                                                                                          // 1501
}                                                                                                                      // 1502
                                                                                                                       // 1503
// Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment                   // 1504
// TODO: look into moment.momentProperties for this.                                                                   // 1505
function transferAmbigs(src, dest) {                                                                                   // 1506
	if (src._ambigTime) {                                                                                                 // 1507
		dest._ambigTime = true;                                                                                              // 1508
	}                                                                                                                     // 1509
	else if (dest._ambigTime) {                                                                                           // 1510
		dest._ambigTime = false;                                                                                             // 1511
	}                                                                                                                     // 1512
                                                                                                                       // 1513
	if (src._ambigZone) {                                                                                                 // 1514
		dest._ambigZone = true;                                                                                              // 1515
	}                                                                                                                     // 1516
	else if (dest._ambigZone) {                                                                                           // 1517
		dest._ambigZone = false;                                                                                             // 1518
	}                                                                                                                     // 1519
}                                                                                                                      // 1520
                                                                                                                       // 1521
                                                                                                                       // 1522
// Sets the year/month/date/etc values of the moment from the given array.                                             // 1523
// Inefficient because it calls each individual setter.                                                                // 1524
function setMomentValues(mom, a) {                                                                                     // 1525
	mom.year(a[0] || 0)                                                                                                   // 1526
		.month(a[1] || 0)                                                                                                    // 1527
		.date(a[2] || 0)                                                                                                     // 1528
		.hours(a[3] || 0)                                                                                                    // 1529
		.minutes(a[4] || 0)                                                                                                  // 1530
		.seconds(a[5] || 0)                                                                                                  // 1531
		.milliseconds(a[6] || 0);                                                                                            // 1532
}                                                                                                                      // 1533
                                                                                                                       // 1534
// Can we set the moment's internal date directly?                                                                     // 1535
allowValueOptimization = '_d' in moment() && 'updateOffset' in moment;                                                 // 1536
                                                                                                                       // 1537
// Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.                       // 1538
// Assumes the given moment is already in UTC mode.                                                                    // 1539
setUTCValues = allowValueOptimization ? function(mom, a) {                                                             // 1540
	// simlate what moment's accessors do                                                                                 // 1541
	mom._d.setTime(Date.UTC.apply(Date, a));                                                                              // 1542
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1543
} : setMomentValues;                                                                                                   // 1544
                                                                                                                       // 1545
// Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.                     // 1546
// Assumes the given moment is already in local mode.                                                                  // 1547
setLocalValues = allowValueOptimization ? function(mom, a) {                                                           // 1548
	// simlate what moment's accessors do                                                                                 // 1549
	mom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor                         // 1550
		a[0] || 0,                                                                                                           // 1551
		a[1] || 0,                                                                                                           // 1552
		a[2] || 0,                                                                                                           // 1553
		a[3] || 0,                                                                                                           // 1554
		a[4] || 0,                                                                                                           // 1555
		a[5] || 0,                                                                                                           // 1556
		a[6] || 0                                                                                                            // 1557
	));                                                                                                                   // 1558
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1559
} : setMomentValues;                                                                                                   // 1560
                                                                                                                       // 1561
;;                                                                                                                     // 1562
                                                                                                                       // 1563
// Single Date Formatting                                                                                              // 1564
// -------------------------------------------------------------------------------------------------                   // 1565
                                                                                                                       // 1566
                                                                                                                       // 1567
// call this if you want Moment's original format method to be used                                                    // 1568
function oldMomentFormat(mom, formatStr) {                                                                             // 1569
	return oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js                         // 1570
}                                                                                                                      // 1571
                                                                                                                       // 1572
                                                                                                                       // 1573
// Formats `date` with a Moment formatting string, but allow our non-zero areas and                                    // 1574
// additional token.                                                                                                   // 1575
function formatDate(date, formatStr) {                                                                                 // 1576
	return formatDateWithChunks(date, getFormatStringChunks(formatStr));                                                  // 1577
}                                                                                                                      // 1578
                                                                                                                       // 1579
                                                                                                                       // 1580
function formatDateWithChunks(date, chunks) {                                                                          // 1581
	var s = '';                                                                                                           // 1582
	var i;                                                                                                                // 1583
                                                                                                                       // 1584
	for (i=0; i<chunks.length; i++) {                                                                                     // 1585
		s += formatDateWithChunk(date, chunks[i]);                                                                           // 1586
	}                                                                                                                     // 1587
                                                                                                                       // 1588
	return s;                                                                                                             // 1589
}                                                                                                                      // 1590
                                                                                                                       // 1591
                                                                                                                       // 1592
// addition formatting tokens we want recognized                                                                       // 1593
var tokenOverrides = {                                                                                                 // 1594
	t: function(date) { // "a" or "p"                                                                                     // 1595
		return oldMomentFormat(date, 'a').charAt(0);                                                                         // 1596
	},                                                                                                                    // 1597
	T: function(date) { // "A" or "P"                                                                                     // 1598
		return oldMomentFormat(date, 'A').charAt(0);                                                                         // 1599
	}                                                                                                                     // 1600
};                                                                                                                     // 1601
                                                                                                                       // 1602
                                                                                                                       // 1603
function formatDateWithChunk(date, chunk) {                                                                            // 1604
	var token;                                                                                                            // 1605
	var maybeStr;                                                                                                         // 1606
                                                                                                                       // 1607
	if (typeof chunk === 'string') { // a literal string                                                                  // 1608
		return chunk;                                                                                                        // 1609
	}                                                                                                                     // 1610
	else if ((token = chunk.token)) { // a token, like "YYYY"                                                             // 1611
		if (tokenOverrides[token]) {                                                                                         // 1612
			return tokenOverrides[token](date); // use our custom token                                                         // 1613
		}                                                                                                                    // 1614
		return oldMomentFormat(date, token);                                                                                 // 1615
	}                                                                                                                     // 1616
	else if (chunk.maybe) { // a grouping of other chunks that must be non-zero                                           // 1617
		maybeStr = formatDateWithChunks(date, chunk.maybe);                                                                  // 1618
		if (maybeStr.match(/[1-9]/)) {                                                                                       // 1619
			return maybeStr;                                                                                                    // 1620
		}                                                                                                                    // 1621
	}                                                                                                                     // 1622
                                                                                                                       // 1623
	return '';                                                                                                            // 1624
}                                                                                                                      // 1625
                                                                                                                       // 1626
                                                                                                                       // 1627
// Date Range Formatting                                                                                               // 1628
// -------------------------------------------------------------------------------------------------                   // 1629
// TODO: make it work with timezone offset                                                                             // 1630
                                                                                                                       // 1631
// Using a formatting string meant for a single date, generate a range string, like                                    // 1632
// "Sep 2 - 9 2013", that intelligently inserts a separator where the dates differ.                                    // 1633
// If the dates are the same as far as the format string is concerned, just return a single                            // 1634
// rendering of one date, without any separator.                                                                       // 1635
function formatRange(date1, date2, formatStr, separator, isRTL) {                                                      // 1636
	var localeData;                                                                                                       // 1637
                                                                                                                       // 1638
	date1 = FC.moment.parseZone(date1);                                                                                   // 1639
	date2 = FC.moment.parseZone(date2);                                                                                   // 1640
                                                                                                                       // 1641
	localeData = (date1.localeData || date1.lang).call(date1); // works with moment-pre-2.8                               // 1642
                                                                                                                       // 1643
	// Expand localized format strings, like "LL" -> "MMMM D YYYY"                                                        // 1644
	formatStr = localeData.longDateFormat(formatStr) || formatStr;                                                        // 1645
	// BTW, this is not important for `formatDate` because it is impossible to put custom tokens                          // 1646
	// or non-zero areas in Moment's localized format strings.                                                            // 1647
                                                                                                                       // 1648
	separator = separator || ' - ';                                                                                       // 1649
                                                                                                                       // 1650
	return formatRangeWithChunks(                                                                                         // 1651
		date1,                                                                                                               // 1652
		date2,                                                                                                               // 1653
		getFormatStringChunks(formatStr),                                                                                    // 1654
		separator,                                                                                                           // 1655
		isRTL                                                                                                                // 1656
	);                                                                                                                    // 1657
}                                                                                                                      // 1658
FC.formatRange = formatRange; // expose                                                                                // 1659
                                                                                                                       // 1660
                                                                                                                       // 1661
function formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {                                               // 1662
	var unzonedDate1 = date1.clone().stripZone(); // for formatSimilarChunk                                               // 1663
	var unzonedDate2 = date2.clone().stripZone(); // "                                                                    // 1664
	var chunkStr; // the rendering of the chunk                                                                           // 1665
	var leftI;                                                                                                            // 1666
	var leftStr = '';                                                                                                     // 1667
	var rightI;                                                                                                           // 1668
	var rightStr = '';                                                                                                    // 1669
	var middleI;                                                                                                          // 1670
	var middleStr1 = '';                                                                                                  // 1671
	var middleStr2 = '';                                                                                                  // 1672
	var middleStr = '';                                                                                                   // 1673
                                                                                                                       // 1674
	// Start at the leftmost side of the formatting string and continue until you hit a token                             // 1675
	// that is not the same between dates.                                                                                // 1676
	for (leftI=0; leftI<chunks.length; leftI++) {                                                                         // 1677
		chunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunks[leftI]);                              // 1678
		if (chunkStr === false) {                                                                                            // 1679
			break;                                                                                                              // 1680
		}                                                                                                                    // 1681
		leftStr += chunkStr;                                                                                                 // 1682
	}                                                                                                                     // 1683
                                                                                                                       // 1684
	// Similarly, start at the rightmost side of the formatting string and move left                                      // 1685
	for (rightI=chunks.length-1; rightI>leftI; rightI--) {                                                                // 1686
		chunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2,  chunks[rightI]);                            // 1687
		if (chunkStr === false) {                                                                                            // 1688
			break;                                                                                                              // 1689
		}                                                                                                                    // 1690
		rightStr = chunkStr + rightStr;                                                                                      // 1691
	}                                                                                                                     // 1692
                                                                                                                       // 1693
	// The area in the middle is different for both of the dates.                                                         // 1694
	// Collect them distinctly so we can jam them together later.                                                         // 1695
	for (middleI=leftI; middleI<=rightI; middleI++) {                                                                     // 1696
		middleStr1 += formatDateWithChunk(date1, chunks[middleI]);                                                           // 1697
		middleStr2 += formatDateWithChunk(date2, chunks[middleI]);                                                           // 1698
	}                                                                                                                     // 1699
                                                                                                                       // 1700
	if (middleStr1 || middleStr2) {                                                                                       // 1701
		if (isRTL) {                                                                                                         // 1702
			middleStr = middleStr2 + separator + middleStr1;                                                                    // 1703
		}                                                                                                                    // 1704
		else {                                                                                                               // 1705
			middleStr = middleStr1 + separator + middleStr2;                                                                    // 1706
		}                                                                                                                    // 1707
	}                                                                                                                     // 1708
                                                                                                                       // 1709
	return leftStr + middleStr + rightStr;                                                                                // 1710
}                                                                                                                      // 1711
                                                                                                                       // 1712
                                                                                                                       // 1713
var similarUnitMap = {                                                                                                 // 1714
	Y: 'year',                                                                                                            // 1715
	M: 'month',                                                                                                           // 1716
	D: 'day', // day of month                                                                                             // 1717
	d: 'day', // day of week                                                                                              // 1718
	// prevents a separator between anything time-related...                                                              // 1719
	A: 'second', // AM/PM                                                                                                 // 1720
	a: 'second', // am/pm                                                                                                 // 1721
	T: 'second', // A/P                                                                                                   // 1722
	t: 'second', // a/p                                                                                                   // 1723
	H: 'second', // hour (24)                                                                                             // 1724
	h: 'second', // hour (12)                                                                                             // 1725
	m: 'second', // minute                                                                                                // 1726
	s: 'second' // second                                                                                                 // 1727
};                                                                                                                     // 1728
// TODO: week maybe?                                                                                                   // 1729
                                                                                                                       // 1730
                                                                                                                       // 1731
// Given a formatting chunk, and given that both dates are similar in the regard the                                   // 1732
// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.                             // 1733
function formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunk) {                                         // 1734
	var token;                                                                                                            // 1735
	var unit;                                                                                                             // 1736
                                                                                                                       // 1737
	if (typeof chunk === 'string') { // a literal string                                                                  // 1738
		return chunk;                                                                                                        // 1739
	}                                                                                                                     // 1740
	else if ((token = chunk.token)) {                                                                                     // 1741
		unit = similarUnitMap[token.charAt(0)];                                                                              // 1742
                                                                                                                       // 1743
		// are the dates the same for this unit of measurement?                                                              // 1744
		// use the unzoned dates for this calculation because unreliable when near DST (bug #2396)                           // 1745
		if (unit && unzonedDate1.isSame(unzonedDate2, unit)) {                                                               // 1746
			return oldMomentFormat(date1, token); // would be the same if we used `date2`                                       // 1747
			// BTW, don't support custom tokens                                                                                 // 1748
		}                                                                                                                    // 1749
	}                                                                                                                     // 1750
                                                                                                                       // 1751
	return false; // the chunk is NOT the same for the two dates                                                          // 1752
	// BTW, don't support splitting on non-zero areas                                                                     // 1753
}                                                                                                                      // 1754
                                                                                                                       // 1755
                                                                                                                       // 1756
// Chunking Utils                                                                                                      // 1757
// -------------------------------------------------------------------------------------------------                   // 1758
                                                                                                                       // 1759
                                                                                                                       // 1760
var formatStringChunkCache = {};                                                                                       // 1761
                                                                                                                       // 1762
                                                                                                                       // 1763
function getFormatStringChunks(formatStr) {                                                                            // 1764
	if (formatStr in formatStringChunkCache) {                                                                            // 1765
		return formatStringChunkCache[formatStr];                                                                            // 1766
	}                                                                                                                     // 1767
	return (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));                                            // 1768
}                                                                                                                      // 1769
                                                                                                                       // 1770
                                                                                                                       // 1771
// Break the formatting string into an array of chunks                                                                 // 1772
function chunkFormatString(formatStr) {                                                                                // 1773
	var chunks = [];                                                                                                      // 1774
	var chunker = /\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g; // TODO: more descrimination              // 1775
	var match;                                                                                                            // 1776
                                                                                                                       // 1777
	while ((match = chunker.exec(formatStr))) {                                                                           // 1778
		if (match[1]) { // a literal string inside [ ... ]                                                                   // 1779
			chunks.push(match[1]);                                                                                              // 1780
		}                                                                                                                    // 1781
		else if (match[2]) { // non-zero formatting inside ( ... )                                                           // 1782
			chunks.push({ maybe: chunkFormatString(match[2]) });                                                                // 1783
		}                                                                                                                    // 1784
		else if (match[3]) { // a formatting token                                                                           // 1785
			chunks.push({ token: match[3] });                                                                                   // 1786
		}                                                                                                                    // 1787
		else if (match[5]) { // an unenclosed literal string                                                                 // 1788
			chunks.push(match[5]);                                                                                              // 1789
		}                                                                                                                    // 1790
	}                                                                                                                     // 1791
                                                                                                                       // 1792
	return chunks;                                                                                                        // 1793
}                                                                                                                      // 1794
                                                                                                                       // 1795
;;                                                                                                                     // 1796
                                                                                                                       // 1797
FC.Class = Class; // export                                                                                            // 1798
                                                                                                                       // 1799
// Class that all other classes will inherit from                                                                      // 1800
function Class() { }                                                                                                   // 1801
                                                                                                                       // 1802
                                                                                                                       // 1803
// Called on a class to create a subclass.                                                                             // 1804
// Last argument contains instance methods. Any argument before the last are considered mixins.                        // 1805
Class.extend = function() {                                                                                            // 1806
	var len = arguments.length;                                                                                           // 1807
	var i;                                                                                                                // 1808
	var members;                                                                                                          // 1809
                                                                                                                       // 1810
	for (i = 0; i < len; i++) {                                                                                           // 1811
		members = arguments[i];                                                                                              // 1812
		if (i < len - 1) { // not the last argument?                                                                         // 1813
			mixIntoClass(this, members);                                                                                        // 1814
		}                                                                                                                    // 1815
	}                                                                                                                     // 1816
                                                                                                                       // 1817
	return extendClass(this, members || {}); // members will be undefined if no arguments                                 // 1818
};                                                                                                                     // 1819
                                                                                                                       // 1820
                                                                                                                       // 1821
// Adds new member variables/methods to the class's prototype.                                                         // 1822
// Can be called with another class, or a plain object hash containing new members.                                    // 1823
Class.mixin = function(members) {                                                                                      // 1824
	mixIntoClass(this, members);                                                                                          // 1825
};                                                                                                                     // 1826
                                                                                                                       // 1827
                                                                                                                       // 1828
function extendClass(superClass, members) {                                                                            // 1829
	var subClass;                                                                                                         // 1830
                                                                                                                       // 1831
	// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist       // 1832
	if (hasOwnProp(members, 'constructor')) {                                                                             // 1833
		subClass = members.constructor;                                                                                      // 1834
	}                                                                                                                     // 1835
	if (typeof subClass !== 'function') {                                                                                 // 1836
		subClass = members.constructor = function() {                                                                        // 1837
			superClass.apply(this, arguments);                                                                                  // 1838
		};                                                                                                                   // 1839
	}                                                                                                                     // 1840
                                                                                                                       // 1841
	// build the base prototype for the subclass, which is an new object chained to the superclass's prototype            // 1842
	subClass.prototype = createObject(superClass.prototype);                                                              // 1843
                                                                                                                       // 1844
	// copy each member variable/method onto the the subclass's prototype                                                 // 1845
	copyOwnProps(members, subClass.prototype);                                                                            // 1846
	copyNativeMethods(members, subClass.prototype); // hack for IE8                                                       // 1847
                                                                                                                       // 1848
	// copy over all class variables/methods to the subclass, such as `extend` and `mixin`                                // 1849
	copyOwnProps(superClass, subClass);                                                                                   // 1850
                                                                                                                       // 1851
	return subClass;                                                                                                      // 1852
}                                                                                                                      // 1853
                                                                                                                       // 1854
                                                                                                                       // 1855
function mixIntoClass(theClass, members) {                                                                             // 1856
	copyOwnProps(members, theClass.prototype); // TODO: copyNativeMethods?                                                // 1857
}                                                                                                                      // 1858
;;                                                                                                                     // 1859
                                                                                                                       // 1860
var EmitterMixin = FC.EmitterMixin = {                                                                                 // 1861
                                                                                                                       // 1862
	callbackHash: null,                                                                                                   // 1863
                                                                                                                       // 1864
                                                                                                                       // 1865
	on: function(name, callback) {                                                                                        // 1866
		this.loopCallbacks(name, 'add', [ callback ]);                                                                       // 1867
                                                                                                                       // 1868
		return this; // for chaining                                                                                         // 1869
	},                                                                                                                    // 1870
                                                                                                                       // 1871
                                                                                                                       // 1872
	off: function(name, callback) {                                                                                       // 1873
		this.loopCallbacks(name, 'remove', [ callback ]);                                                                    // 1874
                                                                                                                       // 1875
		return this; // for chaining                                                                                         // 1876
	},                                                                                                                    // 1877
                                                                                                                       // 1878
                                                                                                                       // 1879
	trigger: function(name) { // args...                                                                                  // 1880
		var args = Array.prototype.slice.call(arguments, 1);                                                                 // 1881
                                                                                                                       // 1882
		this.triggerWith(name, this, args);                                                                                  // 1883
                                                                                                                       // 1884
		return this; // for chaining                                                                                         // 1885
	},                                                                                                                    // 1886
                                                                                                                       // 1887
                                                                                                                       // 1888
	triggerWith: function(name, context, args) {                                                                          // 1889
		this.loopCallbacks(name, 'fireWith', [ context, args ]);                                                             // 1890
                                                                                                                       // 1891
		return this; // for chaining                                                                                         // 1892
	},                                                                                                                    // 1893
                                                                                                                       // 1894
                                                                                                                       // 1895
	/*                                                                                                                    // 1896
	Given an event name string with possible namespaces,                                                                  // 1897
	call the given methodName on all the internal Callback object with the given arguments.                               // 1898
	*/                                                                                                                    // 1899
	loopCallbacks: function(name, methodName, args) {                                                                     // 1900
		var parts = name.split('.'); // "click.namespace" -> [ "click", "namespace" ]                                        // 1901
		var i, part;                                                                                                         // 1902
		var callbackObj;                                                                                                     // 1903
                                                                                                                       // 1904
		for (i = 0; i < parts.length; i++) {                                                                                 // 1905
			part = parts[i];                                                                                                    // 1906
			if (part) { // in case no event name like "click"                                                                   // 1907
				callbackObj = this.ensureCallbackObj((i ? '.' : '') + part); // put periods in front of namespaces                 // 1908
				callbackObj[methodName].apply(callbackObj, args);                                                                  // 1909
			}                                                                                                                   // 1910
		}                                                                                                                    // 1911
	},                                                                                                                    // 1912
                                                                                                                       // 1913
                                                                                                                       // 1914
	ensureCallbackObj: function(name) {                                                                                   // 1915
		if (!this.callbackHash) {                                                                                            // 1916
			this.callbackHash = {};                                                                                             // 1917
		}                                                                                                                    // 1918
		if (!this.callbackHash[name]) {                                                                                      // 1919
			this.callbackHash[name] = $.Callbacks();                                                                            // 1920
		}                                                                                                                    // 1921
		return this.callbackHash[name];                                                                                      // 1922
	}                                                                                                                     // 1923
                                                                                                                       // 1924
};                                                                                                                     // 1925
;;                                                                                                                     // 1926
                                                                                                                       // 1927
/*                                                                                                                     // 1928
Utility methods for easily listening to events on another object,                                                      // 1929
and more importantly, easily unlistening from them.                                                                    // 1930
*/                                                                                                                     // 1931
var ListenerMixin = FC.ListenerMixin = (function() {                                                                   // 1932
	var guid = 0;                                                                                                         // 1933
	var ListenerMixin = {                                                                                                 // 1934
                                                                                                                       // 1935
		listenerId: null,                                                                                                    // 1936
                                                                                                                       // 1937
		/*                                                                                                                   // 1938
		Given an `other` object that has on/off methods, bind the given `callback` to an event by the given name.            // 1939
		The `callback` will be called with the `this` context of the object that .listenTo is being called on.               // 1940
		Can be called:                                                                                                       // 1941
			.listenTo(other, eventName, callback)                                                                               // 1942
		OR                                                                                                                   // 1943
			.listenTo(other, {                                                                                                  // 1944
				eventName1: callback1,                                                                                             // 1945
				eventName2: callback2                                                                                              // 1946
			})                                                                                                                  // 1947
		*/                                                                                                                   // 1948
		listenTo: function(other, arg, callback) {                                                                           // 1949
			if (typeof arg === 'object') { // given dictionary of callbacks                                                     // 1950
				for (var eventName in arg) {                                                                                       // 1951
					if (arg.hasOwnProperty(eventName)) {                                                                              // 1952
						this.listenTo(other, eventName, arg[eventName]);                                                                 // 1953
					}                                                                                                                 // 1954
				}                                                                                                                  // 1955
			}                                                                                                                   // 1956
			else if (typeof arg === 'string') {                                                                                 // 1957
				other.on(                                                                                                          // 1958
					arg + '.' + this.getListenerNamespace(), // use event namespacing to identify this object                         // 1959
					$.proxy(callback, this) // always use `this` context                                                              // 1960
						// the usually-undesired jQuery guid behavior doesn't matter,                                                    // 1961
						// because we always unbind via namespace                                                                        // 1962
				);                                                                                                                 // 1963
			}                                                                                                                   // 1964
		},                                                                                                                   // 1965
                                                                                                                       // 1966
		/*                                                                                                                   // 1967
		Causes the current object to stop listening to events on the `other` object.                                         // 1968
		`eventName` is optional. If omitted, will stop listening to ALL events on `other`.                                   // 1969
		*/                                                                                                                   // 1970
		stopListeningTo: function(other, eventName) {                                                                        // 1971
			other.off((eventName || '') + '.' + this.getListenerNamespace());                                                   // 1972
		},                                                                                                                   // 1973
                                                                                                                       // 1974
		/*                                                                                                                   // 1975
		Returns a string, unique to this object, to be used for event namespacing                                            // 1976
		*/                                                                                                                   // 1977
		getListenerNamespace: function() {                                                                                   // 1978
			if (this.listenerId == null) {                                                                                      // 1979
				this.listenerId = guid++;                                                                                          // 1980
			}                                                                                                                   // 1981
			return '_listener' + this.listenerId;                                                                               // 1982
		}                                                                                                                    // 1983
                                                                                                                       // 1984
	};                                                                                                                    // 1985
	return ListenerMixin;                                                                                                 // 1986
})();                                                                                                                  // 1987
;;                                                                                                                     // 1988
                                                                                                                       // 1989
// simple class for toggle a `isIgnoringMouse` flag on delay                                                           // 1990
// initMouseIgnoring must first be called, with a millisecond delay setting.                                           // 1991
var MouseIgnorerMixin = {                                                                                              // 1992
                                                                                                                       // 1993
	isIgnoringMouse: false, // bool                                                                                       // 1994
	delayUnignoreMouse: null, // method                                                                                   // 1995
                                                                                                                       // 1996
                                                                                                                       // 1997
	initMouseIgnoring: function(delay) {                                                                                  // 1998
		this.delayUnignoreMouse = debounce(proxy(this, 'unignoreMouse'), delay || 1000);                                     // 1999
	},                                                                                                                    // 2000
                                                                                                                       // 2001
                                                                                                                       // 2002
	// temporarily ignore mouse actions on segments                                                                       // 2003
	tempIgnoreMouse: function() {                                                                                         // 2004
		this.isIgnoringMouse = true;                                                                                         // 2005
		this.delayUnignoreMouse();                                                                                           // 2006
	},                                                                                                                    // 2007
                                                                                                                       // 2008
                                                                                                                       // 2009
	// delayUnignoreMouse eventually calls this                                                                           // 2010
	unignoreMouse: function() {                                                                                           // 2011
		this.isIgnoringMouse = false;                                                                                        // 2012
	}                                                                                                                     // 2013
                                                                                                                       // 2014
};                                                                                                                     // 2015
                                                                                                                       // 2016
;;                                                                                                                     // 2017
                                                                                                                       // 2018
/* A rectangular panel that is absolutely positioned over other content                                                // 2019
------------------------------------------------------------------------------------------------------------------------
Options:                                                                                                               // 2021
	- className (string)                                                                                                  // 2022
	- content (HTML string or jQuery element set)                                                                         // 2023
	- parentEl                                                                                                            // 2024
	- top                                                                                                                 // 2025
	- left                                                                                                                // 2026
	- right (the x coord of where the right edge should be. not a "CSS" right)                                            // 2027
	- autoHide (boolean)                                                                                                  // 2028
	- show (callback)                                                                                                     // 2029
	- hide (callback)                                                                                                     // 2030
*/                                                                                                                     // 2031
                                                                                                                       // 2032
var Popover = Class.extend(ListenerMixin, {                                                                            // 2033
                                                                                                                       // 2034
	isHidden: true,                                                                                                       // 2035
	options: null,                                                                                                        // 2036
	el: null, // the container element for the popover. generated by this object                                          // 2037
	margin: 10, // the space required between the popover and the edges of the scroll container                           // 2038
                                                                                                                       // 2039
                                                                                                                       // 2040
	constructor: function(options) {                                                                                      // 2041
		this.options = options || {};                                                                                        // 2042
	},                                                                                                                    // 2043
                                                                                                                       // 2044
                                                                                                                       // 2045
	// Shows the popover on the specified position. Renders it if not already                                             // 2046
	show: function() {                                                                                                    // 2047
		if (this.isHidden) {                                                                                                 // 2048
			if (!this.el) {                                                                                                     // 2049
				this.render();                                                                                                     // 2050
			}                                                                                                                   // 2051
			this.el.show();                                                                                                     // 2052
			this.position();                                                                                                    // 2053
			this.isHidden = false;                                                                                              // 2054
			this.trigger('show');                                                                                               // 2055
		}                                                                                                                    // 2056
	},                                                                                                                    // 2057
                                                                                                                       // 2058
                                                                                                                       // 2059
	// Hides the popover, through CSS, but does not remove it from the DOM                                                // 2060
	hide: function() {                                                                                                    // 2061
		if (!this.isHidden) {                                                                                                // 2062
			this.el.hide();                                                                                                     // 2063
			this.isHidden = true;                                                                                               // 2064
			this.trigger('hide');                                                                                               // 2065
		}                                                                                                                    // 2066
	},                                                                                                                    // 2067
                                                                                                                       // 2068
                                                                                                                       // 2069
	// Creates `this.el` and renders content inside of it                                                                 // 2070
	render: function() {                                                                                                  // 2071
		var _this = this;                                                                                                    // 2072
		var options = this.options;                                                                                          // 2073
                                                                                                                       // 2074
		this.el = $('<div class="fc-popover"/>')                                                                             // 2075
			.addClass(options.className || '')                                                                                  // 2076
			.css({                                                                                                              // 2077
				// position initially to the top left to avoid creating scrollbars                                                 // 2078
				top: 0,                                                                                                            // 2079
				left: 0                                                                                                            // 2080
			})                                                                                                                  // 2081
			.append(options.content)                                                                                            // 2082
			.appendTo(options.parentEl);                                                                                        // 2083
                                                                                                                       // 2084
		// when a click happens on anything inside with a 'fc-close' className, hide the popover                             // 2085
		this.el.on('click', '.fc-close', function() {                                                                        // 2086
			_this.hide();                                                                                                       // 2087
		});                                                                                                                  // 2088
                                                                                                                       // 2089
		if (options.autoHide) {                                                                                              // 2090
			this.listenTo($(document), 'mousedown', this.documentMousedown);                                                    // 2091
		}                                                                                                                    // 2092
	},                                                                                                                    // 2093
                                                                                                                       // 2094
                                                                                                                       // 2095
	// Triggered when the user clicks *anywhere* in the document, for the autoHide feature                                // 2096
	documentMousedown: function(ev) {                                                                                     // 2097
		// only hide the popover if the click happened outside the popover                                                   // 2098
		if (this.el && !$(ev.target).closest(this.el).length) {                                                              // 2099
			this.hide();                                                                                                        // 2100
		}                                                                                                                    // 2101
	},                                                                                                                    // 2102
                                                                                                                       // 2103
                                                                                                                       // 2104
	// Hides and unregisters any handlers                                                                                 // 2105
	removeElement: function() {                                                                                           // 2106
		this.hide();                                                                                                         // 2107
                                                                                                                       // 2108
		if (this.el) {                                                                                                       // 2109
			this.el.remove();                                                                                                   // 2110
			this.el = null;                                                                                                     // 2111
		}                                                                                                                    // 2112
                                                                                                                       // 2113
		this.stopListeningTo($(document), 'mousedown');                                                                      // 2114
	},                                                                                                                    // 2115
                                                                                                                       // 2116
                                                                                                                       // 2117
	// Positions the popover optimally, using the top/left/right options                                                  // 2118
	position: function() {                                                                                                // 2119
		var options = this.options;                                                                                          // 2120
		var origin = this.el.offsetParent().offset();                                                                        // 2121
		var width = this.el.outerWidth();                                                                                    // 2122
		var height = this.el.outerHeight();                                                                                  // 2123
		var windowEl = $(window);                                                                                            // 2124
		var viewportEl = getScrollParent(this.el);                                                                           // 2125
		var viewportTop;                                                                                                     // 2126
		var viewportLeft;                                                                                                    // 2127
		var viewportOffset;                                                                                                  // 2128
		var top; // the "position" (not "offset") values for the popover                                                     // 2129
		var left; //                                                                                                         // 2130
                                                                                                                       // 2131
		// compute top and left                                                                                              // 2132
		top = options.top || 0;                                                                                              // 2133
		if (options.left !== undefined) {                                                                                    // 2134
			left = options.left;                                                                                                // 2135
		}                                                                                                                    // 2136
		else if (options.right !== undefined) {                                                                              // 2137
			left = options.right - width; // derive the left value from the right value                                         // 2138
		}                                                                                                                    // 2139
		else {                                                                                                               // 2140
			left = 0;                                                                                                           // 2141
		}                                                                                                                    // 2142
                                                                                                                       // 2143
		if (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result                        // 2144
			viewportEl = windowEl;                                                                                              // 2145
			viewportTop = 0; // the window is always at the top left                                                            // 2146
			viewportLeft = 0; // (and .offset() won't work if called here)                                                      // 2147
		}                                                                                                                    // 2148
		else {                                                                                                               // 2149
			viewportOffset = viewportEl.offset();                                                                               // 2150
			viewportTop = viewportOffset.top;                                                                                   // 2151
			viewportLeft = viewportOffset.left;                                                                                 // 2152
		}                                                                                                                    // 2153
                                                                                                                       // 2154
		// if the window is scrolled, it causes the visible area to be further down                                          // 2155
		viewportTop += windowEl.scrollTop();                                                                                 // 2156
		viewportLeft += windowEl.scrollLeft();                                                                               // 2157
                                                                                                                       // 2158
		// constrain to the view port. if constrained by two edges, give precedence to top/left                              // 2159
		if (options.viewportConstrain !== false) {                                                                           // 2160
			top = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);                                 // 2161
			top = Math.max(top, viewportTop + this.margin);                                                                     // 2162
			left = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);                                // 2163
			left = Math.max(left, viewportLeft + this.margin);                                                                  // 2164
		}                                                                                                                    // 2165
                                                                                                                       // 2166
		this.el.css({                                                                                                        // 2167
			top: top - origin.top,                                                                                              // 2168
			left: left - origin.left                                                                                            // 2169
		});                                                                                                                  // 2170
	},                                                                                                                    // 2171
                                                                                                                       // 2172
                                                                                                                       // 2173
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 2174
	// Arguments beyond the first `name` are forwarded on.                                                                // 2175
	// TODO: better code reuse for this. Repeat code                                                                      // 2176
	trigger: function(name) {                                                                                             // 2177
		if (this.options[name]) {                                                                                            // 2178
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 2179
		}                                                                                                                    // 2180
	}                                                                                                                     // 2181
                                                                                                                       // 2182
});                                                                                                                    // 2183
                                                                                                                       // 2184
;;                                                                                                                     // 2185
                                                                                                                       // 2186
/*                                                                                                                     // 2187
A cache for the left/right/top/bottom/width/height values for one or more elements.                                    // 2188
Works with both offset (from topleft document) and position (from offsetParent).                                       // 2189
                                                                                                                       // 2190
options:                                                                                                               // 2191
- els                                                                                                                  // 2192
- isHorizontal                                                                                                         // 2193
- isVertical                                                                                                           // 2194
*/                                                                                                                     // 2195
var CoordCache = FC.CoordCache = Class.extend({                                                                        // 2196
                                                                                                                       // 2197
	els: null, // jQuery set (assumed to be siblings)                                                                     // 2198
	forcedOffsetParentEl: null, // options can override the natural offsetParent                                          // 2199
	origin: null, // {left,top} position of offsetParent of els                                                           // 2200
	boundingRect: null, // constrain cordinates to this rectangle. {left,right,top,bottom} or null                        // 2201
	isHorizontal: false, // whether to query for left/right/width                                                         // 2202
	isVertical: false, // whether to query for top/bottom/height                                                          // 2203
                                                                                                                       // 2204
	// arrays of coordinates (offsets from topleft of document)                                                           // 2205
	lefts: null,                                                                                                          // 2206
	rights: null,                                                                                                         // 2207
	tops: null,                                                                                                           // 2208
	bottoms: null,                                                                                                        // 2209
                                                                                                                       // 2210
                                                                                                                       // 2211
	constructor: function(options) {                                                                                      // 2212
		this.els = $(options.els);                                                                                           // 2213
		this.isHorizontal = options.isHorizontal;                                                                            // 2214
		this.isVertical = options.isVertical;                                                                                // 2215
		this.forcedOffsetParentEl = options.offsetParent ? $(options.offsetParent) : null;                                   // 2216
	},                                                                                                                    // 2217
                                                                                                                       // 2218
                                                                                                                       // 2219
	// Queries the els for coordinates and stores them.                                                                   // 2220
	// Call this method before using and of the get* methods below.                                                       // 2221
	build: function() {                                                                                                   // 2222
		var offsetParentEl = this.forcedOffsetParentEl || this.els.eq(0).offsetParent();                                     // 2223
                                                                                                                       // 2224
		this.origin = offsetParentEl.offset();                                                                               // 2225
		this.boundingRect = this.queryBoundingRect();                                                                        // 2226
                                                                                                                       // 2227
		if (this.isHorizontal) {                                                                                             // 2228
			this.buildElHorizontals();                                                                                          // 2229
		}                                                                                                                    // 2230
		if (this.isVertical) {                                                                                               // 2231
			this.buildElVerticals();                                                                                            // 2232
		}                                                                                                                    // 2233
	},                                                                                                                    // 2234
                                                                                                                       // 2235
                                                                                                                       // 2236
	// Destroys all internal data about coordinates, freeing memory                                                       // 2237
	clear: function() {                                                                                                   // 2238
		this.origin = null;                                                                                                  // 2239
		this.boundingRect = null;                                                                                            // 2240
		this.lefts = null;                                                                                                   // 2241
		this.rights = null;                                                                                                  // 2242
		this.tops = null;                                                                                                    // 2243
		this.bottoms = null;                                                                                                 // 2244
	},                                                                                                                    // 2245
                                                                                                                       // 2246
                                                                                                                       // 2247
	// When called, if coord caches aren't built, builds them                                                             // 2248
	ensureBuilt: function() {                                                                                             // 2249
		if (!this.origin) {                                                                                                  // 2250
			this.build();                                                                                                       // 2251
		}                                                                                                                    // 2252
	},                                                                                                                    // 2253
                                                                                                                       // 2254
                                                                                                                       // 2255
	// Compute and return what the elements' bounding rectangle is, from the user's perspective.                          // 2256
	// Right now, only returns a rectangle if constrained by an overflow:scroll element.                                  // 2257
	queryBoundingRect: function() {                                                                                       // 2258
		var scrollParentEl = getScrollParent(this.els.eq(0));                                                                // 2259
                                                                                                                       // 2260
		if (!scrollParentEl.is(document)) {                                                                                  // 2261
			return getClientRect(scrollParentEl);                                                                               // 2262
		}                                                                                                                    // 2263
	},                                                                                                                    // 2264
                                                                                                                       // 2265
                                                                                                                       // 2266
	// Populates the left/right internal coordinate arrays                                                                // 2267
	buildElHorizontals: function() {                                                                                      // 2268
		var lefts = [];                                                                                                      // 2269
		var rights = [];                                                                                                     // 2270
                                                                                                                       // 2271
		this.els.each(function(i, node) {                                                                                    // 2272
			var el = $(node);                                                                                                   // 2273
			var left = el.offset().left;                                                                                        // 2274
			var width = el.outerWidth();                                                                                        // 2275
                                                                                                                       // 2276
			lefts.push(left);                                                                                                   // 2277
			rights.push(left + width);                                                                                          // 2278
		});                                                                                                                  // 2279
                                                                                                                       // 2280
		this.lefts = lefts;                                                                                                  // 2281
		this.rights = rights;                                                                                                // 2282
	},                                                                                                                    // 2283
                                                                                                                       // 2284
                                                                                                                       // 2285
	// Populates the top/bottom internal coordinate arrays                                                                // 2286
	buildElVerticals: function() {                                                                                        // 2287
		var tops = [];                                                                                                       // 2288
		var bottoms = [];                                                                                                    // 2289
                                                                                                                       // 2290
		this.els.each(function(i, node) {                                                                                    // 2291
			var el = $(node);                                                                                                   // 2292
			var top = el.offset().top;                                                                                          // 2293
			var height = el.outerHeight();                                                                                      // 2294
                                                                                                                       // 2295
			tops.push(top);                                                                                                     // 2296
			bottoms.push(top + height);                                                                                         // 2297
		});                                                                                                                  // 2298
                                                                                                                       // 2299
		this.tops = tops;                                                                                                    // 2300
		this.bottoms = bottoms;                                                                                              // 2301
	},                                                                                                                    // 2302
                                                                                                                       // 2303
                                                                                                                       // 2304
	// Given a left offset (from document left), returns the index of the el that it horizontally intersects.             // 2305
	// If no intersection is made, or outside of the boundingRect, returns undefined.                                     // 2306
	getHorizontalIndex: function(leftOffset) {                                                                            // 2307
		this.ensureBuilt();                                                                                                  // 2308
                                                                                                                       // 2309
		var boundingRect = this.boundingRect;                                                                                // 2310
		var lefts = this.lefts;                                                                                              // 2311
		var rights = this.rights;                                                                                            // 2312
		var len = lefts.length;                                                                                              // 2313
		var i;                                                                                                               // 2314
                                                                                                                       // 2315
		if (!boundingRect || (leftOffset >= boundingRect.left && leftOffset < boundingRect.right)) {                         // 2316
			for (i = 0; i < len; i++) {                                                                                         // 2317
				if (leftOffset >= lefts[i] && leftOffset < rights[i]) {                                                            // 2318
					return i;                                                                                                         // 2319
				}                                                                                                                  // 2320
			}                                                                                                                   // 2321
		}                                                                                                                    // 2322
	},                                                                                                                    // 2323
                                                                                                                       // 2324
                                                                                                                       // 2325
	// Given a top offset (from document top), returns the index of the el that it vertically intersects.                 // 2326
	// If no intersection is made, or outside of the boundingRect, returns undefined.                                     // 2327
	getVerticalIndex: function(topOffset) {                                                                               // 2328
		this.ensureBuilt();                                                                                                  // 2329
                                                                                                                       // 2330
		var boundingRect = this.boundingRect;                                                                                // 2331
		var tops = this.tops;                                                                                                // 2332
		var bottoms = this.bottoms;                                                                                          // 2333
		var len = tops.length;                                                                                               // 2334
		var i;                                                                                                               // 2335
                                                                                                                       // 2336
		if (!boundingRect || (topOffset >= boundingRect.top && topOffset < boundingRect.bottom)) {                           // 2337
			for (i = 0; i < len; i++) {                                                                                         // 2338
				if (topOffset >= tops[i] && topOffset < bottoms[i]) {                                                              // 2339
					return i;                                                                                                         // 2340
				}                                                                                                                  // 2341
			}                                                                                                                   // 2342
		}                                                                                                                    // 2343
	},                                                                                                                    // 2344
                                                                                                                       // 2345
                                                                                                                       // 2346
	// Gets the left offset (from document left) of the element at the given index                                        // 2347
	getLeftOffset: function(leftIndex) {                                                                                  // 2348
		this.ensureBuilt();                                                                                                  // 2349
		return this.lefts[leftIndex];                                                                                        // 2350
	},                                                                                                                    // 2351
                                                                                                                       // 2352
                                                                                                                       // 2353
	// Gets the left position (from offsetParent left) of the element at the given index                                  // 2354
	getLeftPosition: function(leftIndex) {                                                                                // 2355
		this.ensureBuilt();                                                                                                  // 2356
		return this.lefts[leftIndex] - this.origin.left;                                                                     // 2357
	},                                                                                                                    // 2358
                                                                                                                       // 2359
                                                                                                                       // 2360
	// Gets the right offset (from document left) of the element at the given index.                                      // 2361
	// This value is NOT relative to the document's right edge, like the CSS concept of "right" would be.                 // 2362
	getRightOffset: function(leftIndex) {                                                                                 // 2363
		this.ensureBuilt();                                                                                                  // 2364
		return this.rights[leftIndex];                                                                                       // 2365
	},                                                                                                                    // 2366
                                                                                                                       // 2367
                                                                                                                       // 2368
	// Gets the right position (from offsetParent left) of the element at the given index.                                // 2369
	// This value is NOT relative to the offsetParent's right edge, like the CSS concept of "right" would be.             // 2370
	getRightPosition: function(leftIndex) {                                                                               // 2371
		this.ensureBuilt();                                                                                                  // 2372
		return this.rights[leftIndex] - this.origin.left;                                                                    // 2373
	},                                                                                                                    // 2374
                                                                                                                       // 2375
                                                                                                                       // 2376
	// Gets the width of the element at the given index                                                                   // 2377
	getWidth: function(leftIndex) {                                                                                       // 2378
		this.ensureBuilt();                                                                                                  // 2379
		return this.rights[leftIndex] - this.lefts[leftIndex];                                                               // 2380
	},                                                                                                                    // 2381
                                                                                                                       // 2382
                                                                                                                       // 2383
	// Gets the top offset (from document top) of the element at the given index                                          // 2384
	getTopOffset: function(topIndex) {                                                                                    // 2385
		this.ensureBuilt();                                                                                                  // 2386
		return this.tops[topIndex];                                                                                          // 2387
	},                                                                                                                    // 2388
                                                                                                                       // 2389
                                                                                                                       // 2390
	// Gets the top position (from offsetParent top) of the element at the given position                                 // 2391
	getTopPosition: function(topIndex) {                                                                                  // 2392
		this.ensureBuilt();                                                                                                  // 2393
		return this.tops[topIndex] - this.origin.top;                                                                        // 2394
	},                                                                                                                    // 2395
                                                                                                                       // 2396
	// Gets the bottom offset (from the document top) of the element at the given index.                                  // 2397
	// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.           // 2398
	getBottomOffset: function(topIndex) {                                                                                 // 2399
		this.ensureBuilt();                                                                                                  // 2400
		return this.bottoms[topIndex];                                                                                       // 2401
	},                                                                                                                    // 2402
                                                                                                                       // 2403
                                                                                                                       // 2404
	// Gets the bottom position (from the offsetParent top) of the element at the given index.                            // 2405
	// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.           // 2406
	getBottomPosition: function(topIndex) {                                                                               // 2407
		this.ensureBuilt();                                                                                                  // 2408
		return this.bottoms[topIndex] - this.origin.top;                                                                     // 2409
	},                                                                                                                    // 2410
                                                                                                                       // 2411
                                                                                                                       // 2412
	// Gets the height of the element at the given index                                                                  // 2413
	getHeight: function(topIndex) {                                                                                       // 2414
		this.ensureBuilt();                                                                                                  // 2415
		return this.bottoms[topIndex] - this.tops[topIndex];                                                                 // 2416
	}                                                                                                                     // 2417
                                                                                                                       // 2418
});                                                                                                                    // 2419
                                                                                                                       // 2420
;;                                                                                                                     // 2421
                                                                                                                       // 2422
/* Tracks a drag's mouse movement, firing various handlers                                                             // 2423
----------------------------------------------------------------------------------------------------------------------*/
// TODO: use Emitter                                                                                                   // 2425
                                                                                                                       // 2426
var DragListener = FC.DragListener = Class.extend(ListenerMixin, MouseIgnorerMixin, {                                  // 2427
                                                                                                                       // 2428
	options: null,                                                                                                        // 2429
                                                                                                                       // 2430
	// for IE8 bug-fighting behavior                                                                                      // 2431
	subjectEl: null,                                                                                                      // 2432
	subjectHref: null,                                                                                                    // 2433
                                                                                                                       // 2434
	// coordinates of the initial mousedown                                                                               // 2435
	originX: null,                                                                                                        // 2436
	originY: null,                                                                                                        // 2437
                                                                                                                       // 2438
	// the wrapping element that scrolls, or MIGHT scroll if there's overflow.                                            // 2439
	// TODO: do this for wrappers that have overflow:hidden as well.                                                      // 2440
	scrollEl: null,                                                                                                       // 2441
                                                                                                                       // 2442
	isInteracting: false,                                                                                                 // 2443
	isDistanceSurpassed: false,                                                                                           // 2444
	isDelayEnded: false,                                                                                                  // 2445
	isDragging: false,                                                                                                    // 2446
	isTouch: false,                                                                                                       // 2447
                                                                                                                       // 2448
	delay: null,                                                                                                          // 2449
	delayTimeoutId: null,                                                                                                 // 2450
	minDistance: null,                                                                                                    // 2451
                                                                                                                       // 2452
	handleTouchScrollProxy: null, // calls handleTouchScroll, always bound to `this`                                      // 2453
                                                                                                                       // 2454
                                                                                                                       // 2455
	constructor: function(options) {                                                                                      // 2456
		this.options = options || {};                                                                                        // 2457
		this.handleTouchScrollProxy = proxy(this, 'handleTouchScroll');                                                      // 2458
		this.initMouseIgnoring(500);                                                                                         // 2459
	},                                                                                                                    // 2460
                                                                                                                       // 2461
                                                                                                                       // 2462
	// Interaction (high-level)                                                                                           // 2463
	// -----------------------------------------------------------------------------------------------------------------  // 2464
                                                                                                                       // 2465
                                                                                                                       // 2466
	startInteraction: function(ev, extraOptions) {                                                                        // 2467
		var isTouch = getEvIsTouch(ev);                                                                                      // 2468
                                                                                                                       // 2469
		if (ev.type === 'mousedown') {                                                                                       // 2470
			if (this.isIgnoringMouse) {                                                                                         // 2471
				return;                                                                                                            // 2472
			}                                                                                                                   // 2473
			else if (!isPrimaryMouseButton(ev)) {                                                                               // 2474
				return;                                                                                                            // 2475
			}                                                                                                                   // 2476
			else {                                                                                                              // 2477
				ev.preventDefault(); // prevents native selection in most browsers                                                 // 2478
			}                                                                                                                   // 2479
		}                                                                                                                    // 2480
                                                                                                                       // 2481
		if (!this.isInteracting) {                                                                                           // 2482
                                                                                                                       // 2483
			// process options                                                                                                  // 2484
			extraOptions = extraOptions || {};                                                                                  // 2485
			this.delay = firstDefined(extraOptions.delay, this.options.delay, 0);                                               // 2486
			this.minDistance = firstDefined(extraOptions.distance, this.options.distance, 0);                                   // 2487
			this.subjectEl = this.options.subjectEl;                                                                            // 2488
                                                                                                                       // 2489
			this.isInteracting = true;                                                                                          // 2490
			this.isTouch = isTouch;                                                                                             // 2491
			this.isDelayEnded = false;                                                                                          // 2492
			this.isDistanceSurpassed = false;                                                                                   // 2493
                                                                                                                       // 2494
			this.originX = getEvX(ev);                                                                                          // 2495
			this.originY = getEvY(ev);                                                                                          // 2496
			this.scrollEl = getScrollParent($(ev.target));                                                                      // 2497
                                                                                                                       // 2498
			this.bindHandlers();                                                                                                // 2499
			this.initAutoScroll();                                                                                              // 2500
			this.handleInteractionStart(ev);                                                                                    // 2501
			this.startDelay(ev);                                                                                                // 2502
                                                                                                                       // 2503
			if (!this.minDistance) {                                                                                            // 2504
				this.handleDistanceSurpassed(ev);                                                                                  // 2505
			}                                                                                                                   // 2506
		}                                                                                                                    // 2507
	},                                                                                                                    // 2508
                                                                                                                       // 2509
                                                                                                                       // 2510
	handleInteractionStart: function(ev) {                                                                                // 2511
		this.trigger('interactionStart', ev);                                                                                // 2512
	},                                                                                                                    // 2513
                                                                                                                       // 2514
                                                                                                                       // 2515
	endInteraction: function(ev, isCancelled) {                                                                           // 2516
		if (this.isInteracting) {                                                                                            // 2517
			this.endDrag(ev);                                                                                                   // 2518
                                                                                                                       // 2519
			if (this.delayTimeoutId) {                                                                                          // 2520
				clearTimeout(this.delayTimeoutId);                                                                                 // 2521
				this.delayTimeoutId = null;                                                                                        // 2522
			}                                                                                                                   // 2523
                                                                                                                       // 2524
			this.destroyAutoScroll();                                                                                           // 2525
			this.unbindHandlers();                                                                                              // 2526
                                                                                                                       // 2527
			this.isInteracting = false;                                                                                         // 2528
			this.handleInteractionEnd(ev, isCancelled);                                                                         // 2529
                                                                                                                       // 2530
			// a touchstart+touchend on the same element will result in the following addition simulated events:                // 2531
			// mouseover + mouseout + click                                                                                     // 2532
			// let's ignore these bogus events                                                                                  // 2533
			if (this.isTouch) {                                                                                                 // 2534
				this.tempIgnoreMouse();                                                                                            // 2535
			}                                                                                                                   // 2536
		}                                                                                                                    // 2537
	},                                                                                                                    // 2538
                                                                                                                       // 2539
                                                                                                                       // 2540
	handleInteractionEnd: function(ev, isCancelled) {                                                                     // 2541
		this.trigger('interactionEnd', ev, isCancelled || false);                                                            // 2542
	},                                                                                                                    // 2543
                                                                                                                       // 2544
                                                                                                                       // 2545
	// Binding To DOM                                                                                                     // 2546
	// -----------------------------------------------------------------------------------------------------------------  // 2547
                                                                                                                       // 2548
                                                                                                                       // 2549
	bindHandlers: function() {                                                                                            // 2550
		var _this = this;                                                                                                    // 2551
		var touchStartIgnores = 1;                                                                                           // 2552
                                                                                                                       // 2553
		if (this.isTouch) {                                                                                                  // 2554
			this.listenTo($(document), {                                                                                        // 2555
				touchmove: this.handleTouchMove,                                                                                   // 2556
				touchend: this.endInteraction,                                                                                     // 2557
				touchcancel: this.endInteraction,                                                                                  // 2558
                                                                                                                       // 2559
				// Sometimes touchend doesn't fire                                                                                 // 2560
				// (can't figure out why. touchcancel doesn't fire either. has to do with scrolling?)                              // 2561
				// If another touchstart happens, we know it's bogus, so cancel the drag.                                          // 2562
				// touchend will continue to be broken until user does a shorttap/scroll, but this is best we can do.              // 2563
				touchstart: function(ev) {                                                                                         // 2564
					if (touchStartIgnores) { // bindHandlers is called from within a touchstart,                                      // 2565
						touchStartIgnores--; // and we don't want this to fire immediately, so ignore.                                   // 2566
					}                                                                                                                 // 2567
					else {                                                                                                            // 2568
						_this.endInteraction(ev, true); // isCancelled=true                                                              // 2569
					}                                                                                                                 // 2570
				}                                                                                                                  // 2571
			});                                                                                                                 // 2572
                                                                                                                       // 2573
			// listen to ALL scroll actions on the page                                                                         // 2574
			if (                                                                                                                // 2575
				!bindAnyScroll(this.handleTouchScrollProxy) && // hopefully this works and short-circuits the rest                 // 2576
				this.scrollEl // otherwise, attach a single handler to this                                                        // 2577
			) {                                                                                                                 // 2578
				this.listenTo(this.scrollEl, 'scroll', this.handleTouchScroll);                                                    // 2579
			}                                                                                                                   // 2580
		}                                                                                                                    // 2581
		else {                                                                                                               // 2582
			this.listenTo($(document), {                                                                                        // 2583
				mousemove: this.handleMouseMove,                                                                                   // 2584
				mouseup: this.endInteraction                                                                                       // 2585
			});                                                                                                                 // 2586
		}                                                                                                                    // 2587
                                                                                                                       // 2588
		this.listenTo($(document), {                                                                                         // 2589
			selectstart: preventDefault, // don't allow selection while dragging                                                // 2590
			contextmenu: preventDefault // long taps would open menu on Chrome dev tools                                        // 2591
		});                                                                                                                  // 2592
	},                                                                                                                    // 2593
                                                                                                                       // 2594
                                                                                                                       // 2595
	unbindHandlers: function() {                                                                                          // 2596
		this.stopListeningTo($(document));                                                                                   // 2597
                                                                                                                       // 2598
		// unbind scroll listening                                                                                           // 2599
		unbindAnyScroll(this.handleTouchScrollProxy);                                                                        // 2600
		if (this.scrollEl) {                                                                                                 // 2601
			this.stopListeningTo(this.scrollEl, 'scroll');                                                                      // 2602
		}                                                                                                                    // 2603
	},                                                                                                                    // 2604
                                                                                                                       // 2605
                                                                                                                       // 2606
	// Drag (high-level)                                                                                                  // 2607
	// -----------------------------------------------------------------------------------------------------------------  // 2608
                                                                                                                       // 2609
                                                                                                                       // 2610
	// extraOptions ignored if drag already started                                                                       // 2611
	startDrag: function(ev, extraOptions) {                                                                               // 2612
		this.startInteraction(ev, extraOptions); // ensure interaction began                                                 // 2613
                                                                                                                       // 2614
		if (!this.isDragging) {                                                                                              // 2615
			this.isDragging = true;                                                                                             // 2616
			this.handleDragStart(ev);                                                                                           // 2617
		}                                                                                                                    // 2618
	},                                                                                                                    // 2619
                                                                                                                       // 2620
                                                                                                                       // 2621
	handleDragStart: function(ev) {                                                                                       // 2622
		this.trigger('dragStart', ev);                                                                                       // 2623
		this.initHrefHack();                                                                                                 // 2624
	},                                                                                                                    // 2625
                                                                                                                       // 2626
                                                                                                                       // 2627
	handleMove: function(ev) {                                                                                            // 2628
		var dx = getEvX(ev) - this.originX;                                                                                  // 2629
		var dy = getEvY(ev) - this.originY;                                                                                  // 2630
		var minDistance = this.minDistance;                                                                                  // 2631
		var distanceSq; // current distance from the origin, squared                                                         // 2632
                                                                                                                       // 2633
		if (!this.isDistanceSurpassed) {                                                                                     // 2634
			distanceSq = dx * dx + dy * dy;                                                                                     // 2635
			if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem                                           // 2636
				this.handleDistanceSurpassed(ev);                                                                                  // 2637
			}                                                                                                                   // 2638
		}                                                                                                                    // 2639
                                                                                                                       // 2640
		if (this.isDragging) {                                                                                               // 2641
			this.handleDrag(dx, dy, ev);                                                                                        // 2642
		}                                                                                                                    // 2643
	},                                                                                                                    // 2644
                                                                                                                       // 2645
                                                                                                                       // 2646
	// Called while the mouse is being moved and when we know a legitimate drag is taking place                           // 2647
	handleDrag: function(dx, dy, ev) {                                                                                    // 2648
		this.trigger('drag', dx, dy, ev);                                                                                    // 2649
		this.updateAutoScroll(ev); // will possibly cause scrolling                                                          // 2650
	},                                                                                                                    // 2651
                                                                                                                       // 2652
                                                                                                                       // 2653
	endDrag: function(ev) {                                                                                               // 2654
		if (this.isDragging) {                                                                                               // 2655
			this.isDragging = false;                                                                                            // 2656
			this.handleDragEnd(ev);                                                                                             // 2657
		}                                                                                                                    // 2658
	},                                                                                                                    // 2659
                                                                                                                       // 2660
                                                                                                                       // 2661
	handleDragEnd: function(ev) {                                                                                         // 2662
		this.trigger('dragEnd', ev);                                                                                         // 2663
		this.destroyHrefHack();                                                                                              // 2664
	},                                                                                                                    // 2665
                                                                                                                       // 2666
                                                                                                                       // 2667
	// Delay                                                                                                              // 2668
	// -----------------------------------------------------------------------------------------------------------------  // 2669
                                                                                                                       // 2670
                                                                                                                       // 2671
	startDelay: function(initialEv) {                                                                                     // 2672
		var _this = this;                                                                                                    // 2673
                                                                                                                       // 2674
		if (this.delay) {                                                                                                    // 2675
			this.delayTimeoutId = setTimeout(function() {                                                                       // 2676
				_this.handleDelayEnd(initialEv);                                                                                   // 2677
			}, this.delay);                                                                                                     // 2678
		}                                                                                                                    // 2679
		else {                                                                                                               // 2680
			this.handleDelayEnd(initialEv);                                                                                     // 2681
		}                                                                                                                    // 2682
	},                                                                                                                    // 2683
                                                                                                                       // 2684
                                                                                                                       // 2685
	handleDelayEnd: function(initialEv) {                                                                                 // 2686
		this.isDelayEnded = true;                                                                                            // 2687
                                                                                                                       // 2688
		if (this.isDistanceSurpassed) {                                                                                      // 2689
			this.startDrag(initialEv);                                                                                          // 2690
		}                                                                                                                    // 2691
	},                                                                                                                    // 2692
                                                                                                                       // 2693
                                                                                                                       // 2694
	// Distance                                                                                                           // 2695
	// -----------------------------------------------------------------------------------------------------------------  // 2696
                                                                                                                       // 2697
                                                                                                                       // 2698
	handleDistanceSurpassed: function(ev) {                                                                               // 2699
		this.isDistanceSurpassed = true;                                                                                     // 2700
                                                                                                                       // 2701
		if (this.isDelayEnded) {                                                                                             // 2702
			this.startDrag(ev);                                                                                                 // 2703
		}                                                                                                                    // 2704
	},                                                                                                                    // 2705
                                                                                                                       // 2706
                                                                                                                       // 2707
	// Mouse / Touch                                                                                                      // 2708
	// -----------------------------------------------------------------------------------------------------------------  // 2709
                                                                                                                       // 2710
                                                                                                                       // 2711
	handleTouchMove: function(ev) {                                                                                       // 2712
		// prevent inertia and touchmove-scrolling while dragging                                                            // 2713
		if (this.isDragging) {                                                                                               // 2714
			ev.preventDefault();                                                                                                // 2715
		}                                                                                                                    // 2716
                                                                                                                       // 2717
		this.handleMove(ev);                                                                                                 // 2718
	},                                                                                                                    // 2719
                                                                                                                       // 2720
                                                                                                                       // 2721
	handleMouseMove: function(ev) {                                                                                       // 2722
		this.handleMove(ev);                                                                                                 // 2723
	},                                                                                                                    // 2724
                                                                                                                       // 2725
                                                                                                                       // 2726
	// Scrolling (unrelated to auto-scroll)                                                                               // 2727
	// -----------------------------------------------------------------------------------------------------------------  // 2728
                                                                                                                       // 2729
                                                                                                                       // 2730
	handleTouchScroll: function(ev) {                                                                                     // 2731
		// if the drag is being initiated by touch, but a scroll happens before                                              // 2732
		// the drag-initiating delay is over, cancel the drag                                                                // 2733
		if (!this.isDragging) {                                                                                              // 2734
			this.endInteraction(ev, true); // isCancelled=true                                                                  // 2735
		}                                                                                                                    // 2736
	},                                                                                                                    // 2737
                                                                                                                       // 2738
                                                                                                                       // 2739
	// <A> HREF Hack                                                                                                      // 2740
	// -----------------------------------------------------------------------------------------------------------------  // 2741
                                                                                                                       // 2742
                                                                                                                       // 2743
	initHrefHack: function() {                                                                                            // 2744
		var subjectEl = this.subjectEl;                                                                                      // 2745
                                                                                                                       // 2746
		// remove a mousedown'd <a>'s href so it is not visited (IE8 bug)                                                    // 2747
		if ((this.subjectHref = subjectEl ? subjectEl.attr('href') : null)) {                                                // 2748
			subjectEl.removeAttr('href');                                                                                       // 2749
		}                                                                                                                    // 2750
	},                                                                                                                    // 2751
                                                                                                                       // 2752
                                                                                                                       // 2753
	destroyHrefHack: function() {                                                                                         // 2754
		var subjectEl = this.subjectEl;                                                                                      // 2755
		var subjectHref = this.subjectHref;                                                                                  // 2756
                                                                                                                       // 2757
		// restore a mousedown'd <a>'s href (for IE8 bug)                                                                    // 2758
		setTimeout(function() { // must be outside of the click's execution                                                  // 2759
			if (subjectHref) {                                                                                                  // 2760
				subjectEl.attr('href', subjectHref);                                                                               // 2761
			}                                                                                                                   // 2762
		}, 0);                                                                                                               // 2763
	},                                                                                                                    // 2764
                                                                                                                       // 2765
                                                                                                                       // 2766
	// Utils                                                                                                              // 2767
	// -----------------------------------------------------------------------------------------------------------------  // 2768
                                                                                                                       // 2769
                                                                                                                       // 2770
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 2771
	// Arguments beyond the first `name` are forwarded on.                                                                // 2772
	trigger: function(name) {                                                                                             // 2773
		if (this.options[name]) {                                                                                            // 2774
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 2775
		}                                                                                                                    // 2776
		// makes _methods callable by event name. TODO: kill this                                                            // 2777
		if (this['_' + name]) {                                                                                              // 2778
			this['_' + name].apply(this, Array.prototype.slice.call(arguments, 1));                                             // 2779
		}                                                                                                                    // 2780
	}                                                                                                                     // 2781
                                                                                                                       // 2782
                                                                                                                       // 2783
});                                                                                                                    // 2784
                                                                                                                       // 2785
;;                                                                                                                     // 2786
/*                                                                                                                     // 2787
this.scrollEl is set in DragListener                                                                                   // 2788
*/                                                                                                                     // 2789
DragListener.mixin({                                                                                                   // 2790
                                                                                                                       // 2791
	isAutoScroll: false,                                                                                                  // 2792
                                                                                                                       // 2793
	scrollBounds: null, // { top, bottom, left, right }                                                                   // 2794
	scrollTopVel: null, // pixels per second                                                                              // 2795
	scrollLeftVel: null, // pixels per second                                                                             // 2796
	scrollIntervalId: null, // ID of setTimeout for scrolling animation loop                                              // 2797
                                                                                                                       // 2798
	// defaults                                                                                                           // 2799
	scrollSensitivity: 30, // pixels from edge for scrolling to start                                                     // 2800
	scrollSpeed: 200, // pixels per second, at maximum speed                                                              // 2801
	scrollIntervalMs: 50, // millisecond wait between scroll increment                                                    // 2802
                                                                                                                       // 2803
                                                                                                                       // 2804
	initAutoScroll: function() {                                                                                          // 2805
		var scrollEl = this.scrollEl;                                                                                        // 2806
                                                                                                                       // 2807
		this.isAutoScroll =                                                                                                  // 2808
			this.options.scroll &&                                                                                              // 2809
			scrollEl &&                                                                                                         // 2810
			!scrollEl.is(window) &&                                                                                             // 2811
			!scrollEl.is(document);                                                                                             // 2812
                                                                                                                       // 2813
		if (this.isAutoScroll) {                                                                                             // 2814
			// debounce makes sure rapid calls don't happen                                                                     // 2815
			this.listenTo(scrollEl, 'scroll', debounce(this.handleDebouncedScroll, 100));                                       // 2816
		}                                                                                                                    // 2817
	},                                                                                                                    // 2818
                                                                                                                       // 2819
                                                                                                                       // 2820
	destroyAutoScroll: function() {                                                                                       // 2821
		this.endAutoScroll(); // kill any animation loop                                                                     // 2822
                                                                                                                       // 2823
		// remove the scroll handler if there is a scrollEl                                                                  // 2824
		if (this.isAutoScroll) {                                                                                             // 2825
			this.stopListeningTo(this.scrollEl, 'scroll'); // will probably get removed by unbindHandlers too :(                // 2826
		}                                                                                                                    // 2827
	},                                                                                                                    // 2828
                                                                                                                       // 2829
                                                                                                                       // 2830
	// Computes and stores the bounding rectangle of scrollEl                                                             // 2831
	computeScrollBounds: function() {                                                                                     // 2832
		if (this.isAutoScroll) {                                                                                             // 2833
			this.scrollBounds = getOuterRect(this.scrollEl);                                                                    // 2834
			// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars                         // 2835
		}                                                                                                                    // 2836
	},                                                                                                                    // 2837
                                                                                                                       // 2838
                                                                                                                       // 2839
	// Called when the dragging is in progress and scrolling should be updated                                            // 2840
	updateAutoScroll: function(ev) {                                                                                      // 2841
		var sensitivity = this.scrollSensitivity;                                                                            // 2842
		var bounds = this.scrollBounds;                                                                                      // 2843
		var topCloseness, bottomCloseness;                                                                                   // 2844
		var leftCloseness, rightCloseness;                                                                                   // 2845
		var topVel = 0;                                                                                                      // 2846
		var leftVel = 0;                                                                                                     // 2847
                                                                                                                       // 2848
		if (bounds) { // only scroll if scrollEl exists                                                                      // 2849
                                                                                                                       // 2850
			// compute closeness to edges. valid range is from 0.0 - 1.0                                                        // 2851
			topCloseness = (sensitivity - (getEvY(ev) - bounds.top)) / sensitivity;                                             // 2852
			bottomCloseness = (sensitivity - (bounds.bottom - getEvY(ev))) / sensitivity;                                       // 2853
			leftCloseness = (sensitivity - (getEvX(ev) - bounds.left)) / sensitivity;                                           // 2854
			rightCloseness = (sensitivity - (bounds.right - getEvX(ev))) / sensitivity;                                         // 2855
                                                                                                                       // 2856
			// translate vertical closeness into velocity.                                                                      // 2857
			// mouse must be completely in bounds for velocity to happen.                                                       // 2858
			if (topCloseness >= 0 && topCloseness <= 1) {                                                                       // 2859
				topVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up                                       // 2860
			}                                                                                                                   // 2861
			else if (bottomCloseness >= 0 && bottomCloseness <= 1) {                                                            // 2862
				topVel = bottomCloseness * this.scrollSpeed;                                                                       // 2863
			}                                                                                                                   // 2864
                                                                                                                       // 2865
			// translate horizontal closeness into velocity                                                                     // 2866
			if (leftCloseness >= 0 && leftCloseness <= 1) {                                                                     // 2867
				leftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left                                   // 2868
			}                                                                                                                   // 2869
			else if (rightCloseness >= 0 && rightCloseness <= 1) {                                                              // 2870
				leftVel = rightCloseness * this.scrollSpeed;                                                                       // 2871
			}                                                                                                                   // 2872
		}                                                                                                                    // 2873
                                                                                                                       // 2874
		this.setScrollVel(topVel, leftVel);                                                                                  // 2875
	},                                                                                                                    // 2876
                                                                                                                       // 2877
                                                                                                                       // 2878
	// Sets the speed-of-scrolling for the scrollEl                                                                       // 2879
	setScrollVel: function(topVel, leftVel) {                                                                             // 2880
                                                                                                                       // 2881
		this.scrollTopVel = topVel;                                                                                          // 2882
		this.scrollLeftVel = leftVel;                                                                                        // 2883
                                                                                                                       // 2884
		this.constrainScrollVel(); // massages into realistic values                                                         // 2885
                                                                                                                       // 2886
		// if there is non-zero velocity, and an animation loop hasn't already started, then START                           // 2887
		if ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {                                           // 2888
			this.scrollIntervalId = setInterval(                                                                                // 2889
				proxy(this, 'scrollIntervalFunc'), // scope to `this`                                                              // 2890
				this.scrollIntervalMs                                                                                              // 2891
			);                                                                                                                  // 2892
		}                                                                                                                    // 2893
	},                                                                                                                    // 2894
                                                                                                                       // 2895
                                                                                                                       // 2896
	// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way                         // 2897
	constrainScrollVel: function() {                                                                                      // 2898
		var el = this.scrollEl;                                                                                              // 2899
                                                                                                                       // 2900
		if (this.scrollTopVel < 0) { // scrolling up?                                                                        // 2901
			if (el.scrollTop() <= 0) { // already scrolled all the way up?                                                      // 2902
				this.scrollTopVel = 0;                                                                                             // 2903
			}                                                                                                                   // 2904
		}                                                                                                                    // 2905
		else if (this.scrollTopVel > 0) { // scrolling down?                                                                 // 2906
			if (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?              // 2907
				this.scrollTopVel = 0;                                                                                             // 2908
			}                                                                                                                   // 2909
		}                                                                                                                    // 2910
                                                                                                                       // 2911
		if (this.scrollLeftVel < 0) { // scrolling left?                                                                     // 2912
			if (el.scrollLeft() <= 0) { // already scrolled all the left?                                                       // 2913
				this.scrollLeftVel = 0;                                                                                            // 2914
			}                                                                                                                   // 2915
		}                                                                                                                    // 2916
		else if (this.scrollLeftVel > 0) { // scrolling right?                                                               // 2917
			if (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?              // 2918
				this.scrollLeftVel = 0;                                                                                            // 2919
			}                                                                                                                   // 2920
		}                                                                                                                    // 2921
	},                                                                                                                    // 2922
                                                                                                                       // 2923
                                                                                                                       // 2924
	// This function gets called during every iteration of the scrolling animation loop                                   // 2925
	scrollIntervalFunc: function() {                                                                                      // 2926
		var el = this.scrollEl;                                                                                              // 2927
		var frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by        // 2928
                                                                                                                       // 2929
		// change the value of scrollEl's scroll                                                                             // 2930
		if (this.scrollTopVel) {                                                                                             // 2931
			el.scrollTop(el.scrollTop() + this.scrollTopVel * frac);                                                            // 2932
		}                                                                                                                    // 2933
		if (this.scrollLeftVel) {                                                                                            // 2934
			el.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);                                                         // 2935
		}                                                                                                                    // 2936
                                                                                                                       // 2937
		this.constrainScrollVel(); // since the scroll values changed, recompute the velocities                              // 2938
                                                                                                                       // 2939
		// if scrolled all the way, which causes the vels to be zero, stop the animation loop                                // 2940
		if (!this.scrollTopVel && !this.scrollLeftVel) {                                                                     // 2941
			this.endAutoScroll();                                                                                               // 2942
		}                                                                                                                    // 2943
	},                                                                                                                    // 2944
                                                                                                                       // 2945
                                                                                                                       // 2946
	// Kills any existing scrolling animation loop                                                                        // 2947
	endAutoScroll: function() {                                                                                           // 2948
		if (this.scrollIntervalId) {                                                                                         // 2949
			clearInterval(this.scrollIntervalId);                                                                               // 2950
			this.scrollIntervalId = null;                                                                                       // 2951
                                                                                                                       // 2952
			this.handleScrollEnd();                                                                                             // 2953
		}                                                                                                                    // 2954
	},                                                                                                                    // 2955
                                                                                                                       // 2956
                                                                                                                       // 2957
	// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)                                      // 2958
	handleDebouncedScroll: function() {                                                                                   // 2959
		// recompute all coordinates, but *only* if this is *not* part of our scrolling animation                            // 2960
		if (!this.scrollIntervalId) {                                                                                        // 2961
			this.handleScrollEnd();                                                                                             // 2962
		}                                                                                                                    // 2963
	},                                                                                                                    // 2964
                                                                                                                       // 2965
                                                                                                                       // 2966
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2967
	handleScrollEnd: function() {                                                                                         // 2968
	}                                                                                                                     // 2969
                                                                                                                       // 2970
});                                                                                                                    // 2971
;;                                                                                                                     // 2972
                                                                                                                       // 2973
/* Tracks mouse movements over a component and raises events about which hit the mouse is over.                        // 2974
------------------------------------------------------------------------------------------------------------------------
options:                                                                                                               // 2976
- subjectEl                                                                                                            // 2977
- subjectCenter                                                                                                        // 2978
*/                                                                                                                     // 2979
                                                                                                                       // 2980
var HitDragListener = DragListener.extend({                                                                            // 2981
                                                                                                                       // 2982
	component: null, // converts coordinates to hits                                                                      // 2983
		// methods: prepareHits, releaseHits, queryHit                                                                       // 2984
                                                                                                                       // 2985
	origHit: null, // the hit the mouse was over when listening started                                                   // 2986
	hit: null, // the hit the mouse is over                                                                               // 2987
	coordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions                     // 2988
                                                                                                                       // 2989
                                                                                                                       // 2990
	constructor: function(component, options) {                                                                           // 2991
		DragListener.call(this, options); // call the super-constructor                                                      // 2992
                                                                                                                       // 2993
		this.component = component;                                                                                          // 2994
	},                                                                                                                    // 2995
                                                                                                                       // 2996
                                                                                                                       // 2997
	// Called when drag listening starts (but a real drag has not necessarily began).                                     // 2998
	// ev might be undefined if dragging was started manually.                                                            // 2999
	handleInteractionStart: function(ev) {                                                                                // 3000
		var subjectEl = this.subjectEl;                                                                                      // 3001
		var subjectRect;                                                                                                     // 3002
		var origPoint;                                                                                                       // 3003
		var point;                                                                                                           // 3004
                                                                                                                       // 3005
		this.computeCoords();                                                                                                // 3006
                                                                                                                       // 3007
		if (ev) {                                                                                                            // 3008
			origPoint = { left: getEvX(ev), top: getEvY(ev) };                                                                  // 3009
			point = origPoint;                                                                                                  // 3010
                                                                                                                       // 3011
			// constrain the point to bounds of the element being dragged                                                       // 3012
			if (subjectEl) {                                                                                                    // 3013
				subjectRect = getOuterRect(subjectEl); // used for centering as well                                               // 3014
				point = constrainPoint(point, subjectRect);                                                                        // 3015
			}                                                                                                                   // 3016
                                                                                                                       // 3017
			this.origHit = this.queryHit(point.left, point.top);                                                                // 3018
                                                                                                                       // 3019
			// treat the center of the subject as the collision point?                                                          // 3020
			if (subjectEl && this.options.subjectCenter) {                                                                      // 3021
                                                                                                                       // 3022
				// only consider the area the subject overlaps the hit. best for large subjects.                                   // 3023
				// TODO: skip this if hit didn't supply left/right/top/bottom                                                      // 3024
				if (this.origHit) {                                                                                                // 3025
					subjectRect = intersectRects(this.origHit, subjectRect) ||                                                        // 3026
						subjectRect; // in case there is no intersection                                                                 // 3027
				}                                                                                                                  // 3028
                                                                                                                       // 3029
				point = getRectCenter(subjectRect);                                                                                // 3030
			}                                                                                                                   // 3031
                                                                                                                       // 3032
			this.coordAdjust = diffPoints(point, origPoint); // point - origPoint                                               // 3033
		}                                                                                                                    // 3034
		else {                                                                                                               // 3035
			this.origHit = null;                                                                                                // 3036
			this.coordAdjust = null;                                                                                            // 3037
		}                                                                                                                    // 3038
                                                                                                                       // 3039
		// call the super-method. do it after origHit has been computed                                                      // 3040
		DragListener.prototype.handleInteractionStart.apply(this, arguments);                                                // 3041
	},                                                                                                                    // 3042
                                                                                                                       // 3043
                                                                                                                       // 3044
	// Recomputes the drag-critical positions of elements                                                                 // 3045
	computeCoords: function() {                                                                                           // 3046
		this.component.prepareHits();                                                                                        // 3047
		this.computeScrollBounds(); // why is this here??????                                                                // 3048
	},                                                                                                                    // 3049
                                                                                                                       // 3050
                                                                                                                       // 3051
	// Called when the actual drag has started                                                                            // 3052
	handleDragStart: function(ev) {                                                                                       // 3053
		var hit;                                                                                                             // 3054
                                                                                                                       // 3055
		DragListener.prototype.handleDragStart.apply(this, arguments); // call the super-method                              // 3056
                                                                                                                       // 3057
		// might be different from this.origHit if the min-distance is large                                                 // 3058
		hit = this.queryHit(getEvX(ev), getEvY(ev));                                                                         // 3059
                                                                                                                       // 3060
		// report the initial hit the mouse is over                                                                          // 3061
		// especially important if no min-distance and drag starts immediately                                               // 3062
		if (hit) {                                                                                                           // 3063
			this.handleHitOver(hit);                                                                                            // 3064
		}                                                                                                                    // 3065
	},                                                                                                                    // 3066
                                                                                                                       // 3067
                                                                                                                       // 3068
	// Called when the drag moves                                                                                         // 3069
	handleDrag: function(dx, dy, ev) {                                                                                    // 3070
		var hit;                                                                                                             // 3071
                                                                                                                       // 3072
		DragListener.prototype.handleDrag.apply(this, arguments); // call the super-method                                   // 3073
                                                                                                                       // 3074
		hit = this.queryHit(getEvX(ev), getEvY(ev));                                                                         // 3075
                                                                                                                       // 3076
		if (!isHitsEqual(hit, this.hit)) { // a different hit than before?                                                   // 3077
			if (this.hit) {                                                                                                     // 3078
				this.handleHitOut();                                                                                               // 3079
			}                                                                                                                   // 3080
			if (hit) {                                                                                                          // 3081
				this.handleHitOver(hit);                                                                                           // 3082
			}                                                                                                                   // 3083
		}                                                                                                                    // 3084
	},                                                                                                                    // 3085
                                                                                                                       // 3086
                                                                                                                       // 3087
	// Called when dragging has been stopped                                                                              // 3088
	handleDragEnd: function() {                                                                                           // 3089
		this.handleHitDone();                                                                                                // 3090
		DragListener.prototype.handleDragEnd.apply(this, arguments); // call the super-method                                // 3091
	},                                                                                                                    // 3092
                                                                                                                       // 3093
                                                                                                                       // 3094
	// Called when a the mouse has just moved over a new hit                                                              // 3095
	handleHitOver: function(hit) {                                                                                        // 3096
		var isOrig = isHitsEqual(hit, this.origHit);                                                                         // 3097
                                                                                                                       // 3098
		this.hit = hit;                                                                                                      // 3099
                                                                                                                       // 3100
		this.trigger('hitOver', this.hit, isOrig, this.origHit);                                                             // 3101
	},                                                                                                                    // 3102
                                                                                                                       // 3103
                                                                                                                       // 3104
	// Called when the mouse has just moved out of a hit                                                                  // 3105
	handleHitOut: function() {                                                                                            // 3106
		if (this.hit) {                                                                                                      // 3107
			this.trigger('hitOut', this.hit);                                                                                   // 3108
			this.handleHitDone();                                                                                               // 3109
			this.hit = null;                                                                                                    // 3110
		}                                                                                                                    // 3111
	},                                                                                                                    // 3112
                                                                                                                       // 3113
                                                                                                                       // 3114
	// Called after a hitOut. Also called before a dragStop                                                               // 3115
	handleHitDone: function() {                                                                                           // 3116
		if (this.hit) {                                                                                                      // 3117
			this.trigger('hitDone', this.hit);                                                                                  // 3118
		}                                                                                                                    // 3119
	},                                                                                                                    // 3120
                                                                                                                       // 3121
                                                                                                                       // 3122
	// Called when the interaction ends, whether there was a real drag or not                                             // 3123
	handleInteractionEnd: function() {                                                                                    // 3124
		DragListener.prototype.handleInteractionEnd.apply(this, arguments); // call the super-method                         // 3125
                                                                                                                       // 3126
		this.origHit = null;                                                                                                 // 3127
		this.hit = null;                                                                                                     // 3128
                                                                                                                       // 3129
		this.component.releaseHits();                                                                                        // 3130
	},                                                                                                                    // 3131
                                                                                                                       // 3132
                                                                                                                       // 3133
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 3134
	handleScrollEnd: function() {                                                                                         // 3135
		DragListener.prototype.handleScrollEnd.apply(this, arguments); // call the super-method                              // 3136
                                                                                                                       // 3137
		this.computeCoords(); // hits' absolute positions will be in new places. recompute                                   // 3138
	},                                                                                                                    // 3139
                                                                                                                       // 3140
                                                                                                                       // 3141
	// Gets the hit underneath the coordinates for the given mouse event                                                  // 3142
	queryHit: function(left, top) {                                                                                       // 3143
                                                                                                                       // 3144
		if (this.coordAdjust) {                                                                                              // 3145
			left += this.coordAdjust.left;                                                                                      // 3146
			top += this.coordAdjust.top;                                                                                        // 3147
		}                                                                                                                    // 3148
                                                                                                                       // 3149
		return this.component.queryHit(left, top);                                                                           // 3150
	}                                                                                                                     // 3151
                                                                                                                       // 3152
});                                                                                                                    // 3153
                                                                                                                       // 3154
                                                                                                                       // 3155
// Returns `true` if the hits are identically equal. `false` otherwise. Must be from the same component.               // 3156
// Two null values will be considered equal, as two "out of the component" states are the same.                        // 3157
function isHitsEqual(hit0, hit1) {                                                                                     // 3158
                                                                                                                       // 3159
	if (!hit0 && !hit1) {                                                                                                 // 3160
		return true;                                                                                                         // 3161
	}                                                                                                                     // 3162
                                                                                                                       // 3163
	if (hit0 && hit1) {                                                                                                   // 3164
		return hit0.component === hit1.component &&                                                                          // 3165
			isHitPropsWithin(hit0, hit1) &&                                                                                     // 3166
			isHitPropsWithin(hit1, hit0); // ensures all props are identical                                                    // 3167
	}                                                                                                                     // 3168
                                                                                                                       // 3169
	return false;                                                                                                         // 3170
}                                                                                                                      // 3171
                                                                                                                       // 3172
                                                                                                                       // 3173
// Returns true if all of subHit's non-standard properties are within superHit                                         // 3174
function isHitPropsWithin(subHit, superHit) {                                                                          // 3175
	for (var propName in subHit) {                                                                                        // 3176
		if (!/^(component|left|right|top|bottom)$/.test(propName)) {                                                         // 3177
			if (subHit[propName] !== superHit[propName]) {                                                                      // 3178
				return false;                                                                                                      // 3179
			}                                                                                                                   // 3180
		}                                                                                                                    // 3181
	}                                                                                                                     // 3182
	return true;                                                                                                          // 3183
}                                                                                                                      // 3184
                                                                                                                       // 3185
;;                                                                                                                     // 3186
                                                                                                                       // 3187
/* Creates a clone of an element and lets it track the mouse as it moves                                               // 3188
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 3190
var MouseFollower = Class.extend(ListenerMixin, {                                                                      // 3191
                                                                                                                       // 3192
	options: null,                                                                                                        // 3193
                                                                                                                       // 3194
	sourceEl: null, // the element that will be cloned and made to look like it is dragging                               // 3195
	el: null, // the clone of `sourceEl` that will track the mouse                                                        // 3196
	parentEl: null, // the element that `el` (the clone) will be attached to                                              // 3197
                                                                                                                       // 3198
	// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl            // 3199
	top0: null,                                                                                                           // 3200
	left0: null,                                                                                                          // 3201
                                                                                                                       // 3202
	// the absolute coordinates of the initiating touch/mouse action                                                      // 3203
	y0: null,                                                                                                             // 3204
	x0: null,                                                                                                             // 3205
                                                                                                                       // 3206
	// the number of pixels the mouse has moved from its initial position                                                 // 3207
	topDelta: null,                                                                                                       // 3208
	leftDelta: null,                                                                                                      // 3209
                                                                                                                       // 3210
	isFollowing: false,                                                                                                   // 3211
	isHidden: false,                                                                                                      // 3212
	isAnimating: false, // doing the revert animation?                                                                    // 3213
                                                                                                                       // 3214
	constructor: function(sourceEl, options) {                                                                            // 3215
		this.options = options = options || {};                                                                              // 3216
		this.sourceEl = sourceEl;                                                                                            // 3217
		this.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent          // 3218
	},                                                                                                                    // 3219
                                                                                                                       // 3220
                                                                                                                       // 3221
	// Causes the element to start following the mouse                                                                    // 3222
	start: function(ev) {                                                                                                 // 3223
		if (!this.isFollowing) {                                                                                             // 3224
			this.isFollowing = true;                                                                                            // 3225
                                                                                                                       // 3226
			this.y0 = getEvY(ev);                                                                                               // 3227
			this.x0 = getEvX(ev);                                                                                               // 3228
			this.topDelta = 0;                                                                                                  // 3229
			this.leftDelta = 0;                                                                                                 // 3230
                                                                                                                       // 3231
			if (!this.isHidden) {                                                                                               // 3232
				this.updatePosition();                                                                                             // 3233
			}                                                                                                                   // 3234
                                                                                                                       // 3235
			if (getEvIsTouch(ev)) {                                                                                             // 3236
				this.listenTo($(document), 'touchmove', this.handleMove);                                                          // 3237
			}                                                                                                                   // 3238
			else {                                                                                                              // 3239
				this.listenTo($(document), 'mousemove', this.handleMove);                                                          // 3240
			}                                                                                                                   // 3241
		}                                                                                                                    // 3242
	},                                                                                                                    // 3243
                                                                                                                       // 3244
                                                                                                                       // 3245
	// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.   // 3246
	// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.                // 3247
	stop: function(shouldRevert, callback) {                                                                              // 3248
		var _this = this;                                                                                                    // 3249
		var revertDuration = this.options.revertDuration;                                                                    // 3250
                                                                                                                       // 3251
		function complete() {                                                                                                // 3252
			this.isAnimating = false;                                                                                           // 3253
			_this.removeElement();                                                                                              // 3254
                                                                                                                       // 3255
			this.top0 = this.left0 = null; // reset state for future updatePosition calls                                       // 3256
                                                                                                                       // 3257
			if (callback) {                                                                                                     // 3258
				callback();                                                                                                        // 3259
			}                                                                                                                   // 3260
		}                                                                                                                    // 3261
                                                                                                                       // 3262
		if (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time                      // 3263
			this.isFollowing = false;                                                                                           // 3264
                                                                                                                       // 3265
			this.stopListeningTo($(document));                                                                                  // 3266
                                                                                                                       // 3267
			if (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?                                   // 3268
				this.isAnimating = true;                                                                                           // 3269
				this.el.animate({                                                                                                  // 3270
					top: this.top0,                                                                                                   // 3271
					left: this.left0                                                                                                  // 3272
				}, {                                                                                                               // 3273
					duration: revertDuration,                                                                                         // 3274
					complete: complete                                                                                                // 3275
				});                                                                                                                // 3276
			}                                                                                                                   // 3277
			else {                                                                                                              // 3278
				complete();                                                                                                        // 3279
			}                                                                                                                   // 3280
		}                                                                                                                    // 3281
	},                                                                                                                    // 3282
                                                                                                                       // 3283
                                                                                                                       // 3284
	// Gets the tracking element. Create it if necessary                                                                  // 3285
	getEl: function() {                                                                                                   // 3286
		var el = this.el;                                                                                                    // 3287
                                                                                                                       // 3288
		if (!el) {                                                                                                           // 3289
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 3290
			el = this.el = this.sourceEl.clone()                                                                                // 3291
				.addClass(this.options.additionalClass || '')                                                                      // 3292
				.css({                                                                                                             // 3293
					position: 'absolute',                                                                                             // 3294
					visibility: '', // in case original element was hidden (commonly through hideEvents())                            // 3295
					display: this.isHidden ? 'none' : '', // for when initially hidden                                                // 3296
					margin: 0,                                                                                                        // 3297
					right: 'auto', // erase and set width instead                                                                     // 3298
					bottom: 'auto', // erase and set height instead                                                                   // 3299
					width: this.sourceEl.width(), // explicit height in case there was a 'right' value                                // 3300
					height: this.sourceEl.height(), // explicit width in case there was a 'bottom' value                              // 3301
					opacity: this.options.opacity || '',                                                                              // 3302
					zIndex: this.options.zIndex                                                                                       // 3303
				});                                                                                                                // 3304
                                                                                                                       // 3305
			// we don't want long taps or any mouse interaction causing selection/menus.                                        // 3306
			// would use preventSelection(), but that prevents selectstart, causing problems.                                   // 3307
			el.addClass('fc-unselectable');                                                                                     // 3308
                                                                                                                       // 3309
			el.appendTo(this.parentEl);                                                                                         // 3310
		}                                                                                                                    // 3311
                                                                                                                       // 3312
		return el;                                                                                                           // 3313
	},                                                                                                                    // 3314
                                                                                                                       // 3315
                                                                                                                       // 3316
	// Removes the tracking element if it has already been created                                                        // 3317
	removeElement: function() {                                                                                           // 3318
		if (this.el) {                                                                                                       // 3319
			this.el.remove();                                                                                                   // 3320
			this.el = null;                                                                                                     // 3321
		}                                                                                                                    // 3322
	},                                                                                                                    // 3323
                                                                                                                       // 3324
                                                                                                                       // 3325
	// Update the CSS position of the tracking element                                                                    // 3326
	updatePosition: function() {                                                                                          // 3327
		var sourceOffset;                                                                                                    // 3328
		var origin;                                                                                                          // 3329
                                                                                                                       // 3330
		this.getEl(); // ensure this.el                                                                                      // 3331
                                                                                                                       // 3332
		// make sure origin info was computed                                                                                // 3333
		if (this.top0 === null) {                                                                                            // 3334
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 3335
			sourceOffset = this.sourceEl.offset();                                                                              // 3336
			origin = this.el.offsetParent().offset();                                                                           // 3337
			this.top0 = sourceOffset.top - origin.top;                                                                          // 3338
			this.left0 = sourceOffset.left - origin.left;                                                                       // 3339
		}                                                                                                                    // 3340
                                                                                                                       // 3341
		this.el.css({                                                                                                        // 3342
			top: this.top0 + this.topDelta,                                                                                     // 3343
			left: this.left0 + this.leftDelta                                                                                   // 3344
		});                                                                                                                  // 3345
	},                                                                                                                    // 3346
                                                                                                                       // 3347
                                                                                                                       // 3348
	// Gets called when the user moves the mouse                                                                          // 3349
	handleMove: function(ev) {                                                                                            // 3350
		this.topDelta = getEvY(ev) - this.y0;                                                                                // 3351
		this.leftDelta = getEvX(ev) - this.x0;                                                                               // 3352
                                                                                                                       // 3353
		if (!this.isHidden) {                                                                                                // 3354
			this.updatePosition();                                                                                              // 3355
		}                                                                                                                    // 3356
	},                                                                                                                    // 3357
                                                                                                                       // 3358
                                                                                                                       // 3359
	// Temporarily makes the tracking element invisible. Can be called before following starts                            // 3360
	hide: function() {                                                                                                    // 3361
		if (!this.isHidden) {                                                                                                // 3362
			this.isHidden = true;                                                                                               // 3363
			if (this.el) {                                                                                                      // 3364
				this.el.hide();                                                                                                    // 3365
			}                                                                                                                   // 3366
		}                                                                                                                    // 3367
	},                                                                                                                    // 3368
                                                                                                                       // 3369
                                                                                                                       // 3370
	// Show the tracking element after it has been temporarily hidden                                                     // 3371
	show: function() {                                                                                                    // 3372
		if (this.isHidden) {                                                                                                 // 3373
			this.isHidden = false;                                                                                              // 3374
			this.updatePosition();                                                                                              // 3375
			this.getEl().show();                                                                                                // 3376
		}                                                                                                                    // 3377
	}                                                                                                                     // 3378
                                                                                                                       // 3379
});                                                                                                                    // 3380
                                                                                                                       // 3381
;;                                                                                                                     // 3382
                                                                                                                       // 3383
/* An abstract class comprised of a "grid" of areas that each represent a specific datetime                            // 3384
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 3386
var Grid = FC.Grid = Class.extend(ListenerMixin, MouseIgnorerMixin, {                                                  // 3387
                                                                                                                       // 3388
	view: null, // a View object                                                                                          // 3389
	isRTL: null, // shortcut to the view's isRTL option                                                                   // 3390
                                                                                                                       // 3391
	start: null,                                                                                                          // 3392
	end: null,                                                                                                            // 3393
                                                                                                                       // 3394
	el: null, // the containing element                                                                                   // 3395
	elsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.                   // 3396
                                                                                                                       // 3397
	// derived from options                                                                                               // 3398
	eventTimeFormat: null,                                                                                                // 3399
	displayEventTime: null,                                                                                               // 3400
	displayEventEnd: null,                                                                                                // 3401
                                                                                                                       // 3402
	minResizeDuration: null, // TODO: hack. set by subclasses. minumum event resize duration                              // 3403
                                                                                                                       // 3404
	// if defined, holds the unit identified (ex: "year" or "month") that determines the level of granularity             // 3405
	// of the date areas. if not defined, assumes to be day and time granularity.                                         // 3406
	// TODO: port isTimeScale into same system?                                                                           // 3407
	largeUnit: null,                                                                                                      // 3408
                                                                                                                       // 3409
	dayDragListener: null,                                                                                                // 3410
	segDragListener: null,                                                                                                // 3411
	segResizeListener: null,                                                                                              // 3412
	externalDragListener: null,                                                                                           // 3413
                                                                                                                       // 3414
                                                                                                                       // 3415
	constructor: function(view) {                                                                                         // 3416
		this.view = view;                                                                                                    // 3417
		this.isRTL = view.opt('isRTL');                                                                                      // 3418
		this.elsByFill = {};                                                                                                 // 3419
                                                                                                                       // 3420
		this.dayDragListener = this.buildDayDragListener();                                                                  // 3421
		this.initMouseIgnoring();                                                                                            // 3422
	},                                                                                                                    // 3423
                                                                                                                       // 3424
                                                                                                                       // 3425
	/* Options                                                                                                            // 3426
	------------------------------------------------------------------------------------------------------------------*/  // 3427
                                                                                                                       // 3428
                                                                                                                       // 3429
	// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'                    // 3430
	computeEventTimeFormat: function() {                                                                                  // 3431
		return this.view.opt('smallTimeFormat');                                                                             // 3432
	},                                                                                                                    // 3433
                                                                                                                       // 3434
                                                                                                                       // 3435
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.  // 3436
	// Only applies to non-all-day events.                                                                                // 3437
	computeDisplayEventTime: function() {                                                                                 // 3438
		return true;                                                                                                         // 3439
	},                                                                                                                    // 3440
                                                                                                                       // 3441
                                                                                                                       // 3442
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'    // 3443
	computeDisplayEventEnd: function() {                                                                                  // 3444
		return true;                                                                                                         // 3445
	},                                                                                                                    // 3446
                                                                                                                       // 3447
                                                                                                                       // 3448
	/* Dates                                                                                                              // 3449
	------------------------------------------------------------------------------------------------------------------*/  // 3450
                                                                                                                       // 3451
                                                                                                                       // 3452
	// Tells the grid about what period of time to display.                                                               // 3453
	// Any date-related internal data should be generated.                                                                // 3454
	setRange: function(range) {                                                                                           // 3455
		this.start = range.start.clone();                                                                                    // 3456
		this.end = range.end.clone();                                                                                        // 3457
                                                                                                                       // 3458
		this.rangeUpdated();                                                                                                 // 3459
		this.processRangeOptions();                                                                                          // 3460
	},                                                                                                                    // 3461
                                                                                                                       // 3462
                                                                                                                       // 3463
	// Called when internal variables that rely on the range should be updated                                            // 3464
	rangeUpdated: function() {                                                                                            // 3465
	},                                                                                                                    // 3466
                                                                                                                       // 3467
                                                                                                                       // 3468
	// Updates values that rely on options and also relate to range                                                       // 3469
	processRangeOptions: function() {                                                                                     // 3470
		var view = this.view;                                                                                                // 3471
		var displayEventTime;                                                                                                // 3472
		var displayEventEnd;                                                                                                 // 3473
                                                                                                                       // 3474
		this.eventTimeFormat =                                                                                               // 3475
			view.opt('eventTimeFormat') ||                                                                                      // 3476
			view.opt('timeFormat') || // deprecated                                                                             // 3477
			this.computeEventTimeFormat();                                                                                      // 3478
                                                                                                                       // 3479
		displayEventTime = view.opt('displayEventTime');                                                                     // 3480
		if (displayEventTime == null) {                                                                                      // 3481
			displayEventTime = this.computeDisplayEventTime(); // might be based off of range                                   // 3482
		}                                                                                                                    // 3483
                                                                                                                       // 3484
		displayEventEnd = view.opt('displayEventEnd');                                                                       // 3485
		if (displayEventEnd == null) {                                                                                       // 3486
			displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range                                     // 3487
		}                                                                                                                    // 3488
                                                                                                                       // 3489
		this.displayEventTime = displayEventTime;                                                                            // 3490
		this.displayEventEnd = displayEventEnd;                                                                              // 3491
	},                                                                                                                    // 3492
                                                                                                                       // 3493
                                                                                                                       // 3494
	// Converts a span (has unzoned start/end and any other grid-specific location information)                           // 3495
	// into an array of segments (pieces of events whose format is decided by the grid).                                  // 3496
	spanToSegs: function(span) {                                                                                          // 3497
		// subclasses must implement                                                                                         // 3498
	},                                                                                                                    // 3499
                                                                                                                       // 3500
                                                                                                                       // 3501
	// Diffs the two dates, returning a duration, based on granularity of the grid                                        // 3502
	// TODO: port isTimeScale into this system?                                                                           // 3503
	diffDates: function(a, b) {                                                                                           // 3504
		if (this.largeUnit) {                                                                                                // 3505
			return diffByUnit(a, b, this.largeUnit);                                                                            // 3506
		}                                                                                                                    // 3507
		else {                                                                                                               // 3508
			return diffDayTime(a, b);                                                                                           // 3509
		}                                                                                                                    // 3510
	},                                                                                                                    // 3511
                                                                                                                       // 3512
                                                                                                                       // 3513
	/* Hit Area                                                                                                           // 3514
	------------------------------------------------------------------------------------------------------------------*/  // 3515
                                                                                                                       // 3516
                                                                                                                       // 3517
	// Called before one or more queryHit calls might happen. Should prepare any cached coordinates for queryHit          // 3518
	prepareHits: function() {                                                                                             // 3519
	},                                                                                                                    // 3520
                                                                                                                       // 3521
                                                                                                                       // 3522
	// Called when queryHit calls have subsided. Good place to clear any coordinate caches.                               // 3523
	releaseHits: function() {                                                                                             // 3524
	},                                                                                                                    // 3525
                                                                                                                       // 3526
                                                                                                                       // 3527
	// Given coordinates from the topleft of the document, return data about the date-related area underneath.            // 3528
	// Can return an object with arbitrary properties (although top/right/left/bottom are encouraged).                    // 3529
	// Must have a `grid` property, a reference to this current grid. TODO: avoid this                                    // 3530
	// The returned object will be processed by getHitSpan and getHitEl.                                                  // 3531
	queryHit: function(leftOffset, topOffset) {                                                                           // 3532
	},                                                                                                                    // 3533
                                                                                                                       // 3534
                                                                                                                       // 3535
	// Given position-level information about a date-related area within the grid,                                        // 3536
	// should return an object with at least a start/end date. Can provide other information as well.                     // 3537
	getHitSpan: function(hit) {                                                                                           // 3538
	},                                                                                                                    // 3539
                                                                                                                       // 3540
                                                                                                                       // 3541
	// Given position-level information about a date-related area within the grid,                                        // 3542
	// should return a jQuery element that best represents it. passed to dayClick callback.                               // 3543
	getHitEl: function(hit) {                                                                                             // 3544
	},                                                                                                                    // 3545
                                                                                                                       // 3546
                                                                                                                       // 3547
	/* Rendering                                                                                                          // 3548
	------------------------------------------------------------------------------------------------------------------*/  // 3549
                                                                                                                       // 3550
                                                                                                                       // 3551
	// Sets the container element that the grid should render inside of.                                                  // 3552
	// Does other DOM-related initializations.                                                                            // 3553
	setElement: function(el) {                                                                                            // 3554
		this.el = el;                                                                                                        // 3555
		preventSelection(el);                                                                                                // 3556
                                                                                                                       // 3557
		this.bindDayHandler('touchstart', this.dayTouchStart);                                                               // 3558
		this.bindDayHandler('mousedown', this.dayMousedown);                                                                 // 3559
                                                                                                                       // 3560
		// attach event-element-related handlers. in Grid.events                                                             // 3561
		// same garbage collection note as above.                                                                            // 3562
		this.bindSegHandlers();                                                                                              // 3563
                                                                                                                       // 3564
		this.bindGlobalHandlers();                                                                                           // 3565
	},                                                                                                                    // 3566
                                                                                                                       // 3567
                                                                                                                       // 3568
	bindDayHandler: function(name, handler) {                                                                             // 3569
		var _this = this;                                                                                                    // 3570
                                                                                                                       // 3571
		// attach a handler to the grid's root element.                                                                      // 3572
		// jQuery will take care of unregistering them when removeElement gets called.                                       // 3573
		this.el.on(name, function(ev) {                                                                                      // 3574
			if (                                                                                                                // 3575
				!$(ev.target).is('.fc-event-container *, .fc-more') && // not an an event element, or "more.." link                // 3576
				!$(ev.target).closest('.fc-popover').length // not on a popover (like the "more.." events one)                     // 3577
			) {                                                                                                                 // 3578
				return handler.call(_this, ev);                                                                                    // 3579
			}                                                                                                                   // 3580
		});                                                                                                                  // 3581
	},                                                                                                                    // 3582
                                                                                                                       // 3583
                                                                                                                       // 3584
	// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.                       // 3585
	// DOES NOT remove any content beforehand (doesn't clear events or call unrenderDates), unlike View                   // 3586
	removeElement: function() {                                                                                           // 3587
		this.unbindGlobalHandlers();                                                                                         // 3588
		this.clearDragListeners();                                                                                           // 3589
                                                                                                                       // 3590
		this.el.remove();                                                                                                    // 3591
                                                                                                                       // 3592
		// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement                    // 3593
	},                                                                                                                    // 3594
                                                                                                                       // 3595
                                                                                                                       // 3596
	// Renders the basic structure of grid view before any content is rendered                                            // 3597
	renderSkeleton: function() {                                                                                          // 3598
		// subclasses should implement                                                                                       // 3599
	},                                                                                                                    // 3600
                                                                                                                       // 3601
                                                                                                                       // 3602
	// Renders the grid's date-related content (like areas that represent days/times).                                    // 3603
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 3604
	renderDates: function() {                                                                                             // 3605
		// subclasses should implement                                                                                       // 3606
	},                                                                                                                    // 3607
                                                                                                                       // 3608
                                                                                                                       // 3609
	// Unrenders the grid's date-related content                                                                          // 3610
	unrenderDates: function() {                                                                                           // 3611
		// subclasses should implement                                                                                       // 3612
	},                                                                                                                    // 3613
                                                                                                                       // 3614
                                                                                                                       // 3615
	/* Handlers                                                                                                           // 3616
	------------------------------------------------------------------------------------------------------------------*/  // 3617
                                                                                                                       // 3618
                                                                                                                       // 3619
	// Binds DOM handlers to elements that reside outside the grid, such as the document                                  // 3620
	bindGlobalHandlers: function() {                                                                                      // 3621
		this.listenTo($(document), {                                                                                         // 3622
			dragstart: this.externalDragStart, // jqui                                                                          // 3623
			sortstart: this.externalDragStart // jqui                                                                           // 3624
		});                                                                                                                  // 3625
	},                                                                                                                    // 3626
                                                                                                                       // 3627
                                                                                                                       // 3628
	// Unbinds DOM handlers from elements that reside outside the grid                                                    // 3629
	unbindGlobalHandlers: function() {                                                                                    // 3630
		this.stopListeningTo($(document));                                                                                   // 3631
	},                                                                                                                    // 3632
                                                                                                                       // 3633
                                                                                                                       // 3634
	// Process a mousedown on an element that represents a day. For day clicking and selecting.                           // 3635
	dayMousedown: function(ev) {                                                                                          // 3636
		if (!this.isIgnoringMouse) {                                                                                         // 3637
			this.dayDragListener.startInteraction(ev, {                                                                         // 3638
				//distance: 5, // needs more work if we want dayClick to fire correctly                                            // 3639
			});                                                                                                                 // 3640
		}                                                                                                                    // 3641
	},                                                                                                                    // 3642
                                                                                                                       // 3643
                                                                                                                       // 3644
	dayTouchStart: function(ev) {                                                                                         // 3645
		var view = this.view;                                                                                                // 3646
                                                                                                                       // 3647
		// HACK to prevent a user's clickaway for unselecting a range or an event                                            // 3648
		// from causing a dayClick.                                                                                          // 3649
		if (view.isSelected || view.selectedEvent) {                                                                         // 3650
			this.tempIgnoreMouse();                                                                                             // 3651
		}                                                                                                                    // 3652
                                                                                                                       // 3653
		this.dayDragListener.startInteraction(ev, {                                                                          // 3654
			delay: this.view.opt('longPressDelay')                                                                              // 3655
		});                                                                                                                  // 3656
	},                                                                                                                    // 3657
                                                                                                                       // 3658
                                                                                                                       // 3659
	// Creates a listener that tracks the user's drag across day elements.                                                // 3660
	// For day clicking and selecting.                                                                                    // 3661
	buildDayDragListener: function() {                                                                                    // 3662
		var _this = this;                                                                                                    // 3663
		var view = this.view;                                                                                                // 3664
		var isSelectable = view.opt('selectable');                                                                           // 3665
		var dayClickHit; // null if invalid dayClick                                                                         // 3666
		var selectionSpan; // null if invalid selection                                                                      // 3667
                                                                                                                       // 3668
		// this listener tracks a mousedown on a day element, and a subsequent drag.                                         // 3669
		// if the drag ends on the same day, it is a 'dayClick'.                                                             // 3670
		// if 'selectable' is enabled, this listener also detects selections.                                                // 3671
		var dragListener = new HitDragListener(this, {                                                                       // 3672
			scroll: view.opt('dragScroll'),                                                                                     // 3673
			interactionStart: function() {                                                                                      // 3674
				dayClickHit = dragListener.origHit; // for dayClick, where no dragging happens                                     // 3675
			},                                                                                                                  // 3676
			dragStart: function() {                                                                                             // 3677
				view.unselect(); // since we could be rendering a new selection, we want to clear any old one                      // 3678
			},                                                                                                                  // 3679
			hitOver: function(hit, isOrig, origHit) {                                                                           // 3680
				if (origHit) { // click needs to have started on a hit                                                             // 3681
                                                                                                                       // 3682
					// if user dragged to another cell at any point, it can no longer be a dayClick                                   // 3683
					if (!isOrig) {                                                                                                    // 3684
						dayClickHit = null;                                                                                              // 3685
					}                                                                                                                 // 3686
                                                                                                                       // 3687
					if (isSelectable) {                                                                                               // 3688
						selectionSpan = _this.computeSelection(                                                                          // 3689
							_this.getHitSpan(origHit),                                                                                      // 3690
							_this.getHitSpan(hit)                                                                                           // 3691
						);                                                                                                               // 3692
						if (selectionSpan) {                                                                                             // 3693
							_this.renderSelection(selectionSpan);                                                                           // 3694
						}                                                                                                                // 3695
						else if (selectionSpan === false) {                                                                              // 3696
							disableCursor();                                                                                                // 3697
						}                                                                                                                // 3698
					}                                                                                                                 // 3699
				}                                                                                                                  // 3700
			},                                                                                                                  // 3701
			hitOut: function() {                                                                                                // 3702
				dayClickHit = null;                                                                                                // 3703
				selectionSpan = null;                                                                                              // 3704
				_this.unrenderSelection();                                                                                         // 3705
				enableCursor();                                                                                                    // 3706
			},                                                                                                                  // 3707
			interactionEnd: function(ev, isCancelled) {                                                                         // 3708
				if (!isCancelled) {                                                                                                // 3709
					if (                                                                                                              // 3710
						dayClickHit &&                                                                                                   // 3711
						!_this.isIgnoringMouse // see hack in dayTouchStart                                                              // 3712
					) {                                                                                                               // 3713
						view.triggerDayClick(                                                                                            // 3714
							_this.getHitSpan(dayClickHit),                                                                                  // 3715
							_this.getHitEl(dayClickHit),                                                                                    // 3716
							ev                                                                                                              // 3717
						);                                                                                                               // 3718
					}                                                                                                                 // 3719
					if (selectionSpan) {                                                                                              // 3720
						// the selection will already have been rendered. just report it                                                 // 3721
						view.reportSelection(selectionSpan, ev);                                                                         // 3722
					}                                                                                                                 // 3723
					enableCursor();                                                                                                   // 3724
				}                                                                                                                  // 3725
			}                                                                                                                   // 3726
		});                                                                                                                  // 3727
                                                                                                                       // 3728
		return dragListener;                                                                                                 // 3729
	},                                                                                                                    // 3730
                                                                                                                       // 3731
                                                                                                                       // 3732
	// Kills all in-progress dragging.                                                                                    // 3733
	// Useful for when public API methods that result in re-rendering are invoked during a drag.                          // 3734
	// Also useful for when touch devices misbehave and don't fire their touchend.                                        // 3735
	clearDragListeners: function() {                                                                                      // 3736
		this.dayDragListener.endInteraction();                                                                               // 3737
                                                                                                                       // 3738
		if (this.segDragListener) {                                                                                          // 3739
			this.segDragListener.endInteraction(); // will clear this.segDragListener                                           // 3740
		}                                                                                                                    // 3741
		if (this.segResizeListener) {                                                                                        // 3742
			this.segResizeListener.endInteraction(); // will clear this.segResizeListener                                       // 3743
		}                                                                                                                    // 3744
		if (this.externalDragListener) {                                                                                     // 3745
			this.externalDragListener.endInteraction(); // will clear this.externalDragListener                                 // 3746
		}                                                                                                                    // 3747
	},                                                                                                                    // 3748
                                                                                                                       // 3749
                                                                                                                       // 3750
	/* Event Helper                                                                                                       // 3751
	------------------------------------------------------------------------------------------------------------------*/  // 3752
	// TODO: should probably move this to Grid.events, like we did event dragging / resizing                              // 3753
                                                                                                                       // 3754
                                                                                                                       // 3755
	// Renders a mock event at the given event location, which contains zoned start/end properties.                       // 3756
	// Returns all mock event elements.                                                                                   // 3757
	renderEventLocationHelper: function(eventLocation, sourceSeg) {                                                       // 3758
		var fakeEvent = this.fabricateHelperEvent(eventLocation, sourceSeg);                                                 // 3759
                                                                                                                       // 3760
		return this.renderHelper(fakeEvent, sourceSeg); // do the actual rendering                                           // 3761
	},                                                                                                                    // 3762
                                                                                                                       // 3763
                                                                                                                       // 3764
	// Builds a fake event given zoned event date properties and a segment is should be inspired from.                    // 3765
	// The range's end can be null, in which case the mock event that is rendered will have a null end time.              // 3766
	// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.          // 3767
	fabricateHelperEvent: function(eventLocation, sourceSeg) {                                                            // 3768
		var fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible        // 3769
                                                                                                                       // 3770
		fakeEvent.start = eventLocation.start.clone();                                                                       // 3771
		fakeEvent.end = eventLocation.end ? eventLocation.end.clone() : null;                                                // 3772
		fakeEvent.allDay = null; // force it to be freshly computed by normalizeEventDates                                   // 3773
		this.view.calendar.normalizeEventDates(fakeEvent);                                                                   // 3774
                                                                                                                       // 3775
		// this extra className will be useful for differentiating real events from mock events in CSS                       // 3776
		fakeEvent.className = (fakeEvent.className || []).concat('fc-helper');                                               // 3777
                                                                                                                       // 3778
		// if something external is being dragged in, don't render a resizer                                                 // 3779
		if (!sourceSeg) {                                                                                                    // 3780
			fakeEvent.editable = false;                                                                                         // 3781
		}                                                                                                                    // 3782
                                                                                                                       // 3783
		return fakeEvent;                                                                                                    // 3784
	},                                                                                                                    // 3785
                                                                                                                       // 3786
                                                                                                                       // 3787
	// Renders a mock event. Given zoned event date properties.                                                           // 3788
	// Must return all mock event elements.                                                                               // 3789
	renderHelper: function(eventLocation, sourceSeg) {                                                                    // 3790
		// subclasses must implement                                                                                         // 3791
	},                                                                                                                    // 3792
                                                                                                                       // 3793
                                                                                                                       // 3794
	// Unrenders a mock event                                                                                             // 3795
	unrenderHelper: function() {                                                                                          // 3796
		// subclasses must implement                                                                                         // 3797
	},                                                                                                                    // 3798
                                                                                                                       // 3799
                                                                                                                       // 3800
	/* Selection                                                                                                          // 3801
	------------------------------------------------------------------------------------------------------------------*/  // 3802
                                                                                                                       // 3803
                                                                                                                       // 3804
	// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.         // 3805
	// Given a span (unzoned start/end and other misc data)                                                               // 3806
	renderSelection: function(span) {                                                                                     // 3807
		this.renderHighlight(span);                                                                                          // 3808
	},                                                                                                                    // 3809
                                                                                                                       // 3810
                                                                                                                       // 3811
	// Unrenders any visual indications of a selection. Will unrender a highlight by default.                             // 3812
	unrenderSelection: function() {                                                                                       // 3813
		this.unrenderHighlight();                                                                                            // 3814
	},                                                                                                                    // 3815
                                                                                                                       // 3816
                                                                                                                       // 3817
	// Given the first and last date-spans of a selection, returns another date-span object.                              // 3818
	// Subclasses can override and provide additional data in the span object. Will be passed to renderSelection().       // 3819
	// Will return false if the selection is invalid and this should be indicated to the user.                            // 3820
	// Will return null/undefined if a selection invalid but no error should be reported.                                 // 3821
	computeSelection: function(span0, span1) {                                                                            // 3822
		var span = this.computeSelectionSpan(span0, span1);                                                                  // 3823
                                                                                                                       // 3824
		if (span && !this.view.calendar.isSelectionSpanAllowed(span)) {                                                      // 3825
			return false;                                                                                                       // 3826
		}                                                                                                                    // 3827
                                                                                                                       // 3828
		return span;                                                                                                         // 3829
	},                                                                                                                    // 3830
                                                                                                                       // 3831
                                                                                                                       // 3832
	// Given two spans, must return the combination of the two.                                                           // 3833
	// TODO: do this separation of concerns (combining VS validation) for event dnd/resize too.                           // 3834
	computeSelectionSpan: function(span0, span1) {                                                                        // 3835
		var dates = [ span0.start, span0.end, span1.start, span1.end ];                                                      // 3836
                                                                                                                       // 3837
		dates.sort(compareNumbers); // sorts chronologically. works with Moments                                             // 3838
                                                                                                                       // 3839
		return { start: dates[0].clone(), end: dates[3].clone() };                                                           // 3840
	},                                                                                                                    // 3841
                                                                                                                       // 3842
                                                                                                                       // 3843
	/* Highlight                                                                                                          // 3844
	------------------------------------------------------------------------------------------------------------------*/  // 3845
                                                                                                                       // 3846
                                                                                                                       // 3847
	// Renders an emphasis on the given date range. Given a span (unzoned start/end and other misc data)                  // 3848
	renderHighlight: function(span) {                                                                                     // 3849
		this.renderFill('highlight', this.spanToSegs(span));                                                                 // 3850
	},                                                                                                                    // 3851
                                                                                                                       // 3852
                                                                                                                       // 3853
	// Unrenders the emphasis on a date range                                                                             // 3854
	unrenderHighlight: function() {                                                                                       // 3855
		this.unrenderFill('highlight');                                                                                      // 3856
	},                                                                                                                    // 3857
                                                                                                                       // 3858
                                                                                                                       // 3859
	// Generates an array of classNames for rendering the highlight. Used by the fill system.                             // 3860
	highlightSegClasses: function() {                                                                                     // 3861
		return [ 'fc-highlight' ];                                                                                           // 3862
	},                                                                                                                    // 3863
                                                                                                                       // 3864
                                                                                                                       // 3865
	/* Business Hours                                                                                                     // 3866
	------------------------------------------------------------------------------------------------------------------*/  // 3867
                                                                                                                       // 3868
                                                                                                                       // 3869
	renderBusinessHours: function() {                                                                                     // 3870
	},                                                                                                                    // 3871
                                                                                                                       // 3872
                                                                                                                       // 3873
	unrenderBusinessHours: function() {                                                                                   // 3874
	},                                                                                                                    // 3875
                                                                                                                       // 3876
                                                                                                                       // 3877
	/* Now Indicator                                                                                                      // 3878
	------------------------------------------------------------------------------------------------------------------*/  // 3879
                                                                                                                       // 3880
                                                                                                                       // 3881
	getNowIndicatorUnit: function() {                                                                                     // 3882
	},                                                                                                                    // 3883
                                                                                                                       // 3884
                                                                                                                       // 3885
	renderNowIndicator: function(date) {                                                                                  // 3886
	},                                                                                                                    // 3887
                                                                                                                       // 3888
                                                                                                                       // 3889
	unrenderNowIndicator: function() {                                                                                    // 3890
	},                                                                                                                    // 3891
                                                                                                                       // 3892
                                                                                                                       // 3893
	/* Fill System (highlight, background events, business hours)                                                         // 3894
	--------------------------------------------------------------------------------------------------------------------  // 3895
	TODO: remove this system. like we did in TimeGrid                                                                     // 3896
	*/                                                                                                                    // 3897
                                                                                                                       // 3898
                                                                                                                       // 3899
	// Renders a set of rectangles over the given segments of time.                                                       // 3900
	// MUST RETURN a subset of segs, the segs that were actually rendered.                                                // 3901
	// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement                        // 3902
	renderFill: function(type, segs) {                                                                                    // 3903
		// subclasses must implement                                                                                         // 3904
	},                                                                                                                    // 3905
                                                                                                                       // 3906
                                                                                                                       // 3907
	// Unrenders a specific type of fill that is currently rendered on the grid                                           // 3908
	unrenderFill: function(type) {                                                                                        // 3909
		var el = this.elsByFill[type];                                                                                       // 3910
                                                                                                                       // 3911
		if (el) {                                                                                                            // 3912
			el.remove();                                                                                                        // 3913
			delete this.elsByFill[type];                                                                                        // 3914
		}                                                                                                                    // 3915
	},                                                                                                                    // 3916
                                                                                                                       // 3917
                                                                                                                       // 3918
	// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.           // 3919
	// Only returns segments that successfully rendered.                                                                  // 3920
	// To be harnessed by renderFill (implemented by subclasses).                                                         // 3921
	// Analagous to renderFgSegEls.                                                                                       // 3922
	renderFillSegEls: function(type, segs) {                                                                              // 3923
		var _this = this;                                                                                                    // 3924
		var segElMethod = this[type + 'SegEl'];                                                                              // 3925
		var html = '';                                                                                                       // 3926
		var renderedSegs = [];                                                                                               // 3927
		var i;                                                                                                               // 3928
                                                                                                                       // 3929
		if (segs.length) {                                                                                                   // 3930
                                                                                                                       // 3931
			// build a large concatenation of segment HTML                                                                      // 3932
			for (i = 0; i < segs.length; i++) {                                                                                 // 3933
				html += this.fillSegHtml(type, segs[i]);                                                                           // 3934
			}                                                                                                                   // 3935
                                                                                                                       // 3936
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3937
			// Then, compute the 'el' for each segment.                                                                         // 3938
			$(html).each(function(i, node) {                                                                                    // 3939
				var seg = segs[i];                                                                                                 // 3940
				var el = $(node);                                                                                                  // 3941
                                                                                                                       // 3942
				// allow custom filter methods per-type                                                                            // 3943
				if (segElMethod) {                                                                                                 // 3944
					el = segElMethod.call(_this, seg, el);                                                                            // 3945
				}                                                                                                                  // 3946
                                                                                                                       // 3947
				if (el) { // custom filters did not cancel the render                                                              // 3948
					el = $(el); // allow custom filter to return raw DOM node                                                         // 3949
                                                                                                                       // 3950
					// correct element type? (would be bad if a non-TD were inserted into a table for example)                        // 3951
					if (el.is(_this.fillSegTag)) {                                                                                    // 3952
						seg.el = el;                                                                                                     // 3953
						renderedSegs.push(seg);                                                                                          // 3954
					}                                                                                                                 // 3955
				}                                                                                                                  // 3956
			});                                                                                                                 // 3957
		}                                                                                                                    // 3958
                                                                                                                       // 3959
		return renderedSegs;                                                                                                 // 3960
	},                                                                                                                    // 3961
                                                                                                                       // 3962
                                                                                                                       // 3963
	fillSegTag: 'div', // subclasses can override                                                                         // 3964
                                                                                                                       // 3965
                                                                                                                       // 3966
	// Builds the HTML needed for one fill segment. Generic enought o work with different types.                          // 3967
	fillSegHtml: function(type, seg) {                                                                                    // 3968
                                                                                                                       // 3969
		// custom hooks per-type                                                                                             // 3970
		var classesMethod = this[type + 'SegClasses'];                                                                       // 3971
		var cssMethod = this[type + 'SegCss'];                                                                               // 3972
                                                                                                                       // 3973
		var classes = classesMethod ? classesMethod.call(this, seg) : [];                                                    // 3974
		var css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});                                                      // 3975
                                                                                                                       // 3976
		return '<' + this.fillSegTag +                                                                                       // 3977
			(classes.length ? ' class="' + classes.join(' ') + '"' : '') +                                                      // 3978
			(css ? ' style="' + css + '"' : '') +                                                                               // 3979
			' />';                                                                                                              // 3980
	},                                                                                                                    // 3981
                                                                                                                       // 3982
                                                                                                                       // 3983
                                                                                                                       // 3984
	/* Generic rendering utilities for subclasses                                                                         // 3985
	------------------------------------------------------------------------------------------------------------------*/  // 3986
                                                                                                                       // 3987
                                                                                                                       // 3988
	// Computes HTML classNames for a single-day element                                                                  // 3989
	getDayClasses: function(date) {                                                                                       // 3990
		var view = this.view;                                                                                                // 3991
		var today = view.calendar.getNow();                                                                                  // 3992
		var classes = [ 'fc-' + dayIDs[date.day()] ];                                                                        // 3993
                                                                                                                       // 3994
		if (                                                                                                                 // 3995
			view.intervalDuration.as('months') == 1 &&                                                                          // 3996
			date.month() != view.intervalStart.month()                                                                          // 3997
		) {                                                                                                                  // 3998
			classes.push('fc-other-month');                                                                                     // 3999
		}                                                                                                                    // 4000
                                                                                                                       // 4001
		if (date.isSame(today, 'day')) {                                                                                     // 4002
			classes.push(                                                                                                       // 4003
				'fc-today',                                                                                                        // 4004
				view.highlightStateClass                                                                                           // 4005
			);                                                                                                                  // 4006
		}                                                                                                                    // 4007
		else if (date < today) {                                                                                             // 4008
			classes.push('fc-past');                                                                                            // 4009
		}                                                                                                                    // 4010
		else {                                                                                                               // 4011
			classes.push('fc-future');                                                                                          // 4012
		}                                                                                                                    // 4013
                                                                                                                       // 4014
		return classes;                                                                                                      // 4015
	}                                                                                                                     // 4016
                                                                                                                       // 4017
});                                                                                                                    // 4018
                                                                                                                       // 4019
;;                                                                                                                     // 4020
                                                                                                                       // 4021
/* Event-rendering and event-interaction methods for the abstract Grid class                                           // 4022
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4024
Grid.mixin({                                                                                                           // 4025
                                                                                                                       // 4026
	mousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing                             // 4027
	isDraggingSeg: false, // is a segment being dragged? boolean                                                          // 4028
	isResizingSeg: false, // is a segment being resized? boolean                                                          // 4029
	isDraggingExternal: false, // jqui-dragging an external element? boolean                                              // 4030
	segs: null, // the *event* segments currently rendered in the grid. TODO: rename to `eventSegs`                       // 4031
                                                                                                                       // 4032
                                                                                                                       // 4033
	// Renders the given events onto the grid                                                                             // 4034
	renderEvents: function(events) {                                                                                      // 4035
		var bgEvents = [];                                                                                                   // 4036
		var fgEvents = [];                                                                                                   // 4037
		var i;                                                                                                               // 4038
                                                                                                                       // 4039
		for (i = 0; i < events.length; i++) {                                                                                // 4040
			(isBgEvent(events[i]) ? bgEvents : fgEvents).push(events[i]);                                                       // 4041
		}                                                                                                                    // 4042
                                                                                                                       // 4043
		this.segs = [].concat( // record all segs                                                                            // 4044
			this.renderBgEvents(bgEvents),                                                                                      // 4045
			this.renderFgEvents(fgEvents)                                                                                       // 4046
		);                                                                                                                   // 4047
	},                                                                                                                    // 4048
                                                                                                                       // 4049
                                                                                                                       // 4050
	renderBgEvents: function(events) {                                                                                    // 4051
		var segs = this.eventsToSegs(events);                                                                                // 4052
                                                                                                                       // 4053
		// renderBgSegs might return a subset of segs, segs that were actually rendered                                      // 4054
		return this.renderBgSegs(segs) || segs;                                                                              // 4055
	},                                                                                                                    // 4056
                                                                                                                       // 4057
                                                                                                                       // 4058
	renderFgEvents: function(events) {                                                                                    // 4059
		var segs = this.eventsToSegs(events);                                                                                // 4060
                                                                                                                       // 4061
		// renderFgSegs might return a subset of segs, segs that were actually rendered                                      // 4062
		return this.renderFgSegs(segs) || segs;                                                                              // 4063
	},                                                                                                                    // 4064
                                                                                                                       // 4065
                                                                                                                       // 4066
	// Unrenders all events currently rendered on the grid                                                                // 4067
	unrenderEvents: function() {                                                                                          // 4068
		this.handleSegMouseout(); // trigger an eventMouseout if user's mouse is over an event                               // 4069
		this.clearDragListeners();                                                                                           // 4070
                                                                                                                       // 4071
		this.unrenderFgSegs();                                                                                               // 4072
		this.unrenderBgSegs();                                                                                               // 4073
                                                                                                                       // 4074
		this.segs = null;                                                                                                    // 4075
	},                                                                                                                    // 4076
                                                                                                                       // 4077
                                                                                                                       // 4078
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 4079
	getEventSegs: function() {                                                                                            // 4080
		return this.segs || [];                                                                                              // 4081
	},                                                                                                                    // 4082
                                                                                                                       // 4083
                                                                                                                       // 4084
	/* Foreground Segment Rendering                                                                                       // 4085
	------------------------------------------------------------------------------------------------------------------*/  // 4086
                                                                                                                       // 4087
                                                                                                                       // 4088
	// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.                   // 4089
	renderFgSegs: function(segs) {                                                                                        // 4090
		// subclasses must implement                                                                                         // 4091
	},                                                                                                                    // 4092
                                                                                                                       // 4093
                                                                                                                       // 4094
	// Unrenders all currently rendered foreground segments                                                               // 4095
	unrenderFgSegs: function() {                                                                                          // 4096
		// subclasses must implement                                                                                         // 4097
	},                                                                                                                    // 4098
                                                                                                                       // 4099
                                                                                                                       // 4100
	// Renders and assigns an `el` property for each foreground event segment.                                            // 4101
	// Only returns segments that successfully rendered.                                                                  // 4102
	// A utility that subclasses may use.                                                                                 // 4103
	renderFgSegEls: function(segs, disableResizing) {                                                                     // 4104
		var view = this.view;                                                                                                // 4105
		var html = '';                                                                                                       // 4106
		var renderedSegs = [];                                                                                               // 4107
		var i;                                                                                                               // 4108
                                                                                                                       // 4109
		if (segs.length) { // don't build an empty html string                                                               // 4110
                                                                                                                       // 4111
			// build a large concatenation of event segment HTML                                                                // 4112
			for (i = 0; i < segs.length; i++) {                                                                                 // 4113
				html += this.fgSegHtml(segs[i], disableResizing);                                                                  // 4114
			}                                                                                                                   // 4115
                                                                                                                       // 4116
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 4117
			// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.         // 4118
			$(html).each(function(i, node) {                                                                                    // 4119
				var seg = segs[i];                                                                                                 // 4120
				var el = view.resolveEventEl(seg.event, $(node));                                                                  // 4121
                                                                                                                       // 4122
				if (el) {                                                                                                          // 4123
					el.data('fc-seg', seg); // used by handlers                                                                       // 4124
					seg.el = el;                                                                                                      // 4125
					renderedSegs.push(seg);                                                                                           // 4126
				}                                                                                                                  // 4127
			});                                                                                                                 // 4128
		}                                                                                                                    // 4129
                                                                                                                       // 4130
		return renderedSegs;                                                                                                 // 4131
	},                                                                                                                    // 4132
                                                                                                                       // 4133
                                                                                                                       // 4134
	// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()               // 4135
	fgSegHtml: function(seg, disableResizing) {                                                                           // 4136
		// subclasses should implement                                                                                       // 4137
	},                                                                                                                    // 4138
                                                                                                                       // 4139
                                                                                                                       // 4140
	/* Background Segment Rendering                                                                                       // 4141
	------------------------------------------------------------------------------------------------------------------*/  // 4142
                                                                                                                       // 4143
                                                                                                                       // 4144
	// Renders the given background event segments onto the grid.                                                         // 4145
	// Returns a subset of the segs that were actually rendered.                                                          // 4146
	renderBgSegs: function(segs) {                                                                                        // 4147
		return this.renderFill('bgEvent', segs);                                                                             // 4148
	},                                                                                                                    // 4149
                                                                                                                       // 4150
                                                                                                                       // 4151
	// Unrenders all the currently rendered background event segments                                                     // 4152
	unrenderBgSegs: function() {                                                                                          // 4153
		this.unrenderFill('bgEvent');                                                                                        // 4154
	},                                                                                                                    // 4155
                                                                                                                       // 4156
                                                                                                                       // 4157
	// Renders a background event element, given the default rendering. Called by the fill system.                        // 4158
	bgEventSegEl: function(seg, el) {                                                                                     // 4159
		return this.view.resolveEventEl(seg.event, el); // will filter through eventRender                                   // 4160
	},                                                                                                                    // 4161
                                                                                                                       // 4162
                                                                                                                       // 4163
	// Generates an array of classNames to be used for the default rendering of a background event.                       // 4164
	// Called by the fill system.                                                                                         // 4165
	bgEventSegClasses: function(seg) {                                                                                    // 4166
		var event = seg.event;                                                                                               // 4167
		var source = event.source || {};                                                                                     // 4168
                                                                                                                       // 4169
		return [ 'fc-bgevent' ].concat(                                                                                      // 4170
			event.className,                                                                                                    // 4171
			source.className || []                                                                                              // 4172
		);                                                                                                                   // 4173
	},                                                                                                                    // 4174
                                                                                                                       // 4175
                                                                                                                       // 4176
	// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.             // 4177
	// Called by the fill system.                                                                                         // 4178
	bgEventSegCss: function(seg) {                                                                                        // 4179
		return {                                                                                                             // 4180
			'background-color': this.getSegSkinCss(seg)['background-color']                                                     // 4181
		};                                                                                                                   // 4182
	},                                                                                                                    // 4183
                                                                                                                       // 4184
                                                                                                                       // 4185
	// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.   // 4186
	businessHoursSegClasses: function(seg) {                                                                              // 4187
		return [ 'fc-nonbusiness', 'fc-bgevent' ];                                                                           // 4188
	},                                                                                                                    // 4189
                                                                                                                       // 4190
                                                                                                                       // 4191
	/* Handlers                                                                                                           // 4192
	------------------------------------------------------------------------------------------------------------------*/  // 4193
                                                                                                                       // 4194
                                                                                                                       // 4195
	// Attaches event-element-related handlers to the container element and leverage bubbling                             // 4196
	bindSegHandlers: function() {                                                                                         // 4197
		this.bindSegHandler('touchstart', this.handleSegTouchStart);                                                         // 4198
		this.bindSegHandler('touchend', this.handleSegTouchEnd);                                                             // 4199
		this.bindSegHandler('mouseenter', this.handleSegMouseover);                                                          // 4200
		this.bindSegHandler('mouseleave', this.handleSegMouseout);                                                           // 4201
		this.bindSegHandler('mousedown', this.handleSegMousedown);                                                           // 4202
		this.bindSegHandler('click', this.handleSegClick);                                                                   // 4203
	},                                                                                                                    // 4204
                                                                                                                       // 4205
                                                                                                                       // 4206
	// Executes a handler for any a user-interaction on a segment.                                                        // 4207
	// Handler gets called with (seg, ev), and with the `this` context of the Grid                                        // 4208
	bindSegHandler: function(name, handler) {                                                                             // 4209
		var _this = this;                                                                                                    // 4210
                                                                                                                       // 4211
		this.el.on(name, '.fc-event-container > *', function(ev) {                                                           // 4212
			var seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents                             // 4213
                                                                                                                       // 4214
			// only call the handlers if there is not a drag/resize in progress                                                 // 4215
			if (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {                                                          // 4216
				return handler.call(_this, seg, ev); // context will be the Grid                                                   // 4217
			}                                                                                                                   // 4218
		});                                                                                                                  // 4219
	},                                                                                                                    // 4220
                                                                                                                       // 4221
                                                                                                                       // 4222
	handleSegClick: function(seg, ev) {                                                                                   // 4223
		return this.view.trigger('eventClick', seg.el[0], seg.event, ev); // can return `false` to cancel                    // 4224
	},                                                                                                                    // 4225
                                                                                                                       // 4226
                                                                                                                       // 4227
	// Updates internal state and triggers handlers for when an event element is moused over                              // 4228
	handleSegMouseover: function(seg, ev) {                                                                               // 4229
		if (                                                                                                                 // 4230
			!this.isIgnoringMouse &&                                                                                            // 4231
			!this.mousedOverSeg                                                                                                 // 4232
		) {                                                                                                                  // 4233
			this.mousedOverSeg = seg;                                                                                           // 4234
			seg.el.addClass('fc-allow-mouse-resize');                                                                           // 4235
			this.view.trigger('eventMouseover', seg.el[0], seg.event, ev);                                                      // 4236
		}                                                                                                                    // 4237
	},                                                                                                                    // 4238
                                                                                                                       // 4239
                                                                                                                       // 4240
	// Updates internal state and triggers handlers for when an event element is moused out.                              // 4241
	// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.             // 4242
	handleSegMouseout: function(seg, ev) {                                                                                // 4243
		ev = ev || {}; // if given no args, make a mock mouse event                                                          // 4244
                                                                                                                       // 4245
		if (this.mousedOverSeg) {                                                                                            // 4246
			seg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment                         // 4247
			this.mousedOverSeg = null;                                                                                          // 4248
			seg.el.removeClass('fc-allow-mouse-resize');                                                                        // 4249
			this.view.trigger('eventMouseout', seg.el[0], seg.event, ev);                                                       // 4250
		}                                                                                                                    // 4251
	},                                                                                                                    // 4252
                                                                                                                       // 4253
                                                                                                                       // 4254
	handleSegMousedown: function(seg, ev) {                                                                               // 4255
		var isResizing = this.startSegResize(seg, ev, { distance: 5 });                                                      // 4256
                                                                                                                       // 4257
		if (!isResizing && this.view.isEventDraggable(seg.event)) {                                                          // 4258
			this.buildSegDragListener(seg)                                                                                      // 4259
				.startInteraction(ev, {                                                                                            // 4260
					distance: 5                                                                                                       // 4261
				});                                                                                                                // 4262
		}                                                                                                                    // 4263
	},                                                                                                                    // 4264
                                                                                                                       // 4265
                                                                                                                       // 4266
	handleSegTouchStart: function(seg, ev) {                                                                              // 4267
		var view = this.view;                                                                                                // 4268
		var event = seg.event;                                                                                               // 4269
		var isSelected = view.isEventSelected(event);                                                                        // 4270
		var isDraggable = view.isEventDraggable(event);                                                                      // 4271
		var isResizable = view.isEventResizable(event);                                                                      // 4272
		var isResizing = false;                                                                                              // 4273
		var dragListener;                                                                                                    // 4274
                                                                                                                       // 4275
		if (isSelected && isResizable) {                                                                                     // 4276
			// only allow resizing of the event is selected                                                                     // 4277
			isResizing = this.startSegResize(seg, ev);                                                                          // 4278
		}                                                                                                                    // 4279
                                                                                                                       // 4280
		if (!isResizing && (isDraggable || isResizable)) { // allowed to be selected?                                        // 4281
                                                                                                                       // 4282
			dragListener = isDraggable ?                                                                                        // 4283
				this.buildSegDragListener(seg) :                                                                                   // 4284
				this.buildSegSelectListener(seg); // seg isn't draggable, but still needs to be selected                           // 4285
                                                                                                                       // 4286
			dragListener.startInteraction(ev, { // won't start if already started                                               // 4287
				delay: isSelected ? 0 : this.view.opt('longPressDelay') // do delay if not already selected                        // 4288
			});                                                                                                                 // 4289
		}                                                                                                                    // 4290
                                                                                                                       // 4291
		// a long tap simulates a mouseover. ignore this bogus mouseover.                                                    // 4292
		this.tempIgnoreMouse();                                                                                              // 4293
	},                                                                                                                    // 4294
                                                                                                                       // 4295
                                                                                                                       // 4296
	handleSegTouchEnd: function(seg, ev) {                                                                                // 4297
		// touchstart+touchend = click, which simulates a mouseover.                                                         // 4298
		// ignore this bogus mouseover.                                                                                      // 4299
		this.tempIgnoreMouse();                                                                                              // 4300
	},                                                                                                                    // 4301
                                                                                                                       // 4302
                                                                                                                       // 4303
	// returns boolean whether resizing actually started or not.                                                          // 4304
	// assumes the seg allows resizing.                                                                                   // 4305
	// `dragOptions` are optional.                                                                                        // 4306
	startSegResize: function(seg, ev, dragOptions) {                                                                      // 4307
		if ($(ev.target).is('.fc-resizer')) {                                                                                // 4308
			this.buildSegResizeListener(seg, $(ev.target).is('.fc-start-resizer'))                                              // 4309
				.startInteraction(ev, dragOptions);                                                                                // 4310
			return true;                                                                                                        // 4311
		}                                                                                                                    // 4312
		return false;                                                                                                        // 4313
	},                                                                                                                    // 4314
                                                                                                                       // 4315
                                                                                                                       // 4316
                                                                                                                       // 4317
	/* Event Dragging                                                                                                     // 4318
	------------------------------------------------------------------------------------------------------------------*/  // 4319
                                                                                                                       // 4320
                                                                                                                       // 4321
	// Builds a listener that will track user-dragging on an event segment.                                               // 4322
	// Generic enough to work with any type of Grid.                                                                      // 4323
	// Has side effect of setting/unsetting `segDragListener`                                                             // 4324
	buildSegDragListener: function(seg) {                                                                                 // 4325
		var _this = this;                                                                                                    // 4326
		var view = this.view;                                                                                                // 4327
		var calendar = view.calendar;                                                                                        // 4328
		var el = seg.el;                                                                                                     // 4329
		var event = seg.event;                                                                                               // 4330
		var isDragging;                                                                                                      // 4331
		var mouseFollower; // A clone of the original element that will move with the mouse                                  // 4332
		var dropLocation; // zoned event date properties                                                                     // 4333
                                                                                                                       // 4334
		if (this.segDragListener) {                                                                                          // 4335
			return this.segDragListener;                                                                                        // 4336
		}                                                                                                                    // 4337
                                                                                                                       // 4338
		// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents        // 4339
		// of the view.                                                                                                      // 4340
		var dragListener = this.segDragListener = new HitDragListener(view, {                                                // 4341
			scroll: view.opt('dragScroll'),                                                                                     // 4342
			subjectEl: el,                                                                                                      // 4343
			subjectCenter: true,                                                                                                // 4344
			interactionStart: function(ev) {                                                                                    // 4345
				isDragging = false;                                                                                                // 4346
				mouseFollower = new MouseFollower(seg.el, {                                                                        // 4347
					additionalClass: 'fc-dragging',                                                                                   // 4348
					parentEl: view.el,                                                                                                // 4349
					opacity: dragListener.isTouch ? null : view.opt('dragOpacity'),                                                   // 4350
					revertDuration: view.opt('dragRevertDuration'),                                                                   // 4351
					zIndex: 2 // one above the .fc-view                                                                               // 4352
				});                                                                                                                // 4353
				mouseFollower.hide(); // don't show until we know this is a real drag                                              // 4354
				mouseFollower.start(ev);                                                                                           // 4355
			},                                                                                                                  // 4356
			dragStart: function(ev) {                                                                                           // 4357
				if (dragListener.isTouch && !view.isEventSelected(event)) {                                                        // 4358
					// if not previously selected, will fire after a delay. then, select the event                                    // 4359
					view.selectEvent(event);                                                                                          // 4360
				}                                                                                                                  // 4361
				isDragging = true;                                                                                                 // 4362
				_this.handleSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                  // 4363
				_this.segDragStart(seg, ev);                                                                                       // 4364
				view.hideEvent(event); // hide all event segments. our mouseFollower will take over                                // 4365
			},                                                                                                                  // 4366
			hitOver: function(hit, isOrig, origHit) {                                                                           // 4367
				var dragHelperEls;                                                                                                 // 4368
                                                                                                                       // 4369
				// starting hit could be forced (DayGrid.limit)                                                                    // 4370
				if (seg.hit) {                                                                                                     // 4371
					origHit = seg.hit;                                                                                                // 4372
				}                                                                                                                  // 4373
                                                                                                                       // 4374
				// since we are querying the parent view, might not belong to this grid                                            // 4375
				dropLocation = _this.computeEventDrop(                                                                             // 4376
					origHit.component.getHitSpan(origHit),                                                                            // 4377
					hit.component.getHitSpan(hit),                                                                                    // 4378
					event                                                                                                             // 4379
				);                                                                                                                 // 4380
                                                                                                                       // 4381
				if (dropLocation && !calendar.isEventSpanAllowed(_this.eventToSpan(dropLocation), event)) {                        // 4382
					disableCursor();                                                                                                  // 4383
					dropLocation = null;                                                                                              // 4384
				}                                                                                                                  // 4385
                                                                                                                       // 4386
				// if a valid drop location, have the subclass render a visual indication                                          // 4387
				if (dropLocation && (dragHelperEls = view.renderDrag(dropLocation, seg))) {                                        // 4388
                                                                                                                       // 4389
					dragHelperEls.addClass('fc-dragging');                                                                            // 4390
					if (!dragListener.isTouch) {                                                                                      // 4391
						_this.applyDragOpacity(dragHelperEls);                                                                           // 4392
					}                                                                                                                 // 4393
                                                                                                                       // 4394
					mouseFollower.hide(); // if the subclass is already using a mock event "helper", hide our own                     // 4395
				}                                                                                                                  // 4396
				else {                                                                                                             // 4397
					mouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)                                // 4398
				}                                                                                                                  // 4399
                                                                                                                       // 4400
				if (isOrig) {                                                                                                      // 4401
					dropLocation = null; // needs to have moved hits to be a valid drop                                               // 4402
				}                                                                                                                  // 4403
			},                                                                                                                  // 4404
			hitOut: function() { // called before mouse moves to a different hit OR moved out of all hits                       // 4405
				view.unrenderDrag(); // unrender whatever was done in renderDrag                                                   // 4406
				mouseFollower.show(); // show in case we are moving out of all hits                                                // 4407
				dropLocation = null;                                                                                               // 4408
			},                                                                                                                  // 4409
			hitDone: function() { // Called after a hitOut OR before a dragEnd                                                  // 4410
				enableCursor();                                                                                                    // 4411
			},                                                                                                                  // 4412
			interactionEnd: function(ev) {                                                                                      // 4413
				// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)                // 4414
				mouseFollower.stop(!dropLocation, function() {                                                                     // 4415
					if (isDragging) {                                                                                                 // 4416
						view.unrenderDrag();                                                                                             // 4417
						view.showEvent(event);                                                                                           // 4418
						_this.segDragStop(seg, ev);                                                                                      // 4419
					}                                                                                                                 // 4420
					if (dropLocation) {                                                                                               // 4421
						view.reportEventDrop(event, dropLocation, this.largeUnit, el, ev);                                               // 4422
					}                                                                                                                 // 4423
				});                                                                                                                // 4424
				_this.segDragListener = null;                                                                                      // 4425
			}                                                                                                                   // 4426
		});                                                                                                                  // 4427
                                                                                                                       // 4428
		return dragListener;                                                                                                 // 4429
	},                                                                                                                    // 4430
                                                                                                                       // 4431
                                                                                                                       // 4432
	// seg isn't draggable, but let's use a generic DragListener                                                          // 4433
	// simply for the delay, so it can be selected.                                                                       // 4434
	// Has side effect of setting/unsetting `segDragListener`                                                             // 4435
	buildSegSelectListener: function(seg) {                                                                               // 4436
		var _this = this;                                                                                                    // 4437
		var view = this.view;                                                                                                // 4438
		var event = seg.event;                                                                                               // 4439
                                                                                                                       // 4440
		if (this.segDragListener) {                                                                                          // 4441
			return this.segDragListener;                                                                                        // 4442
		}                                                                                                                    // 4443
                                                                                                                       // 4444
		var dragListener = this.segDragListener = new DragListener({                                                         // 4445
			dragStart: function(ev) {                                                                                           // 4446
				if (dragListener.isTouch && !view.isEventSelected(event)) {                                                        // 4447
					// if not previously selected, will fire after a delay. then, select the event                                    // 4448
					view.selectEvent(event);                                                                                          // 4449
				}                                                                                                                  // 4450
			},                                                                                                                  // 4451
			interactionEnd: function(ev) {                                                                                      // 4452
				_this.segDragListener = null;                                                                                      // 4453
			}                                                                                                                   // 4454
		});                                                                                                                  // 4455
                                                                                                                       // 4456
		return dragListener;                                                                                                 // 4457
	},                                                                                                                    // 4458
                                                                                                                       // 4459
                                                                                                                       // 4460
	// Called before event segment dragging starts                                                                        // 4461
	segDragStart: function(seg, ev) {                                                                                     // 4462
		this.isDraggingSeg = true;                                                                                           // 4463
		this.view.trigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                    // 4464
	},                                                                                                                    // 4465
                                                                                                                       // 4466
                                                                                                                       // 4467
	// Called after event segment dragging stops                                                                          // 4468
	segDragStop: function(seg, ev) {                                                                                      // 4469
		this.isDraggingSeg = false;                                                                                          // 4470
		this.view.trigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                     // 4471
	},                                                                                                                    // 4472
                                                                                                                       // 4473
                                                                                                                       // 4474
	// Given the spans an event drag began, and the span event was dropped, calculates the new zoned start/end/allDay     // 4475
	// values for the event. Subclasses may override and set additional properties to be used by renderDrag.              // 4476
	// A falsy returned value indicates an invalid drop.                                                                  // 4477
	// DOES NOT consider overlap/constraint.                                                                              // 4478
	computeEventDrop: function(startSpan, endSpan, event) {                                                               // 4479
		var calendar = this.view.calendar;                                                                                   // 4480
		var dragStart = startSpan.start;                                                                                     // 4481
		var dragEnd = endSpan.start;                                                                                         // 4482
		var delta;                                                                                                           // 4483
		var dropLocation; // zoned event date properties                                                                     // 4484
                                                                                                                       // 4485
		if (dragStart.hasTime() === dragEnd.hasTime()) {                                                                     // 4486
			delta = this.diffDates(dragEnd, dragStart);                                                                         // 4487
                                                                                                                       // 4488
			// if an all-day event was in a timed area and it was dragged to a different time,                                  // 4489
			// guarantee an end and adjust start/end to have times                                                              // 4490
			if (event.allDay && durationHasTime(delta)) {                                                                       // 4491
				dropLocation = {                                                                                                   // 4492
					start: event.start.clone(),                                                                                       // 4493
					end: calendar.getEventEnd(event), // will be an ambig day                                                         // 4494
					allDay: false // for normalizeEventTimes                                                                          // 4495
				};                                                                                                                 // 4496
				calendar.normalizeEventTimes(dropLocation);                                                                        // 4497
			}                                                                                                                   // 4498
			// othewise, work off existing values                                                                               // 4499
			else {                                                                                                              // 4500
				dropLocation = {                                                                                                   // 4501
					start: event.start.clone(),                                                                                       // 4502
					end: event.end ? event.end.clone() : null,                                                                        // 4503
					allDay: event.allDay // keep it the same                                                                          // 4504
				};                                                                                                                 // 4505
			}                                                                                                                   // 4506
                                                                                                                       // 4507
			dropLocation.start.add(delta);                                                                                      // 4508
			if (dropLocation.end) {                                                                                             // 4509
				dropLocation.end.add(delta);                                                                                       // 4510
			}                                                                                                                   // 4511
		}                                                                                                                    // 4512
		else {                                                                                                               // 4513
			// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared                  // 4514
			dropLocation = {                                                                                                    // 4515
				start: dragEnd.clone(),                                                                                            // 4516
				end: null, // end should be cleared                                                                                // 4517
				allDay: !dragEnd.hasTime()                                                                                         // 4518
			};                                                                                                                  // 4519
		}                                                                                                                    // 4520
                                                                                                                       // 4521
		return dropLocation;                                                                                                 // 4522
	},                                                                                                                    // 4523
                                                                                                                       // 4524
                                                                                                                       // 4525
	// Utility for apply dragOpacity to a jQuery set                                                                      // 4526
	applyDragOpacity: function(els) {                                                                                     // 4527
		var opacity = this.view.opt('dragOpacity');                                                                          // 4528
                                                                                                                       // 4529
		if (opacity != null) {                                                                                               // 4530
			els.each(function(i, node) {                                                                                        // 4531
				// Don't use jQuery (will set an IE filter), do it the old fashioned way.                                          // 4532
				// In IE8, a helper element will disappears if there's a filter.                                                   // 4533
				node.style.opacity = opacity;                                                                                      // 4534
			});                                                                                                                 // 4535
		}                                                                                                                    // 4536
	},                                                                                                                    // 4537
                                                                                                                       // 4538
                                                                                                                       // 4539
	/* External Element Dragging                                                                                          // 4540
	------------------------------------------------------------------------------------------------------------------*/  // 4541
                                                                                                                       // 4542
                                                                                                                       // 4543
	// Called when a jQuery UI drag is initiated anywhere in the DOM                                                      // 4544
	externalDragStart: function(ev, ui) {                                                                                 // 4545
		var view = this.view;                                                                                                // 4546
		var el;                                                                                                              // 4547
		var accept;                                                                                                          // 4548
                                                                                                                       // 4549
		if (view.opt('droppable')) { // only listen if this setting is on                                                    // 4550
			el = $((ui ? ui.item : null) || ev.target);                                                                         // 4551
                                                                                                                       // 4552
			// Test that the dragged element passes the dropAccept selector or filter function.                                 // 4553
			// FYI, the default is "*" (matches all)                                                                            // 4554
			accept = view.opt('dropAccept');                                                                                    // 4555
			if ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {                                                // 4556
				if (!this.isDraggingExternal) { // prevent double-listening if fired twice                                         // 4557
					this.listenToExternalDrag(el, ev, ui);                                                                            // 4558
				}                                                                                                                  // 4559
			}                                                                                                                   // 4560
		}                                                                                                                    // 4561
	},                                                                                                                    // 4562
                                                                                                                       // 4563
                                                                                                                       // 4564
	// Called when a jQuery UI drag starts and it needs to be monitored for dropping                                      // 4565
	listenToExternalDrag: function(el, ev, ui) {                                                                          // 4566
		var _this = this;                                                                                                    // 4567
		var calendar = this.view.calendar;                                                                                   // 4568
		var meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create                  // 4569
		var dropLocation; // a null value signals an unsuccessful drag                                                       // 4570
                                                                                                                       // 4571
		// listener that tracks mouse movement over date-associated pixel regions                                            // 4572
		var dragListener = _this.externalDragListener = new HitDragListener(this, {                                          // 4573
			interactionStart: function() {                                                                                      // 4574
				_this.isDraggingExternal = true;                                                                                   // 4575
			},                                                                                                                  // 4576
			hitOver: function(hit) {                                                                                            // 4577
				dropLocation = _this.computeExternalDrop(                                                                          // 4578
					hit.component.getHitSpan(hit), // since we are querying the parent view, might not belong to this grid            // 4579
					meta                                                                                                              // 4580
				);                                                                                                                 // 4581
                                                                                                                       // 4582
				if ( // invalid hit?                                                                                               // 4583
					dropLocation &&                                                                                                   // 4584
					!calendar.isExternalSpanAllowed(_this.eventToSpan(dropLocation), dropLocation, meta.eventProps)                   // 4585
				) {                                                                                                                // 4586
					disableCursor();                                                                                                  // 4587
					dropLocation = null;                                                                                              // 4588
				}                                                                                                                  // 4589
                                                                                                                       // 4590
				if (dropLocation) {                                                                                                // 4591
					_this.renderDrag(dropLocation); // called without a seg parameter                                                 // 4592
				}                                                                                                                  // 4593
			},                                                                                                                  // 4594
			hitOut: function() {                                                                                                // 4595
				dropLocation = null; // signal unsuccessful                                                                        // 4596
			},                                                                                                                  // 4597
			hitDone: function() { // Called after a hitOut OR before a dragEnd                                                  // 4598
				enableCursor();                                                                                                    // 4599
				_this.unrenderDrag();                                                                                              // 4600
			},                                                                                                                  // 4601
			interactionEnd: function(ev) {                                                                                      // 4602
				if (dropLocation) { // element was dropped on a valid hit                                                          // 4603
					_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);                                                    // 4604
				}                                                                                                                  // 4605
				_this.isDraggingExternal = false;                                                                                  // 4606
				_this.externalDragListener = null;                                                                                 // 4607
			}                                                                                                                   // 4608
		});                                                                                                                  // 4609
                                                                                                                       // 4610
		dragListener.startDrag(ev); // start listening immediately                                                           // 4611
	},                                                                                                                    // 4612
                                                                                                                       // 4613
                                                                                                                       // 4614
	// Given a hit to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),     // 4615
	// returns the zoned start/end dates for the event that would result from the hypothetical drop. end might be null.   // 4616
	// Returning a null value signals an invalid drop hit.                                                                // 4617
	// DOES NOT consider overlap/constraint.                                                                              // 4618
	computeExternalDrop: function(span, meta) {                                                                           // 4619
		var calendar = this.view.calendar;                                                                                   // 4620
		var dropLocation = {                                                                                                 // 4621
			start: calendar.applyTimezone(span.start), // simulate a zoned event start date                                     // 4622
			end: null                                                                                                           // 4623
		};                                                                                                                   // 4624
                                                                                                                       // 4625
		// if dropped on an all-day span, and element's metadata specified a time, set it                                    // 4626
		if (meta.startTime && !dropLocation.start.hasTime()) {                                                               // 4627
			dropLocation.start.time(meta.startTime);                                                                            // 4628
		}                                                                                                                    // 4629
                                                                                                                       // 4630
		if (meta.duration) {                                                                                                 // 4631
			dropLocation.end = dropLocation.start.clone().add(meta.duration);                                                   // 4632
		}                                                                                                                    // 4633
                                                                                                                       // 4634
		return dropLocation;                                                                                                 // 4635
	},                                                                                                                    // 4636
                                                                                                                       // 4637
                                                                                                                       // 4638
                                                                                                                       // 4639
	/* Drag Rendering (for both events and an external elements)                                                          // 4640
	------------------------------------------------------------------------------------------------------------------*/  // 4641
                                                                                                                       // 4642
                                                                                                                       // 4643
	// Renders a visual indication of an event or external element being dragged.                                         // 4644
	// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.     // 4645
	// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.        // 4646
	// A truthy returned value indicates this method has rendered a helper element.                                       // 4647
	// Must return elements used for any mock events.                                                                     // 4648
	renderDrag: function(dropLocation, seg) {                                                                             // 4649
		// subclasses must implement                                                                                         // 4650
	},                                                                                                                    // 4651
                                                                                                                       // 4652
                                                                                                                       // 4653
	// Unrenders a visual indication of an event or external element being dragged                                        // 4654
	unrenderDrag: function() {                                                                                            // 4655
		// subclasses must implement                                                                                         // 4656
	},                                                                                                                    // 4657
                                                                                                                       // 4658
                                                                                                                       // 4659
	/* Resizing                                                                                                           // 4660
	------------------------------------------------------------------------------------------------------------------*/  // 4661
                                                                                                                       // 4662
                                                                                                                       // 4663
	// Creates a listener that tracks the user as they resize an event segment.                                           // 4664
	// Generic enough to work with any type of Grid.                                                                      // 4665
	buildSegResizeListener: function(seg, isStart) {                                                                      // 4666
		var _this = this;                                                                                                    // 4667
		var view = this.view;                                                                                                // 4668
		var calendar = view.calendar;                                                                                        // 4669
		var el = seg.el;                                                                                                     // 4670
		var event = seg.event;                                                                                               // 4671
		var eventEnd = calendar.getEventEnd(event);                                                                          // 4672
		var isDragging;                                                                                                      // 4673
		var resizeLocation; // zoned event date properties. falsy if invalid resize                                          // 4674
                                                                                                                       // 4675
		// Tracks mouse movement over the *grid's* coordinate map                                                            // 4676
		var dragListener = this.segResizeListener = new HitDragListener(this, {                                              // 4677
			scroll: view.opt('dragScroll'),                                                                                     // 4678
			subjectEl: el,                                                                                                      // 4679
			interactionStart: function() {                                                                                      // 4680
				isDragging = false;                                                                                                // 4681
			},                                                                                                                  // 4682
			dragStart: function(ev) {                                                                                           // 4683
				isDragging = true;                                                                                                 // 4684
				_this.handleSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                  // 4685
				_this.segResizeStart(seg, ev);                                                                                     // 4686
			},                                                                                                                  // 4687
			hitOver: function(hit, isOrig, origHit) {                                                                           // 4688
				var origHitSpan = _this.getHitSpan(origHit);                                                                       // 4689
				var hitSpan = _this.getHitSpan(hit);                                                                               // 4690
                                                                                                                       // 4691
				resizeLocation = isStart ?                                                                                         // 4692
					_this.computeEventStartResize(origHitSpan, hitSpan, event) :                                                      // 4693
					_this.computeEventEndResize(origHitSpan, hitSpan, event);                                                         // 4694
                                                                                                                       // 4695
				if (resizeLocation) {                                                                                              // 4696
					if (!calendar.isEventSpanAllowed(_this.eventToSpan(resizeLocation), event)) {                                     // 4697
						disableCursor();                                                                                                 // 4698
						resizeLocation = null;                                                                                           // 4699
					}                                                                                                                 // 4700
					// no change? (TODO: how does this work with timezones?)                                                          // 4701
					else if (resizeLocation.start.isSame(event.start) && resizeLocation.end.isSame(eventEnd)) {                       // 4702
						resizeLocation = null;                                                                                           // 4703
					}                                                                                                                 // 4704
				}                                                                                                                  // 4705
                                                                                                                       // 4706
				if (resizeLocation) {                                                                                              // 4707
					view.hideEvent(event);                                                                                            // 4708
					_this.renderEventResize(resizeLocation, seg);                                                                     // 4709
				}                                                                                                                  // 4710
			},                                                                                                                  // 4711
			hitOut: function() { // called before mouse moves to a different hit OR moved out of all hits                       // 4712
				resizeLocation = null;                                                                                             // 4713
			},                                                                                                                  // 4714
			hitDone: function() { // resets the rendering to show the original event                                            // 4715
				_this.unrenderEventResize();                                                                                       // 4716
				view.showEvent(event);                                                                                             // 4717
				enableCursor();                                                                                                    // 4718
			},                                                                                                                  // 4719
			interactionEnd: function(ev) {                                                                                      // 4720
				if (isDragging) {                                                                                                  // 4721
					_this.segResizeStop(seg, ev);                                                                                     // 4722
				}                                                                                                                  // 4723
				if (resizeLocation) { // valid date to resize to?                                                                  // 4724
					view.reportEventResize(event, resizeLocation, this.largeUnit, el, ev);                                            // 4725
				}                                                                                                                  // 4726
				_this.segResizeListener = null;                                                                                    // 4727
			}                                                                                                                   // 4728
		});                                                                                                                  // 4729
                                                                                                                       // 4730
		return dragListener;                                                                                                 // 4731
	},                                                                                                                    // 4732
                                                                                                                       // 4733
                                                                                                                       // 4734
	// Called before event segment resizing starts                                                                        // 4735
	segResizeStart: function(seg, ev) {                                                                                   // 4736
		this.isResizingSeg = true;                                                                                           // 4737
		this.view.trigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                  // 4738
	},                                                                                                                    // 4739
                                                                                                                       // 4740
                                                                                                                       // 4741
	// Called after event segment resizing stops                                                                          // 4742
	segResizeStop: function(seg, ev) {                                                                                    // 4743
		this.isResizingSeg = false;                                                                                          // 4744
		this.view.trigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                   // 4745
	},                                                                                                                    // 4746
                                                                                                                       // 4747
                                                                                                                       // 4748
	// Returns new date-information for an event segment being resized from its start                                     // 4749
	computeEventStartResize: function(startSpan, endSpan, event) {                                                        // 4750
		return this.computeEventResize('start', startSpan, endSpan, event);                                                  // 4751
	},                                                                                                                    // 4752
                                                                                                                       // 4753
                                                                                                                       // 4754
	// Returns new date-information for an event segment being resized from its end                                       // 4755
	computeEventEndResize: function(startSpan, endSpan, event) {                                                          // 4756
		return this.computeEventResize('end', startSpan, endSpan, event);                                                    // 4757
	},                                                                                                                    // 4758
                                                                                                                       // 4759
                                                                                                                       // 4760
	// Returns new zoned date information for an event segment being resized from its start OR end                        // 4761
	// `type` is either 'start' or 'end'.                                                                                 // 4762
	// DOES NOT consider overlap/constraint.                                                                              // 4763
	computeEventResize: function(type, startSpan, endSpan, event) {                                                       // 4764
		var calendar = this.view.calendar;                                                                                   // 4765
		var delta = this.diffDates(endSpan[type], startSpan[type]);                                                          // 4766
		var resizeLocation; // zoned event date properties                                                                   // 4767
		var defaultDuration;                                                                                                 // 4768
                                                                                                                       // 4769
		// build original values to work from, guaranteeing a start and end                                                  // 4770
		resizeLocation = {                                                                                                   // 4771
			start: event.start.clone(),                                                                                         // 4772
			end: calendar.getEventEnd(event),                                                                                   // 4773
			allDay: event.allDay                                                                                                // 4774
		};                                                                                                                   // 4775
                                                                                                                       // 4776
		// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times                 // 4777
		if (resizeLocation.allDay && durationHasTime(delta)) {                                                               // 4778
			resizeLocation.allDay = false;                                                                                      // 4779
			calendar.normalizeEventTimes(resizeLocation);                                                                       // 4780
		}                                                                                                                    // 4781
                                                                                                                       // 4782
		resizeLocation[type].add(delta); // apply delta to start or end                                                      // 4783
                                                                                                                       // 4784
		// if the event was compressed too small, find a new reasonable duration for it                                      // 4785
		if (!resizeLocation.start.isBefore(resizeLocation.end)) {                                                            // 4786
                                                                                                                       // 4787
			defaultDuration =                                                                                                   // 4788
				this.minResizeDuration || // TODO: hack                                                                            // 4789
				(event.allDay ?                                                                                                    // 4790
					calendar.defaultAllDayEventDuration :                                                                             // 4791
					calendar.defaultTimedEventDuration);                                                                              // 4792
                                                                                                                       // 4793
			if (type == 'start') { // resizing the start?                                                                       // 4794
				resizeLocation.start = resizeLocation.end.clone().subtract(defaultDuration);                                       // 4795
			}                                                                                                                   // 4796
			else { // resizing the end?                                                                                         // 4797
				resizeLocation.end = resizeLocation.start.clone().add(defaultDuration);                                            // 4798
			}                                                                                                                   // 4799
		}                                                                                                                    // 4800
                                                                                                                       // 4801
		return resizeLocation;                                                                                               // 4802
	},                                                                                                                    // 4803
                                                                                                                       // 4804
                                                                                                                       // 4805
	// Renders a visual indication of an event being resized.                                                             // 4806
	// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.             // 4807
	// Must return elements used for any mock events.                                                                     // 4808
	renderEventResize: function(range, seg) {                                                                             // 4809
		// subclasses must implement                                                                                         // 4810
	},                                                                                                                    // 4811
                                                                                                                       // 4812
                                                                                                                       // 4813
	// Unrenders a visual indication of an event being resized.                                                           // 4814
	unrenderEventResize: function() {                                                                                     // 4815
		// subclasses must implement                                                                                         // 4816
	},                                                                                                                    // 4817
                                                                                                                       // 4818
                                                                                                                       // 4819
	/* Rendering Utils                                                                                                    // 4820
	------------------------------------------------------------------------------------------------------------------*/  // 4821
                                                                                                                       // 4822
                                                                                                                       // 4823
	// Compute the text that should be displayed on an event's element.                                                   // 4824
	// `range` can be the Event object itself, or something range-like, with at least a `start`.                          // 4825
	// If event times are disabled, or the event has no time, will return a blank string.                                 // 4826
	// If not specified, formatStr will default to the eventTimeFormat setting,                                           // 4827
	// and displayEnd will default to the displayEventEnd setting.                                                        // 4828
	getEventTimeText: function(range, formatStr, displayEnd) {                                                            // 4829
                                                                                                                       // 4830
		if (formatStr == null) {                                                                                             // 4831
			formatStr = this.eventTimeFormat;                                                                                   // 4832
		}                                                                                                                    // 4833
                                                                                                                       // 4834
		if (displayEnd == null) {                                                                                            // 4835
			displayEnd = this.displayEventEnd;                                                                                  // 4836
		}                                                                                                                    // 4837
                                                                                                                       // 4838
		if (this.displayEventTime && range.start.hasTime()) {                                                                // 4839
			if (displayEnd && range.end) {                                                                                      // 4840
				return this.view.formatRange(range, formatStr);                                                                    // 4841
			}                                                                                                                   // 4842
			else {                                                                                                              // 4843
				return range.start.format(formatStr);                                                                              // 4844
			}                                                                                                                   // 4845
		}                                                                                                                    // 4846
                                                                                                                       // 4847
		return '';                                                                                                           // 4848
	},                                                                                                                    // 4849
                                                                                                                       // 4850
                                                                                                                       // 4851
	// Generic utility for generating the HTML classNames for an event segment's element                                  // 4852
	getSegClasses: function(seg, isDraggable, isResizable) {                                                              // 4853
		var view = this.view;                                                                                                // 4854
		var event = seg.event;                                                                                               // 4855
		var classes = [                                                                                                      // 4856
			'fc-event',                                                                                                         // 4857
			seg.isStart ? 'fc-start' : 'fc-not-start',                                                                          // 4858
			seg.isEnd ? 'fc-end' : 'fc-not-end'                                                                                 // 4859
		].concat(                                                                                                            // 4860
			event.className,                                                                                                    // 4861
			event.source ? event.source.className : []                                                                          // 4862
		);                                                                                                                   // 4863
                                                                                                                       // 4864
		if (isDraggable) {                                                                                                   // 4865
			classes.push('fc-draggable');                                                                                       // 4866
		}                                                                                                                    // 4867
		if (isResizable) {                                                                                                   // 4868
			classes.push('fc-resizable');                                                                                       // 4869
		}                                                                                                                    // 4870
                                                                                                                       // 4871
		// event is currently selected? attach a className.                                                                  // 4872
		if (view.isEventSelected(event)) {                                                                                   // 4873
			classes.push('fc-selected');                                                                                        // 4874
		}                                                                                                                    // 4875
                                                                                                                       // 4876
		return classes;                                                                                                      // 4877
	},                                                                                                                    // 4878
                                                                                                                       // 4879
                                                                                                                       // 4880
	// Utility for generating event skin-related CSS properties                                                           // 4881
	getSegSkinCss: function(seg) {                                                                                        // 4882
		var event = seg.event;                                                                                               // 4883
		var view = this.view;                                                                                                // 4884
		var source = event.source || {};                                                                                     // 4885
		var eventColor = event.color;                                                                                        // 4886
		var sourceColor = source.color;                                                                                      // 4887
		var optionColor = view.opt('eventColor');                                                                            // 4888
                                                                                                                       // 4889
		return {                                                                                                             // 4890
			'background-color':                                                                                                 // 4891
				event.backgroundColor ||                                                                                           // 4892
				eventColor ||                                                                                                      // 4893
				source.backgroundColor ||                                                                                          // 4894
				sourceColor ||                                                                                                     // 4895
				view.opt('eventBackgroundColor') ||                                                                                // 4896
				optionColor,                                                                                                       // 4897
			'border-color':                                                                                                     // 4898
				event.borderColor ||                                                                                               // 4899
				eventColor ||                                                                                                      // 4900
				source.borderColor ||                                                                                              // 4901
				sourceColor ||                                                                                                     // 4902
				view.opt('eventBorderColor') ||                                                                                    // 4903
				optionColor,                                                                                                       // 4904
			color:                                                                                                              // 4905
				event.textColor ||                                                                                                 // 4906
				source.textColor ||                                                                                                // 4907
				view.opt('eventTextColor')                                                                                         // 4908
		};                                                                                                                   // 4909
	},                                                                                                                    // 4910
                                                                                                                       // 4911
                                                                                                                       // 4912
	/* Converting events -> eventRange -> eventSpan -> eventSegs                                                          // 4913
	------------------------------------------------------------------------------------------------------------------*/  // 4914
                                                                                                                       // 4915
                                                                                                                       // 4916
	// Generates an array of segments for the given single event                                                          // 4917
	// Can accept an event "location" as well (which only has start/end and no allDay)                                    // 4918
	eventToSegs: function(event) {                                                                                        // 4919
		return this.eventsToSegs([ event ]);                                                                                 // 4920
	},                                                                                                                    // 4921
                                                                                                                       // 4922
                                                                                                                       // 4923
	eventToSpan: function(event) {                                                                                        // 4924
		return this.eventToSpans(event)[0];                                                                                  // 4925
	},                                                                                                                    // 4926
                                                                                                                       // 4927
                                                                                                                       // 4928
	// Generates spans (always unzoned) for the given event.                                                              // 4929
	// Does not do any inverting for inverse-background events.                                                           // 4930
	// Can accept an event "location" as well (which only has start/end and no allDay)                                    // 4931
	eventToSpans: function(event) {                                                                                       // 4932
		var range = this.eventToRange(event);                                                                                // 4933
		return this.eventRangeToSpans(range, event);                                                                         // 4934
	},                                                                                                                    // 4935
                                                                                                                       // 4936
                                                                                                                       // 4937
                                                                                                                       // 4938
	// Converts an array of event objects into an array of event segment objects.                                         // 4939
	// A custom `segSliceFunc` may be given for arbitrarily slicing up events.                                            // 4940
	// Doesn't guarantee an order for the resulting array.                                                                // 4941
	eventsToSegs: function(allEvents, segSliceFunc) {                                                                     // 4942
		var _this = this;                                                                                                    // 4943
		var eventsById = groupEventsById(allEvents);                                                                         // 4944
		var segs = [];                                                                                                       // 4945
                                                                                                                       // 4946
		$.each(eventsById, function(id, events) {                                                                            // 4947
			var ranges = [];                                                                                                    // 4948
			var i;                                                                                                              // 4949
                                                                                                                       // 4950
			for (i = 0; i < events.length; i++) {                                                                               // 4951
				ranges.push(_this.eventToRange(events[i]));                                                                        // 4952
			}                                                                                                                   // 4953
                                                                                                                       // 4954
			// inverse-background events (utilize only the first event in calculations)                                         // 4955
			if (isInverseBgEvent(events[0])) {                                                                                  // 4956
				ranges = _this.invertRanges(ranges);                                                                               // 4957
                                                                                                                       // 4958
				for (i = 0; i < ranges.length; i++) {                                                                              // 4959
					segs.push.apply(segs, // append to                                                                                // 4960
						_this.eventRangeToSegs(ranges[i], events[0], segSliceFunc));                                                     // 4961
				}                                                                                                                  // 4962
			}                                                                                                                   // 4963
			// normal event ranges                                                                                              // 4964
			else {                                                                                                              // 4965
				for (i = 0; i < ranges.length; i++) {                                                                              // 4966
					segs.push.apply(segs, // append to                                                                                // 4967
						_this.eventRangeToSegs(ranges[i], events[i], segSliceFunc));                                                     // 4968
				}                                                                                                                  // 4969
			}                                                                                                                   // 4970
		});                                                                                                                  // 4971
                                                                                                                       // 4972
		return segs;                                                                                                         // 4973
	},                                                                                                                    // 4974
                                                                                                                       // 4975
                                                                                                                       // 4976
	// Generates the unzoned start/end dates an event appears to occupy                                                   // 4977
	// Can accept an event "location" as well (which only has start/end and no allDay)                                    // 4978
	eventToRange: function(event) {                                                                                       // 4979
		return {                                                                                                             // 4980
			start: event.start.clone().stripZone(),                                                                             // 4981
			end: (                                                                                                              // 4982
				event.end ?                                                                                                        // 4983
					event.end.clone() :                                                                                               // 4984
					// derive the end from the start and allDay. compute allDay if necessary                                          // 4985
					this.view.calendar.getDefaultEventEnd(                                                                            // 4986
						event.allDay != null ?                                                                                           // 4987
							event.allDay :                                                                                                  // 4988
							!event.start.hasTime(),                                                                                         // 4989
						event.start                                                                                                      // 4990
					)                                                                                                                 // 4991
			).stripZone()                                                                                                       // 4992
		};                                                                                                                   // 4993
	},                                                                                                                    // 4994
                                                                                                                       // 4995
                                                                                                                       // 4996
	// Given an event's range (unzoned start/end), and the event itself,                                                  // 4997
	// slice into segments (using the segSliceFunc function if specified)                                                 // 4998
	eventRangeToSegs: function(range, event, segSliceFunc) {                                                              // 4999
		var spans = this.eventRangeToSpans(range, event);                                                                    // 5000
		var segs = [];                                                                                                       // 5001
		var i;                                                                                                               // 5002
                                                                                                                       // 5003
		for (i = 0; i < spans.length; i++) {                                                                                 // 5004
			segs.push.apply(segs, // append to                                                                                  // 5005
				this.eventSpanToSegs(spans[i], event, segSliceFunc));                                                              // 5006
		}                                                                                                                    // 5007
                                                                                                                       // 5008
		return segs;                                                                                                         // 5009
	},                                                                                                                    // 5010
                                                                                                                       // 5011
                                                                                                                       // 5012
	// Given an event's unzoned date range, return an array of "span" objects.                                            // 5013
	// Subclasses can override.                                                                                           // 5014
	eventRangeToSpans: function(range, event) {                                                                           // 5015
		return [ $.extend({}, range) ]; // copy into a single-item array                                                     // 5016
	},                                                                                                                    // 5017
                                                                                                                       // 5018
                                                                                                                       // 5019
	// Given an event's span (unzoned start/end and other misc data), and the event itself,                               // 5020
	// slices into segments and attaches event-derived properties to them.                                                // 5021
	eventSpanToSegs: function(span, event, segSliceFunc) {                                                                // 5022
		var segs = segSliceFunc ? segSliceFunc(span) : this.spanToSegs(span);                                                // 5023
		var i, seg;                                                                                                          // 5024
                                                                                                                       // 5025
		for (i = 0; i < segs.length; i++) {                                                                                  // 5026
			seg = segs[i];                                                                                                      // 5027
			seg.event = event;                                                                                                  // 5028
			seg.eventStartMS = +span.start; // TODO: not the best name after making spans unzoned                               // 5029
			seg.eventDurationMS = span.end - span.start;                                                                        // 5030
		}                                                                                                                    // 5031
                                                                                                                       // 5032
		return segs;                                                                                                         // 5033
	},                                                                                                                    // 5034
                                                                                                                       // 5035
                                                                                                                       // 5036
	// Produces a new array of range objects that will cover all the time NOT covered by the given ranges.                // 5037
	// SIDE EFFECT: will mutate the given array and will use its date references.                                         // 5038
	invertRanges: function(ranges) {                                                                                      // 5039
		var view = this.view;                                                                                                // 5040
		var viewStart = view.start.clone(); // need a copy                                                                   // 5041
		var viewEnd = view.end.clone(); // need a copy                                                                       // 5042
		var inverseRanges = [];                                                                                              // 5043
		var start = viewStart; // the end of the previous range. the start of the new range                                  // 5044
		var i, range;                                                                                                        // 5045
                                                                                                                       // 5046
		// ranges need to be in order. required for our date-walking algorithm                                               // 5047
		ranges.sort(compareRanges);                                                                                          // 5048
                                                                                                                       // 5049
		for (i = 0; i < ranges.length; i++) {                                                                                // 5050
			range = ranges[i];                                                                                                  // 5051
                                                                                                                       // 5052
			// add the span of time before the event (if there is any)                                                          // 5053
			if (range.start > start) { // compare millisecond time (skip any ambig logic)                                       // 5054
				inverseRanges.push({                                                                                               // 5055
					start: start,                                                                                                     // 5056
					end: range.start                                                                                                  // 5057
				});                                                                                                                // 5058
			}                                                                                                                   // 5059
                                                                                                                       // 5060
			start = range.end;                                                                                                  // 5061
		}                                                                                                                    // 5062
                                                                                                                       // 5063
		// add the span of time after the last event (if there is any)                                                       // 5064
		if (start < viewEnd) { // compare millisecond time (skip any ambig logic)                                            // 5065
			inverseRanges.push({                                                                                                // 5066
				start: start,                                                                                                      // 5067
				end: viewEnd                                                                                                       // 5068
			});                                                                                                                 // 5069
		}                                                                                                                    // 5070
                                                                                                                       // 5071
		return inverseRanges;                                                                                                // 5072
	},                                                                                                                    // 5073
                                                                                                                       // 5074
                                                                                                                       // 5075
	sortEventSegs: function(segs) {                                                                                       // 5076
		segs.sort(proxy(this, 'compareEventSegs'));                                                                          // 5077
	},                                                                                                                    // 5078
                                                                                                                       // 5079
                                                                                                                       // 5080
	// A cmp function for determining which segments should take visual priority                                          // 5081
	compareEventSegs: function(seg1, seg2) {                                                                              // 5082
		return seg1.eventStartMS - seg2.eventStartMS || // earlier events go first                                           // 5083
			seg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first                                       // 5084
			seg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)                    // 5085
			compareByFieldSpecs(seg1.event, seg2.event, this.view.eventOrderSpecs);                                             // 5086
	}                                                                                                                     // 5087
                                                                                                                       // 5088
});                                                                                                                    // 5089
                                                                                                                       // 5090
                                                                                                                       // 5091
/* Utilities                                                                                                           // 5092
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 5094
                                                                                                                       // 5095
function isBgEvent(event) { // returns true if background OR inverse-background                                        // 5096
	var rendering = getEventRendering(event);                                                                             // 5097
	return rendering === 'background' || rendering === 'inverse-background';                                              // 5098
}                                                                                                                      // 5099
FC.isBgEvent = isBgEvent; // export                                                                                    // 5100
                                                                                                                       // 5101
                                                                                                                       // 5102
function isInverseBgEvent(event) {                                                                                     // 5103
	return getEventRendering(event) === 'inverse-background';                                                             // 5104
}                                                                                                                      // 5105
                                                                                                                       // 5106
                                                                                                                       // 5107
function getEventRendering(event) {                                                                                    // 5108
	return firstDefined((event.source || {}).rendering, event.rendering);                                                 // 5109
}                                                                                                                      // 5110
                                                                                                                       // 5111
                                                                                                                       // 5112
function groupEventsById(events) {                                                                                     // 5113
	var eventsById = {};                                                                                                  // 5114
	var i, event;                                                                                                         // 5115
                                                                                                                       // 5116
	for (i = 0; i < events.length; i++) {                                                                                 // 5117
		event = events[i];                                                                                                   // 5118
		(eventsById[event._id] || (eventsById[event._id] = [])).push(event);                                                 // 5119
	}                                                                                                                     // 5120
                                                                                                                       // 5121
	return eventsById;                                                                                                    // 5122
}                                                                                                                      // 5123
                                                                                                                       // 5124
                                                                                                                       // 5125
// A cmp function for determining which non-inverted "ranges" (see above) happen earlier                               // 5126
function compareRanges(range1, range2) {                                                                               // 5127
	return range1.start - range2.start; // earlier ranges go first                                                        // 5128
}                                                                                                                      // 5129
                                                                                                                       // 5130
                                                                                                                       // 5131
/* External-Dragging-Element Data                                                                                      // 5132
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 5134
// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.                                       // 5135
// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.      // 5136
FC.dataAttrPrefix = '';                                                                                                // 5137
                                                                                                                       // 5138
// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure    // 5139
// to be used for Event Object creation.                                                                               // 5140
// A defined `.eventProps`, even when empty, indicates that an event should be created.                                // 5141
function getDraggedElMeta(el) {                                                                                        // 5142
	var prefix = FC.dataAttrPrefix;                                                                                       // 5143
	var eventProps; // properties for creating the event, not related to date/time                                        // 5144
	var startTime; // a Duration                                                                                          // 5145
	var duration;                                                                                                         // 5146
	var stick;                                                                                                            // 5147
                                                                                                                       // 5148
	if (prefix) { prefix += '-'; }                                                                                        // 5149
	eventProps = el.data(prefix + 'event') || null;                                                                       // 5150
                                                                                                                       // 5151
	if (eventProps) {                                                                                                     // 5152
		if (typeof eventProps === 'object') {                                                                                // 5153
			eventProps = $.extend({}, eventProps); // make a copy                                                               // 5154
		}                                                                                                                    // 5155
		else { // something like 1 or true. still signal event creation                                                      // 5156
			eventProps = {};                                                                                                    // 5157
		}                                                                                                                    // 5158
                                                                                                                       // 5159
		// pluck special-cased date/time properties                                                                          // 5160
		startTime = eventProps.start;                                                                                        // 5161
		if (startTime == null) { startTime = eventProps.time; } // accept 'time' as well                                     // 5162
		duration = eventProps.duration;                                                                                      // 5163
		stick = eventProps.stick;                                                                                            // 5164
		delete eventProps.start;                                                                                             // 5165
		delete eventProps.time;                                                                                              // 5166
		delete eventProps.duration;                                                                                          // 5167
		delete eventProps.stick;                                                                                             // 5168
	}                                                                                                                     // 5169
                                                                                                                       // 5170
	// fallback to standalone attribute values for each of the date/time properties                                       // 5171
	if (startTime == null) { startTime = el.data(prefix + 'start'); }                                                     // 5172
	if (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well                             // 5173
	if (duration == null) { duration = el.data(prefix + 'duration'); }                                                    // 5174
	if (stick == null) { stick = el.data(prefix + 'stick'); }                                                             // 5175
                                                                                                                       // 5176
	// massage into correct data types                                                                                    // 5177
	startTime = startTime != null ? moment.duration(startTime) : null;                                                    // 5178
	duration = duration != null ? moment.duration(duration) : null;                                                       // 5179
	stick = Boolean(stick);                                                                                               // 5180
                                                                                                                       // 5181
	return { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };                            // 5182
}                                                                                                                      // 5183
                                                                                                                       // 5184
                                                                                                                       // 5185
;;                                                                                                                     // 5186
                                                                                                                       // 5187
/*                                                                                                                     // 5188
A set of rendering and date-related methods for a visual component comprised of one or more rows of day columns.       // 5189
Prerequisite: the object being mixed into needs to be a *Grid*                                                         // 5190
*/                                                                                                                     // 5191
var DayTableMixin = FC.DayTableMixin = {                                                                               // 5192
                                                                                                                       // 5193
	breakOnWeeks: false, // should create a new row for each week?                                                        // 5194
	dayDates: null, // whole-day dates for each column. left to right                                                     // 5195
	dayIndices: null, // for each day from start, the offset                                                              // 5196
	daysPerRow: null,                                                                                                     // 5197
	rowCnt: null,                                                                                                         // 5198
	colCnt: null,                                                                                                         // 5199
	colHeadFormat: null,                                                                                                  // 5200
                                                                                                                       // 5201
                                                                                                                       // 5202
	// Populates internal variables used for date calculation and rendering                                               // 5203
	updateDayTable: function() {                                                                                          // 5204
		var view = this.view;                                                                                                // 5205
		var date = this.start.clone();                                                                                       // 5206
		var dayIndex = -1;                                                                                                   // 5207
		var dayIndices = [];                                                                                                 // 5208
		var dayDates = [];                                                                                                   // 5209
		var daysPerRow;                                                                                                      // 5210
		var firstDay;                                                                                                        // 5211
		var rowCnt;                                                                                                          // 5212
                                                                                                                       // 5213
		while (date.isBefore(this.end)) { // loop each day from start to end                                                 // 5214
			if (view.isHiddenDay(date)) {                                                                                       // 5215
				dayIndices.push(dayIndex + 0.5); // mark that it's between indices                                                 // 5216
			}                                                                                                                   // 5217
			else {                                                                                                              // 5218
				dayIndex++;                                                                                                        // 5219
				dayIndices.push(dayIndex);                                                                                         // 5220
				dayDates.push(date.clone());                                                                                       // 5221
			}                                                                                                                   // 5222
			date.add(1, 'days');                                                                                                // 5223
		}                                                                                                                    // 5224
                                                                                                                       // 5225
		if (this.breakOnWeeks) {                                                                                             // 5226
			// count columns until the day-of-week repeats                                                                      // 5227
			firstDay = dayDates[0].day();                                                                                       // 5228
			for (daysPerRow = 1; daysPerRow < dayDates.length; daysPerRow++) {                                                  // 5229
				if (dayDates[daysPerRow].day() == firstDay) {                                                                      // 5230
					break;                                                                                                            // 5231
				}                                                                                                                  // 5232
			}                                                                                                                   // 5233
			rowCnt = Math.ceil(dayDates.length / daysPerRow);                                                                   // 5234
		}                                                                                                                    // 5235
		else {                                                                                                               // 5236
			rowCnt = 1;                                                                                                         // 5237
			daysPerRow = dayDates.length;                                                                                       // 5238
		}                                                                                                                    // 5239
                                                                                                                       // 5240
		this.dayDates = dayDates;                                                                                            // 5241
		this.dayIndices = dayIndices;                                                                                        // 5242
		this.daysPerRow = daysPerRow;                                                                                        // 5243
		this.rowCnt = rowCnt;                                                                                                // 5244
		                                                                                                                     // 5245
		this.updateDayTableCols();                                                                                           // 5246
	},                                                                                                                    // 5247
                                                                                                                       // 5248
                                                                                                                       // 5249
	// Computes and assigned the colCnt property and updates any options that may be computed from it                     // 5250
	updateDayTableCols: function() {                                                                                      // 5251
		this.colCnt = this.computeColCnt();                                                                                  // 5252
		this.colHeadFormat = this.view.opt('columnFormat') || this.computeColHeadFormat();                                   // 5253
	},                                                                                                                    // 5254
                                                                                                                       // 5255
                                                                                                                       // 5256
	// Determines how many columns there should be in the table                                                           // 5257
	computeColCnt: function() {                                                                                           // 5258
		return this.daysPerRow;                                                                                              // 5259
	},                                                                                                                    // 5260
                                                                                                                       // 5261
                                                                                                                       // 5262
	// Computes the ambiguously-timed moment for the given cell                                                           // 5263
	getCellDate: function(row, col) {                                                                                     // 5264
		return this.dayDates[                                                                                                // 5265
				this.getCellDayIndex(row, col)                                                                                     // 5266
			].clone();                                                                                                          // 5267
	},                                                                                                                    // 5268
                                                                                                                       // 5269
                                                                                                                       // 5270
	// Computes the ambiguously-timed date range for the given cell                                                       // 5271
	getCellRange: function(row, col) {                                                                                    // 5272
		var start = this.getCellDate(row, col);                                                                              // 5273
		var end = start.clone().add(1, 'days');                                                                              // 5274
                                                                                                                       // 5275
		return { start: start, end: end };                                                                                   // 5276
	},                                                                                                                    // 5277
                                                                                                                       // 5278
                                                                                                                       // 5279
	// Returns the number of day cells, chronologically, from the first of the grid (0-based)                             // 5280
	getCellDayIndex: function(row, col) {                                                                                 // 5281
		return row * this.daysPerRow + this.getColDayIndex(col);                                                             // 5282
	},                                                                                                                    // 5283
                                                                                                                       // 5284
                                                                                                                       // 5285
	// Returns the numner of day cells, chronologically, from the first cell in *any given row*                           // 5286
	getColDayIndex: function(col) {                                                                                       // 5287
		if (this.isRTL) {                                                                                                    // 5288
			return this.colCnt - 1 - col;                                                                                       // 5289
		}                                                                                                                    // 5290
		else {                                                                                                               // 5291
			return col;                                                                                                         // 5292
		}                                                                                                                    // 5293
	},                                                                                                                    // 5294
                                                                                                                       // 5295
                                                                                                                       // 5296
	// Given a date, returns its chronolocial cell-index from the first cell of the grid.                                 // 5297
	// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.            // 5298
	// If before the first offset, returns a negative number.                                                             // 5299
	// If after the last offset, returns an offset past the last cell offset.                                             // 5300
	// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.                            // 5301
	getDateDayIndex: function(date) {                                                                                     // 5302
		var dayIndices = this.dayIndices;                                                                                    // 5303
		var dayOffset = date.diff(this.start, 'days');                                                                       // 5304
                                                                                                                       // 5305
		if (dayOffset < 0) {                                                                                                 // 5306
			return dayIndices[0] - 1;                                                                                           // 5307
		}                                                                                                                    // 5308
		else if (dayOffset >= dayIndices.length) {                                                                           // 5309
			return dayIndices[dayIndices.length - 1] + 1;                                                                       // 5310
		}                                                                                                                    // 5311
		else {                                                                                                               // 5312
			return dayIndices[dayOffset];                                                                                       // 5313
		}                                                                                                                    // 5314
	},                                                                                                                    // 5315
                                                                                                                       // 5316
                                                                                                                       // 5317
	/* Options                                                                                                            // 5318
	------------------------------------------------------------------------------------------------------------------*/  // 5319
                                                                                                                       // 5320
                                                                                                                       // 5321
	// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 5322
	computeColHeadFormat: function() {                                                                                    // 5323
		// if more than one week row, or if there are a lot of columns with not much space,                                  // 5324
		// put just the day numbers will be in each cell                                                                     // 5325
		if (this.rowCnt > 1 || this.colCnt > 10) {                                                                           // 5326
			return 'ddd'; // "Sat"                                                                                              // 5327
		}                                                                                                                    // 5328
		// multiple days, so full single date string WON'T be in title text                                                  // 5329
		else if (this.colCnt > 1) {                                                                                          // 5330
			return this.view.opt('dayOfMonthFormat'); // "Sat 12/10"                                                            // 5331
		}                                                                                                                    // 5332
		// single day, so full single date string will probably be in title text                                             // 5333
		else {                                                                                                               // 5334
			return 'dddd'; // "Saturday"                                                                                        // 5335
		}                                                                                                                    // 5336
	},                                                                                                                    // 5337
                                                                                                                       // 5338
                                                                                                                       // 5339
	/* Slicing                                                                                                            // 5340
	------------------------------------------------------------------------------------------------------------------*/  // 5341
                                                                                                                       // 5342
                                                                                                                       // 5343
	// Slices up a date range into a segment for every week-row it intersects with                                        // 5344
	sliceRangeByRow: function(range) {                                                                                    // 5345
		var daysPerRow = this.daysPerRow;                                                                                    // 5346
		var normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold            // 5347
		var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index                                   // 5348
		var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index           // 5349
		var segs = [];                                                                                                       // 5350
		var row;                                                                                                             // 5351
		var rowFirst, rowLast; // inclusive day-index range for current row                                                  // 5352
		var segFirst, segLast; // inclusive day-index range for segment                                                      // 5353
                                                                                                                       // 5354
		for (row = 0; row < this.rowCnt; row++) {                                                                            // 5355
			rowFirst = row * daysPerRow;                                                                                        // 5356
			rowLast = rowFirst + daysPerRow - 1;                                                                                // 5357
                                                                                                                       // 5358
			// intersect segment's offset range with the row's                                                                  // 5359
			segFirst = Math.max(rangeFirst, rowFirst);                                                                          // 5360
			segLast = Math.min(rangeLast, rowLast);                                                                             // 5361
                                                                                                                       // 5362
			// deal with in-between indices                                                                                     // 5363
			segFirst = Math.ceil(segFirst); // in-between starts round to next cell                                             // 5364
			segLast = Math.floor(segLast); // in-between ends round to prev cell                                                // 5365
                                                                                                                       // 5366
			if (segFirst <= segLast) { // was there any intersection with the current row?                                      // 5367
				segs.push({                                                                                                        // 5368
					row: row,                                                                                                         // 5369
                                                                                                                       // 5370
					// normalize to start of row                                                                                      // 5371
					firstRowDayIndex: segFirst - rowFirst,                                                                            // 5372
					lastRowDayIndex: segLast - rowFirst,                                                                              // 5373
                                                                                                                       // 5374
					// must be matching integers to be the segment's start/end                                                        // 5375
					isStart: segFirst === rangeFirst,                                                                                 // 5376
					isEnd: segLast === rangeLast                                                                                      // 5377
				});                                                                                                                // 5378
			}                                                                                                                   // 5379
		}                                                                                                                    // 5380
                                                                                                                       // 5381
		return segs;                                                                                                         // 5382
	},                                                                                                                    // 5383
                                                                                                                       // 5384
                                                                                                                       // 5385
	// Slices up a date range into a segment for every day-cell it intersects with.                                       // 5386
	// TODO: make more DRY with sliceRangeByRow somehow.                                                                  // 5387
	sliceRangeByDay: function(range) {                                                                                    // 5388
		var daysPerRow = this.daysPerRow;                                                                                    // 5389
		var normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold            // 5390
		var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index                                   // 5391
		var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index           // 5392
		var segs = [];                                                                                                       // 5393
		var row;                                                                                                             // 5394
		var rowFirst, rowLast; // inclusive day-index range for current row                                                  // 5395
		var i;                                                                                                               // 5396
		var segFirst, segLast; // inclusive day-index range for segment                                                      // 5397
                                                                                                                       // 5398
		for (row = 0; row < this.rowCnt; row++) {                                                                            // 5399
			rowFirst = row * daysPerRow;                                                                                        // 5400
			rowLast = rowFirst + daysPerRow - 1;                                                                                // 5401
                                                                                                                       // 5402
			for (i = rowFirst; i <= rowLast; i++) {                                                                             // 5403
                                                                                                                       // 5404
				// intersect segment's offset range with the row's                                                                 // 5405
				segFirst = Math.max(rangeFirst, i);                                                                                // 5406
				segLast = Math.min(rangeLast, i);                                                                                  // 5407
                                                                                                                       // 5408
				// deal with in-between indices                                                                                    // 5409
				segFirst = Math.ceil(segFirst); // in-between starts round to next cell                                            // 5410
				segLast = Math.floor(segLast); // in-between ends round to prev cell                                               // 5411
                                                                                                                       // 5412
				if (segFirst <= segLast) { // was there any intersection with the current row?                                     // 5413
					segs.push({                                                                                                       // 5414
						row: row,                                                                                                        // 5415
                                                                                                                       // 5416
						// normalize to start of row                                                                                     // 5417
						firstRowDayIndex: segFirst - rowFirst,                                                                           // 5418
						lastRowDayIndex: segLast - rowFirst,                                                                             // 5419
                                                                                                                       // 5420
						// must be matching integers to be the segment's start/end                                                       // 5421
						isStart: segFirst === rangeFirst,                                                                                // 5422
						isEnd: segLast === rangeLast                                                                                     // 5423
					});                                                                                                               // 5424
				}                                                                                                                  // 5425
			}                                                                                                                   // 5426
		}                                                                                                                    // 5427
                                                                                                                       // 5428
		return segs;                                                                                                         // 5429
	},                                                                                                                    // 5430
                                                                                                                       // 5431
                                                                                                                       // 5432
	/* Header Rendering                                                                                                   // 5433
	------------------------------------------------------------------------------------------------------------------*/  // 5434
                                                                                                                       // 5435
                                                                                                                       // 5436
	renderHeadHtml: function() {                                                                                          // 5437
		var view = this.view;                                                                                                // 5438
                                                                                                                       // 5439
		return '' +                                                                                                          // 5440
			'<div class="fc-row ' + view.widgetHeaderClass + '">' +                                                             // 5441
				'<table>' +                                                                                                        // 5442
					'<thead>' +                                                                                                       // 5443
						this.renderHeadTrHtml() +                                                                                        // 5444
					'</thead>' +                                                                                                      // 5445
				'</table>' +                                                                                                       // 5446
			'</div>';                                                                                                           // 5447
	},                                                                                                                    // 5448
                                                                                                                       // 5449
                                                                                                                       // 5450
	renderHeadIntroHtml: function() {                                                                                     // 5451
		return this.renderIntroHtml(); // fall back to generic                                                               // 5452
	},                                                                                                                    // 5453
                                                                                                                       // 5454
                                                                                                                       // 5455
	renderHeadTrHtml: function() {                                                                                        // 5456
		return '' +                                                                                                          // 5457
			'<tr>' +                                                                                                            // 5458
				(this.isRTL ? '' : this.renderHeadIntroHtml()) +                                                                   // 5459
				this.renderHeadDateCellsHtml() +                                                                                   // 5460
				(this.isRTL ? this.renderHeadIntroHtml() : '') +                                                                   // 5461
			'</tr>';                                                                                                            // 5462
	},                                                                                                                    // 5463
                                                                                                                       // 5464
                                                                                                                       // 5465
	renderHeadDateCellsHtml: function() {                                                                                 // 5466
		var htmls = [];                                                                                                      // 5467
		var col, date;                                                                                                       // 5468
                                                                                                                       // 5469
		for (col = 0; col < this.colCnt; col++) {                                                                            // 5470
			date = this.getCellDate(0, col);                                                                                    // 5471
			htmls.push(this.renderHeadDateCellHtml(date));                                                                      // 5472
		}                                                                                                                    // 5473
                                                                                                                       // 5474
		return htmls.join('');                                                                                               // 5475
	},                                                                                                                    // 5476
                                                                                                                       // 5477
                                                                                                                       // 5478
	// TODO: when internalApiVersion, accept an object for HTML attributes                                                // 5479
	// (colspan should be no different)                                                                                   // 5480
	renderHeadDateCellHtml: function(date, colspan, otherAttrs) {                                                         // 5481
		var view = this.view;                                                                                                // 5482
                                                                                                                       // 5483
		return '' +                                                                                                          // 5484
			'<th class="fc-day-header ' + view.widgetHeaderClass + ' fc-' + dayIDs[date.day()] + '"' +                          // 5485
				(this.rowCnt == 1 ?                                                                                                // 5486
					' data-date="' + date.format('YYYY-MM-DD') + '"' :                                                                // 5487
					'') +                                                                                                             // 5488
				(colspan > 1 ?                                                                                                     // 5489
					' colspan="' + colspan + '"' :                                                                                    // 5490
					'') +                                                                                                             // 5491
				(otherAttrs ?                                                                                                      // 5492
					' ' + otherAttrs :                                                                                                // 5493
					'') +                                                                                                             // 5494
			'>' +                                                                                                               // 5495
				htmlEscape(date.format(this.colHeadFormat)) +                                                                      // 5496
			'</th>';                                                                                                            // 5497
	},                                                                                                                    // 5498
                                                                                                                       // 5499
                                                                                                                       // 5500
	/* Background Rendering                                                                                               // 5501
	------------------------------------------------------------------------------------------------------------------*/  // 5502
                                                                                                                       // 5503
                                                                                                                       // 5504
	renderBgTrHtml: function(row) {                                                                                       // 5505
		return '' +                                                                                                          // 5506
			'<tr>' +                                                                                                            // 5507
				(this.isRTL ? '' : this.renderBgIntroHtml(row)) +                                                                  // 5508
				this.renderBgCellsHtml(row) +                                                                                      // 5509
				(this.isRTL ? this.renderBgIntroHtml(row) : '') +                                                                  // 5510
			'</tr>';                                                                                                            // 5511
	},                                                                                                                    // 5512
                                                                                                                       // 5513
                                                                                                                       // 5514
	renderBgIntroHtml: function(row) {                                                                                    // 5515
		return this.renderIntroHtml(); // fall back to generic                                                               // 5516
	},                                                                                                                    // 5517
                                                                                                                       // 5518
                                                                                                                       // 5519
	renderBgCellsHtml: function(row) {                                                                                    // 5520
		var htmls = [];                                                                                                      // 5521
		var col, date;                                                                                                       // 5522
                                                                                                                       // 5523
		for (col = 0; col < this.colCnt; col++) {                                                                            // 5524
			date = this.getCellDate(row, col);                                                                                  // 5525
			htmls.push(this.renderBgCellHtml(date));                                                                            // 5526
		}                                                                                                                    // 5527
                                                                                                                       // 5528
		return htmls.join('');                                                                                               // 5529
	},                                                                                                                    // 5530
                                                                                                                       // 5531
                                                                                                                       // 5532
	renderBgCellHtml: function(date, otherAttrs) {                                                                        // 5533
		var view = this.view;                                                                                                // 5534
		var classes = this.getDayClasses(date);                                                                              // 5535
                                                                                                                       // 5536
		classes.unshift('fc-day', view.widgetContentClass);                                                                  // 5537
                                                                                                                       // 5538
		return '<td class="' + classes.join(' ') + '"' +                                                                     // 5539
			' data-date="' + date.format('YYYY-MM-DD') + '"' + // if date has a time, won't format it                           // 5540
			(otherAttrs ?                                                                                                       // 5541
				' ' + otherAttrs :                                                                                                 // 5542
				'') +                                                                                                              // 5543
			'></td>';                                                                                                           // 5544
	},                                                                                                                    // 5545
                                                                                                                       // 5546
                                                                                                                       // 5547
	/* Generic                                                                                                            // 5548
	------------------------------------------------------------------------------------------------------------------*/  // 5549
                                                                                                                       // 5550
                                                                                                                       // 5551
	// Generates the default HTML intro for any row. User classes should override                                         // 5552
	renderIntroHtml: function() {                                                                                         // 5553
	},                                                                                                                    // 5554
                                                                                                                       // 5555
                                                                                                                       // 5556
	// TODO: a generic method for dealing with <tr>, RTL, intro                                                           // 5557
	// when increment internalApiVersion                                                                                  // 5558
	// wrapTr (scheduler)                                                                                                 // 5559
                                                                                                                       // 5560
                                                                                                                       // 5561
	/* Utils                                                                                                              // 5562
	------------------------------------------------------------------------------------------------------------------*/  // 5563
                                                                                                                       // 5564
                                                                                                                       // 5565
	// Applies the generic "intro" and "outro" HTML to the given cells.                                                   // 5566
	// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.      // 5567
	bookendCells: function(trEl) {                                                                                        // 5568
		var introHtml = this.renderIntroHtml();                                                                              // 5569
                                                                                                                       // 5570
		if (introHtml) {                                                                                                     // 5571
			if (this.isRTL) {                                                                                                   // 5572
				trEl.append(introHtml);                                                                                            // 5573
			}                                                                                                                   // 5574
			else {                                                                                                              // 5575
				trEl.prepend(introHtml);                                                                                           // 5576
			}                                                                                                                   // 5577
		}                                                                                                                    // 5578
	}                                                                                                                     // 5579
                                                                                                                       // 5580
};                                                                                                                     // 5581
                                                                                                                       // 5582
;;                                                                                                                     // 5583
                                                                                                                       // 5584
/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.     // 5585
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 5587
var DayGrid = FC.DayGrid = Grid.extend(DayTableMixin, {                                                                // 5588
                                                                                                                       // 5589
	numbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal          // 5590
	bottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid                     // 5591
                                                                                                                       // 5592
	rowEls: null, // set of fake row elements                                                                             // 5593
	cellEls: null, // set of whole-day elements comprising the row's background                                           // 5594
	helperEls: null, // set of cell skeleton elements for rendering the mock event "helper"                               // 5595
                                                                                                                       // 5596
	rowCoordCache: null,                                                                                                  // 5597
	colCoordCache: null,                                                                                                  // 5598
                                                                                                                       // 5599
                                                                                                                       // 5600
	// Renders the rows and columns into the component's `this.el`, which should already be assigned.                     // 5601
	// isRigid determins whether the individual rows should ignore the contents and be a constant height.                 // 5602
	// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.          // 5603
	renderDates: function(isRigid) {                                                                                      // 5604
		var view = this.view;                                                                                                // 5605
		var rowCnt = this.rowCnt;                                                                                            // 5606
		var colCnt = this.colCnt;                                                                                            // 5607
		var html = '';                                                                                                       // 5608
		var row;                                                                                                             // 5609
		var col;                                                                                                             // 5610
                                                                                                                       // 5611
		for (row = 0; row < rowCnt; row++) {                                                                                 // 5612
			html += this.renderDayRowHtml(row, isRigid);                                                                        // 5613
		}                                                                                                                    // 5614
		this.el.html(html);                                                                                                  // 5615
                                                                                                                       // 5616
		this.rowEls = this.el.find('.fc-row');                                                                               // 5617
		this.cellEls = this.el.find('.fc-day');                                                                              // 5618
                                                                                                                       // 5619
		this.rowCoordCache = new CoordCache({                                                                                // 5620
			els: this.rowEls,                                                                                                   // 5621
			isVertical: true                                                                                                    // 5622
		});                                                                                                                  // 5623
		this.colCoordCache = new CoordCache({                                                                                // 5624
			els: this.cellEls.slice(0, this.colCnt), // only the first row                                                      // 5625
			isHorizontal: true                                                                                                  // 5626
		});                                                                                                                  // 5627
                                                                                                                       // 5628
		// trigger dayRender with each cell's element                                                                        // 5629
		for (row = 0; row < rowCnt; row++) {                                                                                 // 5630
			for (col = 0; col < colCnt; col++) {                                                                                // 5631
				view.trigger(                                                                                                      // 5632
					'dayRender',                                                                                                      // 5633
					null,                                                                                                             // 5634
					this.getCellDate(row, col),                                                                                       // 5635
					this.getCellEl(row, col)                                                                                          // 5636
				);                                                                                                                 // 5637
			}                                                                                                                   // 5638
		}                                                                                                                    // 5639
	},                                                                                                                    // 5640
                                                                                                                       // 5641
                                                                                                                       // 5642
	unrenderDates: function() {                                                                                           // 5643
		this.removeSegPopover();                                                                                             // 5644
	},                                                                                                                    // 5645
                                                                                                                       // 5646
                                                                                                                       // 5647
	renderBusinessHours: function() {                                                                                     // 5648
		var events = this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true                                       // 5649
		var segs = this.eventsToSegs(events);                                                                                // 5650
                                                                                                                       // 5651
		this.renderFill('businessHours', segs, 'bgevent');                                                                   // 5652
	},                                                                                                                    // 5653
                                                                                                                       // 5654
                                                                                                                       // 5655
	// Generates the HTML for a single row, which is a div that wraps a table.                                            // 5656
	// `row` is the row number.                                                                                           // 5657
	renderDayRowHtml: function(row, isRigid) {                                                                            // 5658
		var view = this.view;                                                                                                // 5659
		var classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];                                                      // 5660
                                                                                                                       // 5661
		if (isRigid) {                                                                                                       // 5662
			classes.push('fc-rigid');                                                                                           // 5663
		}                                                                                                                    // 5664
                                                                                                                       // 5665
		return '' +                                                                                                          // 5666
			'<div class="' + classes.join(' ') + '">' +                                                                         // 5667
				'<div class="fc-bg">' +                                                                                            // 5668
					'<table>' +                                                                                                       // 5669
						this.renderBgTrHtml(row) +                                                                                       // 5670
					'</table>' +                                                                                                      // 5671
				'</div>' +                                                                                                         // 5672
				'<div class="fc-content-skeleton">' +                                                                              // 5673
					'<table>' +                                                                                                       // 5674
						(this.numbersVisible ?                                                                                           // 5675
							'<thead>' +                                                                                                     // 5676
								this.renderNumberTrHtml(row) +                                                                                 // 5677
							'</thead>' :                                                                                                    // 5678
							''                                                                                                              // 5679
							) +                                                                                                             // 5680
					'</table>' +                                                                                                      // 5681
				'</div>' +                                                                                                         // 5682
			'</div>';                                                                                                           // 5683
	},                                                                                                                    // 5684
                                                                                                                       // 5685
                                                                                                                       // 5686
	/* Grid Number Rendering                                                                                              // 5687
	------------------------------------------------------------------------------------------------------------------*/  // 5688
                                                                                                                       // 5689
                                                                                                                       // 5690
	renderNumberTrHtml: function(row) {                                                                                   // 5691
		return '' +                                                                                                          // 5692
			'<tr>' +                                                                                                            // 5693
				(this.isRTL ? '' : this.renderNumberIntroHtml(row)) +                                                              // 5694
				this.renderNumberCellsHtml(row) +                                                                                  // 5695
				(this.isRTL ? this.renderNumberIntroHtml(row) : '') +                                                              // 5696
			'</tr>';                                                                                                            // 5697
	},                                                                                                                    // 5698
                                                                                                                       // 5699
                                                                                                                       // 5700
	renderNumberIntroHtml: function(row) {                                                                                // 5701
		return this.renderIntroHtml();                                                                                       // 5702
	},                                                                                                                    // 5703
                                                                                                                       // 5704
                                                                                                                       // 5705
	renderNumberCellsHtml: function(row) {                                                                                // 5706
		var htmls = [];                                                                                                      // 5707
		var col, date;                                                                                                       // 5708
                                                                                                                       // 5709
		for (col = 0; col < this.colCnt; col++) {                                                                            // 5710
			date = this.getCellDate(row, col);                                                                                  // 5711
			htmls.push(this.renderNumberCellHtml(date));                                                                        // 5712
		}                                                                                                                    // 5713
                                                                                                                       // 5714
		return htmls.join('');                                                                                               // 5715
	},                                                                                                                    // 5716
                                                                                                                       // 5717
                                                                                                                       // 5718
	// Generates the HTML for the <td>s of the "number" row in the DayGrid's content skeleton.                            // 5719
	// The number row will only exist if either day numbers or week numbers are turned on.                                // 5720
	renderNumberCellHtml: function(date) {                                                                                // 5721
		var classes;                                                                                                         // 5722
                                                                                                                       // 5723
		if (!this.view.dayNumbersVisible) { // if there are week numbers but not day numbers                                 // 5724
			return '<td/>'; //  will create an empty space above events :(                                                      // 5725
		}                                                                                                                    // 5726
                                                                                                                       // 5727
		classes = this.getDayClasses(date);                                                                                  // 5728
		classes.unshift('fc-day-number');                                                                                    // 5729
                                                                                                                       // 5730
		return '' +                                                                                                          // 5731
			'<td class="' + classes.join(' ') + '" data-date="' + date.format() + '">' +                                        // 5732
				date.date() +                                                                                                      // 5733
			'</td>';                                                                                                            // 5734
	},                                                                                                                    // 5735
                                                                                                                       // 5736
                                                                                                                       // 5737
	/* Options                                                                                                            // 5738
	------------------------------------------------------------------------------------------------------------------*/  // 5739
                                                                                                                       // 5740
                                                                                                                       // 5741
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 5742
	computeEventTimeFormat: function() {                                                                                  // 5743
		return this.view.opt('extraSmallTimeFormat'); // like "6p" or "6:30p"                                                // 5744
	},                                                                                                                    // 5745
                                                                                                                       // 5746
                                                                                                                       // 5747
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 5748
	computeDisplayEventEnd: function() {                                                                                  // 5749
		return this.colCnt == 1; // we'll likely have space if there's only one day                                          // 5750
	},                                                                                                                    // 5751
                                                                                                                       // 5752
                                                                                                                       // 5753
	/* Dates                                                                                                              // 5754
	------------------------------------------------------------------------------------------------------------------*/  // 5755
                                                                                                                       // 5756
                                                                                                                       // 5757
	rangeUpdated: function() {                                                                                            // 5758
		this.updateDayTable();                                                                                               // 5759
	},                                                                                                                    // 5760
                                                                                                                       // 5761
                                                                                                                       // 5762
	// Slices up the given span (unzoned start/end with other misc data) into an array of segments                        // 5763
	spanToSegs: function(span) {                                                                                          // 5764
		var segs = this.sliceRangeByRow(span);                                                                               // 5765
		var i, seg;                                                                                                          // 5766
                                                                                                                       // 5767
		for (i = 0; i < segs.length; i++) {                                                                                  // 5768
			seg = segs[i];                                                                                                      // 5769
			if (this.isRTL) {                                                                                                   // 5770
				seg.leftCol = this.daysPerRow - 1 - seg.lastRowDayIndex;                                                           // 5771
				seg.rightCol = this.daysPerRow - 1 - seg.firstRowDayIndex;                                                         // 5772
			}                                                                                                                   // 5773
			else {                                                                                                              // 5774
				seg.leftCol = seg.firstRowDayIndex;                                                                                // 5775
				seg.rightCol = seg.lastRowDayIndex;                                                                                // 5776
			}                                                                                                                   // 5777
		}                                                                                                                    // 5778
                                                                                                                       // 5779
		return segs;                                                                                                         // 5780
	},                                                                                                                    // 5781
                                                                                                                       // 5782
                                                                                                                       // 5783
	/* Hit System                                                                                                         // 5784
	------------------------------------------------------------------------------------------------------------------*/  // 5785
                                                                                                                       // 5786
                                                                                                                       // 5787
	prepareHits: function() {                                                                                             // 5788
		this.colCoordCache.build();                                                                                          // 5789
		this.rowCoordCache.build();                                                                                          // 5790
		this.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack                                      // 5791
	},                                                                                                                    // 5792
                                                                                                                       // 5793
                                                                                                                       // 5794
	releaseHits: function() {                                                                                             // 5795
		this.colCoordCache.clear();                                                                                          // 5796
		this.rowCoordCache.clear();                                                                                          // 5797
	},                                                                                                                    // 5798
                                                                                                                       // 5799
                                                                                                                       // 5800
	queryHit: function(leftOffset, topOffset) {                                                                           // 5801
		var col = this.colCoordCache.getHorizontalIndex(leftOffset);                                                         // 5802
		var row = this.rowCoordCache.getVerticalIndex(topOffset);                                                            // 5803
                                                                                                                       // 5804
		if (row != null && col != null) {                                                                                    // 5805
			return this.getCellHit(row, col);                                                                                   // 5806
		}                                                                                                                    // 5807
	},                                                                                                                    // 5808
                                                                                                                       // 5809
                                                                                                                       // 5810
	getHitSpan: function(hit) {                                                                                           // 5811
		return this.getCellRange(hit.row, hit.col);                                                                          // 5812
	},                                                                                                                    // 5813
                                                                                                                       // 5814
                                                                                                                       // 5815
	getHitEl: function(hit) {                                                                                             // 5816
		return this.getCellEl(hit.row, hit.col);                                                                             // 5817
	},                                                                                                                    // 5818
                                                                                                                       // 5819
                                                                                                                       // 5820
	/* Cell System                                                                                                        // 5821
	------------------------------------------------------------------------------------------------------------------*/  // 5822
	// FYI: the first column is the leftmost column, regardless of date                                                   // 5823
                                                                                                                       // 5824
                                                                                                                       // 5825
	getCellHit: function(row, col) {                                                                                      // 5826
		return {                                                                                                             // 5827
			row: row,                                                                                                           // 5828
			col: col,                                                                                                           // 5829
			component: this, // needed unfortunately :(                                                                         // 5830
			left: this.colCoordCache.getLeftOffset(col),                                                                        // 5831
			right: this.colCoordCache.getRightOffset(col),                                                                      // 5832
			top: this.rowCoordCache.getTopOffset(row),                                                                          // 5833
			bottom: this.rowCoordCache.getBottomOffset(row)                                                                     // 5834
		};                                                                                                                   // 5835
	},                                                                                                                    // 5836
                                                                                                                       // 5837
                                                                                                                       // 5838
	getCellEl: function(row, col) {                                                                                       // 5839
		return this.cellEls.eq(row * this.colCnt + col);                                                                     // 5840
	},                                                                                                                    // 5841
                                                                                                                       // 5842
                                                                                                                       // 5843
	/* Event Drag Visualization                                                                                           // 5844
	------------------------------------------------------------------------------------------------------------------*/  // 5845
	// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods                                       // 5846
                                                                                                                       // 5847
                                                                                                                       // 5848
	// Renders a visual indication of an event or external element being dragged.                                         // 5849
	// `eventLocation` has zoned start and end (optional)                                                                 // 5850
	renderDrag: function(eventLocation, seg) {                                                                            // 5851
                                                                                                                       // 5852
		// always render a highlight underneath                                                                              // 5853
		this.renderHighlight(this.eventToSpan(eventLocation));                                                               // 5854
                                                                                                                       // 5855
		// if a segment from the same calendar but another component is being dragged, render a helper event                 // 5856
		if (seg && !seg.el.closest(this.el).length) {                                                                        // 5857
                                                                                                                       // 5858
			return this.renderEventLocationHelper(eventLocation, seg); // returns mock event elements                           // 5859
		}                                                                                                                    // 5860
	},                                                                                                                    // 5861
                                                                                                                       // 5862
                                                                                                                       // 5863
	// Unrenders any visual indication of a hovering event                                                                // 5864
	unrenderDrag: function() {                                                                                            // 5865
		this.unrenderHighlight();                                                                                            // 5866
		this.unrenderHelper();                                                                                               // 5867
	},                                                                                                                    // 5868
                                                                                                                       // 5869
                                                                                                                       // 5870
	/* Event Resize Visualization                                                                                         // 5871
	------------------------------------------------------------------------------------------------------------------*/  // 5872
                                                                                                                       // 5873
                                                                                                                       // 5874
	// Renders a visual indication of an event being resized                                                              // 5875
	renderEventResize: function(eventLocation, seg) {                                                                     // 5876
		this.renderHighlight(this.eventToSpan(eventLocation));                                                               // 5877
		return this.renderEventLocationHelper(eventLocation, seg); // returns mock event elements                            // 5878
	},                                                                                                                    // 5879
                                                                                                                       // 5880
                                                                                                                       // 5881
	// Unrenders a visual indication of an event being resized                                                            // 5882
	unrenderEventResize: function() {                                                                                     // 5883
		this.unrenderHighlight();                                                                                            // 5884
		this.unrenderHelper();                                                                                               // 5885
	},                                                                                                                    // 5886
                                                                                                                       // 5887
                                                                                                                       // 5888
	/* Event Helper                                                                                                       // 5889
	------------------------------------------------------------------------------------------------------------------*/  // 5890
                                                                                                                       // 5891
                                                                                                                       // 5892
	// Renders a mock "helper" event. `sourceSeg` is the associated internal segment object. It can be null.              // 5893
	renderHelper: function(event, sourceSeg) {                                                                            // 5894
		var helperNodes = [];                                                                                                // 5895
		var segs = this.eventToSegs(event);                                                                                  // 5896
		var rowStructs;                                                                                                      // 5897
                                                                                                                       // 5898
		segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 5899
		rowStructs = this.renderSegRows(segs);                                                                               // 5900
                                                                                                                       // 5901
		// inject each new event skeleton into each associated row                                                           // 5902
		this.rowEls.each(function(row, rowNode) {                                                                            // 5903
			var rowEl = $(rowNode); // the .fc-row                                                                              // 5904
			var skeletonEl = $('<div class="fc-helper-skeleton"><table/></div>'); // will be absolutely positioned              // 5905
			var skeletonTop;                                                                                                    // 5906
                                                                                                                       // 5907
			// If there is an original segment, match the top position. Otherwise, put it at the row's top level                // 5908
			if (sourceSeg && sourceSeg.row === row) {                                                                           // 5909
				skeletonTop = sourceSeg.el.position().top;                                                                         // 5910
			}                                                                                                                   // 5911
			else {                                                                                                              // 5912
				skeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;                                             // 5913
			}                                                                                                                   // 5914
                                                                                                                       // 5915
			skeletonEl.css('top', skeletonTop)                                                                                  // 5916
				.find('table')                                                                                                     // 5917
					.append(rowStructs[row].tbodyEl);                                                                                 // 5918
                                                                                                                       // 5919
			rowEl.append(skeletonEl);                                                                                           // 5920
			helperNodes.push(skeletonEl[0]);                                                                                    // 5921
		});                                                                                                                  // 5922
                                                                                                                       // 5923
		return ( // must return the elements rendered                                                                        // 5924
			this.helperEls = $(helperNodes) // array -> jQuery set                                                              // 5925
		);                                                                                                                   // 5926
	},                                                                                                                    // 5927
                                                                                                                       // 5928
                                                                                                                       // 5929
	// Unrenders any visual indication of a mock helper event                                                             // 5930
	unrenderHelper: function() {                                                                                          // 5931
		if (this.helperEls) {                                                                                                // 5932
			this.helperEls.remove();                                                                                            // 5933
			this.helperEls = null;                                                                                              // 5934
		}                                                                                                                    // 5935
	},                                                                                                                    // 5936
                                                                                                                       // 5937
                                                                                                                       // 5938
	/* Fill System (highlight, background events, business hours)                                                         // 5939
	------------------------------------------------------------------------------------------------------------------*/  // 5940
                                                                                                                       // 5941
                                                                                                                       // 5942
	fillSegTag: 'td', // override the default tag name                                                                    // 5943
                                                                                                                       // 5944
                                                                                                                       // 5945
	// Renders a set of rectangles over the given segments of days.                                                       // 5946
	// Only returns segments that successfully rendered.                                                                  // 5947
	renderFill: function(type, segs, className) {                                                                         // 5948
		var nodes = [];                                                                                                      // 5949
		var i, seg;                                                                                                          // 5950
		var skeletonEl;                                                                                                      // 5951
                                                                                                                       // 5952
		segs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs          // 5953
                                                                                                                       // 5954
		for (i = 0; i < segs.length; i++) {                                                                                  // 5955
			seg = segs[i];                                                                                                      // 5956
			skeletonEl = this.renderFillRow(type, seg, className);                                                              // 5957
			this.rowEls.eq(seg.row).append(skeletonEl);                                                                         // 5958
			nodes.push(skeletonEl[0]);                                                                                          // 5959
		}                                                                                                                    // 5960
                                                                                                                       // 5961
		this.elsByFill[type] = $(nodes);                                                                                     // 5962
                                                                                                                       // 5963
		return segs;                                                                                                         // 5964
	},                                                                                                                    // 5965
                                                                                                                       // 5966
                                                                                                                       // 5967
	// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.                             // 5968
	renderFillRow: function(type, seg, className) {                                                                       // 5969
		var colCnt = this.colCnt;                                                                                            // 5970
		var startCol = seg.leftCol;                                                                                          // 5971
		var endCol = seg.rightCol + 1;                                                                                       // 5972
		var skeletonEl;                                                                                                      // 5973
		var trEl;                                                                                                            // 5974
                                                                                                                       // 5975
		className = className || type.toLowerCase();                                                                         // 5976
                                                                                                                       // 5977
		skeletonEl = $(                                                                                                      // 5978
			'<div class="fc-' + className + '-skeleton">' +                                                                     // 5979
				'<table><tr/></table>' +                                                                                           // 5980
			'</div>'                                                                                                            // 5981
		);                                                                                                                   // 5982
		trEl = skeletonEl.find('tr');                                                                                        // 5983
                                                                                                                       // 5984
		if (startCol > 0) {                                                                                                  // 5985
			trEl.append('<td colspan="' + startCol + '"/>');                                                                    // 5986
		}                                                                                                                    // 5987
                                                                                                                       // 5988
		trEl.append(                                                                                                         // 5989
			seg.el.attr('colspan', endCol - startCol)                                                                           // 5990
		);                                                                                                                   // 5991
                                                                                                                       // 5992
		if (endCol < colCnt) {                                                                                               // 5993
			trEl.append('<td colspan="' + (colCnt - endCol) + '"/>');                                                           // 5994
		}                                                                                                                    // 5995
                                                                                                                       // 5996
		this.bookendCells(trEl);                                                                                             // 5997
                                                                                                                       // 5998
		return skeletonEl;                                                                                                   // 5999
	}                                                                                                                     // 6000
                                                                                                                       // 6001
});                                                                                                                    // 6002
                                                                                                                       // 6003
;;                                                                                                                     // 6004
                                                                                                                       // 6005
/* Event-rendering methods for the DayGrid class                                                                       // 6006
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 6008
DayGrid.mixin({                                                                                                        // 6009
                                                                                                                       // 6010
	rowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering           // 6011
                                                                                                                       // 6012
                                                                                                                       // 6013
	// Unrenders all events currently rendered on the grid                                                                // 6014
	unrenderEvents: function() {                                                                                          // 6015
		this.removeSegPopover(); // removes the "more.." events popover                                                      // 6016
		Grid.prototype.unrenderEvents.apply(this, arguments); // calls the super-method                                      // 6017
	},                                                                                                                    // 6018
                                                                                                                       // 6019
                                                                                                                       // 6020
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 6021
	getEventSegs: function() {                                                                                            // 6022
		return Grid.prototype.getEventSegs.call(this) // get the segments from the super-method                              // 6023
			.concat(this.popoverSegs || []); // append the segments from the "more..." popover                                  // 6024
	},                                                                                                                    // 6025
                                                                                                                       // 6026
                                                                                                                       // 6027
	// Renders the given background event segments onto the grid                                                          // 6028
	renderBgSegs: function(segs) {                                                                                        // 6029
                                                                                                                       // 6030
		// don't render timed background events                                                                              // 6031
		var allDaySegs = $.grep(segs, function(seg) {                                                                        // 6032
			return seg.event.allDay;                                                                                            // 6033
		});                                                                                                                  // 6034
                                                                                                                       // 6035
		return Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method                                  // 6036
	},                                                                                                                    // 6037
                                                                                                                       // 6038
                                                                                                                       // 6039
	// Renders the given foreground event segments onto the grid                                                          // 6040
	renderFgSegs: function(segs) {                                                                                        // 6041
		var rowStructs;                                                                                                      // 6042
                                                                                                                       // 6043
		// render an `.el` on each seg                                                                                       // 6044
		// returns a subset of the segs. segs that were actually rendered                                                    // 6045
		segs = this.renderFgSegEls(segs);                                                                                    // 6046
                                                                                                                       // 6047
		rowStructs = this.rowStructs = this.renderSegRows(segs);                                                             // 6048
                                                                                                                       // 6049
		// append to each row's content skeleton                                                                             // 6050
		this.rowEls.each(function(i, rowNode) {                                                                              // 6051
			$(rowNode).find('.fc-content-skeleton > table').append(                                                             // 6052
				rowStructs[i].tbodyEl                                                                                              // 6053
			);                                                                                                                  // 6054
		});                                                                                                                  // 6055
                                                                                                                       // 6056
		return segs; // return only the segs that were actually rendered                                                     // 6057
	},                                                                                                                    // 6058
                                                                                                                       // 6059
                                                                                                                       // 6060
	// Unrenders all currently rendered foreground event segments                                                         // 6061
	unrenderFgSegs: function() {                                                                                          // 6062
		var rowStructs = this.rowStructs || [];                                                                              // 6063
		var rowStruct;                                                                                                       // 6064
                                                                                                                       // 6065
		while ((rowStruct = rowStructs.pop())) {                                                                             // 6066
			rowStruct.tbodyEl.remove();                                                                                         // 6067
		}                                                                                                                    // 6068
                                                                                                                       // 6069
		this.rowStructs = null;                                                                                              // 6070
	},                                                                                                                    // 6071
                                                                                                                       // 6072
                                                                                                                       // 6073
	// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.   // 6074
	// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).                                          // 6075
	// PRECONDITION: each segment shoud already have a rendered and assigned `.el`                                        // 6076
	renderSegRows: function(segs) {                                                                                       // 6077
		var rowStructs = [];                                                                                                 // 6078
		var segRows;                                                                                                         // 6079
		var row;                                                                                                             // 6080
                                                                                                                       // 6081
		segRows = this.groupSegRows(segs); // group into nested arrays                                                       // 6082
                                                                                                                       // 6083
		// iterate each row of segment groupings                                                                             // 6084
		for (row = 0; row < segRows.length; row++) {                                                                         // 6085
			rowStructs.push(                                                                                                    // 6086
				this.renderSegRow(row, segRows[row])                                                                               // 6087
			);                                                                                                                  // 6088
		}                                                                                                                    // 6089
                                                                                                                       // 6090
		return rowStructs;                                                                                                   // 6091
	},                                                                                                                    // 6092
                                                                                                                       // 6093
                                                                                                                       // 6094
	// Builds the HTML to be used for the default element for an individual segment                                       // 6095
	fgSegHtml: function(seg, disableResizing) {                                                                           // 6096
		var view = this.view;                                                                                                // 6097
		var event = seg.event;                                                                                               // 6098
		var isDraggable = view.isEventDraggable(event);                                                                      // 6099
		var isResizableFromStart = !disableResizing && event.allDay &&                                                       // 6100
			seg.isStart && view.isEventResizableFromStart(event);                                                               // 6101
		var isResizableFromEnd = !disableResizing && event.allDay &&                                                         // 6102
			seg.isEnd && view.isEventResizableFromEnd(event);                                                                   // 6103
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 6104
		var skinCss = cssToStr(this.getSegSkinCss(seg));                                                                     // 6105
		var timeHtml = '';                                                                                                   // 6106
		var timeText;                                                                                                        // 6107
		var titleHtml;                                                                                                       // 6108
                                                                                                                       // 6109
		classes.unshift('fc-day-grid-event', 'fc-h-event');                                                                  // 6110
                                                                                                                       // 6111
		// Only display a timed events time if it is the starting segment                                                    // 6112
		if (seg.isStart) {                                                                                                   // 6113
			timeText = this.getEventTimeText(event);                                                                            // 6114
			if (timeText) {                                                                                                     // 6115
				timeHtml = '<span class="fc-time">' + htmlEscape(timeText) + '</span>';                                            // 6116
			}                                                                                                                   // 6117
		}                                                                                                                    // 6118
                                                                                                                       // 6119
		titleHtml =                                                                                                          // 6120
			'<span class="fc-title">' +                                                                                         // 6121
				(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height                                 // 6122
			'</span>';                                                                                                          // 6123
		                                                                                                                     // 6124
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 6125
				(event.url ?                                                                                                       // 6126
					' href="' + htmlEscape(event.url) + '"' :                                                                         // 6127
					''                                                                                                                // 6128
					) +                                                                                                               // 6129
				(skinCss ?                                                                                                         // 6130
					' style="' + skinCss + '"' :                                                                                      // 6131
					''                                                                                                                // 6132
					) +                                                                                                               // 6133
			'>' +                                                                                                               // 6134
				'<div class="fc-content">' +                                                                                       // 6135
					(this.isRTL ?                                                                                                     // 6136
						titleHtml + ' ' + timeHtml : // put a natural space in between                                                   // 6137
						timeHtml + ' ' + titleHtml   //                                                                                  // 6138
						) +                                                                                                              // 6139
				'</div>' +                                                                                                         // 6140
				(isResizableFromStart ?                                                                                            // 6141
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 6142
					''                                                                                                                // 6143
					) +                                                                                                               // 6144
				(isResizableFromEnd ?                                                                                              // 6145
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 6146
					''                                                                                                                // 6147
					) +                                                                                                               // 6148
			'</a>';                                                                                                             // 6149
	},                                                                                                                    // 6150
                                                                                                                       // 6151
                                                                                                                       // 6152
	// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains     // 6153
	// the segments. Returns object with a bunch of internal data about how the render was calculated.                    // 6154
	// NOTE: modifies rowSegs                                                                                             // 6155
	renderSegRow: function(row, rowSegs) {                                                                                // 6156
		var colCnt = this.colCnt;                                                                                            // 6157
		var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels                                     // 6158
		var levelCnt = Math.max(1, segLevels.length); // ensure at least one level                                           // 6159
		var tbody = $('<tbody/>');                                                                                           // 6160
		var segMatrix = []; // lookup for which segments are rendered into which level+col cells                             // 6161
		var cellMatrix = []; // lookup for all <td> elements of the level+col matrix                                         // 6162
		var loneCellMatrix = []; // lookup for <td> elements that only take up a single column                               // 6163
		var i, levelSegs;                                                                                                    // 6164
		var col;                                                                                                             // 6165
		var tr;                                                                                                              // 6166
		var j, seg;                                                                                                          // 6167
		var td;                                                                                                              // 6168
                                                                                                                       // 6169
		// populates empty cells from the current column (`col`) to `endCol`                                                 // 6170
		function emptyCellsUntil(endCol) {                                                                                   // 6171
			while (col < endCol) {                                                                                              // 6172
				// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell                  // 6173
				td = (loneCellMatrix[i - 1] || [])[col];                                                                           // 6174
				if (td) {                                                                                                          // 6175
					td.attr(                                                                                                          // 6176
						'rowspan',                                                                                                       // 6177
						parseInt(td.attr('rowspan') || 1, 10) + 1                                                                        // 6178
					);                                                                                                                // 6179
				}                                                                                                                  // 6180
				else {                                                                                                             // 6181
					td = $('<td/>');                                                                                                  // 6182
					tr.append(td);                                                                                                    // 6183
				}                                                                                                                  // 6184
				cellMatrix[i][col] = td;                                                                                           // 6185
				loneCellMatrix[i][col] = td;                                                                                       // 6186
				col++;                                                                                                             // 6187
			}                                                                                                                   // 6188
		}                                                                                                                    // 6189
                                                                                                                       // 6190
		for (i = 0; i < levelCnt; i++) { // iterate through all levels                                                       // 6191
			levelSegs = segLevels[i];                                                                                           // 6192
			col = 0;                                                                                                            // 6193
			tr = $('<tr/>');                                                                                                    // 6194
                                                                                                                       // 6195
			segMatrix.push([]);                                                                                                 // 6196
			cellMatrix.push([]);                                                                                                // 6197
			loneCellMatrix.push([]);                                                                                            // 6198
                                                                                                                       // 6199
			// levelCnt might be 1 even though there are no actual levels. protect against this.                                // 6200
			// this single empty row is useful for styling.                                                                     // 6201
			if (levelSegs) {                                                                                                    // 6202
				for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level                                      // 6203
					seg = levelSegs[j];                                                                                               // 6204
                                                                                                                       // 6205
					emptyCellsUntil(seg.leftCol);                                                                                     // 6206
                                                                                                                       // 6207
					// create a container that occupies or more columns. append the event element.                                    // 6208
					td = $('<td class="fc-event-container"/>').append(seg.el);                                                        // 6209
					if (seg.leftCol != seg.rightCol) {                                                                                // 6210
						td.attr('colspan', seg.rightCol - seg.leftCol + 1);                                                              // 6211
					}                                                                                                                 // 6212
					else { // a single-column segment                                                                                 // 6213
						loneCellMatrix[i][col] = td;                                                                                     // 6214
					}                                                                                                                 // 6215
                                                                                                                       // 6216
					while (col <= seg.rightCol) {                                                                                     // 6217
						cellMatrix[i][col] = td;                                                                                         // 6218
						segMatrix[i][col] = seg;                                                                                         // 6219
						col++;                                                                                                           // 6220
					}                                                                                                                 // 6221
                                                                                                                       // 6222
					tr.append(td);                                                                                                    // 6223
				}                                                                                                                  // 6224
			}                                                                                                                   // 6225
                                                                                                                       // 6226
			emptyCellsUntil(colCnt); // finish off the row                                                                      // 6227
			this.bookendCells(tr);                                                                                              // 6228
			tbody.append(tr);                                                                                                   // 6229
		}                                                                                                                    // 6230
                                                                                                                       // 6231
		return { // a "rowStruct"                                                                                            // 6232
			row: row, // the row number                                                                                         // 6233
			tbodyEl: tbody,                                                                                                     // 6234
			cellMatrix: cellMatrix,                                                                                             // 6235
			segMatrix: segMatrix,                                                                                               // 6236
			segLevels: segLevels,                                                                                               // 6237
			segs: rowSegs                                                                                                       // 6238
		};                                                                                                                   // 6239
	},                                                                                                                    // 6240
                                                                                                                       // 6241
                                                                                                                       // 6242
	// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.   // 6243
	// NOTE: modifies segs                                                                                                // 6244
	buildSegLevels: function(segs) {                                                                                      // 6245
		var levels = [];                                                                                                     // 6246
		var i, seg;                                                                                                          // 6247
		var j;                                                                                                               // 6248
                                                                                                                       // 6249
		// Give preference to elements with certain criteria, so they have                                                   // 6250
		// a chance to be closer to the top.                                                                                 // 6251
		this.sortEventSegs(segs);                                                                                            // 6252
		                                                                                                                     // 6253
		for (i = 0; i < segs.length; i++) {                                                                                  // 6254
			seg = segs[i];                                                                                                      // 6255
                                                                                                                       // 6256
			// loop through levels, starting with the topmost, until the segment doesn't collide with other segments            // 6257
			for (j = 0; j < levels.length; j++) {                                                                               // 6258
				if (!isDaySegCollision(seg, levels[j])) {                                                                          // 6259
					break;                                                                                                            // 6260
				}                                                                                                                  // 6261
			}                                                                                                                   // 6262
			// `j` now holds the desired subrow index                                                                           // 6263
			seg.level = j;                                                                                                      // 6264
                                                                                                                       // 6265
			// create new level array if needed and append segment                                                              // 6266
			(levels[j] || (levels[j] = [])).push(seg);                                                                          // 6267
		}                                                                                                                    // 6268
                                                                                                                       // 6269
		// order segments left-to-right. very important if calendar is RTL                                                   // 6270
		for (j = 0; j < levels.length; j++) {                                                                                // 6271
			levels[j].sort(compareDaySegCols);                                                                                  // 6272
		}                                                                                                                    // 6273
                                                                                                                       // 6274
		return levels;                                                                                                       // 6275
	},                                                                                                                    // 6276
                                                                                                                       // 6277
                                                                                                                       // 6278
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row                       // 6279
	groupSegRows: function(segs) {                                                                                        // 6280
		var segRows = [];                                                                                                    // 6281
		var i;                                                                                                               // 6282
                                                                                                                       // 6283
		for (i = 0; i < this.rowCnt; i++) {                                                                                  // 6284
			segRows.push([]);                                                                                                   // 6285
		}                                                                                                                    // 6286
                                                                                                                       // 6287
		for (i = 0; i < segs.length; i++) {                                                                                  // 6288
			segRows[segs[i].row].push(segs[i]);                                                                                 // 6289
		}                                                                                                                    // 6290
                                                                                                                       // 6291
		return segRows;                                                                                                      // 6292
	}                                                                                                                     // 6293
                                                                                                                       // 6294
});                                                                                                                    // 6295
                                                                                                                       // 6296
                                                                                                                       // 6297
// Computes whether two segments' columns collide. They are assumed to be in the same row.                             // 6298
function isDaySegCollision(seg, otherSegs) {                                                                           // 6299
	var i, otherSeg;                                                                                                      // 6300
                                                                                                                       // 6301
	for (i = 0; i < otherSegs.length; i++) {                                                                              // 6302
		otherSeg = otherSegs[i];                                                                                             // 6303
                                                                                                                       // 6304
		if (                                                                                                                 // 6305
			otherSeg.leftCol <= seg.rightCol &&                                                                                 // 6306
			otherSeg.rightCol >= seg.leftCol                                                                                    // 6307
		) {                                                                                                                  // 6308
			return true;                                                                                                        // 6309
		}                                                                                                                    // 6310
	}                                                                                                                     // 6311
                                                                                                                       // 6312
	return false;                                                                                                         // 6313
}                                                                                                                      // 6314
                                                                                                                       // 6315
                                                                                                                       // 6316
// A cmp function for determining the leftmost event                                                                   // 6317
function compareDaySegCols(a, b) {                                                                                     // 6318
	return a.leftCol - b.leftCol;                                                                                         // 6319
}                                                                                                                      // 6320
                                                                                                                       // 6321
;;                                                                                                                     // 6322
                                                                                                                       // 6323
/* Methods relate to limiting the number events for a given day on a DayGrid                                           // 6324
----------------------------------------------------------------------------------------------------------------------*/
// NOTE: all the segs being passed around in here are foreground segs                                                  // 6326
                                                                                                                       // 6327
DayGrid.mixin({                                                                                                        // 6328
                                                                                                                       // 6329
	segPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible                    // 6330
	popoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible                    // 6331
                                                                                                                       // 6332
                                                                                                                       // 6333
	removeSegPopover: function() {                                                                                        // 6334
		if (this.segPopover) {                                                                                               // 6335
			this.segPopover.hide(); // in handler, will call segPopover's removeElement                                         // 6336
		}                                                                                                                    // 6337
	},                                                                                                                    // 6338
                                                                                                                       // 6339
                                                                                                                       // 6340
	// Limits the number of "levels" (vertically stacking layers of events) for each row of the grid.                     // 6341
	// `levelLimit` can be false (don't limit), a number, or true (should be computed).                                   // 6342
	limitRows: function(levelLimit) {                                                                                     // 6343
		var rowStructs = this.rowStructs || [];                                                                              // 6344
		var row; // row #                                                                                                    // 6345
		var rowLevelLimit;                                                                                                   // 6346
                                                                                                                       // 6347
		for (row = 0; row < rowStructs.length; row++) {                                                                      // 6348
			this.unlimitRow(row);                                                                                               // 6349
                                                                                                                       // 6350
			if (!levelLimit) {                                                                                                  // 6351
				rowLevelLimit = false;                                                                                             // 6352
			}                                                                                                                   // 6353
			else if (typeof levelLimit === 'number') {                                                                          // 6354
				rowLevelLimit = levelLimit;                                                                                        // 6355
			}                                                                                                                   // 6356
			else {                                                                                                              // 6357
				rowLevelLimit = this.computeRowLevelLimit(row);                                                                    // 6358
			}                                                                                                                   // 6359
                                                                                                                       // 6360
			if (rowLevelLimit !== false) {                                                                                      // 6361
				this.limitRow(row, rowLevelLimit);                                                                                 // 6362
			}                                                                                                                   // 6363
		}                                                                                                                    // 6364
	},                                                                                                                    // 6365
                                                                                                                       // 6366
                                                                                                                       // 6367
	// Computes the number of levels a row will accomodate without going outside its bounds.                              // 6368
	// Assumes the row is "rigid" (maintains a constant height regardless of what is inside).                             // 6369
	// `row` is the row number.                                                                                           // 6370
	computeRowLevelLimit: function(row) {                                                                                 // 6371
		var rowEl = this.rowEls.eq(row); // the containing "fake" row div                                                    // 6372
		var rowHeight = rowEl.height(); // TODO: cache somehow?                                                              // 6373
		var trEls = this.rowStructs[row].tbodyEl.children();                                                                 // 6374
		var i, trEl;                                                                                                         // 6375
		var trHeight;                                                                                                        // 6376
                                                                                                                       // 6377
		function iterInnerHeights(i, childNode) {                                                                            // 6378
			trHeight = Math.max(trHeight, $(childNode).outerHeight());                                                          // 6379
		}                                                                                                                    // 6380
                                                                                                                       // 6381
		// Reveal one level <tr> at a time and stop when we find one out of bounds                                           // 6382
		for (i = 0; i < trEls.length; i++) {                                                                                 // 6383
			trEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)                                   // 6384
                                                                                                                       // 6385
			// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,                         // 6386
			// so instead, find the tallest inner content element.                                                              // 6387
			trHeight = 0;                                                                                                       // 6388
			trEl.find('> td > :first-child').each(iterInnerHeights);                                                            // 6389
                                                                                                                       // 6390
			if (trEl.position().top + trHeight > rowHeight) {                                                                   // 6391
				return i;                                                                                                          // 6392
			}                                                                                                                   // 6393
		}                                                                                                                    // 6394
                                                                                                                       // 6395
		return false; // should not limit at all                                                                             // 6396
	},                                                                                                                    // 6397
                                                                                                                       // 6398
                                                                                                                       // 6399
	// Limits the given grid row to the maximum number of levels and injects "more" links if necessary.                   // 6400
	// `row` is the row number.                                                                                           // 6401
	// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.                                     // 6402
	limitRow: function(row, levelLimit) {                                                                                 // 6403
		var _this = this;                                                                                                    // 6404
		var rowStruct = this.rowStructs[row];                                                                                // 6405
		var moreNodes = []; // array of "more" <a> links and <td> DOM nodes                                                  // 6406
		var col = 0; // col #, left-to-right (not chronologically)                                                           // 6407
		var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right                        // 6408
		var cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row                           // 6409
		var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes                               // 6410
		var i, seg;                                                                                                          // 6411
		var segsBelow; // array of segment objects below `seg` in the current `col`                                          // 6412
		var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies                     // 6413
		var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)       // 6414
		var td, rowspan;                                                                                                     // 6415
		var segMoreNodes; // array of "more" <td> cells that will stand-in for the current seg's cell                        // 6416
		var j;                                                                                                               // 6417
		var moreTd, moreWrap, moreLink;                                                                                      // 6418
                                                                                                                       // 6419
		// Iterates through empty level cells and places "more" links inside if need be                                      // 6420
		function emptyCellsUntil(endCol) { // goes from current `col` to `endCol`                                            // 6421
			while (col < endCol) {                                                                                              // 6422
				segsBelow = _this.getCellSegs(row, col, levelLimit);                                                               // 6423
				if (segsBelow.length) {                                                                                            // 6424
					td = cellMatrix[levelLimit - 1][col];                                                                             // 6425
					moreLink = _this.renderMoreLink(row, col, segsBelow);                                                             // 6426
					moreWrap = $('<div/>').append(moreLink);                                                                          // 6427
					td.append(moreWrap);                                                                                              // 6428
					moreNodes.push(moreWrap[0]);                                                                                      // 6429
				}                                                                                                                  // 6430
				col++;                                                                                                             // 6431
			}                                                                                                                   // 6432
		}                                                                                                                    // 6433
                                                                                                                       // 6434
		if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?                       // 6435
			levelSegs = rowStruct.segLevels[levelLimit - 1];                                                                    // 6436
			cellMatrix = rowStruct.cellMatrix;                                                                                  // 6437
                                                                                                                       // 6438
			limitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit             // 6439
				.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array                                   // 6440
                                                                                                                       // 6441
			// iterate though segments in the last allowable level                                                              // 6442
			for (i = 0; i < levelSegs.length; i++) {                                                                            // 6443
				seg = levelSegs[i];                                                                                                // 6444
				emptyCellsUntil(seg.leftCol); // process empty cells before the segment                                            // 6445
                                                                                                                       // 6446
				// determine *all* segments below `seg` that occupy the same columns                                               // 6447
				colSegsBelow = [];                                                                                                 // 6448
				totalSegsBelow = 0;                                                                                                // 6449
				while (col <= seg.rightCol) {                                                                                      // 6450
					segsBelow = this.getCellSegs(row, col, levelLimit);                                                               // 6451
					colSegsBelow.push(segsBelow);                                                                                     // 6452
					totalSegsBelow += segsBelow.length;                                                                               // 6453
					col++;                                                                                                            // 6454
				}                                                                                                                  // 6455
                                                                                                                       // 6456
				if (totalSegsBelow) { // do we need to replace this segment with one or many "more" links?                         // 6457
					td = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell                                        // 6458
					rowspan = td.attr('rowspan') || 1;                                                                                // 6459
					segMoreNodes = [];                                                                                                // 6460
                                                                                                                       // 6461
					// make a replacement <td> for each column the segment occupies. will be one for each colspan                     // 6462
					for (j = 0; j < colSegsBelow.length; j++) {                                                                       // 6463
						moreTd = $('<td class="fc-more-cell"/>').attr('rowspan', rowspan);                                               // 6464
						segsBelow = colSegsBelow[j];                                                                                     // 6465
						moreLink = this.renderMoreLink(                                                                                  // 6466
							row,                                                                                                            // 6467
							seg.leftCol + j,                                                                                                // 6468
							[ seg ].concat(segsBelow) // count seg as hidden too                                                            // 6469
						);                                                                                                               // 6470
						moreWrap = $('<div/>').append(moreLink);                                                                         // 6471
						moreTd.append(moreWrap);                                                                                         // 6472
						segMoreNodes.push(moreTd[0]);                                                                                    // 6473
						moreNodes.push(moreTd[0]);                                                                                       // 6474
					}                                                                                                                 // 6475
                                                                                                                       // 6476
					td.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements                   // 6477
					limitedNodes.push(td[0]);                                                                                         // 6478
				}                                                                                                                  // 6479
			}                                                                                                                   // 6480
                                                                                                                       // 6481
			emptyCellsUntil(this.colCnt); // finish off the level                                                               // 6482
			rowStruct.moreEls = $(moreNodes); // for easy undoing later                                                         // 6483
			rowStruct.limitedEls = $(limitedNodes); // for easy undoing later                                                   // 6484
		}                                                                                                                    // 6485
	},                                                                                                                    // 6486
                                                                                                                       // 6487
                                                                                                                       // 6488
	// Reveals all levels and removes all "more"-related elements for a grid's row.                                       // 6489
	// `row` is a row number.                                                                                             // 6490
	unlimitRow: function(row) {                                                                                           // 6491
		var rowStruct = this.rowStructs[row];                                                                                // 6492
                                                                                                                       // 6493
		if (rowStruct.moreEls) {                                                                                             // 6494
			rowStruct.moreEls.remove();                                                                                         // 6495
			rowStruct.moreEls = null;                                                                                           // 6496
		}                                                                                                                    // 6497
                                                                                                                       // 6498
		if (rowStruct.limitedEls) {                                                                                          // 6499
			rowStruct.limitedEls.removeClass('fc-limited');                                                                     // 6500
			rowStruct.limitedEls = null;                                                                                        // 6501
		}                                                                                                                    // 6502
	},                                                                                                                    // 6503
                                                                                                                       // 6504
                                                                                                                       // 6505
	// Renders an <a> element that represents hidden event element for a cell.                                            // 6506
	// Responsible for attaching click handler as well.                                                                   // 6507
	renderMoreLink: function(row, col, hiddenSegs) {                                                                      // 6508
		var _this = this;                                                                                                    // 6509
		var view = this.view;                                                                                                // 6510
                                                                                                                       // 6511
		return $('<a class="fc-more"/>')                                                                                     // 6512
			.text(                                                                                                              // 6513
				this.getMoreLinkText(hiddenSegs.length)                                                                            // 6514
			)                                                                                                                   // 6515
			.on('click', function(ev) {                                                                                         // 6516
				var clickOption = view.opt('eventLimitClick');                                                                     // 6517
				var date = _this.getCellDate(row, col);                                                                            // 6518
				var moreEl = $(this);                                                                                              // 6519
				var dayEl = _this.getCellEl(row, col);                                                                             // 6520
				var allSegs = _this.getCellSegs(row, col);                                                                         // 6521
                                                                                                                       // 6522
				// rescope the segments to be within the cell's date                                                               // 6523
				var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);                                                         // 6524
				var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);                                                   // 6525
                                                                                                                       // 6526
				if (typeof clickOption === 'function') {                                                                           // 6527
					// the returned value can be an atomic option                                                                     // 6528
					clickOption = view.trigger('eventLimitClick', null, {                                                             // 6529
						date: date,                                                                                                      // 6530
						dayEl: dayEl,                                                                                                    // 6531
						moreEl: moreEl,                                                                                                  // 6532
						segs: reslicedAllSegs,                                                                                           // 6533
						hiddenSegs: reslicedHiddenSegs                                                                                   // 6534
					}, ev);                                                                                                           // 6535
				}                                                                                                                  // 6536
                                                                                                                       // 6537
				if (clickOption === 'popover') {                                                                                   // 6538
					_this.showSegPopover(row, col, moreEl, reslicedAllSegs);                                                          // 6539
				}                                                                                                                  // 6540
				else if (typeof clickOption === 'string') { // a view name                                                         // 6541
					view.calendar.zoomTo(date, clickOption);                                                                          // 6542
				}                                                                                                                  // 6543
			});                                                                                                                 // 6544
	},                                                                                                                    // 6545
                                                                                                                       // 6546
                                                                                                                       // 6547
	// Reveals the popover that displays all events within a cell                                                         // 6548
	showSegPopover: function(row, col, moreLink, segs) {                                                                  // 6549
		var _this = this;                                                                                                    // 6550
		var view = this.view;                                                                                                // 6551
		var moreWrap = moreLink.parent(); // the <div> wrapper around the <a>                                                // 6552
		var topEl; // the element we want to match the top coordinate of                                                     // 6553
		var options;                                                                                                         // 6554
                                                                                                                       // 6555
		if (this.rowCnt == 1) {                                                                                              // 6556
			topEl = view.el; // will cause the popover to cover any sort of header                                              // 6557
		}                                                                                                                    // 6558
		else {                                                                                                               // 6559
			topEl = this.rowEls.eq(row); // will align with top of row                                                          // 6560
		}                                                                                                                    // 6561
                                                                                                                       // 6562
		options = {                                                                                                          // 6563
			className: 'fc-more-popover',                                                                                       // 6564
			content: this.renderSegPopoverContent(row, col, segs),                                                              // 6565
			parentEl: this.el,                                                                                                  // 6566
			top: topEl.offset().top,                                                                                            // 6567
			autoHide: true, // when the user clicks elsewhere, hide the popover                                                 // 6568
			viewportConstrain: view.opt('popoverViewportConstrain'),                                                            // 6569
			hide: function() {                                                                                                  // 6570
				// kill everything when the popover is hidden                                                                      // 6571
				_this.segPopover.removeElement();                                                                                  // 6572
				_this.segPopover = null;                                                                                           // 6573
				_this.popoverSegs = null;                                                                                          // 6574
			}                                                                                                                   // 6575
		};                                                                                                                   // 6576
                                                                                                                       // 6577
		// Determine horizontal coordinate.                                                                                  // 6578
		// We use the moreWrap instead of the <td> to avoid border confusion.                                                // 6579
		if (this.isRTL) {                                                                                                    // 6580
			options.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border                    // 6581
		}                                                                                                                    // 6582
		else {                                                                                                               // 6583
			options.left = moreWrap.offset().left - 1; // -1 to be over cell border                                             // 6584
		}                                                                                                                    // 6585
                                                                                                                       // 6586
		this.segPopover = new Popover(options);                                                                              // 6587
		this.segPopover.show();                                                                                              // 6588
	},                                                                                                                    // 6589
                                                                                                                       // 6590
                                                                                                                       // 6591
	// Builds the inner DOM contents of the segment popover                                                               // 6592
	renderSegPopoverContent: function(row, col, segs) {                                                                   // 6593
		var view = this.view;                                                                                                // 6594
		var isTheme = view.opt('theme');                                                                                     // 6595
		var title = this.getCellDate(row, col).format(view.opt('dayPopoverFormat'));                                         // 6596
		var content = $(                                                                                                     // 6597
			'<div class="fc-header ' + view.widgetHeaderClass + '">' +                                                          // 6598
				'<span class="fc-close ' +                                                                                         // 6599
					(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +                                                  // 6600
				'"></span>' +                                                                                                      // 6601
				'<span class="fc-title">' +                                                                                        // 6602
					htmlEscape(title) +                                                                                               // 6603
				'</span>' +                                                                                                        // 6604
				'<div class="fc-clear"/>' +                                                                                        // 6605
			'</div>' +                                                                                                          // 6606
			'<div class="fc-body ' + view.widgetContentClass + '">' +                                                           // 6607
				'<div class="fc-event-container"></div>' +                                                                         // 6608
			'</div>'                                                                                                            // 6609
		);                                                                                                                   // 6610
		var segContainer = content.find('.fc-event-container');                                                              // 6611
		var i;                                                                                                               // 6612
                                                                                                                       // 6613
		// render each seg's `el` and only return the visible segs                                                           // 6614
		segs = this.renderFgSegEls(segs, true); // disableResizing=true                                                      // 6615
		this.popoverSegs = segs;                                                                                             // 6616
                                                                                                                       // 6617
		for (i = 0; i < segs.length; i++) {                                                                                  // 6618
                                                                                                                       // 6619
			// because segments in the popover are not part of a grid coordinate system, provide a hint to any                  // 6620
			// grids that want to do drag-n-drop about which cell it came from                                                  // 6621
			this.prepareHits();                                                                                                 // 6622
			segs[i].hit = this.getCellHit(row, col);                                                                            // 6623
			this.releaseHits();                                                                                                 // 6624
                                                                                                                       // 6625
			segContainer.append(segs[i].el);                                                                                    // 6626
		}                                                                                                                    // 6627
                                                                                                                       // 6628
		return content;                                                                                                      // 6629
	},                                                                                                                    // 6630
                                                                                                                       // 6631
                                                                                                                       // 6632
	// Given the events within an array of segment objects, reslice them to be in a single day                            // 6633
	resliceDaySegs: function(segs, dayDate) {                                                                             // 6634
                                                                                                                       // 6635
		// build an array of the original events                                                                             // 6636
		var events = $.map(segs, function(seg) {                                                                             // 6637
			return seg.event;                                                                                                   // 6638
		});                                                                                                                  // 6639
                                                                                                                       // 6640
		var dayStart = dayDate.clone();                                                                                      // 6641
		var dayEnd = dayStart.clone().add(1, 'days');                                                                        // 6642
		var dayRange = { start: dayStart, end: dayEnd };                                                                     // 6643
                                                                                                                       // 6644
		// slice the events with a custom slicing function                                                                   // 6645
		segs = this.eventsToSegs(                                                                                            // 6646
			events,                                                                                                             // 6647
			function(range) {                                                                                                   // 6648
				var seg = intersectRanges(range, dayRange); // undefind if no intersection                                         // 6649
				return seg ? [ seg ] : []; // must return an array of segments                                                     // 6650
			}                                                                                                                   // 6651
		);                                                                                                                   // 6652
                                                                                                                       // 6653
		// force an order because eventsToSegs doesn't guarantee one                                                         // 6654
		this.sortEventSegs(segs);                                                                                            // 6655
                                                                                                                       // 6656
		return segs;                                                                                                         // 6657
	},                                                                                                                    // 6658
                                                                                                                       // 6659
                                                                                                                       // 6660
	// Generates the text that should be inside a "more" link, given the number of events it represents                   // 6661
	getMoreLinkText: function(num) {                                                                                      // 6662
		var opt = this.view.opt('eventLimitText');                                                                           // 6663
                                                                                                                       // 6664
		if (typeof opt === 'function') {                                                                                     // 6665
			return opt(num);                                                                                                    // 6666
		}                                                                                                                    // 6667
		else {                                                                                                               // 6668
			return '+' + num + ' ' + opt;                                                                                       // 6669
		}                                                                                                                    // 6670
	},                                                                                                                    // 6671
                                                                                                                       // 6672
                                                                                                                       // 6673
	// Returns segments within a given cell.                                                                              // 6674
	// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.      // 6675
	getCellSegs: function(row, col, startLevel) {                                                                         // 6676
		var segMatrix = this.rowStructs[row].segMatrix;                                                                      // 6677
		var level = startLevel || 0;                                                                                         // 6678
		var segs = [];                                                                                                       // 6679
		var seg;                                                                                                             // 6680
                                                                                                                       // 6681
		while (level < segMatrix.length) {                                                                                   // 6682
			seg = segMatrix[level][col];                                                                                        // 6683
			if (seg) {                                                                                                          // 6684
				segs.push(seg);                                                                                                    // 6685
			}                                                                                                                   // 6686
			level++;                                                                                                            // 6687
		}                                                                                                                    // 6688
                                                                                                                       // 6689
		return segs;                                                                                                         // 6690
	}                                                                                                                     // 6691
                                                                                                                       // 6692
});                                                                                                                    // 6693
                                                                                                                       // 6694
;;                                                                                                                     // 6695
                                                                                                                       // 6696
/* A component that renders one or more columns of vertical time slots                                                 // 6697
----------------------------------------------------------------------------------------------------------------------*/
// We mixin DayTable, even though there is only a single row of days                                                   // 6699
                                                                                                                       // 6700
var TimeGrid = FC.TimeGrid = Grid.extend(DayTableMixin, {                                                              // 6701
                                                                                                                       // 6702
	slotDuration: null, // duration of a "slot", a distinct time segment on given day, visualized by lines                // 6703
	snapDuration: null, // granularity of time for dragging and selecting                                                 // 6704
	snapsPerSlot: null,                                                                                                   // 6705
	minTime: null, // Duration object that denotes the first visible time of any given day                                // 6706
	maxTime: null, // Duration object that denotes the exclusive visible end time of any given day                        // 6707
	labelFormat: null, // formatting string for times running along vertical axis                                         // 6708
	labelInterval: null, // duration of how often a label should be displayed for a slot                                  // 6709
                                                                                                                       // 6710
	colEls: null, // cells elements in the day-row background                                                             // 6711
	slatContainerEl: null, // div that wraps all the slat rows                                                            // 6712
	slatEls: null, // elements running horizontally across all columns                                                    // 6713
	nowIndicatorEls: null,                                                                                                // 6714
                                                                                                                       // 6715
	colCoordCache: null,                                                                                                  // 6716
	slatCoordCache: null,                                                                                                 // 6717
                                                                                                                       // 6718
                                                                                                                       // 6719
	constructor: function() {                                                                                             // 6720
		Grid.apply(this, arguments); // call the super-constructor                                                           // 6721
                                                                                                                       // 6722
		this.processOptions();                                                                                               // 6723
	},                                                                                                                    // 6724
                                                                                                                       // 6725
                                                                                                                       // 6726
	// Renders the time grid into `this.el`, which should already be assigned.                                            // 6727
	// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.                     // 6728
	renderDates: function() {                                                                                             // 6729
		this.el.html(this.renderHtml());                                                                                     // 6730
		this.colEls = this.el.find('.fc-day');                                                                               // 6731
		this.slatContainerEl = this.el.find('.fc-slats');                                                                    // 6732
		this.slatEls = this.slatContainerEl.find('tr');                                                                      // 6733
                                                                                                                       // 6734
		this.colCoordCache = new CoordCache({                                                                                // 6735
			els: this.colEls,                                                                                                   // 6736
			isHorizontal: true                                                                                                  // 6737
		});                                                                                                                  // 6738
		this.slatCoordCache = new CoordCache({                                                                               // 6739
			els: this.slatEls,                                                                                                  // 6740
			isVertical: true                                                                                                    // 6741
		});                                                                                                                  // 6742
                                                                                                                       // 6743
		this.renderContentSkeleton();                                                                                        // 6744
	},                                                                                                                    // 6745
                                                                                                                       // 6746
                                                                                                                       // 6747
	// Renders the basic HTML skeleton for the grid                                                                       // 6748
	renderHtml: function() {                                                                                              // 6749
		return '' +                                                                                                          // 6750
			'<div class="fc-bg">' +                                                                                             // 6751
				'<table>' +                                                                                                        // 6752
					this.renderBgTrHtml(0) + // row=0                                                                                 // 6753
				'</table>' +                                                                                                       // 6754
			'</div>' +                                                                                                          // 6755
			'<div class="fc-slats">' +                                                                                          // 6756
				'<table>' +                                                                                                        // 6757
					this.renderSlatRowHtml() +                                                                                        // 6758
				'</table>' +                                                                                                       // 6759
			'</div>';                                                                                                           // 6760
	},                                                                                                                    // 6761
                                                                                                                       // 6762
                                                                                                                       // 6763
	// Generates the HTML for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.      // 6764
	renderSlatRowHtml: function() {                                                                                       // 6765
		var view = this.view;                                                                                                // 6766
		var isRTL = this.isRTL;                                                                                              // 6767
		var html = '';                                                                                                       // 6768
		var slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations                              // 6769
		var slotDate; // will be on the view's first day, but we only care about its time                                    // 6770
		var isLabeled;                                                                                                       // 6771
		var axisHtml;                                                                                                        // 6772
                                                                                                                       // 6773
		// Calculate the time for each slot                                                                                  // 6774
		while (slotTime < this.maxTime) {                                                                                    // 6775
			slotDate = this.start.clone().time(slotTime);                                                                       // 6776
			isLabeled = isInt(divideDurationByDuration(slotTime, this.labelInterval));                                          // 6777
                                                                                                                       // 6778
			axisHtml =                                                                                                          // 6779
				'<td class="fc-axis fc-time ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '>' +                      // 6780
					(isLabeled ?                                                                                                      // 6781
						'<span>' + // for matchCellWidths                                                                                // 6782
							htmlEscape(slotDate.format(this.labelFormat)) +                                                                 // 6783
						'</span>' :                                                                                                      // 6784
						''                                                                                                               // 6785
						) +                                                                                                              // 6786
				'</td>';                                                                                                           // 6787
                                                                                                                       // 6788
			html +=                                                                                                             // 6789
				'<tr data-time="' + slotDate.format('HH:mm:ss') + '"' +                                                            // 6790
					(isLabeled ? '' : ' class="fc-minor"') +                                                                          // 6791
					'>' +                                                                                                             // 6792
					(!isRTL ? axisHtml : '') +                                                                                        // 6793
					'<td class="' + view.widgetContentClass + '"/>' +                                                                 // 6794
					(isRTL ? axisHtml : '') +                                                                                         // 6795
				"</tr>";                                                                                                           // 6796
                                                                                                                       // 6797
			slotTime.add(this.slotDuration);                                                                                    // 6798
		}                                                                                                                    // 6799
                                                                                                                       // 6800
		return html;                                                                                                         // 6801
	},                                                                                                                    // 6802
                                                                                                                       // 6803
                                                                                                                       // 6804
	/* Options                                                                                                            // 6805
	------------------------------------------------------------------------------------------------------------------*/  // 6806
                                                                                                                       // 6807
                                                                                                                       // 6808
	// Parses various options into properties of this object                                                              // 6809
	processOptions: function() {                                                                                          // 6810
		var view = this.view;                                                                                                // 6811
		var slotDuration = view.opt('slotDuration');                                                                         // 6812
		var snapDuration = view.opt('snapDuration');                                                                         // 6813
		var input;                                                                                                           // 6814
                                                                                                                       // 6815
		slotDuration = moment.duration(slotDuration);                                                                        // 6816
		snapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;                                          // 6817
                                                                                                                       // 6818
		this.slotDuration = slotDuration;                                                                                    // 6819
		this.snapDuration = snapDuration;                                                                                    // 6820
		this.snapsPerSlot = slotDuration / snapDuration; // TODO: ensure an integer multiple?                                // 6821
                                                                                                                       // 6822
		this.minResizeDuration = snapDuration; // hack                                                                       // 6823
                                                                                                                       // 6824
		this.minTime = moment.duration(view.opt('minTime'));                                                                 // 6825
		this.maxTime = moment.duration(view.opt('maxTime'));                                                                 // 6826
                                                                                                                       // 6827
		// might be an array value (for TimelineView).                                                                       // 6828
		// if so, getting the most granular entry (the last one probably).                                                   // 6829
		input = view.opt('slotLabelFormat');                                                                                 // 6830
		if ($.isArray(input)) {                                                                                              // 6831
			input = input[input.length - 1];                                                                                    // 6832
		}                                                                                                                    // 6833
                                                                                                                       // 6834
		this.labelFormat =                                                                                                   // 6835
			input ||                                                                                                            // 6836
			view.opt('axisFormat') || // deprecated                                                                             // 6837
			view.opt('smallTimeFormat'); // the computed default                                                                // 6838
                                                                                                                       // 6839
		input = view.opt('slotLabelInterval');                                                                               // 6840
		this.labelInterval = input ?                                                                                         // 6841
			moment.duration(input) :                                                                                            // 6842
			this.computeLabelInterval(slotDuration);                                                                            // 6843
	},                                                                                                                    // 6844
                                                                                                                       // 6845
                                                                                                                       // 6846
	// Computes an automatic value for slotLabelInterval                                                                  // 6847
	computeLabelInterval: function(slotDuration) {                                                                        // 6848
		var i;                                                                                                               // 6849
		var labelInterval;                                                                                                   // 6850
		var slotsPerLabel;                                                                                                   // 6851
                                                                                                                       // 6852
		// find the smallest stock label interval that results in more than one slots-per-label                              // 6853
		for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {                                                       // 6854
			labelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);                                                     // 6855
			slotsPerLabel = divideDurationByDuration(labelInterval, slotDuration);                                              // 6856
			if (isInt(slotsPerLabel) && slotsPerLabel > 1) {                                                                    // 6857
				return labelInterval;                                                                                              // 6858
			}                                                                                                                   // 6859
		}                                                                                                                    // 6860
                                                                                                                       // 6861
		return moment.duration(slotDuration); // fall back. clone                                                            // 6862
	},                                                                                                                    // 6863
                                                                                                                       // 6864
                                                                                                                       // 6865
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 6866
	computeEventTimeFormat: function() {                                                                                  // 6867
		return this.view.opt('noMeridiemTimeFormat'); // like "6:30" (no AM/PM)                                              // 6868
	},                                                                                                                    // 6869
                                                                                                                       // 6870
                                                                                                                       // 6871
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 6872
	computeDisplayEventEnd: function() {                                                                                  // 6873
		return true;                                                                                                         // 6874
	},                                                                                                                    // 6875
                                                                                                                       // 6876
                                                                                                                       // 6877
	/* Hit System                                                                                                         // 6878
	------------------------------------------------------------------------------------------------------------------*/  // 6879
                                                                                                                       // 6880
                                                                                                                       // 6881
	prepareHits: function() {                                                                                             // 6882
		this.colCoordCache.build();                                                                                          // 6883
		this.slatCoordCache.build();                                                                                         // 6884
	},                                                                                                                    // 6885
                                                                                                                       // 6886
                                                                                                                       // 6887
	releaseHits: function() {                                                                                             // 6888
		this.colCoordCache.clear();                                                                                          // 6889
		// NOTE: don't clear slatCoordCache because we rely on it for computeTimeTop                                         // 6890
	},                                                                                                                    // 6891
                                                                                                                       // 6892
                                                                                                                       // 6893
	queryHit: function(leftOffset, topOffset) {                                                                           // 6894
		var snapsPerSlot = this.snapsPerSlot;                                                                                // 6895
		var colCoordCache = this.colCoordCache;                                                                              // 6896
		var slatCoordCache = this.slatCoordCache;                                                                            // 6897
		var colIndex = colCoordCache.getHorizontalIndex(leftOffset);                                                         // 6898
		var slatIndex = slatCoordCache.getVerticalIndex(topOffset);                                                          // 6899
                                                                                                                       // 6900
		if (colIndex != null && slatIndex != null) {                                                                         // 6901
			var slatTop = slatCoordCache.getTopOffset(slatIndex);                                                               // 6902
			var slatHeight = slatCoordCache.getHeight(slatIndex);                                                               // 6903
			var partial = (topOffset - slatTop) / slatHeight; // floating point number between 0 and 1                          // 6904
			var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat                    // 6905
			var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;                                                          // 6906
			var snapTop = slatTop + (localSnapIndex / snapsPerSlot) * slatHeight;                                               // 6907
			var snapBottom = slatTop + ((localSnapIndex + 1) / snapsPerSlot) * slatHeight;                                      // 6908
                                                                                                                       // 6909
			return {                                                                                                            // 6910
				col: colIndex,                                                                                                     // 6911
				snap: snapIndex,                                                                                                   // 6912
				component: this, // needed unfortunately :(                                                                        // 6913
				left: colCoordCache.getLeftOffset(colIndex),                                                                       // 6914
				right: colCoordCache.getRightOffset(colIndex),                                                                     // 6915
				top: snapTop,                                                                                                      // 6916
				bottom: snapBottom                                                                                                 // 6917
			};                                                                                                                  // 6918
		}                                                                                                                    // 6919
	},                                                                                                                    // 6920
                                                                                                                       // 6921
                                                                                                                       // 6922
	getHitSpan: function(hit) {                                                                                           // 6923
		var start = this.getCellDate(0, hit.col); // row=0                                                                   // 6924
		var time = this.computeSnapTime(hit.snap); // pass in the snap-index                                                 // 6925
		var end;                                                                                                             // 6926
                                                                                                                       // 6927
		start.time(time);                                                                                                    // 6928
		end = start.clone().add(this.snapDuration);                                                                          // 6929
                                                                                                                       // 6930
		return { start: start, end: end };                                                                                   // 6931
	},                                                                                                                    // 6932
                                                                                                                       // 6933
                                                                                                                       // 6934
	getHitEl: function(hit) {                                                                                             // 6935
		return this.colEls.eq(hit.col);                                                                                      // 6936
	},                                                                                                                    // 6937
                                                                                                                       // 6938
                                                                                                                       // 6939
	/* Dates                                                                                                              // 6940
	------------------------------------------------------------------------------------------------------------------*/  // 6941
                                                                                                                       // 6942
                                                                                                                       // 6943
	rangeUpdated: function() {                                                                                            // 6944
		this.updateDayTable();                                                                                               // 6945
	},                                                                                                                    // 6946
                                                                                                                       // 6947
                                                                                                                       // 6948
	// Given a row number of the grid, representing a "snap", returns a time (Duration) from its start-of-day             // 6949
	computeSnapTime: function(snapIndex) {                                                                                // 6950
		return moment.duration(this.minTime + this.snapDuration * snapIndex);                                                // 6951
	},                                                                                                                    // 6952
                                                                                                                       // 6953
                                                                                                                       // 6954
	// Slices up the given span (unzoned start/end with other misc data) into an array of segments                        // 6955
	spanToSegs: function(span) {                                                                                          // 6956
		var segs = this.sliceRangeByTimes(span);                                                                             // 6957
		var i;                                                                                                               // 6958
                                                                                                                       // 6959
		for (i = 0; i < segs.length; i++) {                                                                                  // 6960
			if (this.isRTL) {                                                                                                   // 6961
				segs[i].col = this.daysPerRow - 1 - segs[i].dayIndex;                                                              // 6962
			}                                                                                                                   // 6963
			else {                                                                                                              // 6964
				segs[i].col = segs[i].dayIndex;                                                                                    // 6965
			}                                                                                                                   // 6966
		}                                                                                                                    // 6967
                                                                                                                       // 6968
		return segs;                                                                                                         // 6969
	},                                                                                                                    // 6970
                                                                                                                       // 6971
                                                                                                                       // 6972
	sliceRangeByTimes: function(range) {                                                                                  // 6973
		var segs = [];                                                                                                       // 6974
		var seg;                                                                                                             // 6975
		var dayIndex;                                                                                                        // 6976
		var dayDate;                                                                                                         // 6977
		var dayRange;                                                                                                        // 6978
                                                                                                                       // 6979
		for (dayIndex = 0; dayIndex < this.daysPerRow; dayIndex++) {                                                         // 6980
			dayDate = this.dayDates[dayIndex].clone(); // TODO: better API for this?                                            // 6981
			dayRange = {                                                                                                        // 6982
				start: dayDate.clone().time(this.minTime),                                                                         // 6983
				end: dayDate.clone().time(this.maxTime)                                                                            // 6984
			};                                                                                                                  // 6985
			seg = intersectRanges(range, dayRange); // both will be ambig timezone                                              // 6986
			if (seg) {                                                                                                          // 6987
				seg.dayIndex = dayIndex;                                                                                           // 6988
				segs.push(seg);                                                                                                    // 6989
			}                                                                                                                   // 6990
		}                                                                                                                    // 6991
                                                                                                                       // 6992
		return segs;                                                                                                         // 6993
	},                                                                                                                    // 6994
                                                                                                                       // 6995
                                                                                                                       // 6996
	/* Coordinates                                                                                                        // 6997
	------------------------------------------------------------------------------------------------------------------*/  // 6998
                                                                                                                       // 6999
                                                                                                                       // 7000
	updateSize: function(isResize) { // NOT a standard Grid method                                                        // 7001
		this.slatCoordCache.build();                                                                                         // 7002
                                                                                                                       // 7003
		if (isResize) {                                                                                                      // 7004
			this.updateSegVerticals(                                                                                            // 7005
				[].concat(this.fgSegs || [], this.bgSegs || [], this.businessSegs || [])                                           // 7006
			);                                                                                                                  // 7007
		}                                                                                                                    // 7008
	},                                                                                                                    // 7009
                                                                                                                       // 7010
                                                                                                                       // 7011
	getTotalSlatHeight: function() {                                                                                      // 7012
		return this.slatContainerEl.outerHeight();                                                                           // 7013
	},                                                                                                                    // 7014
                                                                                                                       // 7015
                                                                                                                       // 7016
	// Computes the top coordinate, relative to the bounds of the grid, of the given date.                                // 7017
	// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.                                // 7018
	computeDateTop: function(date, startOfDayDate) {                                                                      // 7019
		return this.computeTimeTop(                                                                                          // 7020
			moment.duration(                                                                                                    // 7021
				date - startOfDayDate.clone().stripTime()                                                                          // 7022
			)                                                                                                                   // 7023
		);                                                                                                                   // 7024
	},                                                                                                                    // 7025
                                                                                                                       // 7026
                                                                                                                       // 7027
	// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).                   // 7028
	computeTimeTop: function(time) {                                                                                      // 7029
		var len = this.slatEls.length;                                                                                       // 7030
		var slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered          // 7031
		var slatIndex;                                                                                                       // 7032
		var slatRemainder;                                                                                                   // 7033
                                                                                                                       // 7034
		// compute a floating-point number for how many slats should be progressed through.                                  // 7035
		// from 0 to number of slats (inclusive)                                                                             // 7036
		// constrained because minTime/maxTime might be customized.                                                          // 7037
		slatCoverage = Math.max(0, slatCoverage);                                                                            // 7038
		slatCoverage = Math.min(len, slatCoverage);                                                                          // 7039
                                                                                                                       // 7040
		// an integer index of the furthest whole slat                                                                       // 7041
		// from 0 to number slats (*exclusive*, so len-1)                                                                    // 7042
		slatIndex = Math.floor(slatCoverage);                                                                                // 7043
		slatIndex = Math.min(slatIndex, len - 1);                                                                            // 7044
                                                                                                                       // 7045
		// how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.                           // 7046
		// could be 1.0 if slatCoverage is covering *all* the slots                                                          // 7047
		slatRemainder = slatCoverage - slatIndex;                                                                            // 7048
                                                                                                                       // 7049
		return this.slatCoordCache.getTopPosition(slatIndex) +                                                               // 7050
			this.slatCoordCache.getHeight(slatIndex) * slatRemainder;                                                           // 7051
	},                                                                                                                    // 7052
                                                                                                                       // 7053
                                                                                                                       // 7054
                                                                                                                       // 7055
	/* Event Drag Visualization                                                                                           // 7056
	------------------------------------------------------------------------------------------------------------------*/  // 7057
                                                                                                                       // 7058
                                                                                                                       // 7059
	// Renders a visual indication of an event being dragged over the specified date(s).                                  // 7060
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 7061
	renderDrag: function(eventLocation, seg) {                                                                            // 7062
                                                                                                                       // 7063
		if (seg) { // if there is event information for this drag, render a helper event                                     // 7064
                                                                                                                       // 7065
			// returns mock event elements                                                                                      // 7066
			// signal that a helper has been rendered                                                                           // 7067
			return this.renderEventLocationHelper(eventLocation, seg);                                                          // 7068
		}                                                                                                                    // 7069
		else {                                                                                                               // 7070
			// otherwise, just render a highlight                                                                               // 7071
			this.renderHighlight(this.eventToSpan(eventLocation));                                                              // 7072
		}                                                                                                                    // 7073
	},                                                                                                                    // 7074
                                                                                                                       // 7075
                                                                                                                       // 7076
	// Unrenders any visual indication of an event being dragged                                                          // 7077
	unrenderDrag: function() {                                                                                            // 7078
		this.unrenderHelper();                                                                                               // 7079
		this.unrenderHighlight();                                                                                            // 7080
	},                                                                                                                    // 7081
                                                                                                                       // 7082
                                                                                                                       // 7083
	/* Event Resize Visualization                                                                                         // 7084
	------------------------------------------------------------------------------------------------------------------*/  // 7085
                                                                                                                       // 7086
                                                                                                                       // 7087
	// Renders a visual indication of an event being resized                                                              // 7088
	renderEventResize: function(eventLocation, seg) {                                                                     // 7089
		return this.renderEventLocationHelper(eventLocation, seg); // returns mock event elements                            // 7090
	},                                                                                                                    // 7091
                                                                                                                       // 7092
                                                                                                                       // 7093
	// Unrenders any visual indication of an event being resized                                                          // 7094
	unrenderEventResize: function() {                                                                                     // 7095
		this.unrenderHelper();                                                                                               // 7096
	},                                                                                                                    // 7097
                                                                                                                       // 7098
                                                                                                                       // 7099
	/* Event Helper                                                                                                       // 7100
	------------------------------------------------------------------------------------------------------------------*/  // 7101
                                                                                                                       // 7102
                                                                                                                       // 7103
	// Renders a mock "helper" event. `sourceSeg` is the original segment object and might be null (an external drag)     // 7104
	renderHelper: function(event, sourceSeg) {                                                                            // 7105
		return this.renderHelperSegs(this.eventToSegs(event), sourceSeg); // returns mock event elements                     // 7106
	},                                                                                                                    // 7107
                                                                                                                       // 7108
                                                                                                                       // 7109
	// Unrenders any mock helper event                                                                                    // 7110
	unrenderHelper: function() {                                                                                          // 7111
		this.unrenderHelperSegs();                                                                                           // 7112
	},                                                                                                                    // 7113
                                                                                                                       // 7114
                                                                                                                       // 7115
	/* Business Hours                                                                                                     // 7116
	------------------------------------------------------------------------------------------------------------------*/  // 7117
                                                                                                                       // 7118
                                                                                                                       // 7119
	renderBusinessHours: function() {                                                                                     // 7120
		var events = this.view.calendar.getBusinessHoursEvents();                                                            // 7121
		var segs = this.eventsToSegs(events);                                                                                // 7122
                                                                                                                       // 7123
		this.renderBusinessSegs(segs);                                                                                       // 7124
	},                                                                                                                    // 7125
                                                                                                                       // 7126
                                                                                                                       // 7127
	unrenderBusinessHours: function() {                                                                                   // 7128
		this.unrenderBusinessSegs();                                                                                         // 7129
	},                                                                                                                    // 7130
                                                                                                                       // 7131
                                                                                                                       // 7132
	/* Now Indicator                                                                                                      // 7133
	------------------------------------------------------------------------------------------------------------------*/  // 7134
                                                                                                                       // 7135
                                                                                                                       // 7136
	getNowIndicatorUnit: function() {                                                                                     // 7137
		return 'minute'; // will refresh on the minute                                                                       // 7138
	},                                                                                                                    // 7139
                                                                                                                       // 7140
                                                                                                                       // 7141
	renderNowIndicator: function(date) {                                                                                  // 7142
		// seg system might be overkill, but it handles scenario where line needs to be rendered                             // 7143
		//  more than once because of columns with the same date (resources columns for example)                             // 7144
		var segs = this.spanToSegs({ start: date, end: date });                                                              // 7145
		var top = this.computeDateTop(date, date);                                                                           // 7146
		var nodes = [];                                                                                                      // 7147
		var i;                                                                                                               // 7148
                                                                                                                       // 7149
		// render lines within the columns                                                                                   // 7150
		for (i = 0; i < segs.length; i++) {                                                                                  // 7151
			nodes.push($('<div class="fc-now-indicator fc-now-indicator-line"></div>')                                          // 7152
				.css('top', top)                                                                                                   // 7153
				.appendTo(this.colContainerEls.eq(segs[i].col))[0]);                                                               // 7154
		}                                                                                                                    // 7155
                                                                                                                       // 7156
		// render an arrow over the axis                                                                                     // 7157
		if (segs.length > 0) { // is the current time in view?                                                               // 7158
			nodes.push($('<div class="fc-now-indicator fc-now-indicator-arrow"></div>')                                         // 7159
				.css('top', top)                                                                                                   // 7160
				.appendTo(this.el.find('.fc-content-skeleton'))[0]);                                                               // 7161
		}                                                                                                                    // 7162
                                                                                                                       // 7163
		this.nowIndicatorEls = $(nodes);                                                                                     // 7164
	},                                                                                                                    // 7165
                                                                                                                       // 7166
                                                                                                                       // 7167
	unrenderNowIndicator: function() {                                                                                    // 7168
		if (this.nowIndicatorEls) {                                                                                          // 7169
			this.nowIndicatorEls.remove();                                                                                      // 7170
			this.nowIndicatorEls = null;                                                                                        // 7171
		}                                                                                                                    // 7172
	},                                                                                                                    // 7173
                                                                                                                       // 7174
                                                                                                                       // 7175
	/* Selection                                                                                                          // 7176
	------------------------------------------------------------------------------------------------------------------*/  // 7177
                                                                                                                       // 7178
                                                                                                                       // 7179
	// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.         // 7180
	renderSelection: function(span) {                                                                                     // 7181
		if (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered             // 7182
                                                                                                                       // 7183
			// normally acceps an eventLocation, span has a start/end, which is good enough                                     // 7184
			this.renderEventLocationHelper(span);                                                                               // 7185
		}                                                                                                                    // 7186
		else {                                                                                                               // 7187
			this.renderHighlight(span);                                                                                         // 7188
		}                                                                                                                    // 7189
	},                                                                                                                    // 7190
                                                                                                                       // 7191
                                                                                                                       // 7192
	// Unrenders any visual indication of a selection                                                                     // 7193
	unrenderSelection: function() {                                                                                       // 7194
		this.unrenderHelper();                                                                                               // 7195
		this.unrenderHighlight();                                                                                            // 7196
	},                                                                                                                    // 7197
                                                                                                                       // 7198
                                                                                                                       // 7199
	/* Highlight                                                                                                          // 7200
	------------------------------------------------------------------------------------------------------------------*/  // 7201
                                                                                                                       // 7202
                                                                                                                       // 7203
	renderHighlight: function(span) {                                                                                     // 7204
		this.renderHighlightSegs(this.spanToSegs(span));                                                                     // 7205
	},                                                                                                                    // 7206
                                                                                                                       // 7207
                                                                                                                       // 7208
	unrenderHighlight: function() {                                                                                       // 7209
		this.unrenderHighlightSegs();                                                                                        // 7210
	}                                                                                                                     // 7211
                                                                                                                       // 7212
});                                                                                                                    // 7213
                                                                                                                       // 7214
;;                                                                                                                     // 7215
                                                                                                                       // 7216
/* Methods for rendering SEGMENTS, pieces of content that live on the view                                             // 7217
 ( this file is no longer just for events )                                                                            // 7218
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 7220
TimeGrid.mixin({                                                                                                       // 7221
                                                                                                                       // 7222
	colContainerEls: null, // containers for each column                                                                  // 7223
                                                                                                                       // 7224
	// inner-containers for each column where different types of segs live                                                // 7225
	fgContainerEls: null,                                                                                                 // 7226
	bgContainerEls: null,                                                                                                 // 7227
	helperContainerEls: null,                                                                                             // 7228
	highlightContainerEls: null,                                                                                          // 7229
	businessContainerEls: null,                                                                                           // 7230
                                                                                                                       // 7231
	// arrays of different types of displayed segments                                                                    // 7232
	fgSegs: null,                                                                                                         // 7233
	bgSegs: null,                                                                                                         // 7234
	helperSegs: null,                                                                                                     // 7235
	highlightSegs: null,                                                                                                  // 7236
	businessSegs: null,                                                                                                   // 7237
                                                                                                                       // 7238
                                                                                                                       // 7239
	// Renders the DOM that the view's content will live in                                                               // 7240
	renderContentSkeleton: function() {                                                                                   // 7241
		var cellHtml = '';                                                                                                   // 7242
		var i;                                                                                                               // 7243
		var skeletonEl;                                                                                                      // 7244
                                                                                                                       // 7245
		for (i = 0; i < this.colCnt; i++) {                                                                                  // 7246
			cellHtml +=                                                                                                         // 7247
				'<td>' +                                                                                                           // 7248
					'<div class="fc-content-col">' +                                                                                  // 7249
						'<div class="fc-event-container fc-helper-container"></div>' +                                                   // 7250
						'<div class="fc-event-container"></div>' +                                                                       // 7251
						'<div class="fc-highlight-container"></div>' +                                                                   // 7252
						'<div class="fc-bgevent-container"></div>' +                                                                     // 7253
						'<div class="fc-business-container"></div>' +                                                                    // 7254
					'</div>' +                                                                                                        // 7255
				'</td>';                                                                                                           // 7256
		}                                                                                                                    // 7257
                                                                                                                       // 7258
		skeletonEl = $(                                                                                                      // 7259
			'<div class="fc-content-skeleton">' +                                                                               // 7260
				'<table>' +                                                                                                        // 7261
					'<tr>' + cellHtml + '</tr>' +                                                                                     // 7262
				'</table>' +                                                                                                       // 7263
			'</div>'                                                                                                            // 7264
		);                                                                                                                   // 7265
                                                                                                                       // 7266
		this.colContainerEls = skeletonEl.find('.fc-content-col');                                                           // 7267
		this.helperContainerEls = skeletonEl.find('.fc-helper-container');                                                   // 7268
		this.fgContainerEls = skeletonEl.find('.fc-event-container:not(.fc-helper-container)');                              // 7269
		this.bgContainerEls = skeletonEl.find('.fc-bgevent-container');                                                      // 7270
		this.highlightContainerEls = skeletonEl.find('.fc-highlight-container');                                             // 7271
		this.businessContainerEls = skeletonEl.find('.fc-business-container');                                               // 7272
                                                                                                                       // 7273
		this.bookendCells(skeletonEl.find('tr')); // TODO: do this on string level                                           // 7274
		this.el.append(skeletonEl);                                                                                          // 7275
	},                                                                                                                    // 7276
                                                                                                                       // 7277
                                                                                                                       // 7278
	/* Foreground Events                                                                                                  // 7279
	------------------------------------------------------------------------------------------------------------------*/  // 7280
                                                                                                                       // 7281
                                                                                                                       // 7282
	renderFgSegs: function(segs) {                                                                                        // 7283
		segs = this.renderFgSegsIntoContainers(segs, this.fgContainerEls);                                                   // 7284
		this.fgSegs = segs;                                                                                                  // 7285
		return segs; // needed for Grid::renderEvents                                                                        // 7286
	},                                                                                                                    // 7287
                                                                                                                       // 7288
                                                                                                                       // 7289
	unrenderFgSegs: function() {                                                                                          // 7290
		this.unrenderNamedSegs('fgSegs');                                                                                    // 7291
	},                                                                                                                    // 7292
                                                                                                                       // 7293
                                                                                                                       // 7294
	/* Foreground Helper Events                                                                                           // 7295
	------------------------------------------------------------------------------------------------------------------*/  // 7296
                                                                                                                       // 7297
                                                                                                                       // 7298
	renderHelperSegs: function(segs, sourceSeg) {                                                                         // 7299
		var helperEls = [];                                                                                                  // 7300
		var i, seg;                                                                                                          // 7301
		var sourceEl;                                                                                                        // 7302
                                                                                                                       // 7303
		segs = this.renderFgSegsIntoContainers(segs, this.helperContainerEls);                                               // 7304
                                                                                                                       // 7305
		// Try to make the segment that is in the same row as sourceSeg look the same                                        // 7306
		for (i = 0; i < segs.length; i++) {                                                                                  // 7307
			seg = segs[i];                                                                                                      // 7308
			if (sourceSeg && sourceSeg.col === seg.col) {                                                                       // 7309
				sourceEl = sourceSeg.el;                                                                                           // 7310
				seg.el.css({                                                                                                       // 7311
					left: sourceEl.css('left'),                                                                                       // 7312
					right: sourceEl.css('right'),                                                                                     // 7313
					'margin-left': sourceEl.css('margin-left'),                                                                       // 7314
					'margin-right': sourceEl.css('margin-right')                                                                      // 7315
				});                                                                                                                // 7316
			}                                                                                                                   // 7317
			helperEls.push(seg.el[0]);                                                                                          // 7318
		}                                                                                                                    // 7319
                                                                                                                       // 7320
		this.helperSegs = segs;                                                                                              // 7321
                                                                                                                       // 7322
		return $(helperEls); // must return rendered helpers                                                                 // 7323
	},                                                                                                                    // 7324
                                                                                                                       // 7325
                                                                                                                       // 7326
	unrenderHelperSegs: function() {                                                                                      // 7327
		this.unrenderNamedSegs('helperSegs');                                                                                // 7328
	},                                                                                                                    // 7329
                                                                                                                       // 7330
                                                                                                                       // 7331
	/* Background Events                                                                                                  // 7332
	------------------------------------------------------------------------------------------------------------------*/  // 7333
                                                                                                                       // 7334
                                                                                                                       // 7335
	renderBgSegs: function(segs) {                                                                                        // 7336
		segs = this.renderFillSegEls('bgEvent', segs); // TODO: old fill system                                              // 7337
		this.updateSegVerticals(segs);                                                                                       // 7338
		this.attachSegsByCol(this.groupSegsByCol(segs), this.bgContainerEls);                                                // 7339
		this.bgSegs = segs;                                                                                                  // 7340
		return segs; // needed for Grid::renderEvents                                                                        // 7341
	},                                                                                                                    // 7342
                                                                                                                       // 7343
                                                                                                                       // 7344
	unrenderBgSegs: function() {                                                                                          // 7345
		this.unrenderNamedSegs('bgSegs');                                                                                    // 7346
	},                                                                                                                    // 7347
                                                                                                                       // 7348
                                                                                                                       // 7349
	/* Highlight                                                                                                          // 7350
	------------------------------------------------------------------------------------------------------------------*/  // 7351
                                                                                                                       // 7352
                                                                                                                       // 7353
	renderHighlightSegs: function(segs) {                                                                                 // 7354
		segs = this.renderFillSegEls('highlight', segs); // TODO: old fill system                                            // 7355
		this.updateSegVerticals(segs);                                                                                       // 7356
		this.attachSegsByCol(this.groupSegsByCol(segs), this.highlightContainerEls);                                         // 7357
		this.highlightSegs = segs;                                                                                           // 7358
	},                                                                                                                    // 7359
                                                                                                                       // 7360
                                                                                                                       // 7361
	unrenderHighlightSegs: function() {                                                                                   // 7362
		this.unrenderNamedSegs('highlightSegs');                                                                             // 7363
	},                                                                                                                    // 7364
                                                                                                                       // 7365
                                                                                                                       // 7366
	/* Business Hours                                                                                                     // 7367
	------------------------------------------------------------------------------------------------------------------*/  // 7368
                                                                                                                       // 7369
                                                                                                                       // 7370
	renderBusinessSegs: function(segs) {                                                                                  // 7371
		segs = this.renderFillSegEls('businessHours', segs); // TODO: old fill system                                        // 7372
		this.updateSegVerticals(segs);                                                                                       // 7373
		this.attachSegsByCol(this.groupSegsByCol(segs), this.businessContainerEls);                                          // 7374
		this.businessSegs = segs;                                                                                            // 7375
	},                                                                                                                    // 7376
                                                                                                                       // 7377
                                                                                                                       // 7378
	unrenderBusinessSegs: function() {                                                                                    // 7379
		this.unrenderNamedSegs('businessSegs');                                                                              // 7380
	},                                                                                                                    // 7381
                                                                                                                       // 7382
                                                                                                                       // 7383
	/* Seg Rendering Utils                                                                                                // 7384
	------------------------------------------------------------------------------------------------------------------*/  // 7385
                                                                                                                       // 7386
                                                                                                                       // 7387
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col                       // 7388
	groupSegsByCol: function(segs) {                                                                                      // 7389
		var segsByCol = [];                                                                                                  // 7390
		var i;                                                                                                               // 7391
                                                                                                                       // 7392
		for (i = 0; i < this.colCnt; i++) {                                                                                  // 7393
			segsByCol.push([]);                                                                                                 // 7394
		}                                                                                                                    // 7395
                                                                                                                       // 7396
		for (i = 0; i < segs.length; i++) {                                                                                  // 7397
			segsByCol[segs[i].col].push(segs[i]);                                                                               // 7398
		}                                                                                                                    // 7399
                                                                                                                       // 7400
		return segsByCol;                                                                                                    // 7401
	},                                                                                                                    // 7402
                                                                                                                       // 7403
                                                                                                                       // 7404
	// Given segments grouped by column, insert the segments' elements into a parallel array of container                 // 7405
	// elements, each living within a column.                                                                             // 7406
	attachSegsByCol: function(segsByCol, containerEls) {                                                                  // 7407
		var col;                                                                                                             // 7408
		var segs;                                                                                                            // 7409
		var i;                                                                                                               // 7410
                                                                                                                       // 7411
		for (col = 0; col < this.colCnt; col++) { // iterate each column grouping                                            // 7412
			segs = segsByCol[col];                                                                                              // 7413
                                                                                                                       // 7414
			for (i = 0; i < segs.length; i++) {                                                                                 // 7415
				containerEls.eq(col).append(segs[i].el);                                                                           // 7416
			}                                                                                                                   // 7417
		}                                                                                                                    // 7418
	},                                                                                                                    // 7419
                                                                                                                       // 7420
                                                                                                                       // 7421
	// Given the name of a property of `this` object, assumed to be an array of segments,                                 // 7422
	// loops through each segment and removes from DOM. Will null-out the property afterwards.                            // 7423
	unrenderNamedSegs: function(propName) {                                                                               // 7424
		var segs = this[propName];                                                                                           // 7425
		var i;                                                                                                               // 7426
                                                                                                                       // 7427
		if (segs) {                                                                                                          // 7428
			for (i = 0; i < segs.length; i++) {                                                                                 // 7429
				segs[i].el.remove();                                                                                               // 7430
			}                                                                                                                   // 7431
			this[propName] = null;                                                                                              // 7432
		}                                                                                                                    // 7433
	},                                                                                                                    // 7434
                                                                                                                       // 7435
                                                                                                                       // 7436
                                                                                                                       // 7437
	/* Foreground Event Rendering Utils                                                                                   // 7438
	------------------------------------------------------------------------------------------------------------------*/  // 7439
                                                                                                                       // 7440
                                                                                                                       // 7441
	// Given an array of foreground segments, render a DOM element for each, computes position,                           // 7442
	// and attaches to the column inner-container elements.                                                               // 7443
	renderFgSegsIntoContainers: function(segs, containerEls) {                                                            // 7444
		var segsByCol;                                                                                                       // 7445
		var col;                                                                                                             // 7446
                                                                                                                       // 7447
		segs = this.renderFgSegEls(segs); // will call fgSegHtml                                                             // 7448
		segsByCol = this.groupSegsByCol(segs);                                                                               // 7449
                                                                                                                       // 7450
		for (col = 0; col < this.colCnt; col++) {                                                                            // 7451
			this.updateFgSegCoords(segsByCol[col]);                                                                             // 7452
		}                                                                                                                    // 7453
                                                                                                                       // 7454
		this.attachSegsByCol(segsByCol, containerEls);                                                                       // 7455
                                                                                                                       // 7456
		return segs;                                                                                                         // 7457
	},                                                                                                                    // 7458
                                                                                                                       // 7459
                                                                                                                       // 7460
	// Renders the HTML for a single event segment's default rendering                                                    // 7461
	fgSegHtml: function(seg, disableResizing) {                                                                           // 7462
		var view = this.view;                                                                                                // 7463
		var event = seg.event;                                                                                               // 7464
		var isDraggable = view.isEventDraggable(event);                                                                      // 7465
		var isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);                 // 7466
		var isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);                       // 7467
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 7468
		var skinCss = cssToStr(this.getSegSkinCss(seg));                                                                     // 7469
		var timeText;                                                                                                        // 7470
		var fullTimeText; // more verbose time text. for the print stylesheet                                                // 7471
		var startTimeText; // just the start time text                                                                       // 7472
                                                                                                                       // 7473
		classes.unshift('fc-time-grid-event', 'fc-v-event');                                                                 // 7474
                                                                                                                       // 7475
		if (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...                              // 7476
			// Don't display time text on segments that run entirely through a day.                                             // 7477
			// That would appear as midnight-midnight and would look dumb.                                                      // 7478
			// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)                  // 7479
			if (seg.isStart || seg.isEnd) {                                                                                     // 7480
				timeText = this.getEventTimeText(seg);                                                                             // 7481
				fullTimeText = this.getEventTimeText(seg, 'LT');                                                                   // 7482
				startTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false                                       // 7483
			}                                                                                                                   // 7484
		} else {                                                                                                             // 7485
			// Display the normal time text for the *event's* times                                                             // 7486
			timeText = this.getEventTimeText(event);                                                                            // 7487
			fullTimeText = this.getEventTimeText(event, 'LT');                                                                  // 7488
			startTimeText = this.getEventTimeText(event, null, false); // displayEnd=false                                      // 7489
		}                                                                                                                    // 7490
                                                                                                                       // 7491
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 7492
			(event.url ?                                                                                                        // 7493
				' href="' + htmlEscape(event.url) + '"' :                                                                          // 7494
				''                                                                                                                 // 7495
				) +                                                                                                                // 7496
			(skinCss ?                                                                                                          // 7497
				' style="' + skinCss + '"' :                                                                                       // 7498
				''                                                                                                                 // 7499
				) +                                                                                                                // 7500
			'>' +                                                                                                               // 7501
				'<div class="fc-content">' +                                                                                       // 7502
					(timeText ?                                                                                                       // 7503
						'<div class="fc-time"' +                                                                                         // 7504
						' data-start="' + htmlEscape(startTimeText) + '"' +                                                              // 7505
						' data-full="' + htmlEscape(fullTimeText) + '"' +                                                                // 7506
						'>' +                                                                                                            // 7507
							'<span>' + htmlEscape(timeText) + '</span>' +                                                                   // 7508
						'</div>' :                                                                                                       // 7509
						''                                                                                                               // 7510
						) +                                                                                                              // 7511
					(event.title ?                                                                                                    // 7512
						'<div class="fc-title">' +                                                                                       // 7513
							htmlEscape(event.title) +                                                                                       // 7514
						'</div>' :                                                                                                       // 7515
						''                                                                                                               // 7516
						) +                                                                                                              // 7517
				'</div>' +                                                                                                         // 7518
				'<div class="fc-bg"/>' +                                                                                           // 7519
				/* TODO: write CSS for this                                                                                        // 7520
				(isResizableFromStart ?                                                                                            // 7521
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 7522
					''                                                                                                                // 7523
					) +                                                                                                               // 7524
				*/                                                                                                                 // 7525
				(isResizableFromEnd ?                                                                                              // 7526
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 7527
					''                                                                                                                // 7528
					) +                                                                                                               // 7529
			'</a>';                                                                                                             // 7530
	},                                                                                                                    // 7531
                                                                                                                       // 7532
                                                                                                                       // 7533
	/* Seg Position Utils                                                                                                 // 7534
	------------------------------------------------------------------------------------------------------------------*/  // 7535
                                                                                                                       // 7536
                                                                                                                       // 7537
	// Refreshes the CSS top/bottom coordinates for each segment element.                                                 // 7538
	// Works when called after initial render, after a window resize/zoom for example.                                    // 7539
	updateSegVerticals: function(segs) {                                                                                  // 7540
		this.computeSegVerticals(segs);                                                                                      // 7541
		this.assignSegVerticals(segs);                                                                                       // 7542
	},                                                                                                                    // 7543
                                                                                                                       // 7544
                                                                                                                       // 7545
	// For each segment in an array, computes and assigns its top and bottom properties                                   // 7546
	computeSegVerticals: function(segs) {                                                                                 // 7547
		var i, seg;                                                                                                          // 7548
                                                                                                                       // 7549
		for (i = 0; i < segs.length; i++) {                                                                                  // 7550
			seg = segs[i];                                                                                                      // 7551
			seg.top = this.computeDateTop(seg.start, seg.start);                                                                // 7552
			seg.bottom = this.computeDateTop(seg.end, seg.start);                                                               // 7553
		}                                                                                                                    // 7554
	},                                                                                                                    // 7555
                                                                                                                       // 7556
                                                                                                                       // 7557
	// Given segments that already have their top/bottom properties computed, applies those values to                     // 7558
	// the segments' elements.                                                                                            // 7559
	assignSegVerticals: function(segs) {                                                                                  // 7560
		var i, seg;                                                                                                          // 7561
                                                                                                                       // 7562
		for (i = 0; i < segs.length; i++) {                                                                                  // 7563
			seg = segs[i];                                                                                                      // 7564
			seg.el.css(this.generateSegVerticalCss(seg));                                                                       // 7565
		}                                                                                                                    // 7566
	},                                                                                                                    // 7567
                                                                                                                       // 7568
                                                                                                                       // 7569
	// Generates an object with CSS properties for the top/bottom coordinates of a segment element                        // 7570
	generateSegVerticalCss: function(seg) {                                                                               // 7571
		return {                                                                                                             // 7572
			top: seg.top,                                                                                                       // 7573
			bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container                      // 7574
		};                                                                                                                   // 7575
	},                                                                                                                    // 7576
                                                                                                                       // 7577
                                                                                                                       // 7578
	/* Foreground Event Positioning Utils                                                                                 // 7579
	------------------------------------------------------------------------------------------------------------------*/  // 7580
                                                                                                                       // 7581
                                                                                                                       // 7582
	// Given segments that are assumed to all live in the *same column*,                                                  // 7583
	// compute their verical/horizontal coordinates and assign to their elements.                                         // 7584
	updateFgSegCoords: function(segs) {                                                                                   // 7585
		this.computeSegVerticals(segs); // horizontals relies on this                                                        // 7586
		this.computeFgSegHorizontals(segs); // compute horizontal coordinates, z-index's, and reorder the array              // 7587
		this.assignSegVerticals(segs);                                                                                       // 7588
		this.assignFgSegHorizontals(segs);                                                                                   // 7589
	},                                                                                                                    // 7590
                                                                                                                       // 7591
                                                                                                                       // 7592
	// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.       // 7593
	// NOTE: Also reorders the given array by date!                                                                       // 7594
	computeFgSegHorizontals: function(segs) {                                                                             // 7595
		var levels;                                                                                                          // 7596
		var level0;                                                                                                          // 7597
		var i;                                                                                                               // 7598
                                                                                                                       // 7599
		this.sortEventSegs(segs); // order by certain criteria                                                               // 7600
		levels = buildSlotSegLevels(segs);                                                                                   // 7601
		computeForwardSlotSegs(levels);                                                                                      // 7602
                                                                                                                       // 7603
		if ((level0 = levels[0])) {                                                                                          // 7604
                                                                                                                       // 7605
			for (i = 0; i < level0.length; i++) {                                                                               // 7606
				computeSlotSegPressures(level0[i]);                                                                                // 7607
			}                                                                                                                   // 7608
                                                                                                                       // 7609
			for (i = 0; i < level0.length; i++) {                                                                               // 7610
				this.computeFgSegForwardBack(level0[i], 0, 0);                                                                     // 7611
			}                                                                                                                   // 7612
		}                                                                                                                    // 7613
	},                                                                                                                    // 7614
                                                                                                                       // 7615
                                                                                                                       // 7616
	// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range                          // 7617
	// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to "left" and                            // 7618
	// seg.forwardCoord maps to "right" (via percentage). Vice-versa if the calendar is right-to-left.                    // 7619
	//                                                                                                                    // 7620
	// The segment might be part of a "series", which means consecutive segments with the same pressure                   // 7621
	// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of                       // 7622
	// segments behind this one in the current series, and `seriesBackwardCoord` is the starting                          // 7623
	// coordinate of the first segment in the series.                                                                     // 7624
	computeFgSegForwardBack: function(seg, seriesBackwardPressure, seriesBackwardCoord) {                                 // 7625
		var forwardSegs = seg.forwardSegs;                                                                                   // 7626
		var i;                                                                                                               // 7627
                                                                                                                       // 7628
		if (seg.forwardCoord === undefined) { // not already computed                                                        // 7629
                                                                                                                       // 7630
			if (!forwardSegs.length) {                                                                                          // 7631
                                                                                                                       // 7632
				// if there are no forward segments, this segment should butt up against the edge                                  // 7633
				seg.forwardCoord = 1;                                                                                              // 7634
			}                                                                                                                   // 7635
			else {                                                                                                              // 7636
                                                                                                                       // 7637
				// sort highest pressure first                                                                                     // 7638
				this.sortForwardSegs(forwardSegs);                                                                                 // 7639
                                                                                                                       // 7640
				// this segment's forwardCoord will be calculated from the backwardCoord of the                                    // 7641
				// highest-pressure forward segment.                                                                               // 7642
				this.computeFgSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);                     // 7643
				seg.forwardCoord = forwardSegs[0].backwardCoord;                                                                   // 7644
			}                                                                                                                   // 7645
                                                                                                                       // 7646
			// calculate the backwardCoord from the forwardCoord. consider the series                                           // 7647
			seg.backwardCoord = seg.forwardCoord -                                                                              // 7648
				(seg.forwardCoord - seriesBackwardCoord) / // available width for series                                           // 7649
				(seriesBackwardPressure + 1); // # of segments in the series                                                       // 7650
                                                                                                                       // 7651
			// use this segment's coordinates to computed the coordinates of the less-pressurized                               // 7652
			// forward segments                                                                                                 // 7653
			for (i=0; i<forwardSegs.length; i++) {                                                                              // 7654
				this.computeFgSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);                                                 // 7655
			}                                                                                                                   // 7656
		}                                                                                                                    // 7657
	},                                                                                                                    // 7658
                                                                                                                       // 7659
                                                                                                                       // 7660
	sortForwardSegs: function(forwardSegs) {                                                                              // 7661
		forwardSegs.sort(proxy(this, 'compareForwardSegs'));                                                                 // 7662
	},                                                                                                                    // 7663
                                                                                                                       // 7664
                                                                                                                       // 7665
	// A cmp function for determining which forward segment to rely on more when computing coordinates.                   // 7666
	compareForwardSegs: function(seg1, seg2) {                                                                            // 7667
		// put higher-pressure first                                                                                         // 7668
		return seg2.forwardPressure - seg1.forwardPressure ||                                                                // 7669
			// put segments that are closer to initial edge first (and favor ones with no coords yet)                           // 7670
			(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||                                                            // 7671
			// do normal sorting...                                                                                             // 7672
			this.compareEventSegs(seg1, seg2);                                                                                  // 7673
	},                                                                                                                    // 7674
                                                                                                                       // 7675
                                                                                                                       // 7676
	// Given foreground event segments that have already had their position coordinates computed,                         // 7677
	// assigns position-related CSS values to their elements.                                                             // 7678
	assignFgSegHorizontals: function(segs) {                                                                              // 7679
		var i, seg;                                                                                                          // 7680
                                                                                                                       // 7681
		for (i = 0; i < segs.length; i++) {                                                                                  // 7682
			seg = segs[i];                                                                                                      // 7683
			seg.el.css(this.generateFgSegHorizontalCss(seg));                                                                   // 7684
                                                                                                                       // 7685
			// if the height is short, add a className for alternate styling                                                    // 7686
			if (seg.bottom - seg.top < 30) {                                                                                    // 7687
				seg.el.addClass('fc-short');                                                                                       // 7688
			}                                                                                                                   // 7689
		}                                                                                                                    // 7690
	},                                                                                                                    // 7691
                                                                                                                       // 7692
                                                                                                                       // 7693
	// Generates an object with CSS properties/values that should be applied to an event segment element.                 // 7694
	// Contains important positioning-related properties that should be applied to any event element, customized or not.  // 7695
	generateFgSegHorizontalCss: function(seg) {                                                                           // 7696
		var shouldOverlap = this.view.opt('slotEventOverlap');                                                               // 7697
		var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point                // 7698
		var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point                  // 7699
		var props = this.generateSegVerticalCss(seg); // get top/bottom first                                                // 7700
		var left; // amount of space from left edge, a fraction of the total width                                           // 7701
		var right; // amount of space from right edge, a fraction of the total width                                         // 7702
                                                                                                                       // 7703
		if (shouldOverlap) {                                                                                                 // 7704
			// double the width, but don't go beyond the maximum forward coordinate (1.0)                                       // 7705
			forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);                                     // 7706
		}                                                                                                                    // 7707
                                                                                                                       // 7708
		if (this.isRTL) {                                                                                                    // 7709
			left = 1 - forwardCoord;                                                                                            // 7710
			right = backwardCoord;                                                                                              // 7711
		}                                                                                                                    // 7712
		else {                                                                                                               // 7713
			left = backwardCoord;                                                                                               // 7714
			right = 1 - forwardCoord;                                                                                           // 7715
		}                                                                                                                    // 7716
                                                                                                                       // 7717
		props.zIndex = seg.level + 1; // convert from 0-base to 1-based                                                      // 7718
		props.left = left * 100 + '%';                                                                                       // 7719
		props.right = right * 100 + '%';                                                                                     // 7720
                                                                                                                       // 7721
		if (shouldOverlap && seg.forwardPressure) {                                                                          // 7722
			// add padding to the edge so that forward stacked events don't cover the resizer's icon                            // 7723
			props[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width               // 7724
		}                                                                                                                    // 7725
                                                                                                                       // 7726
		return props;                                                                                                        // 7727
	}                                                                                                                     // 7728
                                                                                                                       // 7729
});                                                                                                                    // 7730
                                                                                                                       // 7731
                                                                                                                       // 7732
// Builds an array of segments "levels". The first level will be the leftmost tier of segments if the calendar is      // 7733
// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.
function buildSlotSegLevels(segs) {                                                                                    // 7735
	var levels = [];                                                                                                      // 7736
	var i, seg;                                                                                                           // 7737
	var j;                                                                                                                // 7738
                                                                                                                       // 7739
	for (i=0; i<segs.length; i++) {                                                                                       // 7740
		seg = segs[i];                                                                                                       // 7741
                                                                                                                       // 7742
		// go through all the levels and stop on the first level where there are no collisions                               // 7743
		for (j=0; j<levels.length; j++) {                                                                                    // 7744
			if (!computeSlotSegCollisions(seg, levels[j]).length) {                                                             // 7745
				break;                                                                                                             // 7746
			}                                                                                                                   // 7747
		}                                                                                                                    // 7748
                                                                                                                       // 7749
		seg.level = j;                                                                                                       // 7750
                                                                                                                       // 7751
		(levels[j] || (levels[j] = [])).push(seg);                                                                           // 7752
	}                                                                                                                     // 7753
                                                                                                                       // 7754
	return levels;                                                                                                        // 7755
}                                                                                                                      // 7756
                                                                                                                       // 7757
                                                                                                                       // 7758
// For every segment, figure out the other segments that are in subsequent                                             // 7759
// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs                                      // 7760
function computeForwardSlotSegs(levels) {                                                                              // 7761
	var i, level;                                                                                                         // 7762
	var j, seg;                                                                                                           // 7763
	var k;                                                                                                                // 7764
                                                                                                                       // 7765
	for (i=0; i<levels.length; i++) {                                                                                     // 7766
		level = levels[i];                                                                                                   // 7767
                                                                                                                       // 7768
		for (j=0; j<level.length; j++) {                                                                                     // 7769
			seg = level[j];                                                                                                     // 7770
                                                                                                                       // 7771
			seg.forwardSegs = [];                                                                                               // 7772
			for (k=i+1; k<levels.length; k++) {                                                                                 // 7773
				computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);                                                         // 7774
			}                                                                                                                   // 7775
		}                                                                                                                    // 7776
	}                                                                                                                     // 7777
}                                                                                                                      // 7778
                                                                                                                       // 7779
                                                                                                                       // 7780
// Figure out which path forward (via seg.forwardSegs) results in the longest path until                               // 7781
// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure                       // 7782
function computeSlotSegPressures(seg) {                                                                                // 7783
	var forwardSegs = seg.forwardSegs;                                                                                    // 7784
	var forwardPressure = 0;                                                                                              // 7785
	var i, forwardSeg;                                                                                                    // 7786
                                                                                                                       // 7787
	if (seg.forwardPressure === undefined) { // not already computed                                                      // 7788
                                                                                                                       // 7789
		for (i=0; i<forwardSegs.length; i++) {                                                                               // 7790
			forwardSeg = forwardSegs[i];                                                                                        // 7791
                                                                                                                       // 7792
			// figure out the child's maximum forward path                                                                      // 7793
			computeSlotSegPressures(forwardSeg);                                                                                // 7794
                                                                                                                       // 7795
			// either use the existing maximum, or use the child's forward pressure                                             // 7796
			// plus one (for the forwardSeg itself)                                                                             // 7797
			forwardPressure = Math.max(                                                                                         // 7798
				forwardPressure,                                                                                                   // 7799
				1 + forwardSeg.forwardPressure                                                                                     // 7800
			);                                                                                                                  // 7801
		}                                                                                                                    // 7802
                                                                                                                       // 7803
		seg.forwardPressure = forwardPressure;                                                                               // 7804
	}                                                                                                                     // 7805
}                                                                                                                      // 7806
                                                                                                                       // 7807
                                                                                                                       // 7808
// Find all the segments in `otherSegs` that vertically collide with `seg`.                                            // 7809
// Append into an optionally-supplied `results` array and return.                                                      // 7810
function computeSlotSegCollisions(seg, otherSegs, results) {                                                           // 7811
	results = results || [];                                                                                              // 7812
                                                                                                                       // 7813
	for (var i=0; i<otherSegs.length; i++) {                                                                              // 7814
		if (isSlotSegCollision(seg, otherSegs[i])) {                                                                         // 7815
			results.push(otherSegs[i]);                                                                                         // 7816
		}                                                                                                                    // 7817
	}                                                                                                                     // 7818
                                                                                                                       // 7819
	return results;                                                                                                       // 7820
}                                                                                                                      // 7821
                                                                                                                       // 7822
                                                                                                                       // 7823
// Do these segments occupy the same vertical space?                                                                   // 7824
function isSlotSegCollision(seg1, seg2) {                                                                              // 7825
	return seg1.bottom > seg2.top && seg1.top < seg2.bottom;                                                              // 7826
}                                                                                                                      // 7827
                                                                                                                       // 7828
;;                                                                                                                     // 7829
                                                                                                                       // 7830
/* An abstract class from which other views inherit from                                                               // 7831
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 7833
var View = FC.View = Class.extend(EmitterMixin, ListenerMixin, {                                                       // 7834
                                                                                                                       // 7835
	type: null, // subclass' view name (string)                                                                           // 7836
	name: null, // deprecated. use `type` instead                                                                         // 7837
	title: null, // the text that will be displayed in the header's title                                                 // 7838
                                                                                                                       // 7839
	calendar: null, // owner Calendar object                                                                              // 7840
	options: null, // hash containing all options. already merged with view-specific-options                              // 7841
	el: null, // the view's containing element. set by Calendar                                                           // 7842
                                                                                                                       // 7843
	displaying: null, // a promise representing the state of rendering. null if no render requested                       // 7844
	isSkeletonRendered: false,                                                                                            // 7845
	isEventsRendered: false,                                                                                              // 7846
                                                                                                                       // 7847
	// range the view is actually displaying (moments)                                                                    // 7848
	start: null,                                                                                                          // 7849
	end: null, // exclusive                                                                                               // 7850
                                                                                                                       // 7851
	// range the view is formally responsible for (moments)                                                               // 7852
	// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates             // 7853
	intervalStart: null,                                                                                                  // 7854
	intervalEnd: null, // exclusive                                                                                       // 7855
	intervalDuration: null,                                                                                               // 7856
	intervalUnit: null, // name of largest unit being displayed, like "month" or "week"                                   // 7857
                                                                                                                       // 7858
	isRTL: false,                                                                                                         // 7859
	isSelected: false, // boolean whether a range of time is user-selected or not                                         // 7860
	selectedEvent: null,                                                                                                  // 7861
                                                                                                                       // 7862
	eventOrderSpecs: null, // criteria for ordering events when they have same date/time                                  // 7863
                                                                                                                       // 7864
	// classNames styled by jqui themes                                                                                   // 7865
	widgetHeaderClass: null,                                                                                              // 7866
	widgetContentClass: null,                                                                                             // 7867
	highlightStateClass: null,                                                                                            // 7868
                                                                                                                       // 7869
	// for date utils, computed from options                                                                              // 7870
	nextDayThreshold: null,                                                                                               // 7871
	isHiddenDayHash: null,                                                                                                // 7872
                                                                                                                       // 7873
	// now indicator                                                                                                      // 7874
	isNowIndicatorRendered: null,                                                                                         // 7875
	initialNowDate: null, // result first getNow call                                                                     // 7876
	initialNowQueriedMs: null, // ms time the getNow was called                                                           // 7877
	nowIndicatorTimeoutID: null, // for refresh timing of now indicator                                                   // 7878
	nowIndicatorIntervalID: null, // "                                                                                    // 7879
                                                                                                                       // 7880
                                                                                                                       // 7881
	constructor: function(calendar, type, options, intervalDuration) {                                                    // 7882
                                                                                                                       // 7883
		this.calendar = calendar;                                                                                            // 7884
		this.type = this.name = type; // .name is deprecated                                                                 // 7885
		this.options = options;                                                                                              // 7886
		this.intervalDuration = intervalDuration || moment.duration(1, 'day');                                               // 7887
                                                                                                                       // 7888
		this.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));                                               // 7889
		this.initThemingProps();                                                                                             // 7890
		this.initHiddenDays();                                                                                               // 7891
		this.isRTL = this.opt('isRTL');                                                                                      // 7892
                                                                                                                       // 7893
		this.eventOrderSpecs = parseFieldSpecs(this.opt('eventOrder'));                                                      // 7894
                                                                                                                       // 7895
		this.initialize();                                                                                                   // 7896
	},                                                                                                                    // 7897
                                                                                                                       // 7898
                                                                                                                       // 7899
	// A good place for subclasses to initialize member variables                                                         // 7900
	initialize: function() {                                                                                              // 7901
		// subclasses can implement                                                                                          // 7902
	},                                                                                                                    // 7903
                                                                                                                       // 7904
                                                                                                                       // 7905
	// Retrieves an option with the given name                                                                            // 7906
	opt: function(name) {                                                                                                 // 7907
		return this.options[name];                                                                                           // 7908
	},                                                                                                                    // 7909
                                                                                                                       // 7910
                                                                                                                       // 7911
	// Triggers handlers that are view-related. Modifies args before passing to calendar.                                 // 7912
	trigger: function(name, thisObj) { // arguments beyond thisObj are passed along                                       // 7913
		var calendar = this.calendar;                                                                                        // 7914
                                                                                                                       // 7915
		return calendar.trigger.apply(                                                                                       // 7916
			calendar,                                                                                                           // 7917
			[name, thisObj || this].concat(                                                                                     // 7918
				Array.prototype.slice.call(arguments, 2), // arguments beyond thisObj                                              // 7919
				[ this ] // always make the last argument a reference to the view. TODO: deprecate                                 // 7920
			)                                                                                                                   // 7921
		);                                                                                                                   // 7922
	},                                                                                                                    // 7923
                                                                                                                       // 7924
                                                                                                                       // 7925
	/* Dates                                                                                                              // 7926
	------------------------------------------------------------------------------------------------------------------*/  // 7927
                                                                                                                       // 7928
                                                                                                                       // 7929
	// Updates all internal dates to center around the given current unzoned date.                                        // 7930
	setDate: function(date) {                                                                                             // 7931
		this.setRange(this.computeRange(date));                                                                              // 7932
	},                                                                                                                    // 7933
                                                                                                                       // 7934
                                                                                                                       // 7935
	// Updates all internal dates for displaying the given unzoned range.                                                 // 7936
	setRange: function(range) {                                                                                           // 7937
		$.extend(this, range); // assigns every property to this object's member variables                                   // 7938
		this.updateTitle();                                                                                                  // 7939
	},                                                                                                                    // 7940
                                                                                                                       // 7941
                                                                                                                       // 7942
	// Given a single current unzoned date, produce information about what range to display.                              // 7943
	// Subclasses can override. Must return all properties.                                                               // 7944
	computeRange: function(date) {                                                                                        // 7945
		var intervalUnit = computeIntervalUnit(this.intervalDuration);                                                       // 7946
		var intervalStart = date.clone().startOf(intervalUnit);                                                              // 7947
		var intervalEnd = intervalStart.clone().add(this.intervalDuration);                                                  // 7948
		var start, end;                                                                                                      // 7949
                                                                                                                       // 7950
		// normalize the range's time-ambiguity                                                                              // 7951
		if (/year|month|week|day/.test(intervalUnit)) { // whole-days?                                                       // 7952
			intervalStart.stripTime();                                                                                          // 7953
			intervalEnd.stripTime();                                                                                            // 7954
		}                                                                                                                    // 7955
		else { // needs to have a time?                                                                                      // 7956
			if (!intervalStart.hasTime()) {                                                                                     // 7957
				intervalStart = this.calendar.time(0); // give 00:00 time                                                          // 7958
			}                                                                                                                   // 7959
			if (!intervalEnd.hasTime()) {                                                                                       // 7960
				intervalEnd = this.calendar.time(0); // give 00:00 time                                                            // 7961
			}                                                                                                                   // 7962
		}                                                                                                                    // 7963
                                                                                                                       // 7964
		start = intervalStart.clone();                                                                                       // 7965
		start = this.skipHiddenDays(start);                                                                                  // 7966
		end = intervalEnd.clone();                                                                                           // 7967
		end = this.skipHiddenDays(end, -1, true); // exclusively move backwards                                              // 7968
                                                                                                                       // 7969
		return {                                                                                                             // 7970
			intervalUnit: intervalUnit,                                                                                         // 7971
			intervalStart: intervalStart,                                                                                       // 7972
			intervalEnd: intervalEnd,                                                                                           // 7973
			start: start,                                                                                                       // 7974
			end: end                                                                                                            // 7975
		};                                                                                                                   // 7976
	},                                                                                                                    // 7977
                                                                                                                       // 7978
                                                                                                                       // 7979
	// Computes the new date when the user hits the prev button, given the current date                                   // 7980
	computePrevDate: function(date) {                                                                                     // 7981
		return this.massageCurrentDate(                                                                                      // 7982
			date.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1                                         // 7983
		);                                                                                                                   // 7984
	},                                                                                                                    // 7985
                                                                                                                       // 7986
                                                                                                                       // 7987
	// Computes the new date when the user hits the next button, given the current date                                   // 7988
	computeNextDate: function(date) {                                                                                     // 7989
		return this.massageCurrentDate(                                                                                      // 7990
			date.clone().startOf(this.intervalUnit).add(this.intervalDuration)                                                  // 7991
		);                                                                                                                   // 7992
	},                                                                                                                    // 7993
                                                                                                                       // 7994
                                                                                                                       // 7995
	// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely      // 7996
	// visible. `direction` is optional and indicates which direction the current date was being                          // 7997
	// incremented or decremented (1 or -1).                                                                              // 7998
	massageCurrentDate: function(date, direction) {                                                                       // 7999
		if (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller                         // 8000
			if (this.isHiddenDay(date)) {                                                                                       // 8001
				date = this.skipHiddenDays(date, direction);                                                                       // 8002
				date.startOf('day');                                                                                               // 8003
			}                                                                                                                   // 8004
		}                                                                                                                    // 8005
                                                                                                                       // 8006
		return date;                                                                                                         // 8007
	},                                                                                                                    // 8008
                                                                                                                       // 8009
                                                                                                                       // 8010
	/* Title and Date Formatting                                                                                          // 8011
	------------------------------------------------------------------------------------------------------------------*/  // 8012
                                                                                                                       // 8013
                                                                                                                       // 8014
	// Sets the view's title property to the most updated computed value                                                  // 8015
	updateTitle: function() {                                                                                             // 8016
		this.title = this.computeTitle();                                                                                    // 8017
	},                                                                                                                    // 8018
                                                                                                                       // 8019
                                                                                                                       // 8020
	// Computes what the title at the top of the calendar should be for this view                                         // 8021
	computeTitle: function() {                                                                                            // 8022
		return this.formatRange(                                                                                             // 8023
			{                                                                                                                   // 8024
				// in case intervalStart/End has a time, make sure timezone is correct                                             // 8025
				start: this.calendar.applyTimezone(this.intervalStart),                                                            // 8026
				end: this.calendar.applyTimezone(this.intervalEnd)                                                                 // 8027
			},                                                                                                                  // 8028
			this.opt('titleFormat') || this.computeTitleFormat(),                                                               // 8029
			this.opt('titleRangeSeparator')                                                                                     // 8030
		);                                                                                                                   // 8031
	},                                                                                                                    // 8032
                                                                                                                       // 8033
                                                                                                                       // 8034
	// Generates the format string that should be used to generate the title for the current date range.                  // 8035
	// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.                    // 8036
	computeTitleFormat: function() {                                                                                      // 8037
		if (this.intervalUnit == 'year') {                                                                                   // 8038
			return 'YYYY';                                                                                                      // 8039
		}                                                                                                                    // 8040
		else if (this.intervalUnit == 'month') {                                                                             // 8041
			return this.opt('monthYearFormat'); // like "September 2014"                                                        // 8042
		}                                                                                                                    // 8043
		else if (this.intervalDuration.as('days') > 1) {                                                                     // 8044
			return 'll'; // multi-day range. shorter, like "Sep 9 - 10 2014"                                                    // 8045
		}                                                                                                                    // 8046
		else {                                                                                                               // 8047
			return 'LL'; // one day. longer, like "September 9 2014"                                                            // 8048
		}                                                                                                                    // 8049
	},                                                                                                                    // 8050
                                                                                                                       // 8051
                                                                                                                       // 8052
	// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.                 // 8053
	// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.                    // 8054
	// The timezones of the dates within `range` will be respected.                                                       // 8055
	formatRange: function(range, formatStr, separator) {                                                                  // 8056
		var end = range.end;                                                                                                 // 8057
                                                                                                                       // 8058
		if (!end.hasTime()) { // all-day?                                                                                    // 8059
			end = end.clone().subtract(1); // convert to inclusive. last ms of previous day                                     // 8060
		}                                                                                                                    // 8061
                                                                                                                       // 8062
		return formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));                                       // 8063
	},                                                                                                                    // 8064
                                                                                                                       // 8065
                                                                                                                       // 8066
	/* Rendering                                                                                                          // 8067
	------------------------------------------------------------------------------------------------------------------*/  // 8068
                                                                                                                       // 8069
                                                                                                                       // 8070
	// Sets the container element that the view should render inside of.                                                  // 8071
	// Does other DOM-related initializations.                                                                            // 8072
	setElement: function(el) {                                                                                            // 8073
		this.el = el;                                                                                                        // 8074
		this.bindGlobalHandlers();                                                                                           // 8075
	},                                                                                                                    // 8076
                                                                                                                       // 8077
                                                                                                                       // 8078
	// Removes the view's container element from the DOM, clearing any content beforehand.                                // 8079
	// Undoes any other DOM-related attachments.                                                                          // 8080
	removeElement: function() {                                                                                           // 8081
		this.clear(); // clears all content                                                                                  // 8082
                                                                                                                       // 8083
		// clean up the skeleton                                                                                             // 8084
		if (this.isSkeletonRendered) {                                                                                       // 8085
			this.unrenderSkeleton();                                                                                            // 8086
			this.isSkeletonRendered = false;                                                                                    // 8087
		}                                                                                                                    // 8088
                                                                                                                       // 8089
		this.unbindGlobalHandlers();                                                                                         // 8090
                                                                                                                       // 8091
		this.el.remove();                                                                                                    // 8092
                                                                                                                       // 8093
		// NOTE: don't null-out this.el in case the View was destroyed within an API callback.                               // 8094
		// We don't null-out the View's other jQuery element references upon destroy,                                        // 8095
		//  so we shouldn't kill this.el either.                                                                             // 8096
	},                                                                                                                    // 8097
                                                                                                                       // 8098
                                                                                                                       // 8099
	// Does everything necessary to display the view centered around the given unzoned date.                              // 8100
	// Does every type of rendering EXCEPT rendering events.                                                              // 8101
	// Is asychronous and returns a promise.                                                                              // 8102
	display: function(date) {                                                                                             // 8103
		var _this = this;                                                                                                    // 8104
		var scrollState = null;                                                                                              // 8105
                                                                                                                       // 8106
		if (this.displaying) {                                                                                               // 8107
			scrollState = this.queryScroll();                                                                                   // 8108
		}                                                                                                                    // 8109
                                                                                                                       // 8110
		this.calendar.freezeContentHeight();                                                                                 // 8111
                                                                                                                       // 8112
		return this.clear().then(function() { // clear the content first (async)                                             // 8113
			return (                                                                                                            // 8114
				_this.displaying =                                                                                                 // 8115
					$.when(_this.displayView(date)) // displayView might return a promise                                             // 8116
						.then(function() {                                                                                               // 8117
							_this.forceScroll(_this.computeInitialScroll(scrollState));                                                     // 8118
							_this.calendar.unfreezeContentHeight();                                                                         // 8119
							_this.triggerRender();                                                                                          // 8120
						})                                                                                                               // 8121
			);                                                                                                                  // 8122
		});                                                                                                                  // 8123
	},                                                                                                                    // 8124
                                                                                                                       // 8125
                                                                                                                       // 8126
	// Does everything necessary to clear the content of the view.                                                        // 8127
	// Clears dates and events. Does not clear the skeleton.                                                              // 8128
	// Is asychronous and returns a promise.                                                                              // 8129
	clear: function() {                                                                                                   // 8130
		var _this = this;                                                                                                    // 8131
		var displaying = this.displaying;                                                                                    // 8132
                                                                                                                       // 8133
		if (displaying) { // previously displayed, or in the process of being displayed?                                     // 8134
			return displaying.then(function() { // wait for the display to finish                                               // 8135
				_this.displaying = null;                                                                                           // 8136
				_this.clearEvents();                                                                                               // 8137
				return _this.clearView(); // might return a promise. chain it                                                      // 8138
			});                                                                                                                 // 8139
		}                                                                                                                    // 8140
		else {                                                                                                               // 8141
			return $.when(); // an immediately-resolved promise                                                                 // 8142
		}                                                                                                                    // 8143
	},                                                                                                                    // 8144
                                                                                                                       // 8145
                                                                                                                       // 8146
	// Displays the view's non-event content, such as date-related content or anything required by events.                // 8147
	// Renders the view's non-content skeleton if necessary.                                                              // 8148
	// Can be asynchronous and return a promise.                                                                          // 8149
	displayView: function(date) {                                                                                         // 8150
		if (!this.isSkeletonRendered) {                                                                                      // 8151
			this.renderSkeleton();                                                                                              // 8152
			this.isSkeletonRendered = true;                                                                                     // 8153
		}                                                                                                                    // 8154
		if (date) {                                                                                                          // 8155
			this.setDate(date);                                                                                                 // 8156
		}                                                                                                                    // 8157
		if (this.render) {                                                                                                   // 8158
			this.render(); // TODO: deprecate                                                                                   // 8159
		}                                                                                                                    // 8160
		this.renderDates();                                                                                                  // 8161
		this.updateSize();                                                                                                   // 8162
		this.renderBusinessHours(); // might need coordinates, so should go after updateSize()                               // 8163
		this.startNowIndicator();                                                                                            // 8164
	},                                                                                                                    // 8165
                                                                                                                       // 8166
                                                                                                                       // 8167
	// Unrenders the view content that was rendered in displayView.                                                       // 8168
	// Can be asynchronous and return a promise.                                                                          // 8169
	clearView: function() {                                                                                               // 8170
		this.unselect();                                                                                                     // 8171
		this.stopNowIndicator();                                                                                             // 8172
		this.triggerUnrender();                                                                                              // 8173
		this.unrenderBusinessHours();                                                                                        // 8174
		this.unrenderDates();                                                                                                // 8175
		if (this.destroy) {                                                                                                  // 8176
			this.destroy(); // TODO: deprecate                                                                                  // 8177
		}                                                                                                                    // 8178
	},                                                                                                                    // 8179
                                                                                                                       // 8180
                                                                                                                       // 8181
	// Renders the basic structure of the view before any content is rendered                                             // 8182
	renderSkeleton: function() {                                                                                          // 8183
		// subclasses should implement                                                                                       // 8184
	},                                                                                                                    // 8185
                                                                                                                       // 8186
                                                                                                                       // 8187
	// Unrenders the basic structure of the view                                                                          // 8188
	unrenderSkeleton: function() {                                                                                        // 8189
		// subclasses should implement                                                                                       // 8190
	},                                                                                                                    // 8191
                                                                                                                       // 8192
                                                                                                                       // 8193
	// Renders the view's date-related content.                                                                           // 8194
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 8195
	renderDates: function() {                                                                                             // 8196
		// subclasses should implement                                                                                       // 8197
	},                                                                                                                    // 8198
                                                                                                                       // 8199
                                                                                                                       // 8200
	// Unrenders the view's date-related content                                                                          // 8201
	unrenderDates: function() {                                                                                           // 8202
		// subclasses should override                                                                                        // 8203
	},                                                                                                                    // 8204
                                                                                                                       // 8205
                                                                                                                       // 8206
	// Signals that the view's content has been rendered                                                                  // 8207
	triggerRender: function() {                                                                                           // 8208
		this.trigger('viewRender', this, this, this.el);                                                                     // 8209
	},                                                                                                                    // 8210
                                                                                                                       // 8211
                                                                                                                       // 8212
	// Signals that the view's content is about to be unrendered                                                          // 8213
	triggerUnrender: function() {                                                                                         // 8214
		this.trigger('viewDestroy', this, this, this.el);                                                                    // 8215
	},                                                                                                                    // 8216
                                                                                                                       // 8217
                                                                                                                       // 8218
	// Binds DOM handlers to elements that reside outside the view container, such as the document                        // 8219
	bindGlobalHandlers: function() {                                                                                      // 8220
		this.listenTo($(document), 'mousedown', this.handleDocumentMousedown);                                               // 8221
		this.listenTo($(document), 'touchstart', this.processUnselect);                                                      // 8222
	},                                                                                                                    // 8223
                                                                                                                       // 8224
                                                                                                                       // 8225
	// Unbinds DOM handlers from elements that reside outside the view container                                          // 8226
	unbindGlobalHandlers: function() {                                                                                    // 8227
		this.stopListeningTo($(document));                                                                                   // 8228
	},                                                                                                                    // 8229
                                                                                                                       // 8230
                                                                                                                       // 8231
	// Initializes internal variables related to theming                                                                  // 8232
	initThemingProps: function() {                                                                                        // 8233
		var tm = this.opt('theme') ? 'ui' : 'fc';                                                                            // 8234
                                                                                                                       // 8235
		this.widgetHeaderClass = tm + '-widget-header';                                                                      // 8236
		this.widgetContentClass = tm + '-widget-content';                                                                    // 8237
		this.highlightStateClass = tm + '-state-highlight';                                                                  // 8238
	},                                                                                                                    // 8239
                                                                                                                       // 8240
                                                                                                                       // 8241
	/* Business Hours                                                                                                     // 8242
	------------------------------------------------------------------------------------------------------------------*/  // 8243
                                                                                                                       // 8244
                                                                                                                       // 8245
	// Renders business-hours onto the view. Assumes updateSize has already been called.                                  // 8246
	renderBusinessHours: function() {                                                                                     // 8247
		// subclasses should implement                                                                                       // 8248
	},                                                                                                                    // 8249
                                                                                                                       // 8250
                                                                                                                       // 8251
	// Unrenders previously-rendered business-hours                                                                       // 8252
	unrenderBusinessHours: function() {                                                                                   // 8253
		// subclasses should implement                                                                                       // 8254
	},                                                                                                                    // 8255
                                                                                                                       // 8256
                                                                                                                       // 8257
	/* Now Indicator                                                                                                      // 8258
	------------------------------------------------------------------------------------------------------------------*/  // 8259
                                                                                                                       // 8260
                                                                                                                       // 8261
	// Immediately render the current time indicator and begins re-rendering it at an interval,                           // 8262
	// which is defined by this.getNowIndicatorUnit().                                                                    // 8263
	// TODO: somehow do this for the current whole day's background too                                                   // 8264
	startNowIndicator: function() {                                                                                       // 8265
		var _this = this;                                                                                                    // 8266
		var unit;                                                                                                            // 8267
		var update;                                                                                                          // 8268
		var delay; // ms wait value                                                                                          // 8269
                                                                                                                       // 8270
		if (this.opt('nowIndicator')) {                                                                                      // 8271
			unit = this.getNowIndicatorUnit();                                                                                  // 8272
			if (unit) {                                                                                                         // 8273
				update = proxy(this, 'updateNowIndicator'); // bind to `this`                                                      // 8274
                                                                                                                       // 8275
				this.initialNowDate = this.calendar.getNow();                                                                      // 8276
				this.initialNowQueriedMs = +new Date();                                                                            // 8277
				this.renderNowIndicator(this.initialNowDate);                                                                      // 8278
				this.isNowIndicatorRendered = true;                                                                                // 8279
                                                                                                                       // 8280
				// wait until the beginning of the next interval                                                                   // 8281
				delay = this.initialNowDate.clone().startOf(unit).add(1, unit) - this.initialNowDate;                              // 8282
				this.nowIndicatorTimeoutID = setTimeout(function() {                                                               // 8283
					_this.nowIndicatorTimeoutID = null;                                                                               // 8284
					update();                                                                                                         // 8285
					delay = +moment.duration(1, unit);                                                                                // 8286
					delay = Math.max(100, delay); // prevent too frequent                                                             // 8287
					_this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval                               // 8288
				}, delay);                                                                                                         // 8289
			}                                                                                                                   // 8290
		}                                                                                                                    // 8291
	},                                                                                                                    // 8292
                                                                                                                       // 8293
                                                                                                                       // 8294
	// rerenders the now indicator, computing the new current time from the amount of time that has passed                // 8295
	// since the initial getNow call.                                                                                     // 8296
	updateNowIndicator: function() {                                                                                      // 8297
		if (this.isNowIndicatorRendered) {                                                                                   // 8298
			this.unrenderNowIndicator();                                                                                        // 8299
			this.renderNowIndicator(                                                                                            // 8300
				this.initialNowDate.clone().add(new Date() - this.initialNowQueriedMs) // add ms                                   // 8301
			);                                                                                                                  // 8302
		}                                                                                                                    // 8303
	},                                                                                                                    // 8304
                                                                                                                       // 8305
                                                                                                                       // 8306
	// Immediately unrenders the view's current time indicator and stops any re-rendering timers.                         // 8307
	// Won't cause side effects if indicator isn't rendered.                                                              // 8308
	stopNowIndicator: function() {                                                                                        // 8309
		if (this.isNowIndicatorRendered) {                                                                                   // 8310
                                                                                                                       // 8311
			if (this.nowIndicatorTimeoutID) {                                                                                   // 8312
				clearTimeout(this.nowIndicatorTimeoutID);                                                                          // 8313
				this.nowIndicatorTimeoutID = null;                                                                                 // 8314
			}                                                                                                                   // 8315
			if (this.nowIndicatorIntervalID) {                                                                                  // 8316
				clearTimeout(this.nowIndicatorIntervalID);                                                                         // 8317
				this.nowIndicatorIntervalID = null;                                                                                // 8318
			}                                                                                                                   // 8319
                                                                                                                       // 8320
			this.unrenderNowIndicator();                                                                                        // 8321
			this.isNowIndicatorRendered = false;                                                                                // 8322
		}                                                                                                                    // 8323
	},                                                                                                                    // 8324
                                                                                                                       // 8325
                                                                                                                       // 8326
	// Returns a string unit, like 'second' or 'minute' that defined how often the current time indicator                 // 8327
	// should be refreshed. If something falsy is returned, no time indicator is rendered at all.                         // 8328
	getNowIndicatorUnit: function() {                                                                                     // 8329
		// subclasses should implement                                                                                       // 8330
	},                                                                                                                    // 8331
                                                                                                                       // 8332
                                                                                                                       // 8333
	// Renders a current time indicator at the given datetime                                                             // 8334
	renderNowIndicator: function(date) {                                                                                  // 8335
		// subclasses should implement                                                                                       // 8336
	},                                                                                                                    // 8337
                                                                                                                       // 8338
                                                                                                                       // 8339
	// Undoes the rendering actions from renderNowIndicator                                                               // 8340
	unrenderNowIndicator: function() {                                                                                    // 8341
		// subclasses should implement                                                                                       // 8342
	},                                                                                                                    // 8343
                                                                                                                       // 8344
                                                                                                                       // 8345
	/* Dimensions                                                                                                         // 8346
	------------------------------------------------------------------------------------------------------------------*/  // 8347
                                                                                                                       // 8348
                                                                                                                       // 8349
	// Refreshes anything dependant upon sizing of the container element of the grid                                      // 8350
	updateSize: function(isResize) {                                                                                      // 8351
		var scrollState;                                                                                                     // 8352
                                                                                                                       // 8353
		if (isResize) {                                                                                                      // 8354
			scrollState = this.queryScroll();                                                                                   // 8355
		}                                                                                                                    // 8356
                                                                                                                       // 8357
		this.updateHeight(isResize);                                                                                         // 8358
		this.updateWidth(isResize);                                                                                          // 8359
		this.updateNowIndicator();                                                                                           // 8360
                                                                                                                       // 8361
		if (isResize) {                                                                                                      // 8362
			this.setScroll(scrollState);                                                                                        // 8363
		}                                                                                                                    // 8364
	},                                                                                                                    // 8365
                                                                                                                       // 8366
                                                                                                                       // 8367
	// Refreshes the horizontal dimensions of the calendar                                                                // 8368
	updateWidth: function(isResize) {                                                                                     // 8369
		// subclasses should implement                                                                                       // 8370
	},                                                                                                                    // 8371
                                                                                                                       // 8372
                                                                                                                       // 8373
	// Refreshes the vertical dimensions of the calendar                                                                  // 8374
	updateHeight: function(isResize) {                                                                                    // 8375
		var calendar = this.calendar; // we poll the calendar for height information                                         // 8376
                                                                                                                       // 8377
		this.setHeight(                                                                                                      // 8378
			calendar.getSuggestedViewHeight(),                                                                                  // 8379
			calendar.isHeightAuto()                                                                                             // 8380
		);                                                                                                                   // 8381
	},                                                                                                                    // 8382
                                                                                                                       // 8383
                                                                                                                       // 8384
	// Updates the vertical dimensions of the calendar to the specified height.                                           // 8385
	// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its "natural" height.       // 8386
	setHeight: function(height, isAuto) {                                                                                 // 8387
		// subclasses should implement                                                                                       // 8388
	},                                                                                                                    // 8389
                                                                                                                       // 8390
                                                                                                                       // 8391
	/* Scroller                                                                                                           // 8392
	------------------------------------------------------------------------------------------------------------------*/  // 8393
                                                                                                                       // 8394
                                                                                                                       // 8395
	// Computes the initial pre-configured scroll state prior to allowing the user to change it.                          // 8396
	// Given the scroll state from the previous rendering. If first time rendering, given null.                           // 8397
	computeInitialScroll: function(previousScrollState) {                                                                 // 8398
		return 0;                                                                                                            // 8399
	},                                                                                                                    // 8400
                                                                                                                       // 8401
                                                                                                                       // 8402
	// Retrieves the view's current natural scroll state. Can return an arbitrary format.                                 // 8403
	queryScroll: function() {                                                                                             // 8404
		// subclasses must implement                                                                                         // 8405
	},                                                                                                                    // 8406
                                                                                                                       // 8407
                                                                                                                       // 8408
	// Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.            // 8409
	setScroll: function(scrollState) {                                                                                    // 8410
		// subclasses must implement                                                                                         // 8411
	},                                                                                                                    // 8412
                                                                                                                       // 8413
                                                                                                                       // 8414
	// Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind                 // 8415
	forceScroll: function(scrollState) {                                                                                  // 8416
		var _this = this;                                                                                                    // 8417
                                                                                                                       // 8418
		this.setScroll(scrollState);                                                                                         // 8419
		setTimeout(function() {                                                                                              // 8420
			_this.setScroll(scrollState);                                                                                       // 8421
		}, 0);                                                                                                               // 8422
	},                                                                                                                    // 8423
                                                                                                                       // 8424
                                                                                                                       // 8425
	/* Event Elements / Segments                                                                                          // 8426
	------------------------------------------------------------------------------------------------------------------*/  // 8427
                                                                                                                       // 8428
                                                                                                                       // 8429
	// Does everything necessary to display the given events onto the current view                                        // 8430
	displayEvents: function(events) {                                                                                     // 8431
		var scrollState = this.queryScroll();                                                                                // 8432
                                                                                                                       // 8433
		this.clearEvents();                                                                                                  // 8434
		this.renderEvents(events);                                                                                           // 8435
		this.isEventsRendered = true;                                                                                        // 8436
		this.setScroll(scrollState);                                                                                         // 8437
		this.triggerEventRender();                                                                                           // 8438
	},                                                                                                                    // 8439
                                                                                                                       // 8440
                                                                                                                       // 8441
	// Does everything necessary to clear the view's currently-rendered events                                            // 8442
	clearEvents: function() {                                                                                             // 8443
		var scrollState;                                                                                                     // 8444
                                                                                                                       // 8445
		if (this.isEventsRendered) {                                                                                         // 8446
                                                                                                                       // 8447
			// TODO: optimize: if we know this is part of a displayEvents call, don't queryScroll/setScroll                     // 8448
			scrollState = this.queryScroll();                                                                                   // 8449
                                                                                                                       // 8450
			this.triggerEventUnrender();                                                                                        // 8451
			if (this.destroyEvents) {                                                                                           // 8452
				this.destroyEvents(); // TODO: deprecate                                                                           // 8453
			}                                                                                                                   // 8454
			this.unrenderEvents();                                                                                              // 8455
			this.setScroll(scrollState);                                                                                        // 8456
			this.isEventsRendered = false;                                                                                      // 8457
		}                                                                                                                    // 8458
	},                                                                                                                    // 8459
                                                                                                                       // 8460
                                                                                                                       // 8461
	// Renders the events onto the view.                                                                                  // 8462
	renderEvents: function(events) {                                                                                      // 8463
		// subclasses should implement                                                                                       // 8464
	},                                                                                                                    // 8465
                                                                                                                       // 8466
                                                                                                                       // 8467
	// Removes event elements from the view.                                                                              // 8468
	unrenderEvents: function() {                                                                                          // 8469
		// subclasses should implement                                                                                       // 8470
	},                                                                                                                    // 8471
                                                                                                                       // 8472
                                                                                                                       // 8473
	// Signals that all events have been rendered                                                                         // 8474
	triggerEventRender: function() {                                                                                      // 8475
		this.renderedEventSegEach(function(seg) {                                                                            // 8476
			this.trigger('eventAfterRender', seg.event, seg.event, seg.el);                                                     // 8477
		});                                                                                                                  // 8478
		this.trigger('eventAfterAllRender');                                                                                 // 8479
	},                                                                                                                    // 8480
                                                                                                                       // 8481
                                                                                                                       // 8482
	// Signals that all event elements are about to be removed                                                            // 8483
	triggerEventUnrender: function() {                                                                                    // 8484
		this.renderedEventSegEach(function(seg) {                                                                            // 8485
			this.trigger('eventDestroy', seg.event, seg.event, seg.el);                                                         // 8486
		});                                                                                                                  // 8487
	},                                                                                                                    // 8488
                                                                                                                       // 8489
                                                                                                                       // 8490
	// Given an event and the default element used for rendering, returns the element that should actually be used.       // 8491
	// Basically runs events and elements through the eventRender hook.                                                   // 8492
	resolveEventEl: function(event, el) {                                                                                 // 8493
		var custom = this.trigger('eventRender', event, event, el);                                                          // 8494
                                                                                                                       // 8495
		if (custom === false) { // means don't render at all                                                                 // 8496
			el = null;                                                                                                          // 8497
		}                                                                                                                    // 8498
		else if (custom && custom !== true) {                                                                                // 8499
			el = $(custom);                                                                                                     // 8500
		}                                                                                                                    // 8501
                                                                                                                       // 8502
		return el;                                                                                                           // 8503
	},                                                                                                                    // 8504
                                                                                                                       // 8505
                                                                                                                       // 8506
	// Hides all rendered event segments linked to the given event                                                        // 8507
	showEvent: function(event) {                                                                                          // 8508
		this.renderedEventSegEach(function(seg) {                                                                            // 8509
			seg.el.css('visibility', '');                                                                                       // 8510
		}, event);                                                                                                           // 8511
	},                                                                                                                    // 8512
                                                                                                                       // 8513
                                                                                                                       // 8514
	// Shows all rendered event segments linked to the given event                                                        // 8515
	hideEvent: function(event) {                                                                                          // 8516
		this.renderedEventSegEach(function(seg) {                                                                            // 8517
			seg.el.css('visibility', 'hidden');                                                                                 // 8518
		}, event);                                                                                                           // 8519
	},                                                                                                                    // 8520
                                                                                                                       // 8521
                                                                                                                       // 8522
	// Iterates through event segments that have been rendered (have an el). Goes through all by default.                 // 8523
	// If the optional `event` argument is specified, only iterates through segments linked to that event.                // 8524
	// The `this` value of the callback function will be the view.                                                        // 8525
	renderedEventSegEach: function(func, event) {                                                                         // 8526
		var segs = this.getEventSegs();                                                                                      // 8527
		var i;                                                                                                               // 8528
                                                                                                                       // 8529
		for (i = 0; i < segs.length; i++) {                                                                                  // 8530
			if (!event || segs[i].event._id === event._id) {                                                                    // 8531
				if (segs[i].el) {                                                                                                  // 8532
					func.call(this, segs[i]);                                                                                         // 8533
				}                                                                                                                  // 8534
			}                                                                                                                   // 8535
		}                                                                                                                    // 8536
	},                                                                                                                    // 8537
                                                                                                                       // 8538
                                                                                                                       // 8539
	// Retrieves all the rendered segment objects for the view                                                            // 8540
	getEventSegs: function() {                                                                                            // 8541
		// subclasses must implement                                                                                         // 8542
		return [];                                                                                                           // 8543
	},                                                                                                                    // 8544
                                                                                                                       // 8545
                                                                                                                       // 8546
	/* Event Drag-n-Drop                                                                                                  // 8547
	------------------------------------------------------------------------------------------------------------------*/  // 8548
                                                                                                                       // 8549
                                                                                                                       // 8550
	// Computes if the given event is allowed to be dragged by the user                                                   // 8551
	isEventDraggable: function(event) {                                                                                   // 8552
		var source = event.source || {};                                                                                     // 8553
                                                                                                                       // 8554
		return firstDefined(                                                                                                 // 8555
			event.startEditable,                                                                                                // 8556
			source.startEditable,                                                                                               // 8557
			this.opt('eventStartEditable'),                                                                                     // 8558
			event.editable,                                                                                                     // 8559
			source.editable,                                                                                                    // 8560
			this.opt('editable')                                                                                                // 8561
		);                                                                                                                   // 8562
	},                                                                                                                    // 8563
                                                                                                                       // 8564
                                                                                                                       // 8565
	// Must be called when an event in the view is dropped onto new location.                                             // 8566
	// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.                     // 8567
	reportEventDrop: function(event, dropLocation, largeUnit, el, ev) {                                                   // 8568
		var calendar = this.calendar;                                                                                        // 8569
		var mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);                                             // 8570
		var undoFunc = function() {                                                                                          // 8571
			mutateResult.undo();                                                                                                // 8572
			calendar.reportEventChange();                                                                                       // 8573
		};                                                                                                                   // 8574
                                                                                                                       // 8575
		this.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);                                              // 8576
		calendar.reportEventChange(); // will rerender events                                                                // 8577
	},                                                                                                                    // 8578
                                                                                                                       // 8579
                                                                                                                       // 8580
	// Triggers event-drop handlers that have subscribed via the API                                                      // 8581
	triggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {                                                      // 8582
		this.trigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy                             // 8583
	},                                                                                                                    // 8584
                                                                                                                       // 8585
                                                                                                                       // 8586
	/* External Element Drag-n-Drop                                                                                       // 8587
	------------------------------------------------------------------------------------------------------------------*/  // 8588
                                                                                                                       // 8589
                                                                                                                       // 8590
	// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.                        // 8591
	// `meta` is the parsed data that has been embedded into the dragging event.                                          // 8592
	// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.                     // 8593
	reportExternalDrop: function(meta, dropLocation, el, ev, ui) {                                                        // 8594
		var eventProps = meta.eventProps;                                                                                    // 8595
		var eventInput;                                                                                                      // 8596
		var event;                                                                                                           // 8597
                                                                                                                       // 8598
		// Try to build an event object and render it. TODO: decouple the two                                                // 8599
		if (eventProps) {                                                                                                    // 8600
			eventInput = $.extend({}, eventProps, dropLocation);                                                                // 8601
			event = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array                       // 8602
		}                                                                                                                    // 8603
                                                                                                                       // 8604
		this.triggerExternalDrop(event, dropLocation, el, ev, ui);                                                           // 8605
	},                                                                                                                    // 8606
                                                                                                                       // 8607
                                                                                                                       // 8608
	// Triggers external-drop handlers that have subscribed via the API                                                   // 8609
	triggerExternalDrop: function(event, dropLocation, el, ev, ui) {                                                      // 8610
                                                                                                                       // 8611
		// trigger 'drop' regardless of whether element represents an event                                                  // 8612
		this.trigger('drop', el[0], dropLocation.start, ev, ui);                                                             // 8613
                                                                                                                       // 8614
		if (event) {                                                                                                         // 8615
			this.trigger('eventReceive', null, event); // signal an external event landed                                       // 8616
		}                                                                                                                    // 8617
	},                                                                                                                    // 8618
                                                                                                                       // 8619
                                                                                                                       // 8620
	/* Drag-n-Drop Rendering (for both events and external elements)                                                      // 8621
	------------------------------------------------------------------------------------------------------------------*/  // 8622
                                                                                                                       // 8623
                                                                                                                       // 8624
	// Renders a visual indication of a event or external-element drag over the given drop zone.                          // 8625
	// If an external-element, seg will be `null`.                                                                        // 8626
	// Must return elements used for any mock events.                                                                     // 8627
	renderDrag: function(dropLocation, seg) {                                                                             // 8628
		// subclasses must implement                                                                                         // 8629
	},                                                                                                                    // 8630
                                                                                                                       // 8631
                                                                                                                       // 8632
	// Unrenders a visual indication of an event or external-element being dragged.                                       // 8633
	unrenderDrag: function() {                                                                                            // 8634
		// subclasses must implement                                                                                         // 8635
	},                                                                                                                    // 8636
                                                                                                                       // 8637
                                                                                                                       // 8638
	/* Event Resizing                                                                                                     // 8639
	------------------------------------------------------------------------------------------------------------------*/  // 8640
                                                                                                                       // 8641
                                                                                                                       // 8642
	// Computes if the given event is allowed to be resized from its starting edge                                        // 8643
	isEventResizableFromStart: function(event) {                                                                          // 8644
		return this.opt('eventResizableFromStart') && this.isEventResizable(event);                                          // 8645
	},                                                                                                                    // 8646
                                                                                                                       // 8647
                                                                                                                       // 8648
	// Computes if the given event is allowed to be resized from its ending edge                                          // 8649
	isEventResizableFromEnd: function(event) {                                                                            // 8650
		return this.isEventResizable(event);                                                                                 // 8651
	},                                                                                                                    // 8652
                                                                                                                       // 8653
                                                                                                                       // 8654
	// Computes if the given event is allowed to be resized by the user at all                                            // 8655
	isEventResizable: function(event) {                                                                                   // 8656
		var source = event.source || {};                                                                                     // 8657
                                                                                                                       // 8658
		return firstDefined(                                                                                                 // 8659
			event.durationEditable,                                                                                             // 8660
			source.durationEditable,                                                                                            // 8661
			this.opt('eventDurationEditable'),                                                                                  // 8662
			event.editable,                                                                                                     // 8663
			source.editable,                                                                                                    // 8664
			this.opt('editable')                                                                                                // 8665
		);                                                                                                                   // 8666
	},                                                                                                                    // 8667
                                                                                                                       // 8668
                                                                                                                       // 8669
	// Must be called when an event in the view has been resized to a new length                                          // 8670
	reportEventResize: function(event, resizeLocation, largeUnit, el, ev) {                                               // 8671
		var calendar = this.calendar;                                                                                        // 8672
		var mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);                                           // 8673
		var undoFunc = function() {                                                                                          // 8674
			mutateResult.undo();                                                                                                // 8675
			calendar.reportEventChange();                                                                                       // 8676
		};                                                                                                                   // 8677
                                                                                                                       // 8678
		this.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);                                        // 8679
		calendar.reportEventChange(); // will rerender events                                                                // 8680
	},                                                                                                                    // 8681
                                                                                                                       // 8682
                                                                                                                       // 8683
	// Triggers event-resize handlers that have subscribed via the API                                                    // 8684
	triggerEventResize: function(event, durationDelta, undoFunc, el, ev) {                                                // 8685
		this.trigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy                       // 8686
	},                                                                                                                    // 8687
                                                                                                                       // 8688
                                                                                                                       // 8689
	/* Selection (time range)                                                                                             // 8690
	------------------------------------------------------------------------------------------------------------------*/  // 8691
                                                                                                                       // 8692
                                                                                                                       // 8693
	// Selects a date span on the view. `start` and `end` are both Moments.                                               // 8694
	// `ev` is the native mouse event that begin the interaction.                                                         // 8695
	select: function(span, ev) {                                                                                          // 8696
		this.unselect(ev);                                                                                                   // 8697
		this.renderSelection(span);                                                                                          // 8698
		this.reportSelection(span, ev);                                                                                      // 8699
	},                                                                                                                    // 8700
                                                                                                                       // 8701
                                                                                                                       // 8702
	// Renders a visual indication of the selection                                                                       // 8703
	renderSelection: function(span) {                                                                                     // 8704
		// subclasses should implement                                                                                       // 8705
	},                                                                                                                    // 8706
                                                                                                                       // 8707
                                                                                                                       // 8708
	// Called when a new selection is made. Updates internal state and triggers handlers.                                 // 8709
	reportSelection: function(span, ev) {                                                                                 // 8710
		this.isSelected = true;                                                                                              // 8711
		this.triggerSelect(span, ev);                                                                                        // 8712
	},                                                                                                                    // 8713
                                                                                                                       // 8714
                                                                                                                       // 8715
	// Triggers handlers to 'select'                                                                                      // 8716
	triggerSelect: function(span, ev) {                                                                                   // 8717
		this.trigger(                                                                                                        // 8718
			'select',                                                                                                           // 8719
			null,                                                                                                               // 8720
			this.calendar.applyTimezone(span.start), // convert to calendar's tz for external API                               // 8721
			this.calendar.applyTimezone(span.end), // "                                                                         // 8722
			ev                                                                                                                  // 8723
		);                                                                                                                   // 8724
	},                                                                                                                    // 8725
                                                                                                                       // 8726
                                                                                                                       // 8727
	// Undoes a selection. updates in the internal state and triggers handlers.                                           // 8728
	// `ev` is the native mouse event that began the interaction.                                                         // 8729
	unselect: function(ev) {                                                                                              // 8730
		if (this.isSelected) {                                                                                               // 8731
			this.isSelected = false;                                                                                            // 8732
			if (this.destroySelection) {                                                                                        // 8733
				this.destroySelection(); // TODO: deprecate                                                                        // 8734
			}                                                                                                                   // 8735
			this.unrenderSelection();                                                                                           // 8736
			this.trigger('unselect', null, ev);                                                                                 // 8737
		}                                                                                                                    // 8738
	},                                                                                                                    // 8739
                                                                                                                       // 8740
                                                                                                                       // 8741
	// Unrenders a visual indication of selection                                                                         // 8742
	unrenderSelection: function() {                                                                                       // 8743
		// subclasses should implement                                                                                       // 8744
	},                                                                                                                    // 8745
                                                                                                                       // 8746
                                                                                                                       // 8747
	/* Event Selection                                                                                                    // 8748
	------------------------------------------------------------------------------------------------------------------*/  // 8749
                                                                                                                       // 8750
                                                                                                                       // 8751
	selectEvent: function(event) {                                                                                        // 8752
		if (!this.selectedEvent || this.selectedEvent !== event) {                                                           // 8753
			this.unselectEvent();                                                                                               // 8754
			this.renderedEventSegEach(function(seg) {                                                                           // 8755
				seg.el.addClass('fc-selected');                                                                                    // 8756
			}, event);                                                                                                          // 8757
			this.selectedEvent = event;                                                                                         // 8758
		}                                                                                                                    // 8759
	},                                                                                                                    // 8760
                                                                                                                       // 8761
                                                                                                                       // 8762
	unselectEvent: function() {                                                                                           // 8763
		if (this.selectedEvent) {                                                                                            // 8764
			this.renderedEventSegEach(function(seg) {                                                                           // 8765
				seg.el.removeClass('fc-selected');                                                                                 // 8766
			}, this.selectedEvent);                                                                                             // 8767
			this.selectedEvent = null;                                                                                          // 8768
		}                                                                                                                    // 8769
	},                                                                                                                    // 8770
                                                                                                                       // 8771
                                                                                                                       // 8772
	isEventSelected: function(event) {                                                                                    // 8773
		// event references might change on refetchEvents(), while selectedEvent doesn't,                                    // 8774
		// so compare IDs                                                                                                    // 8775
		return this.selectedEvent && this.selectedEvent._id === event._id;                                                   // 8776
	},                                                                                                                    // 8777
                                                                                                                       // 8778
                                                                                                                       // 8779
	/* Mouse / Touch Unselecting (time range & event unselection)                                                         // 8780
	------------------------------------------------------------------------------------------------------------------*/  // 8781
	// TODO: move consistently to down/start or up/end?                                                                   // 8782
	// TODO: don't kill previous selection if touch scrolling                                                             // 8783
                                                                                                                       // 8784
                                                                                                                       // 8785
	handleDocumentMousedown: function(ev) {                                                                               // 8786
		if (isPrimaryMouseButton(ev)) {                                                                                      // 8787
			this.processUnselect(ev);                                                                                           // 8788
		}                                                                                                                    // 8789
	},                                                                                                                    // 8790
                                                                                                                       // 8791
                                                                                                                       // 8792
	processUnselect: function(ev) {                                                                                       // 8793
		this.processRangeUnselect(ev);                                                                                       // 8794
		this.processEventUnselect(ev);                                                                                       // 8795
	},                                                                                                                    // 8796
                                                                                                                       // 8797
                                                                                                                       // 8798
	processRangeUnselect: function(ev) {                                                                                  // 8799
		var ignore;                                                                                                          // 8800
                                                                                                                       // 8801
		// is there a time-range selection?                                                                                  // 8802
		if (this.isSelected && this.opt('unselectAuto')) {                                                                   // 8803
			// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element                // 8804
			ignore = this.opt('unselectCancel');                                                                                // 8805
			if (!ignore || !$(ev.target).closest(ignore).length) {                                                              // 8806
				this.unselect(ev);                                                                                                 // 8807
			}                                                                                                                   // 8808
		}                                                                                                                    // 8809
	},                                                                                                                    // 8810
                                                                                                                       // 8811
                                                                                                                       // 8812
	processEventUnselect: function(ev) {                                                                                  // 8813
		if (this.selectedEvent) {                                                                                            // 8814
			if (!$(ev.target).closest('.fc-selected').length) {                                                                 // 8815
				this.unselectEvent();                                                                                              // 8816
			}                                                                                                                   // 8817
		}                                                                                                                    // 8818
	},                                                                                                                    // 8819
                                                                                                                       // 8820
                                                                                                                       // 8821
	/* Day Click                                                                                                          // 8822
	------------------------------------------------------------------------------------------------------------------*/  // 8823
                                                                                                                       // 8824
                                                                                                                       // 8825
	// Triggers handlers to 'dayClick'                                                                                    // 8826
	// Span has start/end of the clicked area. Only the start is useful.                                                  // 8827
	triggerDayClick: function(span, dayEl, ev) {                                                                          // 8828
		this.trigger(                                                                                                        // 8829
			'dayClick',                                                                                                         // 8830
			dayEl,                                                                                                              // 8831
			this.calendar.applyTimezone(span.start), // convert to calendar's timezone for external API                         // 8832
			ev                                                                                                                  // 8833
		);                                                                                                                   // 8834
	},                                                                                                                    // 8835
                                                                                                                       // 8836
                                                                                                                       // 8837
	/* Date Utils                                                                                                         // 8838
	------------------------------------------------------------------------------------------------------------------*/  // 8839
                                                                                                                       // 8840
                                                                                                                       // 8841
	// Initializes internal variables related to calculating hidden days-of-week                                          // 8842
	initHiddenDays: function() {                                                                                          // 8843
		var hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden                       // 8844
		var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)                        // 8845
		var dayCnt = 0;                                                                                                      // 8846
		var i;                                                                                                               // 8847
                                                                                                                       // 8848
		if (this.opt('weekends') === false) {                                                                                // 8849
			hiddenDays.push(0, 6); // 0=sunday, 6=saturday                                                                      // 8850
		}                                                                                                                    // 8851
                                                                                                                       // 8852
		for (i = 0; i < 7; i++) {                                                                                            // 8853
			if (                                                                                                                // 8854
				!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)                                                            // 8855
			) {                                                                                                                 // 8856
				dayCnt++;                                                                                                          // 8857
			}                                                                                                                   // 8858
		}                                                                                                                    // 8859
                                                                                                                       // 8860
		if (!dayCnt) {                                                                                                       // 8861
			throw 'invalid hiddenDays'; // all days were hidden? bad.                                                           // 8862
		}                                                                                                                    // 8863
                                                                                                                       // 8864
		this.isHiddenDayHash = isHiddenDayHash;                                                                              // 8865
	},                                                                                                                    // 8866
                                                                                                                       // 8867
                                                                                                                       // 8868
	// Is the current day hidden?                                                                                         // 8869
	// `day` is a day-of-week index (0-6), or a Moment                                                                    // 8870
	isHiddenDay: function(day) {                                                                                          // 8871
		if (moment.isMoment(day)) {                                                                                          // 8872
			day = day.day();                                                                                                    // 8873
		}                                                                                                                    // 8874
		return this.isHiddenDayHash[day];                                                                                    // 8875
	},                                                                                                                    // 8876
                                                                                                                       // 8877
                                                                                                                       // 8878
	// Incrementing the current day until it is no longer a hidden day, returning a copy.                                 // 8879
	// If the initial value of `date` is not a hidden day, don't do anything.                                             // 8880
	// Pass `isExclusive` as `true` if you are dealing with an end date.                                                  // 8881
	// `inc` defaults to `1` (increment one day forward each time)                                                        // 8882
	skipHiddenDays: function(date, inc, isExclusive) {                                                                    // 8883
		var out = date.clone();                                                                                              // 8884
		inc = inc || 1;                                                                                                      // 8885
		while (                                                                                                              // 8886
			this.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]                                                 // 8887
		) {                                                                                                                  // 8888
			out.add(inc, 'days');                                                                                               // 8889
		}                                                                                                                    // 8890
		return out;                                                                                                          // 8891
	},                                                                                                                    // 8892
                                                                                                                       // 8893
                                                                                                                       // 8894
	// Returns the date range of the full days the given range visually appears to occupy.                                // 8895
	// Returns a new range object.                                                                                        // 8896
	computeDayRange: function(range) {                                                                                    // 8897
		var startDay = range.start.clone().stripTime(); // the beginning of the day the range starts                         // 8898
		var end = range.end;                                                                                                 // 8899
		var endDay = null;                                                                                                   // 8900
		var endTimeMS;                                                                                                       // 8901
                                                                                                                       // 8902
		if (end) {                                                                                                           // 8903
			endDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends                            // 8904
			endTimeMS = +end.time(); // # of milliseconds into `endDay`                                                         // 8905
                                                                                                                       // 8906
			// If the end time is actually inclusively part of the next day and is equal to or                                  // 8907
			// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.                               // 8908
			// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.                                            // 8909
			if (endTimeMS && endTimeMS >= this.nextDayThreshold) {                                                              // 8910
				endDay.add(1, 'days');                                                                                             // 8911
			}                                                                                                                   // 8912
		}                                                                                                                    // 8913
                                                                                                                       // 8914
		// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,                             // 8915
		// assign the default duration of one day.                                                                           // 8916
		if (!end || endDay <= startDay) {                                                                                    // 8917
			endDay = startDay.clone().add(1, 'days');                                                                           // 8918
		}                                                                                                                    // 8919
                                                                                                                       // 8920
		return { start: startDay, end: endDay };                                                                             // 8921
	},                                                                                                                    // 8922
                                                                                                                       // 8923
                                                                                                                       // 8924
	// Does the given event visually appear to occupy more than one day?                                                  // 8925
	isMultiDayEvent: function(event) {                                                                                    // 8926
		var range = this.computeDayRange(event); // event is range-ish                                                       // 8927
                                                                                                                       // 8928
		return range.end.diff(range.start, 'days') > 1;                                                                      // 8929
	}                                                                                                                     // 8930
                                                                                                                       // 8931
});                                                                                                                    // 8932
                                                                                                                       // 8933
;;                                                                                                                     // 8934
                                                                                                                       // 8935
/*                                                                                                                     // 8936
Embodies a div that has potential scrollbars                                                                           // 8937
*/                                                                                                                     // 8938
var Scroller = FC.Scroller = Class.extend({                                                                            // 8939
                                                                                                                       // 8940
	el: null, // the guaranteed outer element                                                                             // 8941
	scrollEl: null, // the element with the scrollbars                                                                    // 8942
	overflowX: null,                                                                                                      // 8943
	overflowY: null,                                                                                                      // 8944
                                                                                                                       // 8945
                                                                                                                       // 8946
	constructor: function(options) {                                                                                      // 8947
		options = options || {};                                                                                             // 8948
		this.overflowX = options.overflowX || options.overflow || 'auto';                                                    // 8949
		this.overflowY = options.overflowY || options.overflow || 'auto';                                                    // 8950
	},                                                                                                                    // 8951
                                                                                                                       // 8952
                                                                                                                       // 8953
	render: function() {                                                                                                  // 8954
		this.el = this.renderEl();                                                                                           // 8955
		this.applyOverflow();                                                                                                // 8956
	},                                                                                                                    // 8957
                                                                                                                       // 8958
                                                                                                                       // 8959
	renderEl: function() {                                                                                                // 8960
		return (this.scrollEl = $('<div class="fc-scroller"></div>'));                                                       // 8961
	},                                                                                                                    // 8962
                                                                                                                       // 8963
                                                                                                                       // 8964
	// sets to natural height, unlocks overflow                                                                           // 8965
	clear: function() {                                                                                                   // 8966
		this.setHeight('auto');                                                                                              // 8967
		this.applyOverflow();                                                                                                // 8968
	},                                                                                                                    // 8969
                                                                                                                       // 8970
                                                                                                                       // 8971
	destroy: function() {                                                                                                 // 8972
		this.el.remove();                                                                                                    // 8973
	},                                                                                                                    // 8974
                                                                                                                       // 8975
                                                                                                                       // 8976
	// Overflow                                                                                                           // 8977
	// -----------------------------------------------------------------------------------------------------------------  // 8978
                                                                                                                       // 8979
                                                                                                                       // 8980
	applyOverflow: function() {                                                                                           // 8981
		this.scrollEl.css({                                                                                                  // 8982
			'overflow-x': this.overflowX,                                                                                       // 8983
			'overflow-y': this.overflowY                                                                                        // 8984
		});                                                                                                                  // 8985
	},                                                                                                                    // 8986
                                                                                                                       // 8987
                                                                                                                       // 8988
	// Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.                                             // 8989
	// Useful for preserving scrollbar widths regardless of future resizes.                                               // 8990
	// Can pass in scrollbarWidths for optimization.                                                                      // 8991
	lockOverflow: function(scrollbarWidths) {                                                                             // 8992
		var overflowX = this.overflowX;                                                                                      // 8993
		var overflowY = this.overflowY;                                                                                      // 8994
                                                                                                                       // 8995
		scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();                                                      // 8996
                                                                                                                       // 8997
		if (overflowX === 'auto') {                                                                                          // 8998
			overflowX = (                                                                                                       // 8999
					scrollbarWidths.top || scrollbarWidths.bottom || // horizontal scrollbars?                                        // 9000
					// OR scrolling pane with massless scrollbars?                                                                    // 9001
					this.scrollEl[0].scrollWidth - 1 > this.scrollEl[0].clientWidth                                                   // 9002
						// subtract 1 because of IE off-by-one issue                                                                     // 9003
				) ? 'scroll' : 'hidden';                                                                                           // 9004
		}                                                                                                                    // 9005
                                                                                                                       // 9006
		if (overflowY === 'auto') {                                                                                          // 9007
			overflowY = (                                                                                                       // 9008
					scrollbarWidths.left || scrollbarWidths.right || // vertical scrollbars?                                          // 9009
					// OR scrolling pane with massless scrollbars?                                                                    // 9010
					this.scrollEl[0].scrollHeight - 1 > this.scrollEl[0].clientHeight                                                 // 9011
						// subtract 1 because of IE off-by-one issue                                                                     // 9012
				) ? 'scroll' : 'hidden';                                                                                           // 9013
		}                                                                                                                    // 9014
                                                                                                                       // 9015
		this.scrollEl.css({ 'overflow-x': overflowX, 'overflow-y': overflowY });                                             // 9016
	},                                                                                                                    // 9017
                                                                                                                       // 9018
                                                                                                                       // 9019
	// Getters / Setters                                                                                                  // 9020
	// -----------------------------------------------------------------------------------------------------------------  // 9021
                                                                                                                       // 9022
                                                                                                                       // 9023
	setHeight: function(height) {                                                                                         // 9024
		this.scrollEl.height(height);                                                                                        // 9025
	},                                                                                                                    // 9026
                                                                                                                       // 9027
                                                                                                                       // 9028
	getScrollTop: function() {                                                                                            // 9029
		return this.scrollEl.scrollTop();                                                                                    // 9030
	},                                                                                                                    // 9031
                                                                                                                       // 9032
                                                                                                                       // 9033
	setScrollTop: function(top) {                                                                                         // 9034
		this.scrollEl.scrollTop(top);                                                                                        // 9035
	},                                                                                                                    // 9036
                                                                                                                       // 9037
                                                                                                                       // 9038
	getClientWidth: function() {                                                                                          // 9039
		return this.scrollEl[0].clientWidth;                                                                                 // 9040
	},                                                                                                                    // 9041
                                                                                                                       // 9042
                                                                                                                       // 9043
	getClientHeight: function() {                                                                                         // 9044
		return this.scrollEl[0].clientHeight;                                                                                // 9045
	},                                                                                                                    // 9046
                                                                                                                       // 9047
                                                                                                                       // 9048
	getScrollbarWidths: function() {                                                                                      // 9049
		return getScrollbarWidths(this.scrollEl);                                                                            // 9050
	}                                                                                                                     // 9051
                                                                                                                       // 9052
});                                                                                                                    // 9053
                                                                                                                       // 9054
;;                                                                                                                     // 9055
                                                                                                                       // 9056
var Calendar = FC.Calendar = Class.extend({                                                                            // 9057
                                                                                                                       // 9058
	dirDefaults: null, // option defaults related to LTR or RTL                                                           // 9059
	langDefaults: null, // option defaults related to current locale                                                      // 9060
	overrides: null, // option overrides given to the fullCalendar constructor                                            // 9061
	options: null, // all defaults combined with overrides                                                                // 9062
	viewSpecCache: null, // cache of view definitions                                                                     // 9063
	view: null, // current View object                                                                                    // 9064
	header: null,                                                                                                         // 9065
	loadingLevel: 0, // number of simultaneous loading tasks                                                              // 9066
                                                                                                                       // 9067
                                                                                                                       // 9068
	// a lot of this class' OOP logic is scoped within this constructor function,                                         // 9069
	// but in the future, write individual methods on the prototype.                                                      // 9070
	constructor: Calendar_constructor,                                                                                    // 9071
                                                                                                                       // 9072
                                                                                                                       // 9073
	// Subclasses can override this for initialization logic after the constructor has been called                        // 9074
	initialize: function() {                                                                                              // 9075
	},                                                                                                                    // 9076
                                                                                                                       // 9077
                                                                                                                       // 9078
	// Initializes `this.options` and other important options-related objects                                             // 9079
	initOptions: function(overrides) {                                                                                    // 9080
		var lang, langDefaults;                                                                                              // 9081
		var isRTL, dirDefaults;                                                                                              // 9082
                                                                                                                       // 9083
		// converts legacy options into non-legacy ones.                                                                     // 9084
		// in the future, when this is removed, don't use `overrides` reference. make a copy.                                // 9085
		overrides = massageOverrides(overrides);                                                                             // 9086
                                                                                                                       // 9087
		lang = overrides.lang;                                                                                               // 9088
		langDefaults = langOptionHash[lang];                                                                                 // 9089
		if (!langDefaults) {                                                                                                 // 9090
			lang = Calendar.defaults.lang;                                                                                      // 9091
			langDefaults = langOptionHash[lang] || {};                                                                          // 9092
		}                                                                                                                    // 9093
                                                                                                                       // 9094
		isRTL = firstDefined(                                                                                                // 9095
			overrides.isRTL,                                                                                                    // 9096
			langDefaults.isRTL,                                                                                                 // 9097
			Calendar.defaults.isRTL                                                                                             // 9098
		);                                                                                                                   // 9099
		dirDefaults = isRTL ? Calendar.rtlDefaults : {};                                                                     // 9100
                                                                                                                       // 9101
		this.dirDefaults = dirDefaults;                                                                                      // 9102
		this.langDefaults = langDefaults;                                                                                    // 9103
		this.overrides = overrides;                                                                                          // 9104
		this.options = mergeOptions([ // merge defaults and overrides. lowest to highest precedence                          // 9105
			Calendar.defaults, // global defaults                                                                               // 9106
			dirDefaults,                                                                                                        // 9107
			langDefaults,                                                                                                       // 9108
			overrides                                                                                                           // 9109
		]);                                                                                                                  // 9110
		populateInstanceComputableOptions(this.options);                                                                     // 9111
                                                                                                                       // 9112
		this.viewSpecCache = {}; // somewhat unrelated                                                                       // 9113
	},                                                                                                                    // 9114
                                                                                                                       // 9115
                                                                                                                       // 9116
	// Gets information about how to create a view. Will use a cache.                                                     // 9117
	getViewSpec: function(viewType) {                                                                                     // 9118
		var cache = this.viewSpecCache;                                                                                      // 9119
                                                                                                                       // 9120
		return cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));                                          // 9121
	},                                                                                                                    // 9122
                                                                                                                       // 9123
                                                                                                                       // 9124
	// Given a duration singular unit, like "week" or "day", finds a matching view spec.                                  // 9125
	// Preference is given to views that have corresponding buttons.                                                      // 9126
	getUnitViewSpec: function(unit) {                                                                                     // 9127
		var viewTypes;                                                                                                       // 9128
		var i;                                                                                                               // 9129
		var spec;                                                                                                            // 9130
                                                                                                                       // 9131
		if ($.inArray(unit, intervalUnits) != -1) {                                                                          // 9132
                                                                                                                       // 9133
			// put views that have buttons first. there will be duplicates, but oh well                                         // 9134
			viewTypes = this.header.getViewsWithButtons();                                                                      // 9135
			$.each(FC.views, function(viewType) { // all views                                                                  // 9136
				viewTypes.push(viewType);                                                                                          // 9137
			});                                                                                                                 // 9138
                                                                                                                       // 9139
			for (i = 0; i < viewTypes.length; i++) {                                                                            // 9140
				spec = this.getViewSpec(viewTypes[i]);                                                                             // 9141
				if (spec) {                                                                                                        // 9142
					if (spec.singleUnit == unit) {                                                                                    // 9143
						return spec;                                                                                                     // 9144
					}                                                                                                                 // 9145
				}                                                                                                                  // 9146
			}                                                                                                                   // 9147
		}                                                                                                                    // 9148
	},                                                                                                                    // 9149
                                                                                                                       // 9150
                                                                                                                       // 9151
	// Builds an object with information on how to create a given view                                                    // 9152
	buildViewSpec: function(requestedViewType) {                                                                          // 9153
		var viewOverrides = this.overrides.views || {};                                                                      // 9154
		var specChain = []; // for the view. lowest to highest priority                                                      // 9155
		var defaultsChain = []; // for the view. lowest to highest priority                                                  // 9156
		var overridesChain = []; // for the view. lowest to highest priority                                                 // 9157
		var viewType = requestedViewType;                                                                                    // 9158
		var spec; // for the view                                                                                            // 9159
		var overrides; // for the view                                                                                       // 9160
		var duration;                                                                                                        // 9161
		var unit;                                                                                                            // 9162
                                                                                                                       // 9163
		// iterate from the specific view definition to a more general one until we hit an actual View class                 // 9164
		while (viewType) {                                                                                                   // 9165
			spec = fcViews[viewType];                                                                                           // 9166
			overrides = viewOverrides[viewType];                                                                                // 9167
			viewType = null; // clear. might repopulate for another iteration                                                   // 9168
                                                                                                                       // 9169
			if (typeof spec === 'function') { // TODO: deprecate                                                                // 9170
				spec = { 'class': spec };                                                                                          // 9171
			}                                                                                                                   // 9172
                                                                                                                       // 9173
			if (spec) {                                                                                                         // 9174
				specChain.unshift(spec);                                                                                           // 9175
				defaultsChain.unshift(spec.defaults || {});                                                                        // 9176
				duration = duration || spec.duration;                                                                              // 9177
				viewType = viewType || spec.type;                                                                                  // 9178
			}                                                                                                                   // 9179
                                                                                                                       // 9180
			if (overrides) {                                                                                                    // 9181
				overridesChain.unshift(overrides); // view-specific option hashes have options at zero-level                       // 9182
				duration = duration || overrides.duration;                                                                         // 9183
				viewType = viewType || overrides.type;                                                                             // 9184
			}                                                                                                                   // 9185
		}                                                                                                                    // 9186
                                                                                                                       // 9187
		spec = mergeProps(specChain);                                                                                        // 9188
		spec.type = requestedViewType;                                                                                       // 9189
		if (!spec['class']) {                                                                                                // 9190
			return false;                                                                                                       // 9191
		}                                                                                                                    // 9192
                                                                                                                       // 9193
		if (duration) {                                                                                                      // 9194
			duration = moment.duration(duration);                                                                               // 9195
			if (duration.valueOf()) { // valid?                                                                                 // 9196
				spec.duration = duration;                                                                                          // 9197
				unit = computeIntervalUnit(duration);                                                                              // 9198
                                                                                                                       // 9199
				// view is a single-unit duration, like "week" or "day"                                                            // 9200
				// incorporate options for this. lowest priority                                                                   // 9201
				if (duration.as(unit) === 1) {                                                                                     // 9202
					spec.singleUnit = unit;                                                                                           // 9203
					overridesChain.unshift(viewOverrides[unit] || {});                                                                // 9204
				}                                                                                                                  // 9205
			}                                                                                                                   // 9206
		}                                                                                                                    // 9207
                                                                                                                       // 9208
		spec.defaults = mergeOptions(defaultsChain);                                                                         // 9209
		spec.overrides = mergeOptions(overridesChain);                                                                       // 9210
                                                                                                                       // 9211
		this.buildViewSpecOptions(spec);                                                                                     // 9212
		this.buildViewSpecButtonText(spec, requestedViewType);                                                               // 9213
                                                                                                                       // 9214
		return spec;                                                                                                         // 9215
	},                                                                                                                    // 9216
                                                                                                                       // 9217
                                                                                                                       // 9218
	// Builds and assigns a view spec's options object from its already-assigned defaults and overrides                   // 9219
	buildViewSpecOptions: function(spec) {                                                                                // 9220
		spec.options = mergeOptions([ // lowest to highest priority                                                          // 9221
			Calendar.defaults, // global defaults                                                                               // 9222
			spec.defaults, // view's defaults (from ViewSubclass.defaults)                                                      // 9223
			this.dirDefaults,                                                                                                   // 9224
			this.langDefaults, // locale and dir take precedence over view's defaults!                                          // 9225
			this.overrides, // calendar's overrides (options given to constructor)                                              // 9226
			spec.overrides // view's overrides (view-specific options)                                                          // 9227
		]);                                                                                                                  // 9228
		populateInstanceComputableOptions(spec.options);                                                                     // 9229
	},                                                                                                                    // 9230
                                                                                                                       // 9231
                                                                                                                       // 9232
	// Computes and assigns a view spec's buttonText-related options                                                      // 9233
	buildViewSpecButtonText: function(spec, requestedViewType) {                                                          // 9234
                                                                                                                       // 9235
		// given an options object with a possible `buttonText` hash, lookup the buttonText for the                          // 9236
		// requested view, falling back to a generic unit entry like "week" or "day"                                         // 9237
		function queryButtonText(options) {                                                                                  // 9238
			var buttonText = options.buttonText || {};                                                                          // 9239
			return buttonText[requestedViewType] ||                                                                             // 9240
				(spec.singleUnit ? buttonText[spec.singleUnit] : null);                                                            // 9241
		}                                                                                                                    // 9242
                                                                                                                       // 9243
		// highest to lowest priority                                                                                        // 9244
		spec.buttonTextOverride =                                                                                            // 9245
			queryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence                 // 9246
			spec.overrides.buttonText; // `buttonText` for view-specific options is a string                                    // 9247
                                                                                                                       // 9248
		// highest to lowest priority. mirrors buildViewSpecOptions                                                          // 9249
		spec.buttonTextDefault =                                                                                             // 9250
			queryButtonText(this.langDefaults) ||                                                                               // 9251
			queryButtonText(this.dirDefaults) ||                                                                                // 9252
			spec.defaults.buttonText || // a single string. from ViewSubclass.defaults                                          // 9253
			queryButtonText(Calendar.defaults) ||                                                                               // 9254
			(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like "3 days"                                   // 9255
			requestedViewType; // fall back to given view name                                                                  // 9256
	},                                                                                                                    // 9257
                                                                                                                       // 9258
                                                                                                                       // 9259
	// Given a view name for a custom view or a standard view, creates a ready-to-go View object                          // 9260
	instantiateView: function(viewType) {                                                                                 // 9261
		var spec = this.getViewSpec(viewType);                                                                               // 9262
                                                                                                                       // 9263
		return new spec['class'](this, viewType, spec.options, spec.duration);                                               // 9264
	},                                                                                                                    // 9265
                                                                                                                       // 9266
                                                                                                                       // 9267
	// Returns a boolean about whether the view is okay to instantiate at some point                                      // 9268
	isValidViewType: function(viewType) {                                                                                 // 9269
		return Boolean(this.getViewSpec(viewType));                                                                          // 9270
	},                                                                                                                    // 9271
                                                                                                                       // 9272
                                                                                                                       // 9273
	// Should be called when any type of async data fetching begins                                                       // 9274
	pushLoading: function() {                                                                                             // 9275
		if (!(this.loadingLevel++)) {                                                                                        // 9276
			this.trigger('loading', null, true, this.view);                                                                     // 9277
		}                                                                                                                    // 9278
	},                                                                                                                    // 9279
                                                                                                                       // 9280
                                                                                                                       // 9281
	// Should be called when any type of async data fetching completes                                                    // 9282
	popLoading: function() {                                                                                              // 9283
		if (!(--this.loadingLevel)) {                                                                                        // 9284
			this.trigger('loading', null, false, this.view);                                                                    // 9285
		}                                                                                                                    // 9286
	},                                                                                                                    // 9287
                                                                                                                       // 9288
                                                                                                                       // 9289
	// Given arguments to the select method in the API, returns a span (unzoned start/end and other info)                 // 9290
	buildSelectSpan: function(zonedStartInput, zonedEndInput) {                                                           // 9291
		var start = this.moment(zonedStartInput).stripZone();                                                                // 9292
		var end;                                                                                                             // 9293
                                                                                                                       // 9294
		if (zonedEndInput) {                                                                                                 // 9295
			end = this.moment(zonedEndInput).stripZone();                                                                       // 9296
		}                                                                                                                    // 9297
		else if (start.hasTime()) {                                                                                          // 9298
			end = start.clone().add(this.defaultTimedEventDuration);                                                            // 9299
		}                                                                                                                    // 9300
		else {                                                                                                               // 9301
			end = start.clone().add(this.defaultAllDayEventDuration);                                                           // 9302
		}                                                                                                                    // 9303
                                                                                                                       // 9304
		return { start: start, end: end };                                                                                   // 9305
	}                                                                                                                     // 9306
                                                                                                                       // 9307
});                                                                                                                    // 9308
                                                                                                                       // 9309
                                                                                                                       // 9310
Calendar.mixin(EmitterMixin);                                                                                          // 9311
                                                                                                                       // 9312
                                                                                                                       // 9313
function Calendar_constructor(element, overrides) {                                                                    // 9314
	var t = this;                                                                                                         // 9315
                                                                                                                       // 9316
                                                                                                                       // 9317
	t.initOptions(overrides || {});                                                                                       // 9318
	var options = this.options;                                                                                           // 9319
                                                                                                                       // 9320
	                                                                                                                      // 9321
	// Exports                                                                                                            // 9322
	// -----------------------------------------------------------------------------------                                // 9323
                                                                                                                       // 9324
	t.render = render;                                                                                                    // 9325
	t.destroy = destroy;                                                                                                  // 9326
	t.refetchEvents = refetchEvents;                                                                                      // 9327
	t.reportEvents = reportEvents;                                                                                        // 9328
	t.reportEventChange = reportEventChange;                                                                              // 9329
	t.rerenderEvents = renderEvents; // `renderEvents` serves as a rerender. an API method                                // 9330
	t.changeView = renderView; // `renderView` will switch to another view                                                // 9331
	t.select = select;                                                                                                    // 9332
	t.unselect = unselect;                                                                                                // 9333
	t.prev = prev;                                                                                                        // 9334
	t.next = next;                                                                                                        // 9335
	t.prevYear = prevYear;                                                                                                // 9336
	t.nextYear = nextYear;                                                                                                // 9337
	t.today = today;                                                                                                      // 9338
	t.gotoDate = gotoDate;                                                                                                // 9339
	t.incrementDate = incrementDate;                                                                                      // 9340
	t.zoomTo = zoomTo;                                                                                                    // 9341
	t.getDate = getDate;                                                                                                  // 9342
	t.getCalendar = getCalendar;                                                                                          // 9343
	t.getView = getView;                                                                                                  // 9344
	t.option = option;                                                                                                    // 9345
	t.trigger = trigger;                                                                                                  // 9346
                                                                                                                       // 9347
                                                                                                                       // 9348
                                                                                                                       // 9349
	// Language-data Internals                                                                                            // 9350
	// -----------------------------------------------------------------------------------                                // 9351
	// Apply overrides to the current language's data                                                                     // 9352
                                                                                                                       // 9353
                                                                                                                       // 9354
	var localeData = createObject( // make a cheap copy                                                                   // 9355
		getMomentLocaleData(options.lang) // will fall back to en                                                            // 9356
	);                                                                                                                    // 9357
                                                                                                                       // 9358
	if (options.monthNames) {                                                                                             // 9359
		localeData._months = options.monthNames;                                                                             // 9360
	}                                                                                                                     // 9361
	if (options.monthNamesShort) {                                                                                        // 9362
		localeData._monthsShort = options.monthNamesShort;                                                                   // 9363
	}                                                                                                                     // 9364
	if (options.dayNames) {                                                                                               // 9365
		localeData._weekdays = options.dayNames;                                                                             // 9366
	}                                                                                                                     // 9367
	if (options.dayNamesShort) {                                                                                          // 9368
		localeData._weekdaysShort = options.dayNamesShort;                                                                   // 9369
	}                                                                                                                     // 9370
	if (options.firstDay != null) {                                                                                       // 9371
		var _week = createObject(localeData._week); // _week: { dow: # }                                                     // 9372
		_week.dow = options.firstDay;                                                                                        // 9373
		localeData._week = _week;                                                                                            // 9374
	}                                                                                                                     // 9375
                                                                                                                       // 9376
	// assign a normalized value, to be used by our .week() moment extension                                              // 9377
	localeData._fullCalendar_weekCalc = (function(weekCalc) {                                                             // 9378
		if (typeof weekCalc === 'function') {                                                                                // 9379
			return weekCalc;                                                                                                    // 9380
		}                                                                                                                    // 9381
		else if (weekCalc === 'local') {                                                                                     // 9382
			return weekCalc;                                                                                                    // 9383
		}                                                                                                                    // 9384
		else if (weekCalc === 'iso' || weekCalc === 'ISO') {                                                                 // 9385
			return 'ISO';                                                                                                       // 9386
		}                                                                                                                    // 9387
	})(options.weekNumberCalculation);                                                                                    // 9388
                                                                                                                       // 9389
                                                                                                                       // 9390
                                                                                                                       // 9391
	// Calendar-specific Date Utilities                                                                                   // 9392
	// -----------------------------------------------------------------------------------                                // 9393
                                                                                                                       // 9394
                                                                                                                       // 9395
	t.defaultAllDayEventDuration = moment.duration(options.defaultAllDayEventDuration);                                   // 9396
	t.defaultTimedEventDuration = moment.duration(options.defaultTimedEventDuration);                                     // 9397
                                                                                                                       // 9398
                                                                                                                       // 9399
	// Builds a moment using the settings of the current calendar: timezone and language.                                 // 9400
	// Accepts anything the vanilla moment() constructor accepts.                                                         // 9401
	t.moment = function() {                                                                                               // 9402
		var mom;                                                                                                             // 9403
                                                                                                                       // 9404
		if (options.timezone === 'local') {                                                                                  // 9405
			mom = FC.moment.apply(null, arguments);                                                                             // 9406
                                                                                                                       // 9407
			// Force the moment to be local, because FC.moment doesn't guarantee it.                                            // 9408
			if (mom.hasTime()) { // don't give ambiguously-timed moments a local zone                                           // 9409
				mom.local();                                                                                                       // 9410
			}                                                                                                                   // 9411
		}                                                                                                                    // 9412
		else if (options.timezone === 'UTC') {                                                                               // 9413
			mom = FC.moment.utc.apply(null, arguments); // process as UTC                                                       // 9414
		}                                                                                                                    // 9415
		else {                                                                                                               // 9416
			mom = FC.moment.parseZone.apply(null, arguments); // let the input decide the zone                                  // 9417
		}                                                                                                                    // 9418
                                                                                                                       // 9419
		if ('_locale' in mom) { // moment 2.8 and above                                                                      // 9420
			mom._locale = localeData;                                                                                           // 9421
		}                                                                                                                    // 9422
		else { // pre-moment-2.8                                                                                             // 9423
			mom._lang = localeData;                                                                                             // 9424
		}                                                                                                                    // 9425
                                                                                                                       // 9426
		return mom;                                                                                                          // 9427
	};                                                                                                                    // 9428
                                                                                                                       // 9429
                                                                                                                       // 9430
	// Returns a boolean about whether or not the calendar knows how to calculate                                         // 9431
	// the timezone offset of arbitrary dates in the current timezone.                                                    // 9432
	t.getIsAmbigTimezone = function() {                                                                                   // 9433
		return options.timezone !== 'local' && options.timezone !== 'UTC';                                                   // 9434
	};                                                                                                                    // 9435
                                                                                                                       // 9436
                                                                                                                       // 9437
	// Returns a copy of the given date in the current timezone. Has no effect on dates without times.                    // 9438
	t.applyTimezone = function(date) {                                                                                    // 9439
		if (!date.hasTime()) {                                                                                               // 9440
			return date.clone();                                                                                                // 9441
		}                                                                                                                    // 9442
                                                                                                                       // 9443
		var zonedDate = t.moment(date.toArray());                                                                            // 9444
		var timeAdjust = date.time() - zonedDate.time();                                                                     // 9445
		var adjustedZonedDate;                                                                                               // 9446
                                                                                                                       // 9447
		// Safari sometimes has problems with this coersion when near DST. Adjust if necessary. (bug #2396)                  // 9448
		if (timeAdjust) { // is the time result different than expected?                                                     // 9449
			adjustedZonedDate = zonedDate.clone().add(timeAdjust); // add milliseconds                                          // 9450
			if (date.time() - adjustedZonedDate.time() === 0) { // does it match perfectly now?                                 // 9451
				zonedDate = adjustedZonedDate;                                                                                     // 9452
			}                                                                                                                   // 9453
		}                                                                                                                    // 9454
                                                                                                                       // 9455
		return zonedDate;                                                                                                    // 9456
	};                                                                                                                    // 9457
                                                                                                                       // 9458
                                                                                                                       // 9459
	// Returns a moment for the current date, as defined by the client's computer or from the `now` option.               // 9460
	// Will return an moment with an ambiguous timezone.                                                                  // 9461
	t.getNow = function() {                                                                                               // 9462
		var now = options.now;                                                                                               // 9463
		if (typeof now === 'function') {                                                                                     // 9464
			now = now();                                                                                                        // 9465
		}                                                                                                                    // 9466
		return t.moment(now).stripZone();                                                                                    // 9467
	};                                                                                                                    // 9468
                                                                                                                       // 9469
                                                                                                                       // 9470
	// Get an event's normalized end date. If not present, calculate it from the defaults.                                // 9471
	t.getEventEnd = function(event) {                                                                                     // 9472
		if (event.end) {                                                                                                     // 9473
			return event.end.clone();                                                                                           // 9474
		}                                                                                                                    // 9475
		else {                                                                                                               // 9476
			return t.getDefaultEventEnd(event.allDay, event.start);                                                             // 9477
		}                                                                                                                    // 9478
	};                                                                                                                    // 9479
                                                                                                                       // 9480
                                                                                                                       // 9481
	// Given an event's allDay status and start date, return what its fallback end date should be.                        // 9482
	// TODO: rename to computeDefaultEventEnd                                                                             // 9483
	t.getDefaultEventEnd = function(allDay, zonedStart) {                                                                 // 9484
		var end = zonedStart.clone();                                                                                        // 9485
                                                                                                                       // 9486
		if (allDay) {                                                                                                        // 9487
			end.stripTime().add(t.defaultAllDayEventDuration);                                                                  // 9488
		}                                                                                                                    // 9489
		else {                                                                                                               // 9490
			end.add(t.defaultTimedEventDuration);                                                                               // 9491
		}                                                                                                                    // 9492
                                                                                                                       // 9493
		if (t.getIsAmbigTimezone()) {                                                                                        // 9494
			end.stripZone(); // we don't know what the tzo should be                                                            // 9495
		}                                                                                                                    // 9496
                                                                                                                       // 9497
		return end;                                                                                                          // 9498
	};                                                                                                                    // 9499
                                                                                                                       // 9500
                                                                                                                       // 9501
	// Produces a human-readable string for the given duration.                                                           // 9502
	// Side-effect: changes the locale of the given duration.                                                             // 9503
	t.humanizeDuration = function(duration) {                                                                             // 9504
		return (duration.locale || duration.lang).call(duration, options.lang) // works moment-pre-2.8                       // 9505
			.humanize();                                                                                                        // 9506
	};                                                                                                                    // 9507
                                                                                                                       // 9508
                                                                                                                       // 9509
	                                                                                                                      // 9510
	// Imports                                                                                                            // 9511
	// -----------------------------------------------------------------------------------                                // 9512
                                                                                                                       // 9513
                                                                                                                       // 9514
	EventManager.call(t, options);                                                                                        // 9515
	var isFetchNeeded = t.isFetchNeeded;                                                                                  // 9516
	var fetchEvents = t.fetchEvents;                                                                                      // 9517
                                                                                                                       // 9518
                                                                                                                       // 9519
                                                                                                                       // 9520
	// Locals                                                                                                             // 9521
	// -----------------------------------------------------------------------------------                                // 9522
                                                                                                                       // 9523
                                                                                                                       // 9524
	var _element = element[0];                                                                                            // 9525
	var header;                                                                                                           // 9526
	var headerElement;                                                                                                    // 9527
	var content;                                                                                                          // 9528
	var tm; // for making theme classes                                                                                   // 9529
	var currentView; // NOTE: keep this in sync with this.view                                                            // 9530
	var viewsByType = {}; // holds all instantiated view instances, current or not                                        // 9531
	var suggestedViewHeight;                                                                                              // 9532
	var windowResizeProxy; // wraps the windowResize function                                                             // 9533
	var ignoreWindowResize = 0;                                                                                           // 9534
	var events = [];                                                                                                      // 9535
	var date; // unzoned                                                                                                  // 9536
	                                                                                                                      // 9537
	                                                                                                                      // 9538
	                                                                                                                      // 9539
	// Main Rendering                                                                                                     // 9540
	// -----------------------------------------------------------------------------------                                // 9541
                                                                                                                       // 9542
                                                                                                                       // 9543
	// compute the initial ambig-timezone date                                                                            // 9544
	if (options.defaultDate != null) {                                                                                    // 9545
		date = t.moment(options.defaultDate).stripZone();                                                                    // 9546
	}                                                                                                                     // 9547
	else {                                                                                                                // 9548
		date = t.getNow(); // getNow already returns unzoned                                                                 // 9549
	}                                                                                                                     // 9550
	                                                                                                                      // 9551
	                                                                                                                      // 9552
	function render() {                                                                                                   // 9553
		if (!content) {                                                                                                      // 9554
			initialRender();                                                                                                    // 9555
		}                                                                                                                    // 9556
		else if (elementVisible()) {                                                                                         // 9557
			// mainly for the public API                                                                                        // 9558
			calcSize();                                                                                                         // 9559
			renderView();                                                                                                       // 9560
		}                                                                                                                    // 9561
	}                                                                                                                     // 9562
	                                                                                                                      // 9563
	                                                                                                                      // 9564
	function initialRender() {                                                                                            // 9565
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 9566
		element.addClass('fc');                                                                                              // 9567
                                                                                                                       // 9568
		if (options.isRTL) {                                                                                                 // 9569
			element.addClass('fc-rtl');                                                                                         // 9570
		}                                                                                                                    // 9571
		else {                                                                                                               // 9572
			element.addClass('fc-ltr');                                                                                         // 9573
		}                                                                                                                    // 9574
                                                                                                                       // 9575
		if (options.theme) {                                                                                                 // 9576
			element.addClass('ui-widget');                                                                                      // 9577
		}                                                                                                                    // 9578
		else {                                                                                                               // 9579
			element.addClass('fc-unthemed');                                                                                    // 9580
		}                                                                                                                    // 9581
                                                                                                                       // 9582
		content = $("<div class='fc-view-container'/>").prependTo(element);                                                  // 9583
                                                                                                                       // 9584
		header = t.header = new Header(t, options);                                                                          // 9585
		headerElement = header.render();                                                                                     // 9586
		if (headerElement) {                                                                                                 // 9587
			element.prepend(headerElement);                                                                                     // 9588
		}                                                                                                                    // 9589
                                                                                                                       // 9590
		renderView(options.defaultView);                                                                                     // 9591
                                                                                                                       // 9592
		if (options.handleWindowResize) {                                                                                    // 9593
			windowResizeProxy = debounce(windowResize, options.windowResizeDelay); // prevents rapid calls                      // 9594
			$(window).resize(windowResizeProxy);                                                                                // 9595
		}                                                                                                                    // 9596
	}                                                                                                                     // 9597
	                                                                                                                      // 9598
	                                                                                                                      // 9599
	function destroy() {                                                                                                  // 9600
                                                                                                                       // 9601
		if (currentView) {                                                                                                   // 9602
			currentView.removeElement();                                                                                        // 9603
                                                                                                                       // 9604
			// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.                            // 9605
			// It is still the "current" view, just not rendered.                                                               // 9606
		}                                                                                                                    // 9607
                                                                                                                       // 9608
		header.removeElement();                                                                                              // 9609
		content.remove();                                                                                                    // 9610
		element.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');                                                       // 9611
                                                                                                                       // 9612
		if (windowResizeProxy) {                                                                                             // 9613
			$(window).unbind('resize', windowResizeProxy);                                                                      // 9614
		}                                                                                                                    // 9615
	}                                                                                                                     // 9616
	                                                                                                                      // 9617
	                                                                                                                      // 9618
	function elementVisible() {                                                                                           // 9619
		return element.is(':visible');                                                                                       // 9620
	}                                                                                                                     // 9621
	                                                                                                                      // 9622
	                                                                                                                      // 9623
                                                                                                                       // 9624
	// View Rendering                                                                                                     // 9625
	// -----------------------------------------------------------------------------------                                // 9626
                                                                                                                       // 9627
                                                                                                                       // 9628
	// Renders a view because of a date change, view-type change, or for the first time.                                  // 9629
	// If not given a viewType, keep the current view but render different dates.                                         // 9630
	function renderView(viewType) {                                                                                       // 9631
		ignoreWindowResize++;                                                                                                // 9632
                                                                                                                       // 9633
		// if viewType is changing, remove the old view's rendering                                                          // 9634
		if (currentView && viewType && currentView.type !== viewType) {                                                      // 9635
			header.deactivateButton(currentView.type);                                                                          // 9636
			freezeContentHeight(); // prevent a scroll jump when view element is removed                                        // 9637
			currentView.removeElement();                                                                                        // 9638
			currentView = t.view = null;                                                                                        // 9639
		}                                                                                                                    // 9640
                                                                                                                       // 9641
		// if viewType changed, or the view was never created, create a fresh view                                           // 9642
		if (!currentView && viewType) {                                                                                      // 9643
			currentView = t.view =                                                                                              // 9644
				viewsByType[viewType] ||                                                                                           // 9645
				(viewsByType[viewType] = t.instantiateView(viewType));                                                             // 9646
                                                                                                                       // 9647
			currentView.setElement(                                                                                             // 9648
				$("<div class='fc-view fc-" + viewType + "-view' />").appendTo(content)                                            // 9649
			);                                                                                                                  // 9650
			header.activateButton(viewType);                                                                                    // 9651
		}                                                                                                                    // 9652
                                                                                                                       // 9653
		if (currentView) {                                                                                                   // 9654
                                                                                                                       // 9655
			// in case the view should render a period of time that is completely hidden                                        // 9656
			date = currentView.massageCurrentDate(date);                                                                        // 9657
                                                                                                                       // 9658
			// render or rerender the view                                                                                      // 9659
			if (                                                                                                                // 9660
				!currentView.displaying ||                                                                                         // 9661
				!date.isWithin(currentView.intervalStart, currentView.intervalEnd) // implicit date window change                  // 9662
			) {                                                                                                                 // 9663
				if (elementVisible()) {                                                                                            // 9664
                                                                                                                       // 9665
					currentView.display(date); // will call freezeContentHeight                                                       // 9666
					unfreezeContentHeight(); // immediately unfreeze regardless of whether display is async                           // 9667
                                                                                                                       // 9668
					// need to do this after View::render, so dates are calculated                                                    // 9669
					updateHeaderTitle();                                                                                              // 9670
					updateTodayButton();                                                                                              // 9671
                                                                                                                       // 9672
					getAndRenderEvents();                                                                                             // 9673
				}                                                                                                                  // 9674
			}                                                                                                                   // 9675
		}                                                                                                                    // 9676
                                                                                                                       // 9677
		unfreezeContentHeight(); // undo any lone freezeContentHeight calls                                                  // 9678
		ignoreWindowResize--;                                                                                                // 9679
	}                                                                                                                     // 9680
                                                                                                                       // 9681
	                                                                                                                      // 9682
                                                                                                                       // 9683
	// Resizing                                                                                                           // 9684
	// -----------------------------------------------------------------------------------                                // 9685
                                                                                                                       // 9686
                                                                                                                       // 9687
	t.getSuggestedViewHeight = function() {                                                                               // 9688
		if (suggestedViewHeight === undefined) {                                                                             // 9689
			calcSize();                                                                                                         // 9690
		}                                                                                                                    // 9691
		return suggestedViewHeight;                                                                                          // 9692
	};                                                                                                                    // 9693
                                                                                                                       // 9694
                                                                                                                       // 9695
	t.isHeightAuto = function() {                                                                                         // 9696
		return options.contentHeight === 'auto' || options.height === 'auto';                                                // 9697
	};                                                                                                                    // 9698
	                                                                                                                      // 9699
	                                                                                                                      // 9700
	function updateSize(shouldRecalc) {                                                                                   // 9701
		if (elementVisible()) {                                                                                              // 9702
                                                                                                                       // 9703
			if (shouldRecalc) {                                                                                                 // 9704
				_calcSize();                                                                                                       // 9705
			}                                                                                                                   // 9706
                                                                                                                       // 9707
			ignoreWindowResize++;                                                                                               // 9708
			currentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()               // 9709
			ignoreWindowResize--;                                                                                               // 9710
                                                                                                                       // 9711
			return true; // signal success                                                                                      // 9712
		}                                                                                                                    // 9713
	}                                                                                                                     // 9714
                                                                                                                       // 9715
                                                                                                                       // 9716
	function calcSize() {                                                                                                 // 9717
		if (elementVisible()) {                                                                                              // 9718
			_calcSize();                                                                                                        // 9719
		}                                                                                                                    // 9720
	}                                                                                                                     // 9721
	                                                                                                                      // 9722
	                                                                                                                      // 9723
	function _calcSize() { // assumes elementVisible                                                                      // 9724
		if (typeof options.contentHeight === 'number') { // exists and not 'auto'                                            // 9725
			suggestedViewHeight = options.contentHeight;                                                                        // 9726
		}                                                                                                                    // 9727
		else if (typeof options.height === 'number') { // exists and not 'auto'                                              // 9728
			suggestedViewHeight = options.height - (headerElement ? headerElement.outerHeight(true) : 0);                       // 9729
		}                                                                                                                    // 9730
		else {                                                                                                               // 9731
			suggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));                              // 9732
		}                                                                                                                    // 9733
	}                                                                                                                     // 9734
	                                                                                                                      // 9735
	                                                                                                                      // 9736
	function windowResize(ev) {                                                                                           // 9737
		if (                                                                                                                 // 9738
			!ignoreWindowResize &&                                                                                              // 9739
			ev.target === window && // so we don't process jqui "resize" events that have bubbled up                            // 9740
			currentView.start // view has already been rendered                                                                 // 9741
		) {                                                                                                                  // 9742
			if (updateSize(true)) {                                                                                             // 9743
				currentView.trigger('windowResize', _element);                                                                     // 9744
			}                                                                                                                   // 9745
		}                                                                                                                    // 9746
	}                                                                                                                     // 9747
	                                                                                                                      // 9748
	                                                                                                                      // 9749
	                                                                                                                      // 9750
	/* Event Fetching/Rendering                                                                                           // 9751
	-----------------------------------------------------------------------------*/                                       // 9752
	// TODO: going forward, most of this stuff should be directly handled by the view                                     // 9753
                                                                                                                       // 9754
                                                                                                                       // 9755
	function refetchEvents() { // can be called as an API method                                                          // 9756
		destroyEvents(); // so that events are cleared before user starts waiting for AJAX                                   // 9757
		fetchAndRenderEvents();                                                                                              // 9758
	}                                                                                                                     // 9759
                                                                                                                       // 9760
                                                                                                                       // 9761
	function renderEvents() { // destroys old events if previously rendered                                               // 9762
		if (elementVisible()) {                                                                                              // 9763
			freezeContentHeight();                                                                                              // 9764
			currentView.displayEvents(events);                                                                                  // 9765
			unfreezeContentHeight();                                                                                            // 9766
		}                                                                                                                    // 9767
	}                                                                                                                     // 9768
                                                                                                                       // 9769
                                                                                                                       // 9770
	function destroyEvents() {                                                                                            // 9771
		freezeContentHeight();                                                                                               // 9772
		currentView.clearEvents();                                                                                           // 9773
		unfreezeContentHeight();                                                                                             // 9774
	}                                                                                                                     // 9775
	                                                                                                                      // 9776
                                                                                                                       // 9777
	function getAndRenderEvents() {                                                                                       // 9778
		if (!options.lazyFetching || isFetchNeeded(currentView.start, currentView.end)) {                                    // 9779
			fetchAndRenderEvents();                                                                                             // 9780
		}                                                                                                                    // 9781
		else {                                                                                                               // 9782
			renderEvents();                                                                                                     // 9783
		}                                                                                                                    // 9784
	}                                                                                                                     // 9785
                                                                                                                       // 9786
                                                                                                                       // 9787
	function fetchAndRenderEvents() {                                                                                     // 9788
		fetchEvents(currentView.start, currentView.end);                                                                     // 9789
			// ... will call reportEvents                                                                                       // 9790
			// ... which will call renderEvents                                                                                 // 9791
	}                                                                                                                     // 9792
                                                                                                                       // 9793
	                                                                                                                      // 9794
	// called when event data arrives                                                                                     // 9795
	function reportEvents(_events) {                                                                                      // 9796
		events = _events;                                                                                                    // 9797
		renderEvents();                                                                                                      // 9798
	}                                                                                                                     // 9799
                                                                                                                       // 9800
                                                                                                                       // 9801
	// called when a single event's data has been changed                                                                 // 9802
	function reportEventChange() {                                                                                        // 9803
		renderEvents();                                                                                                      // 9804
	}                                                                                                                     // 9805
                                                                                                                       // 9806
                                                                                                                       // 9807
                                                                                                                       // 9808
	/* Header Updating                                                                                                    // 9809
	-----------------------------------------------------------------------------*/                                       // 9810
                                                                                                                       // 9811
                                                                                                                       // 9812
	function updateHeaderTitle() {                                                                                        // 9813
		header.updateTitle(currentView.title);                                                                               // 9814
	}                                                                                                                     // 9815
                                                                                                                       // 9816
                                                                                                                       // 9817
	function updateTodayButton() {                                                                                        // 9818
		var now = t.getNow();                                                                                                // 9819
		if (now.isWithin(currentView.intervalStart, currentView.intervalEnd)) {                                              // 9820
			header.disableButton('today');                                                                                      // 9821
		}                                                                                                                    // 9822
		else {                                                                                                               // 9823
			header.enableButton('today');                                                                                       // 9824
		}                                                                                                                    // 9825
	}                                                                                                                     // 9826
	                                                                                                                      // 9827
                                                                                                                       // 9828
                                                                                                                       // 9829
	/* Selection                                                                                                          // 9830
	-----------------------------------------------------------------------------*/                                       // 9831
	                                                                                                                      // 9832
                                                                                                                       // 9833
	// this public method receives start/end dates in any format, with any timezone                                       // 9834
	function select(zonedStartInput, zonedEndInput) {                                                                     // 9835
		currentView.select(                                                                                                  // 9836
			t.buildSelectSpan.apply(t, arguments)                                                                               // 9837
		);                                                                                                                   // 9838
	}                                                                                                                     // 9839
	                                                                                                                      // 9840
                                                                                                                       // 9841
	function unselect() { // safe to be called before renderView                                                          // 9842
		if (currentView) {                                                                                                   // 9843
			currentView.unselect();                                                                                             // 9844
		}                                                                                                                    // 9845
	}                                                                                                                     // 9846
	                                                                                                                      // 9847
	                                                                                                                      // 9848
	                                                                                                                      // 9849
	/* Date                                                                                                               // 9850
	-----------------------------------------------------------------------------*/                                       // 9851
	                                                                                                                      // 9852
	                                                                                                                      // 9853
	function prev() {                                                                                                     // 9854
		date = currentView.computePrevDate(date);                                                                            // 9855
		renderView();                                                                                                        // 9856
	}                                                                                                                     // 9857
	                                                                                                                      // 9858
	                                                                                                                      // 9859
	function next() {                                                                                                     // 9860
		date = currentView.computeNextDate(date);                                                                            // 9861
		renderView();                                                                                                        // 9862
	}                                                                                                                     // 9863
	                                                                                                                      // 9864
	                                                                                                                      // 9865
	function prevYear() {                                                                                                 // 9866
		date.add(-1, 'years');                                                                                               // 9867
		renderView();                                                                                                        // 9868
	}                                                                                                                     // 9869
	                                                                                                                      // 9870
	                                                                                                                      // 9871
	function nextYear() {                                                                                                 // 9872
		date.add(1, 'years');                                                                                                // 9873
		renderView();                                                                                                        // 9874
	}                                                                                                                     // 9875
	                                                                                                                      // 9876
	                                                                                                                      // 9877
	function today() {                                                                                                    // 9878
		date = t.getNow();                                                                                                   // 9879
		renderView();                                                                                                        // 9880
	}                                                                                                                     // 9881
	                                                                                                                      // 9882
	                                                                                                                      // 9883
	function gotoDate(zonedDateInput) {                                                                                   // 9884
		date = t.moment(zonedDateInput).stripZone();                                                                         // 9885
		renderView();                                                                                                        // 9886
	}                                                                                                                     // 9887
	                                                                                                                      // 9888
	                                                                                                                      // 9889
	function incrementDate(delta) {                                                                                       // 9890
		date.add(moment.duration(delta));                                                                                    // 9891
		renderView();                                                                                                        // 9892
	}                                                                                                                     // 9893
                                                                                                                       // 9894
                                                                                                                       // 9895
	// Forces navigation to a view for the given date.                                                                    // 9896
	// `viewType` can be a specific view name or a generic one like "week" or "day".                                      // 9897
	function zoomTo(newDate, viewType) {                                                                                  // 9898
		var spec;                                                                                                            // 9899
                                                                                                                       // 9900
		viewType = viewType || 'day'; // day is default zoom                                                                 // 9901
		spec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);                                                       // 9902
                                                                                                                       // 9903
		date = newDate.clone();                                                                                              // 9904
		renderView(spec ? spec.type : null);                                                                                 // 9905
	}                                                                                                                     // 9906
	                                                                                                                      // 9907
	                                                                                                                      // 9908
	// for external API                                                                                                   // 9909
	function getDate() {                                                                                                  // 9910
		return t.applyTimezone(date); // infuse the calendar's timezone                                                      // 9911
	}                                                                                                                     // 9912
                                                                                                                       // 9913
                                                                                                                       // 9914
                                                                                                                       // 9915
	/* Height "Freezing"                                                                                                  // 9916
	-----------------------------------------------------------------------------*/                                       // 9917
	// TODO: move this into the view                                                                                      // 9918
                                                                                                                       // 9919
	t.freezeContentHeight = freezeContentHeight;                                                                          // 9920
	t.unfreezeContentHeight = unfreezeContentHeight;                                                                      // 9921
                                                                                                                       // 9922
                                                                                                                       // 9923
	function freezeContentHeight() {                                                                                      // 9924
		content.css({                                                                                                        // 9925
			width: '100%',                                                                                                      // 9926
			height: content.height(),                                                                                           // 9927
			overflow: 'hidden'                                                                                                  // 9928
		});                                                                                                                  // 9929
	}                                                                                                                     // 9930
                                                                                                                       // 9931
                                                                                                                       // 9932
	function unfreezeContentHeight() {                                                                                    // 9933
		content.css({                                                                                                        // 9934
			width: '',                                                                                                          // 9935
			height: '',                                                                                                         // 9936
			overflow: ''                                                                                                        // 9937
		});                                                                                                                  // 9938
	}                                                                                                                     // 9939
	                                                                                                                      // 9940
	                                                                                                                      // 9941
	                                                                                                                      // 9942
	/* Misc                                                                                                               // 9943
	-----------------------------------------------------------------------------*/                                       // 9944
	                                                                                                                      // 9945
                                                                                                                       // 9946
	function getCalendar() {                                                                                              // 9947
		return t;                                                                                                            // 9948
	}                                                                                                                     // 9949
                                                                                                                       // 9950
	                                                                                                                      // 9951
	function getView() {                                                                                                  // 9952
		return currentView;                                                                                                  // 9953
	}                                                                                                                     // 9954
	                                                                                                                      // 9955
	                                                                                                                      // 9956
	function option(name, value) {                                                                                        // 9957
		if (value === undefined) {                                                                                           // 9958
			return options[name];                                                                                               // 9959
		}                                                                                                                    // 9960
		if (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {                                          // 9961
			options[name] = value;                                                                                              // 9962
			updateSize(true); // true = allow recalculation of height                                                           // 9963
		}                                                                                                                    // 9964
	}                                                                                                                     // 9965
	                                                                                                                      // 9966
	                                                                                                                      // 9967
	function trigger(name, thisObj) { // overrides the Emitter's trigger method :(                                        // 9968
		var args = Array.prototype.slice.call(arguments, 2);                                                                 // 9969
                                                                                                                       // 9970
		thisObj = thisObj || _element;                                                                                       // 9971
		this.triggerWith(name, thisObj, args); // Emitter's method                                                           // 9972
                                                                                                                       // 9973
		if (options[name]) {                                                                                                 // 9974
			return options[name].apply(thisObj, args);                                                                          // 9975
		}                                                                                                                    // 9976
	}                                                                                                                     // 9977
                                                                                                                       // 9978
	t.initialize();                                                                                                       // 9979
}                                                                                                                      // 9980
                                                                                                                       // 9981
;;                                                                                                                     // 9982
                                                                                                                       // 9983
Calendar.defaults = {                                                                                                  // 9984
                                                                                                                       // 9985
	titleRangeSeparator: ' \u2014 ', // emphasized dash                                                                   // 9986
	monthYearFormat: 'MMMM YYYY', // required for en. other languages rely on datepicker computable option                // 9987
                                                                                                                       // 9988
	defaultTimedEventDuration: '02:00:00',                                                                                // 9989
	defaultAllDayEventDuration: { days: 1 },                                                                              // 9990
	forceEventDuration: false,                                                                                            // 9991
	nextDayThreshold: '09:00:00', // 9am                                                                                  // 9992
                                                                                                                       // 9993
	// display                                                                                                            // 9994
	defaultView: 'month',                                                                                                 // 9995
	aspectRatio: 1.35,                                                                                                    // 9996
	header: {                                                                                                             // 9997
		left: 'title',                                                                                                       // 9998
		center: '',                                                                                                          // 9999
		right: 'today prev,next'                                                                                             // 10000
	},                                                                                                                    // 10001
	weekends: true,                                                                                                       // 10002
	weekNumbers: false,                                                                                                   // 10003
                                                                                                                       // 10004
	weekNumberTitle: 'W',                                                                                                 // 10005
	weekNumberCalculation: 'local',                                                                                       // 10006
	                                                                                                                      // 10007
	//editable: false,                                                                                                    // 10008
                                                                                                                       // 10009
	//nowIndicator: false,                                                                                                // 10010
                                                                                                                       // 10011
	scrollTime: '06:00:00',                                                                                               // 10012
	                                                                                                                      // 10013
	// event ajax                                                                                                         // 10014
	lazyFetching: true,                                                                                                   // 10015
	startParam: 'start',                                                                                                  // 10016
	endParam: 'end',                                                                                                      // 10017
	timezoneParam: 'timezone',                                                                                            // 10018
                                                                                                                       // 10019
	timezone: false,                                                                                                      // 10020
                                                                                                                       // 10021
	//allDayDefault: undefined,                                                                                           // 10022
                                                                                                                       // 10023
	// locale                                                                                                             // 10024
	isRTL: false,                                                                                                         // 10025
	buttonText: {                                                                                                         // 10026
		prev: "prev",                                                                                                        // 10027
		next: "next",                                                                                                        // 10028
		prevYear: "prev year",                                                                                               // 10029
		nextYear: "next year",                                                                                               // 10030
		year: 'year', // TODO: locale files need to specify this                                                             // 10031
		today: 'today',                                                                                                      // 10032
		month: 'month',                                                                                                      // 10033
		week: 'week',                                                                                                        // 10034
		day: 'day'                                                                                                           // 10035
	},                                                                                                                    // 10036
                                                                                                                       // 10037
	buttonIcons: {                                                                                                        // 10038
		prev: 'left-single-arrow',                                                                                           // 10039
		next: 'right-single-arrow',                                                                                          // 10040
		prevYear: 'left-double-arrow',                                                                                       // 10041
		nextYear: 'right-double-arrow'                                                                                       // 10042
	},                                                                                                                    // 10043
	                                                                                                                      // 10044
	// jquery-ui theming                                                                                                  // 10045
	theme: false,                                                                                                         // 10046
	themeButtonIcons: {                                                                                                   // 10047
		prev: 'circle-triangle-w',                                                                                           // 10048
		next: 'circle-triangle-e',                                                                                           // 10049
		prevYear: 'seek-prev',                                                                                               // 10050
		nextYear: 'seek-next'                                                                                                // 10051
	},                                                                                                                    // 10052
                                                                                                                       // 10053
	//eventResizableFromStart: false,                                                                                     // 10054
	dragOpacity: .75,                                                                                                     // 10055
	dragRevertDuration: 500,                                                                                              // 10056
	dragScroll: true,                                                                                                     // 10057
	                                                                                                                      // 10058
	//selectable: false,                                                                                                  // 10059
	unselectAuto: true,                                                                                                   // 10060
	                                                                                                                      // 10061
	dropAccept: '*',                                                                                                      // 10062
                                                                                                                       // 10063
	eventOrder: 'title',                                                                                                  // 10064
                                                                                                                       // 10065
	eventLimit: false,                                                                                                    // 10066
	eventLimitText: 'more',                                                                                               // 10067
	eventLimitClick: 'popover',                                                                                           // 10068
	dayPopoverFormat: 'LL',                                                                                               // 10069
	                                                                                                                      // 10070
	handleWindowResize: true,                                                                                             // 10071
	windowResizeDelay: 200, // milliseconds before an updateSize happens                                                  // 10072
                                                                                                                       // 10073
	longPressDelay: 1000                                                                                                  // 10074
	                                                                                                                      // 10075
};                                                                                                                     // 10076
                                                                                                                       // 10077
                                                                                                                       // 10078
Calendar.englishDefaults = { // used by lang.js                                                                        // 10079
	dayPopoverFormat: 'dddd, MMMM D'                                                                                      // 10080
};                                                                                                                     // 10081
                                                                                                                       // 10082
                                                                                                                       // 10083
Calendar.rtlDefaults = { // right-to-left defaults                                                                     // 10084
	header: { // TODO: smarter solution (first/center/last ?)                                                             // 10085
		left: 'next,prev today',                                                                                             // 10086
		center: '',                                                                                                          // 10087
		right: 'title'                                                                                                       // 10088
	},                                                                                                                    // 10089
	buttonIcons: {                                                                                                        // 10090
		prev: 'right-single-arrow',                                                                                          // 10091
		next: 'left-single-arrow',                                                                                           // 10092
		prevYear: 'right-double-arrow',                                                                                      // 10093
		nextYear: 'left-double-arrow'                                                                                        // 10094
	},                                                                                                                    // 10095
	themeButtonIcons: {                                                                                                   // 10096
		prev: 'circle-triangle-e',                                                                                           // 10097
		next: 'circle-triangle-w',                                                                                           // 10098
		nextYear: 'seek-prev',                                                                                               // 10099
		prevYear: 'seek-next'                                                                                                // 10100
	}                                                                                                                     // 10101
};                                                                                                                     // 10102
                                                                                                                       // 10103
;;                                                                                                                     // 10104
                                                                                                                       // 10105
var langOptionHash = FC.langs = {}; // initialize and expose                                                           // 10106
                                                                                                                       // 10107
                                                                                                                       // 10108
// TODO: document the structure and ordering of a FullCalendar lang file                                               // 10109
// TODO: rename everything "lang" to "locale", like what the moment project did                                        // 10110
                                                                                                                       // 10111
                                                                                                                       // 10112
// Initialize jQuery UI datepicker translations while using some of the translations                                   // 10113
// Will set this as the default language for datepicker.                                                               // 10114
FC.datepickerLang = function(langCode, dpLangCode, dpOptions) {                                                        // 10115
                                                                                                                       // 10116
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 10117
	var fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                          // 10118
                                                                                                                       // 10119
	// transfer some simple options from datepicker to fc                                                                 // 10120
	fcOptions.isRTL = dpOptions.isRTL;                                                                                    // 10121
	fcOptions.weekNumberTitle = dpOptions.weekHeader;                                                                     // 10122
                                                                                                                       // 10123
	// compute some more complex options from datepicker                                                                  // 10124
	$.each(dpComputableOptions, function(name, func) {                                                                    // 10125
		fcOptions[name] = func(dpOptions);                                                                                   // 10126
	});                                                                                                                   // 10127
                                                                                                                       // 10128
	// is jQuery UI Datepicker is on the page?                                                                            // 10129
	if ($.datepicker) {                                                                                                   // 10130
                                                                                                                       // 10131
		// Register the language data.                                                                                       // 10132
		// FullCalendar and MomentJS use language codes like "pt-br" but Datepicker                                          // 10133
		// does it like "pt-BR" or if it doesn't have the language, maybe just "pt".                                         // 10134
		// Make an alias so the language can be referenced either way.                                                       // 10135
		$.datepicker.regional[dpLangCode] =                                                                                  // 10136
			$.datepicker.regional[langCode] = // alias                                                                          // 10137
				dpOptions;                                                                                                         // 10138
                                                                                                                       // 10139
		// Alias 'en' to the default language data. Do this every time.                                                      // 10140
		$.datepicker.regional.en = $.datepicker.regional[''];                                                                // 10141
                                                                                                                       // 10142
		// Set as Datepicker's global defaults.                                                                              // 10143
		$.datepicker.setDefaults(dpOptions);                                                                                 // 10144
	}                                                                                                                     // 10145
};                                                                                                                     // 10146
                                                                                                                       // 10147
                                                                                                                       // 10148
// Sets FullCalendar-specific translations. Will set the language as the global default.                               // 10149
FC.lang = function(langCode, newFcOptions) {                                                                           // 10150
	var fcOptions;                                                                                                        // 10151
	var momOptions;                                                                                                       // 10152
                                                                                                                       // 10153
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 10154
	fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                              // 10155
                                                                                                                       // 10156
	// provided new options for this language? merge them in                                                              // 10157
	if (newFcOptions) {                                                                                                   // 10158
		fcOptions = langOptionHash[langCode] = mergeOptions([ fcOptions, newFcOptions ]);                                    // 10159
	}                                                                                                                     // 10160
                                                                                                                       // 10161
	// compute language options that weren't defined.                                                                     // 10162
	// always do this. newFcOptions can be undefined when initializing from i18n file,                                    // 10163
	// so no way to tell if this is an initialization or a default-setting.                                               // 10164
	momOptions = getMomentLocaleData(langCode); // will fall back to en                                                   // 10165
	$.each(momComputableOptions, function(name, func) {                                                                   // 10166
		if (fcOptions[name] == null) {                                                                                       // 10167
			fcOptions[name] = func(momOptions, fcOptions);                                                                      // 10168
		}                                                                                                                    // 10169
	});                                                                                                                   // 10170
                                                                                                                       // 10171
	// set it as the default language for FullCalendar                                                                    // 10172
	Calendar.defaults.lang = langCode;                                                                                    // 10173
};                                                                                                                     // 10174
                                                                                                                       // 10175
                                                                                                                       // 10176
// NOTE: can't guarantee any of these computations will run because not every language has datepicker                  // 10177
// configs, so make sure there are English fallbacks for these in the defaults file.                                   // 10178
var dpComputableOptions = {                                                                                            // 10179
                                                                                                                       // 10180
	buttonText: function(dpOptions) {                                                                                     // 10181
		return {                                                                                                             // 10182
			// the translations sometimes wrongly contain HTML entities                                                         // 10183
			prev: stripHtmlEntities(dpOptions.prevText),                                                                        // 10184
			next: stripHtmlEntities(dpOptions.nextText),                                                                        // 10185
			today: stripHtmlEntities(dpOptions.currentText)                                                                     // 10186
		};                                                                                                                   // 10187
	},                                                                                                                    // 10188
                                                                                                                       // 10189
	// Produces format strings like "MMMM YYYY" -> "September 2014"                                                       // 10190
	monthYearFormat: function(dpOptions) {                                                                                // 10191
		return dpOptions.showMonthAfterYear ?                                                                                // 10192
			'YYYY[' + dpOptions.yearSuffix + '] MMMM' :                                                                         // 10193
			'MMMM YYYY[' + dpOptions.yearSuffix + ']';                                                                          // 10194
	}                                                                                                                     // 10195
                                                                                                                       // 10196
};                                                                                                                     // 10197
                                                                                                                       // 10198
var momComputableOptions = {                                                                                           // 10199
                                                                                                                       // 10200
	// Produces format strings like "ddd M/D" -> "Fri 9/15"                                                               // 10201
	dayOfMonthFormat: function(momOptions, fcOptions) {                                                                   // 10202
		var format = momOptions.longDateFormat('l'); // for the format like "M/D/YYYY"                                       // 10203
                                                                                                                       // 10204
		// strip the year off the edge, as well as other misc non-whitespace chars                                           // 10205
		format = format.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g, '');                                                             // 10206
                                                                                                                       // 10207
		if (fcOptions.isRTL) {                                                                                               // 10208
			format += ' ddd'; // for RTL, add day-of-week to end                                                                // 10209
		}                                                                                                                    // 10210
		else {                                                                                                               // 10211
			format = 'ddd ' + format; // for LTR, add day-of-week to beginning                                                  // 10212
		}                                                                                                                    // 10213
		return format;                                                                                                       // 10214
	},                                                                                                                    // 10215
                                                                                                                       // 10216
	// Produces format strings like "h:mma" -> "6:00pm"                                                                   // 10217
	mediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option                 // 10218
		return momOptions.longDateFormat('LT')                                                                               // 10219
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 10220
	},                                                                                                                    // 10221
                                                                                                                       // 10222
	// Produces format strings like "h(:mm)a" -> "6pm" / "6:30pm"                                                         // 10223
	smallTimeFormat: function(momOptions) {                                                                               // 10224
		return momOptions.longDateFormat('LT')                                                                               // 10225
			.replace(':mm', '(:mm)')                                                                                            // 10226
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 10227
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 10228
	},                                                                                                                    // 10229
                                                                                                                       // 10230
	// Produces format strings like "h(:mm)t" -> "6p" / "6:30p"                                                           // 10231
	extraSmallTimeFormat: function(momOptions) {                                                                          // 10232
		return momOptions.longDateFormat('LT')                                                                               // 10233
			.replace(':mm', '(:mm)')                                                                                            // 10234
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 10235
			.replace(/\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand            // 10236
	},                                                                                                                    // 10237
                                                                                                                       // 10238
	// Produces format strings like "ha" / "H" -> "6pm" / "18"                                                            // 10239
	hourFormat: function(momOptions) {                                                                                    // 10240
		return momOptions.longDateFormat('LT')                                                                               // 10241
			.replace(':mm', '')                                                                                                 // 10242
			.replace(/(\Wmm)$/, '') // like above, but for foreign langs                                                        // 10243
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 10244
	},                                                                                                                    // 10245
                                                                                                                       // 10246
	// Produces format strings like "h:mm" -> "6:30" (with no AM/PM)                                                      // 10247
	noMeridiemTimeFormat: function(momOptions) {                                                                          // 10248
		return momOptions.longDateFormat('LT')                                                                               // 10249
			.replace(/\s*a$/i, ''); // remove trailing AM/PM                                                                    // 10250
	}                                                                                                                     // 10251
                                                                                                                       // 10252
};                                                                                                                     // 10253
                                                                                                                       // 10254
                                                                                                                       // 10255
// options that should be computed off live calendar options (considers override options)                              // 10256
// TODO: best place for this? related to lang?                                                                         // 10257
// TODO: flipping text based on isRTL is a bad idea because the CSS `direction` might want to handle it                // 10258
var instanceComputableOptions = {                                                                                      // 10259
                                                                                                                       // 10260
	// Produces format strings for results like "Mo 16"                                                                   // 10261
	smallDayDateFormat: function(options) {                                                                               // 10262
		return options.isRTL ?                                                                                               // 10263
			'D dd' :                                                                                                            // 10264
			'dd D';                                                                                                             // 10265
	},                                                                                                                    // 10266
                                                                                                                       // 10267
	// Produces format strings for results like "Wk 5"                                                                    // 10268
	weekFormat: function(options) {                                                                                       // 10269
		return options.isRTL ?                                                                                               // 10270
			'w[ ' + options.weekNumberTitle + ']' :                                                                             // 10271
			'[' + options.weekNumberTitle + ' ]w';                                                                              // 10272
	},                                                                                                                    // 10273
                                                                                                                       // 10274
	// Produces format strings for results like "Wk5"                                                                     // 10275
	smallWeekFormat: function(options) {                                                                                  // 10276
		return options.isRTL ?                                                                                               // 10277
			'w[' + options.weekNumberTitle + ']' :                                                                              // 10278
			'[' + options.weekNumberTitle + ']w';                                                                               // 10279
	}                                                                                                                     // 10280
                                                                                                                       // 10281
};                                                                                                                     // 10282
                                                                                                                       // 10283
function populateInstanceComputableOptions(options) {                                                                  // 10284
	$.each(instanceComputableOptions, function(name, func) {                                                              // 10285
		if (options[name] == null) {                                                                                         // 10286
			options[name] = func(options);                                                                                      // 10287
		}                                                                                                                    // 10288
	});                                                                                                                   // 10289
}                                                                                                                      // 10290
                                                                                                                       // 10291
                                                                                                                       // 10292
// Returns moment's internal locale data. If doesn't exist, returns English.                                           // 10293
// Works with moment-pre-2.8                                                                                           // 10294
function getMomentLocaleData(langCode) {                                                                               // 10295
	var func = moment.localeData || moment.langData;                                                                      // 10296
	return func.call(moment, langCode) ||                                                                                 // 10297
		func.call(moment, 'en'); // the newer localData could return null, so fall back to en                                // 10298
}                                                                                                                      // 10299
                                                                                                                       // 10300
                                                                                                                       // 10301
// Initialize English by forcing computation of moment-derived options.                                                // 10302
// Also, sets it as the default.                                                                                       // 10303
FC.lang('en', Calendar.englishDefaults);                                                                               // 10304
                                                                                                                       // 10305
;;                                                                                                                     // 10306
                                                                                                                       // 10307
/* Top toolbar area with buttons and title                                                                             // 10308
----------------------------------------------------------------------------------------------------------------------*/
// TODO: rename all header-related things to "toolbar"                                                                 // 10310
                                                                                                                       // 10311
function Header(calendar, options) {                                                                                   // 10312
	var t = this;                                                                                                         // 10313
	                                                                                                                      // 10314
	// exports                                                                                                            // 10315
	t.render = render;                                                                                                    // 10316
	t.removeElement = removeElement;                                                                                      // 10317
	t.updateTitle = updateTitle;                                                                                          // 10318
	t.activateButton = activateButton;                                                                                    // 10319
	t.deactivateButton = deactivateButton;                                                                                // 10320
	t.disableButton = disableButton;                                                                                      // 10321
	t.enableButton = enableButton;                                                                                        // 10322
	t.getViewsWithButtons = getViewsWithButtons;                                                                          // 10323
	                                                                                                                      // 10324
	// locals                                                                                                             // 10325
	var el = $();                                                                                                         // 10326
	var viewsWithButtons = [];                                                                                            // 10327
	var tm;                                                                                                               // 10328
                                                                                                                       // 10329
                                                                                                                       // 10330
	function render() {                                                                                                   // 10331
		var sections = options.header;                                                                                       // 10332
                                                                                                                       // 10333
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 10334
                                                                                                                       // 10335
		if (sections) {                                                                                                      // 10336
			el = $("<div class='fc-toolbar'/>")                                                                                 // 10337
				.append(renderSection('left'))                                                                                     // 10338
				.append(renderSection('right'))                                                                                    // 10339
				.append(renderSection('center'))                                                                                   // 10340
				.append('<div class="fc-clear"/>');                                                                                // 10341
                                                                                                                       // 10342
			return el;                                                                                                          // 10343
		}                                                                                                                    // 10344
	}                                                                                                                     // 10345
	                                                                                                                      // 10346
	                                                                                                                      // 10347
	function removeElement() {                                                                                            // 10348
		el.remove();                                                                                                         // 10349
		el = $();                                                                                                            // 10350
	}                                                                                                                     // 10351
	                                                                                                                      // 10352
	                                                                                                                      // 10353
	function renderSection(position) {                                                                                    // 10354
		var sectionEl = $('<div class="fc-' + position + '"/>');                                                             // 10355
		var buttonStr = options.header[position];                                                                            // 10356
                                                                                                                       // 10357
		if (buttonStr) {                                                                                                     // 10358
			$.each(buttonStr.split(' '), function(i) {                                                                          // 10359
				var groupChildren = $();                                                                                           // 10360
				var isOnlyButtons = true;                                                                                          // 10361
				var groupEl;                                                                                                       // 10362
                                                                                                                       // 10363
				$.each(this.split(','), function(j, buttonName) {                                                                  // 10364
					var customButtonProps;                                                                                            // 10365
					var viewSpec;                                                                                                     // 10366
					var buttonClick;                                                                                                  // 10367
					var overrideText; // text explicitly set by calendar's constructor options. overcomes icons                       // 10368
					var defaultText;                                                                                                  // 10369
					var themeIcon;                                                                                                    // 10370
					var normalIcon;                                                                                                   // 10371
					var innerHtml;                                                                                                    // 10372
					var classes;                                                                                                      // 10373
					var button; // the element                                                                                        // 10374
                                                                                                                       // 10375
					if (buttonName == 'title') {                                                                                      // 10376
						groupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height                  // 10377
						isOnlyButtons = false;                                                                                           // 10378
					}                                                                                                                 // 10379
					else {                                                                                                            // 10380
						if ((customButtonProps = (calendar.options.customButtons || {})[buttonName])) {                                  // 10381
							buttonClick = function(ev) {                                                                                    // 10382
								if (customButtonProps.click) {                                                                                 // 10383
									customButtonProps.click.call(button[0], ev);                                                                  // 10384
								}                                                                                                              // 10385
							};                                                                                                              // 10386
							overrideText = ''; // icons will override text                                                                  // 10387
							defaultText = customButtonProps.text;                                                                           // 10388
						}                                                                                                                // 10389
						else if ((viewSpec = calendar.getViewSpec(buttonName))) {                                                        // 10390
							buttonClick = function() {                                                                                      // 10391
								calendar.changeView(buttonName);                                                                               // 10392
							};                                                                                                              // 10393
							viewsWithButtons.push(buttonName);                                                                              // 10394
							overrideText = viewSpec.buttonTextOverride;                                                                     // 10395
							defaultText = viewSpec.buttonTextDefault;                                                                       // 10396
						}                                                                                                                // 10397
						else if (calendar[buttonName]) { // a calendar method                                                            // 10398
							buttonClick = function() {                                                                                      // 10399
								calendar[buttonName]();                                                                                        // 10400
							};                                                                                                              // 10401
							overrideText = (calendar.overrides.buttonText || {})[buttonName];                                               // 10402
							defaultText = options.buttonText[buttonName]; // everything else is considered default                          // 10403
						}                                                                                                                // 10404
                                                                                                                       // 10405
						if (buttonClick) {                                                                                               // 10406
                                                                                                                       // 10407
							themeIcon =                                                                                                     // 10408
								customButtonProps ?                                                                                            // 10409
									customButtonProps.themeIcon :                                                                                 // 10410
									options.themeButtonIcons[buttonName];                                                                         // 10411
                                                                                                                       // 10412
							normalIcon =                                                                                                    // 10413
								customButtonProps ?                                                                                            // 10414
									customButtonProps.icon :                                                                                      // 10415
									options.buttonIcons[buttonName];                                                                              // 10416
                                                                                                                       // 10417
							if (overrideText) {                                                                                             // 10418
								innerHtml = htmlEscape(overrideText);                                                                          // 10419
							}                                                                                                               // 10420
							else if (themeIcon && options.theme) {                                                                          // 10421
								innerHtml = "<span class='ui-icon ui-icon-" + themeIcon + "'></span>";                                         // 10422
							}                                                                                                               // 10423
							else if (normalIcon && !options.theme) {                                                                        // 10424
								innerHtml = "<span class='fc-icon fc-icon-" + normalIcon + "'></span>";                                        // 10425
							}                                                                                                               // 10426
							else {                                                                                                          // 10427
								innerHtml = htmlEscape(defaultText);                                                                           // 10428
							}                                                                                                               // 10429
                                                                                                                       // 10430
							classes = [                                                                                                     // 10431
								'fc-' + buttonName + '-button',                                                                                // 10432
								tm + '-button',                                                                                                // 10433
								tm + '-state-default'                                                                                          // 10434
							];                                                                                                              // 10435
                                                                                                                       // 10436
							button = $( // type="button" so that it doesn't submit a form                                                   // 10437
								'<button type="button" class="' + classes.join(' ') + '">' +                                                   // 10438
									innerHtml +                                                                                                   // 10439
								'</button>'                                                                                                    // 10440
								)                                                                                                              // 10441
								.click(function(ev) {                                                                                          // 10442
									// don't process clicks for disabled buttons                                                                  // 10443
									if (!button.hasClass(tm + '-state-disabled')) {                                                               // 10444
                                                                                                                       // 10445
										buttonClick(ev);                                                                                             // 10446
                                                                                                                       // 10447
										// after the click action, if the button becomes the "active" tab, or disabled,                              // 10448
										// it should never have a hover class, so remove it now.                                                     // 10449
										if (                                                                                                         // 10450
											button.hasClass(tm + '-state-active') ||                                                                    // 10451
											button.hasClass(tm + '-state-disabled')                                                                     // 10452
										) {                                                                                                          // 10453
											button.removeClass(tm + '-state-hover');                                                                    // 10454
										}                                                                                                            // 10455
									}                                                                                                             // 10456
								})                                                                                                             // 10457
								.mousedown(function() {                                                                                        // 10458
									// the *down* effect (mouse pressed in).                                                                      // 10459
									// only on buttons that are not the "active" tab, or disabled                                                 // 10460
									button                                                                                                        // 10461
										.not('.' + tm + '-state-active')                                                                             // 10462
										.not('.' + tm + '-state-disabled')                                                                           // 10463
										.addClass(tm + '-state-down');                                                                               // 10464
								})                                                                                                             // 10465
								.mouseup(function() {                                                                                          // 10466
									// undo the *down* effect                                                                                     // 10467
									button.removeClass(tm + '-state-down');                                                                       // 10468
								})                                                                                                             // 10469
								.hover(                                                                                                        // 10470
									function() {                                                                                                  // 10471
										// the *hover* effect.                                                                                       // 10472
										// only on buttons that are not the "active" tab, or disabled                                                // 10473
										button                                                                                                       // 10474
											.not('.' + tm + '-state-active')                                                                            // 10475
											.not('.' + tm + '-state-disabled')                                                                          // 10476
											.addClass(tm + '-state-hover');                                                                             // 10477
									},                                                                                                            // 10478
									function() {                                                                                                  // 10479
										// undo the *hover* effect                                                                                   // 10480
										button                                                                                                       // 10481
											.removeClass(tm + '-state-hover')                                                                           // 10482
											.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup                                   // 10483
									}                                                                                                             // 10484
								);                                                                                                             // 10485
                                                                                                                       // 10486
							groupChildren = groupChildren.add(button);                                                                      // 10487
						}                                                                                                                // 10488
					}                                                                                                                 // 10489
				});                                                                                                                // 10490
                                                                                                                       // 10491
				if (isOnlyButtons) {                                                                                               // 10492
					groupChildren                                                                                                     // 10493
						.first().addClass(tm + '-corner-left').end()                                                                     // 10494
						.last().addClass(tm + '-corner-right').end();                                                                    // 10495
				}                                                                                                                  // 10496
                                                                                                                       // 10497
				if (groupChildren.length > 1) {                                                                                    // 10498
					groupEl = $('<div/>');                                                                                            // 10499
					if (isOnlyButtons) {                                                                                              // 10500
						groupEl.addClass('fc-button-group');                                                                             // 10501
					}                                                                                                                 // 10502
					groupEl.append(groupChildren);                                                                                    // 10503
					sectionEl.append(groupEl);                                                                                        // 10504
				}                                                                                                                  // 10505
				else {                                                                                                             // 10506
					sectionEl.append(groupChildren); // 1 or 0 children                                                               // 10507
				}                                                                                                                  // 10508
			});                                                                                                                 // 10509
		}                                                                                                                    // 10510
                                                                                                                       // 10511
		return sectionEl;                                                                                                    // 10512
	}                                                                                                                     // 10513
	                                                                                                                      // 10514
	                                                                                                                      // 10515
	function updateTitle(text) {                                                                                          // 10516
		el.find('h2').text(text);                                                                                            // 10517
	}                                                                                                                     // 10518
	                                                                                                                      // 10519
	                                                                                                                      // 10520
	function activateButton(buttonName) {                                                                                 // 10521
		el.find('.fc-' + buttonName + '-button')                                                                             // 10522
			.addClass(tm + '-state-active');                                                                                    // 10523
	}                                                                                                                     // 10524
	                                                                                                                      // 10525
	                                                                                                                      // 10526
	function deactivateButton(buttonName) {                                                                               // 10527
		el.find('.fc-' + buttonName + '-button')                                                                             // 10528
			.removeClass(tm + '-state-active');                                                                                 // 10529
	}                                                                                                                     // 10530
	                                                                                                                      // 10531
	                                                                                                                      // 10532
	function disableButton(buttonName) {                                                                                  // 10533
		el.find('.fc-' + buttonName + '-button')                                                                             // 10534
			.attr('disabled', 'disabled')                                                                                       // 10535
			.addClass(tm + '-state-disabled');                                                                                  // 10536
	}                                                                                                                     // 10537
	                                                                                                                      // 10538
	                                                                                                                      // 10539
	function enableButton(buttonName) {                                                                                   // 10540
		el.find('.fc-' + buttonName + '-button')                                                                             // 10541
			.removeAttr('disabled')                                                                                             // 10542
			.removeClass(tm + '-state-disabled');                                                                               // 10543
	}                                                                                                                     // 10544
                                                                                                                       // 10545
                                                                                                                       // 10546
	function getViewsWithButtons() {                                                                                      // 10547
		return viewsWithButtons;                                                                                             // 10548
	}                                                                                                                     // 10549
                                                                                                                       // 10550
}                                                                                                                      // 10551
                                                                                                                       // 10552
;;                                                                                                                     // 10553
                                                                                                                       // 10554
FC.sourceNormalizers = [];                                                                                             // 10555
FC.sourceFetchers = [];                                                                                                // 10556
                                                                                                                       // 10557
var ajaxDefaults = {                                                                                                   // 10558
	dataType: 'json',                                                                                                     // 10559
	cache: false                                                                                                          // 10560
};                                                                                                                     // 10561
                                                                                                                       // 10562
var eventGUID = 1;                                                                                                     // 10563
                                                                                                                       // 10564
                                                                                                                       // 10565
function EventManager(options) { // assumed to be a calendar                                                           // 10566
	var t = this;                                                                                                         // 10567
	                                                                                                                      // 10568
	                                                                                                                      // 10569
	// exports                                                                                                            // 10570
	t.isFetchNeeded = isFetchNeeded;                                                                                      // 10571
	t.fetchEvents = fetchEvents;                                                                                          // 10572
	t.addEventSource = addEventSource;                                                                                    // 10573
	t.removeEventSource = removeEventSource;                                                                              // 10574
	t.updateEvent = updateEvent;                                                                                          // 10575
	t.renderEvent = renderEvent;                                                                                          // 10576
	t.removeEvents = removeEvents;                                                                                        // 10577
	t.clientEvents = clientEvents;                                                                                        // 10578
	t.mutateEvent = mutateEvent;                                                                                          // 10579
	t.normalizeEventDates = normalizeEventDates;                                                                          // 10580
	t.normalizeEventTimes = normalizeEventTimes;                                                                          // 10581
	                                                                                                                      // 10582
	                                                                                                                      // 10583
	// imports                                                                                                            // 10584
	var reportEvents = t.reportEvents;                                                                                    // 10585
	                                                                                                                      // 10586
	                                                                                                                      // 10587
	// locals                                                                                                             // 10588
	var stickySource = { events: [] };                                                                                    // 10589
	var sources = [ stickySource ];                                                                                       // 10590
	var rangeStart, rangeEnd;                                                                                             // 10591
	var currentFetchID = 0;                                                                                               // 10592
	var pendingSourceCnt = 0;                                                                                             // 10593
	var cache = []; // holds events that have already been expanded                                                       // 10594
                                                                                                                       // 10595
                                                                                                                       // 10596
	$.each(                                                                                                               // 10597
		(options.events ? [ options.events ] : []).concat(options.eventSources || []),                                       // 10598
		function(i, sourceInput) {                                                                                           // 10599
			var source = buildEventSource(sourceInput);                                                                         // 10600
			if (source) {                                                                                                       // 10601
				sources.push(source);                                                                                              // 10602
			}                                                                                                                   // 10603
		}                                                                                                                    // 10604
	);                                                                                                                    // 10605
	                                                                                                                      // 10606
	                                                                                                                      // 10607
	                                                                                                                      // 10608
	/* Fetching                                                                                                           // 10609
	-----------------------------------------------------------------------------*/                                       // 10610
                                                                                                                       // 10611
                                                                                                                       // 10612
	// start and end are assumed to be unzoned                                                                            // 10613
	function isFetchNeeded(start, end) {                                                                                  // 10614
		return !rangeStart || // nothing has been fetched yet?                                                               // 10615
			start < rangeStart || end > rangeEnd; // is part of the new range outside of the old range?                         // 10616
	}                                                                                                                     // 10617
	                                                                                                                      // 10618
	                                                                                                                      // 10619
	function fetchEvents(start, end) {                                                                                    // 10620
		rangeStart = start;                                                                                                  // 10621
		rangeEnd = end;                                                                                                      // 10622
		cache = [];                                                                                                          // 10623
		var fetchID = ++currentFetchID;                                                                                      // 10624
		var len = sources.length;                                                                                            // 10625
		pendingSourceCnt = len;                                                                                              // 10626
		for (var i=0; i<len; i++) {                                                                                          // 10627
			fetchEventSource(sources[i], fetchID);                                                                              // 10628
		}                                                                                                                    // 10629
	}                                                                                                                     // 10630
	                                                                                                                      // 10631
	                                                                                                                      // 10632
	function fetchEventSource(source, fetchID) {                                                                          // 10633
		_fetchEventSource(source, function(eventInputs) {                                                                    // 10634
			var isArraySource = $.isArray(source.events);                                                                       // 10635
			var i, eventInput;                                                                                                  // 10636
			var abstractEvent;                                                                                                  // 10637
                                                                                                                       // 10638
			if (fetchID == currentFetchID) {                                                                                    // 10639
                                                                                                                       // 10640
				if (eventInputs) {                                                                                                 // 10641
					for (i = 0; i < eventInputs.length; i++) {                                                                        // 10642
						eventInput = eventInputs[i];                                                                                     // 10643
                                                                                                                       // 10644
						if (isArraySource) { // array sources have already been convert to Event Objects                                 // 10645
							abstractEvent = eventInput;                                                                                     // 10646
						}                                                                                                                // 10647
						else {                                                                                                           // 10648
							abstractEvent = buildEventFromInput(eventInput, source);                                                        // 10649
						}                                                                                                                // 10650
                                                                                                                       // 10651
						if (abstractEvent) { // not false (an invalid event)                                                             // 10652
							cache.push.apply(                                                                                               // 10653
								cache,                                                                                                         // 10654
								expandEvent(abstractEvent) // add individual expanded events to the cache                                      // 10655
							);                                                                                                              // 10656
						}                                                                                                                // 10657
					}                                                                                                                 // 10658
				}                                                                                                                  // 10659
                                                                                                                       // 10660
				pendingSourceCnt--;                                                                                                // 10661
				if (!pendingSourceCnt) {                                                                                           // 10662
					reportEvents(cache);                                                                                              // 10663
				}                                                                                                                  // 10664
			}                                                                                                                   // 10665
		});                                                                                                                  // 10666
	}                                                                                                                     // 10667
	                                                                                                                      // 10668
	                                                                                                                      // 10669
	function _fetchEventSource(source, callback) {                                                                        // 10670
		var i;                                                                                                               // 10671
		var fetchers = FC.sourceFetchers;                                                                                    // 10672
		var res;                                                                                                             // 10673
                                                                                                                       // 10674
		for (i=0; i<fetchers.length; i++) {                                                                                  // 10675
			res = fetchers[i].call(                                                                                             // 10676
				t, // this, the Calendar object                                                                                    // 10677
				source,                                                                                                            // 10678
				rangeStart.clone(),                                                                                                // 10679
				rangeEnd.clone(),                                                                                                  // 10680
				options.timezone,                                                                                                  // 10681
				callback                                                                                                           // 10682
			);                                                                                                                  // 10683
                                                                                                                       // 10684
			if (res === true) {                                                                                                 // 10685
				// the fetcher is in charge. made its own async request                                                            // 10686
				return;                                                                                                            // 10687
			}                                                                                                                   // 10688
			else if (typeof res == 'object') {                                                                                  // 10689
				// the fetcher returned a new source. process it                                                                   // 10690
				_fetchEventSource(res, callback);                                                                                  // 10691
				return;                                                                                                            // 10692
			}                                                                                                                   // 10693
		}                                                                                                                    // 10694
                                                                                                                       // 10695
		var events = source.events;                                                                                          // 10696
		if (events) {                                                                                                        // 10697
			if ($.isFunction(events)) {                                                                                         // 10698
				t.pushLoading();                                                                                                   // 10699
				events.call(                                                                                                       // 10700
					t, // this, the Calendar object                                                                                   // 10701
					rangeStart.clone(),                                                                                               // 10702
					rangeEnd.clone(),                                                                                                 // 10703
					options.timezone,                                                                                                 // 10704
					function(events) {                                                                                                // 10705
						callback(events);                                                                                                // 10706
						t.popLoading();                                                                                                  // 10707
					}                                                                                                                 // 10708
				);                                                                                                                 // 10709
			}                                                                                                                   // 10710
			else if ($.isArray(events)) {                                                                                       // 10711
				callback(events);                                                                                                  // 10712
			}                                                                                                                   // 10713
			else {                                                                                                              // 10714
				callback();                                                                                                        // 10715
			}                                                                                                                   // 10716
		}else{                                                                                                               // 10717
			var url = source.url;                                                                                               // 10718
			if (url) {                                                                                                          // 10719
				var success = source.success;                                                                                      // 10720
				var error = source.error;                                                                                          // 10721
				var complete = source.complete;                                                                                    // 10722
                                                                                                                       // 10723
				// retrieve any outbound GET/POST $.ajax data from the options                                                     // 10724
				var customData;                                                                                                    // 10725
				if ($.isFunction(source.data)) {                                                                                   // 10726
					// supplied as a function that returns a key/value object                                                         // 10727
					customData = source.data();                                                                                       // 10728
				}                                                                                                                  // 10729
				else {                                                                                                             // 10730
					// supplied as a straight key/value object                                                                        // 10731
					customData = source.data;                                                                                         // 10732
				}                                                                                                                  // 10733
                                                                                                                       // 10734
				// use a copy of the custom data so we can modify the parameters                                                   // 10735
				// and not affect the passed-in object.                                                                            // 10736
				var data = $.extend({}, customData || {});                                                                         // 10737
                                                                                                                       // 10738
				var startParam = firstDefined(source.startParam, options.startParam);                                              // 10739
				var endParam = firstDefined(source.endParam, options.endParam);                                                    // 10740
				var timezoneParam = firstDefined(source.timezoneParam, options.timezoneParam);                                     // 10741
                                                                                                                       // 10742
				if (startParam) {                                                                                                  // 10743
					data[startParam] = rangeStart.format();                                                                           // 10744
				}                                                                                                                  // 10745
				if (endParam) {                                                                                                    // 10746
					data[endParam] = rangeEnd.format();                                                                               // 10747
				}                                                                                                                  // 10748
				if (options.timezone && options.timezone != 'local') {                                                             // 10749
					data[timezoneParam] = options.timezone;                                                                           // 10750
				}                                                                                                                  // 10751
                                                                                                                       // 10752
				t.pushLoading();                                                                                                   // 10753
				$.ajax($.extend({}, ajaxDefaults, source, {                                                                        // 10754
					data: data,                                                                                                       // 10755
					success: function(events) {                                                                                       // 10756
						events = events || [];                                                                                           // 10757
						var res = applyAll(success, this, arguments);                                                                    // 10758
						if ($.isArray(res)) {                                                                                            // 10759
							events = res;                                                                                                   // 10760
						}                                                                                                                // 10761
						callback(events);                                                                                                // 10762
					},                                                                                                                // 10763
					error: function() {                                                                                               // 10764
						applyAll(error, this, arguments);                                                                                // 10765
						callback();                                                                                                      // 10766
					},                                                                                                                // 10767
					complete: function() {                                                                                            // 10768
						applyAll(complete, this, arguments);                                                                             // 10769
						t.popLoading();                                                                                                  // 10770
					}                                                                                                                 // 10771
				}));                                                                                                               // 10772
			}else{                                                                                                              // 10773
				callback();                                                                                                        // 10774
			}                                                                                                                   // 10775
		}                                                                                                                    // 10776
	}                                                                                                                     // 10777
	                                                                                                                      // 10778
	                                                                                                                      // 10779
	                                                                                                                      // 10780
	/* Sources                                                                                                            // 10781
	-----------------------------------------------------------------------------*/                                       // 10782
	                                                                                                                      // 10783
                                                                                                                       // 10784
	function addEventSource(sourceInput) {                                                                                // 10785
		var source = buildEventSource(sourceInput);                                                                          // 10786
		if (source) {                                                                                                        // 10787
			sources.push(source);                                                                                               // 10788
			pendingSourceCnt++;                                                                                                 // 10789
			fetchEventSource(source, currentFetchID); // will eventually call reportEvents                                      // 10790
		}                                                                                                                    // 10791
	}                                                                                                                     // 10792
                                                                                                                       // 10793
                                                                                                                       // 10794
	function buildEventSource(sourceInput) { // will return undefined if invalid source                                   // 10795
		var normalizers = FC.sourceNormalizers;                                                                              // 10796
		var source;                                                                                                          // 10797
		var i;                                                                                                               // 10798
                                                                                                                       // 10799
		if ($.isFunction(sourceInput) || $.isArray(sourceInput)) {                                                           // 10800
			source = { events: sourceInput };                                                                                   // 10801
		}                                                                                                                    // 10802
		else if (typeof sourceInput === 'string') {                                                                          // 10803
			source = { url: sourceInput };                                                                                      // 10804
		}                                                                                                                    // 10805
		else if (typeof sourceInput === 'object') {                                                                          // 10806
			source = $.extend({}, sourceInput); // shallow copy                                                                 // 10807
		}                                                                                                                    // 10808
                                                                                                                       // 10809
		if (source) {                                                                                                        // 10810
                                                                                                                       // 10811
			// TODO: repeat code, same code for event classNames                                                                // 10812
			if (source.className) {                                                                                             // 10813
				if (typeof source.className === 'string') {                                                                        // 10814
					source.className = source.className.split(/\s+/);                                                                 // 10815
				}                                                                                                                  // 10816
				// otherwise, assumed to be an array                                                                               // 10817
			}                                                                                                                   // 10818
			else {                                                                                                              // 10819
				source.className = [];                                                                                             // 10820
			}                                                                                                                   // 10821
                                                                                                                       // 10822
			// for array sources, we convert to standard Event Objects up front                                                 // 10823
			if ($.isArray(source.events)) {                                                                                     // 10824
				source.origArray = source.events; // for removeEventSource                                                         // 10825
				source.events = $.map(source.events, function(eventInput) {                                                        // 10826
					return buildEventFromInput(eventInput, source);                                                                   // 10827
				});                                                                                                                // 10828
			}                                                                                                                   // 10829
                                                                                                                       // 10830
			for (i=0; i<normalizers.length; i++) {                                                                              // 10831
				normalizers[i].call(t, source);                                                                                    // 10832
			}                                                                                                                   // 10833
                                                                                                                       // 10834
			return source;                                                                                                      // 10835
		}                                                                                                                    // 10836
	}                                                                                                                     // 10837
                                                                                                                       // 10838
                                                                                                                       // 10839
	function removeEventSource(source) {                                                                                  // 10840
		sources = $.grep(sources, function(src) {                                                                            // 10841
			return !isSourcesEqual(src, source);                                                                                // 10842
		});                                                                                                                  // 10843
		// remove all client events from that source                                                                         // 10844
		cache = $.grep(cache, function(e) {                                                                                  // 10845
			return !isSourcesEqual(e.source, source);                                                                           // 10846
		});                                                                                                                  // 10847
		reportEvents(cache);                                                                                                 // 10848
	}                                                                                                                     // 10849
                                                                                                                       // 10850
                                                                                                                       // 10851
	function isSourcesEqual(source1, source2) {                                                                           // 10852
		return source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);                             // 10853
	}                                                                                                                     // 10854
                                                                                                                       // 10855
                                                                                                                       // 10856
	function getSourcePrimitive(source) {                                                                                 // 10857
		return (                                                                                                             // 10858
			(typeof source === 'object') ? // a normalized event source?                                                        // 10859
				(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive                // 10860
				null                                                                                                               // 10861
		) ||                                                                                                                 // 10862
		source; // the given argument *is* the primitive                                                                     // 10863
	}                                                                                                                     // 10864
	                                                                                                                      // 10865
	                                                                                                                      // 10866
	                                                                                                                      // 10867
	/* Manipulation                                                                                                       // 10868
	-----------------------------------------------------------------------------*/                                       // 10869
                                                                                                                       // 10870
                                                                                                                       // 10871
	// Only ever called from the externally-facing API                                                                    // 10872
	function updateEvent(event) {                                                                                         // 10873
                                                                                                                       // 10874
		// massage start/end values, even if date string values                                                              // 10875
		event.start = t.moment(event.start);                                                                                 // 10876
		if (event.end) {                                                                                                     // 10877
			event.end = t.moment(event.end);                                                                                    // 10878
		}                                                                                                                    // 10879
		else {                                                                                                               // 10880
			event.end = null;                                                                                                   // 10881
		}                                                                                                                    // 10882
                                                                                                                       // 10883
		mutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization                          // 10884
		reportEvents(cache); // reports event modifications (so we can redraw)                                               // 10885
	}                                                                                                                     // 10886
                                                                                                                       // 10887
                                                                                                                       // 10888
	// Returns a hash of misc event properties that should be copied over to related events.                              // 10889
	function getMiscEventProps(event) {                                                                                   // 10890
		var props = {};                                                                                                      // 10891
                                                                                                                       // 10892
		$.each(event, function(name, val) {                                                                                  // 10893
			if (isMiscEventPropName(name)) {                                                                                    // 10894
				if (val !== undefined && isAtomic(val)) { // a defined non-object                                                  // 10895
					props[name] = val;                                                                                                // 10896
				}                                                                                                                  // 10897
			}                                                                                                                   // 10898
		});                                                                                                                  // 10899
                                                                                                                       // 10900
		return props;                                                                                                        // 10901
	}                                                                                                                     // 10902
                                                                                                                       // 10903
	// non-date-related, non-id-related, non-secret                                                                       // 10904
	function isMiscEventPropName(name) {                                                                                  // 10905
		return !/^_|^(id|allDay|start|end)$/.test(name);                                                                     // 10906
	}                                                                                                                     // 10907
                                                                                                                       // 10908
	                                                                                                                      // 10909
	// returns the expanded events that were created                                                                      // 10910
	function renderEvent(eventInput, stick) {                                                                             // 10911
		var abstractEvent = buildEventFromInput(eventInput);                                                                 // 10912
		var events;                                                                                                          // 10913
		var i, event;                                                                                                        // 10914
                                                                                                                       // 10915
		if (abstractEvent) { // not false (a valid input)                                                                    // 10916
			events = expandEvent(abstractEvent);                                                                                // 10917
                                                                                                                       // 10918
			for (i = 0; i < events.length; i++) {                                                                               // 10919
				event = events[i];                                                                                                 // 10920
                                                                                                                       // 10921
				if (!event.source) {                                                                                               // 10922
					if (stick) {                                                                                                      // 10923
						stickySource.events.push(event);                                                                                 // 10924
						event.source = stickySource;                                                                                     // 10925
					}                                                                                                                 // 10926
					cache.push(event);                                                                                                // 10927
				}                                                                                                                  // 10928
			}                                                                                                                   // 10929
                                                                                                                       // 10930
			reportEvents(cache);                                                                                                // 10931
                                                                                                                       // 10932
			return events;                                                                                                      // 10933
		}                                                                                                                    // 10934
                                                                                                                       // 10935
		return [];                                                                                                           // 10936
	}                                                                                                                     // 10937
	                                                                                                                      // 10938
	                                                                                                                      // 10939
	function removeEvents(filter) {                                                                                       // 10940
		var eventID;                                                                                                         // 10941
		var i;                                                                                                               // 10942
                                                                                                                       // 10943
		if (filter == null) { // null or undefined. remove all events                                                        // 10944
			filter = function() { return true; }; // will always match                                                          // 10945
		}                                                                                                                    // 10946
		else if (!$.isFunction(filter)) { // an event ID                                                                     // 10947
			eventID = filter + '';                                                                                              // 10948
			filter = function(event) {                                                                                          // 10949
				return event._id == eventID;                                                                                       // 10950
			};                                                                                                                  // 10951
		}                                                                                                                    // 10952
                                                                                                                       // 10953
		// Purge event(s) from our local cache                                                                               // 10954
		cache = $.grep(cache, filter, true); // inverse=true                                                                 // 10955
                                                                                                                       // 10956
		// Remove events from array sources.                                                                                 // 10957
		// This works because they have been converted to official Event Objects up front.                                   // 10958
		// (and as a result, event._id has been calculated).                                                                 // 10959
		for (i=0; i<sources.length; i++) {                                                                                   // 10960
			if ($.isArray(sources[i].events)) {                                                                                 // 10961
				sources[i].events = $.grep(sources[i].events, filter, true);                                                       // 10962
			}                                                                                                                   // 10963
		}                                                                                                                    // 10964
                                                                                                                       // 10965
		reportEvents(cache);                                                                                                 // 10966
	}                                                                                                                     // 10967
	                                                                                                                      // 10968
	                                                                                                                      // 10969
	function clientEvents(filter) {                                                                                       // 10970
		if ($.isFunction(filter)) {                                                                                          // 10971
			return $.grep(cache, filter);                                                                                       // 10972
		}                                                                                                                    // 10973
		else if (filter != null) { // not null, not undefined. an event ID                                                   // 10974
			filter += '';                                                                                                       // 10975
			return $.grep(cache, function(e) {                                                                                  // 10976
				return e._id == filter;                                                                                            // 10977
			});                                                                                                                 // 10978
		}                                                                                                                    // 10979
		return cache; // else, return all                                                                                    // 10980
	}                                                                                                                     // 10981
	                                                                                                                      // 10982
	                                                                                                                      // 10983
	                                                                                                                      // 10984
	/* Event Normalization                                                                                                // 10985
	-----------------------------------------------------------------------------*/                                       // 10986
                                                                                                                       // 10987
                                                                                                                       // 10988
	// Given a raw object with key/value properties, returns an "abstract" Event object.                                  // 10989
	// An "abstract" event is an event that, if recurring, will not have been expanded yet.                               // 10990
	// Will return `false` when input is invalid.                                                                         // 10991
	// `source` is optional                                                                                               // 10992
	function buildEventFromInput(input, source) {                                                                         // 10993
		var out = {};                                                                                                        // 10994
		var start, end;                                                                                                      // 10995
		var allDay;                                                                                                          // 10996
                                                                                                                       // 10997
		if (options.eventDataTransform) {                                                                                    // 10998
			input = options.eventDataTransform(input);                                                                          // 10999
		}                                                                                                                    // 11000
		if (source && source.eventDataTransform) {                                                                           // 11001
			input = source.eventDataTransform(input);                                                                           // 11002
		}                                                                                                                    // 11003
                                                                                                                       // 11004
		// Copy all properties over to the resulting object.                                                                 // 11005
		// The special-case properties will be copied over afterwards.                                                       // 11006
		$.extend(out, input);                                                                                                // 11007
                                                                                                                       // 11008
		if (source) {                                                                                                        // 11009
			out.source = source;                                                                                                // 11010
		}                                                                                                                    // 11011
                                                                                                                       // 11012
		out._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');                               // 11013
                                                                                                                       // 11014
		if (input.className) {                                                                                               // 11015
			if (typeof input.className == 'string') {                                                                           // 11016
				out.className = input.className.split(/\s+/);                                                                      // 11017
			}                                                                                                                   // 11018
			else { // assumed to be an array                                                                                    // 11019
				out.className = input.className;                                                                                   // 11020
			}                                                                                                                   // 11021
		}                                                                                                                    // 11022
		else {                                                                                                               // 11023
			out.className = [];                                                                                                 // 11024
		}                                                                                                                    // 11025
                                                                                                                       // 11026
		start = input.start || input.date; // "date" is an alias for "start"                                                 // 11027
		end = input.end;                                                                                                     // 11028
                                                                                                                       // 11029
		// parse as a time (Duration) if applicable                                                                          // 11030
		if (isTimeString(start)) {                                                                                           // 11031
			start = moment.duration(start);                                                                                     // 11032
		}                                                                                                                    // 11033
		if (isTimeString(end)) {                                                                                             // 11034
			end = moment.duration(end);                                                                                         // 11035
		}                                                                                                                    // 11036
                                                                                                                       // 11037
		if (input.dow || moment.isDuration(start) || moment.isDuration(end)) {                                               // 11038
                                                                                                                       // 11039
			// the event is "abstract" (recurring) so don't calculate exact start/end dates just yet                            // 11040
			out.start = start ? moment.duration(start) : null; // will be a Duration or null                                    // 11041
			out.end = end ? moment.duration(end) : null; // will be a Duration or null                                          // 11042
			out._recurring = true; // our internal marker                                                                       // 11043
		}                                                                                                                    // 11044
		else {                                                                                                               // 11045
                                                                                                                       // 11046
			if (start) {                                                                                                        // 11047
				start = t.moment(start);                                                                                           // 11048
				if (!start.isValid()) {                                                                                            // 11049
					return false;                                                                                                     // 11050
				}                                                                                                                  // 11051
			}                                                                                                                   // 11052
                                                                                                                       // 11053
			if (end) {                                                                                                          // 11054
				end = t.moment(end);                                                                                               // 11055
				if (!end.isValid()) {                                                                                              // 11056
					end = null; // let defaults take over                                                                             // 11057
				}                                                                                                                  // 11058
			}                                                                                                                   // 11059
                                                                                                                       // 11060
			allDay = input.allDay;                                                                                              // 11061
			if (allDay === undefined) { // still undefined? fallback to default                                                 // 11062
				allDay = firstDefined(                                                                                             // 11063
					source ? source.allDayDefault : undefined,                                                                        // 11064
					options.allDayDefault                                                                                             // 11065
				);                                                                                                                 // 11066
				// still undefined? normalizeEventDates will calculate it                                                          // 11067
			}                                                                                                                   // 11068
                                                                                                                       // 11069
			assignDatesToEvent(start, end, allDay, out);                                                                        // 11070
		}                                                                                                                    // 11071
                                                                                                                       // 11072
		return out;                                                                                                          // 11073
	}                                                                                                                     // 11074
                                                                                                                       // 11075
                                                                                                                       // 11076
	// Normalizes and assigns the given dates to the given partially-formed event object.                                 // 11077
	// NOTE: mutates the given start/end moments. does not make a copy.                                                   // 11078
	function assignDatesToEvent(start, end, allDay, event) {                                                              // 11079
		event.start = start;                                                                                                 // 11080
		event.end = end;                                                                                                     // 11081
		event.allDay = allDay;                                                                                               // 11082
		normalizeEventDates(event);                                                                                          // 11083
		backupEventDates(event);                                                                                             // 11084
	}                                                                                                                     // 11085
                                                                                                                       // 11086
                                                                                                                       // 11087
	// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.  // 11088
	// NOTE: Will modify the given object.                                                                                // 11089
	function normalizeEventDates(eventProps) {                                                                            // 11090
                                                                                                                       // 11091
		normalizeEventTimes(eventProps);                                                                                     // 11092
                                                                                                                       // 11093
		if (eventProps.end && !eventProps.end.isAfter(eventProps.start)) {                                                   // 11094
			eventProps.end = null;                                                                                              // 11095
		}                                                                                                                    // 11096
                                                                                                                       // 11097
		if (!eventProps.end) {                                                                                               // 11098
			if (options.forceEventDuration) {                                                                                   // 11099
				eventProps.end = t.getDefaultEventEnd(eventProps.allDay, eventProps.start);                                        // 11100
			}                                                                                                                   // 11101
			else {                                                                                                              // 11102
				eventProps.end = null;                                                                                             // 11103
			}                                                                                                                   // 11104
		}                                                                                                                    // 11105
	}                                                                                                                     // 11106
                                                                                                                       // 11107
                                                                                                                       // 11108
	// Ensures the allDay property exists and the timeliness of the start/end dates are consistent                        // 11109
	function normalizeEventTimes(eventProps) {                                                                            // 11110
		if (eventProps.allDay == null) {                                                                                     // 11111
			eventProps.allDay = !(eventProps.start.hasTime() || (eventProps.end && eventProps.end.hasTime()));                  // 11112
		}                                                                                                                    // 11113
                                                                                                                       // 11114
		if (eventProps.allDay) {                                                                                             // 11115
			eventProps.start.stripTime();                                                                                       // 11116
			if (eventProps.end) {                                                                                               // 11117
				// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment                       // 11118
				eventProps.end.stripTime();                                                                                        // 11119
			}                                                                                                                   // 11120
		}                                                                                                                    // 11121
		else {                                                                                                               // 11122
			if (!eventProps.start.hasTime()) {                                                                                  // 11123
				eventProps.start = t.applyTimezone(eventProps.start.time(0)); // will assign a 00:00 time                          // 11124
			}                                                                                                                   // 11125
			if (eventProps.end && !eventProps.end.hasTime()) {                                                                  // 11126
				eventProps.end = t.applyTimezone(eventProps.end.time(0)); // will assign a 00:00 time                              // 11127
			}                                                                                                                   // 11128
		}                                                                                                                    // 11129
	}                                                                                                                     // 11130
                                                                                                                       // 11131
                                                                                                                       // 11132
	// If the given event is a recurring event, break it down into an array of individual instances.                      // 11133
	// If not a recurring event, return an array with the single original event.                                          // 11134
	// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.            // 11135
	// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).               // 11136
	function expandEvent(abstractEvent, _rangeStart, _rangeEnd) {                                                         // 11137
		var events = [];                                                                                                     // 11138
		var dowHash;                                                                                                         // 11139
		var dow;                                                                                                             // 11140
		var i;                                                                                                               // 11141
		var date;                                                                                                            // 11142
		var startTime, endTime;                                                                                              // 11143
		var start, end;                                                                                                      // 11144
		var event;                                                                                                           // 11145
                                                                                                                       // 11146
		_rangeStart = _rangeStart || rangeStart;                                                                             // 11147
		_rangeEnd = _rangeEnd || rangeEnd;                                                                                   // 11148
                                                                                                                       // 11149
		if (abstractEvent) {                                                                                                 // 11150
			if (abstractEvent._recurring) {                                                                                     // 11151
                                                                                                                       // 11152
				// make a boolean hash as to whether the event occurs on each day-of-week                                          // 11153
				if ((dow = abstractEvent.dow)) {                                                                                   // 11154
					dowHash = {};                                                                                                     // 11155
					for (i = 0; i < dow.length; i++) {                                                                                // 11156
						dowHash[dow[i]] = true;                                                                                          // 11157
					}                                                                                                                 // 11158
				}                                                                                                                  // 11159
                                                                                                                       // 11160
				// iterate through every day in the current range                                                                  // 11161
				date = _rangeStart.clone().stripTime(); // holds the date of the current day                                       // 11162
				while (date.isBefore(_rangeEnd)) {                                                                                 // 11163
                                                                                                                       // 11164
					if (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week                             // 11165
                                                                                                                       // 11166
						startTime = abstractEvent.start; // the stored start and end properties are times (Durations)                    // 11167
						endTime = abstractEvent.end; // "                                                                                // 11168
						start = date.clone();                                                                                            // 11169
						end = null;                                                                                                      // 11170
                                                                                                                       // 11171
						if (startTime) {                                                                                                 // 11172
							start = start.time(startTime);                                                                                  // 11173
						}                                                                                                                // 11174
						if (endTime) {                                                                                                   // 11175
							end = date.clone().time(endTime);                                                                               // 11176
						}                                                                                                                // 11177
                                                                                                                       // 11178
						event = $.extend({}, abstractEvent); // make a copy of the original                                              // 11179
						assignDatesToEvent(                                                                                              // 11180
							start, end,                                                                                                     // 11181
							!startTime && !endTime, // allDay?                                                                              // 11182
							event                                                                                                           // 11183
						);                                                                                                               // 11184
						events.push(event);                                                                                              // 11185
					}                                                                                                                 // 11186
                                                                                                                       // 11187
					date.add(1, 'days');                                                                                              // 11188
				}                                                                                                                  // 11189
			}                                                                                                                   // 11190
			else {                                                                                                              // 11191
				events.push(abstractEvent); // return the original event. will be a one-item array                                 // 11192
			}                                                                                                                   // 11193
		}                                                                                                                    // 11194
                                                                                                                       // 11195
		return events;                                                                                                       // 11196
	}                                                                                                                     // 11197
                                                                                                                       // 11198
                                                                                                                       // 11199
                                                                                                                       // 11200
	/* Event Modification Math                                                                                            // 11201
	-----------------------------------------------------------------------------------------*/                           // 11202
                                                                                                                       // 11203
                                                                                                                       // 11204
	// Modifies an event and all related events by applying the given properties.                                         // 11205
	// Special date-diffing logic is used for manipulation of dates.                                                      // 11206
	// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.   // 11207
	// All date comparisons are done against the event's pristine _start and _end dates.                                  // 11208
	// Returns an object with delta information and a function to undo all operations.                                    // 11209
	// For making computations in a granularity greater than day/time, specify largeUnit.                                 // 11210
	// NOTE: The given `newProps` might be mutated for normalization purposes.                                            // 11211
	function mutateEvent(event, newProps, largeUnit) {                                                                    // 11212
		var miscProps = {};                                                                                                  // 11213
		var oldProps;                                                                                                        // 11214
		var clearEnd;                                                                                                        // 11215
		var startDelta;                                                                                                      // 11216
		var endDelta;                                                                                                        // 11217
		var durationDelta;                                                                                                   // 11218
		var undoFunc;                                                                                                        // 11219
                                                                                                                       // 11220
		// diffs the dates in the appropriate way, returning a duration                                                      // 11221
		function diffDates(date1, date0) { // date1 - date0                                                                  // 11222
			if (largeUnit) {                                                                                                    // 11223
				return diffByUnit(date1, date0, largeUnit);                                                                        // 11224
			}                                                                                                                   // 11225
			else if (newProps.allDay) {                                                                                         // 11226
				return diffDay(date1, date0);                                                                                      // 11227
			}                                                                                                                   // 11228
			else {                                                                                                              // 11229
				return diffDayTime(date1, date0);                                                                                  // 11230
			}                                                                                                                   // 11231
		}                                                                                                                    // 11232
                                                                                                                       // 11233
		newProps = newProps || {};                                                                                           // 11234
                                                                                                                       // 11235
		// normalize new date-related properties                                                                             // 11236
		if (!newProps.start) {                                                                                               // 11237
			newProps.start = event.start.clone();                                                                               // 11238
		}                                                                                                                    // 11239
		if (newProps.end === undefined) {                                                                                    // 11240
			newProps.end = event.end ? event.end.clone() : null;                                                                // 11241
		}                                                                                                                    // 11242
		if (newProps.allDay == null) { // is null or undefined?                                                              // 11243
			newProps.allDay = event.allDay;                                                                                     // 11244
		}                                                                                                                    // 11245
		normalizeEventDates(newProps);                                                                                       // 11246
                                                                                                                       // 11247
		// create normalized versions of the original props to compare against                                               // 11248
		// need a real end value, for diffing                                                                                // 11249
		oldProps = {                                                                                                         // 11250
			start: event._start.clone(),                                                                                        // 11251
			end: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),                           // 11252
			allDay: newProps.allDay // normalize the dates in the same regard as the new properties                             // 11253
		};                                                                                                                   // 11254
		normalizeEventDates(oldProps);                                                                                       // 11255
                                                                                                                       // 11256
		// need to clear the end date if explicitly changed to null                                                          // 11257
		clearEnd = event._end !== null && newProps.end === null;                                                             // 11258
                                                                                                                       // 11259
		// compute the delta for moving the start date                                                                       // 11260
		startDelta = diffDates(newProps.start, oldProps.start);                                                              // 11261
                                                                                                                       // 11262
		// compute the delta for moving the end date                                                                         // 11263
		if (newProps.end) {                                                                                                  // 11264
			endDelta = diffDates(newProps.end, oldProps.end);                                                                   // 11265
			durationDelta = endDelta.subtract(startDelta);                                                                      // 11266
		}                                                                                                                    // 11267
		else {                                                                                                               // 11268
			durationDelta = null;                                                                                               // 11269
		}                                                                                                                    // 11270
                                                                                                                       // 11271
		// gather all non-date-related properties                                                                            // 11272
		$.each(newProps, function(name, val) {                                                                               // 11273
			if (isMiscEventPropName(name)) {                                                                                    // 11274
				if (val !== undefined) {                                                                                           // 11275
					miscProps[name] = val;                                                                                            // 11276
				}                                                                                                                  // 11277
			}                                                                                                                   // 11278
		});                                                                                                                  // 11279
                                                                                                                       // 11280
		// apply the operations to the event and all related events                                                          // 11281
		undoFunc = mutateEvents(                                                                                             // 11282
			clientEvents(event._id), // get events with this ID                                                                 // 11283
			clearEnd,                                                                                                           // 11284
			newProps.allDay,                                                                                                    // 11285
			startDelta,                                                                                                         // 11286
			durationDelta,                                                                                                      // 11287
			miscProps                                                                                                           // 11288
		);                                                                                                                   // 11289
                                                                                                                       // 11290
		return {                                                                                                             // 11291
			dateDelta: startDelta,                                                                                              // 11292
			durationDelta: durationDelta,                                                                                       // 11293
			undo: undoFunc                                                                                                      // 11294
		};                                                                                                                   // 11295
	}                                                                                                                     // 11296
                                                                                                                       // 11297
                                                                                                                       // 11298
	// Modifies an array of events in the following ways (operations are in order):                                       // 11299
	// - clear the event's `end`                                                                                          // 11300
	// - convert the event to allDay                                                                                      // 11301
	// - add `dateDelta` to the start and end                                                                             // 11302
	// - add `durationDelta` to the event's duration                                                                      // 11303
	// - assign `miscProps` to the event                                                                                  // 11304
	//                                                                                                                    // 11305
	// Returns a function that can be called to undo all the operations.                                                  // 11306
	//                                                                                                                    // 11307
	// TODO: don't use so many closures. possible memory issues when lots of events with same ID.                         // 11308
	//                                                                                                                    // 11309
	function mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {                                // 11310
		var isAmbigTimezone = t.getIsAmbigTimezone();                                                                        // 11311
		var undoFunctions = [];                                                                                              // 11312
                                                                                                                       // 11313
		// normalize zero-length deltas to be null                                                                           // 11314
		if (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }                                                         // 11315
		if (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }                                             // 11316
                                                                                                                       // 11317
		$.each(events, function(i, event) {                                                                                  // 11318
			var oldProps;                                                                                                       // 11319
			var newProps;                                                                                                       // 11320
                                                                                                                       // 11321
			// build an object holding all the old values, both date-related and misc.                                          // 11322
			// for the undo function.                                                                                           // 11323
			oldProps = {                                                                                                        // 11324
				start: event.start.clone(),                                                                                        // 11325
				end: event.end ? event.end.clone() : null,                                                                         // 11326
				allDay: event.allDay                                                                                               // 11327
			};                                                                                                                  // 11328
			$.each(miscProps, function(name) {                                                                                  // 11329
				oldProps[name] = event[name];                                                                                      // 11330
			});                                                                                                                 // 11331
                                                                                                                       // 11332
			// new date-related properties. work off the original date snapshot.                                                // 11333
			// ok to use references because they will be thrown away when backupEventDates is called.                           // 11334
			newProps = {                                                                                                        // 11335
				start: event._start,                                                                                               // 11336
				end: event._end,                                                                                                   // 11337
				allDay: allDay // normalize the dates in the same regard as the new properties                                     // 11338
			};                                                                                                                  // 11339
			normalizeEventDates(newProps); // massages start/end/allDay                                                         // 11340
                                                                                                                       // 11341
			// strip or ensure the end date                                                                                     // 11342
			if (clearEnd) {                                                                                                     // 11343
				newProps.end = null;                                                                                               // 11344
			}                                                                                                                   // 11345
			else if (durationDelta && !newProps.end) { // the duration translation requires an end date                         // 11346
				newProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);                                              // 11347
			}                                                                                                                   // 11348
                                                                                                                       // 11349
			if (dateDelta) {                                                                                                    // 11350
				newProps.start.add(dateDelta);                                                                                     // 11351
				if (newProps.end) {                                                                                                // 11352
					newProps.end.add(dateDelta);                                                                                      // 11353
				}                                                                                                                  // 11354
			}                                                                                                                   // 11355
                                                                                                                       // 11356
			if (durationDelta) {                                                                                                // 11357
				newProps.end.add(durationDelta); // end already ensured above                                                      // 11358
			}                                                                                                                   // 11359
                                                                                                                       // 11360
			// if the dates have changed, and we know it is impossible to recompute the                                         // 11361
			// timezone offsets, strip the zone.                                                                                // 11362
			if (                                                                                                                // 11363
				isAmbigTimezone &&                                                                                                 // 11364
				!newProps.allDay &&                                                                                                // 11365
				(dateDelta || durationDelta)                                                                                       // 11366
			) {                                                                                                                 // 11367
				newProps.start.stripZone();                                                                                        // 11368
				if (newProps.end) {                                                                                                // 11369
					newProps.end.stripZone();                                                                                         // 11370
				}                                                                                                                  // 11371
			}                                                                                                                   // 11372
                                                                                                                       // 11373
			$.extend(event, miscProps, newProps); // copy over misc props, then date-related props                              // 11374
			backupEventDates(event); // regenerate internal _start/_end/_allDay                                                 // 11375
                                                                                                                       // 11376
			undoFunctions.push(function() {                                                                                     // 11377
				$.extend(event, oldProps);                                                                                         // 11378
				backupEventDates(event); // regenerate internal _start/_end/_allDay                                                // 11379
			});                                                                                                                 // 11380
		});                                                                                                                  // 11381
                                                                                                                       // 11382
		return function() {                                                                                                  // 11383
			for (var i = 0; i < undoFunctions.length; i++) {                                                                    // 11384
				undoFunctions[i]();                                                                                                // 11385
			}                                                                                                                   // 11386
		};                                                                                                                   // 11387
	}                                                                                                                     // 11388
                                                                                                                       // 11389
                                                                                                                       // 11390
	/* Business Hours                                                                                                     // 11391
	-----------------------------------------------------------------------------------------*/                           // 11392
                                                                                                                       // 11393
	t.getBusinessHoursEvents = getBusinessHoursEvents;                                                                    // 11394
                                                                                                                       // 11395
                                                                                                                       // 11396
	// Returns an array of events as to when the business hours occur in the given view.                                  // 11397
	// Abuse of our event system :(                                                                                       // 11398
	function getBusinessHoursEvents(wholeDay) {                                                                           // 11399
		var optionVal = options.businessHours;                                                                               // 11400
		var defaultVal = {                                                                                                   // 11401
			className: 'fc-nonbusiness',                                                                                        // 11402
			start: '09:00',                                                                                                     // 11403
			end: '17:00',                                                                                                       // 11404
			dow: [ 1, 2, 3, 4, 5 ], // monday - friday                                                                          // 11405
			rendering: 'inverse-background'                                                                                     // 11406
		};                                                                                                                   // 11407
		var view = t.getView();                                                                                              // 11408
		var eventInput;                                                                                                      // 11409
                                                                                                                       // 11410
		if (optionVal) { // `true` (which means "use the defaults") or an override object                                    // 11411
			eventInput = $.extend(                                                                                              // 11412
				{}, // copy to a new object in either case                                                                         // 11413
				defaultVal,                                                                                                        // 11414
				typeof optionVal === 'object' ? optionVal : {} // override the defaults                                            // 11415
			);                                                                                                                  // 11416
		}                                                                                                                    // 11417
                                                                                                                       // 11418
		if (eventInput) {                                                                                                    // 11419
                                                                                                                       // 11420
			// if a whole-day series is requested, clear the start/end times                                                    // 11421
			if (wholeDay) {                                                                                                     // 11422
				eventInput.start = null;                                                                                           // 11423
				eventInput.end = null;                                                                                             // 11424
			}                                                                                                                   // 11425
                                                                                                                       // 11426
			return expandEvent(                                                                                                 // 11427
				buildEventFromInput(eventInput),                                                                                   // 11428
				view.start,                                                                                                        // 11429
				view.end                                                                                                           // 11430
			);                                                                                                                  // 11431
		}                                                                                                                    // 11432
                                                                                                                       // 11433
		return [];                                                                                                           // 11434
	}                                                                                                                     // 11435
                                                                                                                       // 11436
                                                                                                                       // 11437
	/* Overlapping / Constraining                                                                                         // 11438
	-----------------------------------------------------------------------------------------*/                           // 11439
                                                                                                                       // 11440
	t.isEventSpanAllowed = isEventSpanAllowed;                                                                            // 11441
	t.isExternalSpanAllowed = isExternalSpanAllowed;                                                                      // 11442
	t.isSelectionSpanAllowed = isSelectionSpanAllowed;                                                                    // 11443
                                                                                                                       // 11444
                                                                                                                       // 11445
	// Determines if the given event can be relocated to the given span (unzoned start/end with other misc data)          // 11446
	function isEventSpanAllowed(span, event) {                                                                            // 11447
		var source = event.source || {};                                                                                     // 11448
		var constraint = firstDefined(                                                                                       // 11449
			event.constraint,                                                                                                   // 11450
			source.constraint,                                                                                                  // 11451
			options.eventConstraint                                                                                             // 11452
		);                                                                                                                   // 11453
		var overlap = firstDefined(                                                                                          // 11454
			event.overlap,                                                                                                      // 11455
			source.overlap,                                                                                                     // 11456
			options.eventOverlap                                                                                                // 11457
		);                                                                                                                   // 11458
		return isSpanAllowed(span, constraint, overlap, event);                                                              // 11459
	}                                                                                                                     // 11460
                                                                                                                       // 11461
                                                                                                                       // 11462
	// Determines if an external event can be relocated to the given span (unzoned start/end with other misc data)        // 11463
	function isExternalSpanAllowed(eventSpan, eventLocation, eventProps) {                                                // 11464
		var eventInput;                                                                                                      // 11465
		var event;                                                                                                           // 11466
                                                                                                                       // 11467
		// note: very similar logic is in View's reportExternalDrop                                                          // 11468
		if (eventProps) {                                                                                                    // 11469
			eventInput = $.extend({}, eventProps, eventLocation);                                                               // 11470
			event = expandEvent(buildEventFromInput(eventInput))[0];                                                            // 11471
		}                                                                                                                    // 11472
                                                                                                                       // 11473
		if (event) {                                                                                                         // 11474
			return isEventSpanAllowed(eventSpan, event);                                                                        // 11475
		}                                                                                                                    // 11476
		else { // treat it as a selection                                                                                    // 11477
                                                                                                                       // 11478
			return isSelectionSpanAllowed(eventSpan);                                                                           // 11479
		}                                                                                                                    // 11480
	}                                                                                                                     // 11481
                                                                                                                       // 11482
                                                                                                                       // 11483
	// Determines the given span (unzoned start/end with other misc data) can be selected.                                // 11484
	function isSelectionSpanAllowed(span) {                                                                               // 11485
		return isSpanAllowed(span, options.selectConstraint, options.selectOverlap);                                         // 11486
	}                                                                                                                     // 11487
                                                                                                                       // 11488
                                                                                                                       // 11489
	// Returns true if the given span (caused by an event drop/resize or a selection) is allowed to exist                 // 11490
	// according to the constraint/overlap settings.                                                                      // 11491
	// `event` is not required if checking a selection.                                                                   // 11492
	function isSpanAllowed(span, constraint, overlap, event) {                                                            // 11493
		var constraintEvents;                                                                                                // 11494
		var anyContainment;                                                                                                  // 11495
		var peerEvents;                                                                                                      // 11496
		var i, peerEvent;                                                                                                    // 11497
		var peerOverlap;                                                                                                     // 11498
                                                                                                                       // 11499
		// the range must be fully contained by at least one of produced constraint events                                   // 11500
		if (constraint != null) {                                                                                            // 11501
                                                                                                                       // 11502
			// not treated as an event! intermediate data structure                                                             // 11503
			// TODO: use ranges in the future                                                                                   // 11504
			constraintEvents = constraintToEvents(constraint);                                                                  // 11505
                                                                                                                       // 11506
			anyContainment = false;                                                                                             // 11507
			for (i = 0; i < constraintEvents.length; i++) {                                                                     // 11508
				if (eventContainsRange(constraintEvents[i], span)) {                                                               // 11509
					anyContainment = true;                                                                                            // 11510
					break;                                                                                                            // 11511
				}                                                                                                                  // 11512
			}                                                                                                                   // 11513
                                                                                                                       // 11514
			if (!anyContainment) {                                                                                              // 11515
				return false;                                                                                                      // 11516
			}                                                                                                                   // 11517
		}                                                                                                                    // 11518
                                                                                                                       // 11519
		peerEvents = t.getPeerEvents(span, event);                                                                           // 11520
                                                                                                                       // 11521
		for (i = 0; i < peerEvents.length; i++)  {                                                                           // 11522
			peerEvent = peerEvents[i];                                                                                          // 11523
                                                                                                                       // 11524
			// there needs to be an actual intersection before disallowing anything                                             // 11525
			if (eventIntersectsRange(peerEvent, span)) {                                                                        // 11526
                                                                                                                       // 11527
				// evaluate overlap for the given range and short-circuit if necessary                                             // 11528
				if (overlap === false) {                                                                                           // 11529
					return false;                                                                                                     // 11530
				}                                                                                                                  // 11531
				// if the event's overlap is a test function, pass the peer event in question as the first param                   // 11532
				else if (typeof overlap === 'function' && !overlap(peerEvent, event)) {                                            // 11533
					return false;                                                                                                     // 11534
				}                                                                                                                  // 11535
                                                                                                                       // 11536
				// if we are computing if the given range is allowable for an event, consider the other event's                    // 11537
				// EventObject-specific or Source-specific `overlap` property                                                      // 11538
				if (event) {                                                                                                       // 11539
					peerOverlap = firstDefined(                                                                                       // 11540
						peerEvent.overlap,                                                                                               // 11541
						(peerEvent.source || {}).overlap                                                                                 // 11542
						// we already considered the global `eventOverlap`                                                               // 11543
					);                                                                                                                // 11544
					if (peerOverlap === false) {                                                                                      // 11545
						return false;                                                                                                    // 11546
					}                                                                                                                 // 11547
					// if the peer event's overlap is a test function, pass the subject event as the first param                      // 11548
					if (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {                                        // 11549
						return false;                                                                                                    // 11550
					}                                                                                                                 // 11551
				}                                                                                                                  // 11552
			}                                                                                                                   // 11553
		}                                                                                                                    // 11554
                                                                                                                       // 11555
		return true;                                                                                                         // 11556
	}                                                                                                                     // 11557
                                                                                                                       // 11558
                                                                                                                       // 11559
	// Given an event input from the API, produces an array of event objects. Possible event inputs:                      // 11560
	// 'businessHours'                                                                                                    // 11561
	// An event ID (number or string)                                                                                     // 11562
	// An object with specific start/end dates or a recurring event (like what businessHours accepts)                     // 11563
	function constraintToEvents(constraintInput) {                                                                        // 11564
                                                                                                                       // 11565
		if (constraintInput === 'businessHours') {                                                                           // 11566
			return getBusinessHoursEvents();                                                                                    // 11567
		}                                                                                                                    // 11568
                                                                                                                       // 11569
		if (typeof constraintInput === 'object') {                                                                           // 11570
			return expandEvent(buildEventFromInput(constraintInput));                                                           // 11571
		}                                                                                                                    // 11572
                                                                                                                       // 11573
		return clientEvents(constraintInput); // probably an ID                                                              // 11574
	}                                                                                                                     // 11575
                                                                                                                       // 11576
                                                                                                                       // 11577
	// Does the event's date range fully contain the given range?                                                         // 11578
	// start/end already assumed to have stripped zones :(                                                                // 11579
	function eventContainsRange(event, range) {                                                                           // 11580
		var eventStart = event.start.clone().stripZone();                                                                    // 11581
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 11582
                                                                                                                       // 11583
		return range.start >= eventStart && range.end <= eventEnd;                                                           // 11584
	}                                                                                                                     // 11585
                                                                                                                       // 11586
                                                                                                                       // 11587
	// Does the event's date range intersect with the given range?                                                        // 11588
	// start/end already assumed to have stripped zones :(                                                                // 11589
	function eventIntersectsRange(event, range) {                                                                         // 11590
		var eventStart = event.start.clone().stripZone();                                                                    // 11591
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 11592
                                                                                                                       // 11593
		return range.start < eventEnd && range.end > eventStart;                                                             // 11594
	}                                                                                                                     // 11595
                                                                                                                       // 11596
                                                                                                                       // 11597
	t.getEventCache = function() {                                                                                        // 11598
		return cache;                                                                                                        // 11599
	};                                                                                                                    // 11600
                                                                                                                       // 11601
}                                                                                                                      // 11602
                                                                                                                       // 11603
                                                                                                                       // 11604
// Returns a list of events that the given event should be compared against when being considered for a move to        // 11605
// the specified span. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.            // 11606
Calendar.prototype.getPeerEvents = function(span, event) {                                                             // 11607
	var cache = this.getEventCache();                                                                                     // 11608
	var peerEvents = [];                                                                                                  // 11609
	var i, otherEvent;                                                                                                    // 11610
                                                                                                                       // 11611
	for (i = 0; i < cache.length; i++) {                                                                                  // 11612
		otherEvent = cache[i];                                                                                               // 11613
		if (                                                                                                                 // 11614
			!event ||                                                                                                           // 11615
			event._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events               // 11616
		) {                                                                                                                  // 11617
			peerEvents.push(otherEvent);                                                                                        // 11618
		}                                                                                                                    // 11619
	}                                                                                                                     // 11620
                                                                                                                       // 11621
	return peerEvents;                                                                                                    // 11622
};                                                                                                                     // 11623
                                                                                                                       // 11624
                                                                                                                       // 11625
// updates the "backup" properties, which are preserved in order to compute diffs later on.                            // 11626
function backupEventDates(event) {                                                                                     // 11627
	event._allDay = event.allDay;                                                                                         // 11628
	event._start = event.start.clone();                                                                                   // 11629
	event._end = event.end ? event.end.clone() : null;                                                                    // 11630
}                                                                                                                      // 11631
                                                                                                                       // 11632
;;                                                                                                                     // 11633
                                                                                                                       // 11634
/* An abstract class for the "basic" views, as well as month view. Renders one or more rows of day cells.              // 11635
----------------------------------------------------------------------------------------------------------------------*/
// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.                                   // 11637
// It is responsible for managing width/height.                                                                        // 11638
                                                                                                                       // 11639
var BasicView = FC.BasicView = View.extend({                                                                           // 11640
                                                                                                                       // 11641
	scroller: null,                                                                                                       // 11642
                                                                                                                       // 11643
	dayGridClass: DayGrid, // class the dayGrid will be instantiated from (overridable by subclasses)                     // 11644
	dayGrid: null, // the main subcomponent that does most of the heavy lifting                                           // 11645
                                                                                                                       // 11646
	dayNumbersVisible: false, // display day numbers on each day cell?                                                    // 11647
	weekNumbersVisible: false, // display week numbers along the side?                                                    // 11648
                                                                                                                       // 11649
	weekNumberWidth: null, // width of all the week-number cells running down the side                                    // 11650
                                                                                                                       // 11651
	headContainerEl: null, // div that hold's the dayGrid's rendered date header                                          // 11652
	headRowEl: null, // the fake row element of the day-of-week header                                                    // 11653
                                                                                                                       // 11654
                                                                                                                       // 11655
	initialize: function() {                                                                                              // 11656
		this.dayGrid = this.instantiateDayGrid();                                                                            // 11657
                                                                                                                       // 11658
		this.scroller = new Scroller({                                                                                       // 11659
			overflowX: 'hidden',                                                                                                // 11660
			overflowY: 'auto'                                                                                                   // 11661
		});                                                                                                                  // 11662
	},                                                                                                                    // 11663
                                                                                                                       // 11664
                                                                                                                       // 11665
	// Generates the DayGrid object this view needs. Draws from this.dayGridClass                                         // 11666
	instantiateDayGrid: function() {                                                                                      // 11667
		// generate a subclass on the fly with BasicView-specific behavior                                                   // 11668
		// TODO: cache this subclass                                                                                         // 11669
		var subclass = this.dayGridClass.extend(basicDayGridMethods);                                                        // 11670
                                                                                                                       // 11671
		return new subclass(this);                                                                                           // 11672
	},                                                                                                                    // 11673
                                                                                                                       // 11674
                                                                                                                       // 11675
	// Sets the display range and computes all necessary dates                                                            // 11676
	setRange: function(range) {                                                                                           // 11677
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 11678
                                                                                                                       // 11679
		this.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange                         // 11680
		this.dayGrid.setRange(range);                                                                                        // 11681
	},                                                                                                                    // 11682
                                                                                                                       // 11683
                                                                                                                       // 11684
	// Compute the value to feed into setRange. Overrides superclass.                                                     // 11685
	computeRange: function(date) {                                                                                        // 11686
		var range = View.prototype.computeRange.call(this, date); // get value from the super-method                         // 11687
                                                                                                                       // 11688
		// year and month views should be aligned with weeks. this is already done for week                                  // 11689
		if (/year|month/.test(range.intervalUnit)) {                                                                         // 11690
			range.start.startOf('week');                                                                                        // 11691
			range.start = this.skipHiddenDays(range.start);                                                                     // 11692
                                                                                                                       // 11693
			// make end-of-week if not already                                                                                  // 11694
			if (range.end.weekday()) {                                                                                          // 11695
				range.end.add(1, 'week').startOf('week');                                                                          // 11696
				range.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards                                // 11697
			}                                                                                                                   // 11698
		}                                                                                                                    // 11699
                                                                                                                       // 11700
		return range;                                                                                                        // 11701
	},                                                                                                                    // 11702
                                                                                                                       // 11703
                                                                                                                       // 11704
	// Renders the view into `this.el`, which should already be assigned                                                  // 11705
	renderDates: function() {                                                                                             // 11706
                                                                                                                       // 11707
		this.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible                                     // 11708
		this.weekNumbersVisible = this.opt('weekNumbers');                                                                   // 11709
		this.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;                                     // 11710
                                                                                                                       // 11711
		this.el.addClass('fc-basic-view').html(this.renderSkeletonHtml());                                                   // 11712
		this.renderHead();                                                                                                   // 11713
                                                                                                                       // 11714
		this.scroller.render();                                                                                              // 11715
		var dayGridContainerEl = this.scroller.el.addClass('fc-day-grid-container');                                         // 11716
		var dayGridEl = $('<div class="fc-day-grid" />').appendTo(dayGridContainerEl);                                       // 11717
		this.el.find('.fc-body > tr > td').append(dayGridContainerEl);                                                       // 11718
                                                                                                                       // 11719
		this.dayGrid.setElement(dayGridEl);                                                                                  // 11720
		this.dayGrid.renderDates(this.hasRigidRows());                                                                       // 11721
	},                                                                                                                    // 11722
                                                                                                                       // 11723
                                                                                                                       // 11724
	// render the day-of-week headers                                                                                     // 11725
	renderHead: function() {                                                                                              // 11726
		this.headContainerEl =                                                                                               // 11727
			this.el.find('.fc-head-container')                                                                                  // 11728
				.html(this.dayGrid.renderHeadHtml());                                                                              // 11729
		this.headRowEl = this.headContainerEl.find('.fc-row');                                                               // 11730
	},                                                                                                                    // 11731
                                                                                                                       // 11732
                                                                                                                       // 11733
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 11734
	// always completely kill the dayGrid's rendering.                                                                    // 11735
	unrenderDates: function() {                                                                                           // 11736
		this.dayGrid.unrenderDates();                                                                                        // 11737
		this.dayGrid.removeElement();                                                                                        // 11738
		this.scroller.destroy();                                                                                             // 11739
	},                                                                                                                    // 11740
                                                                                                                       // 11741
                                                                                                                       // 11742
	renderBusinessHours: function() {                                                                                     // 11743
		this.dayGrid.renderBusinessHours();                                                                                  // 11744
	},                                                                                                                    // 11745
                                                                                                                       // 11746
                                                                                                                       // 11747
	// Builds the HTML skeleton for the view.                                                                             // 11748
	// The day-grid component will render inside of a container defined by this HTML.                                     // 11749
	renderSkeletonHtml: function() {                                                                                      // 11750
		return '' +                                                                                                          // 11751
			'<table>' +                                                                                                         // 11752
				'<thead class="fc-head">' +                                                                                        // 11753
					'<tr>' +                                                                                                          // 11754
						'<td class="fc-head-container ' + this.widgetHeaderClass + '"></td>' +                                           // 11755
					'</tr>' +                                                                                                         // 11756
				'</thead>' +                                                                                                       // 11757
				'<tbody class="fc-body">' +                                                                                        // 11758
					'<tr>' +                                                                                                          // 11759
						'<td class="' + this.widgetContentClass + '"></td>' +                                                            // 11760
					'</tr>' +                                                                                                         // 11761
				'</tbody>' +                                                                                                       // 11762
			'</table>';                                                                                                         // 11763
	},                                                                                                                    // 11764
                                                                                                                       // 11765
                                                                                                                       // 11766
	// Generates an HTML attribute string for setting the width of the week number column, if it is known                 // 11767
	weekNumberStyleAttr: function() {                                                                                     // 11768
		if (this.weekNumberWidth !== null) {                                                                                 // 11769
			return 'style="width:' + this.weekNumberWidth + 'px"';                                                              // 11770
		}                                                                                                                    // 11771
		return '';                                                                                                           // 11772
	},                                                                                                                    // 11773
                                                                                                                       // 11774
                                                                                                                       // 11775
	// Determines whether each row should have a constant height                                                          // 11776
	hasRigidRows: function() {                                                                                            // 11777
		var eventLimit = this.opt('eventLimit');                                                                             // 11778
		return eventLimit && typeof eventLimit !== 'number';                                                                 // 11779
	},                                                                                                                    // 11780
                                                                                                                       // 11781
                                                                                                                       // 11782
	/* Dimensions                                                                                                         // 11783
	------------------------------------------------------------------------------------------------------------------*/  // 11784
                                                                                                                       // 11785
                                                                                                                       // 11786
	// Refreshes the horizontal dimensions of the view                                                                    // 11787
	updateWidth: function() {                                                                                             // 11788
		if (this.weekNumbersVisible) {                                                                                       // 11789
			// Make sure all week number cells running down the side have the same width.                                       // 11790
			// Record the width for cells created later.                                                                        // 11791
			this.weekNumberWidth = matchCellWidths(                                                                             // 11792
				this.el.find('.fc-week-number')                                                                                    // 11793
			);                                                                                                                  // 11794
		}                                                                                                                    // 11795
	},                                                                                                                    // 11796
                                                                                                                       // 11797
                                                                                                                       // 11798
	// Adjusts the vertical dimensions of the view to the specified values                                                // 11799
	setHeight: function(totalHeight, isAuto) {                                                                            // 11800
		var eventLimit = this.opt('eventLimit');                                                                             // 11801
		var scrollerHeight;                                                                                                  // 11802
		var scrollbarWidths;                                                                                                 // 11803
                                                                                                                       // 11804
		// reset all heights to be natural                                                                                   // 11805
		this.scroller.clear();                                                                                               // 11806
		uncompensateScroll(this.headRowEl);                                                                                  // 11807
                                                                                                                       // 11808
		this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed                                             // 11809
                                                                                                                       // 11810
		// is the event limit a constant level number?                                                                       // 11811
		if (eventLimit && typeof eventLimit === 'number') {                                                                  // 11812
			this.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after                  // 11813
		}                                                                                                                    // 11814
                                                                                                                       // 11815
		// distribute the height to the rows                                                                                 // 11816
		// (totalHeight is a "recommended" value if isAuto)                                                                  // 11817
		scrollerHeight = this.computeScrollerHeight(totalHeight);                                                            // 11818
		this.setGridHeight(scrollerHeight, isAuto);                                                                          // 11819
                                                                                                                       // 11820
		// is the event limit dynamically calculated?                                                                        // 11821
		if (eventLimit && typeof eventLimit !== 'number') {                                                                  // 11822
			this.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set                  // 11823
		}                                                                                                                    // 11824
                                                                                                                       // 11825
		if (!isAuto) { // should we force dimensions of the scroll container?                                                // 11826
                                                                                                                       // 11827
			this.scroller.setHeight(scrollerHeight);                                                                            // 11828
			scrollbarWidths = this.scroller.getScrollbarWidths();                                                               // 11829
                                                                                                                       // 11830
			if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?                                           // 11831
                                                                                                                       // 11832
				compensateScroll(this.headRowEl, scrollbarWidths);                                                                 // 11833
                                                                                                                       // 11834
				// doing the scrollbar compensation might have created text overflow which created more height. redo               // 11835
				scrollerHeight = this.computeScrollerHeight(totalHeight);                                                          // 11836
				this.scroller.setHeight(scrollerHeight);                                                                           // 11837
			}                                                                                                                   // 11838
                                                                                                                       // 11839
			// guarantees the same scrollbar widths                                                                             // 11840
			this.scroller.lockOverflow(scrollbarWidths);                                                                        // 11841
		}                                                                                                                    // 11842
	},                                                                                                                    // 11843
                                                                                                                       // 11844
                                                                                                                       // 11845
	// given a desired total height of the view, returns what the height of the scroller should be                        // 11846
	computeScrollerHeight: function(totalHeight) {                                                                        // 11847
		return totalHeight -                                                                                                 // 11848
			subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller                             // 11849
	},                                                                                                                    // 11850
                                                                                                                       // 11851
                                                                                                                       // 11852
	// Sets the height of just the DayGrid component in this view                                                         // 11853
	setGridHeight: function(height, isAuto) {                                                                             // 11854
		if (isAuto) {                                                                                                        // 11855
			undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding                  // 11856
		}                                                                                                                    // 11857
		else {                                                                                                               // 11858
			distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows                   // 11859
		}                                                                                                                    // 11860
	},                                                                                                                    // 11861
                                                                                                                       // 11862
                                                                                                                       // 11863
	/* Scroll                                                                                                             // 11864
	------------------------------------------------------------------------------------------------------------------*/  // 11865
                                                                                                                       // 11866
                                                                                                                       // 11867
	queryScroll: function() {                                                                                             // 11868
		return this.scroller.getScrollTop();                                                                                 // 11869
	},                                                                                                                    // 11870
                                                                                                                       // 11871
                                                                                                                       // 11872
	setScroll: function(top) {                                                                                            // 11873
		this.scroller.setScrollTop(top);                                                                                     // 11874
	},                                                                                                                    // 11875
                                                                                                                       // 11876
                                                                                                                       // 11877
	/* Hit Areas                                                                                                          // 11878
	------------------------------------------------------------------------------------------------------------------*/  // 11879
	// forward all hit-related method calls to dayGrid                                                                    // 11880
                                                                                                                       // 11881
                                                                                                                       // 11882
	prepareHits: function() {                                                                                             // 11883
		this.dayGrid.prepareHits();                                                                                          // 11884
	},                                                                                                                    // 11885
                                                                                                                       // 11886
                                                                                                                       // 11887
	releaseHits: function() {                                                                                             // 11888
		this.dayGrid.releaseHits();                                                                                          // 11889
	},                                                                                                                    // 11890
                                                                                                                       // 11891
                                                                                                                       // 11892
	queryHit: function(left, top) {                                                                                       // 11893
		return this.dayGrid.queryHit(left, top);                                                                             // 11894
	},                                                                                                                    // 11895
                                                                                                                       // 11896
                                                                                                                       // 11897
	getHitSpan: function(hit) {                                                                                           // 11898
		return this.dayGrid.getHitSpan(hit);                                                                                 // 11899
	},                                                                                                                    // 11900
                                                                                                                       // 11901
                                                                                                                       // 11902
	getHitEl: function(hit) {                                                                                             // 11903
		return this.dayGrid.getHitEl(hit);                                                                                   // 11904
	},                                                                                                                    // 11905
                                                                                                                       // 11906
                                                                                                                       // 11907
	/* Events                                                                                                             // 11908
	------------------------------------------------------------------------------------------------------------------*/  // 11909
                                                                                                                       // 11910
                                                                                                                       // 11911
	// Renders the given events onto the view and populates the segments array                                            // 11912
	renderEvents: function(events) {                                                                                      // 11913
		this.dayGrid.renderEvents(events);                                                                                   // 11914
                                                                                                                       // 11915
		this.updateHeight(); // must compensate for events that overflow the row                                             // 11916
	},                                                                                                                    // 11917
                                                                                                                       // 11918
                                                                                                                       // 11919
	// Retrieves all segment objects that are rendered in the view                                                        // 11920
	getEventSegs: function() {                                                                                            // 11921
		return this.dayGrid.getEventSegs();                                                                                  // 11922
	},                                                                                                                    // 11923
                                                                                                                       // 11924
                                                                                                                       // 11925
	// Unrenders all event elements and clears internal segment data                                                      // 11926
	unrenderEvents: function() {                                                                                          // 11927
		this.dayGrid.unrenderEvents();                                                                                       // 11928
                                                                                                                       // 11929
		// we DON'T need to call updateHeight() because:                                                                     // 11930
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 11931
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 11932
	},                                                                                                                    // 11933
                                                                                                                       // 11934
                                                                                                                       // 11935
	/* Dragging (for both events and external elements)                                                                   // 11936
	------------------------------------------------------------------------------------------------------------------*/  // 11937
                                                                                                                       // 11938
                                                                                                                       // 11939
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 11940
	renderDrag: function(dropLocation, seg) {                                                                             // 11941
		return this.dayGrid.renderDrag(dropLocation, seg);                                                                   // 11942
	},                                                                                                                    // 11943
                                                                                                                       // 11944
                                                                                                                       // 11945
	unrenderDrag: function() {                                                                                            // 11946
		this.dayGrid.unrenderDrag();                                                                                         // 11947
	},                                                                                                                    // 11948
                                                                                                                       // 11949
                                                                                                                       // 11950
	/* Selection                                                                                                          // 11951
	------------------------------------------------------------------------------------------------------------------*/  // 11952
                                                                                                                       // 11953
                                                                                                                       // 11954
	// Renders a visual indication of a selection                                                                         // 11955
	renderSelection: function(span) {                                                                                     // 11956
		this.dayGrid.renderSelection(span);                                                                                  // 11957
	},                                                                                                                    // 11958
                                                                                                                       // 11959
                                                                                                                       // 11960
	// Unrenders a visual indications of a selection                                                                      // 11961
	unrenderSelection: function() {                                                                                       // 11962
		this.dayGrid.unrenderSelection();                                                                                    // 11963
	}                                                                                                                     // 11964
                                                                                                                       // 11965
});                                                                                                                    // 11966
                                                                                                                       // 11967
                                                                                                                       // 11968
// Methods that will customize the rendering behavior of the BasicView's dayGrid                                       // 11969
var basicDayGridMethods = {                                                                                            // 11970
                                                                                                                       // 11971
                                                                                                                       // 11972
	// Generates the HTML that will go before the day-of week header cells                                                // 11973
	renderHeadIntroHtml: function() {                                                                                     // 11974
		var view = this.view;                                                                                                // 11975
                                                                                                                       // 11976
		if (view.weekNumbersVisible) {                                                                                       // 11977
			return '' +                                                                                                         // 11978
				'<th class="fc-week-number ' + view.widgetHeaderClass + '" ' + view.weekNumberStyleAttr() + '>' +                  // 11979
					'<span>' + // needed for matchCellWidths                                                                          // 11980
						htmlEscape(view.opt('weekNumberTitle')) +                                                                        // 11981
					'</span>' +                                                                                                       // 11982
				'</th>';                                                                                                           // 11983
		}                                                                                                                    // 11984
                                                                                                                       // 11985
		return '';                                                                                                           // 11986
	},                                                                                                                    // 11987
                                                                                                                       // 11988
                                                                                                                       // 11989
	// Generates the HTML that will go before content-skeleton cells that display the day/week numbers                    // 11990
	renderNumberIntroHtml: function(row) {                                                                                // 11991
		var view = this.view;                                                                                                // 11992
                                                                                                                       // 11993
		if (view.weekNumbersVisible) {                                                                                       // 11994
			return '' +                                                                                                         // 11995
				'<td class="fc-week-number" ' + view.weekNumberStyleAttr() + '>' +                                                 // 11996
					'<span>' + // needed for matchCellWidths                                                                          // 11997
						this.getCellDate(row, 0).format('w') +                                                                           // 11998
					'</span>' +                                                                                                       // 11999
				'</td>';                                                                                                           // 12000
		}                                                                                                                    // 12001
                                                                                                                       // 12002
		return '';                                                                                                           // 12003
	},                                                                                                                    // 12004
                                                                                                                       // 12005
                                                                                                                       // 12006
	// Generates the HTML that goes before the day bg cells for each day-row                                              // 12007
	renderBgIntroHtml: function() {                                                                                       // 12008
		var view = this.view;                                                                                                // 12009
                                                                                                                       // 12010
		if (view.weekNumbersVisible) {                                                                                       // 12011
			return '<td class="fc-week-number ' + view.widgetContentClass + '" ' +                                              // 12012
				view.weekNumberStyleAttr() + '></td>';                                                                             // 12013
		}                                                                                                                    // 12014
                                                                                                                       // 12015
		return '';                                                                                                           // 12016
	},                                                                                                                    // 12017
                                                                                                                       // 12018
                                                                                                                       // 12019
	// Generates the HTML that goes before every other type of row generated by DayGrid.                                  // 12020
	// Affects helper-skeleton and highlight-skeleton rows.                                                               // 12021
	renderIntroHtml: function() {                                                                                         // 12022
		var view = this.view;                                                                                                // 12023
                                                                                                                       // 12024
		if (view.weekNumbersVisible) {                                                                                       // 12025
			return '<td class="fc-week-number" ' + view.weekNumberStyleAttr() + '></td>';                                       // 12026
		}                                                                                                                    // 12027
                                                                                                                       // 12028
		return '';                                                                                                           // 12029
	}                                                                                                                     // 12030
                                                                                                                       // 12031
};                                                                                                                     // 12032
                                                                                                                       // 12033
;;                                                                                                                     // 12034
                                                                                                                       // 12035
/* A month view with day cells running in rows (one-per-week) and columns                                              // 12036
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 12038
var MonthView = FC.MonthView = BasicView.extend({                                                                      // 12039
                                                                                                                       // 12040
	// Produces information about what range to display                                                                   // 12041
	computeRange: function(date) {                                                                                        // 12042
		var range = BasicView.prototype.computeRange.call(this, date); // get value from super-method                        // 12043
		var rowCnt;                                                                                                          // 12044
                                                                                                                       // 12045
		// ensure 6 weeks                                                                                                    // 12046
		if (this.isFixedWeeks()) {                                                                                           // 12047
			rowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays         // 12048
			range.end.add(6 - rowCnt, 'weeks');                                                                                 // 12049
		}                                                                                                                    // 12050
                                                                                                                       // 12051
		return range;                                                                                                        // 12052
	},                                                                                                                    // 12053
                                                                                                                       // 12054
                                                                                                                       // 12055
	// Overrides the default BasicView behavior to have special multi-week auto-height logic                              // 12056
	setGridHeight: function(height, isAuto) {                                                                             // 12057
                                                                                                                       // 12058
		isAuto = isAuto || this.opt('weekMode') === 'variable'; // LEGACY: weekMode is deprecated                            // 12059
                                                                                                                       // 12060
		// if auto, make the height of each row the height that it would be if there were 6 weeks                            // 12061
		if (isAuto) {                                                                                                        // 12062
			height *= this.rowCnt / 6;                                                                                          // 12063
		}                                                                                                                    // 12064
                                                                                                                       // 12065
		distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows         // 12066
	},                                                                                                                    // 12067
                                                                                                                       // 12068
                                                                                                                       // 12069
	isFixedWeeks: function() {                                                                                            // 12070
		var weekMode = this.opt('weekMode'); // LEGACY: weekMode is deprecated                                               // 12071
		if (weekMode) {                                                                                                      // 12072
			return weekMode === 'fixed'; // if any other type of weekMode, assume NOT fixed                                     // 12073
		}                                                                                                                    // 12074
                                                                                                                       // 12075
		return this.opt('fixedWeekCount');                                                                                   // 12076
	}                                                                                                                     // 12077
                                                                                                                       // 12078
});                                                                                                                    // 12079
                                                                                                                       // 12080
;;                                                                                                                     // 12081
                                                                                                                       // 12082
fcViews.basic = {                                                                                                      // 12083
	'class': BasicView                                                                                                    // 12084
};                                                                                                                     // 12085
                                                                                                                       // 12086
fcViews.basicDay = {                                                                                                   // 12087
	type: 'basic',                                                                                                        // 12088
	duration: { days: 1 }                                                                                                 // 12089
};                                                                                                                     // 12090
                                                                                                                       // 12091
fcViews.basicWeek = {                                                                                                  // 12092
	type: 'basic',                                                                                                        // 12093
	duration: { weeks: 1 }                                                                                                // 12094
};                                                                                                                     // 12095
                                                                                                                       // 12096
fcViews.month = {                                                                                                      // 12097
	'class': MonthView,                                                                                                   // 12098
	duration: { months: 1 }, // important for prev/next                                                                   // 12099
	defaults: {                                                                                                           // 12100
		fixedWeekCount: true                                                                                                 // 12101
	}                                                                                                                     // 12102
};                                                                                                                     // 12103
;;                                                                                                                     // 12104
                                                                                                                       // 12105
/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.       // 12106
----------------------------------------------------------------------------------------------------------------------*/
// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).             // 12108
// Responsible for managing width/height.                                                                              // 12109
                                                                                                                       // 12110
var AgendaView = FC.AgendaView = View.extend({                                                                         // 12111
                                                                                                                       // 12112
	scroller: null,                                                                                                       // 12113
                                                                                                                       // 12114
	timeGridClass: TimeGrid, // class used to instantiate the timeGrid. subclasses can override                           // 12115
	timeGrid: null, // the main time-grid subcomponent of this view                                                       // 12116
                                                                                                                       // 12117
	dayGridClass: DayGrid, // class used to instantiate the dayGrid. subclasses can override                              // 12118
	dayGrid: null, // the "all-day" subcomponent. if all-day is turned off, this will be null                             // 12119
                                                                                                                       // 12120
	axisWidth: null, // the width of the time axis running down the side                                                  // 12121
                                                                                                                       // 12122
	headContainerEl: null, // div that hold's the timeGrid's rendered date header                                         // 12123
	noScrollRowEls: null, // set of fake row elements that must compensate when scroller has scrollbars                   // 12124
                                                                                                                       // 12125
	// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath                      // 12126
	bottomRuleEl: null,                                                                                                   // 12127
                                                                                                                       // 12128
                                                                                                                       // 12129
	initialize: function() {                                                                                              // 12130
		this.timeGrid = this.instantiateTimeGrid();                                                                          // 12131
                                                                                                                       // 12132
		if (this.opt('allDaySlot')) { // should we display the "all-day" area?                                               // 12133
			this.dayGrid = this.instantiateDayGrid(); // the all-day subcomponent of this view                                  // 12134
		}                                                                                                                    // 12135
                                                                                                                       // 12136
		this.scroller = new Scroller({                                                                                       // 12137
			overflowX: 'hidden',                                                                                                // 12138
			overflowY: 'auto'                                                                                                   // 12139
		});                                                                                                                  // 12140
	},                                                                                                                    // 12141
                                                                                                                       // 12142
                                                                                                                       // 12143
	// Instantiates the TimeGrid object this view needs. Draws from this.timeGridClass                                    // 12144
	instantiateTimeGrid: function() {                                                                                     // 12145
		var subclass = this.timeGridClass.extend(agendaTimeGridMethods);                                                     // 12146
                                                                                                                       // 12147
		return new subclass(this);                                                                                           // 12148
	},                                                                                                                    // 12149
                                                                                                                       // 12150
                                                                                                                       // 12151
	// Instantiates the DayGrid object this view might need. Draws from this.dayGridClass                                 // 12152
	instantiateDayGrid: function() {                                                                                      // 12153
		var subclass = this.dayGridClass.extend(agendaDayGridMethods);                                                       // 12154
                                                                                                                       // 12155
		return new subclass(this);                                                                                           // 12156
	},                                                                                                                    // 12157
                                                                                                                       // 12158
                                                                                                                       // 12159
	/* Rendering                                                                                                          // 12160
	------------------------------------------------------------------------------------------------------------------*/  // 12161
                                                                                                                       // 12162
                                                                                                                       // 12163
	// Sets the display range and computes all necessary dates                                                            // 12164
	setRange: function(range) {                                                                                           // 12165
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 12166
                                                                                                                       // 12167
		this.timeGrid.setRange(range);                                                                                       // 12168
		if (this.dayGrid) {                                                                                                  // 12169
			this.dayGrid.setRange(range);                                                                                       // 12170
		}                                                                                                                    // 12171
	},                                                                                                                    // 12172
                                                                                                                       // 12173
                                                                                                                       // 12174
	// Renders the view into `this.el`, which has already been assigned                                                   // 12175
	renderDates: function() {                                                                                             // 12176
                                                                                                                       // 12177
		this.el.addClass('fc-agenda-view').html(this.renderSkeletonHtml());                                                  // 12178
		this.renderHead();                                                                                                   // 12179
                                                                                                                       // 12180
		this.scroller.render();                                                                                              // 12181
		var timeGridWrapEl = this.scroller.el.addClass('fc-time-grid-container');                                            // 12182
		var timeGridEl = $('<div class="fc-time-grid" />').appendTo(timeGridWrapEl);                                         // 12183
		this.el.find('.fc-body > tr > td').append(timeGridWrapEl);                                                           // 12184
                                                                                                                       // 12185
		this.timeGrid.setElement(timeGridEl);                                                                                // 12186
		this.timeGrid.renderDates();                                                                                         // 12187
                                                                                                                       // 12188
		// the <hr> that sometimes displays under the time-grid                                                              // 12189
		this.bottomRuleEl = $('<hr class="fc-divider ' + this.widgetHeaderClass + '"/>')                                     // 12190
			.appendTo(this.timeGrid.el); // inject it into the time-grid                                                        // 12191
                                                                                                                       // 12192
		if (this.dayGrid) {                                                                                                  // 12193
			this.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                              // 12194
			this.dayGrid.renderDates();                                                                                         // 12195
                                                                                                                       // 12196
			// have the day-grid extend it's coordinate area over the <hr> dividing the two grids                               // 12197
			this.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();                                         // 12198
		}                                                                                                                    // 12199
                                                                                                                       // 12200
		this.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller              // 12201
	},                                                                                                                    // 12202
                                                                                                                       // 12203
                                                                                                                       // 12204
	// render the day-of-week headers                                                                                     // 12205
	renderHead: function() {                                                                                              // 12206
		this.headContainerEl =                                                                                               // 12207
			this.el.find('.fc-head-container')                                                                                  // 12208
				.html(this.timeGrid.renderHeadHtml());                                                                             // 12209
	},                                                                                                                    // 12210
                                                                                                                       // 12211
                                                                                                                       // 12212
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 12213
	// always completely kill each grid's rendering.                                                                      // 12214
	unrenderDates: function() {                                                                                           // 12215
		this.timeGrid.unrenderDates();                                                                                       // 12216
		this.timeGrid.removeElement();                                                                                       // 12217
                                                                                                                       // 12218
		if (this.dayGrid) {                                                                                                  // 12219
			this.dayGrid.unrenderDates();                                                                                       // 12220
			this.dayGrid.removeElement();                                                                                       // 12221
		}                                                                                                                    // 12222
                                                                                                                       // 12223
		this.scroller.destroy();                                                                                             // 12224
	},                                                                                                                    // 12225
                                                                                                                       // 12226
                                                                                                                       // 12227
	// Builds the HTML skeleton for the view.                                                                             // 12228
	// The day-grid and time-grid components will render inside containers defined by this HTML.                          // 12229
	renderSkeletonHtml: function() {                                                                                      // 12230
		return '' +                                                                                                          // 12231
			'<table>' +                                                                                                         // 12232
				'<thead class="fc-head">' +                                                                                        // 12233
					'<tr>' +                                                                                                          // 12234
						'<td class="fc-head-container ' + this.widgetHeaderClass + '"></td>' +                                           // 12235
					'</tr>' +                                                                                                         // 12236
				'</thead>' +                                                                                                       // 12237
				'<tbody class="fc-body">' +                                                                                        // 12238
					'<tr>' +                                                                                                          // 12239
						'<td class="' + this.widgetContentClass + '">' +                                                                 // 12240
							(this.dayGrid ?                                                                                                 // 12241
								'<div class="fc-day-grid"/>' +                                                                                 // 12242
								'<hr class="fc-divider ' + this.widgetHeaderClass + '"/>' :                                                    // 12243
								''                                                                                                             // 12244
								) +                                                                                                            // 12245
						'</td>' +                                                                                                        // 12246
					'</tr>' +                                                                                                         // 12247
				'</tbody>' +                                                                                                       // 12248
			'</table>';                                                                                                         // 12249
	},                                                                                                                    // 12250
                                                                                                                       // 12251
                                                                                                                       // 12252
	// Generates an HTML attribute string for setting the width of the axis, if it is known                               // 12253
	axisStyleAttr: function() {                                                                                           // 12254
		if (this.axisWidth !== null) {                                                                                       // 12255
			 return 'style="width:' + this.axisWidth + 'px"';                                                                   // 12256
		}                                                                                                                    // 12257
		return '';                                                                                                           // 12258
	},                                                                                                                    // 12259
                                                                                                                       // 12260
                                                                                                                       // 12261
	/* Business Hours                                                                                                     // 12262
	------------------------------------------------------------------------------------------------------------------*/  // 12263
                                                                                                                       // 12264
                                                                                                                       // 12265
	renderBusinessHours: function() {                                                                                     // 12266
		this.timeGrid.renderBusinessHours();                                                                                 // 12267
                                                                                                                       // 12268
		if (this.dayGrid) {                                                                                                  // 12269
			this.dayGrid.renderBusinessHours();                                                                                 // 12270
		}                                                                                                                    // 12271
	},                                                                                                                    // 12272
                                                                                                                       // 12273
                                                                                                                       // 12274
	unrenderBusinessHours: function() {                                                                                   // 12275
		this.timeGrid.unrenderBusinessHours();                                                                               // 12276
                                                                                                                       // 12277
		if (this.dayGrid) {                                                                                                  // 12278
			this.dayGrid.unrenderBusinessHours();                                                                               // 12279
		}                                                                                                                    // 12280
	},                                                                                                                    // 12281
                                                                                                                       // 12282
                                                                                                                       // 12283
	/* Now Indicator                                                                                                      // 12284
	------------------------------------------------------------------------------------------------------------------*/  // 12285
                                                                                                                       // 12286
                                                                                                                       // 12287
	getNowIndicatorUnit: function() {                                                                                     // 12288
		return this.timeGrid.getNowIndicatorUnit();                                                                          // 12289
	},                                                                                                                    // 12290
                                                                                                                       // 12291
                                                                                                                       // 12292
	renderNowIndicator: function(date) {                                                                                  // 12293
		this.timeGrid.renderNowIndicator(date);                                                                              // 12294
	},                                                                                                                    // 12295
                                                                                                                       // 12296
                                                                                                                       // 12297
	unrenderNowIndicator: function() {                                                                                    // 12298
		this.timeGrid.unrenderNowIndicator();                                                                                // 12299
	},                                                                                                                    // 12300
                                                                                                                       // 12301
                                                                                                                       // 12302
	/* Dimensions                                                                                                         // 12303
	------------------------------------------------------------------------------------------------------------------*/  // 12304
                                                                                                                       // 12305
                                                                                                                       // 12306
	updateSize: function(isResize) {                                                                                      // 12307
		this.timeGrid.updateSize(isResize);                                                                                  // 12308
                                                                                                                       // 12309
		View.prototype.updateSize.call(this, isResize); // call the super-method                                             // 12310
	},                                                                                                                    // 12311
                                                                                                                       // 12312
                                                                                                                       // 12313
	// Refreshes the horizontal dimensions of the view                                                                    // 12314
	updateWidth: function() {                                                                                             // 12315
		// make all axis cells line up, and record the width so newly created axis cells will have it                        // 12316
		this.axisWidth = matchCellWidths(this.el.find('.fc-axis'));                                                          // 12317
	},                                                                                                                    // 12318
                                                                                                                       // 12319
                                                                                                                       // 12320
	// Adjusts the vertical dimensions of the view to the specified values                                                // 12321
	setHeight: function(totalHeight, isAuto) {                                                                            // 12322
		var eventLimit;                                                                                                      // 12323
		var scrollerHeight;                                                                                                  // 12324
		var scrollbarWidths;                                                                                                 // 12325
                                                                                                                       // 12326
		// reset all dimensions back to the original state                                                                   // 12327
		this.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary                                  // 12328
		this.scroller.clear(); // sets height to 'auto' and clears overflow                                                  // 12329
		uncompensateScroll(this.noScrollRowEls);                                                                             // 12330
                                                                                                                       // 12331
		// limit number of events in the all-day area                                                                        // 12332
		if (this.dayGrid) {                                                                                                  // 12333
			this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed                                            // 12334
                                                                                                                       // 12335
			eventLimit = this.opt('eventLimit');                                                                                // 12336
			if (eventLimit && typeof eventLimit !== 'number') {                                                                 // 12337
				eventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure "auto" goes to a real number                                 // 12338
			}                                                                                                                   // 12339
			if (eventLimit) {                                                                                                   // 12340
				this.dayGrid.limitRows(eventLimit);                                                                                // 12341
			}                                                                                                                   // 12342
		}                                                                                                                    // 12343
                                                                                                                       // 12344
		if (!isAuto) { // should we force dimensions of the scroll container?                                                // 12345
                                                                                                                       // 12346
			scrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 12347
			this.scroller.setHeight(scrollerHeight);                                                                            // 12348
			scrollbarWidths = this.scroller.getScrollbarWidths();                                                               // 12349
                                                                                                                       // 12350
			if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?                                           // 12351
                                                                                                                       // 12352
				// make the all-day and header rows lines up                                                                       // 12353
				compensateScroll(this.noScrollRowEls, scrollbarWidths);                                                            // 12354
                                                                                                                       // 12355
				// the scrollbar compensation might have changed text flow, which might affect height, so recalculate              // 12356
				// and reapply the desired height to the scroller.                                                                 // 12357
				scrollerHeight = this.computeScrollerHeight(totalHeight);                                                          // 12358
				this.scroller.setHeight(scrollerHeight);                                                                           // 12359
			}                                                                                                                   // 12360
                                                                                                                       // 12361
			// guarantees the same scrollbar widths                                                                             // 12362
			this.scroller.lockOverflow(scrollbarWidths);                                                                        // 12363
                                                                                                                       // 12364
			// if there's any space below the slats, show the horizontal rule.                                                  // 12365
			// this won't cause any new overflow, because lockOverflow already called.                                          // 12366
			if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {                                                          // 12367
				this.bottomRuleEl.show();                                                                                          // 12368
			}                                                                                                                   // 12369
		}                                                                                                                    // 12370
	},                                                                                                                    // 12371
                                                                                                                       // 12372
                                                                                                                       // 12373
	// given a desired total height of the view, returns what the height of the scroller should be                        // 12374
	computeScrollerHeight: function(totalHeight) {                                                                        // 12375
		return totalHeight -                                                                                                 // 12376
			subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller                             // 12377
	},                                                                                                                    // 12378
                                                                                                                       // 12379
                                                                                                                       // 12380
	/* Scroll                                                                                                             // 12381
	------------------------------------------------------------------------------------------------------------------*/  // 12382
                                                                                                                       // 12383
                                                                                                                       // 12384
	// Computes the initial pre-configured scroll state prior to allowing the user to change it                           // 12385
	computeInitialScroll: function() {                                                                                    // 12386
		var scrollTime = moment.duration(this.opt('scrollTime'));                                                            // 12387
		var top = this.timeGrid.computeTimeTop(scrollTime);                                                                  // 12388
                                                                                                                       // 12389
		// zoom can give weird floating-point values. rather scroll a little bit further                                     // 12390
		top = Math.ceil(top);                                                                                                // 12391
                                                                                                                       // 12392
		if (top) {                                                                                                           // 12393
			top++; // to overcome top border that slots beyond the first have. looks better                                     // 12394
		}                                                                                                                    // 12395
                                                                                                                       // 12396
		return top;                                                                                                          // 12397
	},                                                                                                                    // 12398
                                                                                                                       // 12399
                                                                                                                       // 12400
	queryScroll: function() {                                                                                             // 12401
		return this.scroller.getScrollTop();                                                                                 // 12402
	},                                                                                                                    // 12403
                                                                                                                       // 12404
                                                                                                                       // 12405
	setScroll: function(top) {                                                                                            // 12406
		this.scroller.setScrollTop(top);                                                                                     // 12407
	},                                                                                                                    // 12408
                                                                                                                       // 12409
                                                                                                                       // 12410
	/* Hit Areas                                                                                                          // 12411
	------------------------------------------------------------------------------------------------------------------*/  // 12412
	// forward all hit-related method calls to the grids (dayGrid might not be defined)                                   // 12413
                                                                                                                       // 12414
                                                                                                                       // 12415
	prepareHits: function() {                                                                                             // 12416
		this.timeGrid.prepareHits();                                                                                         // 12417
		if (this.dayGrid) {                                                                                                  // 12418
			this.dayGrid.prepareHits();                                                                                         // 12419
		}                                                                                                                    // 12420
	},                                                                                                                    // 12421
                                                                                                                       // 12422
                                                                                                                       // 12423
	releaseHits: function() {                                                                                             // 12424
		this.timeGrid.releaseHits();                                                                                         // 12425
		if (this.dayGrid) {                                                                                                  // 12426
			this.dayGrid.releaseHits();                                                                                         // 12427
		}                                                                                                                    // 12428
	},                                                                                                                    // 12429
                                                                                                                       // 12430
                                                                                                                       // 12431
	queryHit: function(left, top) {                                                                                       // 12432
		var hit = this.timeGrid.queryHit(left, top);                                                                         // 12433
                                                                                                                       // 12434
		if (!hit && this.dayGrid) {                                                                                          // 12435
			hit = this.dayGrid.queryHit(left, top);                                                                             // 12436
		}                                                                                                                    // 12437
                                                                                                                       // 12438
		return hit;                                                                                                          // 12439
	},                                                                                                                    // 12440
                                                                                                                       // 12441
                                                                                                                       // 12442
	getHitSpan: function(hit) {                                                                                           // 12443
		// TODO: hit.component is set as a hack to identify where the hit came from                                          // 12444
		return hit.component.getHitSpan(hit);                                                                                // 12445
	},                                                                                                                    // 12446
                                                                                                                       // 12447
                                                                                                                       // 12448
	getHitEl: function(hit) {                                                                                             // 12449
		// TODO: hit.component is set as a hack to identify where the hit came from                                          // 12450
		return hit.component.getHitEl(hit);                                                                                  // 12451
	},                                                                                                                    // 12452
                                                                                                                       // 12453
                                                                                                                       // 12454
	/* Events                                                                                                             // 12455
	------------------------------------------------------------------------------------------------------------------*/  // 12456
                                                                                                                       // 12457
                                                                                                                       // 12458
	// Renders events onto the view and populates the View's segment array                                                // 12459
	renderEvents: function(events) {                                                                                      // 12460
		var dayEvents = [];                                                                                                  // 12461
		var timedEvents = [];                                                                                                // 12462
		var daySegs = [];                                                                                                    // 12463
		var timedSegs;                                                                                                       // 12464
		var i;                                                                                                               // 12465
                                                                                                                       // 12466
		// separate the events into all-day and timed                                                                        // 12467
		for (i = 0; i < events.length; i++) {                                                                                // 12468
			if (events[i].allDay) {                                                                                             // 12469
				dayEvents.push(events[i]);                                                                                         // 12470
			}                                                                                                                   // 12471
			else {                                                                                                              // 12472
				timedEvents.push(events[i]);                                                                                       // 12473
			}                                                                                                                   // 12474
		}                                                                                                                    // 12475
                                                                                                                       // 12476
		// render the events in the subcomponents                                                                            // 12477
		timedSegs = this.timeGrid.renderEvents(timedEvents);                                                                 // 12478
		if (this.dayGrid) {                                                                                                  // 12479
			daySegs = this.dayGrid.renderEvents(dayEvents);                                                                     // 12480
		}                                                                                                                    // 12481
                                                                                                                       // 12482
		// the all-day area is flexible and might have a lot of events, so shift the height                                  // 12483
		this.updateHeight();                                                                                                 // 12484
	},                                                                                                                    // 12485
                                                                                                                       // 12486
                                                                                                                       // 12487
	// Retrieves all segment objects that are rendered in the view                                                        // 12488
	getEventSegs: function() {                                                                                            // 12489
		return this.timeGrid.getEventSegs().concat(                                                                          // 12490
			this.dayGrid ? this.dayGrid.getEventSegs() : []                                                                     // 12491
		);                                                                                                                   // 12492
	},                                                                                                                    // 12493
                                                                                                                       // 12494
                                                                                                                       // 12495
	// Unrenders all event elements and clears internal segment data                                                      // 12496
	unrenderEvents: function() {                                                                                          // 12497
                                                                                                                       // 12498
		// unrender the events in the subcomponents                                                                          // 12499
		this.timeGrid.unrenderEvents();                                                                                      // 12500
		if (this.dayGrid) {                                                                                                  // 12501
			this.dayGrid.unrenderEvents();                                                                                      // 12502
		}                                                                                                                    // 12503
                                                                                                                       // 12504
		// we DON'T need to call updateHeight() because:                                                                     // 12505
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 12506
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 12507
	},                                                                                                                    // 12508
                                                                                                                       // 12509
                                                                                                                       // 12510
	/* Dragging (for events and external elements)                                                                        // 12511
	------------------------------------------------------------------------------------------------------------------*/  // 12512
                                                                                                                       // 12513
                                                                                                                       // 12514
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 12515
	renderDrag: function(dropLocation, seg) {                                                                             // 12516
		if (dropLocation.start.hasTime()) {                                                                                  // 12517
			return this.timeGrid.renderDrag(dropLocation, seg);                                                                 // 12518
		}                                                                                                                    // 12519
		else if (this.dayGrid) {                                                                                             // 12520
			return this.dayGrid.renderDrag(dropLocation, seg);                                                                  // 12521
		}                                                                                                                    // 12522
	},                                                                                                                    // 12523
                                                                                                                       // 12524
                                                                                                                       // 12525
	unrenderDrag: function() {                                                                                            // 12526
		this.timeGrid.unrenderDrag();                                                                                        // 12527
		if (this.dayGrid) {                                                                                                  // 12528
			this.dayGrid.unrenderDrag();                                                                                        // 12529
		}                                                                                                                    // 12530
	},                                                                                                                    // 12531
                                                                                                                       // 12532
                                                                                                                       // 12533
	/* Selection                                                                                                          // 12534
	------------------------------------------------------------------------------------------------------------------*/  // 12535
                                                                                                                       // 12536
                                                                                                                       // 12537
	// Renders a visual indication of a selection                                                                         // 12538
	renderSelection: function(span) {                                                                                     // 12539
		if (span.start.hasTime() || span.end.hasTime()) {                                                                    // 12540
			this.timeGrid.renderSelection(span);                                                                                // 12541
		}                                                                                                                    // 12542
		else if (this.dayGrid) {                                                                                             // 12543
			this.dayGrid.renderSelection(span);                                                                                 // 12544
		}                                                                                                                    // 12545
	},                                                                                                                    // 12546
                                                                                                                       // 12547
                                                                                                                       // 12548
	// Unrenders a visual indications of a selection                                                                      // 12549
	unrenderSelection: function() {                                                                                       // 12550
		this.timeGrid.unrenderSelection();                                                                                   // 12551
		if (this.dayGrid) {                                                                                                  // 12552
			this.dayGrid.unrenderSelection();                                                                                   // 12553
		}                                                                                                                    // 12554
	}                                                                                                                     // 12555
                                                                                                                       // 12556
});                                                                                                                    // 12557
                                                                                                                       // 12558
                                                                                                                       // 12559
// Methods that will customize the rendering behavior of the AgendaView's timeGrid                                     // 12560
// TODO: move into TimeGrid                                                                                            // 12561
var agendaTimeGridMethods = {                                                                                          // 12562
                                                                                                                       // 12563
                                                                                                                       // 12564
	// Generates the HTML that will go before the day-of week header cells                                                // 12565
	renderHeadIntroHtml: function() {                                                                                     // 12566
		var view = this.view;                                                                                                // 12567
		var weekText;                                                                                                        // 12568
                                                                                                                       // 12569
		if (view.opt('weekNumbers')) {                                                                                       // 12570
			weekText = this.start.format(view.opt('smallWeekFormat'));                                                          // 12571
                                                                                                                       // 12572
			return '' +                                                                                                         // 12573
				'<th class="fc-axis fc-week-number ' + view.widgetHeaderClass + '" ' + view.axisStyleAttr() + '>' +                // 12574
					'<span>' + // needed for matchCellWidths                                                                          // 12575
						htmlEscape(weekText) +                                                                                           // 12576
					'</span>' +                                                                                                       // 12577
				'</th>';                                                                                                           // 12578
		}                                                                                                                    // 12579
		else {                                                                                                               // 12580
			return '<th class="fc-axis ' + view.widgetHeaderClass + '" ' + view.axisStyleAttr() + '></th>';                     // 12581
		}                                                                                                                    // 12582
	},                                                                                                                    // 12583
                                                                                                                       // 12584
                                                                                                                       // 12585
	// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.                        // 12586
	renderBgIntroHtml: function() {                                                                                       // 12587
		var view = this.view;                                                                                                // 12588
                                                                                                                       // 12589
		return '<td class="fc-axis ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '></td>';                     // 12590
	},                                                                                                                    // 12591
                                                                                                                       // 12592
                                                                                                                       // 12593
	// Generates the HTML that goes before all other types of cells.                                                      // 12594
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 12595
	renderIntroHtml: function() {                                                                                         // 12596
		var view = this.view;                                                                                                // 12597
                                                                                                                       // 12598
		return '<td class="fc-axis" ' + view.axisStyleAttr() + '></td>';                                                     // 12599
	}                                                                                                                     // 12600
                                                                                                                       // 12601
};                                                                                                                     // 12602
                                                                                                                       // 12603
                                                                                                                       // 12604
// Methods that will customize the rendering behavior of the AgendaView's dayGrid                                      // 12605
var agendaDayGridMethods = {                                                                                           // 12606
                                                                                                                       // 12607
                                                                                                                       // 12608
	// Generates the HTML that goes before the all-day cells                                                              // 12609
	renderBgIntroHtml: function() {                                                                                       // 12610
		var view = this.view;                                                                                                // 12611
                                                                                                                       // 12612
		return '' +                                                                                                          // 12613
			'<td class="fc-axis ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '>' +                               // 12614
				'<span>' + // needed for matchCellWidths                                                                           // 12615
					(view.opt('allDayHtml') || htmlEscape(view.opt('allDayText'))) +                                                  // 12616
				'</span>' +                                                                                                        // 12617
			'</td>';                                                                                                            // 12618
	},                                                                                                                    // 12619
                                                                                                                       // 12620
                                                                                                                       // 12621
	// Generates the HTML that goes before all other types of cells.                                                      // 12622
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 12623
	renderIntroHtml: function() {                                                                                         // 12624
		var view = this.view;                                                                                                // 12625
                                                                                                                       // 12626
		return '<td class="fc-axis" ' + view.axisStyleAttr() + '></td>';                                                     // 12627
	}                                                                                                                     // 12628
                                                                                                                       // 12629
};                                                                                                                     // 12630
                                                                                                                       // 12631
;;                                                                                                                     // 12632
                                                                                                                       // 12633
var AGENDA_ALL_DAY_EVENT_LIMIT = 5;                                                                                    // 12634
                                                                                                                       // 12635
// potential nice values for the slot-duration and interval-duration                                                   // 12636
// from largest to smallest                                                                                            // 12637
var AGENDA_STOCK_SUB_DURATIONS = [                                                                                     // 12638
	{ hours: 1 },                                                                                                         // 12639
	{ minutes: 30 },                                                                                                      // 12640
	{ minutes: 15 },                                                                                                      // 12641
	{ seconds: 30 },                                                                                                      // 12642
	{ seconds: 15 }                                                                                                       // 12643
];                                                                                                                     // 12644
                                                                                                                       // 12645
fcViews.agenda = {                                                                                                     // 12646
	'class': AgendaView,                                                                                                  // 12647
	defaults: {                                                                                                           // 12648
		allDaySlot: true,                                                                                                    // 12649
		allDayText: 'all-day',                                                                                               // 12650
		slotDuration: '00:30:00',                                                                                            // 12651
		minTime: '00:00:00',                                                                                                 // 12652
		maxTime: '24:00:00',                                                                                                 // 12653
		slotEventOverlap: true // a bad name. confused with overlap/constraint system                                        // 12654
	}                                                                                                                     // 12655
};                                                                                                                     // 12656
                                                                                                                       // 12657
fcViews.agendaDay = {                                                                                                  // 12658
	type: 'agenda',                                                                                                       // 12659
	duration: { days: 1 }                                                                                                 // 12660
};                                                                                                                     // 12661
                                                                                                                       // 12662
fcViews.agendaWeek = {                                                                                                 // 12663
	type: 'agenda',                                                                                                       // 12664
	duration: { weeks: 1 }                                                                                                // 12665
};                                                                                                                     // 12666
;;                                                                                                                     // 12667
                                                                                                                       // 12668
return FC; // export for Node/CommonJS                                                                                 // 12669
});                                                                                                                    // 12670
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/lang-all.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function(a){"function"==typeof define&&define.amd?define(["jquery","moment"],a):"object"==typeof exports?module.exports=a(require("jquery"),require("moment")):a(jQuery,moment)}(function(a,b){!function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}});return a}(),a.fullCalendar.datepickerLang("ar-ma","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["أحد","اثنين","ثلاثاء","أربعاء","خميس","جمعة","سبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-ma",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){!function(){"use strict";var a={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},c={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},d=(b.defineLocale||b.lang).call(b,"ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(b){return b.replace(/\d/g,function(b){return a[b]}).replace(/,/g,"،")},week:{dow:6,doy:12}});return d}(),a.fullCalendar.datepickerLang("ar-sa","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["أحد","اثنين","ثلاثاء","أربعاء","خميس","جمعة","سبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-sa",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("ar-tn","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["أحد","اثنين","ثلاثاء","أربعاء","خميس","جمعة","سبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-tn",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){!function(){"use strict";var a={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},c={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},d=function(a){return 0===a?0:1===a?1:2===a?2:a%100>=3&&10>=a%100?3:a%100>=11?4:5},e={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},f=function(a){return function(b,c,f,g){var h=d(b),i=e[a][d(b)];return 2===h&&(i=i[c?0:1]),i.replace(/%d/i,b)}},g=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"],h=(b.defineLocale||b.lang).call(b,"ar",{months:g,monthsShort:g,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:f("s"),m:f("m"),mm:f("m"),h:f("h"),hh:f("h"),d:f("d"),dd:f("d"),M:f("M"),MM:f("M"),y:f("y"),yy:f("y")},preparse:function(a){return a.replace(/\u200f/g,"").replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(b){return b.replace(/\d/g,function(b){return a[b]}).replace(/,/g,"،")},week:{dow:6,doy:12}});return h}(),a.fullCalendar.datepickerLang("ar","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["أحد","اثنين","ثلاثاء","أربعاء","خميس","جمعة","سبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+"-ев":0===c?a+"-ен":c>10&&20>c?a+"-ти":1===b?a+"-ви":2===b?a+"-ри":7===b||8===b?a+"-ми":a+"-ти"},week:{dow:1,doy:7}});return a}(),a.fullCalendar.datepickerLang("bg","bg",{closeText:"затвори",prevText:"&#x3C;назад",nextText:"напред&#x3E;",nextBigText:"&#x3E;&#x3E;",currentText:"днес",monthNames:["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],monthNamesShort:["Яну","Фев","Мар","Апр","Май","Юни","Юли","Авг","Сеп","Окт","Нов","Дек"],dayNames:["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"],dayNamesShort:["Нед","Пон","Вто","Сря","Чет","Пет","Съб"],dayNamesMin:["Не","По","Вт","Ср","Че","Пе","Съ"],weekHeader:"Wk",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("bg",{buttonText:{month:"Месец",week:"Седмица",day:"Ден",list:"График"},allDayText:"Цял ден",eventLimitText:function(a){return"+още "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(a,b){var c=1===a?"r":2===a?"n":3===a?"r":4===a?"t":"è";return"w"!==b&&"W"!==b||(c="a"),a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("ca","ca",{closeText:"Tanca",prevText:"Anterior",nextText:"Següent",currentText:"Avui",monthNames:["gener","febrer","març","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"],monthNamesShort:["gen","feb","març","abr","maig","juny","jul","ag","set","oct","nov","des"],dayNames:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],dayNamesShort:["dg","dl","dt","dc","dj","dv","ds"],dayNamesMin:["dg","dl","dt","dc","dj","dv","ds"],weekHeader:"Set",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ca",{buttonText:{month:"Mes",week:"Setmana",day:"Dia",list:"Agenda"},allDayText:"Tot el dia",eventLimitText:"més"})}(),function(){!function(){"use strict";function a(a){return a>1&&5>a&&1!==~~(a/10)}function c(b,c,d,e){var f=b+" ";switch(d){case"s":return c||e?"pár sekund":"pár sekundami";case"m":return c?"minuta":e?"minutu":"minutou";case"mm":return c||e?f+(a(b)?"minuty":"minut"):f+"minutami";case"h":return c?"hodina":e?"hodinu":"hodinou";case"hh":return c||e?f+(a(b)?"hodiny":"hodin"):f+"hodinami";case"d":return c||e?"den":"dnem";case"dd":return c||e?f+(a(b)?"dny":"dní"):f+"dny";case"M":return c||e?"měsíc":"měsícem";case"MM":return c||e?f+(a(b)?"měsíce":"měsíců"):f+"měsíci";case"y":return c||e?"rok":"rokem";case"yy":return c||e?f+(a(b)?"roky":"let"):f+"lety"}}var d="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),e="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),f=(b.defineLocale||b.lang).call(b,"cs",{months:d,monthsShort:e,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(d,e),shortMonthsParse:function(a){var b,c=[];for(b=0;12>b;b++)c[b]=new RegExp("^"+a[b]+"$","i");return c}(e),longMonthsParse:function(a){var b,c=[];for(b=0;12>b;b++)c[b]=new RegExp("^"+a[b]+"$","i");return c}(d),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return f}(),a.fullCalendar.datepickerLang("cs","cs",{closeText:"Zavřít",prevText:"&#x3C;Dříve",nextText:"Později&#x3E;",currentText:"Nyní",monthNames:["leden","únor","březen","duben","květen","červen","červenec","srpen","září","říjen","listopad","prosinec"],monthNamesShort:["led","úno","bře","dub","kvě","čer","čvc","srp","zář","říj","lis","pro"],dayNames:["neděle","pondělí","úterý","středa","čtvrtek","pátek","sobota"],dayNamesShort:["ne","po","út","st","čt","pá","so"],dayNamesMin:["ne","po","út","st","čt","pá","so"],weekHeader:"Týd",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("cs",{buttonText:{month:"Měsíc",week:"Týden",day:"Den",list:"Agenda"},allDayText:"Celý den",eventLimitText:function(a){return"+další: "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY HH:mm"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("da","da",{closeText:"Luk",prevText:"&#x3C;Forrige",nextText:"Næste&#x3E;",currentText:"Idag",monthNames:["Januar","Februar","Marts","April","Maj","Juni","Juli","August","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNames:["Søndag","Mandag","Tirsdag","Onsdag","Torsdag","Fredag","Lørdag"],dayNamesShort:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],dayNamesMin:["Sø","Ma","Ti","On","To","Fr","Lø"],weekHeader:"Uge",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("da",{buttonText:{month:"Måned",week:"Uge",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"flere"})}(),function(){!function(){"use strict";function a(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}var c=(b.defineLocale||b.lang).call(b,"de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:a,mm:"%d Minuten",h:a,hh:"%d Stunden",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return c}(),a.fullCalendar.datepickerLang("de-at","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("de-at",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(a){return"+ weitere "+a}})}(),function(){!function(){"use strict";function a(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}var c=(b.defineLocale||b.lang).call(b,"de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:a,mm:"%d Minuten",h:a,hh:"%d Stunden",d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return c}(),a.fullCalendar.datepickerLang("de","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("de",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(a){return"+ weitere "+a}})}(),function(){!function(){"use strict";function a(a){return a instanceof Function||"[object Function]"===Object.prototype.toString.call(a)}var c=(b.defineLocale||b.lang).call(b,"el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(a,b){return/D/.test(b.substring(0,b.indexOf("MMMM")))?this._monthsGenitiveEl[a.month()]:this._monthsNominativeEl[a.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(a,b,c){return a>11?c?"μμ":"ΜΜ":c?"πμ":"ΠΜ"},isPM:function(a){return"μ"===(a+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(b,c){var d=this._calendarEl[b],e=c&&c.hours();return a(d)&&(d=d.apply(c)),d.replace("{}",e%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}});return c}(),a.fullCalendar.datepickerLang("el","el",{closeText:"Κλείσιμο",prevText:"Προηγούμενος",nextText:"Επόμενος",currentText:"Σήμερα",monthNames:["Ιανουάριος","Φεβρουάριος","Μάρτιος","Απρίλιος","Μάιος","Ιούνιος","Ιούλιος","Αύγουστος","Σεπτέμβριος","Οκτώβριος","Νοέμβριος","Δεκέμβριος"],monthNamesShort:["Ιαν","Φεβ","Μαρ","Απρ","Μαι","Ιουν","Ιουλ","Αυγ","Σεπ","Οκτ","Νοε","Δεκ"],dayNames:["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"],dayNamesShort:["Κυρ","Δευ","Τρι","Τετ","Πεμ","Παρ","Σαβ"],dayNamesMin:["Κυ","Δε","Τρ","Τε","Πε","Πα","Σα"],weekHeader:"Εβδ",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("el",{buttonText:{month:"Μήνας",week:"Εβδομάδα",day:"Ημέρα",list:"Ατζέντα"},allDayText:"Ολοήμερο",eventLimitText:"περισσότερα"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("en-au","en-AU",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-au")}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}});return a}(),a.fullCalendar.lang("en-ca")}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("en-gb","en-GB",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-gb")}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.lang("en-ie")}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("en-nz","en-NZ",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-nz")}(),function(){!function(){"use strict";var a="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),c="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),d=(b.defineLocale||b.lang).call(b,"es",{
months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(b,d){return/-MMM-/.test(d)?c[b.month()]:a[b.month()]},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return d}(),a.fullCalendar.datepickerLang("es","es",{closeText:"Cerrar",prevText:"&#x3C;Ant",nextText:"Sig&#x3E;",currentText:"Hoy",monthNames:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],monthNamesShort:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],dayNames:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],dayNamesShort:["dom","lun","mar","mié","jue","vie","sáb"],dayNamesMin:["D","L","M","X","J","V","S"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("es",{buttonText:{month:"Mes",week:"Semana",day:"Día",list:"Agenda"},allDayHtml:"Todo<br/>el día",eventLimitText:"más"})}(),function(){!function(){"use strict";var a={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},c={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"},d=(b.defineLocale||b.lang).call(b,"fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(a){return/بعد از ظهر/.test(a)},meridiem:function(a,b,c){return 12>a?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(a){return a.replace(/[۰-۹]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(b){return b.replace(/\d/g,function(b){return a[b]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}});return d}(),a.fullCalendar.datepickerLang("fa","fa",{closeText:"بستن",prevText:"&#x3C;قبلی",nextText:"بعدی&#x3E;",currentText:"امروز",monthNames:["ژانویه","فوریه","مارس","آوریل","مه","ژوئن","ژوئیه","اوت","سپتامبر","اکتبر","نوامبر","دسامبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["يکشنبه","دوشنبه","سه‌شنبه","چهارشنبه","پنجشنبه","جمعه","شنبه"],dayNamesShort:["ی","د","س","چ","پ","ج","ش"],dayNamesMin:["ی","د","س","چ","پ","ج","ش"],weekHeader:"هف",dateFormat:"yy/mm/dd",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fa",{buttonText:{month:"ماه",week:"هفته",day:"روز",list:"برنامه"},allDayText:"تمام روز",eventLimitText:function(a){return"بیش از "+a}})}(),function(){!function(){"use strict";function a(a,b,d,e){var f="";switch(d){case"s":return e?"muutaman sekunnin":"muutama sekunti";case"m":return e?"minuutin":"minuutti";case"mm":f=e?"minuutin":"minuuttia";break;case"h":return e?"tunnin":"tunti";case"hh":f=e?"tunnin":"tuntia";break;case"d":return e?"päivän":"päivä";case"dd":f=e?"päivän":"päivää";break;case"M":return e?"kuukauden":"kuukausi";case"MM":f=e?"kuukauden":"kuukautta";break;case"y":return e?"vuoden":"vuosi";case"yy":f=e?"vuoden":"vuotta"}return f=c(a,e)+" "+f}function c(a,b){return 10>a?b?e[a]:d[a]:a}var d="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),e=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",d[7],d[8],d[9]],f=(b.defineLocale||b.lang).call(b,"fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return f}(),a.fullCalendar.datepickerLang("fi","fi",{closeText:"Sulje",prevText:"&#xAB;Edellinen",nextText:"Seuraava&#xBB;",currentText:"Tänään",monthNames:["Tammikuu","Helmikuu","Maaliskuu","Huhtikuu","Toukokuu","Kesäkuu","Heinäkuu","Elokuu","Syyskuu","Lokakuu","Marraskuu","Joulukuu"],monthNamesShort:["Tammi","Helmi","Maalis","Huhti","Touko","Kesä","Heinä","Elo","Syys","Loka","Marras","Joulu"],dayNamesShort:["Su","Ma","Ti","Ke","To","Pe","La"],dayNames:["Sunnuntai","Maanantai","Tiistai","Keskiviikko","Torstai","Perjantai","Lauantai"],dayNamesMin:["Su","Ma","Ti","Ke","To","Pe","La"],weekHeader:"Vk",dateFormat:"d.m.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fi",{buttonText:{month:"Kuukausi",week:"Viikko",day:"Päivä",list:"Tapahtumat"},allDayText:"Koko päivä",eventLimitText:"lisää"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(a){return a+(1===a?"er":"e")}});return a}(),a.fullCalendar.datepickerLang("fr-ca","fr-CA",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr-ca",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(a){return a+(1===a?"er":"e")},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("fr-ch","fr-CH",{closeText:"Fermer",prevText:"&#x3C;Préc",nextText:"Suiv&#x3E;",currentText:"Courant",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sm",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr-ch",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?"er":"")},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("fr","fr",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(a){return 2===a?"שעתיים":a+" שעות"},d:"יום",dd:function(a){return 2===a?"יומיים":a+" ימים"},M:"חודש",MM:function(a){return 2===a?"חודשיים":a+" חודשים"},y:"שנה",yy:function(a){return 2===a?"שנתיים":a%10===0&&10!==a?a+" שנה":a+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(a){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(a)},meridiem:function(a,b,c){return 5>a?"לפנות בוקר":10>a?"בבוקר":12>a?c?'לפנה"צ':"לפני הצהריים":18>a?c?'אחה"צ':"אחרי הצהריים":"בערב"}});return a}(),a.fullCalendar.datepickerLang("he","he",{closeText:"סגור",prevText:"&#x3C;הקודם",nextText:"הבא&#x3E;",currentText:"היום",monthNames:["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר"],monthNamesShort:["ינו","פבר","מרץ","אפר","מאי","יוני","יולי","אוג","ספט","אוק","נוב","דצמ"],dayNames:["ראשון","שני","שלישי","רביעי","חמישי","שישי","שבת"],dayNamesShort:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],dayNamesMin:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("he",{defaultButtonText:{month:"חודש",week:"שבוע",day:"יום",list:"סדר יום"},weekNumberTitle:"שבוע",allDayText:"כל היום",eventLimitText:"אחר"})}(),function(){!function(){"use strict";var a={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},c={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},d=(b.defineLocale||b.lang).call(b,"hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return c[a]})},postformat:function(b){return b.replace(/\d/g,function(b){return a[b]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(a,b){return 12===a&&(a=0),"रात"===b?4>a?a:a+12:"सुबह"===b?a:"दोपहर"===b?a>=10?a:a+12:"शाम"===b?a+12:void 0},meridiem:function(a,b,c){return 4>a?"रात":10>a?"सुबह":17>a?"दोपहर":20>a?"शाम":"रात"},week:{dow:0,doy:6}});return d}(),a.fullCalendar.datepickerLang("hi","hi",{closeText:"बंद",prevText:"पिछला",nextText:"अगला",currentText:"आज",monthNames:["जनवरी ","फरवरी","मार्च","अप्रेल","मई","जून","जूलाई","अगस्त ","सितम्बर","अक्टूबर","नवम्बर","दिसम्बर"],monthNamesShort:["जन","फर","मार्च","अप्रेल","मई","जून","जूलाई","अग","सित","अक्ट","नव","दि"],dayNames:["रविवार","सोमवार","मंगलवार","बुधवार","गुरुवार","शुक्रवार","शनिवार"],dayNamesShort:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],dayNamesMin:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],weekHeader:"हफ्ता",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("hi",{buttonText:{month:"महीना",week:"सप्ताह",day:"दिन",list:"कार्यसूची"},allDayText:"सभी दिन",eventLimitText:function(a){return"+अधिक "+a}})}(),function(){!function(){"use strict";function a(a,b,c){var d=a+" ";switch(c){case"m":return b?"jedna minuta":"jedne minute";case"mm":return d+=1===a?"minuta":2===a||3===a||4===a?"minute":"minuta";case"h":return b?"jedan sat":"jednog sata";case"hh":return d+=1===a?"sat":2===a||3===a||4===a?"sata":"sati";case"dd":return d+=1===a?"dan":"dana";case"MM":return d+=1===a?"mjesec":2===a||3===a||4===a?"mjeseca":"mjeseci";case"yy":return d+=1===a?"godina":2===a||3===a||4===a?"godine":"godina"}}var c=(b.defineLocale||b.lang).call(b,"hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:a,mm:a,h:a,hh:a,d:"dan",dd:a,M:"mjesec",MM:a,y:"godinu",yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("hr","hr",{closeText:"Zatvori",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Danas",monthNames:["Siječanj","Veljača","Ožujak","Travanj","Svibanj","Lipanj","Srpanj","Kolovoz","Rujan","Listopad","Studeni","Prosinac"],monthNamesShort:["Sij","Velj","Ožu","Tra","Svi","Lip","Srp","Kol","Ruj","Lis","Stu","Pro"],dayNames:["Nedjelja","Ponedjeljak","Utorak","Srijeda","Četvrtak","Petak","Subota"],dayNamesShort:["Ned","Pon","Uto","Sri","Čet","Pet","Sub"],dayNamesMin:["Ne","Po","Ut","Sr","Če","Pe","Su"],weekHeader:"Tje",dateFormat:"dd.mm.yy.",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("hr",{buttonText:{month:"Mjesec",week:"Tjedan",day:"Dan",list:"Raspored"},allDayText:"Cijeli dan",eventLimitText:function(a){return"+ još "+a}})}(),function(){!function(){"use strict";function a(a,b,c,d){var e=a;switch(c){case"s":return d||b?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(d||b?" perc":" perce");case"mm":return e+(d||b?" perc":" perce");case"h":return"egy"+(d||b?" óra":" órája");case"hh":return e+(d||b?" óra":" órája");case"d":return"egy"+(d||b?" nap":" napja");case"dd":return e+(d||b?" nap":" napja");case"M":return"egy"+(d||b?" hónap":" hónapja");case"MM":return e+(d||b?" hónap":" hónapja");case"y":return"egy"+(d||b?" év":" éve");case"yy":return e+(d||b?" év":" éve")}return""}function c(a){return(a?"":"[múlt] ")+"["+d[this.day()]+"] LT[-kor]"}var d="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" "),e=(b.defineLocale||b.lang).call(b,"hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(a){return"u"===a.charAt(1).toLowerCase()},meridiem:function(a,b,c){return 12>a?c===!0?"de":"DE":c===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return c.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return c.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return e}(),a.fullCalendar.datepickerLang("hu","hu",{closeText:"bezár",prevText:"vissza",nextText:"előre",currentText:"ma",monthNames:["Január","Február","Március","Április","Május","Június","Július","Augusztus","Szeptember","Október","November","December"],monthNamesShort:["Jan","Feb","Már","Ápr","Máj","Jún","Júl","Aug","Szep","Okt","Nov","Dec"],dayNames:["Vasárnap","Hétfő","Kedd","Szerda","Csütörtök","Péntek","Szombat"],dayNamesShort:["Vas","Hét","Ked","Sze","Csü","Pén","Szo"],dayNamesMin:["V","H","K","Sze","Cs","P","Szo"],weekHeader:"Hét",dateFormat:"yy.mm.dd.",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),a.fullCalendar.lang("hu",{buttonText:{month:"Hónap",week:"Hét",day:"Nap",list:"Napló"},allDayText:"Egész nap",eventLimitText:"további"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),"pagi"===b?a:"siang"===b?a>=11?a:a+12:"sore"===b||"malam"===b?a+12:void 0},meridiem:function(a,b,c){return 11>a?"pagi":15>a?"siang":19>a?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}});return a}(),a.fullCalendar.datepickerLang("id","id",{closeText:"Tutup",prevText:"&#x3C;mundur",nextText:"maju&#x3E;",currentText:"hari ini",monthNames:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","Nopember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agus","Sep","Okt","Nop","Des"],dayNames:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],dayNamesShort:["Min","Sen","Sel","Rab","kam","Jum","Sab"],dayNamesMin:["Mg","Sn","Sl","Rb","Km","jm","Sb"],weekHeader:"Mg",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("id",{buttonText:{month:"Bulan",week:"Minggu",day:"Hari",list:"Agenda"},allDayHtml:"Sehari<br/>penuh",eventLimitText:"lebih"})}(),function(){!function(){"use strict";function a(a){return a%100===11?!0:a%10!==1}function c(b,c,d,e){var f=b+" ";switch(d){case"s":return c||e?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return c?"mínúta":"mínútu";case"mm":return a(b)?f+(c||e?"mínútur":"mínútum"):c?f+"mínúta":f+"mínútu";case"hh":return a(b)?f+(c||e?"klukkustundir":"klukkustundum"):f+"klukkustund";case"d":return c?"dagur":e?"dag":"degi";case"dd":return a(b)?c?f+"dagar":f+(e?"daga":"dögum"):c?f+"dagur":f+(e?"dag":"degi");case"M":return c?"mánuður":e?"mánuð":"mánuði";case"MM":return a(b)?c?f+"mánuðir":f+(e?"mánuði":"mánuðum"):c?f+"mánuður":f+(e?"mánuð":"mánuði");case"y":return c||e?"ár":"ári";case"yy":return a(b)?f+(c||e?"ár":"árum"):f+(c||e?"ár":"ári")}}var d=(b.defineLocale||b.lang).call(b,"is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:c,m:c,mm:c,h:"klukkustund",hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return d}(),a.fullCalendar.datepickerLang("is","is",{closeText:"Loka",prevText:"&#x3C; Fyrri",nextText:"Næsti &#x3E;",currentText:"Í dag",monthNames:["Janúar","Febrúar","Mars","Apríl","Maí","Júní","Júlí","Ágúst","September","Október","Nóvember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Maí","Jún","Júl","Ágú","Sep","Okt","Nóv","Des"],dayNames:["Sunnudagur","Mánudagur","Þriðjudagur","Miðvikudagur","Fimmtudagur","Föstudagur","Laugardagur"],dayNamesShort:["Sun","Mán","Þri","Mið","Fim","Fös","Lau"],dayNamesMin:["Su","Má","Þr","Mi","Fi","Fö","La"],weekHeader:"Vika",dateFormat:"dd.mm.yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("is",{buttonText:{month:"Mánuður",week:"Vika",day:"Dagur",list:"Dagskrá"},allDayHtml:"Allan<br/>daginn",eventLimitText:"meira"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(a){return(/^[0-9].+$/.test(a)?"tra":"in")+" "+a},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("it","it",{closeText:"Chiudi",prevText:"&#x3C;Prec",nextText:"Succ&#x3E;",currentText:"Oggi",monthNames:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],monthNamesShort:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],dayNames:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"],dayNamesShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],dayNamesMin:["Do","Lu","Ma","Me","Gi","Ve","Sa"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("it",{buttonText:{month:"Mese",week:"Settimana",day:"Giorno",list:"Agenda"},allDayHtml:"Tutto il<br/>giorno",eventLimitText:function(a){return"+altri "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"Ah時m分s秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah時m分",LLLL:"YYYY年M月D日Ah時m分 dddd"},meridiemParse:/午前|午後/i,isPM:function(a){return"午後"===a},meridiem:function(a,b,c){return 12>a?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},ordinalParse:/\d{1,2}日/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";default:return a}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}});return a}(),a.fullCalendar.datepickerLang("ja","ja",{closeText:"閉じる",prevText:"&#x3C;前",nextText:"次&#x3E;",currentText:"今日",monthNames:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],monthNamesShort:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dayNames:["日曜日","月曜日","火曜日","水曜日","木曜日","金曜日","土曜日"],dayNamesShort:["日","月","火","水","木","金","土"],dayNamesMin:["日","月","火","水","木","金","土"],weekHeader:"週",dateFormat:"yy/mm/dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("ja",{buttonText:{month:"月",week:"週",day:"日",list:"予定リスト"},allDayText:"終日",eventLimitText:function(a){return"他 "+a+" 件"}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h시 m분",LLLL:"YYYY년 MMMM D일 dddd A h시 m분"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"일분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(a){return"오후"===a},meridiem:function(a,b,c){return 12>a?"오전":"오후"}});return a}(),a.fullCalendar.datepickerLang("ko","ko",{closeText:"닫기",prevText:"이전달",nextText:"다음달",currentText:"오늘",monthNames:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],monthNamesShort:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],dayNames:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],dayNamesShort:["일","월","화","수","목","금","토"],dayNamesMin:["일","월","화","수","목","금","토"],weekHeader:"Wk",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"년"}),a.fullCalendar.lang("ko",{buttonText:{month:"월",week:"주",day:"일",list:"일정목록"},allDayText:"종일",eventLimitText:"개"})}(),function(){!function(){"use strict";function a(a,b,c,d){return b?"kelios sekundės":d?"kelių sekundžių":"kelias sekundes"}function c(a,b,c,d){return b?e(c)[0]:d?e(c)[1]:e(c)[2]}function d(a){return a%10===0||a>10&&20>a}function e(a){return g[a].split("_")}function f(a,b,f,g){var h=a+" ";return 1===a?h+c(a,b,f[0],g):b?h+(d(a)?e(f)[1]:e(f)[0]):g?h+e(f)[1]:h+(d(a)?e(f)[1]:e(f)[2])}var g={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",
h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"},h=(b.defineLocale||b.lang).call(b,"lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_")},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:a,m:c,mm:f,h:c,hh:f,d:c,dd:f,M:c,MM:f,y:c,yy:f},ordinalParse:/\d{1,2}-oji/,ordinal:function(a){return a+"-oji"},week:{dow:1,doy:4}});return h}(),a.fullCalendar.datepickerLang("lt","lt",{closeText:"Uždaryti",prevText:"&#x3C;Atgal",nextText:"Pirmyn&#x3E;",currentText:"Šiandien",monthNames:["Sausis","Vasaris","Kovas","Balandis","Gegužė","Birželis","Liepa","Rugpjūtis","Rugsėjis","Spalis","Lapkritis","Gruodis"],monthNamesShort:["Sau","Vas","Kov","Bal","Geg","Bir","Lie","Rugp","Rugs","Spa","Lap","Gru"],dayNames:["sekmadienis","pirmadienis","antradienis","trečiadienis","ketvirtadienis","penktadienis","šeštadienis"],dayNamesShort:["sek","pir","ant","tre","ket","pen","šeš"],dayNamesMin:["Se","Pr","An","Tr","Ke","Pe","Še"],weekHeader:"SAV",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),a.fullCalendar.lang("lt",{buttonText:{month:"Mėnuo",week:"Savaitė",day:"Diena",list:"Darbotvarkė"},allDayText:"Visą dieną",eventLimitText:"daugiau"})}(),function(){!function(){"use strict";function a(a,b,c){return c?b%10===1&&11!==b?a[2]:a[3]:b%10===1&&11!==b?a[0]:a[1]}function c(b,c,d){return b+" "+a(f[d],b,c)}function d(b,c,d){return a(f[d],b,c)}function e(a,b){return b?"dažas sekundes":"dažām sekundēm"}var f={m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")},g=(b.defineLocale||b.lang).call(b,"lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:e,m:d,mm:c,h:d,hh:c,d:d,dd:c,M:d,MM:c,y:d,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return g}(),a.fullCalendar.datepickerLang("lv","lv",{closeText:"Aizvērt",prevText:"Iepr.",nextText:"Nāk.",currentText:"Šodien",monthNames:["Janvāris","Februāris","Marts","Aprīlis","Maijs","Jūnijs","Jūlijs","Augusts","Septembris","Oktobris","Novembris","Decembris"],monthNamesShort:["Jan","Feb","Mar","Apr","Mai","Jūn","Jūl","Aug","Sep","Okt","Nov","Dec"],dayNames:["svētdiena","pirmdiena","otrdiena","trešdiena","ceturtdiena","piektdiena","sestdiena"],dayNamesShort:["svt","prm","otr","tre","ctr","pkt","sst"],dayNamesMin:["Sv","Pr","Ot","Tr","Ct","Pk","Ss"],weekHeader:"Ned.",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("lv",{buttonText:{month:"Mēnesis",week:"Nedēļa",day:"Diena",list:"Dienas kārtība"},allDayText:"Visu dienu",eventLimitText:function(a){return"+vēl "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("nb","nb",{closeText:"Lukk",prevText:"&#xAB;Forrige",nextText:"Neste&#xBB;",currentText:"I dag",monthNames:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],monthNamesShort:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],dayNamesShort:["søn","man","tir","ons","tor","fre","lør"],dayNames:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],dayNamesMin:["sø","ma","ti","on","to","fr","lø"],weekHeader:"Uke",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("nb",{buttonText:{month:"Måned",week:"Uke",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"til"})}(),function(){!function(){"use strict";var a="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),c="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),d=(b.defineLocale||b.lang).call(b,"nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(b,d){return/-MMM-/.test(d)?c[b.month()]:a[b.month()]},monthsParseExact:!0,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,doy:4}});return d}(),a.fullCalendar.datepickerLang("nl","nl",{closeText:"Sluiten",prevText:"←",nextText:"→",currentText:"Vandaag",monthNames:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],monthNamesShort:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"],dayNames:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],dayNamesShort:["zon","maa","din","woe","don","vri","zat"],dayNamesMin:["zo","ma","di","wo","do","vr","za"],weekHeader:"Wk",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("nl",{buttonText:{month:"Maand",week:"Week",day:"Dag",list:"Agenda"},allDayText:"Hele dag",eventLimitText:"extra"})}(),function(){!function(){"use strict";function a(a){return 5>a%10&&a%10>1&&~~(a/10)%10!==1}function c(b,c,d){var e=b+" ";switch(d){case"m":return c?"minuta":"minutę";case"mm":return e+(a(b)?"minuty":"minut");case"h":return c?"godzina":"godzinę";case"hh":return e+(a(b)?"godziny":"godzin");case"MM":return e+(a(b)?"miesiące":"miesięcy");case"yy":return e+(a(b)?"lata":"lat")}}var d="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),e="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),f=(b.defineLocale||b.lang).call(b,"pl",{months:function(a,b){return""===b?"("+e[a.month()]+"|"+d[a.month()]+")":/D MMMM/.test(b)?e[a.month()]:d[a.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:c,mm:c,h:c,hh:c,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:c,y:"rok",yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return f}(),a.fullCalendar.datepickerLang("pl","pl",{closeText:"Zamknij",prevText:"&#x3C;Poprzedni",nextText:"Następny&#x3E;",currentText:"Dziś",monthNames:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],monthNamesShort:["Sty","Lu","Mar","Kw","Maj","Cze","Lip","Sie","Wrz","Pa","Lis","Gru"],dayNames:["Niedziela","Poniedziałek","Wtorek","Środa","Czwartek","Piątek","Sobota"],dayNamesShort:["Nie","Pn","Wt","Śr","Czw","Pt","So"],dayNamesMin:["N","Pn","Wt","Śr","Cz","Pt","So"],weekHeader:"Tydz",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pl",{buttonText:{month:"Miesiąc",week:"Tydzień",day:"Dzień",list:"Plan dnia"},allDayText:"Cały dzień",eventLimitText:"więcej"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"poucos segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"});return a}(),a.fullCalendar.datepickerLang("pt-br","pt-BR",{closeText:"Fechar",prevText:"&#x3C;Anterior",nextText:"Próximo&#x3E;",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pt-br",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Compromissos"},allDayText:"dia inteiro",eventLimitText:function(a){return"mais +"+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("pt","pt",{closeText:"Fechar",prevText:"Anterior",nextText:"Seguinte",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sem",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pt",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Agenda"},allDayText:"Todo o dia",eventLimitText:"mais"})}(),function(){!function(){"use strict";function a(a,b,c){var d={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},e=" ";return(a%100>=20||a>=100&&a%100===0)&&(e=" de "),a+e+d[c]}var c=(b.defineLocale||b.lang).call(b,"ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:a,h:"o oră",hh:a,d:"o zi",dd:a,M:"o lună",MM:a,y:"un an",yy:a},week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("ro","ro",{closeText:"Închide",prevText:"&#xAB; Luna precedentă",nextText:"Luna următoare &#xBB;",currentText:"Azi",monthNames:["Ianuarie","Februarie","Martie","Aprilie","Mai","Iunie","Iulie","August","Septembrie","Octombrie","Noiembrie","Decembrie"],monthNamesShort:["Ian","Feb","Mar","Apr","Mai","Iun","Iul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Duminică","Luni","Marţi","Miercuri","Joi","Vineri","Sâmbătă"],dayNamesShort:["Dum","Lun","Mar","Mie","Joi","Vin","Sâm"],dayNamesMin:["Du","Lu","Ma","Mi","Jo","Vi","Sâ"],weekHeader:"Săpt",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ro",{buttonText:{prev:"precedentă",next:"următoare",month:"Lună",week:"Săptămână",day:"Zi",list:"Agendă"},allDayText:"Toată ziua",eventLimitText:function(a){return"+alte "+a}})}(),function(){!function(){"use strict";function a(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function c(b,c,d){var e={mm:c?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===d?c?"минута":"минуту":b+" "+a(e[d],+b)}var d=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],e=(b.defineLocale||b.lang).call(b,"ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:d,longMonthsParse:d,shortMonthsParse:d,monthsRegex:/^(сентябр[яь]|октябр[яь]|декабр[яь]|феврал[яь]|январ[яь]|апрел[яь]|августа?|ноябр[яь]|сент\.|февр\.|нояб\.|июнь|янв.|июль|дек.|авг.|апр.|марта|мар[.т]|окт.|июн[яь]|июл[яь]|ма[яй])/i,monthsShortRegex:/^(сентябр[яь]|октябр[яь]|декабр[яь]|феврал[яь]|январ[яь]|апрел[яь]|августа?|ноябр[яь]|сент\.|февр\.|нояб\.|июнь|янв.|июль|дек.|авг.|апр.|марта|мар[.т]|окт.|июн[яь]|июл[яь]|ма[яй])/i,monthsStrictRegex:/^(сентябр[яь]|октябр[яь]|декабр[яь]|феврал[яь]|январ[яь]|апрел[яь]|августа?|ноябр[яь]|марта?|июн[яь]|июл[яь]|ма[яй])/i,monthsShortStrictRegex:/^(нояб\.|февр\.|сент\.|июль|янв\.|июн[яь]|мар[.т]|авг\.|апр\.|окт\.|дек\.|ма[яй])/i,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(a){if(a.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В следующее] dddd [в] LT";case 1:case 2:case 4:return"[В следующий] dddd [в] LT";case 3:case 5:case 6:return"[В следующую] dddd [в] LT"}},lastWeek:function(a){if(a.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:c,mm:c,h:"час",hh:c,d:"день",dd:c,M:"месяц",MM:c,y:"год",yy:c},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(a){return/^(дня|вечера)$/.test(a)},meridiem:function(a,b,c){return 4>a?"ночи":12>a?"утра":17>a?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":return a+"-й";case"D":return a+"-го";case"w":case"W":return a+"-я";default:return a}},week:{dow:1,doy:7}});return e}(),a.fullCalendar.datepickerLang("ru","ru",{closeText:"Закрыть",prevText:"&#x3C;Пред",nextText:"След&#x3E;",currentText:"Сегодня",monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],dayNamesShort:["вск","пнд","втр","срд","чтв","птн","сбт"],dayNamesMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Нед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ru",{buttonText:{month:"Месяц",week:"Неделя",day:"День",list:"Повестка дня"},allDayText:"Весь день",eventLimitText:function(a){return"+ ещё "+a}})}(),function(){!function(){"use strict";function a(a){return a>1&&5>a}function c(b,c,d,e){var f=b+" ";switch(d){case"s":return c||e?"pár sekúnd":"pár sekundami";case"m":return c?"minúta":e?"minútu":"minútou";case"mm":return c||e?f+(a(b)?"minúty":"minút"):f+"minútami";case"h":return c?"hodina":e?"hodinu":"hodinou";case"hh":return c||e?f+(a(b)?"hodiny":"hodín"):f+"hodinami";case"d":return c||e?"deň":"dňom";case"dd":return c||e?f+(a(b)?"dni":"dní"):f+"dňami";case"M":return c||e?"mesiac":"mesiacom";case"MM":return c||e?f+(a(b)?"mesiace":"mesiacov"):f+"mesiacmi";case"y":return c||e?"rok":"rokom";case"yy":return c||e?f+(a(b)?"roky":"rokov"):f+"rokmi"}}var d="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),e="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"),f=(b.defineLocale||b.lang).call(b,"sk",{months:d,monthsShort:e,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return f}(),a.fullCalendar.datepickerLang("sk","sk",{closeText:"Zavrieť",prevText:"&#x3C;Predchádzajúci",nextText:"Nasledujúci&#x3E;",currentText:"Dnes",monthNames:["január","február","marec","apríl","máj","jún","júl","august","september","október","november","december"],monthNamesShort:["Jan","Feb","Mar","Apr","Máj","Jún","Júl","Aug","Sep","Okt","Nov","Dec"],dayNames:["nedeľa","pondelok","utorok","streda","štvrtok","piatok","sobota"],dayNamesShort:["Ned","Pon","Uto","Str","Štv","Pia","Sob"],dayNamesMin:["Ne","Po","Ut","St","Št","Pia","So"],weekHeader:"Ty",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sk",{buttonText:{month:"Mesiac",week:"Týždeň",day:"Deň",list:"Rozvrh"},allDayText:"Celý deň",eventLimitText:function(a){return"+ďalšie: "+a}})}(),function(){!function(){"use strict";function a(a,b,c,d){var e=a+" ";switch(c){case"s":return b||d?"nekaj sekund":"nekaj sekundami";case"m":return b?"ena minuta":"eno minuto";case"mm":return e+=1===a?b?"minuta":"minuto":2===a?b||d?"minuti":"minutama":5>a?b||d?"minute":"minutami":b||d?"minut":"minutami";case"h":return b?"ena ura":"eno uro";case"hh":return e+=1===a?b?"ura":"uro":2===a?b||d?"uri":"urama":5>a?b||d?"ure":"urami":b||d?"ur":"urami";case"d":return b||d?"en dan":"enim dnem";case"dd":return e+=1===a?b||d?"dan":"dnem":2===a?b||d?"dni":"dnevoma":b||d?"dni":"dnevi";case"M":return b||d?"en mesec":"enim mesecem";case"MM":return e+=1===a?b||d?"mesec":"mesecem":2===a?b||d?"meseca":"mesecema":5>a?b||d?"mesece":"meseci":b||d?"mesecev":"meseci";case"y":return b||d?"eno leto":"enim letom";case"yy":return e+=1===a?b||d?"leto":"letom":2===a?b||d?"leti":"letoma":5>a?b||d?"leta":"leti":b||d?"let":"leti"}}var c=(b.defineLocale||b.lang).call(b,"sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("sl","sl",{closeText:"Zapri",prevText:"&#x3C;Prejšnji",nextText:"Naslednji&#x3E;",currentText:"Trenutni",monthNames:["Januar","Februar","Marec","April","Maj","Junij","Julij","Avgust","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Avg","Sep","Okt","Nov","Dec"],dayNames:["Nedelja","Ponedeljek","Torek","Sreda","Četrtek","Petek","Sobota"],dayNamesShort:["Ned","Pon","Tor","Sre","Čet","Pet","Sob"],dayNamesMin:["Ne","Po","To","Sr","Če","Pe","So"],weekHeader:"Teden",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sl",{buttonText:{month:"Mesec",week:"Teden",day:"Dan",list:"Dnevni red"},allDayText:"Ves dan",eventLimitText:"več"})}(),function(){!function(){"use strict";var a={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(b,c,d){var e=a.words[d];return 1===d.length?c?e[0]:e[1]:b+" "+a.correctGrammaticalCase(b,e)}},c=(b.defineLocale||b.lang).call(b,"sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var a=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:"дан",dd:a.translate,M:"месец",MM:a.translate,y:"годину",yy:a.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("sr-cyrl","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sr-cyrl",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(a){return"+ још "+a}})}(),function(){!function(){"use strict";var a={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(b,c,d){var e=a.words[d];return 1===d.length?c?e[0]:e[1]:b+" "+a.correctGrammaticalCase(b,e)}},c=(b.defineLocale||b.lang).call(b,"sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var a=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:a.translate,mm:a.translate,h:a.translate,hh:a.translate,d:"dan",dd:a.translate,M:"mesec",MM:a.translate,y:"godinu",yy:a.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("sr","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sr",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(a){return"+ још "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"e":1===b?"a":2===b?"a":"e";return a+c},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("sv","sv",{closeText:"Stäng",prevText:"&#xAB;Förra",nextText:"Nästa&#xBB;",currentText:"Idag",monthNames:["Januari","Februari","Mars","April","Maj","Juni","Juli","Augusti","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNamesShort:["Sön","Mån","Tis","Ons","Tor","Fre","Lör"],dayNames:["Söndag","Måndag","Tisdag","Onsdag","Torsdag","Fredag","Lördag"],dayNamesMin:["Sö","Må","Ti","On","To","Fr","Lö"],weekHeader:"Ve",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sv",{buttonText:{month:"Månad",week:"Vecka",day:"Dag",list:"Program"},allDayText:"Heldag",eventLimitText:"till"})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H นาฬิกา m นาที",LTS:"H นาฬิกา m นาที s วินาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H นาฬิกา m นาที",LLLL:"วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(a){return"หลังเที่ยง"===a},meridiem:function(a,b,c){return 12>a?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}});return a}(),a.fullCalendar.datepickerLang("th","th",{closeText:"ปิด",prevText:"&#xAB;&#xA0;ย้อน",nextText:"ถัดไป&#xA0;&#xBB;",currentText:"วันนี้",monthNames:["มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน","กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"],monthNamesShort:["ม.ค.","ก.พ.","มี.ค.","เม.ย.","พ.ค.","มิ.ย.","ก.ค.","ส.ค.","ก.ย.","ต.ค.","พ.ย.","ธ.ค."],dayNames:["อาทิตย์","จันทร์","อังคาร","พุธ","พฤหัสบดี","ศุกร์","เสาร์"],dayNamesShort:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],dayNamesMin:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("th",{buttonText:{month:"เดือน",week:"สัปดาห์",day:"วัน",list:"แผนงาน"},allDayText:"ตลอดวัน",eventLimitText:"เพิ่มเติม"})}(),function(){!function(){"use strict";var a={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"},c=(b.defineLocale||b.lang).call(b,"tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(b){if(0===b)return b+"'ıncı";var c=b%10,d=b%100-c,e=b>=100?100:null;return b+(a[c]||a[d]||a[e])},week:{dow:1,doy:7}});return c}(),a.fullCalendar.datepickerLang("tr","tr",{closeText:"kapat",prevText:"&#x3C;geri",nextText:"ileri&#x3e",currentText:"bugün",monthNames:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],monthNamesShort:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],dayNames:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],dayNamesShort:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],dayNamesMin:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],weekHeader:"Hf",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("tr",{buttonText:{next:"ileri",month:"Ay",week:"Hafta",day:"Gün",list:"Ajanda"},allDayText:"Tüm gün",eventLimitText:"daha fazla"})}(),function(){!function(){"use strict";function a(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function c(b,c,d){var e={mm:c?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:c?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===d?c?"хвилина":"хвилину":"h"===d?c?"година":"годину":b+" "+a(e[d],+b)}function d(a,b){var c={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},d=/(\[[ВвУу]\]) ?dddd/.test(b)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(b)?"genitive":"nominative";return c[d][a.day()]}function e(a){return function(){return a+"о"+(11===this.hours()?"б":"")+"] LT"}}var f=(b.defineLocale||b.lang).call(b,"uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:d,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:e("[Сьогодні "),nextDay:e("[Завтра "),lastDay:e("[Вчора "),nextWeek:e("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return e("[Минулої] dddd [").call(this);case 1:case 2:case 4:return e("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:c,mm:c,h:"годину",hh:c,d:"день",dd:c,M:"місяць",MM:c,y:"рік",yy:c},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(a){return/^(дня|вечора)$/.test(a)},meridiem:function(a,b,c){return 4>a?"ночі":12>a?"ранку":17>a?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":case"w":case"W":return a+"-й";case"D":return a+"-го";default:return a}},week:{dow:1,doy:7}});return f}(),a.fullCalendar.datepickerLang("uk","uk",{closeText:"Закрити",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Сьогодні",monthNames:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],monthNamesShort:["Січ","Лют","Бер","Кві","Тра","Чер","Лип","Сер","Вер","Жов","Лис","Гру"],dayNames:["неділя","понеділок","вівторок","середа","четвер","п’ятниця","субота"],dayNamesShort:["нед","пнд","вів","срд","чтв","птн","сбт"],dayNamesMin:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Тиж",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("uk",{buttonText:{month:"Місяць",week:"Тиждень",day:"День",list:"Порядок денний"},allDayText:"Увесь день",eventLimitText:function(a){return"+ще "+a+"..."}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(a){return/^ch$/i.test(a)},meridiem:function(a,b,c){return 12>a?c?"sa":"SA":c?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(a){return a},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("vi","vi",{closeText:"Đóng",prevText:"&#x3C;Trước",nextText:"Tiếp&#x3E;",currentText:"Hôm nay",monthNames:["Tháng Một","Tháng Hai","Tháng Ba","Tháng Tư","Tháng Năm","Tháng Sáu","Tháng Bảy","Tháng Tám","Tháng Chín","Tháng Mười","Tháng Mười Một","Tháng Mười Hai"],monthNamesShort:["Tháng 1","Tháng 2","Tháng 3","Tháng 4","Tháng 5","Tháng 6","Tháng 7","Tháng 8","Tháng 9","Tháng 10","Tháng 11","Tháng 12"],dayNames:["Chủ Nhật","Thứ Hai","Thứ Ba","Thứ Tư","Thứ Năm","Thứ Sáu","Thứ Bảy"],dayNamesShort:["CN","T2","T3","T4","T5","T6","T7"],dayNamesMin:["CN","T2","T3","T4","T5","T6","T7"],weekHeader:"Tu",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("vi",{buttonText:{month:"Tháng",week:"Tuần",day:"Ngày",list:"Lịch biểu"},allDayText:"Cả ngày",eventLimitText:function(a){return"+ thêm "+a}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm分",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah点mm分",LLLL:"YYYY年MMMD日ddddAh点mm分",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah点mm分",llll:"YYYY年MMMD日ddddAh点mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"凌晨"===b||"早上"===b||"上午"===b?a:"下午"===b||"晚上"===b?a+12:a>=11?a:a+12},meridiem:function(a,b,c){var d=100*a+b;return 600>d?"凌晨":900>d?"早上":1130>d?"上午":1230>d?"中午":1800>d?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var a,c;return a=b().startOf("week"),c=this.diff(a,"days")>=7?"[下]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},lastWeek:function(){var a,c;return a=b().startOf("week"),c=this.unix()<a.unix()?"[上]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"周";default:return a}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}});return a}(),a.fullCalendar.datepickerLang("zh-cn","zh-CN",{closeText:"关闭",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("zh-cn",{buttonText:{month:"月",week:"周",day:"日",list:"日程"},allDayText:"全天",eventLimitText:function(a){return"另外 "+a+" 个"}})}(),function(){!function(){"use strict";var a=(b.defineLocale||b.lang).call(b,"zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"早上"===b||"上午"===b?a:"中午"===b?a>=11?a:a+12:"下午"===b||"晚上"===b?a+12:void 0},meridiem:function(a,b,c){var d=100*a+b;return 900>d?"早上":1130>d?"上午":1230>d?"中午":1800>d?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"週";default:return a}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1分鐘",mm:"%d分鐘",h:"1小時",hh:"%d小時",d:"1天",dd:"%d天",M:"1個月",MM:"%d個月",y:"1年",yy:"%d年"}});return a}(),a.fullCalendar.datepickerLang("zh-tw","zh-TW",{closeText:"關閉",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy/mm/dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("zh-tw",{buttonText:{month:"月",week:"週",day:"天",list:"待辦事項"},allDayText:"全天",eventLimitText:"更多"})}(),(b.locale||b.lang).call(b,"en"),a.fullCalendar.lang("en"),a.datepicker&&a.datepicker.setDefaults(a.datepicker.regional[""])});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/gcal.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.7.2 Google Calendar Plugin                                                                          // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2016 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery' ], factory);                                                                                       // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'));                                                                         // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery);                                                                                                     // 15
	}                                                                                                                     // 16
})(function($) {                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
var API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';                                                     // 20
var FC = $.fullCalendar;                                                                                               // 21
var applyAll = FC.applyAll;                                                                                            // 22
                                                                                                                       // 23
                                                                                                                       // 24
FC.sourceNormalizers.push(function(sourceOptions) {                                                                    // 25
	var googleCalendarId = sourceOptions.googleCalendarId;                                                                // 26
	var url = sourceOptions.url;                                                                                          // 27
	var match;                                                                                                            // 28
                                                                                                                       // 29
	// if the Google Calendar ID hasn't been explicitly defined                                                           // 30
	if (!googleCalendarId && url) {                                                                                       // 31
                                                                                                                       // 32
		// detect if the ID was specified as a single string.                                                                // 33
		// will match calendars like "asdf1234@calendar.google.com" in addition to person email calendars.                   // 34
		if (/^[^\/]+@([^\/\.]+\.)*(google|googlemail|gmail)\.com$/.test(url)) {                                              // 35
			googleCalendarId = url;                                                                                             // 36
		}                                                                                                                    // 37
		// try to scrape it out of a V1 or V3 API feed URL                                                                   // 38
		else if (                                                                                                            // 39
			(match = /^https:\/\/www.googleapis.com\/calendar\/v3\/calendars\/([^\/]*)/.exec(url)) ||                           // 40
			(match = /^https?:\/\/www.google.com\/calendar\/feeds\/([^\/]*)/.exec(url))                                         // 41
		) {                                                                                                                  // 42
			googleCalendarId = decodeURIComponent(match[1]);                                                                    // 43
		}                                                                                                                    // 44
                                                                                                                       // 45
		if (googleCalendarId) {                                                                                              // 46
			sourceOptions.googleCalendarId = googleCalendarId;                                                                  // 47
		}                                                                                                                    // 48
	}                                                                                                                     // 49
                                                                                                                       // 50
                                                                                                                       // 51
	if (googleCalendarId) { // is this a Google Calendar?                                                                 // 52
                                                                                                                       // 53
		// make each Google Calendar source uneditable by default                                                            // 54
		if (sourceOptions.editable == null) {                                                                                // 55
			sourceOptions.editable = false;                                                                                     // 56
		}                                                                                                                    // 57
                                                                                                                       // 58
		// We want removeEventSource to work, but it won't know about the googleCalendarId primitive.                        // 59
		// Shoehorn it into the url, which will function as the unique primitive. Won't cause side effects.                  // 60
		// This hack is obsolete since 2.2.3, but keep it so this plugin file is compatible with old versions.               // 61
		sourceOptions.url = googleCalendarId;                                                                                // 62
	}                                                                                                                     // 63
});                                                                                                                    // 64
                                                                                                                       // 65
                                                                                                                       // 66
FC.sourceFetchers.push(function(sourceOptions, start, end, timezone) {                                                 // 67
	if (sourceOptions.googleCalendarId) {                                                                                 // 68
		return transformOptions(sourceOptions, start, end, timezone, this); // `this` is the calendar                        // 69
	}                                                                                                                     // 70
});                                                                                                                    // 71
                                                                                                                       // 72
                                                                                                                       // 73
function transformOptions(sourceOptions, start, end, timezone, calendar) {                                             // 74
	var url = API_BASE + '/' + encodeURIComponent(sourceOptions.googleCalendarId) + '/events?callback=?'; // jsonp        // 75
	var apiKey = sourceOptions.googleCalendarApiKey || calendar.options.googleCalendarApiKey;                             // 76
	var success = sourceOptions.success;                                                                                  // 77
	var data;                                                                                                             // 78
	var timezoneArg; // populated when a specific timezone. escaped to Google's liking                                    // 79
                                                                                                                       // 80
	function reportError(message, apiErrorObjs) {                                                                         // 81
		var errorObjs = apiErrorObjs || [ { message: message } ]; // to be passed into error handlers                        // 82
                                                                                                                       // 83
		// call error handlers                                                                                               // 84
		(sourceOptions.googleCalendarError || $.noop).apply(calendar, errorObjs);                                            // 85
		(calendar.options.googleCalendarError || $.noop).apply(calendar, errorObjs);                                         // 86
                                                                                                                       // 87
		// print error to debug console                                                                                      // 88
		FC.warn.apply(null, [ message ].concat(apiErrorObjs || []));                                                         // 89
	}                                                                                                                     // 90
                                                                                                                       // 91
	if (!apiKey) {                                                                                                        // 92
		reportError("Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/");                     // 93
		return {}; // an empty source to use instead. won't fetch anything.                                                  // 94
	}                                                                                                                     // 95
                                                                                                                       // 96
	// The API expects an ISO8601 datetime with a time and timezone part.                                                 // 97
	// Since the calendar's timezone offset isn't always known, request the date in UTC and pad it by a day on each       // 98
	// side, guaranteeing we will receive all events in the desired range, albeit a superset.                             // 99
	// .utc() will set a zone and give it a 00:00:00 time.                                                                // 100
	if (!start.hasZone()) {                                                                                               // 101
		start = start.clone().utc().add(-1, 'day');                                                                          // 102
	}                                                                                                                     // 103
	if (!end.hasZone()) {                                                                                                 // 104
		end = end.clone().utc().add(1, 'day');                                                                               // 105
	}                                                                                                                     // 106
                                                                                                                       // 107
	// when sending timezone names to Google, only accepts underscores, not spaces                                        // 108
	if (timezone && timezone != 'local') {                                                                                // 109
		timezoneArg = timezone.replace(' ', '_');                                                                            // 110
	}                                                                                                                     // 111
                                                                                                                       // 112
	data = $.extend({}, sourceOptions.data || {}, {                                                                       // 113
		key: apiKey,                                                                                                         // 114
		timeMin: start.format(),                                                                                             // 115
		timeMax: end.format(),                                                                                               // 116
		timeZone: timezoneArg,                                                                                               // 117
		singleEvents: true,                                                                                                  // 118
		maxResults: 9999                                                                                                     // 119
	});                                                                                                                   // 120
                                                                                                                       // 121
	return $.extend({}, sourceOptions, {                                                                                  // 122
		googleCalendarId: null, // prevents source-normalizing from happening again                                          // 123
		url: url,                                                                                                            // 124
		data: data,                                                                                                          // 125
		startParam: false, // `false` omits this parameter. we already included it above                                     // 126
		endParam: false, // same                                                                                             // 127
		timezoneParam: false, // same                                                                                        // 128
		success: function(data) {                                                                                            // 129
			var events = [];                                                                                                    // 130
			var successArgs;                                                                                                    // 131
			var successRes;                                                                                                     // 132
                                                                                                                       // 133
			if (data.error) {                                                                                                   // 134
				reportError('Google Calendar API: ' + data.error.message, data.error.errors);                                      // 135
			}                                                                                                                   // 136
			else if (data.items) {                                                                                              // 137
				$.each(data.items, function(i, entry) {                                                                            // 138
					var url = entry.htmlLink || null;                                                                                 // 139
                                                                                                                       // 140
					// make the URLs for each event show times in the correct timezone                                                // 141
					if (timezoneArg && url !== null) {                                                                                // 142
						url = injectQsComponent(url, 'ctz=' + timezoneArg);                                                              // 143
					}                                                                                                                 // 144
                                                                                                                       // 145
					events.push({                                                                                                     // 146
						id: entry.id,                                                                                                    // 147
						title: entry.summary,                                                                                            // 148
						start: entry.start.dateTime || entry.start.date, // try timed. will fall back to all-day                         // 149
						end: entry.end.dateTime || entry.end.date, // same                                                               // 150
						url: url,                                                                                                        // 151
						location: entry.location,                                                                                        // 152
						description: entry.description                                                                                   // 153
					});                                                                                                               // 154
				});                                                                                                                // 155
                                                                                                                       // 156
				// call the success handler(s) and allow it to return a new events array                                           // 157
				successArgs = [ events ].concat(Array.prototype.slice.call(arguments, 1)); // forward other jq args                // 158
				successRes = applyAll(success, this, successArgs);                                                                 // 159
				if ($.isArray(successRes)) {                                                                                       // 160
					return successRes;                                                                                                // 161
				}                                                                                                                  // 162
			}                                                                                                                   // 163
                                                                                                                       // 164
			return events;                                                                                                      // 165
		}                                                                                                                    // 166
	});                                                                                                                   // 167
}                                                                                                                      // 168
                                                                                                                       // 169
                                                                                                                       // 170
// Injects a string like "arg=value" into the querystring of a URL                                                     // 171
function injectQsComponent(url, component) {                                                                           // 172
	// inject it after the querystring but before the fragment                                                            // 173
	return url.replace(/(\?.*?)?(#|$)/, function(whole, qs, hash) {                                                       // 174
		return (qs ? qs + '&' : '?') + component + hash;                                                                     // 175
	});                                                                                                                   // 176
}                                                                                                                      // 177
                                                                                                                       // 178
                                                                                                                       // 179
});                                                                                                                    // 180
                                                                                                                       // 181
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/template.template.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("fullcalendar");                                                                                  // 2
Template["fullcalendar"] = new Template("Template.fullcalendar", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw("<div></div>");                                                                                      // 5
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/template.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.fullcalendar.rendered = function() {                                                                          // 1
    var div = this.$(this.firstNode);                                                                                  // 2
    if(this.data != null) {                                                                                            // 3
        //jquery takes care of undefined values, no need to check here                                                 // 4
        div.attr('id', this.data.id);                                                                                  // 5
        div.addClass(this.data.class);                                                                                 // 6
    }                                                                                                                  // 7
    div.fullCalendar(this.data);                                                                                       // 8
};                                                                                                                     // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['rzymek:fullcalendar'] = {};

})();
