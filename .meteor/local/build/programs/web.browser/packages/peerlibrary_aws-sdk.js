(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var blocking = Package['peerlibrary:blocking'].blocking;
var _ = Package.underscore._;

/* Package-scope variables */
var AWS;

(function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/peerlibrary_aws-sdk/packages/peerlibrary_aws-sdk.js      //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/peerlibrary:aws-sdk/aws-sdk-js/dist/aws-sdk.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// AWS SDK for JavaScript v2.2.42                                                                                      // 1
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                                                  // 2
// License at https://sdk.amazonaws.com/js/BUNDLE_LICENSE.txt                                                          // 3
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var AWS = require('./core');                                                                                           // 5
                                                                                                                       // 6
AWS.apiLoader = function(svc, version) {                                                                               // 7
  return AWS.apiLoader.services[svc][version];                                                                         // 8
};                                                                                                                     // 9
                                                                                                                       // 10
                                                                                                                       // 11
AWS.apiLoader.services = {};                                                                                           // 12
                                                                                                                       // 13
AWS.XML.Parser = require('./xml/browser_parser');                                                                      // 14
                                                                                                                       // 15
require('./http/xhr');                                                                                                 // 16
                                                                                                                       // 17
if (typeof window !== 'undefined') window.AWS = AWS;                                                                   // 18
if (typeof module !== 'undefined') module.exports = AWS;                                                               // 19
if (typeof self !== 'undefined') self.AWS = AWS;                                                                       // 20
AWS.apiLoader.services['acm'] = {};                                                                                    // 21
AWS.ACM = AWS.Service.defineService('acm', [ '2015-12-08' ]);                                                          // 22
                                                                                                                       // 23
AWS.apiLoader.services['acm']['2015-12-08'] = {"version":"2.0","metadata":{"apiVersion":"2015-12-08","endpointPrefix":"acm","jsonVersion":"1.1","serviceAbbreviation":"ACM","serviceFullName":"AWS Certificate Manager","signatureVersion":"v4","targetPrefix":"CertificateManager","protocol":"json"},"operations":{"DeleteCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"http":{}},"DescribeCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Certificate":{"type":"structure","members":{"CertificateArn":{},"DomainName":{},"SubjectAlternativeNames":{"shape":"S7"},"DomainValidationOptions":{"type":"list","member":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"ValidationEmails":{"type":"list","member":{}},"ValidationDomain":{}}}},"Serial":{},"Subject":{},"Issuer":{},"CreatedAt":{"type":"timestamp"},"IssuedAt":{"type":"timestamp"},"Status":{},"RevokedAt":{"type":"timestamp"},"RevocationReason":{},"NotBefore":{"type":"timestamp"},"NotAfter":{"type":"timestamp"},"KeyAlgorithm":{},"SignatureAlgorithm":{},"InUseBy":{"type":"list","member":{}}}}}},"http":{}},"GetCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Certificate":{},"CertificateChain":{}}},"http":{}},"ListCertificates":{"input":{"type":"structure","members":{"CertificateStatuses":{"type":"list","member":{}},"NextToken":{},"MaxItems":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"CertificateSummaryList":{"type":"list","member":{"type":"structure","members":{"CertificateArn":{},"DomainName":{}}}}}},"http":{}},"RequestCertificate":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"SubjectAlternativeNames":{"shape":"S7"},"IdempotencyToken":{},"DomainValidationOptions":{"type":"list","member":{"type":"structure","required":["DomainName","ValidationDomain"],"members":{"DomainName":{},"ValidationDomain":{}}}}}},"output":{"type":"structure","members":{"CertificateArn":{}}},"http":{}},"ResendValidationEmail":{"input":{"type":"structure","required":["CertificateArn","Domain","ValidationDomain"],"members":{"CertificateArn":{},"Domain":{},"ValidationDomain":{}}},"http":{}}},"shapes":{"S7":{"type":"list","member":{}}},"examples":{},"paginators":{"ListCertificates":{"limit_key":"MaxItems","input_token":"NextToken","output_token":"NextToken","result_key":"CertificateSummaryList"}}};
AWS.apiLoader.services['cloudfront'] = {};                                                                             // 25
AWS.CloudFront = AWS.Service.defineService('cloudfront', [ '2016-01-28' ]);                                            // 26
require('./services/cloudfront');                                                                                      // 27
                                                                                                                       // 28
AWS.apiLoader.services['cloudfront']['2016-01-28'] = {"version":"2.0","metadata":{"apiVersion":"2016-01-28","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","signatureVersion":"v4"},"operations":{"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2016-01-28/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-01-28/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2016-01-28/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-01-28/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1l"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateInvalidation":{"http":{"requestUri":"/2016-01-28/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S1t","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-01-28/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S1x"}},"payload":"Invalidation"}},"CreateStreamingDistribution":{"http":{"requestUri":"/2016-01-28/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S1z","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-01-28/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S23"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2016-01-28/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2016-01-28/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2016-01-28/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2016-01-28/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2016-01-28/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2016-01-28/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S1l"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2016-01-28/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"S7"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2016-01-28/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S1x"}},"payload":"Invalidation"}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2016-01-28/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S23"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2016-01-28/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S1z"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2016-01-28/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2016-01-28/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S2s"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2016-01-28/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S2s"}},"payload":"DistributionList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2016-01-28/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2016-01-28/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S20"},"Aliases":{"shape":"S8"},"TrustedSigners":{"shape":"Sw"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2016-01-28/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-01-28/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2016-01-28/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-01-28/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1l"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2016-01-28/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S1z","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-01-28/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S23"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S2":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"S5":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"}}},"S7":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"S8"},"DefaultRootObject":{},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S14"},"CustomErrorResponses":{"shape":"S17"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1c"},"Restrictions":{"shape":"S1g"},"WebACLId":{}}},"S8":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sb":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}}}}}}}}},"Sn":{"type":"structure","required":["TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sw"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S10"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"}}},"So":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Headers":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Sw":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S10":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S11"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S11"}}}}},"S11":{"type":"list","member":{"locationName":"Method"}},"S14":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"PathPattern":{},"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sw"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S10"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"}}}}}},"S17":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S1c":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S1g":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S1l":{"type":"structure","required":["Id","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","ActiveTrustedSigners","DistributionConfig"],"members":{"Id":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1n"},"DistributionConfig":{"shape":"S7"}}},"S1n":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}}}}}}},"S1t":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S1x":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S1t"}}},"S1z":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S20"},"Aliases":{"shape":"S8"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"Sw"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S20":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S23":{"type":"structure","required":["Id","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1n"},"StreamingDistributionConfig":{"shape":"S1z"}}},"S2s":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId"],"members":{"Id":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"S8"},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S14"},"CustomErrorResponses":{"shape":"S17"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1c"},"Restrictions":{"shape":"S1g"},"WebACLId":{}}}}}}},"paginators":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","output_token":"DistributionList.NextMarker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","output_token":"InvalidationList.NextMarker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","output_token":"StreamingDistributionList.NextMarker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","result_key":"StreamingDistributionList.Items"}},"waiters":{"__default__":{"success_type":"output","success_path":"Status"},"StreamingDistributionDeployed":{"operation":"GetStreamingDistribution","description":"Wait until a streaming distribution is deployed.","interval":60,"max_attempts":25,"success_value":"Deployed"},"DistributionDeployed":{"operation":"GetDistribution","description":"Wait until a distribution is deployed.","interval":60,"max_attempts":25,"success_value":"Deployed"},"InvalidationCompleted":{"operation":"GetInvalidation","description":"Wait until an invalidation has completed.","interval":20,"max_attempts":30,"success_value":"Completed"}}};
AWS.apiLoader.services['cloudtrail'] = {};                                                                             // 30
AWS.CloudTrail = AWS.Service.defineService('cloudtrail', [ '2013-11-01' ]);                                            // 31
                                                                                                                       // 32
AWS.apiLoader.services['cloudtrail']['2013-11-01'] = {"version":"2.0","metadata":{"apiVersion":"2013-11-01","endpointPrefix":"cloudtrail","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CloudTrail","serviceFullName":"AWS CloudTrail","signatureVersion":"v4","targetPrefix":"com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101"},"operations":{"AddTags":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"TagsList":{"shape":"S3"}}},"output":{"type":"structure","members":{}},"http":{}},"CreateTrail":{"input":{"type":"structure","required":["Name","S3BucketName"],"members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"EnableLogFileValidation":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{}}},"output":{"type":"structure","members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"TrailARN":{},"LogFileValidationEnabled":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{}}},"http":{}},"DeleteTrail":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"http":{}},"DescribeTrails":{"input":{"type":"structure","members":{"trailNameList":{"type":"list","member":{}},"includeShadowTrails":{"type":"boolean"}}},"output":{"type":"structure","members":{"trailList":{"type":"list","member":{"type":"structure","members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"HomeRegion":{},"TrailARN":{},"LogFileValidationEnabled":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{}}}}}},"http":{}},"GetTrailStatus":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"IsLogging":{"type":"boolean"},"LatestDeliveryError":{},"LatestNotificationError":{},"LatestDeliveryTime":{"type":"timestamp"},"LatestNotificationTime":{"type":"timestamp"},"StartLoggingTime":{"type":"timestamp"},"StopLoggingTime":{"type":"timestamp"},"LatestCloudWatchLogsDeliveryError":{},"LatestCloudWatchLogsDeliveryTime":{"type":"timestamp"},"LatestDigestDeliveryTime":{"type":"timestamp"},"LatestDigestDeliveryError":{},"LatestDeliveryAttemptTime":{},"LatestNotificationAttemptTime":{},"LatestNotificationAttemptSucceeded":{},"LatestDeliveryAttemptSucceeded":{},"TimeLoggingStarted":{},"TimeLoggingStopped":{}}},"http":{}},"ListPublicKeys":{"input":{"type":"structure","members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"NextToken":{}}},"output":{"type":"structure","members":{"PublicKeyList":{"type":"list","member":{"type":"structure","members":{"Value":{"type":"blob"},"ValidityStartTime":{"type":"timestamp"},"ValidityEndTime":{"type":"timestamp"},"Fingerprint":{}}}},"NextToken":{}}},"http":{}},"ListTags":{"input":{"type":"structure","required":["ResourceIdList"],"members":{"ResourceIdList":{"type":"list","member":{}},"NextToken":{}}},"output":{"type":"structure","members":{"ResourceTagList":{"type":"list","member":{"type":"structure","members":{"ResourceId":{},"TagsList":{"shape":"S3"}}}},"NextToken":{}}},"http":{}},"LookupEvents":{"input":{"type":"structure","members":{"LookupAttributes":{"type":"list","member":{"type":"structure","required":["AttributeKey","AttributeValue"],"members":{"AttributeKey":{},"AttributeValue":{}}}},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Events":{"type":"list","member":{"type":"structure","members":{"EventId":{},"EventName":{},"EventTime":{"type":"timestamp"},"Username":{},"Resources":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"ResourceName":{}}}},"CloudTrailEvent":{}}}},"NextToken":{}}},"http":{}},"RemoveTags":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"TagsList":{"shape":"S3"}}},"output":{"type":"structure","members":{}},"http":{}},"StartLogging":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"http":{}},"StopLogging":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"http":{}},"UpdateTrail":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"EnableLogFileValidation":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{}}},"output":{"type":"structure","members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"TrailARN":{},"LogFileValidationEnabled":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{}}},"http":{}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}},"paginators":{"DescribeTrails":{"result_key":"trailList"}}};
AWS.apiLoader.services['cloudwatch'] = {};                                                                             // 34
AWS.CloudWatch = AWS.Service.defineService('cloudwatch', [ '2010-08-01' ]);                                            // 35
                                                                                                                       // 36
AWS.apiLoader.services['cloudwatch']['2010-08-01'] = {"version":"2.0","metadata":{"apiVersion":"2010-08-01","endpointPrefix":"monitoring","protocol":"query","serviceAbbreviation":"CloudWatch","serviceFullName":"Amazon CloudWatch","signatureVersion":"v4","xmlNamespace":"http://monitoring.amazonaws.com/doc/2010-08-01/"},"operations":{"DeleteAlarms":{"input":{"type":"structure","required":["AlarmNames"],"members":{"AlarmNames":{"shape":"S2"}}},"http":{}},"DescribeAlarmHistory":{"input":{"type":"structure","members":{"AlarmName":{},"HistoryItemType":{},"StartDate":{"type":"timestamp"},"EndDate":{"type":"timestamp"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeAlarmHistoryResult","type":"structure","members":{"AlarmHistoryItems":{"type":"list","member":{"type":"structure","members":{"AlarmName":{},"Timestamp":{"type":"timestamp"},"HistoryItemType":{},"HistorySummary":{},"HistoryData":{}}}},"NextToken":{}}},"http":{}},"DescribeAlarms":{"input":{"type":"structure","members":{"AlarmNames":{"shape":"S2"},"AlarmNamePrefix":{},"StateValue":{},"ActionPrefix":{},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeAlarmsResult","type":"structure","members":{"MetricAlarms":{"shape":"Sj"},"NextToken":{}}},"http":{}},"DescribeAlarmsForMetric":{"input":{"type":"structure","required":["MetricName","Namespace"],"members":{"MetricName":{},"Namespace":{},"Statistic":{},"Dimensions":{"shape":"Sv"},"Period":{"type":"integer"},"Unit":{}}},"output":{"resultWrapper":"DescribeAlarmsForMetricResult","type":"structure","members":{"MetricAlarms":{"shape":"Sj"}}},"http":{}},"DisableAlarmActions":{"input":{"type":"structure","required":["AlarmNames"],"members":{"AlarmNames":{"shape":"S2"}}},"http":{}},"EnableAlarmActions":{"input":{"type":"structure","required":["AlarmNames"],"members":{"AlarmNames":{"shape":"S2"}}},"http":{}},"GetMetricStatistics":{"input":{"type":"structure","required":["Namespace","MetricName","StartTime","EndTime","Period","Statistics"],"members":{"Namespace":{},"MetricName":{},"Dimensions":{"shape":"Sv"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Period":{"type":"integer"},"Statistics":{"type":"list","member":{}},"Unit":{}}},"output":{"resultWrapper":"GetMetricStatisticsResult","type":"structure","members":{"Label":{},"Datapoints":{"type":"list","member":{"type":"structure","members":{"Timestamp":{"type":"timestamp"},"SampleCount":{"type":"double"},"Average":{"type":"double"},"Sum":{"type":"double"},"Minimum":{"type":"double"},"Maximum":{"type":"double"},"Unit":{}},"xmlOrder":["Timestamp","SampleCount","Average","Sum","Minimum","Maximum","Unit"]}}}},"http":{}},"ListMetrics":{"input":{"type":"structure","members":{"Namespace":{},"MetricName":{},"Dimensions":{"type":"list","member":{"type":"structure","required":["Name"],"members":{"Name":{},"Value":{}}}},"NextToken":{}}},"output":{"resultWrapper":"ListMetricsResult","type":"structure","members":{"Metrics":{"type":"list","member":{"type":"structure","members":{"Namespace":{},"MetricName":{},"Dimensions":{"shape":"Sv"}},"xmlOrder":["Namespace","MetricName","Dimensions"]}},"NextToken":{}},"xmlOrder":["Metrics","NextToken"]},"http":{}},"PutMetricAlarm":{"input":{"type":"structure","required":["AlarmName","MetricName","Namespace","Statistic","Period","EvaluationPeriods","Threshold","ComparisonOperator"],"members":{"AlarmName":{},"AlarmDescription":{},"ActionsEnabled":{"type":"boolean"},"OKActions":{"shape":"So"},"AlarmActions":{"shape":"So"},"InsufficientDataActions":{"shape":"So"},"MetricName":{},"Namespace":{},"Statistic":{},"Dimensions":{"shape":"Sv"},"Period":{"type":"integer"},"Unit":{},"EvaluationPeriods":{"type":"integer"},"Threshold":{"type":"double"},"ComparisonOperator":{}}},"http":{}},"PutMetricData":{"input":{"type":"structure","required":["Namespace","MetricData"],"members":{"Namespace":{},"MetricData":{"type":"list","member":{"type":"structure","required":["MetricName"],"members":{"MetricName":{},"Dimensions":{"shape":"Sv"},"Timestamp":{"type":"timestamp"},"Value":{"type":"double"},"StatisticValues":{"type":"structure","required":["SampleCount","Sum","Minimum","Maximum"],"members":{"SampleCount":{"type":"double"},"Sum":{"type":"double"},"Minimum":{"type":"double"},"Maximum":{"type":"double"}}},"Unit":{}}}}}},"http":{}},"SetAlarmState":{"input":{"type":"structure","required":["AlarmName","StateValue","StateReason"],"members":{"AlarmName":{},"StateValue":{},"StateReason":{},"StateReasonData":{}}},"http":{}}},"shapes":{"S2":{"type":"list","member":{}},"Sj":{"type":"list","member":{"type":"structure","members":{"AlarmName":{},"AlarmArn":{},"AlarmDescription":{},"AlarmConfigurationUpdatedTimestamp":{"type":"timestamp"},"ActionsEnabled":{"type":"boolean"},"OKActions":{"shape":"So"},"AlarmActions":{"shape":"So"},"InsufficientDataActions":{"shape":"So"},"StateValue":{},"StateReason":{},"StateReasonData":{},"StateUpdatedTimestamp":{"type":"timestamp"},"MetricName":{},"Namespace":{},"Statistic":{},"Dimensions":{"shape":"Sv"},"Period":{"type":"integer"},"Unit":{},"EvaluationPeriods":{"type":"integer"},"Threshold":{"type":"double"},"ComparisonOperator":{}},"xmlOrder":["AlarmName","AlarmArn","AlarmDescription","AlarmConfigurationUpdatedTimestamp","ActionsEnabled","OKActions","AlarmActions","InsufficientDataActions","StateValue","StateReason","StateReasonData","StateUpdatedTimestamp","MetricName","Namespace","Statistic","Dimensions","Period","Unit","EvaluationPeriods","Threshold","ComparisonOperator"]}},"So":{"type":"list","member":{}},"Sv":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}},"xmlOrder":["Name","Value"]}}},"paginators":{"DescribeAlarmHistory":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxRecords","result_key":"AlarmHistoryItems"},"DescribeAlarms":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxRecords","result_key":"MetricAlarms"},"DescribeAlarmsForMetric":{"result_key":"MetricAlarms"},"ListMetrics":{"input_token":"NextToken","output_token":"NextToken","result_key":"Metrics"}}};
AWS.apiLoader.services['cloudwatchlogs'] = {};                                                                         // 38
AWS.CloudWatchLogs = AWS.Service.defineService('cloudwatchlogs', [ '2014-03-28' ]);                                    // 39
                                                                                                                       // 40
AWS.apiLoader.services['cloudwatchlogs']['2014-03-28'] = {"version":"2.0","metadata":{"apiVersion":"2014-03-28","endpointPrefix":"logs","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon CloudWatch Logs","signatureVersion":"v4","targetPrefix":"Logs_20140328"},"operations":{"CancelExportTask":{"input":{"type":"structure","required":["taskId"],"members":{"taskId":{}}},"http":{}},"CreateExportTask":{"input":{"type":"structure","required":["logGroupName","from","to","destination"],"members":{"taskName":{},"logGroupName":{},"logStreamNamePrefix":{},"from":{"type":"long"},"to":{"type":"long"},"destination":{},"destinationPrefix":{}}},"output":{"type":"structure","members":{"taskId":{}}},"http":{}},"CreateLogGroup":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}},"http":{}},"CreateLogStream":{"input":{"type":"structure","required":["logGroupName","logStreamName"],"members":{"logGroupName":{},"logStreamName":{}}},"http":{}},"DeleteDestination":{"input":{"type":"structure","required":["destinationName"],"members":{"destinationName":{}}},"http":{}},"DeleteLogGroup":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}},"http":{}},"DeleteLogStream":{"input":{"type":"structure","required":["logGroupName","logStreamName"],"members":{"logGroupName":{},"logStreamName":{}}},"http":{}},"DeleteMetricFilter":{"input":{"type":"structure","required":["logGroupName","filterName"],"members":{"logGroupName":{},"filterName":{}}},"http":{}},"DeleteRetentionPolicy":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}},"http":{}},"DeleteSubscriptionFilter":{"input":{"type":"structure","required":["logGroupName","filterName"],"members":{"logGroupName":{},"filterName":{}}},"http":{}},"DescribeDestinations":{"input":{"type":"structure","members":{"DestinationNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"destinations":{"type":"list","member":{"shape":"Sq"}},"nextToken":{}}},"http":{}},"DescribeExportTasks":{"input":{"type":"structure","members":{"taskId":{},"statusCode":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"exportTasks":{"type":"list","member":{"type":"structure","members":{"taskId":{},"taskName":{},"logGroupName":{},"from":{"type":"long"},"to":{"type":"long"},"destination":{},"destinationPrefix":{},"status":{"type":"structure","members":{"code":{},"message":{}}},"executionInfo":{"type":"structure","members":{"creationTime":{"type":"long"},"completionTime":{"type":"long"}}}}}},"nextToken":{}}},"http":{}},"DescribeLogGroups":{"input":{"type":"structure","members":{"logGroupNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"logGroups":{"type":"list","member":{"type":"structure","members":{"logGroupName":{},"creationTime":{"type":"long"},"retentionInDays":{"type":"integer"},"metricFilterCount":{"type":"integer"},"arn":{},"storedBytes":{"type":"long"}}}},"nextToken":{}}},"http":{}},"DescribeLogStreams":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"logStreamNamePrefix":{},"orderBy":{},"descending":{"type":"boolean"},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"logStreams":{"type":"list","member":{"type":"structure","members":{"logStreamName":{},"creationTime":{"type":"long"},"firstEventTimestamp":{"type":"long"},"lastEventTimestamp":{"type":"long"},"lastIngestionTime":{"type":"long"},"uploadSequenceToken":{},"arn":{},"storedBytes":{"type":"long"}}}},"nextToken":{}}},"http":{}},"DescribeMetricFilters":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"filterNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"metricFilters":{"type":"list","member":{"type":"structure","members":{"filterName":{},"filterPattern":{},"metricTransformations":{"shape":"S1m"},"creationTime":{"type":"long"}}}},"nextToken":{}}},"http":{}},"DescribeSubscriptionFilters":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"filterNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"subscriptionFilters":{"type":"list","member":{"type":"structure","members":{"filterName":{},"logGroupName":{},"filterPattern":{},"destinationArn":{},"roleArn":{},"creationTime":{"type":"long"}}}},"nextToken":{}}},"http":{}},"FilterLogEvents":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"logStreamNames":{"type":"list","member":{}},"startTime":{"type":"long"},"endTime":{"type":"long"},"filterPattern":{},"nextToken":{},"limit":{"type":"integer"},"interleaved":{"type":"boolean"}}},"output":{"type":"structure","members":{"events":{"type":"list","member":{"type":"structure","members":{"logStreamName":{},"timestamp":{"type":"long"},"message":{},"ingestionTime":{"type":"long"},"eventId":{}}}},"searchedLogStreams":{"type":"list","member":{"type":"structure","members":{"logStreamName":{},"searchedCompletely":{"type":"boolean"}}}},"nextToken":{}}},"http":{}},"GetLogEvents":{"input":{"type":"structure","required":["logGroupName","logStreamName"],"members":{"logGroupName":{},"logStreamName":{},"startTime":{"type":"long"},"endTime":{"type":"long"},"nextToken":{},"limit":{"type":"integer"},"startFromHead":{"type":"boolean"}}},"output":{"type":"structure","members":{"events":{"type":"list","member":{"type":"structure","members":{"timestamp":{"type":"long"},"message":{},"ingestionTime":{"type":"long"}}}},"nextForwardToken":{},"nextBackwardToken":{}}},"http":{}},"PutDestination":{"input":{"type":"structure","required":["destinationName","targetArn","roleArn"],"members":{"destinationName":{},"targetArn":{},"roleArn":{}}},"output":{"type":"structure","members":{"destination":{"shape":"Sq"}}},"http":{}},"PutDestinationPolicy":{"input":{"type":"structure","required":["destinationName","accessPolicy"],"members":{"destinationName":{},"accessPolicy":{}}},"http":{}},"PutLogEvents":{"input":{"type":"structure","required":["logGroupName","logStreamName","logEvents"],"members":{"logGroupName":{},"logStreamName":{},"logEvents":{"type":"list","member":{"type":"structure","required":["timestamp","message"],"members":{"timestamp":{"type":"long"},"message":{}}}},"sequenceToken":{}}},"output":{"type":"structure","members":{"nextSequenceToken":{},"rejectedLogEventsInfo":{"type":"structure","members":{"tooNewLogEventStartIndex":{"type":"integer"},"tooOldLogEventEndIndex":{"type":"integer"},"expiredLogEventEndIndex":{"type":"integer"}}}}},"http":{}},"PutMetricFilter":{"input":{"type":"structure","required":["logGroupName","filterName","filterPattern","metricTransformations"],"members":{"logGroupName":{},"filterName":{},"filterPattern":{},"metricTransformations":{"shape":"S1m"}}},"http":{}},"PutRetentionPolicy":{"input":{"type":"structure","required":["logGroupName","retentionInDays"],"members":{"logGroupName":{},"retentionInDays":{"type":"integer"}}},"http":{}},"PutSubscriptionFilter":{"input":{"type":"structure","required":["logGroupName","filterName","filterPattern","destinationArn"],"members":{"logGroupName":{},"filterName":{},"filterPattern":{},"destinationArn":{},"roleArn":{}}},"http":{}},"TestMetricFilter":{"input":{"type":"structure","required":["filterPattern","logEventMessages"],"members":{"filterPattern":{},"logEventMessages":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"matches":{"type":"list","member":{"type":"structure","members":{"eventNumber":{"type":"long"},"eventMessage":{},"extractedValues":{"type":"map","key":{},"value":{}}}}}}},"http":{}}},"shapes":{"Sq":{"type":"structure","members":{"destinationName":{},"targetArn":{},"roleArn":{},"accessPolicy":{},"arn":{},"creationTime":{"type":"long"}}},"S1m":{"type":"list","member":{"type":"structure","required":["metricName","metricNamespace","metricValue"],"members":{"metricName":{},"metricNamespace":{},"metricValue":{}}}}},"paginators":{"DescribeDestinations":{"input_token":"nextToken","output_token":"nextToken","limit_key":"limit","result_key":"destinations"},"DescribeLogGroups":{"input_token":"nextToken","output_token":"nextToken","limit_key":"limit","result_key":"logGroups"},"DescribeLogStreams":{"input_token":"nextToken","output_token":"nextToken","limit_key":"limit","result_key":"logStreams"},"DescribeMetricFilters":{"input_token":"nextToken","output_token":"nextToken","limit_key":"limit","result_key":"metricFilters"},"DescribeSubscriptionFilters":{"input_token":"nextToken","output_token":"nextToken","limit_key":"limit","result_key":"subscriptionFilters"},"FilterLogEvents":{"input_token":"nextToken","output_token":"nextToken","limit_key":"limit","result_key":["events","searchedLogStreams"]},"GetLogEvents":{"input_token":"nextToken","output_token":"nextForwardToken","limit_key":"limit","result_key":"events"}}};
AWS.apiLoader.services['codecommit'] = {};                                                                             // 42
AWS.CodeCommit = AWS.Service.defineService('codecommit', [ '2015-04-13' ]);                                            // 43
                                                                                                                       // 44
AWS.apiLoader.services['codecommit']['2015-04-13'] = {"version":"2.0","metadata":{"apiVersion":"2015-04-13","endpointPrefix":"codecommit","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CodeCommit","serviceFullName":"AWS CodeCommit","signatureVersion":"v4","targetPrefix":"CodeCommit_20150413"},"operations":{"BatchGetRepositories":{"input":{"type":"structure","required":["repositoryNames"],"members":{"repositoryNames":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"repositories":{"type":"list","member":{"shape":"S6"}},"repositoriesNotFound":{"type":"list","member":{}}}},"http":{}},"CreateBranch":{"input":{"type":"structure","required":["repositoryName","branchName","commitId"],"members":{"repositoryName":{},"branchName":{},"commitId":{}}},"http":{}},"CreateRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"repositoryDescription":{}}},"output":{"type":"structure","members":{"repositoryMetadata":{"shape":"S6"}}},"http":{}},"DeleteRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{}}},"output":{"type":"structure","members":{"repositoryId":{}}},"http":{}},"GetBranch":{"input":{"type":"structure","members":{"repositoryName":{},"branchName":{}}},"output":{"type":"structure","members":{"branch":{"type":"structure","members":{"branchName":{},"commitId":{}}}}},"http":{}},"GetCommit":{"input":{"type":"structure","required":["repositoryName","commitId"],"members":{"repositoryName":{},"commitId":{}}},"output":{"type":"structure","required":["commit"],"members":{"commit":{"type":"structure","members":{"treeId":{},"parents":{"type":"list","member":{}},"message":{},"author":{"shape":"Sw"},"committer":{"shape":"Sw"},"additionalData":{}}}}},"http":{}},"GetRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{}}},"output":{"type":"structure","members":{"repositoryMetadata":{"shape":"S6"}}},"http":{}},"GetRepositoryTriggers":{"input":{"type":"structure","members":{"repositoryName":{}}},"output":{"type":"structure","members":{"configurationId":{},"triggers":{"shape":"S16"}}},"http":{}},"ListBranches":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"nextToken":{}}},"output":{"type":"structure","members":{"branches":{"shape":"S1a"},"nextToken":{}}},"http":{}},"ListRepositories":{"input":{"type":"structure","members":{"nextToken":{},"sortBy":{},"order":{}}},"output":{"type":"structure","members":{"repositories":{"type":"list","member":{"type":"structure","members":{"repositoryName":{},"repositoryId":{}}}},"nextToken":{}}},"http":{}},"PutRepositoryTriggers":{"input":{"type":"structure","members":{"repositoryName":{},"triggers":{"shape":"S16"}}},"output":{"type":"structure","members":{"configurationId":{}}},"http":{}},"TestRepositoryTriggers":{"input":{"type":"structure","members":{"repositoryName":{},"triggers":{"shape":"S16"}}},"output":{"type":"structure","members":{"successfulExecutions":{"type":"list","member":{}},"failedExecutions":{"type":"list","member":{"type":"structure","members":{"trigger":{},"failureMessage":{}}}}}},"http":{}},"UpdateDefaultBranch":{"input":{"type":"structure","required":["repositoryName","defaultBranchName"],"members":{"repositoryName":{},"defaultBranchName":{}}},"http":{}},"UpdateRepositoryDescription":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"repositoryDescription":{}}},"http":{}},"UpdateRepositoryName":{"input":{"type":"structure","required":["oldName","newName"],"members":{"oldName":{},"newName":{}}},"http":{}}},"shapes":{"S6":{"type":"structure","members":{"accountId":{},"repositoryId":{},"repositoryName":{},"repositoryDescription":{},"defaultBranch":{},"lastModifiedDate":{"type":"timestamp"},"creationDate":{"type":"timestamp"},"cloneUrlHttp":{},"cloneUrlSsh":{},"Arn":{}}},"Sw":{"type":"structure","members":{"name":{},"email":{},"date":{}}},"S16":{"type":"list","member":{"type":"structure","members":{"name":{},"destinationArn":{},"customData":{},"branches":{"shape":"S1a"},"events":{"type":"list","member":{}}}}},"S1a":{"type":"list","member":{}}},"paginators":{"ListBranches":{"input_token":"nextToken","output_token":"nextToken","result_key":"branches"},"ListRepositories":{"input_token":"nextToken","output_token":"nextToken","result_key":"repositories"}}};
AWS.apiLoader.services['codepipeline'] = {};                                                                           // 46
AWS.CodePipeline = AWS.Service.defineService('codepipeline', [ '2015-07-09' ]);                                        // 47
                                                                                                                       // 48
AWS.apiLoader.services['codepipeline']['2015-07-09'] = {"version":"2.0","metadata":{"apiVersion":"2015-07-09","endpointPrefix":"codepipeline","jsonVersion":"1.1","serviceAbbreviation":"CodePipeline","serviceFullName":"AWS CodePipeline","signatureVersion":"v4","targetPrefix":"CodePipeline_20150709","protocol":"json"},"operations":{"AcknowledgeJob":{"input":{"type":"structure","required":["jobId","nonce"],"members":{"jobId":{},"nonce":{}}},"output":{"type":"structure","members":{"status":{}}},"http":{}},"AcknowledgeThirdPartyJob":{"input":{"type":"structure","required":["jobId","nonce","clientToken"],"members":{"jobId":{},"nonce":{},"clientToken":{}}},"output":{"type":"structure","members":{"status":{}}},"http":{}},"CreateCustomActionType":{"input":{"type":"structure","required":["category","provider","version","inputArtifactDetails","outputArtifactDetails"],"members":{"category":{},"provider":{},"version":{},"settings":{"shape":"Se"},"configurationProperties":{"shape":"Sh"},"inputArtifactDetails":{"shape":"Sn"},"outputArtifactDetails":{"shape":"Sn"}}},"output":{"type":"structure","required":["actionType"],"members":{"actionType":{"shape":"Sr"}}},"http":{}},"CreatePipeline":{"input":{"type":"structure","required":["pipeline"],"members":{"pipeline":{"shape":"Sv"}}},"output":{"type":"structure","members":{"pipeline":{"shape":"Sv"}}},"http":{}},"DeleteCustomActionType":{"input":{"type":"structure","required":["category","provider","version"],"members":{"category":{},"provider":{},"version":{}}},"http":{}},"DeletePipeline":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"http":{}},"DisableStageTransition":{"input":{"type":"structure","required":["pipelineName","stageName","transitionType","reason"],"members":{"pipelineName":{},"stageName":{},"transitionType":{},"reason":{}}},"http":{}},"EnableStageTransition":{"input":{"type":"structure","required":["pipelineName","stageName","transitionType"],"members":{"pipelineName":{},"stageName":{},"transitionType":{}}},"http":{}},"GetJobDetails":{"input":{"type":"structure","required":["jobId"],"members":{"jobId":{}}},"output":{"type":"structure","members":{"jobDetails":{"type":"structure","members":{"id":{},"data":{"shape":"S1x"},"accountId":{}}}}},"http":{}},"GetPipeline":{"input":{"type":"structure","required":["name"],"members":{"name":{},"version":{"type":"integer"}}},"output":{"type":"structure","members":{"pipeline":{"shape":"Sv"}}},"http":{}},"GetPipelineState":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","members":{"pipelineName":{},"pipelineVersion":{"type":"integer"},"stageStates":{"type":"list","member":{"type":"structure","members":{"stageName":{},"inboundTransitionState":{"type":"structure","members":{"enabled":{"type":"boolean"},"lastChangedBy":{},"lastChangedAt":{"type":"timestamp"},"disabledReason":{}}},"actionStates":{"type":"list","member":{"type":"structure","members":{"actionName":{},"currentRevision":{"shape":"S2s"},"latestExecution":{"type":"structure","members":{"status":{},"summary":{},"lastStatusChange":{"type":"timestamp"},"externalExecutionId":{},"externalExecutionUrl":{},"percentComplete":{"type":"integer"},"errorDetails":{"type":"structure","members":{"code":{},"message":{}}}}},"entityUrl":{},"revisionUrl":{}}}}}}},"created":{"type":"timestamp"},"updated":{"type":"timestamp"}}},"http":{}},"GetThirdPartyJobDetails":{"input":{"type":"structure","required":["jobId","clientToken"],"members":{"jobId":{},"clientToken":{}}},"output":{"type":"structure","members":{"jobDetails":{"type":"structure","members":{"id":{},"data":{"type":"structure","members":{"actionTypeId":{"shape":"Ss"},"actionConfiguration":{"shape":"S1y"},"pipelineContext":{"shape":"S1z"},"inputArtifacts":{"shape":"S22"},"outputArtifacts":{"shape":"S22"},"artifactCredentials":{"shape":"S2a"},"continuationToken":{},"encryptionKey":{"shape":"S11"}}},"nonce":{}}}}},"http":{}},"ListActionTypes":{"input":{"type":"structure","members":{"actionOwnerFilter":{},"nextToken":{}}},"output":{"type":"structure","required":["actionTypes"],"members":{"actionTypes":{"type":"list","member":{"shape":"Sr"}},"nextToken":{}}},"http":{}},"ListPipelines":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"pipelines":{"type":"list","member":{"type":"structure","members":{"name":{},"version":{"type":"integer"},"created":{"type":"timestamp"},"updated":{"type":"timestamp"}}}},"nextToken":{}}},"http":{}},"PollForJobs":{"input":{"type":"structure","required":["actionTypeId"],"members":{"actionTypeId":{"shape":"Ss"},"maxBatchSize":{"type":"integer"},"queryParam":{"type":"map","key":{},"value":{}}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"type":"structure","members":{"id":{},"data":{"shape":"S1x"},"nonce":{},"accountId":{}}}}}},"http":{}},"PollForThirdPartyJobs":{"input":{"type":"structure","required":["actionTypeId"],"members":{"actionTypeId":{"shape":"Ss"},"maxBatchSize":{"type":"integer"}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"type":"structure","members":{"clientId":{},"jobId":{}}}}}},"http":{}},"PutActionRevision":{"input":{"type":"structure","required":["pipelineName","stageName","actionName","actionRevision"],"members":{"pipelineName":{},"stageName":{},"actionName":{},"actionRevision":{"shape":"S2s"}}},"output":{"type":"structure","members":{"newRevision":{"type":"boolean"},"pipelineExecutionId":{}}},"http":{}},"PutJobFailureResult":{"input":{"type":"structure","required":["jobId","failureDetails"],"members":{"jobId":{},"failureDetails":{"shape":"S3w"}}},"http":{}},"PutJobSuccessResult":{"input":{"type":"structure","required":["jobId"],"members":{"jobId":{},"currentRevision":{"shape":"S3z"},"continuationToken":{},"executionDetails":{"shape":"S41"}}},"http":{}},"PutThirdPartyJobFailureResult":{"input":{"type":"structure","required":["jobId","clientToken","failureDetails"],"members":{"jobId":{},"clientToken":{},"failureDetails":{"shape":"S3w"}}},"http":{}},"PutThirdPartyJobSuccessResult":{"input":{"type":"structure","required":["jobId","clientToken"],"members":{"jobId":{},"clientToken":{},"currentRevision":{"shape":"S3z"},"continuationToken":{},"executionDetails":{"shape":"S41"}}},"http":{}},"StartPipelineExecution":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","members":{"pipelineExecutionId":{}}},"http":{}},"UpdatePipeline":{"input":{"type":"structure","required":["pipeline"],"members":{"pipeline":{"shape":"Sv"}}},"output":{"type":"structure","members":{"pipeline":{"shape":"Sv"}}},"http":{}}},"shapes":{"Se":{"type":"structure","members":{"thirdPartyConfigurationUrl":{},"entityUrlTemplate":{},"executionUrlTemplate":{},"revisionUrlTemplate":{}}},"Sh":{"type":"list","member":{"type":"structure","required":["name","required","key","secret"],"members":{"name":{},"required":{"type":"boolean"},"key":{"type":"boolean"},"secret":{"type":"boolean"},"queryable":{"type":"boolean"},"description":{},"type":{}}}},"Sn":{"type":"structure","required":["minimumCount","maximumCount"],"members":{"minimumCount":{"type":"integer"},"maximumCount":{"type":"integer"}}},"Sr":{"type":"structure","required":["id","inputArtifactDetails","outputArtifactDetails"],"members":{"id":{"shape":"Ss"},"settings":{"shape":"Se"},"actionConfigurationProperties":{"shape":"Sh"},"inputArtifactDetails":{"shape":"Sn"},"outputArtifactDetails":{"shape":"Sn"}}},"Ss":{"type":"structure","required":["category","owner","provider","version"],"members":{"category":{},"owner":{},"provider":{},"version":{}}},"Sv":{"type":"structure","required":["name","roleArn","artifactStore","stages"],"members":{"name":{},"roleArn":{},"artifactStore":{"type":"structure","required":["type","location"],"members":{"type":{},"location":{},"encryptionKey":{"shape":"S11"}}},"stages":{"type":"list","member":{"type":"structure","required":["name","actions"],"members":{"name":{},"blockers":{"type":"list","member":{"type":"structure","required":["name","type"],"members":{"name":{},"type":{}}}},"actions":{"type":"list","member":{"type":"structure","required":["name","actionTypeId"],"members":{"name":{},"actionTypeId":{"shape":"Ss"},"runOrder":{"type":"integer"},"configuration":{"shape":"S1f"},"outputArtifacts":{"type":"list","member":{"type":"structure","required":["name"],"members":{"name":{}}}},"inputArtifacts":{"type":"list","member":{"type":"structure","required":["name"],"members":{"name":{}}}},"roleArn":{}}}}}}},"version":{"type":"integer"}}},"S11":{"type":"structure","required":["id","type"],"members":{"id":{},"type":{}}},"S1f":{"type":"map","key":{},"value":{}},"S1x":{"type":"structure","members":{"actionTypeId":{"shape":"Ss"},"actionConfiguration":{"shape":"S1y"},"pipelineContext":{"shape":"S1z"},"inputArtifacts":{"shape":"S22"},"outputArtifacts":{"shape":"S22"},"artifactCredentials":{"shape":"S2a"},"continuationToken":{},"encryptionKey":{"shape":"S11"}}},"S1y":{"type":"structure","members":{"configuration":{"shape":"S1f"}}},"S1z":{"type":"structure","members":{"pipelineName":{},"stage":{"type":"structure","members":{"name":{}}},"action":{"type":"structure","members":{"name":{}}}}},"S22":{"type":"list","member":{"type":"structure","members":{"name":{},"revision":{},"location":{"type":"structure","members":{"type":{},"s3Location":{"type":"structure","required":["bucketName","objectKey"],"members":{"bucketName":{},"objectKey":{}}}}}}}},"S2a":{"type":"structure","required":["accessKeyId","secretAccessKey","sessionToken"],"members":{"accessKeyId":{},"secretAccessKey":{},"sessionToken":{}},"sensitive":true},"S2s":{"type":"structure","required":["revisionId","created"],"members":{"revisionId":{},"revisionChangeId":{},"created":{"type":"timestamp"}}},"S3w":{"type":"structure","required":["type","message"],"members":{"type":{},"message":{},"externalExecutionId":{}}},"S3z":{"type":"structure","required":["revision","changeIdentifier"],"members":{"revision":{},"changeIdentifier":{}}},"S41":{"type":"structure","members":{"summary":{},"externalExecutionId":{},"percentComplete":{"type":"integer"}}}},"examples":{}};
AWS.apiLoader.services['cognitoidentity'] = {};                                                                        // 50
AWS.CognitoIdentity = AWS.Service.defineService('cognitoidentity', [ '2014-06-30' ]);                                  // 51
require('./services/cognitoidentity');                                                                                 // 52
                                                                                                                       // 53
AWS.apiLoader.services['cognitoidentity']['2014-06-30'] = {"version":"2.0","metadata":{"apiVersion":"2014-06-30","endpointPrefix":"cognito-identity","jsonVersion":"1.1","serviceFullName":"Amazon Cognito Identity","signatureVersion":"v4","targetPrefix":"AWSCognitoIdentityService","protocol":"json"},"operations":{"CreateIdentityPool":{"input":{"type":"structure","required":["IdentityPoolName","AllowUnauthenticatedIdentities"],"members":{"IdentityPoolName":{},"AllowUnauthenticatedIdentities":{"type":"boolean"},"SupportedLoginProviders":{"shape":"S4"},"DeveloperProviderName":{},"OpenIdConnectProviderARNs":{"shape":"S8"}}},"output":{"shape":"Sa"},"http":{}},"DeleteIdentities":{"input":{"type":"structure","required":["IdentityIdsToDelete"],"members":{"IdentityIdsToDelete":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"UnprocessedIdentityIds":{"type":"list","member":{"type":"structure","members":{"IdentityId":{},"ErrorCode":{}}}}}},"http":{}},"DeleteIdentityPool":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}},"http":{}},"DescribeIdentity":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{}}},"output":{"shape":"Sl"},"http":{}},"DescribeIdentityPool":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}},"output":{"shape":"Sa"},"http":{}},"GetCredentialsForIdentity":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{},"Logins":{"shape":"Sq"}}},"output":{"type":"structure","members":{"IdentityId":{},"Credentials":{"type":"structure","members":{"AccessKeyId":{},"SecretKey":{},"SessionToken":{},"Expiration":{"type":"timestamp"}}}}},"http":{}},"GetId":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"AccountId":{},"IdentityPoolId":{},"Logins":{"shape":"Sq"}}},"output":{"type":"structure","members":{"IdentityId":{}}},"http":{}},"GetIdentityPoolRoles":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"Roles":{"shape":"S12"}}},"http":{}},"GetOpenIdToken":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{},"Logins":{"shape":"Sq"}}},"output":{"type":"structure","members":{"IdentityId":{},"Token":{}}},"http":{}},"GetOpenIdTokenForDeveloperIdentity":{"input":{"type":"structure","required":["IdentityPoolId","Logins"],"members":{"IdentityPoolId":{},"IdentityId":{},"Logins":{"shape":"Sq"},"TokenDuration":{"type":"long"}}},"output":{"type":"structure","members":{"IdentityId":{},"Token":{}}},"http":{}},"ListIdentities":{"input":{"type":"structure","required":["IdentityPoolId","MaxResults"],"members":{"IdentityPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{},"HideDisabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"Identities":{"type":"list","member":{"shape":"Sl"}},"NextToken":{}}},"http":{}},"ListIdentityPools":{"input":{"type":"structure","required":["MaxResults"],"members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IdentityPools":{"type":"list","member":{"type":"structure","members":{"IdentityPoolId":{},"IdentityPoolName":{}}}},"NextToken":{}}},"http":{}},"LookupDeveloperIdentity":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{},"IdentityId":{},"DeveloperUserIdentifier":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IdentityId":{},"DeveloperUserIdentifierList":{"type":"list","member":{}},"NextToken":{}}},"http":{}},"MergeDeveloperIdentities":{"input":{"type":"structure","required":["SourceUserIdentifier","DestinationUserIdentifier","DeveloperProviderName","IdentityPoolId"],"members":{"SourceUserIdentifier":{},"DestinationUserIdentifier":{},"DeveloperProviderName":{},"IdentityPoolId":{}}},"output":{"type":"structure","members":{"IdentityId":{}}},"http":{}},"SetIdentityPoolRoles":{"input":{"type":"structure","required":["IdentityPoolId","Roles"],"members":{"IdentityPoolId":{},"Roles":{"shape":"S12"}}},"http":{}},"UnlinkDeveloperIdentity":{"input":{"type":"structure","required":["IdentityId","IdentityPoolId","DeveloperProviderName","DeveloperUserIdentifier"],"members":{"IdentityId":{},"IdentityPoolId":{},"DeveloperProviderName":{},"DeveloperUserIdentifier":{}}},"http":{}},"UnlinkIdentity":{"input":{"type":"structure","required":["IdentityId","Logins","LoginsToRemove"],"members":{"IdentityId":{},"Logins":{"shape":"Sq"},"LoginsToRemove":{"shape":"Sm"}}},"http":{}},"UpdateIdentityPool":{"input":{"shape":"Sa"},"output":{"shape":"Sa"},"http":{}}},"shapes":{"S4":{"type":"map","key":{},"value":{}},"S8":{"type":"list","member":{}},"Sa":{"type":"structure","required":["IdentityPoolId","IdentityPoolName","AllowUnauthenticatedIdentities"],"members":{"IdentityPoolId":{},"IdentityPoolName":{},"AllowUnauthenticatedIdentities":{"type":"boolean"},"SupportedLoginProviders":{"shape":"S4"},"DeveloperProviderName":{},"OpenIdConnectProviderARNs":{"shape":"S8"}}},"Sl":{"type":"structure","members":{"IdentityId":{},"Logins":{"shape":"Sm"},"CreationDate":{"type":"timestamp"},"LastModifiedDate":{"type":"timestamp"}}},"Sm":{"type":"list","member":{}},"Sq":{"type":"map","key":{},"value":{}},"S12":{"type":"map","key":{},"value":{}}},"examples":{}};
AWS.apiLoader.services['cognitosync'] = {};                                                                            // 55
AWS.CognitoSync = AWS.Service.defineService('cognitosync', [ '2014-06-30' ]);                                          // 56
                                                                                                                       // 57
AWS.apiLoader.services['cognitosync']['2014-06-30'] = {"version":"2.0","metadata":{"apiVersion":"2014-06-30","endpointPrefix":"cognito-sync","jsonVersion":"1.1","serviceFullName":"Amazon Cognito Sync","signatureVersion":"v4","protocol":"rest-json"},"operations":{"BulkPublish":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/bulkpublish","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolId":{}}}},"DeleteDataset":{"http":{"method":"DELETE","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"}}},"output":{"type":"structure","members":{"Dataset":{"shape":"S8"}}}},"DescribeDataset":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"}}},"output":{"type":"structure","members":{"Dataset":{"shape":"S8"}}}},"DescribeIdentityPoolUsage":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolUsage":{"shape":"Sg"}}}},"DescribeIdentityUsage":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"}}},"output":{"type":"structure","members":{"IdentityUsage":{"type":"structure","members":{"IdentityId":{},"IdentityPoolId":{},"LastModifiedDate":{"type":"timestamp"},"DatasetCount":{"type":"integer"},"DataStorage":{"type":"long"}}}}}},"GetBulkPublishDetails":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/getBulkPublishDetails","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"BulkPublishStartTime":{"type":"timestamp"},"BulkPublishCompleteTime":{"type":"timestamp"},"BulkPublishStatus":{},"FailureMessage":{}}}},"GetCognitoEvents":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/events","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"Events":{"shape":"Sq"}}}},"GetIdentityPoolConfiguration":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/configuration","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"PushSync":{"shape":"Sv"},"CognitoStreams":{"shape":"Sz"}}}},"ListDatasets":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets","responseCode":200},"input":{"type":"structure","required":["IdentityId","IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"NextToken":{"location":"querystring","locationName":"nextToken"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"Datasets":{"type":"list","member":{"shape":"S8"}},"Count":{"type":"integer"},"NextToken":{}}}},"ListIdentityPoolUsage":{"http":{"method":"GET","requestUri":"/identitypools","responseCode":200},"input":{"type":"structure","members":{"NextToken":{"location":"querystring","locationName":"nextToken"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"IdentityPoolUsages":{"type":"list","member":{"shape":"Sg"}},"MaxResults":{"type":"integer"},"Count":{"type":"integer"},"NextToken":{}}}},"ListRecords":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"LastSyncCount":{"location":"querystring","locationName":"lastSyncCount","type":"long"},"NextToken":{"location":"querystring","locationName":"nextToken"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"SyncSessionToken":{"location":"querystring","locationName":"syncSessionToken"}}},"output":{"type":"structure","members":{"Records":{"shape":"S1c"},"NextToken":{},"Count":{"type":"integer"},"DatasetSyncCount":{"type":"long"},"LastModifiedBy":{},"MergedDatasetNames":{"type":"list","member":{}},"DatasetExists":{"type":"boolean"},"DatasetDeletedAfterRequestedSyncCount":{"type":"boolean"},"SyncSessionToken":{}}}},"RegisterDevice":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/identity/{IdentityId}/device","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","Platform","Token"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"Platform":{},"Token":{}}},"output":{"type":"structure","members":{"DeviceId":{}}}},"SetCognitoEvents":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/events","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","Events"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"Events":{"shape":"Sq"}}}},"SetIdentityPoolConfiguration":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/configuration","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"PushSync":{"shape":"Sv"},"CognitoStreams":{"shape":"Sz"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"PushSync":{"shape":"Sv"},"CognitoStreams":{"shape":"Sz"}}}},"SubscribeToDataset":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName","DeviceId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"DeviceId":{"location":"uri","locationName":"DeviceId"}}},"output":{"type":"structure","members":{}}},"UnsubscribeFromDataset":{"http":{"method":"DELETE","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName","DeviceId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"DeviceId":{"location":"uri","locationName":"DeviceId"}}},"output":{"type":"structure","members":{}}},"UpdateRecords":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName","SyncSessionToken"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"DeviceId":{},"RecordPatches":{"type":"list","member":{"type":"structure","required":["Op","Key","SyncCount"],"members":{"Op":{},"Key":{},"Value":{},"SyncCount":{"type":"long"},"DeviceLastModifiedDate":{"type":"timestamp"}}}},"SyncSessionToken":{},"ClientContext":{"location":"header","locationName":"x-amz-Client-Context"}}},"output":{"type":"structure","members":{"Records":{"shape":"S1c"}}}}},"shapes":{"S8":{"type":"structure","members":{"IdentityId":{},"DatasetName":{},"CreationDate":{"type":"timestamp"},"LastModifiedDate":{"type":"timestamp"},"LastModifiedBy":{},"DataStorage":{"type":"long"},"NumRecords":{"type":"long"}}},"Sg":{"type":"structure","members":{"IdentityPoolId":{},"SyncSessionsCount":{"type":"long"},"DataStorage":{"type":"long"},"LastModifiedDate":{"type":"timestamp"}}},"Sq":{"type":"map","key":{},"value":{}},"Sv":{"type":"structure","members":{"ApplicationArns":{"type":"list","member":{}},"RoleArn":{}}},"Sz":{"type":"structure","members":{"StreamName":{},"RoleArn":{},"StreamingStatus":{}}},"S1c":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"SyncCount":{"type":"long"},"LastModifiedDate":{"type":"timestamp"},"LastModifiedBy":{},"DeviceLastModifiedDate":{"type":"timestamp"}}}}},"examples":{}};
AWS.apiLoader.services['devicefarm'] = {};                                                                             // 59
AWS.DeviceFarm = AWS.Service.defineService('devicefarm', [ '2015-06-23' ]);                                            // 60
                                                                                                                       // 61
AWS.apiLoader.services['devicefarm']['2015-06-23'] = {"version":"2.0","metadata":{"apiVersion":"2015-06-23","endpointPrefix":"devicefarm","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Device Farm","signatureVersion":"v4","targetPrefix":"DeviceFarm_20150623"},"operations":{"CreateDevicePool":{"input":{"type":"structure","required":["projectArn","name","rules"],"members":{"projectArn":{},"name":{},"description":{},"rules":{"shape":"S5"}}},"output":{"type":"structure","members":{"devicePool":{"shape":"Sb"}}},"http":{}},"CreateProject":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","members":{"project":{"shape":"Sf"}}},"http":{}},"CreateUpload":{"input":{"type":"structure","required":["projectArn","name","type"],"members":{"projectArn":{},"name":{},"type":{},"contentType":{}}},"output":{"type":"structure","members":{"upload":{"shape":"Sl"}}},"http":{}},"DeleteDevicePool":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}},"http":{}},"DeleteProject":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}},"http":{}},"DeleteRun":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}},"http":{}},"DeleteUpload":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}},"http":{}},"GetAccountSettings":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"accountSettings":{"type":"structure","members":{"awsAccountNumber":{},"unmeteredDevices":{"type":"map","key":{},"value":{"type":"integer"}}}}}},"http":{}},"GetDevice":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"device":{"shape":"S16"}}},"http":{}},"GetDevicePool":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"devicePool":{"shape":"Sb"}}},"http":{}},"GetDevicePoolCompatibility":{"input":{"type":"structure","required":["devicePoolArn"],"members":{"devicePoolArn":{},"appArn":{},"testType":{}}},"output":{"type":"structure","members":{"compatibleDevices":{"shape":"S1h"},"incompatibleDevices":{"shape":"S1h"}}},"http":{}},"GetJob":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"job":{"shape":"S1o"}}},"http":{}},"GetProject":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"project":{"shape":"Sf"}}},"http":{}},"GetRun":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"run":{"shape":"S1x"}}},"http":{}},"GetSuite":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"suite":{"shape":"S21"}}},"http":{}},"GetTest":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"test":{"shape":"S24"}}},"http":{}},"GetUpload":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"upload":{"shape":"Sl"}}},"http":{}},"ListArtifacts":{"input":{"type":"structure","required":["arn","type"],"members":{"arn":{},"type":{},"nextToken":{}}},"output":{"type":"structure","members":{"artifacts":{"type":"list","member":{"type":"structure","members":{"arn":{},"name":{},"type":{},"extension":{},"url":{}}}},"nextToken":{}}},"http":{}},"ListDevicePools":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"type":{},"nextToken":{}}},"output":{"type":"structure","members":{"devicePools":{"type":"list","member":{"shape":"Sb"}},"nextToken":{}}},"http":{}},"ListDevices":{"input":{"type":"structure","members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"devices":{"type":"list","member":{"shape":"S16"}},"nextToken":{}}},"http":{}},"ListJobs":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"shape":"S1o"}},"nextToken":{}}},"http":{}},"ListProjects":{"input":{"type":"structure","members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"projects":{"type":"list","member":{"shape":"Sf"}},"nextToken":{}}},"http":{}},"ListRuns":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"runs":{"type":"list","member":{"shape":"S1x"}},"nextToken":{}}},"http":{}},"ListSamples":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"samples":{"type":"list","member":{"type":"structure","members":{"arn":{},"type":{},"url":{}}}},"nextToken":{}}},"http":{}},"ListSuites":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"suites":{"type":"list","member":{"shape":"S21"}},"nextToken":{}}},"http":{}},"ListTests":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"tests":{"type":"list","member":{"shape":"S24"}},"nextToken":{}}},"http":{}},"ListUniqueProblems":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"uniqueProblems":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"message":{},"problems":{"type":"list","member":{"type":"structure","members":{"run":{"shape":"S3b"},"job":{"shape":"S3b"},"suite":{"shape":"S3b"},"test":{"shape":"S3b"},"device":{"shape":"S16"},"result":{},"message":{}}}}}}}},"nextToken":{}}},"http":{}},"ListUploads":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"uploads":{"type":"list","member":{"shape":"Sl"}},"nextToken":{}}},"http":{}},"ScheduleRun":{"input":{"type":"structure","required":["projectArn","devicePoolArn","test"],"members":{"projectArn":{},"appArn":{},"devicePoolArn":{},"name":{},"test":{"type":"structure","required":["type"],"members":{"type":{},"testPackageArn":{},"filter":{},"parameters":{"type":"map","key":{},"value":{}}}},"configuration":{"type":"structure","members":{"extraDataPackageArn":{},"networkProfileArn":{},"locale":{},"location":{"type":"structure","required":["latitude","longitude"],"members":{"latitude":{"type":"double"},"longitude":{"type":"double"}}},"radios":{"type":"structure","members":{"wifi":{"type":"boolean"},"bluetooth":{"type":"boolean"},"nfc":{"type":"boolean"},"gps":{"type":"boolean"}}},"auxiliaryApps":{"type":"list","member":{}},"billingMethod":{}}}}},"output":{"type":"structure","members":{"run":{"shape":"S1x"}}},"http":{}},"UpdateDevicePool":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{},"description":{},"rules":{"shape":"S5"}}},"output":{"type":"structure","members":{"devicePool":{"shape":"Sb"}}},"http":{}},"UpdateProject":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{}}},"output":{"type":"structure","members":{"project":{"shape":"Sf"}}},"http":{}}},"shapes":{"S5":{"type":"list","member":{"type":"structure","members":{"attribute":{},"operator":{},"value":{}}}},"Sb":{"type":"structure","members":{"arn":{},"name":{},"description":{},"type":{},"rules":{"shape":"S5"}}},"Sf":{"type":"structure","members":{"arn":{},"name":{},"created":{"type":"timestamp"}}},"Sl":{"type":"structure","members":{"arn":{},"name":{},"created":{"type":"timestamp"},"type":{},"status":{},"url":{},"metadata":{},"contentType":{},"message":{}}},"S16":{"type":"structure","members":{"arn":{},"name":{},"manufacturer":{},"model":{},"formFactor":{},"platform":{},"os":{},"cpu":{"type":"structure","members":{"frequency":{},"architecture":{},"clock":{"type":"double"}}},"resolution":{"type":"structure","members":{"width":{"type":"integer"},"height":{"type":"integer"}}},"heapSize":{"type":"long"},"memory":{"type":"long"},"image":{},"carrier":{},"radio":{}}},"S1h":{"type":"list","member":{"type":"structure","members":{"device":{"shape":"S16"},"compatible":{"type":"boolean"},"incompatibilityMessages":{"type":"list","member":{"type":"structure","members":{"message":{},"type":{}}}}}}},"S1o":{"type":"structure","members":{"arn":{},"name":{},"type":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S1r"},"message":{},"device":{"shape":"S16"},"deviceMinutes":{"shape":"S1s"}}},"S1r":{"type":"structure","members":{"total":{"type":"integer"},"passed":{"type":"integer"},"failed":{"type":"integer"},"warned":{"type":"integer"},"errored":{"type":"integer"},"stopped":{"type":"integer"},"skipped":{"type":"integer"}}},"S1s":{"type":"structure","members":{"total":{"type":"double"},"metered":{"type":"double"},"unmetered":{"type":"double"}}},"S1x":{"type":"structure","members":{"arn":{},"name":{},"type":{},"platform":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S1r"},"message":{},"totalJobs":{"type":"integer"},"completedJobs":{"type":"integer"},"billingMethod":{},"deviceMinutes":{"shape":"S1s"}}},"S21":{"type":"structure","members":{"arn":{},"name":{},"type":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S1r"},"message":{},"deviceMinutes":{"shape":"S1s"}}},"S24":{"type":"structure","members":{"arn":{},"name":{},"type":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S1r"},"message":{},"deviceMinutes":{"shape":"S1s"}}},"S3b":{"type":"structure","members":{"arn":{},"name":{}}}},"paginators":{"ListArtifacts":{"input_token":"nextToken","output_token":"nextToken","result_key":"artifacts"},"ListDevicePools":{"input_token":"nextToken","output_token":"nextToken","result_key":"devicePools"},"ListDevices":{"input_token":"nextToken","output_token":"nextToken","result_key":"devices"},"ListJobs":{"input_token":"nextToken","output_token":"nextToken","result_key":"jobs"},"ListProjects":{"input_token":"nextToken","output_token":"nextToken","result_key":"projects"},"ListRuns":{"input_token":"nextToken","output_token":"nextToken","result_key":"runs"},"ListSamples":{"input_token":"nextToken","output_token":"nextToken","result_key":"samples"},"ListSuites":{"input_token":"nextToken","output_token":"nextToken","result_key":"suites"},"ListTests":{"input_token":"nextToken","output_token":"nextToken","result_key":"tests"},"ListUniqueProblems":{"input_token":"nextToken","output_token":"nextToken","result_key":"uniqueProblems"},"ListUploads":{"input_token":"nextToken","output_token":"nextToken","result_key":"uploads"}}};
AWS.apiLoader.services['dynamodb'] = {};                                                                               // 63
AWS.DynamoDB = AWS.Service.defineService('dynamodb', [ '2011-12-05', '2012-08-10' ]);                                  // 64
require('./services/dynamodb');                                                                                        // 65
                                                                                                                       // 66
AWS.apiLoader.services['dynamodb']['2012-08-10'] = {"version":"2.0","metadata":{"apiVersion":"2012-08-10","endpointPrefix":"dynamodb","jsonVersion":"1.0","protocol":"json","serviceAbbreviation":"DynamoDB","serviceFullName":"Amazon DynamoDB","signatureVersion":"v4","targetPrefix":"DynamoDB_20120810"},"operations":{"BatchGetItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"S2"},"ReturnConsumedCapacity":{}}},"output":{"type":"structure","members":{"Responses":{"type":"map","key":{},"value":{"shape":"Sr"}},"UnprocessedKeys":{"shape":"S2"},"ConsumedCapacity":{"shape":"St"}}},"http":{}},"BatchWriteItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"S10"},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{}}},"output":{"type":"structure","members":{"UnprocessedItems":{"shape":"S10"},"ItemCollectionMetrics":{"type":"map","key":{},"value":{"type":"list","member":{"shape":"S1a"}}},"ConsumedCapacity":{"shape":"St"}}},"http":{}},"CreateTable":{"input":{"type":"structure","required":["AttributeDefinitions","TableName","KeySchema","ProvisionedThroughput"],"members":{"AttributeDefinitions":{"shape":"S1f"},"TableName":{},"KeySchema":{"shape":"S1j"},"LocalSecondaryIndexes":{"type":"list","member":{"type":"structure","required":["IndexName","KeySchema","Projection"],"members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"}}}},"GlobalSecondaryIndexes":{"type":"list","member":{"type":"structure","required":["IndexName","KeySchema","Projection","ProvisionedThroughput"],"members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"},"ProvisionedThroughput":{"shape":"S1u"}}}},"ProvisionedThroughput":{"shape":"S1u"},"StreamSpecification":{"shape":"S1w"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S20"}}},"http":{}},"DeleteItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"Expected":{"shape":"S2e"},"ConditionalOperator":{},"ReturnValues":{},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Ss"},"ConsumedCapacity":{"shape":"Su"},"ItemCollectionMetrics":{"shape":"S1a"}}},"http":{}},"DeleteTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S20"}}},"http":{}},"DescribeLimits":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AccountMaxReadCapacityUnits":{"type":"long"},"AccountMaxWriteCapacityUnits":{"type":"long"},"TableMaxReadCapacityUnits":{"type":"long"},"TableMaxWriteCapacityUnits":{"type":"long"}}},"http":{}},"DescribeTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"Table":{"shape":"S20"}}},"http":{}},"GetItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"AttributesToGet":{"shape":"Sj"},"ConsistentRead":{"type":"boolean"},"ReturnConsumedCapacity":{},"ProjectionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"}}},"output":{"type":"structure","members":{"Item":{"shape":"Ss"},"ConsumedCapacity":{"shape":"Su"}}},"http":{}},"ListTables":{"input":{"type":"structure","members":{"ExclusiveStartTableName":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"TableNames":{"type":"list","member":{}},"LastEvaluatedTableName":{}}},"http":{}},"PutItem":{"input":{"type":"structure","required":["TableName","Item"],"members":{"TableName":{},"Item":{"shape":"S14"},"Expected":{"shape":"S2e"},"ReturnValues":{},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"ConditionalOperator":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Ss"},"ConsumedCapacity":{"shape":"Su"},"ItemCollectionMetrics":{"shape":"S1a"}}},"http":{}},"Query":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{},"IndexName":{},"Select":{},"AttributesToGet":{"shape":"Sj"},"Limit":{"type":"integer"},"ConsistentRead":{"type":"boolean"},"KeyConditions":{"type":"map","key":{},"value":{"shape":"S37"}},"QueryFilter":{"shape":"S38"},"ConditionalOperator":{},"ScanIndexForward":{"type":"boolean"},"ExclusiveStartKey":{"shape":"S6"},"ReturnConsumedCapacity":{},"ProjectionExpression":{},"FilterExpression":{},"KeyConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"}}},"output":{"type":"structure","members":{"Items":{"shape":"Sr"},"Count":{"type":"integer"},"ScannedCount":{"type":"integer"},"LastEvaluatedKey":{"shape":"S6"},"ConsumedCapacity":{"shape":"Su"}}},"http":{}},"Scan":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{},"IndexName":{},"AttributesToGet":{"shape":"Sj"},"Limit":{"type":"integer"},"Select":{},"ScanFilter":{"shape":"S38"},"ConditionalOperator":{},"ExclusiveStartKey":{"shape":"S6"},"ReturnConsumedCapacity":{},"TotalSegments":{"type":"integer"},"Segment":{"type":"integer"},"ProjectionExpression":{},"FilterExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"},"ConsistentRead":{"type":"boolean"}}},"output":{"type":"structure","members":{"Items":{"shape":"Sr"},"Count":{"type":"integer"},"ScannedCount":{"type":"integer"},"LastEvaluatedKey":{"shape":"S6"},"ConsumedCapacity":{"shape":"Su"}}},"http":{}},"UpdateItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"AttributeUpdates":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S8"},"Action":{}}}},"Expected":{"shape":"S2e"},"ConditionalOperator":{},"ReturnValues":{},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"UpdateExpression":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Ss"},"ConsumedCapacity":{"shape":"Su"},"ItemCollectionMetrics":{"shape":"S1a"}}},"http":{}},"UpdateTable":{"input":{"type":"structure","required":["TableName"],"members":{"AttributeDefinitions":{"shape":"S1f"},"TableName":{},"ProvisionedThroughput":{"shape":"S1u"},"GlobalSecondaryIndexUpdates":{"type":"list","member":{"type":"structure","members":{"Update":{"type":"structure","required":["IndexName","ProvisionedThroughput"],"members":{"IndexName":{},"ProvisionedThroughput":{"shape":"S1u"}}},"Create":{"type":"structure","required":["IndexName","KeySchema","Projection","ProvisionedThroughput"],"members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"},"ProvisionedThroughput":{"shape":"S1u"}}},"Delete":{"type":"structure","required":["IndexName"],"members":{"IndexName":{}}}}}},"StreamSpecification":{"shape":"S1w"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S20"}}},"http":{}}},"shapes":{"S2":{"type":"map","key":{},"value":{"type":"structure","required":["Keys"],"members":{"Keys":{"type":"list","member":{"shape":"S6"}},"AttributesToGet":{"shape":"Sj"},"ConsistentRead":{"type":"boolean"},"ProjectionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"}}}},"S6":{"type":"map","key":{},"value":{"shape":"S8"}},"S8":{"type":"structure","members":{"S":{},"N":{},"B":{"type":"blob"},"SS":{"type":"list","member":{}},"NS":{"type":"list","member":{}},"BS":{"type":"list","member":{"type":"blob"}},"M":{"type":"map","key":{},"value":{"shape":"S8"}},"L":{"type":"list","member":{"shape":"S8"}},"NULL":{"type":"boolean"},"BOOL":{"type":"boolean"}}},"Sj":{"type":"list","member":{}},"Sm":{"type":"map","key":{},"value":{}},"Sr":{"type":"list","member":{"shape":"Ss"}},"Ss":{"type":"map","key":{},"value":{"shape":"S8"}},"St":{"type":"list","member":{"shape":"Su"}},"Su":{"type":"structure","members":{"TableName":{},"CapacityUnits":{"type":"double"},"Table":{"shape":"Sw"},"LocalSecondaryIndexes":{"shape":"Sx"},"GlobalSecondaryIndexes":{"shape":"Sx"}}},"Sw":{"type":"structure","members":{"CapacityUnits":{"type":"double"}}},"Sx":{"type":"map","key":{},"value":{"shape":"Sw"}},"S10":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"PutRequest":{"type":"structure","required":["Item"],"members":{"Item":{"shape":"S14"}}},"DeleteRequest":{"type":"structure","required":["Key"],"members":{"Key":{"shape":"S6"}}}}}}},"S14":{"type":"map","key":{},"value":{"shape":"S8"}},"S1a":{"type":"structure","members":{"ItemCollectionKey":{"type":"map","key":{},"value":{"shape":"S8"}},"SizeEstimateRangeGB":{"type":"list","member":{"type":"double"}}}},"S1f":{"type":"list","member":{"type":"structure","required":["AttributeName","AttributeType"],"members":{"AttributeName":{},"AttributeType":{}}}},"S1j":{"type":"list","member":{"type":"structure","required":["AttributeName","KeyType"],"members":{"AttributeName":{},"KeyType":{}}}},"S1o":{"type":"structure","members":{"ProjectionType":{},"NonKeyAttributes":{"type":"list","member":{}}}},"S1u":{"type":"structure","required":["ReadCapacityUnits","WriteCapacityUnits"],"members":{"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"S1w":{"type":"structure","members":{"StreamEnabled":{"type":"boolean"},"StreamViewType":{}}},"S20":{"type":"structure","members":{"AttributeDefinitions":{"shape":"S1f"},"TableName":{},"KeySchema":{"shape":"S1j"},"TableStatus":{},"CreationDateTime":{"type":"timestamp"},"ProvisionedThroughput":{"shape":"S23"},"TableSizeBytes":{"type":"long"},"ItemCount":{"type":"long"},"TableArn":{},"LocalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"},"IndexSizeBytes":{"type":"long"},"ItemCount":{"type":"long"},"IndexArn":{}}}},"GlobalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"},"IndexStatus":{},"Backfilling":{"type":"boolean"},"ProvisionedThroughput":{"shape":"S23"},"IndexSizeBytes":{"type":"long"},"ItemCount":{"type":"long"},"IndexArn":{}}}},"StreamSpecification":{"shape":"S1w"},"LatestStreamLabel":{},"LatestStreamArn":{}}},"S23":{"type":"structure","members":{"LastIncreaseDateTime":{"type":"timestamp"},"LastDecreaseDateTime":{"type":"timestamp"},"NumberOfDecreasesToday":{"type":"long"},"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"S2e":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S8"},"Exists":{"type":"boolean"},"ComparisonOperator":{},"AttributeValueList":{"shape":"S2i"}}}},"S2i":{"type":"list","member":{"shape":"S8"}},"S2m":{"type":"map","key":{},"value":{"shape":"S8"}},"S37":{"type":"structure","required":["ComparisonOperator"],"members":{"AttributeValueList":{"shape":"S2i"},"ComparisonOperator":{}}},"S38":{"type":"map","key":{},"value":{"shape":"S37"}}},"paginators":{"BatchGetItem":{"input_token":"RequestItems","output_token":"UnprocessedKeys"},"ListTables":{"input_token":"ExclusiveStartTableName","output_token":"LastEvaluatedTableName","limit_key":"Limit","result_key":"TableNames"},"Query":{"input_token":"ExclusiveStartKey","output_token":"LastEvaluatedKey","limit_key":"Limit","result_key":"Items"},"Scan":{"input_token":"ExclusiveStartKey","output_token":"LastEvaluatedKey","limit_key":"Limit","result_key":"Items"}},"waiters":{"__default__":{"interval":20,"max_attempts":25},"__TableState":{"operation":"DescribeTable"},"TableExists":{"extends":"__TableState","ignore_errors":["ResourceNotFoundException"],"success_type":"output","success_path":"Table.TableStatus","success_value":"ACTIVE"},"TableNotExists":{"extends":"__TableState","success_type":"error","success_value":"ResourceNotFoundException"}}};
AWS.apiLoader.services['dynamodbstreams'] = {};                                                                        // 68
AWS.DynamoDBStreams = AWS.Service.defineService('dynamodbstreams', [ '2012-08-10' ]);                                  // 69
                                                                                                                       // 70
AWS.apiLoader.services['dynamodbstreams']['2012-08-10'] = {"version":"2.0","metadata":{"apiVersion":"2012-08-10","endpointPrefix":"streams.dynamodb","jsonVersion":"1.0","serviceFullName":"Amazon DynamoDB Streams","signatureVersion":"v4","signingName":"dynamodb","targetPrefix":"DynamoDBStreams_20120810","protocol":"json"},"operations":{"DescribeStream":{"input":{"type":"structure","required":["StreamArn"],"members":{"StreamArn":{},"Limit":{"type":"integer"},"ExclusiveStartShardId":{}}},"output":{"type":"structure","members":{"StreamDescription":{"type":"structure","members":{"StreamArn":{},"StreamLabel":{},"StreamStatus":{},"StreamViewType":{},"CreationRequestDateTime":{"type":"timestamp"},"TableName":{},"KeySchema":{"type":"list","member":{"type":"structure","required":["AttributeName","KeyType"],"members":{"AttributeName":{},"KeyType":{}}}},"Shards":{"type":"list","member":{"type":"structure","members":{"ShardId":{},"SequenceNumberRange":{"type":"structure","members":{"StartingSequenceNumber":{},"EndingSequenceNumber":{}}},"ParentShardId":{}}}},"LastEvaluatedShardId":{}}}}},"http":{}},"GetRecords":{"input":{"type":"structure","required":["ShardIterator"],"members":{"ShardIterator":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Records":{"type":"list","member":{"type":"structure","members":{"eventID":{},"eventName":{},"eventVersion":{},"eventSource":{},"awsRegion":{},"dynamodb":{"type":"structure","members":{"Keys":{"shape":"Sr"},"NewImage":{"shape":"Sr"},"OldImage":{"shape":"Sr"},"SequenceNumber":{},"SizeBytes":{"type":"long"},"StreamViewType":{}}}}}},"NextShardIterator":{}}},"http":{}},"GetShardIterator":{"input":{"type":"structure","required":["StreamArn","ShardId","ShardIteratorType"],"members":{"StreamArn":{},"ShardId":{},"ShardIteratorType":{},"SequenceNumber":{}}},"output":{"type":"structure","members":{"ShardIterator":{}}},"http":{}},"ListStreams":{"input":{"type":"structure","members":{"TableName":{},"Limit":{"type":"integer"},"ExclusiveStartStreamArn":{}}},"output":{"type":"structure","members":{"Streams":{"type":"list","member":{"type":"structure","members":{"StreamArn":{},"TableName":{},"StreamLabel":{}}}},"LastEvaluatedStreamArn":{}}},"http":{}}},"shapes":{"Sr":{"type":"map","key":{},"value":{"shape":"St"}},"St":{"type":"structure","members":{"S":{},"N":{},"B":{"type":"blob"},"SS":{"type":"list","member":{}},"NS":{"type":"list","member":{}},"BS":{"type":"list","member":{"type":"blob"}},"M":{"type":"map","key":{},"value":{"shape":"St"}},"L":{"type":"list","member":{"shape":"St"}},"NULL":{"type":"boolean"},"BOOL":{"type":"boolean"}}}},"examples":{}};
AWS.apiLoader.services['ec2'] = {};                                                                                    // 72
AWS.EC2 = AWS.Service.defineService('ec2', [ '2015-10-01' ]);                                                          // 73
require('./services/ec2');                                                                                             // 74
                                                                                                                       // 75
AWS.apiLoader.services['ec2']['2015-10-01'] = {"version":"2.0","metadata":{"apiVersion":"2015-10-01","endpointPrefix":"ec2","protocol":"ec2","serviceAbbreviation":"Amazon EC2","serviceFullName":"Amazon Elastic Compute Cloud","signatureVersion":"v4","xmlNamespace":"http://ec2.amazonaws.com/doc/2015-10-01"},"operations":{"AcceptVpcPeeringConnection":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"VpcPeeringConnection":{"shape":"S5","locationName":"vpcPeeringConnection"}}},"http":{}},"AllocateAddress":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Domain":{}}},"output":{"type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"Domain":{"locationName":"domain"},"AllocationId":{"locationName":"allocationId"}}},"http":{}},"AllocateHosts":{"input":{"type":"structure","required":["InstanceType","Quantity","AvailabilityZone"],"members":{"AutoPlacement":{"locationName":"autoPlacement"},"ClientToken":{"locationName":"clientToken"},"InstanceType":{"locationName":"instanceType"},"Quantity":{"locationName":"quantity","type":"integer"},"AvailabilityZone":{"locationName":"availabilityZone"}}},"output":{"type":"structure","members":{"HostIds":{"shape":"Sj","locationName":"hostIdSet"}}},"http":{}},"AssignPrivateIpAddresses":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddresses":{"shape":"Sl","locationName":"privateIpAddress"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"},"AllowReassignment":{"locationName":"allowReassignment","type":"boolean"}}},"http":{}},"AssociateAddress":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{},"PublicIp":{},"AllocationId":{},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"AllowReassociation":{"locationName":"allowReassociation","type":"boolean"}}},"output":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"}}},"http":{}},"AssociateDhcpOptions":{"input":{"type":"structure","required":["DhcpOptionsId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"DhcpOptionsId":{},"VpcId":{}}},"http":{}},"AssociateRouteTable":{"input":{"type":"structure","required":["SubnetId","RouteTableId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SubnetId":{"locationName":"subnetId"},"RouteTableId":{"locationName":"routeTableId"}}},"output":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"}}},"http":{}},"AttachClassicLinkVpc":{"input":{"type":"structure","required":["InstanceId","VpcId","Groups"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"VpcId":{"locationName":"vpcId"},"Groups":{"shape":"Ss","locationName":"SecurityGroupId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"AttachInternetGateway":{"input":{"type":"structure","required":["InternetGatewayId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayId":{"locationName":"internetGatewayId"},"VpcId":{"locationName":"vpcId"}}},"http":{}},"AttachNetworkInterface":{"input":{"type":"structure","required":["NetworkInterfaceId","InstanceId","DeviceIndex"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"InstanceId":{"locationName":"instanceId"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"}}},"output":{"type":"structure","members":{"AttachmentId":{"locationName":"attachmentId"}}},"http":{}},"AttachVolume":{"input":{"type":"structure","required":["VolumeId","InstanceId","Device"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeId":{},"InstanceId":{},"Device":{}}},"output":{"shape":"Sy"},"http":{}},"AttachVpnGateway":{"input":{"type":"structure","required":["VpnGatewayId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpnGatewayId":{},"VpcId":{}}},"output":{"type":"structure","members":{"VpcAttachment":{"shape":"S12","locationName":"attachment"}}},"http":{}},"AuthorizeSecurityGroupEgress":{"input":{"type":"structure","required":["GroupId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupId":{"locationName":"groupId"},"SourceSecurityGroupName":{"locationName":"sourceSecurityGroupName"},"SourceSecurityGroupOwnerId":{"locationName":"sourceSecurityGroupOwnerId"},"IpProtocol":{"locationName":"ipProtocol"},"FromPort":{"locationName":"fromPort","type":"integer"},"ToPort":{"locationName":"toPort","type":"integer"},"CidrIp":{"locationName":"cidrIp"},"IpPermissions":{"shape":"S15","locationName":"ipPermissions"}}},"http":{}},"AuthorizeSecurityGroupIngress":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{},"GroupId":{},"SourceSecurityGroupName":{},"SourceSecurityGroupOwnerId":{},"IpProtocol":{},"FromPort":{"type":"integer"},"ToPort":{"type":"integer"},"CidrIp":{},"IpPermissions":{"shape":"S15"}}},"http":{}},"BundleInstance":{"input":{"type":"structure","required":["InstanceId","Storage"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{},"Storage":{"shape":"S1f"}}},"output":{"type":"structure","members":{"BundleTask":{"shape":"S1j","locationName":"bundleInstanceTask"}}},"http":{}},"CancelBundleTask":{"input":{"type":"structure","required":["BundleId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"BundleId":{}}},"output":{"type":"structure","members":{"BundleTask":{"shape":"S1j","locationName":"bundleInstanceTask"}}},"http":{}},"CancelConversionTask":{"input":{"type":"structure","required":["ConversionTaskId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ConversionTaskId":{"locationName":"conversionTaskId"},"ReasonMessage":{"locationName":"reasonMessage"}}},"http":{}},"CancelExportTask":{"input":{"type":"structure","required":["ExportTaskId"],"members":{"ExportTaskId":{"locationName":"exportTaskId"}}},"http":{}},"CancelImportTask":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"ImportTaskId":{},"CancelReason":{}}},"output":{"type":"structure","members":{"ImportTaskId":{"locationName":"importTaskId"},"State":{"locationName":"state"},"PreviousState":{"locationName":"previousState"}}},"http":{}},"CancelReservedInstancesListing":{"input":{"type":"structure","required":["ReservedInstancesListingId"],"members":{"ReservedInstancesListingId":{"locationName":"reservedInstancesListingId"}}},"output":{"type":"structure","members":{"ReservedInstancesListings":{"shape":"S1u","locationName":"reservedInstancesListingsSet"}}},"http":{}},"CancelSpotFleetRequests":{"input":{"type":"structure","required":["SpotFleetRequestIds","TerminateInstances"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotFleetRequestIds":{"shape":"S26","locationName":"spotFleetRequestId"},"TerminateInstances":{"locationName":"terminateInstances","type":"boolean"}}},"output":{"type":"structure","members":{"UnsuccessfulFleetRequests":{"locationName":"unsuccessfulFleetRequestSet","type":"list","member":{"locationName":"item","type":"structure","required":["SpotFleetRequestId","Error"],"members":{"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"Error":{"locationName":"error","type":"structure","required":["Code","Message"],"members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}}},"SuccessfulFleetRequests":{"locationName":"successfulFleetRequestSet","type":"list","member":{"locationName":"item","type":"structure","required":["SpotFleetRequestId","CurrentSpotFleetRequestState","PreviousSpotFleetRequestState"],"members":{"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"CurrentSpotFleetRequestState":{"locationName":"currentSpotFleetRequestState"},"PreviousSpotFleetRequestState":{"locationName":"previousSpotFleetRequestState"}}}}}},"http":{}},"CancelSpotInstanceRequests":{"input":{"type":"structure","required":["SpotInstanceRequestIds"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotInstanceRequestIds":{"shape":"S2g","locationName":"SpotInstanceRequestId"}}},"output":{"type":"structure","members":{"CancelledSpotInstanceRequests":{"locationName":"spotInstanceRequestSet","type":"list","member":{"locationName":"item","type":"structure","members":{"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"State":{"locationName":"state"}}}}}},"http":{}},"ConfirmProductInstance":{"input":{"type":"structure","required":["ProductCode","InstanceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ProductCode":{},"InstanceId":{}}},"output":{"type":"structure","members":{"OwnerId":{"locationName":"ownerId"},"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"CopyImage":{"input":{"type":"structure","required":["SourceRegion","SourceImageId","Name"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SourceRegion":{},"SourceImageId":{},"Name":{},"Description":{},"ClientToken":{},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}},"http":{}},"CopySnapshot":{"input":{"type":"structure","required":["SourceRegion","SourceSnapshotId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SourceRegion":{},"SourceSnapshotId":{},"Description":{},"DestinationRegion":{"locationName":"destinationRegion"},"PresignedUrl":{"locationName":"presignedUrl"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"}}},"output":{"type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"}}},"http":{}},"CreateCustomerGateway":{"input":{"type":"structure","required":["Type","PublicIp","BgpAsn"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Type":{},"PublicIp":{"locationName":"IpAddress"},"BgpAsn":{"type":"integer"}}},"output":{"type":"structure","members":{"CustomerGateway":{"shape":"S2u","locationName":"customerGateway"}}},"http":{}},"CreateDhcpOptions":{"input":{"type":"structure","required":["DhcpConfigurations"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"DhcpConfigurations":{"locationName":"dhcpConfiguration","type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"Values":{"shape":"S26","locationName":"Value"}}}}}},"output":{"type":"structure","members":{"DhcpOptions":{"shape":"S2z","locationName":"dhcpOptions"}}},"http":{}},"CreateFlowLogs":{"input":{"type":"structure","required":["ResourceIds","ResourceType","TrafficType","LogGroupName","DeliverLogsPermissionArn"],"members":{"ResourceIds":{"shape":"S26","locationName":"ResourceId"},"ResourceType":{},"TrafficType":{},"LogGroupName":{},"DeliverLogsPermissionArn":{},"ClientToken":{}}},"output":{"type":"structure","members":{"FlowLogIds":{"shape":"S26","locationName":"flowLogIdSet"},"ClientToken":{"locationName":"clientToken"},"Unsuccessful":{"shape":"S38","locationName":"unsuccessful"}}},"http":{}},"CreateImage":{"input":{"type":"structure","required":["InstanceId","Name"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"Name":{"locationName":"name"},"Description":{"locationName":"description"},"NoReboot":{"locationName":"noReboot","type":"boolean"},"BlockDeviceMappings":{"shape":"S3c","locationName":"blockDeviceMapping"}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}},"http":{}},"CreateInstanceExportTask":{"input":{"type":"structure","required":["InstanceId"],"members":{"Description":{"locationName":"description"},"InstanceId":{"locationName":"instanceId"},"TargetEnvironment":{"locationName":"targetEnvironment"},"ExportToS3Task":{"locationName":"exportToS3","type":"structure","members":{"DiskImageFormat":{"locationName":"diskImageFormat"},"ContainerFormat":{"locationName":"containerFormat"},"S3Bucket":{"locationName":"s3Bucket"},"S3Prefix":{"locationName":"s3Prefix"}}}}},"output":{"type":"structure","members":{"ExportTask":{"shape":"S3n","locationName":"exportTask"}}},"http":{}},"CreateInternetGateway":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InternetGateway":{"shape":"S3t","locationName":"internetGateway"}}},"http":{}},"CreateKeyPair":{"input":{"type":"structure","required":["KeyName"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"KeyName":{}}},"output":{"type":"structure","members":{"KeyName":{"locationName":"keyName"},"KeyFingerprint":{"locationName":"keyFingerprint"},"KeyMaterial":{"locationName":"keyMaterial"}}},"http":{}},"CreateNatGateway":{"input":{"type":"structure","required":["SubnetId","AllocationId"],"members":{"SubnetId":{},"AllocationId":{},"ClientToken":{}}},"output":{"type":"structure","members":{"NatGateway":{"shape":"S40","locationName":"natGateway"},"ClientToken":{"locationName":"clientToken"}}},"http":{}},"CreateNetworkAcl":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"NetworkAcl":{"shape":"S46","locationName":"networkAcl"}}},"http":{}},"CreateNetworkAclEntry":{"input":{"type":"structure","required":["NetworkAclId","RuleNumber","Protocol","RuleAction","Egress","CidrBlock"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"Egress":{"locationName":"egress","type":"boolean"},"CidrBlock":{"locationName":"cidrBlock"},"IcmpTypeCode":{"shape":"S4a","locationName":"Icmp"},"PortRange":{"shape":"S4b","locationName":"portRange"}}},"http":{}},"CreateNetworkInterface":{"input":{"type":"structure","required":["SubnetId"],"members":{"SubnetId":{"locationName":"subnetId"},"Description":{"locationName":"description"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"Groups":{"shape":"S4g","locationName":"SecurityGroupId"},"PrivateIpAddresses":{"shape":"S4h","locationName":"privateIpAddresses"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"NetworkInterface":{"shape":"S4k","locationName":"networkInterface"}}},"http":{}},"CreatePlacementGroup":{"input":{"type":"structure","required":["GroupName","Strategy"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{"locationName":"groupName"},"Strategy":{"locationName":"strategy"}}},"http":{}},"CreateReservedInstancesListing":{"input":{"type":"structure","required":["ReservedInstancesId","InstanceCount","PriceSchedules","ClientToken"],"members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"PriceSchedules":{"locationName":"priceSchedules","type":"list","member":{"locationName":"item","type":"structure","members":{"Term":{"locationName":"term","type":"long"},"Price":{"locationName":"price","type":"double"},"CurrencyCode":{"locationName":"currencyCode"}}}},"ClientToken":{"locationName":"clientToken"}}},"output":{"type":"structure","members":{"ReservedInstancesListings":{"shape":"S1u","locationName":"reservedInstancesListingsSet"}}},"http":{}},"CreateRoute":{"input":{"type":"structure","required":["RouteTableId","DestinationCidrBlock"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"},"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"},"NatGatewayId":{"locationName":"natGatewayId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"CreateRouteTable":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"RouteTable":{"shape":"S53","locationName":"routeTable"}}},"http":{}},"CreateSecurityGroup":{"input":{"type":"structure","required":["GroupName","Description"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{},"Description":{"locationName":"GroupDescription"},"VpcId":{}}},"output":{"type":"structure","members":{"GroupId":{"locationName":"groupId"}}},"http":{}},"CreateSnapshot":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeId":{},"Description":{}}},"output":{"shape":"S5f"},"http":{}},"CreateSpotDatafeedSubscription":{"input":{"type":"structure","required":["Bucket"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Bucket":{"locationName":"bucket"},"Prefix":{"locationName":"prefix"}}},"output":{"type":"structure","members":{"SpotDatafeedSubscription":{"shape":"S5j","locationName":"spotDatafeedSubscription"}}},"http":{}},"CreateSubnet":{"input":{"type":"structure","required":["VpcId","CidrBlock"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{},"CidrBlock":{},"AvailabilityZone":{}}},"output":{"type":"structure","members":{"Subnet":{"shape":"S5o","locationName":"subnet"}}},"http":{}},"CreateTags":{"input":{"type":"structure","required":["Resources","Tags"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Resources":{"shape":"S5r","locationName":"ResourceId"},"Tags":{"shape":"Sa","locationName":"Tag"}}},"http":{}},"CreateVolume":{"input":{"type":"structure","required":["AvailabilityZone"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Size":{"type":"integer"},"SnapshotId":{},"AvailabilityZone":{},"VolumeType":{},"Iops":{"type":"integer"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{}}},"output":{"shape":"S5t"},"http":{}},"CreateVpc":{"input":{"type":"structure","required":["CidrBlock"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"CidrBlock":{},"InstanceTenancy":{"locationName":"instanceTenancy"}}},"output":{"type":"structure","members":{"Vpc":{"shape":"S5z","locationName":"vpc"}}},"http":{}},"CreateVpcEndpoint":{"input":{"type":"structure","required":["VpcId","ServiceName"],"members":{"DryRun":{"type":"boolean"},"VpcId":{},"ServiceName":{},"PolicyDocument":{},"RouteTableIds":{"shape":"S26","locationName":"RouteTableId"},"ClientToken":{}}},"output":{"type":"structure","members":{"VpcEndpoint":{"shape":"S63","locationName":"vpcEndpoint"},"ClientToken":{"locationName":"clientToken"}}},"http":{}},"CreateVpcPeeringConnection":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"},"PeerVpcId":{"locationName":"peerVpcId"},"PeerOwnerId":{"locationName":"peerOwnerId"}}},"output":{"type":"structure","members":{"VpcPeeringConnection":{"shape":"S5","locationName":"vpcPeeringConnection"}}},"http":{}},"CreateVpnConnection":{"input":{"type":"structure","required":["Type","CustomerGatewayId","VpnGatewayId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Type":{},"CustomerGatewayId":{},"VpnGatewayId":{},"Options":{"locationName":"options","type":"structure","members":{"StaticRoutesOnly":{"locationName":"staticRoutesOnly","type":"boolean"}}}}},"output":{"type":"structure","members":{"VpnConnection":{"shape":"S6a","locationName":"vpnConnection"}}},"http":{}},"CreateVpnConnectionRoute":{"input":{"type":"structure","required":["VpnConnectionId","DestinationCidrBlock"],"members":{"VpnConnectionId":{},"DestinationCidrBlock":{}}},"http":{}},"CreateVpnGateway":{"input":{"type":"structure","required":["Type"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Type":{},"AvailabilityZone":{}}},"output":{"type":"structure","members":{"VpnGateway":{"shape":"S6m","locationName":"vpnGateway"}}},"http":{}},"DeleteCustomerGateway":{"input":{"type":"structure","required":["CustomerGatewayId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"CustomerGatewayId":{}}},"http":{}},"DeleteDhcpOptions":{"input":{"type":"structure","required":["DhcpOptionsId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"DhcpOptionsId":{}}},"http":{}},"DeleteFlowLogs":{"input":{"type":"structure","required":["FlowLogIds"],"members":{"FlowLogIds":{"shape":"S26","locationName":"FlowLogId"}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S38","locationName":"unsuccessful"}}},"http":{}},"DeleteInternetGateway":{"input":{"type":"structure","required":["InternetGatewayId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayId":{"locationName":"internetGatewayId"}}},"http":{}},"DeleteKeyPair":{"input":{"type":"structure","required":["KeyName"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"KeyName":{}}},"http":{}},"DeleteNatGateway":{"input":{"type":"structure","required":["NatGatewayId"],"members":{"NatGatewayId":{}}},"output":{"type":"structure","members":{"NatGatewayId":{"locationName":"natGatewayId"}}},"http":{}},"DeleteNetworkAcl":{"input":{"type":"structure","required":["NetworkAclId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"}}},"http":{}},"DeleteNetworkAclEntry":{"input":{"type":"structure","required":["NetworkAclId","RuleNumber","Egress"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"},"Egress":{"locationName":"egress","type":"boolean"}}},"http":{}},"DeleteNetworkInterface":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}},"http":{}},"DeletePlacementGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{"locationName":"groupName"}}},"http":{}},"DeleteRoute":{"input":{"type":"structure","required":["RouteTableId","DestinationCidrBlock"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"},"DestinationCidrBlock":{"locationName":"destinationCidrBlock"}}},"http":{}},"DeleteRouteTable":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"}}},"http":{}},"DeleteSecurityGroup":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{},"GroupId":{}}},"http":{}},"DeleteSnapshot":{"input":{"type":"structure","required":["SnapshotId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SnapshotId":{}}},"http":{}},"DeleteSpotDatafeedSubscription":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"}}},"http":{}},"DeleteSubnet":{"input":{"type":"structure","required":["SubnetId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SubnetId":{}}},"http":{}},"DeleteTags":{"input":{"type":"structure","required":["Resources"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Resources":{"shape":"S5r","locationName":"resourceId"},"Tags":{"shape":"Sa","locationName":"tag"}}},"http":{}},"DeleteVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeId":{}}},"http":{}},"DeleteVpc":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{}}},"http":{}},"DeleteVpcEndpoints":{"input":{"type":"structure","required":["VpcEndpointIds"],"members":{"DryRun":{"type":"boolean"},"VpcEndpointIds":{"shape":"S26","locationName":"VpcEndpointId"}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S38","locationName":"unsuccessful"}}},"http":{}},"DeleteVpcPeeringConnection":{"input":{"type":"structure","required":["VpcPeeringConnectionId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"DeleteVpnConnection":{"input":{"type":"structure","required":["VpnConnectionId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpnConnectionId":{}}},"http":{}},"DeleteVpnConnectionRoute":{"input":{"type":"structure","required":["VpnConnectionId","DestinationCidrBlock"],"members":{"VpnConnectionId":{},"DestinationCidrBlock":{}}},"http":{}},"DeleteVpnGateway":{"input":{"type":"structure","required":["VpnGatewayId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpnGatewayId":{}}},"http":{}},"DeregisterImage":{"input":{"type":"structure","required":["ImageId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ImageId":{}}},"http":{}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"AttributeNames":{"locationName":"attributeName","type":"list","member":{"locationName":"attributeName"}}}},"output":{"type":"structure","members":{"AccountAttributes":{"locationName":"accountAttributeSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AttributeName":{"locationName":"attributeName"},"AttributeValues":{"locationName":"attributeValueSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AttributeValue":{"locationName":"attributeValue"}}}}}}}}},"http":{}},"DescribeAddresses":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIps":{"locationName":"PublicIp","type":"list","member":{"locationName":"PublicIp"}},"Filters":{"shape":"S7r","locationName":"Filter"},"AllocationIds":{"locationName":"AllocationId","type":"list","member":{"locationName":"AllocationId"}}}},"output":{"type":"structure","members":{"Addresses":{"locationName":"addressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"PublicIp":{"locationName":"publicIp"},"AllocationId":{"locationName":"allocationId"},"AssociationId":{"locationName":"associationId"},"Domain":{"locationName":"domain"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"NetworkInterfaceOwnerId":{"locationName":"networkInterfaceOwnerId"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}}}}},"http":{}},"DescribeAvailabilityZones":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ZoneNames":{"locationName":"ZoneName","type":"list","member":{"locationName":"ZoneName"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"AvailabilityZones":{"locationName":"availabilityZoneInfo","type":"list","member":{"locationName":"item","type":"structure","members":{"ZoneName":{"locationName":"zoneName"},"State":{"locationName":"zoneState"},"RegionName":{"locationName":"regionName"},"Messages":{"locationName":"messageSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Message":{"locationName":"message"}}}}}}}}},"http":{}},"DescribeBundleTasks":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"BundleIds":{"locationName":"BundleId","type":"list","member":{"locationName":"BundleId"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"BundleTasks":{"locationName":"bundleInstanceTasksSet","type":"list","member":{"shape":"S1j","locationName":"item"}}}},"http":{}},"DescribeClassicLinkInstances":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"S8a","locationName":"InstanceId"},"Filters":{"shape":"S7r","locationName":"Filter"},"NextToken":{"locationName":"nextToken"},"MaxResults":{"locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"Instances":{"locationName":"instancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"VpcId":{"locationName":"vpcId"},"Groups":{"shape":"S4m","locationName":"groupSet"},"Tags":{"shape":"Sa","locationName":"tagSet"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeConversionTasks":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Filters":{"shape":"S7r","locationName":"filter"},"ConversionTaskIds":{"locationName":"conversionTaskId","type":"list","member":{"locationName":"item"}}}},"output":{"type":"structure","members":{"ConversionTasks":{"locationName":"conversionTasks","type":"list","member":{"shape":"S8i","locationName":"item"}}}},"http":{}},"DescribeCustomerGateways":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"CustomerGatewayIds":{"locationName":"CustomerGatewayId","type":"list","member":{"locationName":"CustomerGatewayId"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"CustomerGateways":{"locationName":"customerGatewaySet","type":"list","member":{"shape":"S2u","locationName":"item"}}}},"http":{}},"DescribeDhcpOptions":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"DhcpOptionsIds":{"locationName":"DhcpOptionsId","type":"list","member":{"locationName":"DhcpOptionsId"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"DhcpOptions":{"locationName":"dhcpOptionsSet","type":"list","member":{"shape":"S2z","locationName":"item"}}}},"http":{}},"DescribeExportTasks":{"input":{"type":"structure","members":{"ExportTaskIds":{"locationName":"exportTaskId","type":"list","member":{"locationName":"ExportTaskId"}}}},"output":{"type":"structure","members":{"ExportTasks":{"locationName":"exportTaskSet","type":"list","member":{"shape":"S3n","locationName":"item"}}}},"http":{}},"DescribeFlowLogs":{"input":{"type":"structure","members":{"FlowLogIds":{"shape":"S26","locationName":"FlowLogId"},"Filter":{"shape":"S7r"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FlowLogs":{"locationName":"flowLogSet","type":"list","member":{"locationName":"item","type":"structure","members":{"CreationTime":{"locationName":"creationTime","type":"timestamp"},"FlowLogId":{"locationName":"flowLogId"},"FlowLogStatus":{"locationName":"flowLogStatus"},"ResourceId":{"locationName":"resourceId"},"TrafficType":{"locationName":"trafficType"},"LogGroupName":{"locationName":"logGroupName"},"DeliverLogsStatus":{"locationName":"deliverLogsStatus"},"DeliverLogsErrorMessage":{"locationName":"deliverLogsErrorMessage"},"DeliverLogsPermissionArn":{"locationName":"deliverLogsPermissionArn"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeHosts":{"input":{"type":"structure","members":{"HostIds":{"shape":"S98","locationName":"hostId"},"NextToken":{"locationName":"nextToken"},"MaxResults":{"locationName":"maxResults","type":"integer"},"Filter":{"shape":"S7r","locationName":"filter"}}},"output":{"type":"structure","members":{"Hosts":{"locationName":"hostSet","type":"list","member":{"locationName":"item","type":"structure","members":{"HostId":{"locationName":"hostId"},"AutoPlacement":{"locationName":"autoPlacement"},"HostReservationId":{"locationName":"hostReservationId"},"ClientToken":{"locationName":"clientToken"},"HostProperties":{"locationName":"hostProperties","type":"structure","members":{"Sockets":{"locationName":"sockets","type":"integer"},"Cores":{"locationName":"cores","type":"integer"},"TotalVCpus":{"locationName":"totalVCpus","type":"integer"},"InstanceType":{"locationName":"instanceType"}}},"State":{"locationName":"state"},"AvailabilityZone":{"locationName":"availabilityZone"},"Instances":{"locationName":"instances","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"InstanceType":{"locationName":"instanceType"}}}},"AvailableCapacity":{"locationName":"availableCapacity","type":"structure","members":{"AvailableInstanceCapacity":{"locationName":"availableInstanceCapacity","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceType":{"locationName":"instanceType"},"AvailableCapacity":{"locationName":"availableCapacity","type":"integer"},"TotalCapacity":{"locationName":"totalCapacity","type":"integer"}}}},"AvailableVCpus":{"locationName":"availableVCpus","type":"integer"}}}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeIdFormat":{"input":{"type":"structure","members":{"Resource":{}}},"output":{"type":"structure","members":{"Statuses":{"locationName":"statusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Resource":{"locationName":"resource"},"UseLongIds":{"locationName":"useLongIds","type":"boolean"},"Deadline":{"locationName":"deadline","type":"timestamp"}}}}}},"http":{}},"DescribeImageAttribute":{"input":{"type":"structure","required":["ImageId","Attribute"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ImageId":{},"Attribute":{}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"},"LaunchPermissions":{"shape":"S9q","locationName":"launchPermission"},"ProductCodes":{"shape":"S9t","locationName":"productCodes"},"KernelId":{"shape":"S33","locationName":"kernel"},"RamdiskId":{"shape":"S33","locationName":"ramdisk"},"Description":{"shape":"S33","locationName":"description"},"SriovNetSupport":{"shape":"S33","locationName":"sriovNetSupport"},"BlockDeviceMappings":{"shape":"S9w","locationName":"blockDeviceMapping"}}},"http":{}},"DescribeImages":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ImageIds":{"locationName":"ImageId","type":"list","member":{"locationName":"ImageId"}},"Owners":{"shape":"S9z","locationName":"Owner"},"ExecutableUsers":{"locationName":"ExecutableBy","type":"list","member":{"locationName":"ExecutableBy"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"Images":{"locationName":"imagesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ImageId":{"locationName":"imageId"},"ImageLocation":{"locationName":"imageLocation"},"State":{"locationName":"imageState"},"OwnerId":{"locationName":"imageOwnerId"},"CreationDate":{"locationName":"creationDate"},"Public":{"locationName":"isPublic","type":"boolean"},"ProductCodes":{"shape":"S9t","locationName":"productCodes"},"Architecture":{"locationName":"architecture"},"ImageType":{"locationName":"imageType"},"KernelId":{"locationName":"kernelId"},"RamdiskId":{"locationName":"ramdiskId"},"Platform":{"locationName":"platform"},"SriovNetSupport":{"locationName":"sriovNetSupport"},"StateReason":{"shape":"Sa7","locationName":"stateReason"},"ImageOwnerAlias":{"locationName":"imageOwnerAlias"},"Name":{"locationName":"name"},"Description":{"locationName":"description"},"RootDeviceType":{"locationName":"rootDeviceType"},"RootDeviceName":{"locationName":"rootDeviceName"},"BlockDeviceMappings":{"shape":"S9w","locationName":"blockDeviceMapping"},"VirtualizationType":{"locationName":"virtualizationType"},"Tags":{"shape":"Sa","locationName":"tagSet"},"Hypervisor":{"locationName":"hypervisor"}}}}}},"http":{}},"DescribeImportImageTasks":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"ImportTaskIds":{"shape":"Sac","locationName":"ImportTaskId"},"NextToken":{},"MaxResults":{"type":"integer"},"Filters":{"shape":"S7r"}}},"output":{"type":"structure","members":{"ImportImageTasks":{"locationName":"importImageTaskSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ImportTaskId":{"locationName":"importTaskId"},"Architecture":{"locationName":"architecture"},"LicenseType":{"locationName":"licenseType"},"Platform":{"locationName":"platform"},"Hypervisor":{"locationName":"hypervisor"},"Description":{"locationName":"description"},"SnapshotDetails":{"shape":"Sag","locationName":"snapshotDetailSet"},"ImageId":{"locationName":"imageId"},"Progress":{"locationName":"progress"},"StatusMessage":{"locationName":"statusMessage"},"Status":{"locationName":"status"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeImportSnapshotTasks":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"ImportTaskIds":{"shape":"Sac","locationName":"ImportTaskId"},"NextToken":{},"MaxResults":{"type":"integer"},"Filters":{"shape":"S7r"}}},"output":{"type":"structure","members":{"ImportSnapshotTasks":{"locationName":"importSnapshotTaskSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ImportTaskId":{"locationName":"importTaskId"},"SnapshotTaskDetail":{"shape":"San","locationName":"snapshotTaskDetail"},"Description":{"locationName":"description"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeInstanceAttribute":{"input":{"type":"structure","required":["InstanceId","Attribute"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"Attribute":{"locationName":"attribute"}}},"output":{"type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"InstanceType":{"shape":"S33","locationName":"instanceType"},"KernelId":{"shape":"S33","locationName":"kernel"},"RamdiskId":{"shape":"S33","locationName":"ramdisk"},"UserData":{"shape":"S33","locationName":"userData"},"DisableApiTermination":{"shape":"Sar","locationName":"disableApiTermination"},"InstanceInitiatedShutdownBehavior":{"shape":"S33","locationName":"instanceInitiatedShutdownBehavior"},"RootDeviceName":{"shape":"S33","locationName":"rootDeviceName"},"BlockDeviceMappings":{"shape":"Sas","locationName":"blockDeviceMapping"},"ProductCodes":{"shape":"S9t","locationName":"productCodes"},"EbsOptimized":{"shape":"Sar","locationName":"ebsOptimized"},"SriovNetSupport":{"shape":"S33","locationName":"sriovNetSupport"},"SourceDestCheck":{"shape":"Sar","locationName":"sourceDestCheck"},"Groups":{"shape":"S4m","locationName":"groupSet"}}},"http":{}},"DescribeInstanceStatus":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"S8a","locationName":"InstanceId"},"Filters":{"shape":"S7r","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"},"IncludeAllInstances":{"locationName":"includeAllInstances","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceStatuses":{"locationName":"instanceStatusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"AvailabilityZone":{"locationName":"availabilityZone"},"Events":{"locationName":"eventsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Code":{"locationName":"code"},"Description":{"locationName":"description"},"NotBefore":{"locationName":"notBefore","type":"timestamp"},"NotAfter":{"locationName":"notAfter","type":"timestamp"}}}},"InstanceState":{"shape":"Sb2","locationName":"instanceState"},"SystemStatus":{"shape":"Sb4","locationName":"systemStatus"},"InstanceStatus":{"shape":"Sb4","locationName":"instanceStatus"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeInstances":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"S8a","locationName":"InstanceId"},"Filters":{"shape":"S7r","locationName":"Filter"},"NextToken":{"locationName":"nextToken"},"MaxResults":{"locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"Reservations":{"locationName":"reservationSet","type":"list","member":{"shape":"Sbd","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeInternetGateways":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayIds":{"shape":"S26","locationName":"internetGatewayId"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"InternetGateways":{"locationName":"internetGatewaySet","type":"list","member":{"shape":"S3t","locationName":"item"}}}},"http":{}},"DescribeKeyPairs":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"KeyNames":{"locationName":"KeyName","type":"list","member":{"locationName":"KeyName"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"KeyPairs":{"locationName":"keySet","type":"list","member":{"locationName":"item","type":"structure","members":{"KeyName":{"locationName":"keyName"},"KeyFingerprint":{"locationName":"keyFingerprint"}}}}}},"http":{}},"DescribeMovingAddresses":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIps":{"shape":"S26","locationName":"publicIp"},"NextToken":{"locationName":"nextToken"},"Filters":{"shape":"S7r","locationName":"filter"},"MaxResults":{"locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"MovingAddressStatuses":{"locationName":"movingAddressStatusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"MoveStatus":{"locationName":"moveStatus"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeNatGateways":{"input":{"type":"structure","members":{"NatGatewayIds":{"shape":"S26","locationName":"NatGatewayId"},"Filter":{"shape":"S7r"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"NatGateways":{"locationName":"natGatewaySet","type":"list","member":{"shape":"S40","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeNetworkAcls":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclIds":{"shape":"S26","locationName":"NetworkAclId"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"NetworkAcls":{"locationName":"networkAclSet","type":"list","member":{"shape":"S46","locationName":"item"}}}},"http":{}},"DescribeNetworkInterfaceAttribute":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"Attribute":{"locationName":"attribute"}}},"output":{"type":"structure","members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"Description":{"shape":"S33","locationName":"description"},"SourceDestCheck":{"shape":"Sar","locationName":"sourceDestCheck"},"Groups":{"shape":"S4m","locationName":"groupSet"},"Attachment":{"shape":"S4o","locationName":"attachment"}}},"http":{}},"DescribeNetworkInterfaces":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceIds":{"locationName":"NetworkInterfaceId","type":"list","member":{"locationName":"item"}},"Filters":{"shape":"S7r","locationName":"filter"}}},"output":{"type":"structure","members":{"NetworkInterfaces":{"locationName":"networkInterfaceSet","type":"list","member":{"shape":"S4k","locationName":"item"}}}},"http":{}},"DescribePlacementGroups":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupNames":{"locationName":"groupName","type":"list","member":{}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"PlacementGroups":{"locationName":"placementGroupSet","type":"list","member":{"locationName":"item","type":"structure","members":{"GroupName":{"locationName":"groupName"},"Strategy":{"locationName":"strategy"},"State":{"locationName":"state"}}}}}},"http":{}},"DescribePrefixLists":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"PrefixListIds":{"shape":"S26","locationName":"PrefixListId"},"Filters":{"shape":"S7r","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"PrefixLists":{"locationName":"prefixListSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PrefixListId":{"locationName":"prefixListId"},"PrefixListName":{"locationName":"prefixListName"},"Cidrs":{"shape":"S26","locationName":"cidrSet"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeRegions":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RegionNames":{"locationName":"RegionName","type":"list","member":{"locationName":"RegionName"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"Regions":{"locationName":"regionInfo","type":"list","member":{"locationName":"item","type":"structure","members":{"RegionName":{"locationName":"regionName"},"Endpoint":{"locationName":"regionEndpoint"}}}}}},"http":{}},"DescribeReservedInstances":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ReservedInstancesIds":{"shape":"Scy","locationName":"ReservedInstancesId"},"Filters":{"shape":"S7r","locationName":"Filter"},"OfferingType":{"locationName":"offeringType"}}},"output":{"type":"structure","members":{"ReservedInstances":{"locationName":"reservedInstancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"},"InstanceType":{"locationName":"instanceType"},"AvailabilityZone":{"locationName":"availabilityZone"},"Start":{"locationName":"start","type":"timestamp"},"End":{"locationName":"end","type":"timestamp"},"Duration":{"locationName":"duration","type":"long"},"UsagePrice":{"locationName":"usagePrice","type":"float"},"FixedPrice":{"locationName":"fixedPrice","type":"float"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"ProductDescription":{"locationName":"productDescription"},"State":{"locationName":"state"},"Tags":{"shape":"Sa","locationName":"tagSet"},"InstanceTenancy":{"locationName":"instanceTenancy"},"CurrencyCode":{"locationName":"currencyCode"},"OfferingType":{"locationName":"offeringType"},"RecurringCharges":{"shape":"Sd6","locationName":"recurringCharges"}}}}}},"http":{}},"DescribeReservedInstancesListings":{"input":{"type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"},"ReservedInstancesListingId":{"locationName":"reservedInstancesListingId"},"Filters":{"shape":"S7r","locationName":"filters"}}},"output":{"type":"structure","members":{"ReservedInstancesListings":{"shape":"S1u","locationName":"reservedInstancesListingsSet"}}},"http":{}},"DescribeReservedInstancesModifications":{"input":{"type":"structure","members":{"ReservedInstancesModificationIds":{"locationName":"ReservedInstancesModificationId","type":"list","member":{"locationName":"ReservedInstancesModificationId"}},"NextToken":{"locationName":"nextToken"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"ReservedInstancesModifications":{"locationName":"reservedInstancesModificationsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesModificationId":{"locationName":"reservedInstancesModificationId"},"ReservedInstancesIds":{"locationName":"reservedInstancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"}}}},"ModificationResults":{"locationName":"modificationResultSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"},"TargetConfiguration":{"shape":"Sdk","locationName":"targetConfiguration"}}}},"CreateDate":{"locationName":"createDate","type":"timestamp"},"UpdateDate":{"locationName":"updateDate","type":"timestamp"},"EffectiveDate":{"locationName":"effectiveDate","type":"timestamp"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"ClientToken":{"locationName":"clientToken"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeReservedInstancesOfferings":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ReservedInstancesOfferingIds":{"locationName":"ReservedInstancesOfferingId","type":"list","member":{}},"InstanceType":{},"AvailabilityZone":{},"ProductDescription":{},"Filters":{"shape":"S7r","locationName":"Filter"},"InstanceTenancy":{"locationName":"instanceTenancy"},"OfferingType":{"locationName":"offeringType"},"NextToken":{"locationName":"nextToken"},"MaxResults":{"locationName":"maxResults","type":"integer"},"IncludeMarketplace":{"type":"boolean"},"MinDuration":{"type":"long"},"MaxDuration":{"type":"long"},"MaxInstanceCount":{"type":"integer"}}},"output":{"type":"structure","members":{"ReservedInstancesOfferings":{"locationName":"reservedInstancesOfferingsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesOfferingId":{"locationName":"reservedInstancesOfferingId"},"InstanceType":{"locationName":"instanceType"},"AvailabilityZone":{"locationName":"availabilityZone"},"Duration":{"locationName":"duration","type":"long"},"UsagePrice":{"locationName":"usagePrice","type":"float"},"FixedPrice":{"locationName":"fixedPrice","type":"float"},"ProductDescription":{"locationName":"productDescription"},"InstanceTenancy":{"locationName":"instanceTenancy"},"CurrencyCode":{"locationName":"currencyCode"},"OfferingType":{"locationName":"offeringType"},"RecurringCharges":{"shape":"Sd6","locationName":"recurringCharges"},"Marketplace":{"locationName":"marketplace","type":"boolean"},"PricingDetails":{"locationName":"pricingDetailsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Price":{"locationName":"price","type":"double"},"Count":{"locationName":"count","type":"integer"}}}}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeRouteTables":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableIds":{"shape":"S26","locationName":"RouteTableId"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"RouteTables":{"locationName":"routeTableSet","type":"list","member":{"shape":"S53","locationName":"item"}}}},"http":{}},"DescribeScheduledInstanceAvailability":{"input":{"type":"structure","required":["Recurrence","FirstSlotStartTimeRange"],"members":{"DryRun":{"type":"boolean"},"Recurrence":{"type":"structure","members":{"Frequency":{},"Interval":{"type":"integer"},"OccurrenceDays":{"locationName":"OccurrenceDay","type":"list","member":{"locationName":"OccurenceDay","type":"integer"}},"OccurrenceRelativeToEnd":{"type":"boolean"},"OccurrenceUnit":{}}},"FirstSlotStartTimeRange":{"type":"structure","required":["EarliestTime","LatestTime"],"members":{"EarliestTime":{"type":"timestamp"},"LatestTime":{"type":"timestamp"}}},"MinSlotDurationInHours":{"type":"integer"},"MaxSlotDurationInHours":{"type":"integer"},"NextToken":{},"MaxResults":{"type":"integer"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"ScheduledInstanceAvailabilitySet":{"locationName":"scheduledInstanceAvailabilitySet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceType":{"locationName":"instanceType"},"Platform":{"locationName":"platform"},"NetworkPlatform":{"locationName":"networkPlatform"},"AvailabilityZone":{"locationName":"availabilityZone"},"PurchaseToken":{"locationName":"purchaseToken"},"SlotDurationInHours":{"locationName":"slotDurationInHours","type":"integer"},"Recurrence":{"shape":"Se2","locationName":"recurrence"},"FirstSlotStartTime":{"locationName":"firstSlotStartTime","type":"timestamp"},"HourlyPrice":{"locationName":"hourlyPrice"},"TotalScheduledInstanceHours":{"locationName":"totalScheduledInstanceHours","type":"integer"},"AvailableInstanceCount":{"locationName":"availableInstanceCount","type":"integer"},"MinTermDurationInDays":{"locationName":"minTermDurationInDays","type":"integer"},"MaxTermDurationInDays":{"locationName":"maxTermDurationInDays","type":"integer"}}}}}},"http":{}},"DescribeScheduledInstances":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"ScheduledInstanceIds":{"locationName":"ScheduledInstanceId","type":"list","member":{"locationName":"ScheduledInstanceId"}},"SlotStartTimeRange":{"type":"structure","members":{"EarliestTime":{"type":"timestamp"},"LatestTime":{"type":"timestamp"}}},"NextToken":{},"MaxResults":{"type":"integer"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"ScheduledInstanceSet":{"locationName":"scheduledInstanceSet","type":"list","member":{"shape":"Se9","locationName":"item"}}}},"http":{}},"DescribeSecurityGroups":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupNames":{"shape":"Seb","locationName":"GroupName"},"GroupIds":{"shape":"Ss","locationName":"GroupId"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"SecurityGroups":{"locationName":"securityGroupInfo","type":"list","member":{"locationName":"item","type":"structure","members":{"OwnerId":{"locationName":"ownerId"},"GroupName":{"locationName":"groupName"},"GroupId":{"locationName":"groupId"},"Description":{"locationName":"groupDescription"},"IpPermissions":{"shape":"S15","locationName":"ipPermissions"},"IpPermissionsEgress":{"shape":"S15","locationName":"ipPermissionsEgress"},"VpcId":{"locationName":"vpcId"},"Tags":{"shape":"Sa","locationName":"tagSet"}}}}}},"http":{}},"DescribeSnapshotAttribute":{"input":{"type":"structure","required":["SnapshotId","Attribute"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SnapshotId":{},"Attribute":{}}},"output":{"type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"},"CreateVolumePermissions":{"shape":"Sei","locationName":"createVolumePermission"},"ProductCodes":{"shape":"S9t","locationName":"productCodes"}}},"http":{}},"DescribeSnapshots":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SnapshotIds":{"locationName":"SnapshotId","type":"list","member":{"locationName":"SnapshotId"}},"OwnerIds":{"shape":"S9z","locationName":"Owner"},"RestorableByUserIds":{"locationName":"RestorableBy","type":"list","member":{}},"Filters":{"shape":"S7r","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Snapshots":{"locationName":"snapshotSet","type":"list","member":{"shape":"S5f","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeSpotDatafeedSubscription":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"SpotDatafeedSubscription":{"shape":"S5j","locationName":"spotDatafeedSubscription"}}},"http":{}},"DescribeSpotFleetInstances":{"input":{"type":"structure","required":["SpotFleetRequestId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"NextToken":{"locationName":"nextToken"},"MaxResults":{"locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","required":["SpotFleetRequestId","ActiveInstances"],"members":{"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"ActiveInstances":{"locationName":"activeInstanceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceType":{"locationName":"instanceType"},"InstanceId":{"locationName":"instanceId"},"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeSpotFleetRequestHistory":{"input":{"type":"structure","required":["SpotFleetRequestId","StartTime"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"EventType":{"locationName":"eventType"},"StartTime":{"locationName":"startTime","type":"timestamp"},"NextToken":{"locationName":"nextToken"},"MaxResults":{"locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","required":["SpotFleetRequestId","StartTime","LastEvaluatedTime","HistoryRecords"],"members":{"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"StartTime":{"locationName":"startTime","type":"timestamp"},"LastEvaluatedTime":{"locationName":"lastEvaluatedTime","type":"timestamp"},"HistoryRecords":{"locationName":"historyRecordSet","type":"list","member":{"locationName":"item","type":"structure","required":["Timestamp","EventType","EventInformation"],"members":{"Timestamp":{"locationName":"timestamp","type":"timestamp"},"EventType":{"locationName":"eventType"},"EventInformation":{"locationName":"eventInformation","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"EventSubType":{"locationName":"eventSubType"},"EventDescription":{"locationName":"eventDescription"}}}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeSpotFleetRequests":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotFleetRequestIds":{"shape":"S26","locationName":"spotFleetRequestId"},"NextToken":{"locationName":"nextToken"},"MaxResults":{"locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","required":["SpotFleetRequestConfigs"],"members":{"SpotFleetRequestConfigs":{"locationName":"spotFleetRequestConfigSet","type":"list","member":{"locationName":"item","type":"structure","required":["SpotFleetRequestId","SpotFleetRequestState","SpotFleetRequestConfig","CreateTime"],"members":{"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"SpotFleetRequestState":{"locationName":"spotFleetRequestState"},"SpotFleetRequestConfig":{"shape":"Sf5","locationName":"spotFleetRequestConfig"},"CreateTime":{"locationName":"createTime","type":"timestamp"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeSpotInstanceRequests":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotInstanceRequestIds":{"shape":"S2g","locationName":"SpotInstanceRequestId"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"SpotInstanceRequests":{"shape":"Sfh","locationName":"spotInstanceRequestSet"}}},"http":{}},"DescribeSpotPriceHistory":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"StartTime":{"locationName":"startTime","type":"timestamp"},"EndTime":{"locationName":"endTime","type":"timestamp"},"InstanceTypes":{"locationName":"InstanceType","type":"list","member":{}},"ProductDescriptions":{"locationName":"ProductDescription","type":"list","member":{}},"Filters":{"shape":"S7r","locationName":"Filter"},"AvailabilityZone":{"locationName":"availabilityZone"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"SpotPriceHistory":{"locationName":"spotPriceHistorySet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceType":{"locationName":"instanceType"},"ProductDescription":{"locationName":"productDescription"},"SpotPrice":{"locationName":"spotPrice"},"Timestamp":{"locationName":"timestamp","type":"timestamp"},"AvailabilityZone":{"locationName":"availabilityZone"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeSubnets":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SubnetIds":{"locationName":"SubnetId","type":"list","member":{"locationName":"SubnetId"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"Subnets":{"locationName":"subnetSet","type":"list","member":{"shape":"S5o","locationName":"item"}}}},"http":{}},"DescribeTags":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Filters":{"shape":"S7r","locationName":"Filter"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Tags":{"locationName":"tagSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"Key":{"locationName":"key"},"Value":{"locationName":"value"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeVolumeAttribute":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeId":{},"Attribute":{}}},"output":{"type":"structure","members":{"VolumeId":{"locationName":"volumeId"},"AutoEnableIO":{"shape":"Sar","locationName":"autoEnableIO"},"ProductCodes":{"shape":"S9t","locationName":"productCodes"}}},"http":{}},"DescribeVolumeStatus":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeIds":{"shape":"Sg7","locationName":"VolumeId"},"Filters":{"shape":"S7r","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"VolumeStatuses":{"locationName":"volumeStatusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"VolumeId":{"locationName":"volumeId"},"AvailabilityZone":{"locationName":"availabilityZone"},"VolumeStatus":{"locationName":"volumeStatus","type":"structure","members":{"Status":{"locationName":"status"},"Details":{"locationName":"details","type":"list","member":{"locationName":"item","type":"structure","members":{"Name":{"locationName":"name"},"Status":{"locationName":"status"}}}}}},"Events":{"locationName":"eventsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"EventType":{"locationName":"eventType"},"Description":{"locationName":"description"},"NotBefore":{"locationName":"notBefore","type":"timestamp"},"NotAfter":{"locationName":"notAfter","type":"timestamp"},"EventId":{"locationName":"eventId"}}}},"Actions":{"locationName":"actionsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Code":{"locationName":"code"},"Description":{"locationName":"description"},"EventType":{"locationName":"eventType"},"EventId":{"locationName":"eventId"}}}}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeVolumes":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeIds":{"shape":"Sg7","locationName":"VolumeId"},"Filters":{"shape":"S7r","locationName":"Filter"},"NextToken":{"locationName":"nextToken"},"MaxResults":{"locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"Volumes":{"locationName":"volumeSet","type":"list","member":{"shape":"S5t","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeVpcAttribute":{"input":{"type":"structure","required":["VpcId","Attribute"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{},"Attribute":{}}},"output":{"type":"structure","members":{"VpcId":{"locationName":"vpcId"},"EnableDnsSupport":{"shape":"Sar","locationName":"enableDnsSupport"},"EnableDnsHostnames":{"shape":"Sar","locationName":"enableDnsHostnames"}}},"http":{}},"DescribeVpcClassicLink":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcIds":{"shape":"Sgr","locationName":"VpcId"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"Vpcs":{"locationName":"vpcSet","type":"list","member":{"locationName":"item","type":"structure","members":{"VpcId":{"locationName":"vpcId"},"ClassicLinkEnabled":{"locationName":"classicLinkEnabled","type":"boolean"},"Tags":{"shape":"Sa","locationName":"tagSet"}}}}}},"http":{}},"DescribeVpcClassicLinkDnsSupport":{"input":{"type":"structure","members":{"VpcIds":{"shape":"Sgr"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Vpcs":{"locationName":"vpcs","type":"list","member":{"locationName":"item","type":"structure","members":{"VpcId":{"locationName":"vpcId"},"ClassicLinkDnsSupported":{"locationName":"classicLinkDnsSupported","type":"boolean"}}}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeVpcEndpointServices":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ServiceNames":{"shape":"S26","locationName":"serviceNameSet"},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeVpcEndpoints":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"VpcEndpointIds":{"shape":"S26","locationName":"VpcEndpointId"},"Filters":{"shape":"S7r","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"VpcEndpoints":{"locationName":"vpcEndpointSet","type":"list","member":{"shape":"S63","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}},"http":{}},"DescribeVpcPeeringConnections":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionIds":{"shape":"S26","locationName":"VpcPeeringConnectionId"},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"VpcPeeringConnections":{"locationName":"vpcPeeringConnectionSet","type":"list","member":{"shape":"S5","locationName":"item"}}}},"http":{}},"DescribeVpcs":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcIds":{"locationName":"VpcId","type":"list","member":{"locationName":"VpcId"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"Vpcs":{"locationName":"vpcSet","type":"list","member":{"shape":"S5z","locationName":"item"}}}},"http":{}},"DescribeVpnConnections":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpnConnectionIds":{"locationName":"VpnConnectionId","type":"list","member":{"locationName":"VpnConnectionId"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"VpnConnections":{"locationName":"vpnConnectionSet","type":"list","member":{"shape":"S6a","locationName":"item"}}}},"http":{}},"DescribeVpnGateways":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpnGatewayIds":{"locationName":"VpnGatewayId","type":"list","member":{"locationName":"VpnGatewayId"}},"Filters":{"shape":"S7r","locationName":"Filter"}}},"output":{"type":"structure","members":{"VpnGateways":{"locationName":"vpnGatewaySet","type":"list","member":{"shape":"S6m","locationName":"item"}}}},"http":{}},"DetachClassicLinkVpc":{"input":{"type":"structure","required":["InstanceId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"DetachInternetGateway":{"input":{"type":"structure","required":["InternetGatewayId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayId":{"locationName":"internetGatewayId"},"VpcId":{"locationName":"vpcId"}}},"http":{}},"DetachNetworkInterface":{"input":{"type":"structure","required":["AttachmentId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"AttachmentId":{"locationName":"attachmentId"},"Force":{"locationName":"force","type":"boolean"}}},"http":{}},"DetachVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeId":{},"InstanceId":{},"Device":{},"Force":{"type":"boolean"}}},"output":{"shape":"Sy"},"http":{}},"DetachVpnGateway":{"input":{"type":"structure","required":["VpnGatewayId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpnGatewayId":{},"VpcId":{}}},"http":{}},"DisableVgwRoutePropagation":{"input":{"type":"structure","required":["RouteTableId","GatewayId"],"members":{"RouteTableId":{},"GatewayId":{}}},"http":{}},"DisableVpcClassicLink":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"DisableVpcClassicLinkDnsSupport":{"input":{"type":"structure","members":{"VpcId":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"DisassociateAddress":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIp":{},"AssociationId":{}}},"http":{}},"DisassociateRouteTable":{"input":{"type":"structure","required":["AssociationId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"AssociationId":{"locationName":"associationId"}}},"http":{}},"EnableVgwRoutePropagation":{"input":{"type":"structure","required":["RouteTableId","GatewayId"],"members":{"RouteTableId":{},"GatewayId":{}}},"http":{}},"EnableVolumeIO":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeId":{"locationName":"volumeId"}}},"http":{}},"EnableVpcClassicLink":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"EnableVpcClassicLinkDnsSupport":{"input":{"type":"structure","members":{"VpcId":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"GetConsoleOutput":{"input":{"type":"structure","required":["InstanceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{}}},"output":{"type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"Timestamp":{"locationName":"timestamp","type":"timestamp"},"Output":{"locationName":"output"}}},"http":{}},"GetPasswordData":{"input":{"type":"structure","required":["InstanceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{}}},"output":{"type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"Timestamp":{"locationName":"timestamp","type":"timestamp"},"PasswordData":{"locationName":"passwordData"}}},"http":{}},"ImportImage":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Description":{},"DiskContainers":{"locationName":"DiskContainer","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{},"Format":{},"Url":{},"UserBucket":{"shape":"Sib"},"DeviceName":{},"SnapshotId":{}}}},"LicenseType":{},"Hypervisor":{},"Architecture":{},"Platform":{},"ClientData":{"shape":"Sic"},"ClientToken":{},"RoleName":{}}},"output":{"type":"structure","members":{"ImportTaskId":{"locationName":"importTaskId"},"Architecture":{"locationName":"architecture"},"LicenseType":{"locationName":"licenseType"},"Platform":{"locationName":"platform"},"Hypervisor":{"locationName":"hypervisor"},"Description":{"locationName":"description"},"SnapshotDetails":{"shape":"Sag","locationName":"snapshotDetailSet"},"ImageId":{"locationName":"imageId"},"Progress":{"locationName":"progress"},"StatusMessage":{"locationName":"statusMessage"},"Status":{"locationName":"status"}}},"http":{}},"ImportInstance":{"input":{"type":"structure","required":["Platform"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Description":{"locationName":"description"},"LaunchSpecification":{"locationName":"launchSpecification","type":"structure","members":{"Architecture":{"locationName":"architecture"},"GroupNames":{"shape":"Sig","locationName":"GroupName"},"GroupIds":{"shape":"S4g","locationName":"GroupId"},"AdditionalInfo":{"locationName":"additionalInfo"},"UserData":{"locationName":"userData","type":"structure","members":{"Data":{"locationName":"data"}}},"InstanceType":{"locationName":"instanceType"},"Placement":{"shape":"Sbh","locationName":"placement"},"Monitoring":{"locationName":"monitoring","type":"boolean"},"SubnetId":{"locationName":"subnetId"},"InstanceInitiatedShutdownBehavior":{"locationName":"instanceInitiatedShutdownBehavior"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}},"DiskImages":{"locationName":"diskImage","type":"list","member":{"type":"structure","members":{"Image":{"shape":"Sil"},"Description":{},"Volume":{"shape":"Sim"}}}},"Platform":{"locationName":"platform"}}},"output":{"type":"structure","members":{"ConversionTask":{"shape":"S8i","locationName":"conversionTask"}}},"http":{}},"ImportKeyPair":{"input":{"type":"structure","required":["KeyName","PublicKeyMaterial"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"KeyName":{"locationName":"keyName"},"PublicKeyMaterial":{"locationName":"publicKeyMaterial","type":"blob"}}},"output":{"type":"structure","members":{"KeyName":{"locationName":"keyName"},"KeyFingerprint":{"locationName":"keyFingerprint"}}},"http":{}},"ImportSnapshot":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Description":{},"DiskContainer":{"type":"structure","members":{"Description":{},"Format":{},"Url":{},"UserBucket":{"shape":"Sib"}}},"ClientData":{"shape":"Sic"},"ClientToken":{},"RoleName":{}}},"output":{"type":"structure","members":{"ImportTaskId":{"locationName":"importTaskId"},"SnapshotTaskDetail":{"shape":"San","locationName":"snapshotTaskDetail"},"Description":{"locationName":"description"}}},"http":{}},"ImportVolume":{"input":{"type":"structure","required":["AvailabilityZone","Image","Volume"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"AvailabilityZone":{"locationName":"availabilityZone"},"Image":{"shape":"Sil","locationName":"image"},"Description":{"locationName":"description"},"Volume":{"shape":"Sim","locationName":"volume"}}},"output":{"type":"structure","members":{"ConversionTask":{"shape":"S8i","locationName":"conversionTask"}}},"http":{}},"ModifyHosts":{"input":{"type":"structure","required":["HostIds","AutoPlacement"],"members":{"HostIds":{"shape":"S98","locationName":"hostId"},"AutoPlacement":{"locationName":"autoPlacement"}}},"output":{"type":"structure","members":{"Successful":{"shape":"Sj","locationName":"successful"},"Unsuccessful":{"shape":"Six","locationName":"unsuccessful"}}},"http":{}},"ModifyIdFormat":{"input":{"type":"structure","required":["Resource","UseLongIds"],"members":{"Resource":{},"UseLongIds":{"type":"boolean"}}},"http":{}},"ModifyImageAttribute":{"input":{"type":"structure","required":["ImageId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ImageId":{},"Attribute":{},"OperationType":{},"UserIds":{"shape":"Sj1","locationName":"UserId"},"UserGroups":{"locationName":"UserGroup","type":"list","member":{"locationName":"UserGroup"}},"ProductCodes":{"locationName":"ProductCode","type":"list","member":{"locationName":"ProductCode"}},"Value":{},"LaunchPermission":{"type":"structure","members":{"Add":{"shape":"S9q"},"Remove":{"shape":"S9q"}}},"Description":{"shape":"S33"}}},"http":{}},"ModifyInstanceAttribute":{"input":{"type":"structure","required":["InstanceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"Attribute":{"locationName":"attribute"},"Value":{"locationName":"value"},"BlockDeviceMappings":{"locationName":"blockDeviceMapping","type":"list","member":{"locationName":"item","type":"structure","members":{"DeviceName":{"locationName":"deviceName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"VolumeId":{"locationName":"volumeId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}},"VirtualName":{"locationName":"virtualName"},"NoDevice":{"locationName":"noDevice"}}}},"SourceDestCheck":{"shape":"Sar"},"DisableApiTermination":{"shape":"Sar","locationName":"disableApiTermination"},"InstanceType":{"shape":"S33","locationName":"instanceType"},"Kernel":{"shape":"S33","locationName":"kernel"},"Ramdisk":{"shape":"S33","locationName":"ramdisk"},"UserData":{"locationName":"userData","type":"structure","members":{"Value":{"locationName":"value","type":"blob"}}},"InstanceInitiatedShutdownBehavior":{"shape":"S33","locationName":"instanceInitiatedShutdownBehavior"},"Groups":{"shape":"Ss","locationName":"GroupId"},"EbsOptimized":{"shape":"Sar","locationName":"ebsOptimized"},"SriovNetSupport":{"shape":"S33","locationName":"sriovNetSupport"}}},"http":{}},"ModifyInstancePlacement":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{"locationName":"instanceId"},"Tenancy":{"locationName":"tenancy"},"Affinity":{"locationName":"affinity"},"HostId":{"locationName":"hostId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"ModifyNetworkInterfaceAttribute":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"Description":{"shape":"S33","locationName":"description"},"SourceDestCheck":{"shape":"Sar","locationName":"sourceDestCheck"},"Groups":{"shape":"S4g","locationName":"SecurityGroupId"},"Attachment":{"locationName":"attachment","type":"structure","members":{"AttachmentId":{"locationName":"attachmentId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}}}},"http":{}},"ModifyReservedInstances":{"input":{"type":"structure","required":["ReservedInstancesIds","TargetConfigurations"],"members":{"ClientToken":{"locationName":"clientToken"},"ReservedInstancesIds":{"shape":"Scy","locationName":"ReservedInstancesId"},"TargetConfigurations":{"locationName":"ReservedInstancesConfigurationSetItemType","type":"list","member":{"shape":"Sdk","locationName":"item"}}}},"output":{"type":"structure","members":{"ReservedInstancesModificationId":{"locationName":"reservedInstancesModificationId"}}},"http":{}},"ModifySnapshotAttribute":{"input":{"type":"structure","required":["SnapshotId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SnapshotId":{},"Attribute":{},"OperationType":{},"UserIds":{"shape":"Sj1","locationName":"UserId"},"GroupNames":{"shape":"Seb","locationName":"UserGroup"},"CreateVolumePermission":{"type":"structure","members":{"Add":{"shape":"Sei"},"Remove":{"shape":"Sei"}}}}},"http":{}},"ModifySpotFleetRequest":{"input":{"type":"structure","required":["SpotFleetRequestId"],"members":{"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"TargetCapacity":{"locationName":"targetCapacity","type":"integer"},"ExcessCapacityTerminationPolicy":{"locationName":"excessCapacityTerminationPolicy"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"ModifySubnetAttribute":{"input":{"type":"structure","required":["SubnetId"],"members":{"SubnetId":{"locationName":"subnetId"},"MapPublicIpOnLaunch":{"shape":"Sar"}}},"http":{}},"ModifyVolumeAttribute":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeId":{},"AutoEnableIO":{"shape":"Sar"}}},"http":{}},"ModifyVpcAttribute":{"input":{"type":"structure","required":["VpcId"],"members":{"VpcId":{"locationName":"vpcId"},"EnableDnsSupport":{"shape":"Sar"},"EnableDnsHostnames":{"shape":"Sar"}}},"http":{}},"ModifyVpcEndpoint":{"input":{"type":"structure","required":["VpcEndpointId"],"members":{"DryRun":{"type":"boolean"},"VpcEndpointId":{},"ResetPolicy":{"type":"boolean"},"PolicyDocument":{},"AddRouteTableIds":{"shape":"S26","locationName":"AddRouteTableId"},"RemoveRouteTableIds":{"shape":"S26","locationName":"RemoveRouteTableId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"MonitorInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"S8a","locationName":"InstanceId"}}},"output":{"type":"structure","members":{"InstanceMonitorings":{"shape":"Sju","locationName":"instancesSet"}}},"http":{}},"MoveAddressToVpc":{"input":{"type":"structure","required":["PublicIp"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIp":{"locationName":"publicIp"}}},"output":{"type":"structure","members":{"AllocationId":{"locationName":"allocationId"},"Status":{"locationName":"status"}}},"http":{}},"PurchaseReservedInstancesOffering":{"input":{"type":"structure","required":["ReservedInstancesOfferingId","InstanceCount"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ReservedInstancesOfferingId":{},"InstanceCount":{"type":"integer"},"LimitPrice":{"locationName":"limitPrice","type":"structure","members":{"Amount":{"locationName":"amount","type":"double"},"CurrencyCode":{"locationName":"currencyCode"}}}}},"output":{"type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"}}},"http":{}},"PurchaseScheduledInstances":{"input":{"type":"structure","required":["PurchaseRequests"],"members":{"DryRun":{"type":"boolean"},"ClientToken":{"idempotencyToken":true},"PurchaseRequests":{"locationName":"PurchaseRequest","type":"list","member":{"locationName":"PurchaseRequest","type":"structure","required":["PurchaseToken","InstanceCount"],"members":{"PurchaseToken":{},"InstanceCount":{"type":"integer"}}}}}},"output":{"type":"structure","members":{"ScheduledInstanceSet":{"locationName":"scheduledInstanceSet","type":"list","member":{"shape":"Se9","locationName":"item"}}}},"http":{}},"RebootInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"S8a","locationName":"InstanceId"}}},"http":{}},"RegisterImage":{"input":{"type":"structure","required":["Name"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ImageLocation":{},"Name":{"locationName":"name"},"Description":{"locationName":"description"},"Architecture":{"locationName":"architecture"},"KernelId":{"locationName":"kernelId"},"RamdiskId":{"locationName":"ramdiskId"},"RootDeviceName":{"locationName":"rootDeviceName"},"BlockDeviceMappings":{"shape":"S3c","locationName":"BlockDeviceMapping"},"VirtualizationType":{"locationName":"virtualizationType"},"SriovNetSupport":{"locationName":"sriovNetSupport"}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}},"http":{}},"RejectVpcPeeringConnection":{"input":{"type":"structure","required":["VpcPeeringConnectionId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}},"http":{}},"ReleaseAddress":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIp":{},"AllocationId":{}}},"http":{}},"ReleaseHosts":{"input":{"type":"structure","required":["HostIds"],"members":{"HostIds":{"shape":"S98","locationName":"hostId"}}},"output":{"type":"structure","members":{"Successful":{"shape":"Sj","locationName":"successful"},"Unsuccessful":{"shape":"Six","locationName":"unsuccessful"}}},"http":{}},"ReplaceNetworkAclAssociation":{"input":{"type":"structure","required":["AssociationId","NetworkAclId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"AssociationId":{"locationName":"associationId"},"NetworkAclId":{"locationName":"networkAclId"}}},"output":{"type":"structure","members":{"NewAssociationId":{"locationName":"newAssociationId"}}},"http":{}},"ReplaceNetworkAclEntry":{"input":{"type":"structure","required":["NetworkAclId","RuleNumber","Protocol","RuleAction","Egress","CidrBlock"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"Egress":{"locationName":"egress","type":"boolean"},"CidrBlock":{"locationName":"cidrBlock"},"IcmpTypeCode":{"shape":"S4a","locationName":"Icmp"},"PortRange":{"shape":"S4b","locationName":"portRange"}}},"http":{}},"ReplaceRoute":{"input":{"type":"structure","required":["RouteTableId","DestinationCidrBlock"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"},"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"},"NatGatewayId":{"locationName":"natGatewayId"}}},"http":{}},"ReplaceRouteTableAssociation":{"input":{"type":"structure","required":["AssociationId","RouteTableId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"AssociationId":{"locationName":"associationId"},"RouteTableId":{"locationName":"routeTableId"}}},"output":{"type":"structure","members":{"NewAssociationId":{"locationName":"newAssociationId"}}},"http":{}},"ReportInstanceStatus":{"input":{"type":"structure","required":["Instances","Status","ReasonCodes"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Instances":{"shape":"S8a","locationName":"instanceId"},"Status":{"locationName":"status"},"StartTime":{"locationName":"startTime","type":"timestamp"},"EndTime":{"locationName":"endTime","type":"timestamp"},"ReasonCodes":{"locationName":"reasonCode","type":"list","member":{"locationName":"item"}},"Description":{"locationName":"description"}}},"http":{}},"RequestSpotFleet":{"input":{"type":"structure","required":["SpotFleetRequestConfig"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotFleetRequestConfig":{"shape":"Sf5","locationName":"spotFleetRequestConfig"}}},"output":{"type":"structure","required":["SpotFleetRequestId"],"members":{"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}},"http":{}},"RequestSpotInstances":{"input":{"type":"structure","required":["SpotPrice"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotPrice":{"locationName":"spotPrice"},"ClientToken":{"locationName":"clientToken"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"Type":{"locationName":"type"},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"LaunchGroup":{"locationName":"launchGroup"},"AvailabilityZoneGroup":{"locationName":"availabilityZoneGroup"},"BlockDurationMinutes":{"locationName":"blockDurationMinutes","type":"integer"},"LaunchSpecification":{"type":"structure","members":{"ImageId":{"locationName":"imageId"},"KeyName":{"locationName":"keyName"},"SecurityGroups":{"shape":"S26","locationName":"SecurityGroup"},"UserData":{"locationName":"userData"},"AddressingType":{"locationName":"addressingType"},"InstanceType":{"locationName":"instanceType"},"Placement":{"shape":"Sf8","locationName":"placement"},"KernelId":{"locationName":"kernelId"},"RamdiskId":{"locationName":"ramdiskId"},"BlockDeviceMappings":{"shape":"S9w","locationName":"blockDeviceMapping"},"SubnetId":{"locationName":"subnetId"},"NetworkInterfaces":{"shape":"Sfa","locationName":"NetworkInterface"},"IamInstanceProfile":{"shape":"Sfc","locationName":"iamInstanceProfile"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"Monitoring":{"shape":"Sfn","locationName":"monitoring"},"SecurityGroupIds":{"shape":"S26","locationName":"SecurityGroupId"}}}}},"output":{"type":"structure","members":{"SpotInstanceRequests":{"shape":"Sfh","locationName":"spotInstanceRequestSet"}}},"http":{}},"ResetImageAttribute":{"input":{"type":"structure","required":["ImageId","Attribute"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ImageId":{},"Attribute":{}}},"http":{}},"ResetInstanceAttribute":{"input":{"type":"structure","required":["InstanceId","Attribute"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"Attribute":{"locationName":"attribute"}}},"http":{}},"ResetNetworkInterfaceAttribute":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"SourceDestCheck":{"locationName":"sourceDestCheck"}}},"http":{}},"ResetSnapshotAttribute":{"input":{"type":"structure","required":["SnapshotId","Attribute"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SnapshotId":{},"Attribute":{}}},"http":{}},"RestoreAddressToClassic":{"input":{"type":"structure","required":["PublicIp"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIp":{"locationName":"publicIp"}}},"output":{"type":"structure","members":{"Status":{"locationName":"status"},"PublicIp":{"locationName":"publicIp"}}},"http":{}},"RevokeSecurityGroupEgress":{"input":{"type":"structure","required":["GroupId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupId":{"locationName":"groupId"},"SourceSecurityGroupName":{"locationName":"sourceSecurityGroupName"},"SourceSecurityGroupOwnerId":{"locationName":"sourceSecurityGroupOwnerId"},"IpProtocol":{"locationName":"ipProtocol"},"FromPort":{"locationName":"fromPort","type":"integer"},"ToPort":{"locationName":"toPort","type":"integer"},"CidrIp":{"locationName":"cidrIp"},"IpPermissions":{"shape":"S15","locationName":"ipPermissions"}}},"http":{}},"RevokeSecurityGroupIngress":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{},"GroupId":{},"SourceSecurityGroupName":{},"SourceSecurityGroupOwnerId":{},"IpProtocol":{},"FromPort":{"type":"integer"},"ToPort":{"type":"integer"},"CidrIp":{},"IpPermissions":{"shape":"S15"}}},"http":{}},"RunInstances":{"input":{"type":"structure","required":["ImageId","MinCount","MaxCount"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"ImageId":{},"MinCount":{"type":"integer"},"MaxCount":{"type":"integer"},"KeyName":{},"SecurityGroups":{"shape":"Sig","locationName":"SecurityGroup"},"SecurityGroupIds":{"shape":"S4g","locationName":"SecurityGroupId"},"UserData":{},"InstanceType":{},"Placement":{"shape":"Sbh"},"KernelId":{},"RamdiskId":{},"BlockDeviceMappings":{"shape":"S3c","locationName":"BlockDeviceMapping"},"Monitoring":{"shape":"Sfn"},"SubnetId":{},"DisableApiTermination":{"locationName":"disableApiTermination","type":"boolean"},"InstanceInitiatedShutdownBehavior":{"locationName":"instanceInitiatedShutdownBehavior"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"ClientToken":{"locationName":"clientToken"},"AdditionalInfo":{"locationName":"additionalInfo"},"NetworkInterfaces":{"shape":"Sfa","locationName":"networkInterface"},"IamInstanceProfile":{"shape":"Sfc","locationName":"iamInstanceProfile"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"}}},"output":{"shape":"Sbd"},"http":{}},"RunScheduledInstances":{"input":{"type":"structure","required":["ScheduledInstanceId","LaunchSpecification"],"members":{"DryRun":{"type":"boolean"},"ClientToken":{"idempotencyToken":true},"InstanceCount":{"type":"integer"},"ScheduledInstanceId":{},"LaunchSpecification":{"type":"structure","required":["ImageId"],"members":{"ImageId":{},"KeyName":{},"SecurityGroupIds":{"shape":"Sl6","locationName":"SecurityGroupId"},"UserData":{},"Placement":{"type":"structure","members":{"AvailabilityZone":{},"GroupName":{}}},"KernelId":{},"InstanceType":{},"RamdiskId":{},"BlockDeviceMappings":{"locationName":"BlockDeviceMapping","type":"list","member":{"locationName":"BlockDeviceMapping","type":"structure","members":{"DeviceName":{},"NoDevice":{},"VirtualName":{},"Ebs":{"type":"structure","members":{"SnapshotId":{},"VolumeSize":{"type":"integer"},"DeleteOnTermination":{"type":"boolean"},"VolumeType":{},"Iops":{"type":"integer"},"Encrypted":{"type":"boolean"}}}}}},"Monitoring":{"type":"structure","members":{"Enabled":{"type":"boolean"}}},"SubnetId":{},"NetworkInterfaces":{"locationName":"NetworkInterface","type":"list","member":{"locationName":"NetworkInterface","type":"structure","members":{"NetworkInterfaceId":{},"DeviceIndex":{"type":"integer"},"SubnetId":{},"Description":{},"PrivateIpAddress":{},"PrivateIpAddressConfigs":{"locationName":"PrivateIpAddressConfig","type":"list","member":{"locationName":"PrivateIpAddressConfigSet","type":"structure","members":{"PrivateIpAddress":{},"Primary":{"type":"boolean"}}}},"SecondaryPrivateIpAddressCount":{"type":"integer"},"AssociatePublicIpAddress":{"type":"boolean"},"Groups":{"shape":"Sl6","locationName":"Group"},"DeleteOnTermination":{"type":"boolean"}}}},"IamInstanceProfile":{"type":"structure","members":{"Arn":{},"Name":{}}},"EbsOptimized":{"type":"boolean"}}}}},"output":{"type":"structure","members":{"InstanceIdSet":{"locationName":"instanceIdSet","type":"list","member":{"locationName":"item"}}}},"http":{}},"StartInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"S8a","locationName":"InstanceId"},"AdditionalInfo":{"locationName":"additionalInfo"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"StartingInstances":{"shape":"Sll","locationName":"instancesSet"}}},"http":{}},"StopInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"S8a","locationName":"InstanceId"},"Force":{"locationName":"force","type":"boolean"}}},"output":{"type":"structure","members":{"StoppingInstances":{"shape":"Sll","locationName":"instancesSet"}}},"http":{}},"TerminateInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"S8a","locationName":"InstanceId"}}},"output":{"type":"structure","members":{"TerminatingInstances":{"shape":"Sll","locationName":"instancesSet"}}},"http":{}},"UnassignPrivateIpAddresses":{"input":{"type":"structure","required":["NetworkInterfaceId","PrivateIpAddresses"],"members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddresses":{"shape":"Sl","locationName":"privateIpAddress"}}},"http":{}},"UnmonitorInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"S8a","locationName":"InstanceId"}}},"output":{"type":"structure","members":{"InstanceMonitorings":{"shape":"Sju","locationName":"instancesSet"}}},"http":{}}},"shapes":{"S5":{"type":"structure","members":{"AccepterVpcInfo":{"shape":"S6","locationName":"accepterVpcInfo"},"ExpirationTime":{"locationName":"expirationTime","type":"timestamp"},"RequesterVpcInfo":{"shape":"S6","locationName":"requesterVpcInfo"},"Status":{"locationName":"status","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"Tags":{"shape":"Sa","locationName":"tagSet"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"S6":{"type":"structure","members":{"CidrBlock":{"locationName":"cidrBlock"},"OwnerId":{"locationName":"ownerId"},"VpcId":{"locationName":"vpcId"}}},"Sa":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"Value":{"locationName":"value"}}}},"Sj":{"type":"list","member":{"locationName":"item"}},"Sl":{"type":"list","member":{"locationName":"PrivateIpAddress"}},"Ss":{"type":"list","member":{"locationName":"groupId"}},"Sy":{"type":"structure","members":{"VolumeId":{"locationName":"volumeId"},"InstanceId":{"locationName":"instanceId"},"Device":{"locationName":"device"},"State":{"locationName":"status"},"AttachTime":{"locationName":"attachTime","type":"timestamp"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}},"S12":{"type":"structure","members":{"VpcId":{"locationName":"vpcId"},"State":{"locationName":"state"}}},"S15":{"type":"list","member":{"locationName":"item","type":"structure","members":{"IpProtocol":{"locationName":"ipProtocol"},"FromPort":{"locationName":"fromPort","type":"integer"},"ToPort":{"locationName":"toPort","type":"integer"},"UserIdGroupPairs":{"locationName":"groups","type":"list","member":{"locationName":"item","type":"structure","members":{"UserId":{"locationName":"userId"},"GroupName":{"locationName":"groupName"},"GroupId":{"locationName":"groupId"},"VpcId":{"locationName":"vpcId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"},"PeeringStatus":{"locationName":"peeringStatus"}}}},"IpRanges":{"locationName":"ipRanges","type":"list","member":{"locationName":"item","type":"structure","members":{"CidrIp":{"locationName":"cidrIp"}}}},"PrefixListIds":{"locationName":"prefixListIds","type":"list","member":{"locationName":"item","type":"structure","members":{"PrefixListId":{"locationName":"prefixListId"}}}}}}},"S1f":{"type":"structure","members":{"S3":{"type":"structure","members":{"Bucket":{"locationName":"bucket"},"Prefix":{"locationName":"prefix"},"AWSAccessKeyId":{},"UploadPolicy":{"locationName":"uploadPolicy","type":"blob"},"UploadPolicySignature":{"locationName":"uploadPolicySignature"}}}}},"S1j":{"type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"BundleId":{"locationName":"bundleId"},"State":{"locationName":"state"},"StartTime":{"locationName":"startTime","type":"timestamp"},"UpdateTime":{"locationName":"updateTime","type":"timestamp"},"Storage":{"shape":"S1f","locationName":"storage"},"Progress":{"locationName":"progress"},"BundleTaskError":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}},"S1u":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesListingId":{"locationName":"reservedInstancesListingId"},"ReservedInstancesId":{"locationName":"reservedInstancesId"},"CreateDate":{"locationName":"createDate","type":"timestamp"},"UpdateDate":{"locationName":"updateDate","type":"timestamp"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"InstanceCounts":{"locationName":"instanceCounts","type":"list","member":{"locationName":"item","type":"structure","members":{"State":{"locationName":"state"},"InstanceCount":{"locationName":"instanceCount","type":"integer"}}}},"PriceSchedules":{"locationName":"priceSchedules","type":"list","member":{"locationName":"item","type":"structure","members":{"Term":{"locationName":"term","type":"long"},"Price":{"locationName":"price","type":"double"},"CurrencyCode":{"locationName":"currencyCode"},"Active":{"locationName":"active","type":"boolean"}}}},"Tags":{"shape":"Sa","locationName":"tagSet"},"ClientToken":{"locationName":"clientToken"}}}},"S26":{"type":"list","member":{"locationName":"item"}},"S2g":{"type":"list","member":{"locationName":"SpotInstanceRequestId"}},"S2u":{"type":"structure","members":{"CustomerGatewayId":{"locationName":"customerGatewayId"},"State":{"locationName":"state"},"Type":{"locationName":"type"},"IpAddress":{"locationName":"ipAddress"},"BgpAsn":{"locationName":"bgpAsn"},"Tags":{"shape":"Sa","locationName":"tagSet"}}},"S2z":{"type":"structure","members":{"DhcpOptionsId":{"locationName":"dhcpOptionsId"},"DhcpConfigurations":{"locationName":"dhcpConfigurationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"Values":{"locationName":"valueSet","type":"list","member":{"shape":"S33","locationName":"item"}}}}},"Tags":{"shape":"Sa","locationName":"tagSet"}}},"S33":{"type":"structure","members":{"Value":{"locationName":"value"}}},"S38":{"type":"list","member":{"shape":"S39","locationName":"item"}},"S39":{"type":"structure","required":["Error"],"members":{"ResourceId":{"locationName":"resourceId"},"Error":{"locationName":"error","type":"structure","required":["Code","Message"],"members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}}}},"S3c":{"type":"list","member":{"shape":"S3d","locationName":"BlockDeviceMapping"}},"S3d":{"type":"structure","members":{"VirtualName":{"locationName":"virtualName"},"DeviceName":{"locationName":"deviceName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"},"VolumeSize":{"locationName":"volumeSize","type":"integer"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"VolumeType":{"locationName":"volumeType"},"Iops":{"locationName":"iops","type":"integer"},"Encrypted":{"locationName":"encrypted","type":"boolean"}}},"NoDevice":{"locationName":"noDevice"}}},"S3n":{"type":"structure","members":{"ExportTaskId":{"locationName":"exportTaskId"},"Description":{"locationName":"description"},"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"},"InstanceExportDetails":{"locationName":"instanceExport","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"TargetEnvironment":{"locationName":"targetEnvironment"}}},"ExportToS3Task":{"locationName":"exportToS3","type":"structure","members":{"DiskImageFormat":{"locationName":"diskImageFormat"},"ContainerFormat":{"locationName":"containerFormat"},"S3Bucket":{"locationName":"s3Bucket"},"S3Key":{"locationName":"s3Key"}}}}},"S3t":{"type":"structure","members":{"InternetGatewayId":{"locationName":"internetGatewayId"},"Attachments":{"locationName":"attachmentSet","type":"list","member":{"locationName":"item","type":"structure","members":{"VpcId":{"locationName":"vpcId"},"State":{"locationName":"state"}}}},"Tags":{"shape":"Sa","locationName":"tagSet"}}},"S40":{"type":"structure","members":{"VpcId":{"locationName":"vpcId"},"SubnetId":{"locationName":"subnetId"},"NatGatewayId":{"locationName":"natGatewayId"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"DeleteTime":{"locationName":"deleteTime","type":"timestamp"},"NatGatewayAddresses":{"locationName":"natGatewayAddressSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"AllocationId":{"locationName":"allocationId"},"PrivateIp":{"locationName":"privateIp"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}}},"State":{"locationName":"state"},"FailureCode":{"locationName":"failureCode"},"FailureMessage":{"locationName":"failureMessage"}}},"S46":{"type":"structure","members":{"NetworkAclId":{"locationName":"networkAclId"},"VpcId":{"locationName":"vpcId"},"IsDefault":{"locationName":"default","type":"boolean"},"Entries":{"locationName":"entrySet","type":"list","member":{"locationName":"item","type":"structure","members":{"RuleNumber":{"locationName":"ruleNumber","type":"integer"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"Egress":{"locationName":"egress","type":"boolean"},"CidrBlock":{"locationName":"cidrBlock"},"IcmpTypeCode":{"shape":"S4a","locationName":"icmpTypeCode"},"PortRange":{"shape":"S4b","locationName":"portRange"}}}},"Associations":{"locationName":"associationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"NetworkAclAssociationId":{"locationName":"networkAclAssociationId"},"NetworkAclId":{"locationName":"networkAclId"},"SubnetId":{"locationName":"subnetId"}}}},"Tags":{"shape":"Sa","locationName":"tagSet"}}},"S4a":{"type":"structure","members":{"Type":{"locationName":"type","type":"integer"},"Code":{"locationName":"code","type":"integer"}}},"S4b":{"type":"structure","members":{"From":{"locationName":"from","type":"integer"},"To":{"locationName":"to","type":"integer"}}},"S4g":{"type":"list","member":{"locationName":"SecurityGroupId"}},"S4h":{"type":"list","member":{"locationName":"item","type":"structure","required":["PrivateIpAddress"],"members":{"PrivateIpAddress":{"locationName":"privateIpAddress"},"Primary":{"locationName":"primary","type":"boolean"}}}},"S4k":{"type":"structure","members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"AvailabilityZone":{"locationName":"availabilityZone"},"Description":{"locationName":"description"},"OwnerId":{"locationName":"ownerId"},"RequesterId":{"locationName":"requesterId"},"RequesterManaged":{"locationName":"requesterManaged","type":"boolean"},"Status":{"locationName":"status"},"MacAddress":{"locationName":"macAddress"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateDnsName":{"locationName":"privateDnsName"},"SourceDestCheck":{"locationName":"sourceDestCheck","type":"boolean"},"Groups":{"shape":"S4m","locationName":"groupSet"},"Attachment":{"shape":"S4o","locationName":"attachment"},"Association":{"shape":"S4p","locationName":"association"},"TagSet":{"shape":"Sa","locationName":"tagSet"},"PrivateIpAddresses":{"locationName":"privateIpAddressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateDnsName":{"locationName":"privateDnsName"},"Primary":{"locationName":"primary","type":"boolean"},"Association":{"shape":"S4p","locationName":"association"}}}},"InterfaceType":{"locationName":"interfaceType"}}},"S4m":{"type":"list","member":{"locationName":"item","type":"structure","members":{"GroupName":{"locationName":"groupName"},"GroupId":{"locationName":"groupId"}}}},"S4o":{"type":"structure","members":{"AttachmentId":{"locationName":"attachmentId"},"InstanceId":{"locationName":"instanceId"},"InstanceOwnerId":{"locationName":"instanceOwnerId"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"Status":{"locationName":"status"},"AttachTime":{"locationName":"attachTime","type":"timestamp"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}},"S4p":{"type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"PublicDnsName":{"locationName":"publicDnsName"},"IpOwnerId":{"locationName":"ipOwnerId"},"AllocationId":{"locationName":"allocationId"},"AssociationId":{"locationName":"associationId"}}},"S53":{"type":"structure","members":{"RouteTableId":{"locationName":"routeTableId"},"VpcId":{"locationName":"vpcId"},"Routes":{"locationName":"routeSet","type":"list","member":{"locationName":"item","type":"structure","members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"DestinationPrefixListId":{"locationName":"destinationPrefixListId"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"InstanceOwnerId":{"locationName":"instanceOwnerId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"},"NatGatewayId":{"locationName":"natGatewayId"},"State":{"locationName":"state"},"Origin":{"locationName":"origin"}}}},"Associations":{"locationName":"associationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"RouteTableAssociationId":{"locationName":"routeTableAssociationId"},"RouteTableId":{"locationName":"routeTableId"},"SubnetId":{"locationName":"subnetId"},"Main":{"locationName":"main","type":"boolean"}}}},"Tags":{"shape":"Sa","locationName":"tagSet"},"PropagatingVgws":{"locationName":"propagatingVgwSet","type":"list","member":{"locationName":"item","type":"structure","members":{"GatewayId":{"locationName":"gatewayId"}}}}}},"S5f":{"type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"},"VolumeId":{"locationName":"volumeId"},"State":{"locationName":"status"},"StateMessage":{"locationName":"statusMessage"},"StartTime":{"locationName":"startTime","type":"timestamp"},"Progress":{"locationName":"progress"},"OwnerId":{"locationName":"ownerId"},"Description":{"locationName":"description"},"VolumeSize":{"locationName":"volumeSize","type":"integer"},"OwnerAlias":{"locationName":"ownerAlias"},"Tags":{"shape":"Sa","locationName":"tagSet"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"},"DataEncryptionKeyId":{"locationName":"dataEncryptionKeyId"}}},"S5j":{"type":"structure","members":{"OwnerId":{"locationName":"ownerId"},"Bucket":{"locationName":"bucket"},"Prefix":{"locationName":"prefix"},"State":{"locationName":"state"},"Fault":{"shape":"S5l","locationName":"fault"}}},"S5l":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"S5o":{"type":"structure","members":{"SubnetId":{"locationName":"subnetId"},"State":{"locationName":"state"},"VpcId":{"locationName":"vpcId"},"CidrBlock":{"locationName":"cidrBlock"},"AvailableIpAddressCount":{"locationName":"availableIpAddressCount","type":"integer"},"AvailabilityZone":{"locationName":"availabilityZone"},"DefaultForAz":{"locationName":"defaultForAz","type":"boolean"},"MapPublicIpOnLaunch":{"locationName":"mapPublicIpOnLaunch","type":"boolean"},"Tags":{"shape":"Sa","locationName":"tagSet"}}},"S5r":{"type":"list","member":{}},"S5t":{"type":"structure","members":{"VolumeId":{"locationName":"volumeId"},"Size":{"locationName":"size","type":"integer"},"SnapshotId":{"locationName":"snapshotId"},"AvailabilityZone":{"locationName":"availabilityZone"},"State":{"locationName":"status"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"Attachments":{"locationName":"attachmentSet","type":"list","member":{"shape":"Sy","locationName":"item"}},"Tags":{"shape":"Sa","locationName":"tagSet"},"VolumeType":{"locationName":"volumeType"},"Iops":{"locationName":"iops","type":"integer"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"}}},"S5z":{"type":"structure","members":{"VpcId":{"locationName":"vpcId"},"State":{"locationName":"state"},"CidrBlock":{"locationName":"cidrBlock"},"DhcpOptionsId":{"locationName":"dhcpOptionsId"},"Tags":{"shape":"Sa","locationName":"tagSet"},"InstanceTenancy":{"locationName":"instanceTenancy"},"IsDefault":{"locationName":"isDefault","type":"boolean"}}},"S63":{"type":"structure","members":{"VpcEndpointId":{"locationName":"vpcEndpointId"},"VpcId":{"locationName":"vpcId"},"ServiceName":{"locationName":"serviceName"},"State":{"locationName":"state"},"PolicyDocument":{"locationName":"policyDocument"},"RouteTableIds":{"shape":"S26","locationName":"routeTableIdSet"},"CreationTimestamp":{"locationName":"creationTimestamp","type":"timestamp"}}},"S6a":{"type":"structure","members":{"VpnConnectionId":{"locationName":"vpnConnectionId"},"State":{"locationName":"state"},"CustomerGatewayConfiguration":{"locationName":"customerGatewayConfiguration"},"Type":{"locationName":"type"},"CustomerGatewayId":{"locationName":"customerGatewayId"},"VpnGatewayId":{"locationName":"vpnGatewayId"},"Tags":{"shape":"Sa","locationName":"tagSet"},"VgwTelemetry":{"locationName":"vgwTelemetry","type":"list","member":{"locationName":"item","type":"structure","members":{"OutsideIpAddress":{"locationName":"outsideIpAddress"},"Status":{"locationName":"status"},"LastStatusChange":{"locationName":"lastStatusChange","type":"timestamp"},"StatusMessage":{"locationName":"statusMessage"},"AcceptedRouteCount":{"locationName":"acceptedRouteCount","type":"integer"}}}},"Options":{"locationName":"options","type":"structure","members":{"StaticRoutesOnly":{"locationName":"staticRoutesOnly","type":"boolean"}}},"Routes":{"locationName":"routes","type":"list","member":{"locationName":"item","type":"structure","members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"Source":{"locationName":"source"},"State":{"locationName":"state"}}}}}},"S6m":{"type":"structure","members":{"VpnGatewayId":{"locationName":"vpnGatewayId"},"State":{"locationName":"state"},"Type":{"locationName":"type"},"AvailabilityZone":{"locationName":"availabilityZone"},"VpcAttachments":{"locationName":"attachments","type":"list","member":{"shape":"S12","locationName":"item"}},"Tags":{"shape":"Sa","locationName":"tagSet"}}},"S7r":{"type":"list","member":{"locationName":"Filter","type":"structure","members":{"Name":{},"Values":{"shape":"S26","locationName":"Value"}}}},"S8a":{"type":"list","member":{"locationName":"InstanceId"}},"S8i":{"type":"structure","required":["ConversionTaskId","State"],"members":{"ConversionTaskId":{"locationName":"conversionTaskId"},"ExpirationTime":{"locationName":"expirationTime"},"ImportInstance":{"locationName":"importInstance","type":"structure","required":["Volumes"],"members":{"Volumes":{"locationName":"volumes","type":"list","member":{"locationName":"item","type":"structure","required":["BytesConverted","AvailabilityZone","Image","Volume","Status"],"members":{"BytesConverted":{"locationName":"bytesConverted","type":"long"},"AvailabilityZone":{"locationName":"availabilityZone"},"Image":{"shape":"S8m","locationName":"image"},"Volume":{"shape":"S8n","locationName":"volume"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Description":{"locationName":"description"}}}},"InstanceId":{"locationName":"instanceId"},"Platform":{"locationName":"platform"},"Description":{"locationName":"description"}}},"ImportVolume":{"locationName":"importVolume","type":"structure","required":["BytesConverted","AvailabilityZone","Image","Volume"],"members":{"BytesConverted":{"locationName":"bytesConverted","type":"long"},"AvailabilityZone":{"locationName":"availabilityZone"},"Description":{"locationName":"description"},"Image":{"shape":"S8m","locationName":"image"},"Volume":{"shape":"S8n","locationName":"volume"}}},"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"},"Tags":{"shape":"Sa","locationName":"tagSet"}}},"S8m":{"type":"structure","required":["Format","Size","ImportManifestUrl"],"members":{"Format":{"locationName":"format"},"Size":{"locationName":"size","type":"long"},"ImportManifestUrl":{"locationName":"importManifestUrl"},"Checksum":{"locationName":"checksum"}}},"S8n":{"type":"structure","required":["Id"],"members":{"Size":{"locationName":"size","type":"long"},"Id":{"locationName":"id"}}},"S98":{"type":"list","member":{"locationName":"item"}},"S9q":{"type":"list","member":{"locationName":"item","type":"structure","members":{"UserId":{"locationName":"userId"},"Group":{"locationName":"group"}}}},"S9t":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ProductCodeId":{"locationName":"productCode"},"ProductCodeType":{"locationName":"type"}}}},"S9w":{"type":"list","member":{"shape":"S3d","locationName":"item"}},"S9z":{"type":"list","member":{"locationName":"Owner"}},"Sa7":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"Sac":{"type":"list","member":{"locationName":"ImportTaskId"}},"Sag":{"type":"list","member":{"locationName":"item","type":"structure","members":{"DiskImageSize":{"locationName":"diskImageSize","type":"double"},"Description":{"locationName":"description"},"Format":{"locationName":"format"},"Url":{"locationName":"url"},"UserBucket":{"shape":"Sai","locationName":"userBucket"},"DeviceName":{"locationName":"deviceName"},"SnapshotId":{"locationName":"snapshotId"},"Progress":{"locationName":"progress"},"StatusMessage":{"locationName":"statusMessage"},"Status":{"locationName":"status"}}}},"Sai":{"type":"structure","members":{"S3Bucket":{"locationName":"s3Bucket"},"S3Key":{"locationName":"s3Key"}}},"San":{"type":"structure","members":{"DiskImageSize":{"locationName":"diskImageSize","type":"double"},"Description":{"locationName":"description"},"Format":{"locationName":"format"},"Url":{"locationName":"url"},"UserBucket":{"shape":"Sai","locationName":"userBucket"},"SnapshotId":{"locationName":"snapshotId"},"Progress":{"locationName":"progress"},"StatusMessage":{"locationName":"statusMessage"},"Status":{"locationName":"status"}}},"Sar":{"type":"structure","members":{"Value":{"locationName":"value","type":"boolean"}}},"Sas":{"type":"list","member":{"locationName":"item","type":"structure","members":{"DeviceName":{"locationName":"deviceName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"VolumeId":{"locationName":"volumeId"},"Status":{"locationName":"status"},"AttachTime":{"locationName":"attachTime","type":"timestamp"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}}}}},"Sb2":{"type":"structure","members":{"Code":{"locationName":"code","type":"integer"},"Name":{"locationName":"name"}}},"Sb4":{"type":"structure","members":{"Status":{"locationName":"status"},"Details":{"locationName":"details","type":"list","member":{"locationName":"item","type":"structure","members":{"Name":{"locationName":"name"},"Status":{"locationName":"status"},"ImpairedSince":{"locationName":"impairedSince","type":"timestamp"}}}}}},"Sbd":{"type":"structure","members":{"ReservationId":{"locationName":"reservationId"},"OwnerId":{"locationName":"ownerId"},"RequesterId":{"locationName":"requesterId"},"Groups":{"shape":"S4m","locationName":"groupSet"},"Instances":{"locationName":"instancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"ImageId":{"locationName":"imageId"},"State":{"shape":"Sb2","locationName":"instanceState"},"PrivateDnsName":{"locationName":"privateDnsName"},"PublicDnsName":{"locationName":"dnsName"},"StateTransitionReason":{"locationName":"reason"},"KeyName":{"locationName":"keyName"},"AmiLaunchIndex":{"locationName":"amiLaunchIndex","type":"integer"},"ProductCodes":{"shape":"S9t","locationName":"productCodes"},"InstanceType":{"locationName":"instanceType"},"LaunchTime":{"locationName":"launchTime","type":"timestamp"},"Placement":{"shape":"Sbh","locationName":"placement"},"KernelId":{"locationName":"kernelId"},"RamdiskId":{"locationName":"ramdiskId"},"Platform":{"locationName":"platform"},"Monitoring":{"shape":"Sbi","locationName":"monitoring"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PublicIpAddress":{"locationName":"ipAddress"},"StateReason":{"shape":"Sa7","locationName":"stateReason"},"Architecture":{"locationName":"architecture"},"RootDeviceType":{"locationName":"rootDeviceType"},"RootDeviceName":{"locationName":"rootDeviceName"},"BlockDeviceMappings":{"shape":"Sas","locationName":"blockDeviceMapping"},"VirtualizationType":{"locationName":"virtualizationType"},"InstanceLifecycle":{"locationName":"instanceLifecycle"},"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"ClientToken":{"locationName":"clientToken"},"Tags":{"shape":"Sa","locationName":"tagSet"},"SecurityGroups":{"shape":"S4m","locationName":"groupSet"},"SourceDestCheck":{"locationName":"sourceDestCheck","type":"boolean"},"Hypervisor":{"locationName":"hypervisor"},"NetworkInterfaces":{"locationName":"networkInterfaceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"Description":{"locationName":"description"},"OwnerId":{"locationName":"ownerId"},"Status":{"locationName":"status"},"MacAddress":{"locationName":"macAddress"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateDnsName":{"locationName":"privateDnsName"},"SourceDestCheck":{"locationName":"sourceDestCheck","type":"boolean"},"Groups":{"shape":"S4m","locationName":"groupSet"},"Attachment":{"locationName":"attachment","type":"structure","members":{"AttachmentId":{"locationName":"attachmentId"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"Status":{"locationName":"status"},"AttachTime":{"locationName":"attachTime","type":"timestamp"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}},"Association":{"shape":"Sbo","locationName":"association"},"PrivateIpAddresses":{"locationName":"privateIpAddressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateDnsName":{"locationName":"privateDnsName"},"Primary":{"locationName":"primary","type":"boolean"},"Association":{"shape":"Sbo","locationName":"association"}}}}}}},"IamInstanceProfile":{"locationName":"iamInstanceProfile","type":"structure","members":{"Arn":{"locationName":"arn"},"Id":{"locationName":"id"}}},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"SriovNetSupport":{"locationName":"sriovNetSupport"}}}}}},"Sbh":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"GroupName":{"locationName":"groupName"},"Tenancy":{"locationName":"tenancy"},"HostId":{"locationName":"hostId"},"Affinity":{"locationName":"affinity"}}},"Sbi":{"type":"structure","members":{"State":{"locationName":"state"}}},"Sbo":{"type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"PublicDnsName":{"locationName":"publicDnsName"},"IpOwnerId":{"locationName":"ipOwnerId"}}},"Scy":{"type":"list","member":{"locationName":"ReservedInstancesId"}},"Sd6":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Frequency":{"locationName":"frequency"},"Amount":{"locationName":"amount","type":"double"}}}},"Sdk":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Platform":{"locationName":"platform"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"InstanceType":{"locationName":"instanceType"}}},"Se2":{"type":"structure","members":{"Frequency":{"locationName":"frequency"},"Interval":{"locationName":"interval","type":"integer"},"OccurrenceDaySet":{"locationName":"occurrenceDaySet","type":"list","member":{"locationName":"item","type":"integer"}},"OccurrenceRelativeToEnd":{"locationName":"occurrenceRelativeToEnd","type":"boolean"},"OccurrenceUnit":{"locationName":"occurrenceUnit"}}},"Se9":{"type":"structure","members":{"ScheduledInstanceId":{"locationName":"scheduledInstanceId"},"InstanceType":{"locationName":"instanceType"},"Platform":{"locationName":"platform"},"NetworkPlatform":{"locationName":"networkPlatform"},"AvailabilityZone":{"locationName":"availabilityZone"},"SlotDurationInHours":{"locationName":"slotDurationInHours","type":"integer"},"Recurrence":{"shape":"Se2","locationName":"recurrence"},"PreviousSlotEndTime":{"locationName":"previousSlotEndTime","type":"timestamp"},"NextSlotStartTime":{"locationName":"nextSlotStartTime","type":"timestamp"},"HourlyPrice":{"locationName":"hourlyPrice"},"TotalScheduledInstanceHours":{"locationName":"totalScheduledInstanceHours","type":"integer"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"TermStartDate":{"locationName":"termStartDate","type":"timestamp"},"TermEndDate":{"locationName":"termEndDate","type":"timestamp"},"CreateDate":{"locationName":"createDate","type":"timestamp"}}},"Seb":{"type":"list","member":{"locationName":"GroupName"}},"Sei":{"type":"list","member":{"locationName":"item","type":"structure","members":{"UserId":{"locationName":"userId"},"Group":{"locationName":"group"}}}},"Sf5":{"type":"structure","required":["SpotPrice","TargetCapacity","IamFleetRole","LaunchSpecifications"],"members":{"ClientToken":{"locationName":"clientToken"},"SpotPrice":{"locationName":"spotPrice"},"TargetCapacity":{"locationName":"targetCapacity","type":"integer"},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"TerminateInstancesWithExpiration":{"locationName":"terminateInstancesWithExpiration","type":"boolean"},"IamFleetRole":{"locationName":"iamFleetRole"},"LaunchSpecifications":{"locationName":"launchSpecifications","type":"list","member":{"locationName":"item","type":"structure","members":{"ImageId":{"locationName":"imageId"},"KeyName":{"locationName":"keyName"},"SecurityGroups":{"shape":"S4m","locationName":"groupSet"},"UserData":{"locationName":"userData"},"AddressingType":{"locationName":"addressingType"},"InstanceType":{"locationName":"instanceType"},"Placement":{"shape":"Sf8","locationName":"placement"},"KernelId":{"locationName":"kernelId"},"RamdiskId":{"locationName":"ramdiskId"},"BlockDeviceMappings":{"shape":"S9w","locationName":"blockDeviceMapping"},"Monitoring":{"locationName":"monitoring","type":"structure","members":{"Enabled":{"locationName":"enabled","type":"boolean"}}},"SubnetId":{"locationName":"subnetId"},"NetworkInterfaces":{"shape":"Sfa","locationName":"networkInterfaceSet"},"IamInstanceProfile":{"shape":"Sfc","locationName":"iamInstanceProfile"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"WeightedCapacity":{"locationName":"weightedCapacity","type":"double"},"SpotPrice":{"locationName":"spotPrice"}}}},"ExcessCapacityTerminationPolicy":{"locationName":"excessCapacityTerminationPolicy"},"AllocationStrategy":{"locationName":"allocationStrategy"}}},"Sf8":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"GroupName":{"locationName":"groupName"}}},"Sfa":{"type":"list","member":{"locationName":"item","type":"structure","members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"SubnetId":{"locationName":"subnetId"},"Description":{"locationName":"description"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"Groups":{"shape":"S4g","locationName":"SecurityGroupId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"PrivateIpAddresses":{"shape":"S4h","locationName":"privateIpAddressesSet","queryName":"PrivateIpAddresses"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"},"AssociatePublicIpAddress":{"locationName":"associatePublicIpAddress","type":"boolean"}}}},"Sfc":{"type":"structure","members":{"Arn":{"locationName":"arn"},"Name":{"locationName":"name"}}},"Sfh":{"type":"list","member":{"locationName":"item","type":"structure","members":{"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"SpotPrice":{"locationName":"spotPrice"},"Type":{"locationName":"type"},"State":{"locationName":"state"},"Fault":{"shape":"S5l","locationName":"fault"},"Status":{"locationName":"status","type":"structure","members":{"Code":{"locationName":"code"},"UpdateTime":{"locationName":"updateTime","type":"timestamp"},"Message":{"locationName":"message"}}},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"LaunchGroup":{"locationName":"launchGroup"},"AvailabilityZoneGroup":{"locationName":"availabilityZoneGroup"},"LaunchSpecification":{"locationName":"launchSpecification","type":"structure","members":{"ImageId":{"locationName":"imageId"},"KeyName":{"locationName":"keyName"},"SecurityGroups":{"shape":"S4m","locationName":"groupSet"},"UserData":{"locationName":"userData"},"AddressingType":{"locationName":"addressingType"},"InstanceType":{"locationName":"instanceType"},"Placement":{"shape":"Sf8","locationName":"placement"},"KernelId":{"locationName":"kernelId"},"RamdiskId":{"locationName":"ramdiskId"},"BlockDeviceMappings":{"shape":"S9w","locationName":"blockDeviceMapping"},"SubnetId":{"locationName":"subnetId"},"NetworkInterfaces":{"shape":"Sfa","locationName":"networkInterfaceSet"},"IamInstanceProfile":{"shape":"Sfc","locationName":"iamInstanceProfile"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"Monitoring":{"shape":"Sfn","locationName":"monitoring"}}},"InstanceId":{"locationName":"instanceId"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"ProductDescription":{"locationName":"productDescription"},"BlockDurationMinutes":{"locationName":"blockDurationMinutes","type":"integer"},"ActualBlockHourlyPrice":{"locationName":"actualBlockHourlyPrice"},"Tags":{"shape":"Sa","locationName":"tagSet"},"LaunchedAvailabilityZone":{"locationName":"launchedAvailabilityZone"}}}},"Sfn":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"locationName":"enabled","type":"boolean"}}},"Sg7":{"type":"list","member":{"locationName":"VolumeId"}},"Sgr":{"type":"list","member":{"locationName":"VpcId"}},"Sib":{"type":"structure","members":{"S3Bucket":{},"S3Key":{}}},"Sic":{"type":"structure","members":{"UploadStart":{"type":"timestamp"},"UploadEnd":{"type":"timestamp"},"UploadSize":{"type":"double"},"Comment":{}}},"Sig":{"type":"list","member":{"locationName":"SecurityGroup"}},"Sil":{"type":"structure","required":["Format","Bytes","ImportManifestUrl"],"members":{"Format":{"locationName":"format"},"Bytes":{"locationName":"bytes","type":"long"},"ImportManifestUrl":{"locationName":"importManifestUrl"}}},"Sim":{"type":"structure","required":["Size"],"members":{"Size":{"locationName":"size","type":"long"}}},"Six":{"type":"list","member":{"shape":"S39","locationName":"item"}},"Sj1":{"type":"list","member":{"locationName":"UserId"}},"Sju":{"type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"Monitoring":{"shape":"Sbi","locationName":"monitoring"}}}},"Sl6":{"type":"list","member":{"locationName":"SecurityGroupId"}},"Sll":{"type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"CurrentState":{"shape":"Sb2","locationName":"currentState"},"PreviousState":{"shape":"Sb2","locationName":"previousState"}}}}},"paginators":{"DescribeAccountAttributes":{"result_key":"AccountAttributes"},"DescribeAddresses":{"result_key":"Addresses"},"DescribeAvailabilityZones":{"result_key":"AvailabilityZones"},"DescribeBundleTasks":{"result_key":"BundleTasks"},"DescribeConversionTasks":{"result_key":"ConversionTasks"},"DescribeCustomerGateways":{"result_key":"CustomerGateways"},"DescribeDhcpOptions":{"result_key":"DhcpOptions"},"DescribeExportTasks":{"result_key":"ExportTasks"},"DescribeImages":{"result_key":"Images"},"DescribeInstanceStatus":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"InstanceStatuses"},"DescribeInstances":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"Reservations"},"DescribeInternetGateways":{"result_key":"InternetGateways"},"DescribeKeyPairs":{"result_key":"KeyPairs"},"DescribeNetworkAcls":{"result_key":"NetworkAcls"},"DescribeNetworkInterfaces":{"result_key":"NetworkInterfaces"},"DescribePlacementGroups":{"result_key":"PlacementGroups"},"DescribeRegions":{"result_key":"Regions"},"DescribeReservedInstances":{"result_key":"ReservedInstances"},"DescribeReservedInstancesListings":{"result_key":"ReservedInstancesListings"},"DescribeReservedInstancesOfferings":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"ReservedInstancesOfferings"},"DescribeReservedInstancesModifications":{"input_token":"NextToken","output_token":"NextToken","result_key":"ReservedInstancesModifications"},"DescribeRouteTables":{"result_key":"RouteTables"},"DescribeSecurityGroups":{"result_key":"SecurityGroups"},"DescribeSnapshots":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"Snapshots"},"DescribeSpotInstanceRequests":{"result_key":"SpotInstanceRequests"},"DescribeSpotPriceHistory":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"SpotPriceHistory"},"DescribeSubnets":{"result_key":"Subnets"},"DescribeTags":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"Tags"},"DescribeVolumeStatus":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"VolumeStatuses"},"DescribeVolumes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"Volumes"},"DescribeVpcs":{"result_key":"Vpcs"},"DescribeVpcPeeringConnections":{"result_key":"VpcPeeringConnections"},"DescribeVpnConnections":{"result_key":"VpnConnections"},"DescribeVpnGateways":{"result_key":"VpnGateways"}},"waiters":{"__default__":{"interval":15,"max_attempts":40,"acceptor_type":"output"},"__InstanceState":{"operation":"DescribeInstances","acceptor_path":"Reservations[].Instances[].State.Name"},"__InstanceStatus":{"operation":"DescribeInstanceStatus","success_value":"ok"},"SystemStatusOk":{"extends":"__InstanceStatus","acceptor_path":"InstanceStatuses[].SystemStatus.Status"},"InstanceStatusOk":{"extends":"__InstanceStatus","acceptor_path":"InstanceStatuses[].InstanceStatus.Status"},"ImageAvailable":{"operation":"DescribeImages","acceptor_path":"Images[].State","success_value":"available","failure_value":["failed"]},"InstanceRunning":{"extends":"__InstanceState","success_value":"running","failure_value":["shutting-down","terminated","stopping"]},"InstanceStopped":{"extends":"__InstanceState","success_value":"stopped","failure_value":["pending","terminated"]},"InstanceTerminated":{"extends":"__InstanceState","success_value":"terminated","failure_value":["pending","stopping"]},"__ExportTaskState":{"operation":"DescribeExportTasks","acceptor_path":"ExportTasks[].State"},"ExportTaskCompleted":{"extends":"__ExportTaskState","success_value":"completed"},"ExportTaskCancelled":{"extends":"__ExportTaskState","success_value":"cancelled"},"SnapshotCompleted":{"operation":"DescribeSnapshots","success_path":"Snapshots[].State","success_value":"completed"},"SubnetAvailable":{"operation":"DescribeSubnets","success_path":"Subnets[].State","success_value":"available"},"__VolumeStatus":{"operation":"DescribeVolumes","acceptor_path":"Volumes[].State"},"VolumeAvailable":{"extends":"__VolumeStatus","success_value":"available","failure_value":["deleted"]},"VolumeInUse":{"extends":"__VolumeStatus","success_value":"in-use","failure_value":["deleted"]},"VolumeDeleted":{"extends":"__VolumeStatus","success_type":"error","success_value":"InvalidVolume.NotFound"},"VpcAvailable":{"operation":"DescribeVpcs","success_path":"Vpcs[].State","success_value":"available"},"__VpnConnectionState":{"operation":"DescribeVpnConnections","acceptor_path":"VpnConnections[].State"},"VpnConnectionAvailable":{"extends":"__VpnConnectionState","success_value":"available","failure_value":["deleting","deleted"]},"VpnConnectionDeleted":{"extends":"__VpnConnectionState","success_value":"deleted","failure_value":["pending"]},"BundleTaskComplete":{"operation":"DescribeBundleTasks","acceptor_path":"BundleTasks[].State","success_value":"complete","failure_value":["failed"]},"__ConversionTaskState":{"operation":"DescribeConversionTasks","acceptor_path":"ConversionTasks[].State"},"ConversionTaskCompleted":{"extends":"__ConversionTaskState","success_value":"completed","failure_value":["cancelled","cancelling"]},"ConversionTaskCancelled":{"extends":"__ConversionTaskState","success_value":"cancelled"},"__CustomerGatewayState":{"operation":"DescribeCustomerGateways","acceptor_path":"CustomerGateways[].State"},"CustomerGatewayAvailable":{"extends":"__CustomerGatewayState","success_value":"available","failure_value":["deleted","deleting"]},"ConversionTaskDeleted":{"extends":"__CustomerGatewayState","success_value":"deleted"},"__SpotInstanceRequestState":{"operation":"DescribeSpotInstanceRequests","acceptor_path":"SpotInstanceRequests[].Status.Code"},"SpotInstanceRequestFulfilled":{"extends":"__SpotInstanceRequestState","success_value":"fulfilled","failure_value":["schedule-expired","canceled-before-fulfillment","bad-parameters","system-error"]}}};
AWS.apiLoader.services['elastictranscoder'] = {};                                                                      // 77
AWS.ElasticTranscoder = AWS.Service.defineService('elastictranscoder', [ '2012-09-25' ]);                              // 78
                                                                                                                       // 79
AWS.apiLoader.services['elastictranscoder']['2012-09-25'] = {"version":"2.0","metadata":{"apiVersion":"2012-09-25","endpointPrefix":"elastictranscoder","serviceFullName":"Amazon Elastic Transcoder","signatureVersion":"v4","protocol":"rest-json"},"operations":{"CancelJob":{"http":{"method":"DELETE","requestUri":"/2012-09-25/jobs/{Id}","responseCode":202},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"CreateJob":{"http":{"requestUri":"/2012-09-25/jobs","responseCode":201},"input":{"type":"structure","required":["PipelineId","Input"],"members":{"PipelineId":{},"Input":{"shape":"S5"},"Output":{"shape":"Sk"},"Outputs":{"type":"list","member":{"shape":"Sk"}},"OutputKeyPrefix":{},"Playlists":{"type":"list","member":{"type":"structure","members":{"Name":{},"Format":{},"OutputKeys":{"shape":"S1i"},"HlsContentProtection":{"shape":"S1j"},"PlayReadyDrm":{"shape":"S1n"}}}},"UserMetadata":{"shape":"S1s"}}},"output":{"type":"structure","members":{"Job":{"shape":"S1v"}}}},"CreatePipeline":{"http":{"requestUri":"/2012-09-25/pipelines","responseCode":201},"input":{"type":"structure","required":["Name","InputBucket","Role"],"members":{"Name":{},"InputBucket":{},"OutputBucket":{},"Role":{},"AwsKmsKeyArn":{},"Notifications":{"shape":"S27"},"ContentConfig":{"shape":"S29"},"ThumbnailConfig":{"shape":"S29"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2i"},"Warnings":{"shape":"S2k"}}}},"CreatePreset":{"http":{"requestUri":"/2012-09-25/presets","responseCode":201},"input":{"type":"structure","required":["Name","Container"],"members":{"Name":{},"Description":{},"Container":{},"Video":{"shape":"S2o"},"Audio":{"shape":"S34"},"Thumbnails":{"shape":"S3f"}}},"output":{"type":"structure","members":{"Preset":{"shape":"S3j"},"Warning":{}}}},"DeletePipeline":{"http":{"method":"DELETE","requestUri":"/2012-09-25/pipelines/{Id}","responseCode":202},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"DeletePreset":{"http":{"method":"DELETE","requestUri":"/2012-09-25/presets/{Id}","responseCode":202},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"ListJobsByPipeline":{"http":{"method":"GET","requestUri":"/2012-09-25/jobsByPipeline/{PipelineId}"},"input":{"type":"structure","required":["PipelineId"],"members":{"PipelineId":{"location":"uri","locationName":"PipelineId"},"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Jobs":{"shape":"S3s"},"NextPageToken":{}}}},"ListJobsByStatus":{"http":{"method":"GET","requestUri":"/2012-09-25/jobsByStatus/{Status}"},"input":{"type":"structure","required":["Status"],"members":{"Status":{"location":"uri","locationName":"Status"},"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Jobs":{"shape":"S3s"},"NextPageToken":{}}}},"ListPipelines":{"http":{"method":"GET","requestUri":"/2012-09-25/pipelines"},"input":{"type":"structure","members":{"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Pipelines":{"type":"list","member":{"shape":"S2i"}},"NextPageToken":{}}}},"ListPresets":{"http":{"method":"GET","requestUri":"/2012-09-25/presets"},"input":{"type":"structure","members":{"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Presets":{"type":"list","member":{"shape":"S3j"}},"NextPageToken":{}}}},"ReadJob":{"http":{"method":"GET","requestUri":"/2012-09-25/jobs/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Job":{"shape":"S1v"}}}},"ReadPipeline":{"http":{"method":"GET","requestUri":"/2012-09-25/pipelines/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2i"},"Warnings":{"shape":"S2k"}}}},"ReadPreset":{"http":{"method":"GET","requestUri":"/2012-09-25/presets/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Preset":{"shape":"S3j"}}}},"TestRole":{"http":{"requestUri":"/2012-09-25/roleTests","responseCode":200},"input":{"type":"structure","required":["Role","InputBucket","OutputBucket","Topics"],"members":{"Role":{},"InputBucket":{},"OutputBucket":{},"Topics":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"Success":{},"Messages":{"type":"list","member":{}}}}},"UpdatePipeline":{"http":{"method":"PUT","requestUri":"/2012-09-25/pipelines/{Id}","responseCode":200},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"Name":{},"InputBucket":{},"Role":{},"AwsKmsKeyArn":{},"Notifications":{"shape":"S27"},"ContentConfig":{"shape":"S29"},"ThumbnailConfig":{"shape":"S29"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2i"},"Warnings":{"shape":"S2k"}}}},"UpdatePipelineNotifications":{"http":{"requestUri":"/2012-09-25/pipelines/{Id}/notifications"},"input":{"type":"structure","required":["Id","Notifications"],"members":{"Id":{"location":"uri","locationName":"Id"},"Notifications":{"shape":"S27"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2i"}}}},"UpdatePipelineStatus":{"http":{"requestUri":"/2012-09-25/pipelines/{Id}/status"},"input":{"type":"structure","required":["Id","Status"],"members":{"Id":{"location":"uri","locationName":"Id"},"Status":{}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2i"}}}}},"shapes":{"S5":{"type":"structure","members":{"Key":{},"FrameRate":{},"Resolution":{},"AspectRatio":{},"Interlaced":{},"Container":{},"Encryption":{"shape":"Sc"},"DetectedProperties":{"type":"structure","members":{"Width":{"type":"integer"},"Height":{"type":"integer"},"FrameRate":{},"FileSize":{"type":"long"},"DurationMillis":{"type":"long"}}}}},"Sc":{"type":"structure","members":{"Mode":{},"Key":{},"KeyMd5":{},"InitializationVector":{}}},"Sk":{"type":"structure","members":{"Key":{},"ThumbnailPattern":{},"ThumbnailEncryption":{"shape":"Sc"},"Rotate":{},"PresetId":{},"SegmentDuration":{},"Watermarks":{"shape":"Sn"},"AlbumArt":{"shape":"Sr"},"Composition":{"shape":"Sz"},"Captions":{"shape":"S13"},"Encryption":{"shape":"Sc"}}},"Sn":{"type":"list","member":{"type":"structure","members":{"PresetWatermarkId":{},"InputKey":{},"Encryption":{"shape":"Sc"}}}},"Sr":{"type":"structure","members":{"MergePolicy":{},"Artwork":{"type":"list","member":{"type":"structure","members":{"InputKey":{},"MaxWidth":{},"MaxHeight":{},"SizingPolicy":{},"PaddingPolicy":{},"AlbumArtFormat":{},"Encryption":{"shape":"Sc"}}}}}},"Sz":{"type":"list","member":{"type":"structure","members":{"TimeSpan":{"type":"structure","members":{"StartTime":{},"Duration":{}}}}}},"S13":{"type":"structure","members":{"MergePolicy":{},"CaptionSources":{"type":"list","member":{"type":"structure","members":{"Key":{},"Language":{},"TimeOffset":{},"Label":{},"Encryption":{"shape":"Sc"}}}},"CaptionFormats":{"type":"list","member":{"type":"structure","members":{"Format":{},"Pattern":{},"Encryption":{"shape":"Sc"}}}}}},"S1i":{"type":"list","member":{}},"S1j":{"type":"structure","members":{"Method":{},"Key":{},"KeyMd5":{},"InitializationVector":{},"LicenseAcquisitionUrl":{},"KeyStoragePolicy":{}}},"S1n":{"type":"structure","members":{"Format":{},"Key":{},"KeyMd5":{},"KeyId":{},"InitializationVector":{},"LicenseAcquisitionUrl":{}}},"S1s":{"type":"map","key":{},"value":{}},"S1v":{"type":"structure","members":{"Id":{},"Arn":{},"PipelineId":{},"Input":{"shape":"S5"},"Output":{"shape":"S1w"},"Outputs":{"type":"list","member":{"shape":"S1w"}},"OutputKeyPrefix":{},"Playlists":{"type":"list","member":{"type":"structure","members":{"Name":{},"Format":{},"OutputKeys":{"shape":"S1i"},"HlsContentProtection":{"shape":"S1j"},"PlayReadyDrm":{"shape":"S1n"},"Status":{},"StatusDetail":{}}}},"Status":{},"UserMetadata":{"shape":"S1s"},"Timing":{"type":"structure","members":{"SubmitTimeMillis":{"type":"long"},"StartTimeMillis":{"type":"long"},"FinishTimeMillis":{"type":"long"}}}}},"S1w":{"type":"structure","members":{"Id":{},"Key":{},"ThumbnailPattern":{},"ThumbnailEncryption":{"shape":"Sc"},"Rotate":{},"PresetId":{},"SegmentDuration":{},"Status":{},"StatusDetail":{},"Duration":{"type":"long"},"Width":{"type":"integer"},"Height":{"type":"integer"},"FrameRate":{},"FileSize":{"type":"long"},"DurationMillis":{"type":"long"},"Watermarks":{"shape":"Sn"},"AlbumArt":{"shape":"Sr"},"Composition":{"shape":"Sz"},"Captions":{"shape":"S13"},"Encryption":{"shape":"Sc"},"AppliedColorSpaceConversion":{}}},"S27":{"type":"structure","members":{"Progressing":{},"Completed":{},"Warning":{},"Error":{}}},"S29":{"type":"structure","members":{"Bucket":{},"StorageClass":{},"Permissions":{"type":"list","member":{"type":"structure","members":{"GranteeType":{},"Grantee":{},"Access":{"type":"list","member":{}}}}}}},"S2i":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"Status":{},"InputBucket":{},"OutputBucket":{},"Role":{},"AwsKmsKeyArn":{},"Notifications":{"shape":"S27"},"ContentConfig":{"shape":"S29"},"ThumbnailConfig":{"shape":"S29"}}},"S2k":{"type":"list","member":{"type":"structure","members":{"Code":{},"Message":{}}}},"S2o":{"type":"structure","members":{"Codec":{},"CodecOptions":{"type":"map","key":{},"value":{}},"KeyframesMaxDist":{},"FixedGOP":{},"BitRate":{},"FrameRate":{},"MaxFrameRate":{},"Resolution":{},"AspectRatio":{},"MaxWidth":{},"MaxHeight":{},"DisplayAspectRatio":{},"SizingPolicy":{},"PaddingPolicy":{},"Watermarks":{"type":"list","member":{"type":"structure","members":{"Id":{},"MaxWidth":{},"MaxHeight":{},"SizingPolicy":{},"HorizontalAlign":{},"HorizontalOffset":{},"VerticalAlign":{},"VerticalOffset":{},"Opacity":{},"Target":{}}}}}},"S34":{"type":"structure","members":{"Codec":{},"SampleRate":{},"BitRate":{},"Channels":{},"AudioPackingMode":{},"CodecOptions":{"type":"structure","members":{"Profile":{},"BitDepth":{},"BitOrder":{},"Signed":{}}}}},"S3f":{"type":"structure","members":{"Format":{},"Interval":{},"Resolution":{},"AspectRatio":{},"MaxWidth":{},"MaxHeight":{},"SizingPolicy":{},"PaddingPolicy":{}}},"S3j":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"Description":{},"Container":{},"Audio":{"shape":"S34"},"Video":{"shape":"S2o"},"Thumbnails":{"shape":"S3f"},"Type":{}}},"S3s":{"type":"list","member":{"shape":"S1v"}}},"paginators":{"ListJobsByPipeline":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Jobs"},"ListJobsByStatus":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Jobs"},"ListPipelines":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Pipelines"},"ListPresets":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Presets"}},"waiters":{"JobComplete":{"operation":"ReadJob","success_type":"output","success_path":"Job.Status","interval":30,"max_attempts":120,"success_value":"Complete","failure_value":["Canceled","Error"]}}};
AWS.apiLoader.services['firehose'] = {};                                                                               // 81
AWS.Firehose = AWS.Service.defineService('firehose', [ '2015-08-04' ]);                                                // 82
                                                                                                                       // 83
AWS.apiLoader.services['firehose']['2015-08-04'] = {"version":"2.0","metadata":{"apiVersion":"2015-08-04","endpointPrefix":"firehose","jsonVersion":"1.1","serviceAbbreviation":"Firehose","serviceFullName":"0","signatureVersion":"v4","targetPrefix":"Firehose_20150804","protocol":"json"},"operations":{"CreateDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"S3DestinationConfiguration":{"shape":"S3"},"RedshiftDestinationConfiguration":{"type":"structure","required":["RoleARN","ClusterJDBCURL","CopyCommand","Username","Password","S3Configuration"],"members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"Sh"},"Username":{"shape":"Sl"},"Password":{"shape":"Sm"},"S3Configuration":{"shape":"S3"}}}}},"output":{"type":"structure","members":{"DeliveryStreamARN":{}}},"http":{}},"DeleteDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{}}},"output":{"type":"structure","members":{}},"http":{}},"DescribeDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"Limit":{"type":"integer"},"ExclusiveStartDestinationId":{}}},"output":{"type":"structure","required":["DeliveryStreamDescription"],"members":{"DeliveryStreamDescription":{"type":"structure","required":["DeliveryStreamName","DeliveryStreamARN","DeliveryStreamStatus","VersionId","Destinations","HasMoreDestinations"],"members":{"DeliveryStreamName":{},"DeliveryStreamARN":{},"DeliveryStreamStatus":{},"VersionId":{},"CreateTimestamp":{"type":"timestamp"},"LastUpdateTimestamp":{"type":"timestamp"},"Destinations":{"type":"list","member":{"type":"structure","required":["DestinationId"],"members":{"DestinationId":{},"S3DestinationDescription":{"shape":"S11"},"RedshiftDestinationDescription":{"type":"structure","required":["RoleARN","ClusterJDBCURL","CopyCommand","Username","S3DestinationDescription"],"members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"Sh"},"Username":{"shape":"Sl"},"S3DestinationDescription":{"shape":"S11"}}}}}},"HasMoreDestinations":{"type":"boolean"}}}}},"http":{}},"ListDeliveryStreams":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"ExclusiveStartDeliveryStreamName":{}}},"output":{"type":"structure","required":["DeliveryStreamNames","HasMoreDeliveryStreams"],"members":{"DeliveryStreamNames":{"type":"list","member":{}},"HasMoreDeliveryStreams":{"type":"boolean"}}},"http":{}},"PutRecord":{"input":{"type":"structure","required":["DeliveryStreamName","Record"],"members":{"DeliveryStreamName":{},"Record":{"shape":"S19"}}},"output":{"type":"structure","required":["RecordId"],"members":{"RecordId":{}}},"http":{}},"PutRecordBatch":{"input":{"type":"structure","required":["DeliveryStreamName","Records"],"members":{"DeliveryStreamName":{},"Records":{"type":"list","member":{"shape":"S19"}}}},"output":{"type":"structure","required":["FailedPutCount","RequestResponses"],"members":{"FailedPutCount":{"type":"integer"},"RequestResponses":{"type":"list","member":{"type":"structure","members":{"RecordId":{},"ErrorCode":{},"ErrorMessage":{}}}}}},"http":{}},"UpdateDestination":{"input":{"type":"structure","required":["DeliveryStreamName","CurrentDeliveryStreamVersionId","DestinationId"],"members":{"DeliveryStreamName":{},"CurrentDeliveryStreamVersionId":{},"DestinationId":{},"S3DestinationUpdate":{"shape":"S1m"},"RedshiftDestinationUpdate":{"type":"structure","members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"Sh"},"Username":{"shape":"Sl"},"Password":{"shape":"Sm"},"S3Update":{"shape":"S1m"}}}}},"output":{"type":"structure","members":{}},"http":{}}},"shapes":{"S3":{"type":"structure","required":["RoleARN","BucketARN"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"BufferingHints":{"shape":"S7"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Sb"}}},"S7":{"type":"structure","members":{"SizeInMBs":{"type":"integer"},"IntervalInSeconds":{"type":"integer"}}},"Sb":{"type":"structure","members":{"NoEncryptionConfig":{},"KMSEncryptionConfig":{"type":"structure","required":["AWSKMSKeyARN"],"members":{"AWSKMSKeyARN":{}}}}},"Sh":{"type":"structure","required":["DataTableName"],"members":{"DataTableName":{},"DataTableColumns":{},"CopyOptions":{}}},"Sl":{"type":"string","sensitive":true},"Sm":{"type":"string","sensitive":true},"S11":{"type":"structure","required":["RoleARN","BucketARN","BufferingHints","CompressionFormat","EncryptionConfiguration"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"BufferingHints":{"shape":"S7"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Sb"}}},"S19":{"type":"structure","required":["Data"],"members":{"Data":{"type":"blob"}}},"S1m":{"type":"structure","members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"BufferingHints":{"shape":"S7"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Sb"}}}},"examples":{}};
AWS.apiLoader.services['inspector'] = {};                                                                              // 85
AWS.Inspector = AWS.Service.defineService('inspector', [ '2015-08-18' ]);                                              // 86
                                                                                                                       // 87
AWS.apiLoader.services['inspector']['2015-08-18'] = {"version":"2.0","metadata":{"apiVersion":"2015-08-18","endpointPrefix":"inspector","jsonVersion":"1.1","serviceFullName":"Amazon Inspector","signatureVersion":"v4","targetPrefix":"InspectorService","protocol":"json"},"operations":{"AddAttributesToFindings":{"input":{"type":"structure","members":{"findingArns":{"shape":"S2"},"attributes":{"shape":"S4"}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"AttachAssessmentAndRulesPackage":{"input":{"type":"structure","members":{"assessmentArn":{},"rulesPackageArn":{}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"CreateApplication":{"input":{"type":"structure","members":{"applicationName":{},"resourceGroupArn":{}}},"output":{"type":"structure","members":{"applicationArn":{}}},"http":{}},"CreateAssessment":{"input":{"type":"structure","members":{"applicationArn":{},"assessmentName":{},"durationInSeconds":{"type":"integer"},"userAttributesForFindings":{"shape":"S4"}}},"output":{"type":"structure","members":{"assessmentArn":{}}},"http":{}},"CreateResourceGroup":{"input":{"type":"structure","members":{"resourceGroupTags":{}}},"output":{"type":"structure","members":{"resourceGroupArn":{}}},"http":{}},"DeleteApplication":{"input":{"type":"structure","members":{"applicationArn":{}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"DeleteAssessment":{"input":{"type":"structure","members":{"assessmentArn":{}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"DeleteRun":{"input":{"type":"structure","members":{"runArn":{}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"DescribeApplication":{"input":{"type":"structure","members":{"applicationArn":{}}},"output":{"type":"structure","members":{"application":{"type":"structure","members":{"applicationArn":{},"applicationName":{},"resourceGroupArn":{}}}}},"http":{}},"DescribeAssessment":{"input":{"type":"structure","members":{"assessmentArn":{}}},"output":{"type":"structure","members":{"assessment":{"type":"structure","members":{"assessmentArn":{},"assessmentName":{},"applicationArn":{},"assessmentState":{},"failureMessage":{},"dataCollected":{"type":"boolean"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"durationInSeconds":{"type":"integer"},"userAttributesForFindings":{"shape":"S4"}}}}},"http":{}},"DescribeCrossAccountAccessRole":{"output":{"type":"structure","members":{"roleArn":{},"valid":{"type":"boolean"}}},"http":{}},"DescribeFinding":{"input":{"type":"structure","members":{"findingArn":{}}},"output":{"type":"structure","members":{"finding":{"type":"structure","members":{"findingArn":{},"runArn":{},"rulesPackageArn":{},"ruleName":{},"agentId":{},"autoScalingGroup":{},"severity":{},"finding":{"shape":"S18"},"description":{"shape":"S18"},"recommendation":{"shape":"S18"},"attributes":{"shape":"S4"},"userAttributes":{"shape":"S4"}}}}},"http":{}},"DescribeResourceGroup":{"input":{"type":"structure","members":{"resourceGroupArn":{}}},"output":{"type":"structure","members":{"resourceGroup":{"type":"structure","members":{"resourceGroupArn":{},"resourceGroupTags":{}}}}},"http":{}},"DescribeRulesPackage":{"input":{"type":"structure","members":{"rulesPackageArn":{}}},"output":{"type":"structure","members":{"rulesPackage":{"type":"structure","members":{"rulesPackageArn":{},"rulesPackageName":{},"version":{},"provider":{},"description":{"shape":"S18"}}}}},"http":{}},"DescribeRun":{"input":{"type":"structure","members":{"runArn":{}}},"output":{"type":"structure","members":{"run":{"type":"structure","members":{"runArn":{},"runName":{},"assessmentArn":{},"runState":{},"rulesPackages":{"shape":"S2"},"creationTime":{"type":"timestamp"},"completionTime":{"type":"timestamp"}}}}},"http":{}},"DetachAssessmentAndRulesPackage":{"input":{"type":"structure","members":{"assessmentArn":{},"rulesPackageArn":{}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"GetAssessmentTelemetry":{"input":{"type":"structure","members":{"assessmentArn":{}}},"output":{"type":"structure","members":{"telemetry":{"shape":"S1v"}}},"http":{}},"ListApplications":{"input":{"type":"structure","members":{"filter":{"type":"structure","members":{"applicationNamePatterns":{"shape":"S24"}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"applicationArnList":{"shape":"S2"},"nextToken":{}}},"http":{}},"ListAssessmentAgents":{"input":{"type":"structure","members":{"assessmentArn":{},"filter":{"type":"structure","members":{"agentHealthList":{"type":"list","member":{}}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"agentList":{"type":"list","member":{"type":"structure","members":{"agentId":{},"assessmentArn":{},"agentHealth":{},"agentHealthCode":{},"agentHealthDetails":{},"autoScalingGroup":{},"accountId":{},"telemetry":{"shape":"S1v"}}}},"nextToken":{}}},"http":{}},"ListAssessments":{"input":{"type":"structure","members":{"applicationArns":{"shape":"S2"},"filter":{"shape":"S2k"},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"assessmentArnList":{"shape":"S2"},"nextToken":{}}},"http":{}},"ListAttachedAssessments":{"input":{"type":"structure","members":{"rulesPackageArn":{},"filter":{"shape":"S2k"},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"assessmentArnList":{"shape":"S2"},"nextToken":{}}},"http":{}},"ListAttachedRulesPackages":{"input":{"type":"structure","members":{"assessmentArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"rulesPackageArnList":{"shape":"S2"},"nextToken":{}}},"http":{}},"ListFindings":{"input":{"type":"structure","members":{"runArns":{"shape":"S2"},"filter":{"type":"structure","members":{"rulesPackageArns":{"shape":"S2"},"ruleNames":{"type":"list","member":{}},"severities":{"type":"list","member":{}},"attributes":{"shape":"S4"},"userAttributes":{"shape":"S4"}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"findingArnList":{"shape":"S2"},"nextToken":{}}},"http":{}},"ListRulesPackages":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"rulesPackageArnList":{"shape":"S2"},"nextToken":{}}},"http":{}},"ListRuns":{"input":{"type":"structure","members":{"assessmentArns":{"shape":"S2"},"filter":{"type":"structure","members":{"runNamePatterns":{"shape":"S24"},"runStates":{"type":"list","member":{}},"rulesPackages":{"shape":"S2"},"creationTime":{"shape":"S2m"},"completionTime":{"shape":"S2m"}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"runArnList":{"shape":"S2"},"nextToken":{}}},"http":{}},"ListTagsForResource":{"input":{"type":"structure","members":{"resourceArn":{}}},"output":{"type":"structure","members":{"tagList":{"shape":"S36"}}},"http":{}},"LocalizeText":{"input":{"type":"structure","members":{"localizedTexts":{"type":"list","member":{"shape":"S18"}},"locale":{}}},"output":{"type":"structure","members":{"message":{},"results":{"type":"list","member":{}}}},"http":{}},"PreviewAgentsForResourceGroup":{"input":{"type":"structure","members":{"resourceGroupArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"agentPreviewList":{"type":"list","member":{"type":"structure","members":{"agentId":{},"autoScalingGroup":{}}}},"nextToken":{}}},"http":{}},"RegisterCrossAccountAccessRole":{"input":{"type":"structure","members":{"roleArn":{}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"RemoveAttributesFromFindings":{"input":{"type":"structure","members":{"findingArns":{"shape":"S2"},"attributeKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"RunAssessment":{"input":{"type":"structure","members":{"assessmentArn":{},"runName":{}}},"output":{"type":"structure","members":{"runArn":{}}},"http":{}},"SetTagsForResource":{"input":{"type":"structure","members":{"resourceArn":{},"tags":{"shape":"S36"}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"StartDataCollection":{"input":{"type":"structure","members":{"assessmentArn":{}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"StopDataCollection":{"input":{"type":"structure","members":{"assessmentArn":{}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"UpdateApplication":{"input":{"type":"structure","members":{"applicationArn":{},"applicationName":{},"resourceGroupArn":{}}},"output":{"type":"structure","members":{"message":{}}},"http":{}},"UpdateAssessment":{"input":{"type":"structure","members":{"assessmentArn":{},"assessmentName":{},"durationInSeconds":{"type":"integer"}}},"output":{"type":"structure","members":{"message":{}}},"http":{}}},"shapes":{"S2":{"type":"list","member":{}},"S4":{"type":"list","member":{"type":"structure","members":{"key":{},"value":{}}}},"S18":{"type":"structure","members":{"key":{"type":"structure","members":{"facility":{},"id":{}}},"parameters":{"type":"list","member":{"type":"structure","members":{"name":{},"value":{}}}}}},"S1v":{"type":"list","member":{"type":"structure","members":{"status":{},"messageTypeTelemetries":{"type":"list","member":{"type":"structure","members":{"messageType":{},"count":{"type":"long"},"dataSize":{"type":"long"}}}}}}},"S24":{"type":"list","member":{}},"S2k":{"type":"structure","members":{"assessmentNamePatterns":{"shape":"S24"},"assessmentStates":{"type":"list","member":{}},"dataCollected":{"type":"boolean"},"startTimeRange":{"shape":"S2m"},"endTimeRange":{"shape":"S2m"},"durationRange":{"type":"structure","members":{"minimum":{"type":"integer"},"maximum":{"type":"integer"}}}}},"S2m":{"type":"structure","members":{"minimum":{"type":"timestamp"},"maximum":{"type":"timestamp"}}},"S36":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}},"examples":{}};
AWS.apiLoader.services['kinesis'] = {};                                                                                // 89
AWS.Kinesis = AWS.Service.defineService('kinesis', [ '2013-12-02' ]);                                                  // 90
                                                                                                                       // 91
AWS.apiLoader.services['kinesis']['2013-12-02'] = {"version":"2.0","metadata":{"apiVersion":"2013-12-02","endpointPrefix":"kinesis","jsonVersion":"1.1","serviceAbbreviation":"Kinesis","serviceFullName":"Amazon Kinesis","signatureVersion":"v4","targetPrefix":"Kinesis_20131202","protocol":"json"},"operations":{"AddTagsToStream":{"input":{"type":"structure","required":["StreamName","Tags"],"members":{"StreamName":{},"Tags":{"type":"map","key":{},"value":{}}}},"http":{}},"CreateStream":{"input":{"type":"structure","required":["StreamName","ShardCount"],"members":{"StreamName":{},"ShardCount":{"type":"integer"}}},"http":{}},"DecreaseStreamRetentionPeriod":{"input":{"type":"structure","required":["StreamName","RetentionPeriodHours"],"members":{"StreamName":{},"RetentionPeriodHours":{"type":"integer"}}},"http":{}},"DeleteStream":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{}}},"http":{}},"DescribeStream":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{},"Limit":{"type":"integer"},"ExclusiveStartShardId":{}}},"output":{"type":"structure","required":["StreamDescription"],"members":{"StreamDescription":{"type":"structure","required":["StreamName","StreamARN","StreamStatus","Shards","HasMoreShards","RetentionPeriodHours"],"members":{"StreamName":{},"StreamARN":{},"StreamStatus":{},"Shards":{"type":"list","member":{"type":"structure","required":["ShardId","HashKeyRange","SequenceNumberRange"],"members":{"ShardId":{},"ParentShardId":{},"AdjacentParentShardId":{},"HashKeyRange":{"type":"structure","required":["StartingHashKey","EndingHashKey"],"members":{"StartingHashKey":{},"EndingHashKey":{}}},"SequenceNumberRange":{"type":"structure","required":["StartingSequenceNumber"],"members":{"StartingSequenceNumber":{},"EndingSequenceNumber":{}}}}}},"HasMoreShards":{"type":"boolean"},"RetentionPeriodHours":{"type":"integer"}}}}},"http":{}},"GetRecords":{"input":{"type":"structure","required":["ShardIterator"],"members":{"ShardIterator":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","required":["Records"],"members":{"Records":{"type":"list","member":{"type":"structure","required":["SequenceNumber","Data","PartitionKey"],"members":{"SequenceNumber":{},"ApproximateArrivalTimestamp":{"type":"timestamp"},"Data":{"type":"blob"},"PartitionKey":{}}}},"NextShardIterator":{},"MillisBehindLatest":{"type":"long"}}},"http":{}},"GetShardIterator":{"input":{"type":"structure","required":["StreamName","ShardId","ShardIteratorType"],"members":{"StreamName":{},"ShardId":{},"ShardIteratorType":{},"StartingSequenceNumber":{}}},"output":{"type":"structure","members":{"ShardIterator":{}}},"http":{}},"IncreaseStreamRetentionPeriod":{"input":{"type":"structure","required":["StreamName","RetentionPeriodHours"],"members":{"StreamName":{},"RetentionPeriodHours":{"type":"integer"}}},"http":{}},"ListStreams":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"ExclusiveStartStreamName":{}}},"output":{"type":"structure","required":["StreamNames","HasMoreStreams"],"members":{"StreamNames":{"type":"list","member":{}},"HasMoreStreams":{"type":"boolean"}}},"http":{}},"ListTagsForStream":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{},"ExclusiveStartTagKey":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","required":["Tags","HasMoreTags"],"members":{"Tags":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"HasMoreTags":{"type":"boolean"}}},"http":{}},"MergeShards":{"input":{"type":"structure","required":["StreamName","ShardToMerge","AdjacentShardToMerge"],"members":{"StreamName":{},"ShardToMerge":{},"AdjacentShardToMerge":{}}},"http":{}},"PutRecord":{"input":{"type":"structure","required":["StreamName","Data","PartitionKey"],"members":{"StreamName":{},"Data":{"type":"blob"},"PartitionKey":{},"ExplicitHashKey":{},"SequenceNumberForOrdering":{}}},"output":{"type":"structure","required":["ShardId","SequenceNumber"],"members":{"ShardId":{},"SequenceNumber":{}}},"http":{}},"PutRecords":{"input":{"type":"structure","required":["Records","StreamName"],"members":{"Records":{"type":"list","member":{"type":"structure","required":["Data","PartitionKey"],"members":{"Data":{"type":"blob"},"ExplicitHashKey":{},"PartitionKey":{}}}},"StreamName":{}}},"output":{"type":"structure","required":["Records"],"members":{"FailedRecordCount":{"type":"integer"},"Records":{"type":"list","member":{"type":"structure","members":{"SequenceNumber":{},"ShardId":{},"ErrorCode":{},"ErrorMessage":{}}}}}},"http":{}},"RemoveTagsFromStream":{"input":{"type":"structure","required":["StreamName","TagKeys"],"members":{"StreamName":{},"TagKeys":{"type":"list","member":{}}}},"http":{}},"SplitShard":{"input":{"type":"structure","required":["StreamName","ShardToSplit","NewStartingHashKey"],"members":{"StreamName":{},"ShardToSplit":{},"NewStartingHashKey":{}}},"http":{}}},"shapes":{},"examples":{},"paginators":{"DescribeStream":{"input_token":"ExclusiveStartShardId","limit_key":"Limit","more_results":"StreamDescription.HasMoreShards","output_token":"StreamDescription.Shards[-1].ShardId","result_key":"StreamDescription.Shards"},"ListStreams":{"input_token":"ExclusiveStartStreamName","limit_key":"Limit","more_results":"HasMoreStreams","output_token":"StreamNames[-1]","result_key":"StreamNames"}}};
AWS.apiLoader.services['kms'] = {};                                                                                    // 93
AWS.KMS = AWS.Service.defineService('kms', [ '2014-11-01' ]);                                                          // 94
                                                                                                                       // 95
AWS.apiLoader.services['kms']['2014-11-01'] = {"version":"2.0","metadata":{"apiVersion":"2014-11-01","endpointPrefix":"kms","jsonVersion":"1.1","serviceAbbreviation":"KMS","serviceFullName":"AWS Key Management Service","signatureVersion":"v4","targetPrefix":"TrentService","protocol":"json"},"operations":{"CancelKeyDeletion":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"output":{"type":"structure","members":{"KeyId":{}}},"http":{}},"CreateAlias":{"input":{"type":"structure","required":["AliasName","TargetKeyId"],"members":{"AliasName":{},"TargetKeyId":{}}},"http":{}},"CreateGrant":{"input":{"type":"structure","required":["KeyId","GranteePrincipal"],"members":{"KeyId":{},"GranteePrincipal":{},"RetiringPrincipal":{},"Operations":{"shape":"S8"},"Constraints":{"shape":"Sa"},"GrantTokens":{"shape":"Se"},"Name":{}}},"output":{"type":"structure","members":{"GrantToken":{},"GrantId":{}}},"http":{}},"CreateKey":{"input":{"type":"structure","members":{"Policy":{},"Description":{},"KeyUsage":{}}},"output":{"type":"structure","members":{"KeyMetadata":{"shape":"So"}}},"http":{}},"Decrypt":{"input":{"type":"structure","required":["CiphertextBlob"],"members":{"CiphertextBlob":{"type":"blob"},"EncryptionContext":{"shape":"Sb"},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"KeyId":{},"Plaintext":{"shape":"Sx"}}},"http":{}},"DeleteAlias":{"input":{"type":"structure","required":["AliasName"],"members":{"AliasName":{}}},"http":{}},"DescribeKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"KeyMetadata":{"shape":"So"}}},"http":{}},"DisableKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"http":{}},"DisableKeyRotation":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"http":{}},"EnableKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"http":{}},"EnableKeyRotation":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"http":{}},"Encrypt":{"input":{"type":"structure","required":["KeyId","Plaintext"],"members":{"KeyId":{},"Plaintext":{"shape":"Sx"},"EncryptionContext":{"shape":"Sb"},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"KeyId":{}}},"http":{}},"GenerateDataKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"EncryptionContext":{"shape":"Sb"},"NumberOfBytes":{"type":"integer"},"KeySpec":{},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"Plaintext":{"shape":"Sx"},"KeyId":{}}},"http":{}},"GenerateDataKeyWithoutPlaintext":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"EncryptionContext":{"shape":"Sb"},"KeySpec":{},"NumberOfBytes":{"type":"integer"},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"KeyId":{}}},"http":{}},"GenerateRandom":{"input":{"type":"structure","members":{"NumberOfBytes":{"type":"integer"}}},"output":{"type":"structure","members":{"Plaintext":{"shape":"Sx"}}},"http":{}},"GetKeyPolicy":{"input":{"type":"structure","required":["KeyId","PolicyName"],"members":{"KeyId":{},"PolicyName":{}}},"output":{"type":"structure","members":{"Policy":{}}},"http":{}},"GetKeyRotationStatus":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"output":{"type":"structure","members":{"KeyRotationEnabled":{"type":"boolean"}}},"http":{}},"ListAliases":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Aliases":{"type":"list","member":{"type":"structure","members":{"AliasName":{},"AliasArn":{},"TargetKeyId":{}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}},"http":{}},"ListGrants":{"input":{"type":"structure","required":["KeyId"],"members":{"Limit":{"type":"integer"},"Marker":{},"KeyId":{}}},"output":{"shape":"S1r"},"http":{}},"ListKeyPolicies":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"PolicyNames":{"type":"list","member":{}},"NextMarker":{},"Truncated":{"type":"boolean"}}},"http":{}},"ListKeys":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Keys":{"type":"list","member":{"type":"structure","members":{"KeyId":{},"KeyArn":{}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}},"http":{}},"ListRetirableGrants":{"input":{"type":"structure","required":["RetiringPrincipal"],"members":{"Limit":{"type":"integer"},"Marker":{},"RetiringPrincipal":{}}},"output":{"shape":"S1r"},"http":{}},"PutKeyPolicy":{"input":{"type":"structure","required":["KeyId","PolicyName","Policy"],"members":{"KeyId":{},"PolicyName":{},"Policy":{}}},"http":{}},"ReEncrypt":{"input":{"type":"structure","required":["CiphertextBlob","DestinationKeyId"],"members":{"CiphertextBlob":{"type":"blob"},"SourceEncryptionContext":{"shape":"Sb"},"DestinationKeyId":{},"DestinationEncryptionContext":{"shape":"Sb"},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"SourceKeyId":{},"KeyId":{}}},"http":{}},"RetireGrant":{"input":{"type":"structure","members":{"GrantToken":{},"KeyId":{},"GrantId":{}}},"http":{}},"RevokeGrant":{"input":{"type":"structure","required":["KeyId","GrantId"],"members":{"KeyId":{},"GrantId":{}}},"http":{}},"ScheduleKeyDeletion":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"PendingWindowInDays":{"type":"integer"}}},"output":{"type":"structure","members":{"KeyId":{},"DeletionDate":{"type":"timestamp"}}},"http":{}},"UpdateAlias":{"input":{"type":"structure","required":["AliasName","TargetKeyId"],"members":{"AliasName":{},"TargetKeyId":{}}},"http":{}},"UpdateKeyDescription":{"input":{"type":"structure","required":["KeyId","Description"],"members":{"KeyId":{},"Description":{}}},"http":{}}},"shapes":{"S8":{"type":"list","member":{}},"Sa":{"type":"structure","members":{"EncryptionContextSubset":{"shape":"Sb"},"EncryptionContextEquals":{"shape":"Sb"}}},"Sb":{"type":"map","key":{},"value":{}},"Se":{"type":"list","member":{}},"So":{"type":"structure","required":["KeyId"],"members":{"AWSAccountId":{},"KeyId":{},"Arn":{},"CreationDate":{"type":"timestamp"},"Enabled":{"type":"boolean"},"Description":{},"KeyUsage":{},"KeyState":{},"DeletionDate":{"type":"timestamp"}}},"Sx":{"type":"blob","sensitive":true},"S1r":{"type":"structure","members":{"Grants":{"type":"list","member":{"type":"structure","members":{"KeyId":{},"GrantId":{},"Name":{},"CreationDate":{"type":"timestamp"},"GranteePrincipal":{},"RetiringPrincipal":{},"IssuingAccount":{},"Operations":{"shape":"S8"},"Constraints":{"shape":"Sa"}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"examples":{},"paginators":{"ListAliases":{"limit_key":"Limit","input_token":"Marker","output_token":"NextMarker","more_results":"Truncated","result_key":"Aliases"},"ListGrants":{"limit_key":"Limit","input_token":"Marker","output_token":"NextMarker","more_results":"Truncated","result_key":"Grants"},"ListKeyPolicies":{"limit_key":"Limit","input_token":"Marker","output_token":"NextMarker","more_results":"Truncated","result_key":"PolicyNames"},"ListKeys":{"limit_key":"Limit","input_token":"Marker","output_token":"NextMarker","more_results":"Truncated","result_key":"Keys"}}};
AWS.apiLoader.services['lambda'] = {};                                                                                 // 97
AWS.Lambda = AWS.Service.defineService('lambda', [ '2014-11-11', '2015-03-31' ]);                                      // 98
                                                                                                                       // 99
AWS.apiLoader.services['lambda']['2015-03-31'] = {"version":"2.0","metadata":{"apiVersion":"2015-03-31","endpointPrefix":"lambda","protocol":"rest-json","serviceFullName":"AWS Lambda","signatureVersion":"v4"},"operations":{"AddPermission":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/policy","responseCode":201},"input":{"type":"structure","required":["FunctionName","StatementId","Action","Principal"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"StatementId":{},"Action":{},"Principal":{},"SourceArn":{},"SourceAccount":{},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"type":"structure","members":{"Statement":{}}}},"CreateAlias":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/aliases","responseCode":201},"input":{"type":"structure","required":["FunctionName","Name","FunctionVersion"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{},"FunctionVersion":{},"Description":{}}},"output":{"shape":"Sf"}},"CreateEventSourceMapping":{"http":{"requestUri":"/2015-03-31/event-source-mappings/","responseCode":202},"input":{"type":"structure","required":["EventSourceArn","FunctionName","StartingPosition"],"members":{"EventSourceArn":{},"FunctionName":{},"Enabled":{"type":"boolean"},"BatchSize":{"type":"integer"},"StartingPosition":{}}},"output":{"shape":"Sl"}},"CreateFunction":{"http":{"requestUri":"/2015-03-31/functions","responseCode":201},"input":{"type":"structure","required":["FunctionName","Runtime","Role","Handler","Code"],"members":{"FunctionName":{},"Runtime":{},"Role":{},"Handler":{},"Code":{"type":"structure","members":{"ZipFile":{"type":"blob"},"S3Bucket":{},"S3Key":{},"S3ObjectVersion":{}}},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"Publish":{"type":"boolean"},"VpcConfig":{"shape":"Sz"}}},"output":{"shape":"S14"}},"DeleteAlias":{"http":{"method":"DELETE","requestUri":"/2015-03-31/functions/{FunctionName}/aliases/{Name}","responseCode":204},"input":{"type":"structure","required":["FunctionName","Name"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{"location":"uri","locationName":"Name"}}}},"DeleteEventSourceMapping":{"http":{"method":"DELETE","requestUri":"/2015-03-31/event-source-mappings/{UUID}","responseCode":202},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}},"output":{"shape":"Sl"}},"DeleteFunction":{"http":{"method":"DELETE","requestUri":"/2015-03-31/functions/{FunctionName}","responseCode":204},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}}},"GetAlias":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/aliases/{Name}","responseCode":200},"input":{"type":"structure","required":["FunctionName","Name"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{"location":"uri","locationName":"Name"}}},"output":{"shape":"Sf"}},"GetEventSourceMapping":{"http":{"method":"GET","requestUri":"/2015-03-31/event-source-mappings/{UUID}","responseCode":200},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}},"output":{"shape":"Sl"}},"GetFunction":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"type":"structure","members":{"Configuration":{"shape":"S14"},"Code":{"type":"structure","members":{"RepositoryType":{},"Location":{}}}}}},"GetFunctionConfiguration":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"shape":"S14"}},"GetPolicy":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/policy","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"type":"structure","members":{"Policy":{}}}},"Invoke":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/invocations"},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"InvocationType":{"location":"header","locationName":"X-Amz-Invocation-Type"},"LogType":{"location":"header","locationName":"X-Amz-Log-Type"},"ClientContext":{"location":"header","locationName":"X-Amz-Client-Context"},"Payload":{"type":"blob"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}},"payload":"Payload"},"output":{"type":"structure","members":{"StatusCode":{"location":"statusCode","type":"integer"},"FunctionError":{"location":"header","locationName":"X-Amz-Function-Error"},"LogResult":{"location":"header","locationName":"X-Amz-Log-Result"},"Payload":{"type":"blob"}},"payload":"Payload"}},"InvokeAsync":{"http":{"requestUri":"/2014-11-13/functions/{FunctionName}/invoke-async/","responseCode":202},"input":{"type":"structure","required":["FunctionName","InvokeArgs"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"InvokeArgs":{"type":"blob","streaming":true}},"deprecated":true,"payload":"InvokeArgs"},"output":{"type":"structure","members":{"Status":{"location":"statusCode","type":"integer"}},"deprecated":true},"deprecated":true},"ListAliases":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/aliases","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"FunctionVersion":{"location":"querystring","locationName":"FunctionVersion"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Aliases":{"type":"list","member":{"shape":"Sf"}}}}},"ListEventSourceMappings":{"http":{"method":"GET","requestUri":"/2015-03-31/event-source-mappings/","responseCode":200},"input":{"type":"structure","members":{"EventSourceArn":{"location":"querystring","locationName":"EventSourceArn"},"FunctionName":{"location":"querystring","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"EventSourceMappings":{"type":"list","member":{"shape":"Sl"}}}}},"ListFunctions":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/","responseCode":200},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Functions":{"shape":"S22"}}}},"ListVersionsByFunction":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/versions","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Versions":{"shape":"S22"}}}},"PublishVersion":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/versions","responseCode":201},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"CodeSha256":{},"Description":{}}},"output":{"shape":"S14"}},"RemovePermission":{"http":{"method":"DELETE","requestUri":"/2015-03-31/functions/{FunctionName}/policy/{StatementId}","responseCode":204},"input":{"type":"structure","required":["FunctionName","StatementId"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"StatementId":{"location":"uri","locationName":"StatementId"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}}},"UpdateAlias":{"http":{"method":"PUT","requestUri":"/2015-03-31/functions/{FunctionName}/aliases/{Name}","responseCode":200},"input":{"type":"structure","required":["FunctionName","Name"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{"location":"uri","locationName":"Name"},"FunctionVersion":{},"Description":{}}},"output":{"shape":"Sf"}},"UpdateEventSourceMapping":{"http":{"method":"PUT","requestUri":"/2015-03-31/event-source-mappings/{UUID}","responseCode":202},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"},"FunctionName":{},"Enabled":{"type":"boolean"},"BatchSize":{"type":"integer"}}},"output":{"shape":"Sl"}},"UpdateFunctionCode":{"http":{"method":"PUT","requestUri":"/2015-03-31/functions/{FunctionName}/code","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"ZipFile":{"type":"blob"},"S3Bucket":{},"S3Key":{},"S3ObjectVersion":{},"Publish":{"type":"boolean"}}},"output":{"shape":"S14"}},"UpdateFunctionConfiguration":{"http":{"method":"PUT","requestUri":"/2015-03-31/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Role":{},"Handler":{},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"VpcConfig":{"shape":"Sz"}}},"output":{"shape":"S14"}}},"shapes":{"Sf":{"type":"structure","members":{"AliasArn":{},"Name":{},"FunctionVersion":{},"Description":{}}},"Sl":{"type":"structure","members":{"UUID":{},"BatchSize":{"type":"integer"},"EventSourceArn":{},"FunctionArn":{},"LastModified":{"type":"timestamp"},"LastProcessingResult":{},"State":{},"StateTransitionReason":{}}},"Sz":{"type":"structure","members":{"SubnetIds":{"shape":"S10"},"SecurityGroupIds":{"shape":"S12"}}},"S10":{"type":"list","member":{}},"S12":{"type":"list","member":{}},"S14":{"type":"structure","members":{"FunctionName":{},"FunctionArn":{},"Runtime":{},"Role":{},"Handler":{},"CodeSize":{"type":"long"},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"LastModified":{},"CodeSha256":{},"Version":{},"VpcConfig":{"type":"structure","members":{"SubnetIds":{"shape":"S10"},"SecurityGroupIds":{"shape":"S12"},"VpcId":{}}}}},"S22":{"type":"list","member":{"shape":"S14"}}},"paginators":{"ListEventSourceMappings":{"input_token":"Marker","output_token":"NextMarker","limit_key":"MaxItems","result_key":"EventSourceMappings"},"ListFunctions":{"input_token":"Marker","output_token":"NextMarker","limit_key":"MaxItems","result_key":"Functions"}}};
AWS.apiLoader.services['machinelearning'] = {};                                                                        // 101
AWS.MachineLearning = AWS.Service.defineService('machinelearning', [ '2014-12-12' ]);                                  // 102
require('./services/machinelearning');                                                                                 // 103
                                                                                                                       // 104
AWS.apiLoader.services['machinelearning']['2014-12-12'] = {"version":"2.0","metadata":{"apiVersion":"2014-12-12","endpointPrefix":"machinelearning","jsonVersion":"1.1","serviceFullName":"Amazon Machine Learning","signatureVersion":"v4","targetPrefix":"AmazonML_20141212","protocol":"json"},"operations":{"CreateBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId","MLModelId","BatchPredictionDataSourceId","OutputUri"],"members":{"BatchPredictionId":{},"BatchPredictionName":{},"MLModelId":{},"BatchPredictionDataSourceId":{},"OutputUri":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{}}},"http":{}},"CreateDataSourceFromRDS":{"input":{"type":"structure","required":["DataSourceId","RDSData","RoleARN"],"members":{"DataSourceId":{},"DataSourceName":{},"RDSData":{"type":"structure","required":["DatabaseInformation","SelectSqlQuery","DatabaseCredentials","S3StagingLocation","ResourceRole","ServiceRole","SubnetId","SecurityGroupIds"],"members":{"DatabaseInformation":{"shape":"S8"},"SelectSqlQuery":{},"DatabaseCredentials":{"type":"structure","required":["Username","Password"],"members":{"Username":{},"Password":{}}},"S3StagingLocation":{},"DataRearrangement":{},"DataSchema":{},"DataSchemaUri":{},"ResourceRole":{},"ServiceRole":{},"SubnetId":{},"SecurityGroupIds":{"type":"list","member":{}}}},"RoleARN":{},"ComputeStatistics":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{}}},"http":{}},"CreateDataSourceFromRedshift":{"input":{"type":"structure","required":["DataSourceId","DataSpec","RoleARN"],"members":{"DataSourceId":{},"DataSourceName":{},"DataSpec":{"type":"structure","required":["DatabaseInformation","SelectSqlQuery","DatabaseCredentials","S3StagingLocation"],"members":{"DatabaseInformation":{"shape":"Sr"},"SelectSqlQuery":{},"DatabaseCredentials":{"type":"structure","required":["Username","Password"],"members":{"Username":{},"Password":{}}},"S3StagingLocation":{},"DataRearrangement":{},"DataSchema":{},"DataSchemaUri":{}}},"RoleARN":{},"ComputeStatistics":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{}}},"http":{}},"CreateDataSourceFromS3":{"input":{"type":"structure","required":["DataSourceId","DataSpec"],"members":{"DataSourceId":{},"DataSourceName":{},"DataSpec":{"type":"structure","required":["DataLocationS3"],"members":{"DataLocationS3":{},"DataRearrangement":{},"DataSchema":{},"DataSchemaLocationS3":{}}},"ComputeStatistics":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{}}},"http":{}},"CreateEvaluation":{"input":{"type":"structure","required":["EvaluationId","MLModelId","EvaluationDataSourceId"],"members":{"EvaluationId":{},"EvaluationName":{},"MLModelId":{},"EvaluationDataSourceId":{}}},"output":{"type":"structure","members":{"EvaluationId":{}}},"http":{}},"CreateMLModel":{"input":{"type":"structure","required":["MLModelId","MLModelType","TrainingDataSourceId"],"members":{"MLModelId":{},"MLModelName":{},"MLModelType":{},"Parameters":{"shape":"S16"},"TrainingDataSourceId":{},"Recipe":{},"RecipeUri":{}}},"output":{"type":"structure","members":{"MLModelId":{}}},"http":{}},"CreateRealtimeEndpoint":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{}}},"output":{"type":"structure","members":{"MLModelId":{},"RealtimeEndpointInfo":{"shape":"S1c"}}},"http":{}},"DeleteBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId"],"members":{"BatchPredictionId":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{}}},"http":{}},"DeleteDataSource":{"input":{"type":"structure","required":["DataSourceId"],"members":{"DataSourceId":{}}},"output":{"type":"structure","members":{"DataSourceId":{}}},"http":{}},"DeleteEvaluation":{"input":{"type":"structure","required":["EvaluationId"],"members":{"EvaluationId":{}}},"output":{"type":"structure","members":{"EvaluationId":{}}},"http":{}},"DeleteMLModel":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{}}},"output":{"type":"structure","members":{"MLModelId":{}}},"http":{}},"DeleteRealtimeEndpoint":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{}}},"output":{"type":"structure","members":{"MLModelId":{},"RealtimeEndpointInfo":{"shape":"S1c"}}},"http":{}},"DescribeBatchPredictions":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"BatchPredictionId":{},"MLModelId":{},"BatchPredictionDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"OutputUri":{},"Message":{}}}},"NextToken":{}}},"http":{}},"DescribeDataSources":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"DataSourceId":{},"DataLocationS3":{},"DataRearrangement":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"DataSizeInBytes":{"type":"long"},"NumberOfFiles":{"type":"long"},"Name":{},"Status":{},"Message":{},"RedshiftMetadata":{"shape":"S28"},"RDSMetadata":{"shape":"S29"},"RoleARN":{},"ComputeStatistics":{"type":"boolean"}}}},"NextToken":{}}},"http":{}},"DescribeEvaluations":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"EvaluationId":{},"MLModelId":{},"EvaluationDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"PerformanceMetrics":{"shape":"S2g"},"Message":{}}}},"NextToken":{}}},"http":{}},"DescribeMLModels":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"MLModelId":{},"TrainingDataSourceId":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"SizeInBytes":{"type":"long"},"EndpointInfo":{"shape":"S1c"},"TrainingParameters":{"shape":"S16"},"InputDataLocationS3":{},"Algorithm":{},"MLModelType":{},"ScoreThreshold":{"type":"float"},"ScoreThresholdLastUpdatedAt":{"type":"timestamp"},"Message":{}}}},"NextToken":{}}},"http":{}},"GetBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId"],"members":{"BatchPredictionId":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{},"MLModelId":{},"BatchPredictionDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"OutputUri":{},"LogUri":{},"Message":{}}},"http":{}},"GetDataSource":{"input":{"type":"structure","required":["DataSourceId"],"members":{"DataSourceId":{},"Verbose":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{},"DataLocationS3":{},"DataRearrangement":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"DataSizeInBytes":{"type":"long"},"NumberOfFiles":{"type":"long"},"Name":{},"Status":{},"LogUri":{},"Message":{},"RedshiftMetadata":{"shape":"S28"},"RDSMetadata":{"shape":"S29"},"RoleARN":{},"ComputeStatistics":{"type":"boolean"},"DataSourceSchema":{}}},"http":{}},"GetEvaluation":{"input":{"type":"structure","required":["EvaluationId"],"members":{"EvaluationId":{}}},"output":{"type":"structure","members":{"EvaluationId":{},"MLModelId":{},"EvaluationDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"PerformanceMetrics":{"shape":"S2g"},"LogUri":{},"Message":{}}},"http":{}},"GetMLModel":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{},"Verbose":{"type":"boolean"}}},"output":{"type":"structure","members":{"MLModelId":{},"TrainingDataSourceId":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"SizeInBytes":{"type":"long"},"EndpointInfo":{"shape":"S1c"},"TrainingParameters":{"shape":"S16"},"InputDataLocationS3":{},"MLModelType":{},"ScoreThreshold":{"type":"float"},"ScoreThresholdLastUpdatedAt":{"type":"timestamp"},"LogUri":{},"Message":{},"Recipe":{},"Schema":{}}},"http":{}},"Predict":{"input":{"type":"structure","required":["MLModelId","Record","PredictEndpoint"],"members":{"MLModelId":{},"Record":{"type":"map","key":{},"value":{}},"PredictEndpoint":{}}},"output":{"type":"structure","members":{"Prediction":{"type":"structure","members":{"predictedLabel":{},"predictedValue":{"type":"float"},"predictedScores":{"type":"map","key":{},"value":{"type":"float"}},"details":{"type":"map","key":{},"value":{}}}}}},"http":{}},"UpdateBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId","BatchPredictionName"],"members":{"BatchPredictionId":{},"BatchPredictionName":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{}}},"http":{}},"UpdateDataSource":{"input":{"type":"structure","required":["DataSourceId","DataSourceName"],"members":{"DataSourceId":{},"DataSourceName":{}}},"output":{"type":"structure","members":{"DataSourceId":{}}},"http":{}},"UpdateEvaluation":{"input":{"type":"structure","required":["EvaluationId","EvaluationName"],"members":{"EvaluationId":{},"EvaluationName":{}}},"output":{"type":"structure","members":{"EvaluationId":{}}},"http":{}},"UpdateMLModel":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{},"MLModelName":{},"ScoreThreshold":{"type":"float"}}},"output":{"type":"structure","members":{"MLModelId":{}}},"http":{}}},"shapes":{"S8":{"type":"structure","required":["InstanceIdentifier","DatabaseName"],"members":{"InstanceIdentifier":{},"DatabaseName":{}}},"Sr":{"type":"structure","required":["DatabaseName","ClusterIdentifier"],"members":{"DatabaseName":{},"ClusterIdentifier":{}}},"S16":{"type":"map","key":{},"value":{}},"S1c":{"type":"structure","members":{"PeakRequestsPerSecond":{"type":"integer"},"CreatedAt":{"type":"timestamp"},"EndpointUrl":{},"EndpointStatus":{}}},"S28":{"type":"structure","members":{"RedshiftDatabase":{"shape":"Sr"},"DatabaseUserName":{},"SelectSqlQuery":{}}},"S29":{"type":"structure","members":{"Database":{"shape":"S8"},"DatabaseUserName":{},"SelectSqlQuery":{},"ResourceRole":{},"ServiceRole":{},"DataPipelineId":{}}},"S2g":{"type":"structure","members":{"Properties":{"type":"map","key":{},"value":{}}}}},"examples":{},"paginators":{"DescribeBatchPredictions":{"limit_key":"Limit","output_token":"NextToken","input_token":"NextToken","result_key":"Results"},"DescribeDataSources":{"limit_key":"Limit","output_token":"NextToken","input_token":"NextToken","result_key":"Results"},"DescribeEvaluations":{"limit_key":"Limit","output_token":"NextToken","input_token":"NextToken","result_key":"Results"},"DescribeMLModels":{"limit_key":"Limit","output_token":"NextToken","input_token":"NextToken","result_key":"Results"}}};
AWS.apiLoader.services['marketplacecommerceanalytics'] = {};                                                           // 106
AWS.MarketplaceCommerceAnalytics = AWS.Service.defineService('marketplacecommerceanalytics', [ '2015-07-01' ]);        // 107
                                                                                                                       // 108
AWS.apiLoader.services['marketplacecommerceanalytics']['2015-07-01'] = {"version":"2.0","metadata":{"apiVersion":"2015-07-01","endpointPrefix":"marketplacecommerceanalytics","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Marketplace Commerce Analytics","signatureVersion":"v4","signingName":"marketplacecommerceanalytics","targetPrefix":"MarketplaceCommerceAnalytics20150701"},"operations":{"GenerateDataSet":{"input":{"type":"structure","required":["dataSetType","dataSetPublicationDate","roleNameArn","destinationS3BucketName","snsTopicArn"],"members":{"dataSetType":{},"dataSetPublicationDate":{"type":"timestamp"},"roleNameArn":{},"destinationS3BucketName":{},"destinationS3Prefix":{},"snsTopicArn":{},"customerDefinedValues":{"type":"map","key":{},"value":{}}}},"output":{"type":"structure","members":{"dataSetRequestId":{}}},"http":{}}},"shapes":{}};
AWS.apiLoader.services['mobileanalytics'] = {};                                                                        // 110
AWS.MobileAnalytics = AWS.Service.defineService('mobileanalytics', [ '2014-06-05' ]);                                  // 111
                                                                                                                       // 112
AWS.apiLoader.services['mobileanalytics']['2014-06-05'] = {"version":"2.0","metadata":{"apiVersion":"2014-06-05","endpointPrefix":"mobileanalytics","serviceFullName":"Amazon Mobile Analytics","signatureVersion":"v4","protocol":"rest-json"},"operations":{"PutEvents":{"http":{"requestUri":"/2014-06-05/events","responseCode":202},"input":{"type":"structure","required":["events","clientContext"],"members":{"events":{"type":"list","member":{"type":"structure","required":["eventType","timestamp"],"members":{"eventType":{},"timestamp":{},"session":{"type":"structure","members":{"id":{},"duration":{"type":"long"},"startTimestamp":{},"stopTimestamp":{}}},"version":{},"attributes":{"type":"map","key":{},"value":{}},"metrics":{"type":"map","key":{},"value":{"type":"double"}}}}},"clientContext":{"location":"header","locationName":"x-amz-Client-Context"},"clientContextEncoding":{"location":"header","locationName":"x-amz-Client-Context-Encoding"}}}}},"shapes":{}};
AWS.apiLoader.services['opsworks'] = {};                                                                               // 114
AWS.OpsWorks = AWS.Service.defineService('opsworks', [ '2013-02-18' ]);                                                // 115
                                                                                                                       // 116
AWS.apiLoader.services['opsworks']['2013-02-18'] = {"version":"2.0","metadata":{"apiVersion":"2013-02-18","endpointPrefix":"opsworks","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS OpsWorks","signatureVersion":"v4","targetPrefix":"OpsWorks_20130218"},"operations":{"AssignInstance":{"input":{"type":"structure","required":["InstanceId","LayerIds"],"members":{"InstanceId":{},"LayerIds":{"shape":"S3"}}},"http":{}},"AssignVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{},"InstanceId":{}}},"http":{}},"AssociateElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{},"InstanceId":{}}},"http":{}},"AttachElasticLoadBalancer":{"input":{"type":"structure","required":["ElasticLoadBalancerName","LayerId"],"members":{"ElasticLoadBalancerName":{},"LayerId":{}}},"http":{}},"CloneStack":{"input":{"type":"structure","required":["SourceStackId","ServiceRoleArn"],"members":{"SourceStackId":{},"Name":{},"Region":{},"VpcId":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"UseOpsworksSecurityGroups":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"ClonePermissions":{"type":"boolean"},"CloneAppIds":{"shape":"S3"},"DefaultRootDeviceType":{},"AgentVersion":{}}},"output":{"type":"structure","members":{"StackId":{}}},"http":{}},"CreateApp":{"input":{"type":"structure","required":["StackId","Name","Type"],"members":{"StackId":{},"Shortname":{},"Name":{},"Description":{},"DataSources":{"shape":"Si"},"Type":{},"AppSource":{"shape":"Sd"},"Domains":{"shape":"S3"},"EnableSsl":{"type":"boolean"},"SslConfiguration":{"shape":"Sl"},"Attributes":{"shape":"Sm"},"Environment":{"shape":"So"}}},"output":{"type":"structure","members":{"AppId":{}}},"http":{}},"CreateDeployment":{"input":{"type":"structure","required":["StackId","Command"],"members":{"StackId":{},"AppId":{},"InstanceIds":{"shape":"S3"},"Command":{"shape":"Ss"},"Comment":{},"CustomJson":{}}},"output":{"type":"structure","members":{"DeploymentId":{}}},"http":{}},"CreateInstance":{"input":{"type":"structure","required":["StackId","LayerIds","InstanceType"],"members":{"StackId":{},"LayerIds":{"shape":"S3"},"InstanceType":{},"AutoScalingType":{},"Hostname":{},"Os":{},"AmiId":{},"SshKeyName":{},"AvailabilityZone":{},"VirtualizationType":{},"SubnetId":{},"Architecture":{},"RootDeviceType":{},"BlockDeviceMappings":{"shape":"Sz"},"InstallUpdatesOnBoot":{"type":"boolean"},"EbsOptimized":{"type":"boolean"},"AgentVersion":{}}},"output":{"type":"structure","members":{"InstanceId":{}}},"http":{}},"CreateLayer":{"input":{"type":"structure","required":["StackId","Type","Name","Shortname"],"members":{"StackId":{},"Type":{},"Name":{},"Shortname":{},"Attributes":{"shape":"S17"},"CustomInstanceProfileArn":{},"CustomJson":{},"CustomSecurityGroupIds":{"shape":"S3"},"Packages":{"shape":"S3"},"VolumeConfigurations":{"shape":"S19"},"EnableAutoHealing":{"type":"boolean"},"AutoAssignElasticIps":{"type":"boolean"},"AutoAssignPublicIps":{"type":"boolean"},"CustomRecipes":{"shape":"S1b"},"InstallUpdatesOnBoot":{"type":"boolean"},"UseEbsOptimizedInstances":{"type":"boolean"},"LifecycleEventConfiguration":{"shape":"S1c"}}},"output":{"type":"structure","members":{"LayerId":{}}},"http":{}},"CreateStack":{"input":{"type":"structure","required":["Name","Region","ServiceRoleArn","DefaultInstanceProfileArn"],"members":{"Name":{},"Region":{},"VpcId":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"UseOpsworksSecurityGroups":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"DefaultRootDeviceType":{},"AgentVersion":{}}},"output":{"type":"structure","members":{"StackId":{}}},"http":{}},"CreateUserProfile":{"input":{"type":"structure","required":["IamUserArn"],"members":{"IamUserArn":{},"SshUsername":{},"SshPublicKey":{},"AllowSelfManagement":{"type":"boolean"}}},"output":{"type":"structure","members":{"IamUserArn":{}}},"http":{}},"DeleteApp":{"input":{"type":"structure","required":["AppId"],"members":{"AppId":{}}},"http":{}},"DeleteInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"DeleteElasticIp":{"type":"boolean"},"DeleteVolumes":{"type":"boolean"}}},"http":{}},"DeleteLayer":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{}}},"http":{}},"DeleteStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}},"http":{}},"DeleteUserProfile":{"input":{"type":"structure","required":["IamUserArn"],"members":{"IamUserArn":{}}},"http":{}},"DeregisterEcsCluster":{"input":{"type":"structure","required":["EcsClusterArn"],"members":{"EcsClusterArn":{}}},"http":{}},"DeregisterElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{}}},"http":{}},"DeregisterInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}},"http":{}},"DeregisterRdsDbInstance":{"input":{"type":"structure","required":["RdsDbInstanceArn"],"members":{"RdsDbInstanceArn":{}}},"http":{}},"DeregisterVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{}}},"http":{}},"DescribeAgentVersions":{"input":{"type":"structure","members":{"StackId":{},"ConfigurationManager":{"shape":"Sa"}}},"output":{"type":"structure","members":{"AgentVersions":{"type":"list","member":{"type":"structure","members":{"Version":{},"ConfigurationManager":{"shape":"Sa"}}}}}},"http":{}},"DescribeApps":{"input":{"type":"structure","members":{"StackId":{},"AppIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Apps":{"type":"list","member":{"type":"structure","members":{"AppId":{},"StackId":{},"Shortname":{},"Name":{},"Description":{},"DataSources":{"shape":"Si"},"Type":{},"AppSource":{"shape":"Sd"},"Domains":{"shape":"S3"},"EnableSsl":{"type":"boolean"},"SslConfiguration":{"shape":"Sl"},"Attributes":{"shape":"Sm"},"CreatedAt":{},"Environment":{"shape":"So"}}}}}},"http":{}},"DescribeCommands":{"input":{"type":"structure","members":{"DeploymentId":{},"InstanceId":{},"CommandIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Commands":{"type":"list","member":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"DeploymentId":{},"CreatedAt":{},"AcknowledgedAt":{},"CompletedAt":{},"Status":{},"ExitCode":{"type":"integer"},"LogUrl":{},"Type":{}}}}}},"http":{}},"DescribeDeployments":{"input":{"type":"structure","members":{"StackId":{},"AppId":{},"DeploymentIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Deployments":{"type":"list","member":{"type":"structure","members":{"DeploymentId":{},"StackId":{},"AppId":{},"CreatedAt":{},"CompletedAt":{},"Duration":{"type":"integer"},"IamUserArn":{},"Comment":{},"Command":{"shape":"Ss"},"Status":{},"CustomJson":{},"InstanceIds":{"shape":"S3"}}}}}},"http":{}},"DescribeEcsClusters":{"input":{"type":"structure","members":{"EcsClusterArns":{"shape":"S3"},"StackId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"EcsClusters":{"type":"list","member":{"type":"structure","members":{"EcsClusterArn":{},"EcsClusterName":{},"StackId":{},"RegisteredAt":{}}}},"NextToken":{}}},"http":{}},"DescribeElasticIps":{"input":{"type":"structure","members":{"InstanceId":{},"StackId":{},"Ips":{"shape":"S3"}}},"output":{"type":"structure","members":{"ElasticIps":{"type":"list","member":{"type":"structure","members":{"Ip":{},"Name":{},"Domain":{},"Region":{},"InstanceId":{}}}}}},"http":{}},"DescribeElasticLoadBalancers":{"input":{"type":"structure","members":{"StackId":{},"LayerIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"ElasticLoadBalancers":{"type":"list","member":{"type":"structure","members":{"ElasticLoadBalancerName":{},"Region":{},"DnsName":{},"StackId":{},"LayerId":{},"VpcId":{},"AvailabilityZones":{"shape":"S3"},"SubnetIds":{"shape":"S3"},"Ec2InstanceIds":{"shape":"S3"}}}}}},"http":{}},"DescribeInstances":{"input":{"type":"structure","members":{"StackId":{},"LayerId":{},"InstanceIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Instances":{"type":"list","member":{"type":"structure","members":{"AgentVersion":{},"AmiId":{},"Architecture":{},"AutoScalingType":{},"AvailabilityZone":{},"BlockDeviceMappings":{"shape":"Sz"},"CreatedAt":{},"EbsOptimized":{"type":"boolean"},"Ec2InstanceId":{},"EcsClusterArn":{},"EcsContainerInstanceArn":{},"ElasticIp":{},"Hostname":{},"InfrastructureClass":{},"InstallUpdatesOnBoot":{"type":"boolean"},"InstanceId":{},"InstanceProfileArn":{},"InstanceType":{},"LastServiceErrorId":{},"LayerIds":{"shape":"S3"},"Os":{},"Platform":{},"PrivateDns":{},"PrivateIp":{},"PublicDns":{},"PublicIp":{},"RegisteredBy":{},"ReportedAgentVersion":{},"ReportedOs":{"type":"structure","members":{"Family":{},"Name":{},"Version":{}}},"RootDeviceType":{},"RootDeviceVolumeId":{},"SecurityGroupIds":{"shape":"S3"},"SshHostDsaKeyFingerprint":{},"SshHostRsaKeyFingerprint":{},"SshKeyName":{},"StackId":{},"Status":{},"SubnetId":{},"VirtualizationType":{}}}}}},"http":{}},"DescribeLayers":{"input":{"type":"structure","members":{"StackId":{},"LayerIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Layers":{"type":"list","member":{"type":"structure","members":{"StackId":{},"LayerId":{},"Type":{},"Name":{},"Shortname":{},"Attributes":{"shape":"S17"},"CustomInstanceProfileArn":{},"CustomJson":{},"CustomSecurityGroupIds":{"shape":"S3"},"DefaultSecurityGroupNames":{"shape":"S3"},"Packages":{"shape":"S3"},"VolumeConfigurations":{"shape":"S19"},"EnableAutoHealing":{"type":"boolean"},"AutoAssignElasticIps":{"type":"boolean"},"AutoAssignPublicIps":{"type":"boolean"},"DefaultRecipes":{"shape":"S1b"},"CustomRecipes":{"shape":"S1b"},"CreatedAt":{},"InstallUpdatesOnBoot":{"type":"boolean"},"UseEbsOptimizedInstances":{"type":"boolean"},"LifecycleEventConfiguration":{"shape":"S1c"}}}}}},"http":{}},"DescribeLoadBasedAutoScaling":{"input":{"type":"structure","required":["LayerIds"],"members":{"LayerIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"LoadBasedAutoScalingConfigurations":{"type":"list","member":{"type":"structure","members":{"LayerId":{},"Enable":{"type":"boolean"},"UpScaling":{"shape":"S30"},"DownScaling":{"shape":"S30"}}}}}},"http":{}},"DescribeMyUserProfile":{"output":{"type":"structure","members":{"UserProfile":{"type":"structure","members":{"IamUserArn":{},"Name":{},"SshUsername":{},"SshPublicKey":{}}}}},"http":{}},"DescribePermissions":{"input":{"type":"structure","members":{"IamUserArn":{},"StackId":{}}},"output":{"type":"structure","members":{"Permissions":{"type":"list","member":{"type":"structure","members":{"StackId":{},"IamUserArn":{},"AllowSsh":{"type":"boolean"},"AllowSudo":{"type":"boolean"},"Level":{}}}}}},"http":{}},"DescribeRaidArrays":{"input":{"type":"structure","members":{"InstanceId":{},"StackId":{},"RaidArrayIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"RaidArrays":{"type":"list","member":{"type":"structure","members":{"RaidArrayId":{},"InstanceId":{},"Name":{},"RaidLevel":{"type":"integer"},"NumberOfDisks":{"type":"integer"},"Size":{"type":"integer"},"Device":{},"MountPoint":{},"AvailabilityZone":{},"CreatedAt":{},"StackId":{},"VolumeType":{},"Iops":{"type":"integer"}}}}}},"http":{}},"DescribeRdsDbInstances":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{},"RdsDbInstanceArns":{"shape":"S3"}}},"output":{"type":"structure","members":{"RdsDbInstances":{"type":"list","member":{"type":"structure","members":{"RdsDbInstanceArn":{},"DbInstanceIdentifier":{},"DbUser":{},"DbPassword":{},"Region":{},"Address":{},"Engine":{},"StackId":{},"MissingOnRds":{"type":"boolean"}}}}}},"http":{}},"DescribeServiceErrors":{"input":{"type":"structure","members":{"StackId":{},"InstanceId":{},"ServiceErrorIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"ServiceErrors":{"type":"list","member":{"type":"structure","members":{"ServiceErrorId":{},"StackId":{},"InstanceId":{},"Type":{},"Message":{},"CreatedAt":{}}}}}},"http":{}},"DescribeStackProvisioningParameters":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}},"output":{"type":"structure","members":{"AgentInstallerUrl":{},"Parameters":{"type":"map","key":{},"value":{}}}},"http":{}},"DescribeStackSummary":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}},"output":{"type":"structure","members":{"StackSummary":{"type":"structure","members":{"StackId":{},"Name":{},"Arn":{},"LayersCount":{"type":"integer"},"AppsCount":{"type":"integer"},"InstancesCount":{"type":"structure","members":{"Assigning":{"type":"integer"},"Booting":{"type":"integer"},"ConnectionLost":{"type":"integer"},"Deregistering":{"type":"integer"},"Online":{"type":"integer"},"Pending":{"type":"integer"},"Rebooting":{"type":"integer"},"Registered":{"type":"integer"},"Registering":{"type":"integer"},"Requested":{"type":"integer"},"RunningSetup":{"type":"integer"},"SetupFailed":{"type":"integer"},"ShuttingDown":{"type":"integer"},"StartFailed":{"type":"integer"},"Stopped":{"type":"integer"},"Stopping":{"type":"integer"},"Terminated":{"type":"integer"},"Terminating":{"type":"integer"},"Unassigning":{"type":"integer"}}}}}}},"http":{}},"DescribeStacks":{"input":{"type":"structure","members":{"StackIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Stacks":{"type":"list","member":{"type":"structure","members":{"StackId":{},"Name":{},"Arn":{},"Region":{},"VpcId":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"UseOpsworksSecurityGroups":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"CreatedAt":{},"DefaultRootDeviceType":{},"AgentVersion":{}}}}}},"http":{}},"DescribeTimeBasedAutoScaling":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"TimeBasedAutoScalingConfigurations":{"type":"list","member":{"type":"structure","members":{"InstanceId":{},"AutoScalingSchedule":{"shape":"S40"}}}}}},"http":{}},"DescribeUserProfiles":{"input":{"type":"structure","members":{"IamUserArns":{"shape":"S3"}}},"output":{"type":"structure","members":{"UserProfiles":{"type":"list","member":{"type":"structure","members":{"IamUserArn":{},"Name":{},"SshUsername":{},"SshPublicKey":{},"AllowSelfManagement":{"type":"boolean"}}}}}},"http":{}},"DescribeVolumes":{"input":{"type":"structure","members":{"InstanceId":{},"StackId":{},"RaidArrayId":{},"VolumeIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Volumes":{"type":"list","member":{"type":"structure","members":{"VolumeId":{},"Ec2VolumeId":{},"Name":{},"RaidArrayId":{},"InstanceId":{},"Status":{},"Size":{"type":"integer"},"Device":{},"MountPoint":{},"Region":{},"AvailabilityZone":{},"VolumeType":{},"Iops":{"type":"integer"}}}}}},"http":{}},"DetachElasticLoadBalancer":{"input":{"type":"structure","required":["ElasticLoadBalancerName","LayerId"],"members":{"ElasticLoadBalancerName":{},"LayerId":{}}},"http":{}},"DisassociateElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{}}},"http":{}},"GetHostnameSuggestion":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{}}},"output":{"type":"structure","members":{"LayerId":{},"Hostname":{}}},"http":{}},"GrantAccess":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"ValidForInMinutes":{"type":"integer"}}},"output":{"type":"structure","members":{"TemporaryCredential":{"type":"structure","members":{"Username":{},"Password":{},"ValidForInMinutes":{"type":"integer"},"InstanceId":{}}}}},"http":{}},"RebootInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}},"http":{}},"RegisterEcsCluster":{"input":{"type":"structure","required":["EcsClusterArn","StackId"],"members":{"EcsClusterArn":{},"StackId":{}}},"output":{"type":"structure","members":{"EcsClusterArn":{}}},"http":{}},"RegisterElasticIp":{"input":{"type":"structure","required":["ElasticIp","StackId"],"members":{"ElasticIp":{},"StackId":{}}},"output":{"type":"structure","members":{"ElasticIp":{}}},"http":{}},"RegisterInstance":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{},"Hostname":{},"PublicIp":{},"PrivateIp":{},"RsaPublicKey":{},"RsaPublicKeyFingerprint":{},"InstanceIdentity":{"type":"structure","members":{"Document":{},"Signature":{}}}}},"output":{"type":"structure","members":{"InstanceId":{}}},"http":{}},"RegisterRdsDbInstance":{"input":{"type":"structure","required":["StackId","RdsDbInstanceArn","DbUser","DbPassword"],"members":{"StackId":{},"RdsDbInstanceArn":{},"DbUser":{},"DbPassword":{}}},"http":{}},"RegisterVolume":{"input":{"type":"structure","required":["StackId"],"members":{"Ec2VolumeId":{},"StackId":{}}},"output":{"type":"structure","members":{"VolumeId":{}}},"http":{}},"SetLoadBasedAutoScaling":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{},"Enable":{"type":"boolean"},"UpScaling":{"shape":"S30"},"DownScaling":{"shape":"S30"}}},"http":{}},"SetPermission":{"input":{"type":"structure","required":["StackId","IamUserArn"],"members":{"StackId":{},"IamUserArn":{},"AllowSsh":{"type":"boolean"},"AllowSudo":{"type":"boolean"},"Level":{}}},"http":{}},"SetTimeBasedAutoScaling":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"AutoScalingSchedule":{"shape":"S40"}}},"http":{}},"StartInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}},"http":{}},"StartStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}},"http":{}},"StopInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}},"http":{}},"StopStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}},"http":{}},"UnassignInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}},"http":{}},"UnassignVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{}}},"http":{}},"UpdateApp":{"input":{"type":"structure","required":["AppId"],"members":{"AppId":{},"Name":{},"Description":{},"DataSources":{"shape":"Si"},"Type":{},"AppSource":{"shape":"Sd"},"Domains":{"shape":"S3"},"EnableSsl":{"type":"boolean"},"SslConfiguration":{"shape":"Sl"},"Attributes":{"shape":"Sm"},"Environment":{"shape":"So"}}},"http":{}},"UpdateElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{},"Name":{}}},"http":{}},"UpdateInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"LayerIds":{"shape":"S3"},"InstanceType":{},"AutoScalingType":{},"Hostname":{},"Os":{},"AmiId":{},"SshKeyName":{},"Architecture":{},"InstallUpdatesOnBoot":{"type":"boolean"},"EbsOptimized":{"type":"boolean"},"AgentVersion":{}}},"http":{}},"UpdateLayer":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{},"Name":{},"Shortname":{},"Attributes":{"shape":"S17"},"CustomInstanceProfileArn":{},"CustomJson":{},"CustomSecurityGroupIds":{"shape":"S3"},"Packages":{"shape":"S3"},"VolumeConfigurations":{"shape":"S19"},"EnableAutoHealing":{"type":"boolean"},"AutoAssignElasticIps":{"type":"boolean"},"AutoAssignPublicIps":{"type":"boolean"},"CustomRecipes":{"shape":"S1b"},"InstallUpdatesOnBoot":{"type":"boolean"},"UseEbsOptimizedInstances":{"type":"boolean"},"LifecycleEventConfiguration":{"shape":"S1c"}}},"http":{}},"UpdateMyUserProfile":{"input":{"type":"structure","members":{"SshPublicKey":{}}},"http":{}},"UpdateRdsDbInstance":{"input":{"type":"structure","required":["RdsDbInstanceArn"],"members":{"RdsDbInstanceArn":{},"DbUser":{},"DbPassword":{}}},"http":{}},"UpdateStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{},"Name":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"DefaultRootDeviceType":{},"UseOpsworksSecurityGroups":{"type":"boolean"},"AgentVersion":{}}},"http":{}},"UpdateUserProfile":{"input":{"type":"structure","required":["IamUserArn"],"members":{"IamUserArn":{},"SshUsername":{},"SshPublicKey":{},"AllowSelfManagement":{"type":"boolean"}}},"http":{}},"UpdateVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{},"Name":{},"MountPoint":{}}},"http":{}}},"shapes":{"S3":{"type":"list","member":{}},"S8":{"type":"map","key":{},"value":{}},"Sa":{"type":"structure","members":{"Name":{},"Version":{}}},"Sb":{"type":"structure","members":{"ManageBerkshelf":{"type":"boolean"},"BerkshelfVersion":{}}},"Sd":{"type":"structure","members":{"Type":{},"Url":{},"Username":{},"Password":{},"SshKey":{},"Revision":{}}},"Si":{"type":"list","member":{"type":"structure","members":{"Type":{},"Arn":{},"DatabaseName":{}}}},"Sl":{"type":"structure","required":["Certificate","PrivateKey"],"members":{"Certificate":{},"PrivateKey":{},"Chain":{}}},"Sm":{"type":"map","key":{},"value":{}},"So":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{},"Secure":{"type":"boolean"}}}},"Ss":{"type":"structure","required":["Name"],"members":{"Name":{},"Args":{"type":"map","key":{},"value":{"shape":"S3"}}}},"Sz":{"type":"list","member":{"type":"structure","members":{"DeviceName":{},"NoDevice":{},"VirtualName":{},"Ebs":{"type":"structure","members":{"SnapshotId":{},"Iops":{"type":"integer"},"VolumeSize":{"type":"integer"},"VolumeType":{},"DeleteOnTermination":{"type":"boolean"}}}}}},"S17":{"type":"map","key":{},"value":{}},"S19":{"type":"list","member":{"type":"structure","required":["MountPoint","NumberOfDisks","Size"],"members":{"MountPoint":{},"RaidLevel":{"type":"integer"},"NumberOfDisks":{"type":"integer"},"Size":{"type":"integer"},"VolumeType":{},"Iops":{"type":"integer"}}}},"S1b":{"type":"structure","members":{"Setup":{"shape":"S3"},"Configure":{"shape":"S3"},"Deploy":{"shape":"S3"},"Undeploy":{"shape":"S3"},"Shutdown":{"shape":"S3"}}},"S1c":{"type":"structure","members":{"Shutdown":{"type":"structure","members":{"ExecutionTimeout":{"type":"integer"},"DelayUntilElbConnectionsDrained":{"type":"boolean"}}}}},"S30":{"type":"structure","members":{"InstanceCount":{"type":"integer"},"ThresholdsWaitTime":{"type":"integer"},"IgnoreMetricsTime":{"type":"integer"},"CpuThreshold":{"type":"double"},"MemoryThreshold":{"type":"double"},"LoadThreshold":{"type":"double"},"Alarms":{"shape":"S3"}}},"S40":{"type":"structure","members":{"Monday":{"shape":"S41"},"Tuesday":{"shape":"S41"},"Wednesday":{"shape":"S41"},"Thursday":{"shape":"S41"},"Friday":{"shape":"S41"},"Saturday":{"shape":"S41"},"Sunday":{"shape":"S41"}}},"S41":{"type":"map","key":{},"value":{}}},"paginators":{"DescribeApps":{"result_key":"Apps"},"DescribeCommands":{"result_key":"Commands"},"DescribeDeployments":{"result_key":"Deployments"},"DescribeEcsClusters":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"EcsClusters"},"DescribeElasticIps":{"result_key":"ElasticIps"},"DescribeElasticLoadBalancers":{"result_key":"ElasticLoadBalancers"},"DescribeInstances":{"result_key":"Instances"},"DescribeLayers":{"result_key":"Layers"},"DescribeLoadBasedAutoScaling":{"result_key":"LoadBasedAutoScalingConfigurations"},"DescribePermissions":{"result_key":"Permissions"},"DescribeRaidArrays":{"result_key":"RaidArrays"},"DescribeServiceErrors":{"result_key":"ServiceErrors"},"DescribeStacks":{"result_key":"Stacks"},"DescribeTimeBasedAutoScaling":{"result_key":"TimeBasedAutoScalingConfigurations"},"DescribeUserProfiles":{"result_key":"UserProfiles"},"DescribeVolumes":{"result_key":"Volumes"}}};
AWS.apiLoader.services['route53'] = {};                                                                                // 118
AWS.Route53 = AWS.Service.defineService('route53', [ '2013-04-01' ]);                                                  // 119
require('./services/route53');                                                                                         // 120
                                                                                                                       // 121
AWS.apiLoader.services['route53']['2013-04-01'] = {"version":"2.0","metadata":{"apiVersion":"2013-04-01","endpointPrefix":"route53","globalEndpoint":"route53.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"Route 53","serviceFullName":"Amazon Route 53","signatureVersion":"v4"},"operations":{"AssociateVPCWithHostedZone":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}/associatevpc"},"input":{"locationName":"AssociateVPCWithHostedZoneRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","VPC"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"VPC":{"shape":"S3"},"Comment":{}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"ChangeResourceRecordSets":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}/rrset/"},"input":{"locationName":"ChangeResourceRecordSetsRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","ChangeBatch"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"ChangeBatch":{"type":"structure","required":["Changes"],"members":{"Comment":{},"Changes":{"shape":"Se"}}}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"ChangeTagsForResource":{"http":{"requestUri":"/2013-04-01/tags/{ResourceType}/{ResourceId}"},"input":{"locationName":"ChangeTagsForResourceRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["ResourceType","ResourceId"],"members":{"ResourceType":{"location":"uri","locationName":"ResourceType"},"ResourceId":{"location":"uri","locationName":"ResourceId"},"AddTags":{"shape":"S14"},"RemoveTagKeys":{"type":"list","member":{"locationName":"Key"}}}},"output":{"type":"structure","members":{}}},"CreateHealthCheck":{"http":{"requestUri":"/2013-04-01/healthcheck","responseCode":201},"input":{"locationName":"CreateHealthCheckRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["CallerReference","HealthCheckConfig"],"members":{"CallerReference":{},"HealthCheckConfig":{"shape":"S1c"}}},"output":{"type":"structure","required":["HealthCheck","Location"],"members":{"HealthCheck":{"shape":"S1r"},"Location":{"location":"header","locationName":"Location"}}}},"CreateHostedZone":{"http":{"requestUri":"/2013-04-01/hostedzone","responseCode":201},"input":{"locationName":"CreateHostedZoneRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Name","CallerReference"],"members":{"Name":{},"VPC":{"shape":"S3"},"CallerReference":{},"HostedZoneConfig":{"shape":"S1w"},"DelegationSetId":{}}},"output":{"type":"structure","required":["HostedZone","ChangeInfo","DelegationSet","Location"],"members":{"HostedZone":{"shape":"S1z"},"ChangeInfo":{"shape":"S8"},"DelegationSet":{"shape":"S21"},"VPC":{"shape":"S3"},"Location":{"location":"header","locationName":"Location"}}}},"CreateReusableDelegationSet":{"http":{"requestUri":"/2013-04-01/delegationset","responseCode":201},"input":{"locationName":"CreateReusableDelegationSetRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["CallerReference"],"members":{"CallerReference":{},"HostedZoneId":{}}},"output":{"type":"structure","required":["DelegationSet","Location"],"members":{"DelegationSet":{"shape":"S21"},"Location":{"location":"header","locationName":"Location"}}}},"CreateTrafficPolicy":{"http":{"requestUri":"/2013-04-01/trafficpolicy","responseCode":201},"input":{"locationName":"CreateTrafficPolicyRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Name","Document"],"members":{"Name":{},"Document":{},"Comment":{}}},"output":{"type":"structure","required":["TrafficPolicy","Location"],"members":{"TrafficPolicy":{"shape":"S2a"},"Location":{"location":"header","locationName":"Location"}}}},"CreateTrafficPolicyInstance":{"http":{"requestUri":"/2013-04-01/trafficpolicyinstance","responseCode":201},"input":{"locationName":"CreateTrafficPolicyInstanceRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","Name","TTL","TrafficPolicyId","TrafficPolicyVersion"],"members":{"HostedZoneId":{},"Name":{},"TTL":{"type":"long"},"TrafficPolicyId":{},"TrafficPolicyVersion":{"type":"integer"}}},"output":{"type":"structure","required":["TrafficPolicyInstance","Location"],"members":{"TrafficPolicyInstance":{"shape":"S2f"},"Location":{"location":"header","locationName":"Location"}}}},"CreateTrafficPolicyVersion":{"http":{"requestUri":"/2013-04-01/trafficpolicy/{Id}","responseCode":201},"input":{"locationName":"CreateTrafficPolicyVersionRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Id","Document"],"members":{"Id":{"location":"uri","locationName":"Id"},"Document":{},"Comment":{}}},"output":{"type":"structure","required":["TrafficPolicy","Location"],"members":{"TrafficPolicy":{"shape":"S2a"},"Location":{"location":"header","locationName":"Location"}}}},"DeleteHealthCheck":{"http":{"method":"DELETE","requestUri":"/2013-04-01/healthcheck/{HealthCheckId}"},"input":{"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"}}},"output":{"type":"structure","members":{}}},"DeleteHostedZone":{"http":{"method":"DELETE","requestUri":"/2013-04-01/hostedzone/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"DeleteReusableDelegationSet":{"http":{"method":"DELETE","requestUri":"/2013-04-01/delegationset/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"DeleteTrafficPolicy":{"http":{"method":"DELETE","requestUri":"/2013-04-01/trafficpolicy/{Id}/{Version}"},"input":{"type":"structure","required":["Id","Version"],"members":{"Id":{"location":"uri","locationName":"Id"},"Version":{"location":"uri","locationName":"Version","type":"integer"}}},"output":{"type":"structure","members":{}}},"DeleteTrafficPolicyInstance":{"http":{"method":"DELETE","requestUri":"/2013-04-01/trafficpolicyinstance/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"DisassociateVPCFromHostedZone":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}/disassociatevpc"},"input":{"locationName":"DisassociateVPCFromHostedZoneRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","VPC"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"VPC":{"shape":"S3"},"Comment":{}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"GetChange":{"http":{"method":"GET","requestUri":"/2013-04-01/change/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"GetChangeDetails":{"http":{"method":"GET","requestUri":"/2013-04-01/changedetails/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}},"deprecated":true},"output":{"type":"structure","required":["ChangeBatchRecord"],"members":{"ChangeBatchRecord":{"shape":"S31"}},"deprecated":true},"deprecated":true},"GetCheckerIpRanges":{"http":{"method":"GET","requestUri":"/2013-04-01/checkeripranges"},"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["CheckerIpRanges"],"members":{"CheckerIpRanges":{"type":"list","member":{}}}}},"GetGeoLocation":{"http":{"method":"GET","requestUri":"/2013-04-01/geolocation"},"input":{"type":"structure","members":{"ContinentCode":{"location":"querystring","locationName":"continentcode"},"CountryCode":{"location":"querystring","locationName":"countrycode"},"SubdivisionCode":{"location":"querystring","locationName":"subdivisioncode"}}},"output":{"type":"structure","required":["GeoLocationDetails"],"members":{"GeoLocationDetails":{"shape":"S39"}}}},"GetHealthCheck":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheck/{HealthCheckId}"},"input":{"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"}}},"output":{"type":"structure","required":["HealthCheck"],"members":{"HealthCheck":{"shape":"S1r"}}}},"GetHealthCheckCount":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheckcount"},"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["HealthCheckCount"],"members":{"HealthCheckCount":{"type":"long"}}}},"GetHealthCheckLastFailureReason":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason"},"input":{"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"}}},"output":{"type":"structure","required":["HealthCheckObservations"],"members":{"HealthCheckObservations":{"shape":"S3k"}}}},"GetHealthCheckStatus":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheck/{HealthCheckId}/status"},"input":{"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"}}},"output":{"type":"structure","required":["HealthCheckObservations"],"members":{"HealthCheckObservations":{"shape":"S3k"}}}},"GetHostedZone":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzone/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["HostedZone"],"members":{"HostedZone":{"shape":"S1z"},"DelegationSet":{"shape":"S21"},"VPCs":{"type":"list","member":{"shape":"S3","locationName":"VPC"}}}}},"GetHostedZoneCount":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzonecount"},"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["HostedZoneCount"],"members":{"HostedZoneCount":{"type":"long"}}}},"GetReusableDelegationSet":{"http":{"method":"GET","requestUri":"/2013-04-01/delegationset/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["DelegationSet"],"members":{"DelegationSet":{"shape":"S21"}}}},"GetTrafficPolicy":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicy/{Id}/{Version}"},"input":{"type":"structure","required":["Id","Version"],"members":{"Id":{"location":"uri","locationName":"Id"},"Version":{"location":"uri","locationName":"Version","type":"integer"}}},"output":{"type":"structure","required":["TrafficPolicy"],"members":{"TrafficPolicy":{"shape":"S2a"}}}},"GetTrafficPolicyInstance":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstance/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["TrafficPolicyInstance"],"members":{"TrafficPolicyInstance":{"shape":"S2f"}}}},"GetTrafficPolicyInstanceCount":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstancecount"},"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["TrafficPolicyInstanceCount"],"members":{"TrafficPolicyInstanceCount":{"type":"integer"}}}},"ListChangeBatchesByHostedZone":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzone/{Id}/changes"},"input":{"type":"structure","required":["HostedZoneId","StartDate","EndDate"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"StartDate":{"shape":"S46","location":"querystring","locationName":"startDate"},"EndDate":{"shape":"S46","location":"querystring","locationName":"endDate"},"MaxItems":{"location":"querystring","locationName":"maxItems"},"Marker":{"location":"querystring","locationName":"marker"}},"deprecated":true},"output":{"type":"structure","required":["MaxItems","Marker","ChangeBatchRecords"],"members":{"MaxItems":{},"Marker":{},"IsTruncated":{"type":"boolean"},"ChangeBatchRecords":{"shape":"S4b"},"NextMarker":{}},"deprecated":true},"deprecated":true},"ListChangeBatchesByRRSet":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzone/{Id}/rrsChanges"},"input":{"type":"structure","required":["HostedZoneId","Name","Type","StartDate","EndDate"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"Name":{"location":"querystring","locationName":"rrSet_name"},"Type":{"location":"querystring","locationName":"type"},"SetIdentifier":{"location":"querystring","locationName":"identifier"},"StartDate":{"shape":"S46","location":"querystring","locationName":"startDate"},"EndDate":{"shape":"S46","location":"querystring","locationName":"endDate"},"MaxItems":{"location":"querystring","locationName":"maxItems"},"Marker":{"location":"querystring","locationName":"marker"}},"deprecated":true},"output":{"type":"structure","required":["MaxItems","Marker","ChangeBatchRecords"],"members":{"MaxItems":{},"Marker":{},"IsTruncated":{"type":"boolean"},"ChangeBatchRecords":{"shape":"S4b"},"NextMarker":{}},"deprecated":true},"deprecated":true},"ListGeoLocations":{"http":{"method":"GET","requestUri":"/2013-04-01/geolocations"},"input":{"type":"structure","members":{"StartContinentCode":{"location":"querystring","locationName":"startcontinentcode"},"StartCountryCode":{"location":"querystring","locationName":"startcountrycode"},"StartSubdivisionCode":{"location":"querystring","locationName":"startsubdivisioncode"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["GeoLocationDetailsList","IsTruncated","MaxItems"],"members":{"GeoLocationDetailsList":{"type":"list","member":{"shape":"S39","locationName":"GeoLocationDetails"}},"IsTruncated":{"type":"boolean"},"NextContinentCode":{},"NextCountryCode":{},"NextSubdivisionCode":{},"MaxItems":{}}}},"ListHealthChecks":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheck"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"marker"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["HealthChecks","Marker","IsTruncated","MaxItems"],"members":{"HealthChecks":{"type":"list","member":{"shape":"S1r","locationName":"HealthCheck"}},"Marker":{},"IsTruncated":{"type":"boolean"},"NextMarker":{},"MaxItems":{}}}},"ListHostedZones":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzone"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"marker"},"MaxItems":{"location":"querystring","locationName":"maxitems"},"DelegationSetId":{"location":"querystring","locationName":"delegationsetid"}}},"output":{"type":"structure","required":["HostedZones","Marker","IsTruncated","MaxItems"],"members":{"HostedZones":{"shape":"S4m"},"Marker":{},"IsTruncated":{"type":"boolean"},"NextMarker":{},"MaxItems":{}}}},"ListHostedZonesByName":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzonesbyname"},"input":{"type":"structure","members":{"DNSName":{"location":"querystring","locationName":"dnsname"},"HostedZoneId":{"location":"querystring","locationName":"hostedzoneid"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["HostedZones","IsTruncated","MaxItems"],"members":{"HostedZones":{"shape":"S4m"},"DNSName":{},"HostedZoneId":{},"IsTruncated":{"type":"boolean"},"NextDNSName":{},"NextHostedZoneId":{},"MaxItems":{}}}},"ListResourceRecordSets":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzone/{Id}/rrset"},"input":{"type":"structure","required":["HostedZoneId"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"StartRecordName":{"location":"querystring","locationName":"name"},"StartRecordType":{"location":"querystring","locationName":"type"},"StartRecordIdentifier":{"location":"querystring","locationName":"identifier"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["ResourceRecordSets","IsTruncated","MaxItems"],"members":{"ResourceRecordSets":{"type":"list","member":{"shape":"Sh","locationName":"ResourceRecordSet"}},"IsTruncated":{"type":"boolean"},"NextRecordName":{},"NextRecordType":{},"NextRecordIdentifier":{},"MaxItems":{}}}},"ListReusableDelegationSets":{"http":{"method":"GET","requestUri":"/2013-04-01/delegationset"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"marker"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["DelegationSets","Marker","IsTruncated","MaxItems"],"members":{"DelegationSets":{"type":"list","member":{"shape":"S21","locationName":"DelegationSet"}},"Marker":{},"IsTruncated":{"type":"boolean"},"NextMarker":{},"MaxItems":{}}}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2013-04-01/tags/{ResourceType}/{ResourceId}"},"input":{"type":"structure","required":["ResourceType","ResourceId"],"members":{"ResourceType":{"location":"uri","locationName":"ResourceType"},"ResourceId":{"location":"uri","locationName":"ResourceId"}}},"output":{"type":"structure","required":["ResourceTagSet"],"members":{"ResourceTagSet":{"shape":"S4x"}}}},"ListTagsForResources":{"http":{"requestUri":"/2013-04-01/tags/{ResourceType}"},"input":{"locationName":"ListTagsForResourcesRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["ResourceType","ResourceIds"],"members":{"ResourceType":{"location":"uri","locationName":"ResourceType"},"ResourceIds":{"type":"list","member":{"locationName":"ResourceId"}}}},"output":{"type":"structure","required":["ResourceTagSets"],"members":{"ResourceTagSets":{"type":"list","member":{"shape":"S4x","locationName":"ResourceTagSet"}}}}},"ListTrafficPolicies":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicies"},"input":{"type":"structure","members":{"TrafficPolicyIdMarker":{"location":"querystring","locationName":"trafficpolicyid"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicySummaries","IsTruncated","TrafficPolicyIdMarker","MaxItems"],"members":{"TrafficPolicySummaries":{"type":"list","member":{"locationName":"TrafficPolicySummary","type":"structure","required":["Id","Name","Type","LatestVersion","TrafficPolicyCount"],"members":{"Id":{},"Name":{},"Type":{},"LatestVersion":{"type":"integer"},"TrafficPolicyCount":{"type":"integer"}}}},"IsTruncated":{"type":"boolean"},"TrafficPolicyIdMarker":{},"MaxItems":{}}}},"ListTrafficPolicyInstances":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstances"},"input":{"type":"structure","members":{"HostedZoneIdMarker":{"location":"querystring","locationName":"hostedzoneid"},"TrafficPolicyInstanceNameMarker":{"location":"querystring","locationName":"trafficpolicyinstancename"},"TrafficPolicyInstanceTypeMarker":{"location":"querystring","locationName":"trafficpolicyinstancetype"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicyInstances","IsTruncated","MaxItems"],"members":{"TrafficPolicyInstances":{"shape":"S58"},"HostedZoneIdMarker":{},"TrafficPolicyInstanceNameMarker":{},"TrafficPolicyInstanceTypeMarker":{},"IsTruncated":{"type":"boolean"},"MaxItems":{}}}},"ListTrafficPolicyInstancesByHostedZone":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstances/hostedzone"},"input":{"type":"structure","required":["HostedZoneId"],"members":{"HostedZoneId":{"location":"querystring","locationName":"id"},"TrafficPolicyInstanceNameMarker":{"location":"querystring","locationName":"trafficpolicyinstancename"},"TrafficPolicyInstanceTypeMarker":{"location":"querystring","locationName":"trafficpolicyinstancetype"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicyInstances","IsTruncated","MaxItems"],"members":{"TrafficPolicyInstances":{"shape":"S58"},"TrafficPolicyInstanceNameMarker":{},"TrafficPolicyInstanceTypeMarker":{},"IsTruncated":{"type":"boolean"},"MaxItems":{}}}},"ListTrafficPolicyInstancesByPolicy":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstances/trafficpolicy"},"input":{"type":"structure","required":["TrafficPolicyId","TrafficPolicyVersion"],"members":{"TrafficPolicyId":{"location":"querystring","locationName":"id"},"TrafficPolicyVersion":{"location":"querystring","locationName":"version","type":"integer"},"HostedZoneIdMarker":{"location":"querystring","locationName":"hostedzoneid"},"TrafficPolicyInstanceNameMarker":{"location":"querystring","locationName":"trafficpolicyinstancename"},"TrafficPolicyInstanceTypeMarker":{"location":"querystring","locationName":"trafficpolicyinstancetype"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicyInstances","IsTruncated","MaxItems"],"members":{"TrafficPolicyInstances":{"shape":"S58"},"HostedZoneIdMarker":{},"TrafficPolicyInstanceNameMarker":{},"TrafficPolicyInstanceTypeMarker":{},"IsTruncated":{"type":"boolean"},"MaxItems":{}}}},"ListTrafficPolicyVersions":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicies/{Id}/versions"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"TrafficPolicyVersionMarker":{"location":"querystring","locationName":"trafficpolicyversion"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicies","IsTruncated","TrafficPolicyVersionMarker","MaxItems"],"members":{"TrafficPolicies":{"type":"list","member":{"shape":"S2a","locationName":"TrafficPolicy"}},"IsTruncated":{"type":"boolean"},"TrafficPolicyVersionMarker":{},"MaxItems":{}}}},"UpdateHealthCheck":{"http":{"requestUri":"/2013-04-01/healthcheck/{HealthCheckId}"},"input":{"locationName":"UpdateHealthCheckRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"},"HealthCheckVersion":{"type":"long"},"IPAddress":{},"Port":{"type":"integer"},"ResourcePath":{},"FullyQualifiedDomainName":{},"SearchString":{},"FailureThreshold":{"type":"integer"},"Inverted":{"type":"boolean"},"HealthThreshold":{"type":"integer"},"ChildHealthChecks":{"shape":"S1o"},"EnableSNI":{"type":"boolean"}}},"output":{"type":"structure","required":["HealthCheck"],"members":{"HealthCheck":{"shape":"S1r"}}}},"UpdateHostedZoneComment":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}"},"input":{"locationName":"UpdateHostedZoneCommentRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"Comment":{}}},"output":{"type":"structure","required":["HostedZone"],"members":{"HostedZone":{"shape":"S1z"}}}},"UpdateTrafficPolicyComment":{"http":{"requestUri":"/2013-04-01/trafficpolicy/{Id}/{Version}"},"input":{"locationName":"UpdateTrafficPolicyCommentRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Id","Version","Comment"],"members":{"Id":{"location":"uri","locationName":"Id"},"Version":{"location":"uri","locationName":"Version","type":"integer"},"Comment":{}}},"output":{"type":"structure","required":["TrafficPolicy"],"members":{"TrafficPolicy":{"shape":"S2a"}}}},"UpdateTrafficPolicyInstance":{"http":{"requestUri":"/2013-04-01/trafficpolicyinstance/{Id}"},"input":{"locationName":"UpdateTrafficPolicyInstanceRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Id","TTL","TrafficPolicyId","TrafficPolicyVersion"],"members":{"Id":{"location":"uri","locationName":"Id"},"TTL":{"type":"long"},"TrafficPolicyId":{},"TrafficPolicyVersion":{"type":"integer"}}},"output":{"type":"structure","required":["TrafficPolicyInstance"],"members":{"TrafficPolicyInstance":{"shape":"S2f"}}}}},"shapes":{"S3":{"type":"structure","members":{"VPCRegion":{},"VPCId":{}}},"S8":{"type":"structure","required":["Id","Status","SubmittedAt"],"members":{"Id":{},"Status":{},"SubmittedAt":{"type":"timestamp"},"Comment":{}}},"Se":{"type":"list","member":{"locationName":"Change","type":"structure","required":["Action","ResourceRecordSet"],"members":{"Action":{},"ResourceRecordSet":{"shape":"Sh"}}}},"Sh":{"type":"structure","required":["Name","Type"],"members":{"Name":{},"Type":{},"SetIdentifier":{},"Weight":{"type":"long"},"Region":{},"GeoLocation":{"type":"structure","members":{"ContinentCode":{},"CountryCode":{},"SubdivisionCode":{}}},"Failover":{},"TTL":{"type":"long"},"ResourceRecords":{"type":"list","member":{"locationName":"ResourceRecord","type":"structure","required":["Value"],"members":{"Value":{}}}},"AliasTarget":{"type":"structure","required":["HostedZoneId","DNSName","EvaluateTargetHealth"],"members":{"HostedZoneId":{},"DNSName":{},"EvaluateTargetHealth":{"type":"boolean"}}},"HealthCheckId":{},"TrafficPolicyInstanceId":{}}},"S14":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"S1c":{"type":"structure","required":["Type"],"members":{"IPAddress":{},"Port":{"type":"integer"},"Type":{},"ResourcePath":{},"FullyQualifiedDomainName":{},"SearchString":{},"RequestInterval":{"type":"integer"},"FailureThreshold":{"type":"integer"},"MeasureLatency":{"type":"boolean"},"Inverted":{"type":"boolean"},"HealthThreshold":{"type":"integer"},"ChildHealthChecks":{"shape":"S1o"},"EnableSNI":{"type":"boolean"}}},"S1o":{"type":"list","member":{"locationName":"ChildHealthCheck"}},"S1r":{"type":"structure","required":["Id","CallerReference","HealthCheckConfig","HealthCheckVersion"],"members":{"Id":{},"CallerReference":{},"HealthCheckConfig":{"shape":"S1c"},"HealthCheckVersion":{"type":"long"}}},"S1w":{"type":"structure","members":{"Comment":{},"PrivateZone":{"type":"boolean"}}},"S1z":{"type":"structure","required":["Id","Name","CallerReference"],"members":{"Id":{},"Name":{},"CallerReference":{},"Config":{"shape":"S1w"},"ResourceRecordSetCount":{"type":"long"}}},"S21":{"type":"structure","required":["NameServers"],"members":{"Id":{},"CallerReference":{},"NameServers":{"type":"list","member":{"locationName":"NameServer"}}}},"S2a":{"type":"structure","required":["Id","Version","Name","Type","Document"],"members":{"Id":{},"Version":{"type":"integer"},"Name":{},"Type":{},"Document":{},"Comment":{}}},"S2f":{"type":"structure","required":["Id","HostedZoneId","Name","TTL","State","Message","TrafficPolicyId","TrafficPolicyVersion","TrafficPolicyType"],"members":{"Id":{},"HostedZoneId":{},"Name":{},"TTL":{"type":"long"},"State":{},"Message":{},"TrafficPolicyId":{},"TrafficPolicyVersion":{"type":"integer"},"TrafficPolicyType":{}}},"S31":{"type":"structure","required":["Id","Status"],"members":{"Id":{},"SubmittedAt":{"type":"timestamp"},"Status":{},"Comment":{},"Submitter":{},"Changes":{"shape":"Se"}},"deprecated":true},"S39":{"type":"structure","members":{"ContinentCode":{},"ContinentName":{},"CountryCode":{},"CountryName":{},"SubdivisionCode":{},"SubdivisionName":{}}},"S3k":{"type":"list","member":{"locationName":"HealthCheckObservation","type":"structure","members":{"IPAddress":{},"StatusReport":{"type":"structure","members":{"Status":{},"CheckedTime":{"type":"timestamp"}}}}}},"S46":{"type":"string","deprecated":true},"S4b":{"type":"list","member":{"shape":"S31","locationName":"ChangeBatchRecord"},"deprecated":true},"S4m":{"type":"list","member":{"shape":"S1z","locationName":"HostedZone"}},"S4x":{"type":"structure","members":{"ResourceType":{},"ResourceId":{},"Tags":{"shape":"S14"}}},"S58":{"type":"list","member":{"shape":"S2f","locationName":"TrafficPolicyInstance"}}},"paginators":{"ListHealthChecks":{"input_token":"Marker","output_token":"NextMarker","more_results":"IsTruncated","limit_key":"MaxItems","result_key":"HealthChecks"},"ListHostedZones":{"input_token":"Marker","output_token":"NextMarker","more_results":"IsTruncated","limit_key":"MaxItems","result_key":"HostedZones"},"ListResourceRecordSets":{"more_results":"IsTruncated","limit_key":"MaxItems","result_key":"ResourceRecordSets","input_token":["StartRecordName","StartRecordType","StartRecordIdentifier"],"output_token":["NextRecordName","NextRecordType","NextRecordIdentifier"]}}};
AWS.apiLoader.services['s3'] = {};                                                                                     // 123
AWS.S3 = AWS.Service.defineService('s3', [ '2006-03-01' ]);                                                            // 124
require('./services/s3');                                                                                              // 125
                                                                                                                       // 126
AWS.apiLoader.services['s3']['2006-03-01'] = {"version":"2.0","metadata":{"apiVersion":"2006-03-01","checksumFormat":"md5","endpointPrefix":"s3","globalEndpoint":"s3.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"Amazon S3","serviceFullName":"Amazon Simple Storage Service","signatureVersion":"s3","timestampFormat":"rfc822"},"operations":{"AbortMultipartUpload":{"http":{"method":"DELETE","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key","UploadId"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"UploadId":{"location":"querystring","locationName":"uploadId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"CompleteMultipartUpload":{"http":{"requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key","UploadId"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"MultipartUpload":{"locationName":"CompleteMultipartUpload","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"Parts":{"locationName":"Part","type":"list","member":{"type":"structure","members":{"ETag":{},"PartNumber":{"type":"integer"}}},"flattened":true}}},"UploadId":{"location":"querystring","locationName":"uploadId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"MultipartUpload"},"output":{"type":"structure","members":{"Location":{},"Bucket":{},"Key":{},"Expiration":{"location":"header","locationName":"x-amz-expiration"},"ETag":{},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"CopyObject":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","CopySource","Key"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"Bucket":{"location":"uri","locationName":"Bucket"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentType":{"location":"header","locationName":"Content-Type"},"CopySource":{"location":"header","locationName":"x-amz-copy-source"},"CopySourceIfMatch":{"location":"header","locationName":"x-amz-copy-source-if-match"},"CopySourceIfModifiedSince":{"location":"header","locationName":"x-amz-copy-source-if-modified-since","type":"timestamp"},"CopySourceIfNoneMatch":{"location":"header","locationName":"x-amz-copy-source-if-none-match"},"CopySourceIfUnmodifiedSince":{"location":"header","locationName":"x-amz-copy-source-if-unmodified-since","type":"timestamp"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"},"Key":{"location":"uri","locationName":"Key"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"MetadataDirective":{"location":"header","locationName":"x-amz-metadata-directive"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S18","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"CopySourceSSECustomerAlgorithm":{"location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-algorithm"},"CopySourceSSECustomerKey":{"shape":"S1b","location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-key"},"CopySourceSSECustomerKeyMD5":{"location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"CopyObjectResult":{"type":"structure","members":{"ETag":{},"LastModified":{"type":"timestamp"}}},"Expiration":{"location":"header","locationName":"x-amz-expiration"},"CopySourceVersionId":{"location":"header","locationName":"x-amz-copy-source-version-id"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}},"payload":"CopyObjectResult"},"alias":"PutObjectCopy"},"CreateBucket":{"http":{"method":"PUT","requestUri":"/{Bucket}"},"input":{"type":"structure","required":["Bucket"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"Bucket":{"location":"uri","locationName":"Bucket"},"CreateBucketConfiguration":{"locationName":"CreateBucketConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"LocationConstraint":{}}},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWrite":{"location":"header","locationName":"x-amz-grant-write"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"}},"payload":"CreateBucketConfiguration"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"}}},"alias":"PutBucket"},"CreateMultipartUpload":{"http":{"requestUri":"/{Bucket}/{Key+}?uploads"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"Bucket":{"location":"uri","locationName":"Bucket"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentType":{"location":"header","locationName":"Content-Type"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"},"Key":{"location":"uri","locationName":"Key"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S18","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"Bucket":{"locationName":"Bucket"},"Key":{},"UploadId":{},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}},"alias":"InitiateMultipartUpload"},"DeleteBucket":{"http":{"method":"DELETE","requestUri":"/{Bucket}"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketCors":{"http":{"method":"DELETE","requestUri":"/{Bucket}?cors"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketLifecycle":{"http":{"method":"DELETE","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketPolicy":{"http":{"method":"DELETE","requestUri":"/{Bucket}?policy"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketReplication":{"http":{"method":"DELETE","requestUri":"/{Bucket}?replication"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketTagging":{"http":{"method":"DELETE","requestUri":"/{Bucket}?tagging"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketWebsite":{"http":{"method":"DELETE","requestUri":"/{Bucket}?website"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteObject":{"http":{"method":"DELETE","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"MFA":{"location":"header","locationName":"x-amz-mfa"},"VersionId":{"location":"querystring","locationName":"versionId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"DeleteMarker":{"location":"header","locationName":"x-amz-delete-marker","type":"boolean"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"DeleteObjects":{"http":{"requestUri":"/{Bucket}?delete"},"input":{"type":"structure","required":["Bucket","Delete"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Delete":{"locationName":"Delete","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Objects"],"members":{"Objects":{"locationName":"Object","type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"VersionId":{}}},"flattened":true},"Quiet":{"type":"boolean"}}},"MFA":{"location":"header","locationName":"x-amz-mfa"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"Delete"},"output":{"type":"structure","members":{"Deleted":{"type":"list","member":{"type":"structure","members":{"Key":{},"VersionId":{},"DeleteMarker":{"type":"boolean"},"DeleteMarkerVersionId":{}}},"flattened":true},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"},"Errors":{"locationName":"Error","type":"list","member":{"type":"structure","members":{"Key":{},"VersionId":{},"Code":{},"Message":{}}},"flattened":true}}},"alias":"DeleteMultipleObjects"},"GetBucketAcl":{"http":{"method":"GET","requestUri":"/{Bucket}?acl"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Owner":{"shape":"S2f"},"Grants":{"shape":"S2i","locationName":"AccessControlList"}}}},"GetBucketCors":{"http":{"method":"GET","requestUri":"/{Bucket}?cors"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"CORSRules":{"shape":"S2r","locationName":"CORSRule"}}}},"GetBucketLifecycle":{"http":{"method":"GET","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Rules":{"shape":"S34","locationName":"Rule"}}},"deprecated":true},"GetBucketLifecycleConfiguration":{"http":{"method":"GET","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Rules":{"shape":"S3h","locationName":"Rule"}}}},"GetBucketLocation":{"http":{"method":"GET","requestUri":"/{Bucket}?location"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"LocationConstraint":{}}}},"GetBucketLogging":{"http":{"method":"GET","requestUri":"/{Bucket}?logging"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"LoggingEnabled":{"shape":"S3p"}}}},"GetBucketNotification":{"http":{"method":"GET","requestUri":"/{Bucket}?notification"},"input":{"shape":"S3v"},"output":{"shape":"S3w"},"deprecated":true},"GetBucketNotificationConfiguration":{"http":{"method":"GET","requestUri":"/{Bucket}?notification"},"input":{"shape":"S3v"},"output":{"shape":"S47"}},"GetBucketPolicy":{"http":{"method":"GET","requestUri":"/{Bucket}?policy"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Policy":{}},"payload":"Policy"}},"GetBucketReplication":{"http":{"method":"GET","requestUri":"/{Bucket}?replication"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"ReplicationConfiguration":{"shape":"S4q"}},"payload":"ReplicationConfiguration"}},"GetBucketRequestPayment":{"http":{"method":"GET","requestUri":"/{Bucket}?requestPayment"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Payer":{}}}},"GetBucketTagging":{"http":{"method":"GET","requestUri":"/{Bucket}?tagging"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","required":["TagSet"],"members":{"TagSet":{"shape":"S51"}}}},"GetBucketVersioning":{"http":{"method":"GET","requestUri":"/{Bucket}?versioning"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Status":{},"MFADelete":{"locationName":"MfaDelete"}}}},"GetBucketWebsite":{"http":{"method":"GET","requestUri":"/{Bucket}?website"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"RedirectAllRequestsTo":{"shape":"S5a"},"IndexDocument":{"shape":"S5d"},"ErrorDocument":{"shape":"S5f"},"RoutingRules":{"shape":"S5g"}}}},"GetObject":{"http":{"method":"GET","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"IfMatch":{"location":"header","locationName":"If-Match"},"IfModifiedSince":{"location":"header","locationName":"If-Modified-Since","type":"timestamp"},"IfNoneMatch":{"location":"header","locationName":"If-None-Match"},"IfUnmodifiedSince":{"location":"header","locationName":"If-Unmodified-Since","type":"timestamp"},"Key":{"location":"uri","locationName":"Key"},"Range":{"location":"header","locationName":"Range"},"ResponseCacheControl":{"location":"querystring","locationName":"response-cache-control"},"ResponseContentDisposition":{"location":"querystring","locationName":"response-content-disposition"},"ResponseContentEncoding":{"location":"querystring","locationName":"response-content-encoding"},"ResponseContentLanguage":{"location":"querystring","locationName":"response-content-language"},"ResponseContentType":{"location":"querystring","locationName":"response-content-type"},"ResponseExpires":{"location":"querystring","locationName":"response-expires","type":"timestamp"},"VersionId":{"location":"querystring","locationName":"versionId"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S18","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"Body":{"streaming":true,"type":"blob"},"DeleteMarker":{"location":"header","locationName":"x-amz-delete-marker","type":"boolean"},"AcceptRanges":{"location":"header","locationName":"accept-ranges"},"Expiration":{"location":"header","locationName":"x-amz-expiration"},"Restore":{"location":"header","locationName":"x-amz-restore"},"LastModified":{"location":"header","locationName":"Last-Modified","type":"timestamp"},"ContentLength":{"location":"header","locationName":"Content-Length","type":"integer"},"ETag":{"location":"header","locationName":"ETag"},"MissingMeta":{"location":"header","locationName":"x-amz-missing-meta","type":"integer"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentRange":{"location":"header","locationName":"Content-Range"},"ContentType":{"location":"header","locationName":"Content-Type"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"},"ReplicationStatus":{"location":"header","locationName":"x-amz-replication-status"}},"payload":"Body"}},"GetObjectAcl":{"http":{"method":"GET","requestUri":"/{Bucket}/{Key+}?acl"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"VersionId":{"location":"querystring","locationName":"versionId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"Owner":{"shape":"S2f"},"Grants":{"shape":"S2i","locationName":"AccessControlList"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"GetObjectTorrent":{"http":{"method":"GET","requestUri":"/{Bucket}/{Key+}?torrent"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"Body":{"streaming":true,"type":"blob"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}},"payload":"Body"}},"HeadBucket":{"http":{"method":"HEAD","requestUri":"/{Bucket}"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"HeadObject":{"http":{"method":"HEAD","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"IfMatch":{"location":"header","locationName":"If-Match"},"IfModifiedSince":{"location":"header","locationName":"If-Modified-Since","type":"timestamp"},"IfNoneMatch":{"location":"header","locationName":"If-None-Match"},"IfUnmodifiedSince":{"location":"header","locationName":"If-Unmodified-Since","type":"timestamp"},"Key":{"location":"uri","locationName":"Key"},"Range":{"location":"header","locationName":"Range"},"VersionId":{"location":"querystring","locationName":"versionId"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S18","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"DeleteMarker":{"location":"header","locationName":"x-amz-delete-marker","type":"boolean"},"AcceptRanges":{"location":"header","locationName":"accept-ranges"},"Expiration":{"location":"header","locationName":"x-amz-expiration"},"Restore":{"location":"header","locationName":"x-amz-restore"},"LastModified":{"location":"header","locationName":"Last-Modified","type":"timestamp"},"ContentLength":{"location":"header","locationName":"Content-Length","type":"integer"},"ETag":{"location":"header","locationName":"ETag"},"MissingMeta":{"location":"header","locationName":"x-amz-missing-meta","type":"integer"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentType":{"location":"header","locationName":"Content-Type"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"},"ReplicationStatus":{"location":"header","locationName":"x-amz-replication-status"}}}},"ListBuckets":{"http":{"method":"GET"},"output":{"type":"structure","members":{"Buckets":{"type":"list","member":{"locationName":"Bucket","type":"structure","members":{"Name":{},"CreationDate":{"type":"timestamp"}}}},"Owner":{"shape":"S2f"}}},"alias":"GetService"},"ListMultipartUploads":{"http":{"method":"GET","requestUri":"/{Bucket}?uploads"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Delimiter":{"location":"querystring","locationName":"delimiter"},"EncodingType":{"location":"querystring","locationName":"encoding-type"},"KeyMarker":{"location":"querystring","locationName":"key-marker"},"MaxUploads":{"location":"querystring","locationName":"max-uploads","type":"integer"},"Prefix":{"location":"querystring","locationName":"prefix"},"UploadIdMarker":{"location":"querystring","locationName":"upload-id-marker"}}},"output":{"type":"structure","members":{"Bucket":{},"KeyMarker":{},"UploadIdMarker":{},"NextKeyMarker":{},"Prefix":{},"Delimiter":{},"NextUploadIdMarker":{},"MaxUploads":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Uploads":{"locationName":"Upload","type":"list","member":{"type":"structure","members":{"UploadId":{},"Key":{},"Initiated":{"type":"timestamp"},"StorageClass":{},"Owner":{"shape":"S2f"},"Initiator":{"shape":"S6x"}}},"flattened":true},"CommonPrefixes":{"shape":"S6y"},"EncodingType":{}}}},"ListObjectVersions":{"http":{"method":"GET","requestUri":"/{Bucket}?versions"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Delimiter":{"location":"querystring","locationName":"delimiter"},"EncodingType":{"location":"querystring","locationName":"encoding-type"},"KeyMarker":{"location":"querystring","locationName":"key-marker"},"MaxKeys":{"location":"querystring","locationName":"max-keys","type":"integer"},"Prefix":{"location":"querystring","locationName":"prefix"},"VersionIdMarker":{"location":"querystring","locationName":"version-id-marker"}}},"output":{"type":"structure","members":{"IsTruncated":{"type":"boolean"},"KeyMarker":{},"VersionIdMarker":{},"NextKeyMarker":{},"NextVersionIdMarker":{},"Versions":{"locationName":"Version","type":"list","member":{"type":"structure","members":{"ETag":{},"Size":{"type":"integer"},"StorageClass":{},"Key":{},"VersionId":{},"IsLatest":{"type":"boolean"},"LastModified":{"type":"timestamp"},"Owner":{"shape":"S2f"}}},"flattened":true},"DeleteMarkers":{"locationName":"DeleteMarker","type":"list","member":{"type":"structure","members":{"Owner":{"shape":"S2f"},"Key":{},"VersionId":{},"IsLatest":{"type":"boolean"},"LastModified":{"type":"timestamp"}}},"flattened":true},"Name":{},"Prefix":{},"Delimiter":{},"MaxKeys":{"type":"integer"},"CommonPrefixes":{"shape":"S6y"},"EncodingType":{}}},"alias":"GetBucketObjectVersions"},"ListObjects":{"http":{"method":"GET","requestUri":"/{Bucket}"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Delimiter":{"location":"querystring","locationName":"delimiter"},"EncodingType":{"location":"querystring","locationName":"encoding-type"},"Marker":{"location":"querystring","locationName":"marker"},"MaxKeys":{"location":"querystring","locationName":"max-keys","type":"integer"},"Prefix":{"location":"querystring","locationName":"prefix"}}},"output":{"type":"structure","members":{"IsTruncated":{"type":"boolean"},"Marker":{},"NextMarker":{},"Contents":{"type":"list","member":{"type":"structure","members":{"Key":{},"LastModified":{"type":"timestamp"},"ETag":{},"Size":{"type":"integer"},"StorageClass":{},"Owner":{"shape":"S2f"}}},"flattened":true},"Name":{},"Prefix":{},"Delimiter":{},"MaxKeys":{"type":"integer"},"CommonPrefixes":{"shape":"S6y"},"EncodingType":{}}},"alias":"GetBucket"},"ListParts":{"http":{"method":"GET","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key","UploadId"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"MaxParts":{"location":"querystring","locationName":"max-parts","type":"integer"},"PartNumberMarker":{"location":"querystring","locationName":"part-number-marker","type":"integer"},"UploadId":{"location":"querystring","locationName":"uploadId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"Bucket":{},"Key":{},"UploadId":{},"PartNumberMarker":{"type":"integer"},"NextPartNumberMarker":{"type":"integer"},"MaxParts":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Parts":{"locationName":"Part","type":"list","member":{"type":"structure","members":{"PartNumber":{"type":"integer"},"LastModified":{"type":"timestamp"},"ETag":{},"Size":{"type":"integer"}}},"flattened":true},"Initiator":{"shape":"S6x"},"Owner":{"shape":"S2f"},"StorageClass":{},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"PutBucketAcl":{"http":{"method":"PUT","requestUri":"/{Bucket}?acl"},"input":{"type":"structure","required":["Bucket"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"AccessControlPolicy":{"shape":"S7r","locationName":"AccessControlPolicy","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}},"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWrite":{"location":"header","locationName":"x-amz-grant-write"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"}},"payload":"AccessControlPolicy"}},"PutBucketCors":{"http":{"method":"PUT","requestUri":"/{Bucket}?cors"},"input":{"type":"structure","required":["Bucket","CORSConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"CORSConfiguration":{"locationName":"CORSConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["CORSRules"],"members":{"CORSRules":{"shape":"S2r","locationName":"CORSRule"}}},"ContentMD5":{"location":"header","locationName":"Content-MD5"}},"payload":"CORSConfiguration"}},"PutBucketLifecycle":{"http":{"method":"PUT","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"LifecycleConfiguration":{"locationName":"LifecycleConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Rules"],"members":{"Rules":{"shape":"S34","locationName":"Rule"}}}},"payload":"LifecycleConfiguration"},"deprecated":true},"PutBucketLifecycleConfiguration":{"http":{"method":"PUT","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"LifecycleConfiguration":{"locationName":"LifecycleConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Rules"],"members":{"Rules":{"shape":"S3h","locationName":"Rule"}}}},"payload":"LifecycleConfiguration"}},"PutBucketLogging":{"http":{"method":"PUT","requestUri":"/{Bucket}?logging"},"input":{"type":"structure","required":["Bucket","BucketLoggingStatus"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"BucketLoggingStatus":{"locationName":"BucketLoggingStatus","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"LoggingEnabled":{"shape":"S3p"}}},"ContentMD5":{"location":"header","locationName":"Content-MD5"}},"payload":"BucketLoggingStatus"}},"PutBucketNotification":{"http":{"method":"PUT","requestUri":"/{Bucket}?notification"},"input":{"type":"structure","required":["Bucket","NotificationConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"NotificationConfiguration":{"shape":"S3w","locationName":"NotificationConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"NotificationConfiguration"},"deprecated":true},"PutBucketNotificationConfiguration":{"http":{"method":"PUT","requestUri":"/{Bucket}?notification"},"input":{"type":"structure","required":["Bucket","NotificationConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"NotificationConfiguration":{"shape":"S47","locationName":"NotificationConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"NotificationConfiguration"}},"PutBucketPolicy":{"http":{"method":"PUT","requestUri":"/{Bucket}?policy"},"input":{"type":"structure","required":["Bucket","Policy"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"Policy":{}},"payload":"Policy"}},"PutBucketReplication":{"http":{"method":"PUT","requestUri":"/{Bucket}?replication"},"input":{"type":"structure","required":["Bucket","ReplicationConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"ReplicationConfiguration":{"shape":"S4q","locationName":"ReplicationConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"ReplicationConfiguration"}},"PutBucketRequestPayment":{"http":{"method":"PUT","requestUri":"/{Bucket}?requestPayment"},"input":{"type":"structure","required":["Bucket","RequestPaymentConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"RequestPaymentConfiguration":{"locationName":"RequestPaymentConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Payer"],"members":{"Payer":{}}}},"payload":"RequestPaymentConfiguration"}},"PutBucketTagging":{"http":{"method":"PUT","requestUri":"/{Bucket}?tagging"},"input":{"type":"structure","required":["Bucket","Tagging"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"Tagging":{"locationName":"Tagging","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["TagSet"],"members":{"TagSet":{"shape":"S51"}}}},"payload":"Tagging"}},"PutBucketVersioning":{"http":{"method":"PUT","requestUri":"/{Bucket}?versioning"},"input":{"type":"structure","required":["Bucket","VersioningConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"MFA":{"location":"header","locationName":"x-amz-mfa"},"VersioningConfiguration":{"locationName":"VersioningConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"MFADelete":{"locationName":"MfaDelete"},"Status":{}}}},"payload":"VersioningConfiguration"}},"PutBucketWebsite":{"http":{"method":"PUT","requestUri":"/{Bucket}?website"},"input":{"type":"structure","required":["Bucket","WebsiteConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"WebsiteConfiguration":{"locationName":"WebsiteConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"ErrorDocument":{"shape":"S5f"},"IndexDocument":{"shape":"S5d"},"RedirectAllRequestsTo":{"shape":"S5a"},"RoutingRules":{"shape":"S5g"}}}},"payload":"WebsiteConfiguration"}},"PutObject":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"Body":{"streaming":true,"type":"blob"},"Bucket":{"location":"uri","locationName":"Bucket"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentLength":{"location":"header","locationName":"Content-Length","type":"integer"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"ContentType":{"location":"header","locationName":"Content-Type"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"},"Key":{"location":"uri","locationName":"Key"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S18","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"Body"},"output":{"type":"structure","members":{"Expiration":{"location":"header","locationName":"x-amz-expiration"},"ETag":{"location":"header","locationName":"ETag"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"PutObjectAcl":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}?acl"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"AccessControlPolicy":{"shape":"S7r","locationName":"AccessControlPolicy","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}},"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWrite":{"location":"header","locationName":"x-amz-grant-write"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"},"Key":{"location":"uri","locationName":"Key"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"AccessControlPolicy"},"output":{"type":"structure","members":{"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"RestoreObject":{"http":{"requestUri":"/{Bucket}/{Key+}?restore"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"VersionId":{"location":"querystring","locationName":"versionId"},"RestoreRequest":{"locationName":"RestoreRequest","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Days"],"members":{"Days":{"type":"integer"}}},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"RestoreRequest"},"output":{"type":"structure","members":{"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}},"alias":"PostObjectRestore"},"UploadPart":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key","PartNumber","UploadId"],"members":{"Body":{"streaming":true,"type":"blob"},"Bucket":{"location":"uri","locationName":"Bucket"},"ContentLength":{"location":"header","locationName":"Content-Length","type":"integer"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"Key":{"location":"uri","locationName":"Key"},"PartNumber":{"location":"querystring","locationName":"partNumber","type":"integer"},"UploadId":{"location":"querystring","locationName":"uploadId"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S18","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"Body"},"output":{"type":"structure","members":{"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"ETag":{"location":"header","locationName":"ETag"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"UploadPartCopy":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","CopySource","Key","PartNumber","UploadId"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"CopySource":{"location":"header","locationName":"x-amz-copy-source"},"CopySourceIfMatch":{"location":"header","locationName":"x-amz-copy-source-if-match"},"CopySourceIfModifiedSince":{"location":"header","locationName":"x-amz-copy-source-if-modified-since","type":"timestamp"},"CopySourceIfNoneMatch":{"location":"header","locationName":"x-amz-copy-source-if-none-match"},"CopySourceIfUnmodifiedSince":{"location":"header","locationName":"x-amz-copy-source-if-unmodified-since","type":"timestamp"},"CopySourceRange":{"location":"header","locationName":"x-amz-copy-source-range"},"Key":{"location":"uri","locationName":"Key"},"PartNumber":{"location":"querystring","locationName":"partNumber","type":"integer"},"UploadId":{"location":"querystring","locationName":"uploadId"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S18","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"CopySourceSSECustomerAlgorithm":{"location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-algorithm"},"CopySourceSSECustomerKey":{"shape":"S1b","location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-key"},"CopySourceSSECustomerKeyMD5":{"location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"CopySourceVersionId":{"location":"header","locationName":"x-amz-copy-source-version-id"},"CopyPartResult":{"type":"structure","members":{"ETag":{},"LastModified":{"type":"timestamp"}}},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}},"payload":"CopyPartResult"}}},"shapes":{"Sj":{"type":"string","sensitive":true},"S11":{"type":"map","key":{},"value":{}},"S18":{"type":"blob","sensitive":true},"S1b":{"type":"blob","sensitive":true},"S2f":{"type":"structure","members":{"DisplayName":{},"ID":{}}},"S2i":{"type":"list","member":{"locationName":"Grant","type":"structure","members":{"Grantee":{"shape":"S2k"},"Permission":{}}}},"S2k":{"type":"structure","required":["Type"],"members":{"DisplayName":{},"EmailAddress":{},"ID":{},"Type":{"locationName":"xsi:type","xmlAttribute":true},"URI":{}},"xmlNamespace":{"prefix":"xsi","uri":"http://www.w3.org/2001/XMLSchema-instance"}},"S2r":{"type":"list","member":{"type":"structure","required":["AllowedMethods","AllowedOrigins"],"members":{"AllowedHeaders":{"locationName":"AllowedHeader","type":"list","member":{},"flattened":true},"AllowedMethods":{"locationName":"AllowedMethod","type":"list","member":{},"flattened":true},"AllowedOrigins":{"locationName":"AllowedOrigin","type":"list","member":{},"flattened":true},"ExposeHeaders":{"locationName":"ExposeHeader","type":"list","member":{},"flattened":true},"MaxAgeSeconds":{"type":"integer"}}},"flattened":true},"S34":{"type":"list","member":{"type":"structure","required":["Prefix","Status"],"members":{"Expiration":{"shape":"S36"},"ID":{},"Prefix":{},"Status":{},"Transition":{"shape":"S3b"},"NoncurrentVersionTransition":{"shape":"S3d"},"NoncurrentVersionExpiration":{"shape":"S3e"}}},"flattened":true},"S36":{"type":"structure","members":{"Date":{"shape":"S37"},"Days":{"type":"integer"}}},"S37":{"type":"timestamp","timestampFormat":"iso8601"},"S3b":{"type":"structure","members":{"Date":{"shape":"S37"},"Days":{"type":"integer"},"StorageClass":{}}},"S3d":{"type":"structure","members":{"NoncurrentDays":{"type":"integer"},"StorageClass":{}}},"S3e":{"type":"structure","members":{"NoncurrentDays":{"type":"integer"}}},"S3h":{"type":"list","member":{"type":"structure","required":["Prefix","Status"],"members":{"Expiration":{"shape":"S36"},"ID":{},"Prefix":{},"Status":{},"Transitions":{"locationName":"Transition","type":"list","member":{"shape":"S3b"},"flattened":true},"NoncurrentVersionTransitions":{"locationName":"NoncurrentVersionTransition","type":"list","member":{"shape":"S3d"},"flattened":true},"NoncurrentVersionExpiration":{"shape":"S3e"}}},"flattened":true},"S3p":{"type":"structure","members":{"TargetBucket":{},"TargetGrants":{"type":"list","member":{"locationName":"Grant","type":"structure","members":{"Grantee":{"shape":"S2k"},"Permission":{}}}},"TargetPrefix":{}}},"S3v":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"S3w":{"type":"structure","members":{"TopicConfiguration":{"type":"structure","members":{"Id":{},"Events":{"shape":"S3z","locationName":"Event"},"Event":{"deprecated":true},"Topic":{}}},"QueueConfiguration":{"type":"structure","members":{"Id":{},"Event":{"deprecated":true},"Events":{"shape":"S3z","locationName":"Event"},"Queue":{}}},"CloudFunctionConfiguration":{"type":"structure","members":{"Id":{},"Event":{"deprecated":true},"Events":{"shape":"S3z","locationName":"Event"},"CloudFunction":{},"InvocationRole":{}}}}},"S3z":{"type":"list","member":{},"flattened":true},"S47":{"type":"structure","members":{"TopicConfigurations":{"locationName":"TopicConfiguration","type":"list","member":{"type":"structure","required":["TopicArn","Events"],"members":{"Id":{},"TopicArn":{"locationName":"Topic"},"Events":{"shape":"S3z","locationName":"Event"},"Filter":{"shape":"S4a"}}},"flattened":true},"QueueConfigurations":{"locationName":"QueueConfiguration","type":"list","member":{"type":"structure","required":["QueueArn","Events"],"members":{"Id":{},"QueueArn":{"locationName":"Queue"},"Events":{"shape":"S3z","locationName":"Event"},"Filter":{"shape":"S4a"}}},"flattened":true},"LambdaFunctionConfigurations":{"locationName":"CloudFunctionConfiguration","type":"list","member":{"type":"structure","required":["LambdaFunctionArn","Events"],"members":{"Id":{},"LambdaFunctionArn":{"locationName":"CloudFunction"},"Events":{"shape":"S3z","locationName":"Event"},"Filter":{"shape":"S4a"}}},"flattened":true}}},"S4a":{"type":"structure","members":{"Key":{"locationName":"S3Key","type":"structure","members":{"FilterRules":{"locationName":"FilterRule","type":"list","member":{"type":"structure","members":{"Name":{},"Value":{}}},"flattened":true}}}}},"S4q":{"type":"structure","required":["Role","Rules"],"members":{"Role":{},"Rules":{"locationName":"Rule","type":"list","member":{"type":"structure","required":["Prefix","Status","Destination"],"members":{"ID":{},"Prefix":{},"Status":{},"Destination":{"type":"structure","required":["Bucket"],"members":{"Bucket":{},"StorageClass":{}}}}},"flattened":true}}},"S51":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S5a":{"type":"structure","required":["HostName"],"members":{"HostName":{},"Protocol":{}}},"S5d":{"type":"structure","required":["Suffix"],"members":{"Suffix":{}}},"S5f":{"type":"structure","required":["Key"],"members":{"Key":{}}},"S5g":{"type":"list","member":{"locationName":"RoutingRule","type":"structure","required":["Redirect"],"members":{"Condition":{"type":"structure","members":{"HttpErrorCodeReturnedEquals":{},"KeyPrefixEquals":{}}},"Redirect":{"type":"structure","members":{"HostName":{},"HttpRedirectCode":{},"Protocol":{},"ReplaceKeyPrefixWith":{},"ReplaceKeyWith":{}}}}}},"S6x":{"type":"structure","members":{"ID":{},"DisplayName":{}}},"S6y":{"type":"list","member":{"type":"structure","members":{"Prefix":{}}},"flattened":true},"S7r":{"type":"structure","members":{"Grants":{"shape":"S2i","locationName":"AccessControlList"},"Owner":{"shape":"S2f"}}}},"paginators":{"ListBuckets":{"result_key":"Buckets"},"ListMultipartUploads":{"limit_key":"MaxUploads","more_results":"IsTruncated","output_token":["NextKeyMarker","NextUploadIdMarker"],"input_token":["KeyMarker","UploadIdMarker"],"result_key":["Uploads","CommonPrefixes"]},"ListObjectVersions":{"more_results":"IsTruncated","limit_key":"MaxKeys","output_token":["NextKeyMarker","NextVersionIdMarker"],"input_token":["KeyMarker","VersionIdMarker"],"result_key":["Versions","DeleteMarkers","CommonPrefixes"]},"ListObjects":{"more_results":"IsTruncated","limit_key":"MaxKeys","output_token":"NextMarker || Contents[-1].Key","input_token":"Marker","result_key":["Contents","CommonPrefixes"]},"ListParts":{"more_results":"IsTruncated","limit_key":"MaxParts","output_token":"NextPartNumberMarker","input_token":"PartNumberMarker","result_key":"Parts"}},"waiters":{"__default__":{"interval":5,"max_attempts":20},"BucketExists":{"operation":"HeadBucket","ignore_errors":[404],"success_type":"output"},"BucketNotExists":{"operation":"HeadBucket","success_type":"error","success_value":404},"ObjectExists":{"operation":"HeadObject","ignore_errors":[404],"success_type":"output"},"ObjectNotExists":{"operation":"HeadObject","success_type":"error","success_value":404}}};
AWS.apiLoader.services['sns'] = {};                                                                                    // 128
AWS.SNS = AWS.Service.defineService('sns', [ '2010-03-31' ]);                                                          // 129
                                                                                                                       // 130
AWS.apiLoader.services['sns']['2010-03-31'] = {"metadata":{"apiVersion":"2010-03-31","endpointPrefix":"sns","serviceAbbreviation":"Amazon SNS","serviceFullName":"Amazon Simple Notification Service","signatureVersion":"v4","xmlNamespace":"http://sns.amazonaws.com/doc/2010-03-31/","protocol":"query"},"operations":{"AddPermission":{"input":{"type":"structure","required":["TopicArn","Label","AWSAccountId","ActionName"],"members":{"TopicArn":{},"Label":{},"AWSAccountId":{"type":"list","member":{}},"ActionName":{"type":"list","member":{}}}},"http":{}},"ConfirmSubscription":{"input":{"type":"structure","required":["TopicArn","Token"],"members":{"TopicArn":{},"Token":{},"AuthenticateOnUnsubscribe":{}}},"output":{"resultWrapper":"ConfirmSubscriptionResult","type":"structure","members":{"SubscriptionArn":{}}},"http":{}},"CreatePlatformApplication":{"input":{"type":"structure","required":["Name","Platform","Attributes"],"members":{"Name":{},"Platform":{},"Attributes":{"shape":"Sf"}}},"output":{"resultWrapper":"CreatePlatformApplicationResult","type":"structure","members":{"PlatformApplicationArn":{}}},"http":{}},"CreatePlatformEndpoint":{"input":{"type":"structure","required":["PlatformApplicationArn","Token"],"members":{"PlatformApplicationArn":{},"Token":{},"CustomUserData":{},"Attributes":{"shape":"Sf"}}},"output":{"resultWrapper":"CreatePlatformEndpointResult","type":"structure","members":{"EndpointArn":{}}},"http":{}},"CreateTopic":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"resultWrapper":"CreateTopicResult","type":"structure","members":{"TopicArn":{}}},"http":{}},"DeleteEndpoint":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{}}},"http":{}},"DeletePlatformApplication":{"input":{"type":"structure","required":["PlatformApplicationArn"],"members":{"PlatformApplicationArn":{}}},"http":{}},"DeleteTopic":{"input":{"type":"structure","required":["TopicArn"],"members":{"TopicArn":{}}},"http":{}},"GetEndpointAttributes":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{}}},"output":{"resultWrapper":"GetEndpointAttributesResult","type":"structure","members":{"Attributes":{"shape":"Sf"}}},"http":{}},"GetPlatformApplicationAttributes":{"input":{"type":"structure","required":["PlatformApplicationArn"],"members":{"PlatformApplicationArn":{}}},"output":{"resultWrapper":"GetPlatformApplicationAttributesResult","type":"structure","members":{"Attributes":{"shape":"Sf"}}},"http":{}},"GetSubscriptionAttributes":{"input":{"type":"structure","required":["SubscriptionArn"],"members":{"SubscriptionArn":{}}},"output":{"resultWrapper":"GetSubscriptionAttributesResult","type":"structure","members":{"Attributes":{"type":"map","key":{},"value":{}}}},"http":{}},"GetTopicAttributes":{"input":{"type":"structure","required":["TopicArn"],"members":{"TopicArn":{}}},"output":{"resultWrapper":"GetTopicAttributesResult","type":"structure","members":{"Attributes":{"type":"map","key":{},"value":{}}}},"http":{}},"ListEndpointsByPlatformApplication":{"input":{"type":"structure","required":["PlatformApplicationArn"],"members":{"PlatformApplicationArn":{},"NextToken":{}}},"output":{"resultWrapper":"ListEndpointsByPlatformApplicationResult","type":"structure","members":{"Endpoints":{"type":"list","member":{"type":"structure","members":{"EndpointArn":{},"Attributes":{"shape":"Sf"}}}},"NextToken":{}}},"http":{}},"ListPlatformApplications":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"ListPlatformApplicationsResult","type":"structure","members":{"PlatformApplications":{"type":"list","member":{"type":"structure","members":{"PlatformApplicationArn":{},"Attributes":{"shape":"Sf"}}}},"NextToken":{}}},"http":{}},"ListSubscriptions":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"ListSubscriptionsResult","type":"structure","members":{"Subscriptions":{"shape":"S1c"},"NextToken":{}}},"http":{}},"ListSubscriptionsByTopic":{"input":{"type":"structure","required":["TopicArn"],"members":{"TopicArn":{},"NextToken":{}}},"output":{"resultWrapper":"ListSubscriptionsByTopicResult","type":"structure","members":{"Subscriptions":{"shape":"S1c"},"NextToken":{}}},"http":{}},"ListTopics":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"ListTopicsResult","type":"structure","members":{"Topics":{"type":"list","member":{"type":"structure","members":{"TopicArn":{}}}},"NextToken":{}}},"http":{}},"Publish":{"input":{"type":"structure","required":["Message"],"members":{"TopicArn":{},"TargetArn":{},"Message":{},"Subject":{},"MessageStructure":{},"MessageAttributes":{"type":"map","key":{"locationName":"Name"},"value":{"locationName":"Value","type":"structure","required":["DataType"],"members":{"DataType":{},"StringValue":{},"BinaryValue":{"type":"blob"}}}}}},"output":{"resultWrapper":"PublishResult","type":"structure","members":{"MessageId":{}}},"http":{}},"RemovePermission":{"input":{"type":"structure","required":["TopicArn","Label"],"members":{"TopicArn":{},"Label":{}}},"http":{}},"SetEndpointAttributes":{"input":{"type":"structure","required":["EndpointArn","Attributes"],"members":{"EndpointArn":{},"Attributes":{"shape":"Sf"}}},"http":{}},"SetPlatformApplicationAttributes":{"input":{"type":"structure","required":["PlatformApplicationArn","Attributes"],"members":{"PlatformApplicationArn":{},"Attributes":{"shape":"Sf"}}},"http":{}},"SetSubscriptionAttributes":{"input":{"type":"structure","required":["SubscriptionArn","AttributeName"],"members":{"SubscriptionArn":{},"AttributeName":{},"AttributeValue":{}}},"http":{}},"SetTopicAttributes":{"input":{"type":"structure","required":["TopicArn","AttributeName"],"members":{"TopicArn":{},"AttributeName":{},"AttributeValue":{}}},"http":{}},"Subscribe":{"input":{"type":"structure","required":["TopicArn","Protocol"],"members":{"TopicArn":{},"Protocol":{},"Endpoint":{}}},"output":{"resultWrapper":"SubscribeResult","type":"structure","members":{"SubscriptionArn":{}}},"http":{}},"Unsubscribe":{"input":{"type":"structure","required":["SubscriptionArn"],"members":{"SubscriptionArn":{}}},"http":{}}},"shapes":{"Sf":{"type":"map","key":{},"value":{}},"S1c":{"type":"list","member":{"type":"structure","members":{"SubscriptionArn":{},"Owner":{},"Protocol":{},"Endpoint":{},"TopicArn":{}}}}},"paginators":{"ListEndpointsByPlatformApplication":{"input_token":"NextToken","output_token":"NextToken","result_key":"Endpoints"},"ListPlatformApplications":{"input_token":"NextToken","output_token":"NextToken","result_key":"PlatformApplications"},"ListSubscriptions":{"input_token":"NextToken","output_token":"NextToken","result_key":"Subscriptions"},"ListSubscriptionsByTopic":{"input_token":"NextToken","output_token":"NextToken","result_key":"Subscriptions"},"ListTopics":{"input_token":"NextToken","output_token":"NextToken","result_key":"Topics"}}};
AWS.apiLoader.services['sqs'] = {};                                                                                    // 132
AWS.SQS = AWS.Service.defineService('sqs', [ '2012-11-05' ]);                                                          // 133
require('./services/sqs');                                                                                             // 134
                                                                                                                       // 135
AWS.apiLoader.services['sqs']['2012-11-05'] = {"version":"2.0","metadata":{"apiVersion":"2012-11-05","endpointPrefix":"sqs","serviceAbbreviation":"Amazon SQS","serviceFullName":"Amazon Simple Queue Service","signatureVersion":"v4","xmlNamespace":"http://queue.amazonaws.com/doc/2012-11-05/","protocol":"query"},"operations":{"AddPermission":{"input":{"type":"structure","required":["QueueUrl","Label","AWSAccountIds","Actions"],"members":{"QueueUrl":{},"Label":{},"AWSAccountIds":{"type":"list","member":{"locationName":"AWSAccountId"},"flattened":true},"Actions":{"type":"list","member":{"locationName":"ActionName"},"flattened":true}}},"http":{}},"ChangeMessageVisibility":{"input":{"type":"structure","required":["QueueUrl","ReceiptHandle","VisibilityTimeout"],"members":{"QueueUrl":{},"ReceiptHandle":{},"VisibilityTimeout":{"type":"integer"}}},"http":{}},"ChangeMessageVisibilityBatch":{"input":{"type":"structure","required":["QueueUrl","Entries"],"members":{"QueueUrl":{},"Entries":{"type":"list","member":{"locationName":"ChangeMessageVisibilityBatchRequestEntry","type":"structure","required":["Id","ReceiptHandle"],"members":{"Id":{},"ReceiptHandle":{},"VisibilityTimeout":{"type":"integer"}}},"flattened":true}}},"output":{"resultWrapper":"ChangeMessageVisibilityBatchResult","type":"structure","required":["Successful","Failed"],"members":{"Successful":{"type":"list","member":{"locationName":"ChangeMessageVisibilityBatchResultEntry","type":"structure","required":["Id"],"members":{"Id":{}}},"flattened":true},"Failed":{"shape":"Sd"}}},"http":{}},"CreateQueue":{"input":{"type":"structure","required":["QueueName"],"members":{"QueueName":{},"Attributes":{"shape":"Sh","locationName":"Attribute"}}},"output":{"resultWrapper":"CreateQueueResult","type":"structure","members":{"QueueUrl":{}}},"http":{}},"DeleteMessage":{"input":{"type":"structure","required":["QueueUrl","ReceiptHandle"],"members":{"QueueUrl":{},"ReceiptHandle":{}}},"http":{}},"DeleteMessageBatch":{"input":{"type":"structure","required":["QueueUrl","Entries"],"members":{"QueueUrl":{},"Entries":{"type":"list","member":{"locationName":"DeleteMessageBatchRequestEntry","type":"structure","required":["Id","ReceiptHandle"],"members":{"Id":{},"ReceiptHandle":{}}},"flattened":true}}},"output":{"resultWrapper":"DeleteMessageBatchResult","type":"structure","required":["Successful","Failed"],"members":{"Successful":{"type":"list","member":{"locationName":"DeleteMessageBatchResultEntry","type":"structure","required":["Id"],"members":{"Id":{}}},"flattened":true},"Failed":{"shape":"Sd"}}},"http":{}},"DeleteQueue":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{}}},"http":{}},"GetQueueAttributes":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{},"AttributeNames":{"shape":"St"}}},"output":{"resultWrapper":"GetQueueAttributesResult","type":"structure","members":{"Attributes":{"shape":"Sh","locationName":"Attribute"}}},"http":{}},"GetQueueUrl":{"input":{"type":"structure","required":["QueueName"],"members":{"QueueName":{},"QueueOwnerAWSAccountId":{}}},"output":{"resultWrapper":"GetQueueUrlResult","type":"structure","members":{"QueueUrl":{}}},"http":{}},"ListDeadLetterSourceQueues":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{}}},"output":{"resultWrapper":"ListDeadLetterSourceQueuesResult","type":"structure","required":["queueUrls"],"members":{"queueUrls":{"shape":"Sz"}}},"http":{}},"ListQueues":{"input":{"type":"structure","members":{"QueueNamePrefix":{}}},"output":{"resultWrapper":"ListQueuesResult","type":"structure","members":{"QueueUrls":{"shape":"Sz"}}},"http":{}},"PurgeQueue":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{}}},"http":{}},"ReceiveMessage":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{},"AttributeNames":{"shape":"St"},"MessageAttributeNames":{"type":"list","member":{"locationName":"MessageAttributeName"},"flattened":true},"MaxNumberOfMessages":{"type":"integer"},"VisibilityTimeout":{"type":"integer"},"WaitTimeSeconds":{"type":"integer"}}},"output":{"resultWrapper":"ReceiveMessageResult","type":"structure","members":{"Messages":{"type":"list","member":{"locationName":"Message","type":"structure","members":{"MessageId":{},"ReceiptHandle":{},"MD5OfBody":{},"Body":{},"Attributes":{"shape":"Sh","locationName":"Attribute"},"MD5OfMessageAttributes":{},"MessageAttributes":{"shape":"S19","locationName":"MessageAttribute"}}},"flattened":true}}},"http":{}},"RemovePermission":{"input":{"type":"structure","required":["QueueUrl","Label"],"members":{"QueueUrl":{},"Label":{}}},"http":{}},"SendMessage":{"input":{"type":"structure","required":["QueueUrl","MessageBody"],"members":{"QueueUrl":{},"MessageBody":{},"DelaySeconds":{"type":"integer"},"MessageAttributes":{"shape":"S19","locationName":"MessageAttribute"}}},"output":{"resultWrapper":"SendMessageResult","type":"structure","members":{"MD5OfMessageBody":{},"MD5OfMessageAttributes":{},"MessageId":{}}},"http":{}},"SendMessageBatch":{"input":{"type":"structure","required":["QueueUrl","Entries"],"members":{"QueueUrl":{},"Entries":{"type":"list","member":{"locationName":"SendMessageBatchRequestEntry","type":"structure","required":["Id","MessageBody"],"members":{"Id":{},"MessageBody":{},"DelaySeconds":{"type":"integer"},"MessageAttributes":{"shape":"S19","locationName":"MessageAttribute"}}},"flattened":true}}},"output":{"resultWrapper":"SendMessageBatchResult","type":"structure","required":["Successful","Failed"],"members":{"Successful":{"type":"list","member":{"locationName":"SendMessageBatchResultEntry","type":"structure","required":["Id","MessageId","MD5OfMessageBody"],"members":{"Id":{},"MessageId":{},"MD5OfMessageBody":{},"MD5OfMessageAttributes":{}}},"flattened":true},"Failed":{"shape":"Sd"}}},"http":{}},"SetQueueAttributes":{"input":{"type":"structure","required":["QueueUrl","Attributes"],"members":{"QueueUrl":{},"Attributes":{"shape":"Sh","locationName":"Attribute"}}},"http":{}}},"shapes":{"Sd":{"type":"list","member":{"locationName":"BatchResultErrorEntry","type":"structure","required":["Id","SenderFault","Code"],"members":{"Id":{},"SenderFault":{"type":"boolean"},"Code":{},"Message":{}}},"flattened":true},"Sh":{"type":"map","key":{"locationName":"Name"},"value":{"locationName":"Value"},"flattened":true,"locationName":"Attribute"},"St":{"type":"list","member":{"locationName":"AttributeName"},"flattened":true},"Sz":{"type":"list","member":{"locationName":"QueueUrl"},"flattened":true},"S19":{"type":"map","key":{"locationName":"Name"},"value":{"locationName":"Value","type":"structure","required":["DataType"],"members":{"StringValue":{},"BinaryValue":{"type":"blob"},"StringListValues":{"flattened":true,"locationName":"StringListValue","type":"list","member":{"locationName":"StringListValue"}},"BinaryListValues":{"flattened":true,"locationName":"BinaryListValue","type":"list","member":{"locationName":"BinaryListValue","type":"blob"}},"DataType":{}}},"flattened":true}},"examples":{},"paginators":{"ListQueues":{"result_key":"QueueUrls"}}};
AWS.apiLoader.services['ssm'] = {};                                                                                    // 137
AWS.SSM = AWS.Service.defineService('ssm', [ '2014-11-06' ]);                                                          // 138
                                                                                                                       // 139
AWS.apiLoader.services['ssm']['2014-11-06'] = {"version":"2.0","metadata":{"apiVersion":"2014-11-06","endpointPrefix":"ssm","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon SSM","serviceFullName":"Amazon Simple Systems Management Service","signatureVersion":"v4","targetPrefix":"AmazonSSM"},"operations":{"CancelCommand":{"input":{"type":"structure","required":["CommandId"],"members":{"CommandId":{},"InstanceIds":{"shape":"S3"}}},"output":{"type":"structure","members":{}},"http":{}},"CreateAssociation":{"input":{"type":"structure","required":["Name","InstanceId"],"members":{"Name":{},"InstanceId":{},"Parameters":{"shape":"S8"}}},"output":{"type":"structure","members":{"AssociationDescription":{"shape":"Sd"}}},"http":{}},"CreateAssociationBatch":{"input":{"type":"structure","required":["Entries"],"members":{"Entries":{"type":"list","member":{"shape":"Sl","locationName":"entries"}}}},"output":{"type":"structure","members":{"Successful":{"type":"list","member":{"shape":"Sd","locationName":"AssociationDescription"}},"Failed":{"type":"list","member":{"locationName":"FailedCreateAssociationEntry","type":"structure","members":{"Entry":{"shape":"Sl"},"Message":{},"Fault":{}}}}}},"http":{}},"CreateDocument":{"input":{"type":"structure","required":["Content","Name"],"members":{"Content":{},"Name":{}}},"output":{"type":"structure","members":{"DocumentDescription":{"shape":"Sv"}}},"http":{}},"DeleteAssociation":{"input":{"type":"structure","required":["Name","InstanceId"],"members":{"Name":{},"InstanceId":{}}},"output":{"type":"structure","members":{}},"http":{}},"DeleteDocument":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"http":{}},"DescribeAssociation":{"input":{"type":"structure","required":["Name","InstanceId"],"members":{"Name":{},"InstanceId":{}}},"output":{"type":"structure","members":{"AssociationDescription":{"shape":"Sd"}}},"http":{}},"DescribeDocument":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Document":{"shape":"Sv"}}},"http":{}},"DescribeInstanceInformation":{"input":{"type":"structure","members":{"InstanceInformationFilterList":{"type":"list","member":{"locationName":"InstanceInformationFilter","type":"structure","required":["key","valueSet"],"members":{"key":{},"valueSet":{"type":"list","member":{"locationName":"InstanceInformationFilterValue"}}}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"InstanceInformationList":{"type":"list","member":{"locationName":"InstanceInformation","type":"structure","members":{"InstanceId":{},"PingStatus":{},"LastPingDateTime":{"type":"timestamp"},"AgentVersion":{},"IsLatestVersion":{"type":"boolean"},"PlatformType":{},"PlatformName":{},"PlatformVersion":{}}}},"NextToken":{}}},"http":{}},"GetDocument":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Name":{},"Content":{}}},"http":{}},"ListAssociations":{"input":{"type":"structure","required":["AssociationFilterList"],"members":{"AssociationFilterList":{"type":"list","member":{"locationName":"AssociationFilter","type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Associations":{"type":"list","member":{"locationName":"Association","type":"structure","members":{"Name":{},"InstanceId":{}}}},"NextToken":{}}},"http":{}},"ListCommandInvocations":{"input":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"MaxResults":{"type":"integer"},"NextToken":{},"Filters":{"shape":"S27"},"Details":{"type":"boolean"}}},"output":{"type":"structure","members":{"CommandInvocations":{"type":"list","member":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"Comment":{},"DocumentName":{},"RequestedDateTime":{"type":"timestamp"},"Status":{},"TraceOutput":{},"CommandPlugins":{"type":"list","member":{"type":"structure","members":{"Name":{},"Status":{},"ResponseCode":{"type":"integer"},"ResponseStartDateTime":{"type":"timestamp"},"ResponseFinishDateTime":{"type":"timestamp"},"Output":{},"OutputS3BucketName":{},"OutputS3KeyPrefix":{}}}}}}},"NextToken":{}}},"http":{}},"ListCommands":{"input":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"MaxResults":{"type":"integer"},"NextToken":{},"Filters":{"shape":"S27"}}},"output":{"type":"structure","members":{"Commands":{"type":"list","member":{"shape":"S2s"}},"NextToken":{}}},"http":{}},"ListDocuments":{"input":{"type":"structure","members":{"DocumentFilterList":{"type":"list","member":{"locationName":"DocumentFilter","type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"DocumentIdentifiers":{"type":"list","member":{"locationName":"DocumentIdentifier","type":"structure","members":{"Name":{},"PlatformTypes":{"shape":"S15"}}}},"NextToken":{}}},"http":{}},"SendCommand":{"input":{"type":"structure","required":["InstanceIds","DocumentName"],"members":{"InstanceIds":{"shape":"S3"},"DocumentName":{},"TimeoutSeconds":{"type":"integer"},"Comment":{},"Parameters":{"shape":"S8"},"OutputS3BucketName":{},"OutputS3KeyPrefix":{}}},"output":{"type":"structure","members":{"Command":{"shape":"S2s"}}},"http":{}},"UpdateAssociationStatus":{"input":{"type":"structure","required":["Name","InstanceId","AssociationStatus"],"members":{"Name":{},"InstanceId":{},"AssociationStatus":{"shape":"Sf"}}},"output":{"type":"structure","members":{"AssociationDescription":{"shape":"Sd"}}},"http":{}}},"shapes":{"S3":{"type":"list","member":{}},"S8":{"type":"map","key":{},"value":{"type":"list","member":{}}},"Sd":{"type":"structure","members":{"Name":{},"InstanceId":{},"Date":{"type":"timestamp"},"Status":{"shape":"Sf"},"Parameters":{"shape":"S8"}}},"Sf":{"type":"structure","required":["Date","Name","Message"],"members":{"Date":{"type":"timestamp"},"Name":{},"Message":{},"AdditionalInfo":{}}},"Sl":{"type":"structure","members":{"Name":{},"InstanceId":{},"Parameters":{"shape":"S8"}}},"Sv":{"type":"structure","members":{"Sha1":{},"Name":{},"CreatedDate":{"type":"timestamp"},"Status":{},"Description":{},"Parameters":{"type":"list","member":{"locationName":"DocumentParameter","type":"structure","members":{"Name":{},"Type":{},"Description":{},"DefaultValue":{}}}},"PlatformTypes":{"shape":"S15"}}},"S15":{"type":"list","member":{"locationName":"PlatformType"}},"S27":{"type":"list","member":{"type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"S2s":{"type":"structure","members":{"CommandId":{},"DocumentName":{},"Comment":{},"ExpiresAfter":{"type":"timestamp"},"Parameters":{"shape":"S8"},"InstanceIds":{"shape":"S3"},"RequestedDateTime":{"type":"timestamp"},"Status":{},"OutputS3BucketName":{},"OutputS3KeyPrefix":{}}}},"paginators":{"ListAssociations":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"Associations"},"ListCommandInvocations":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"CommandInvocations"},"ListCommands":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"Commands"},"ListDocuments":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults","result_key":"DocumentIdentifiers"}}};
AWS.apiLoader.services['sts'] = {};                                                                                    // 141
AWS.STS = AWS.Service.defineService('sts', [ '2011-06-15' ]);                                                          // 142
require('./services/sts');                                                                                             // 143
                                                                                                                       // 144
AWS.apiLoader.services['sts']['2011-06-15'] = {"version":"2.0","metadata":{"apiVersion":"2011-06-15","endpointPrefix":"sts","globalEndpoint":"sts.amazonaws.com","protocol":"query","serviceAbbreviation":"AWS STS","serviceFullName":"AWS Security Token Service","signatureVersion":"v4","xmlNamespace":"https://sts.amazonaws.com/doc/2011-06-15/"},"operations":{"AssumeRole":{"input":{"type":"structure","required":["RoleArn","RoleSessionName"],"members":{"RoleArn":{},"RoleSessionName":{},"Policy":{},"DurationSeconds":{"type":"integer"},"ExternalId":{},"SerialNumber":{},"TokenCode":{}}},"output":{"resultWrapper":"AssumeRoleResult","type":"structure","members":{"Credentials":{"shape":"Sa"},"AssumedRoleUser":{"shape":"Sf"},"PackedPolicySize":{"type":"integer"}}},"http":{}},"AssumeRoleWithSAML":{"input":{"type":"structure","required":["RoleArn","PrincipalArn","SAMLAssertion"],"members":{"RoleArn":{},"PrincipalArn":{},"SAMLAssertion":{},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"AssumeRoleWithSAMLResult","type":"structure","members":{"Credentials":{"shape":"Sa"},"AssumedRoleUser":{"shape":"Sf"},"PackedPolicySize":{"type":"integer"},"Subject":{},"SubjectType":{},"Issuer":{},"Audience":{},"NameQualifier":{}}},"http":{}},"AssumeRoleWithWebIdentity":{"input":{"type":"structure","required":["RoleArn","RoleSessionName","WebIdentityToken"],"members":{"RoleArn":{},"RoleSessionName":{},"WebIdentityToken":{},"ProviderId":{},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"AssumeRoleWithWebIdentityResult","type":"structure","members":{"Credentials":{"shape":"Sa"},"SubjectFromWebIdentityToken":{},"AssumedRoleUser":{"shape":"Sf"},"PackedPolicySize":{"type":"integer"},"Provider":{},"Audience":{}}},"http":{}},"DecodeAuthorizationMessage":{"input":{"type":"structure","required":["EncodedMessage"],"members":{"EncodedMessage":{}}},"output":{"resultWrapper":"DecodeAuthorizationMessageResult","type":"structure","members":{"DecodedMessage":{}}},"http":{}},"GetFederationToken":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"GetFederationTokenResult","type":"structure","members":{"Credentials":{"shape":"Sa"},"FederatedUser":{"type":"structure","required":["FederatedUserId","Arn"],"members":{"FederatedUserId":{},"Arn":{}}},"PackedPolicySize":{"type":"integer"}}},"http":{}},"GetSessionToken":{"input":{"type":"structure","members":{"DurationSeconds":{"type":"integer"},"SerialNumber":{},"TokenCode":{}}},"output":{"resultWrapper":"GetSessionTokenResult","type":"structure","members":{"Credentials":{"shape":"Sa"}}},"http":{}}},"shapes":{"Sa":{"type":"structure","required":["AccessKeyId","SecretAccessKey","SessionToken","Expiration"],"members":{"AccessKeyId":{},"SecretAccessKey":{},"SessionToken":{},"Expiration":{"type":"timestamp"}}},"Sf":{"type":"structure","required":["AssumedRoleId","Arn"],"members":{"AssumedRoleId":{},"Arn":{}}}}};
AWS.apiLoader.services['waf'] = {};                                                                                    // 146
AWS.WAF = AWS.Service.defineService('waf', [ '2015-08-24' ]);                                                          // 147
                                                                                                                       // 148
AWS.apiLoader.services['waf']['2015-08-24'] = {"version":"2.0","metadata":{"apiVersion":"2015-08-24","endpointPrefix":"waf","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"WAF","serviceFullName":"AWS WAF","signatureVersion":"v4","targetPrefix":"AWSWAF_20150824"},"operations":{"CreateByteMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ByteMatchSet":{"shape":"S5"},"ChangeToken":{}}},"http":{}},"CreateIPSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"IPSet":{"shape":"Sh"},"ChangeToken":{}}},"http":{}},"CreateRule":{"input":{"type":"structure","required":["Name","MetricName","ChangeToken"],"members":{"Name":{},"MetricName":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"Sp"},"ChangeToken":{}}},"http":{}},"CreateSizeConstraintSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"SizeConstraintSet":{"shape":"Sw"},"ChangeToken":{}}},"http":{}},"CreateSqlInjectionMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"SqlInjectionMatchSet":{"shape":"S13"},"ChangeToken":{}}},"http":{}},"CreateWebACL":{"input":{"type":"structure","required":["Name","MetricName","DefaultAction","ChangeToken"],"members":{"Name":{},"MetricName":{},"DefaultAction":{"shape":"S17"},"ChangeToken":{}}},"output":{"type":"structure","members":{"WebACL":{"shape":"S1a"},"ChangeToken":{}}},"http":{}},"DeleteByteMatchSet":{"input":{"type":"structure","required":["ByteMatchSetId","ChangeToken"],"members":{"ByteMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"DeleteIPSet":{"input":{"type":"structure","required":["IPSetId","ChangeToken"],"members":{"IPSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"DeleteRule":{"input":{"type":"structure","required":["RuleId","ChangeToken"],"members":{"RuleId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"DeleteSizeConstraintSet":{"input":{"type":"structure","required":["SizeConstraintSetId","ChangeToken"],"members":{"SizeConstraintSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"DeleteSqlInjectionMatchSet":{"input":{"type":"structure","required":["SqlInjectionMatchSetId","ChangeToken"],"members":{"SqlInjectionMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"DeleteWebACL":{"input":{"type":"structure","required":["WebACLId","ChangeToken"],"members":{"WebACLId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"GetByteMatchSet":{"input":{"type":"structure","required":["ByteMatchSetId"],"members":{"ByteMatchSetId":{}}},"output":{"type":"structure","members":{"ByteMatchSet":{"shape":"S5"}}},"http":{}},"GetChangeToken":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"GetChangeTokenStatus":{"input":{"type":"structure","required":["ChangeToken"],"members":{"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeTokenStatus":{}}},"http":{}},"GetIPSet":{"input":{"type":"structure","required":["IPSetId"],"members":{"IPSetId":{}}},"output":{"type":"structure","members":{"IPSet":{"shape":"Sh"}}},"http":{}},"GetRule":{"input":{"type":"structure","required":["RuleId"],"members":{"RuleId":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"Sp"}}},"http":{}},"GetSampledRequests":{"input":{"type":"structure","required":["WebAclId","RuleId","TimeWindow","MaxItems"],"members":{"WebAclId":{},"RuleId":{},"TimeWindow":{"shape":"S22"},"MaxItems":{"type":"long"}}},"output":{"type":"structure","members":{"SampledRequests":{"type":"list","member":{"type":"structure","required":["Request","Weight"],"members":{"Request":{"type":"structure","members":{"ClientIP":{},"Country":{},"URI":{},"Method":{},"HTTPVersion":{},"Headers":{"type":"list","member":{"type":"structure","members":{"Name":{},"Value":{}}}}}},"Weight":{"type":"long"},"Timestamp":{"type":"timestamp"},"Action":{}}}},"PopulationSize":{"type":"long"},"TimeWindow":{"shape":"S22"}}},"http":{}},"GetSizeConstraintSet":{"input":{"type":"structure","required":["SizeConstraintSetId"],"members":{"SizeConstraintSetId":{}}},"output":{"type":"structure","members":{"SizeConstraintSet":{"shape":"Sw"}}},"http":{}},"GetSqlInjectionMatchSet":{"input":{"type":"structure","required":["SqlInjectionMatchSetId"],"members":{"SqlInjectionMatchSetId":{}}},"output":{"type":"structure","members":{"SqlInjectionMatchSet":{"shape":"S13"}}},"http":{}},"GetWebACL":{"input":{"type":"structure","required":["WebACLId"],"members":{"WebACLId":{}}},"output":{"type":"structure","members":{"WebACL":{"shape":"S1a"}}},"http":{}},"ListByteMatchSets":{"input":{"type":"structure","required":["Limit"],"members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"ByteMatchSets":{"type":"list","member":{"type":"structure","required":["ByteMatchSetId","Name"],"members":{"ByteMatchSetId":{},"Name":{}}}}}},"http":{}},"ListIPSets":{"input":{"type":"structure","required":["Limit"],"members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"IPSets":{"type":"list","member":{"type":"structure","required":["IPSetId","Name"],"members":{"IPSetId":{},"Name":{}}}}}},"http":{}},"ListRules":{"input":{"type":"structure","required":["Limit"],"members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Rules":{"type":"list","member":{"type":"structure","required":["RuleId","Name"],"members":{"RuleId":{},"Name":{}}}}}},"http":{}},"ListSizeConstraintSets":{"input":{"type":"structure","required":["Limit"],"members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"SizeConstraintSets":{"type":"list","member":{"type":"structure","required":["SizeConstraintSetId","Name"],"members":{"SizeConstraintSetId":{},"Name":{}}}}}},"http":{}},"ListSqlInjectionMatchSets":{"input":{"type":"structure","required":["Limit"],"members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"SqlInjectionMatchSets":{"type":"list","member":{"type":"structure","required":["SqlInjectionMatchSetId","Name"],"members":{"SqlInjectionMatchSetId":{},"Name":{}}}}}},"http":{}},"ListWebACLs":{"input":{"type":"structure","required":["Limit"],"members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"WebACLs":{"type":"list","member":{"type":"structure","required":["WebACLId","Name"],"members":{"WebACLId":{},"Name":{}}}}}},"http":{}},"UpdateByteMatchSet":{"input":{"type":"structure","required":["ByteMatchSetId","ChangeToken","Updates"],"members":{"ByteMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","ByteMatchTuple"],"members":{"Action":{},"ByteMatchTuple":{"shape":"S8"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"UpdateIPSet":{"input":{"type":"structure","required":["IPSetId","ChangeToken","Updates"],"members":{"IPSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","IPSetDescriptor"],"members":{"Action":{},"IPSetDescriptor":{"shape":"Sj"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"UpdateRule":{"input":{"type":"structure","required":["RuleId","ChangeToken","Updates"],"members":{"RuleId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","Predicate"],"members":{"Action":{},"Predicate":{"shape":"Sr"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"UpdateSizeConstraintSet":{"input":{"type":"structure","required":["SizeConstraintSetId","ChangeToken","Updates"],"members":{"SizeConstraintSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","SizeConstraint"],"members":{"Action":{},"SizeConstraint":{"shape":"Sy"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"UpdateSqlInjectionMatchSet":{"input":{"type":"structure","required":["SqlInjectionMatchSetId","ChangeToken","Updates"],"members":{"SqlInjectionMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","SqlInjectionMatchTuple"],"members":{"Action":{},"SqlInjectionMatchTuple":{"shape":"S15"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}},"UpdateWebACL":{"input":{"type":"structure","required":["WebACLId","ChangeToken"],"members":{"WebACLId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","ActivatedRule"],"members":{"Action":{},"ActivatedRule":{"shape":"S1c"}}}},"DefaultAction":{"shape":"S17"}}},"output":{"type":"structure","members":{"ChangeToken":{}}},"http":{}}},"shapes":{"S5":{"type":"structure","required":["ByteMatchSetId","ByteMatchTuples"],"members":{"ByteMatchSetId":{},"Name":{},"ByteMatchTuples":{"type":"list","member":{"shape":"S8"}}}},"S8":{"type":"structure","required":["FieldToMatch","TargetString","TextTransformation","PositionalConstraint"],"members":{"FieldToMatch":{"shape":"S9"},"TargetString":{"type":"blob"},"TextTransformation":{},"PositionalConstraint":{}}},"S9":{"type":"structure","required":["Type"],"members":{"Type":{},"Data":{}}},"Sh":{"type":"structure","required":["IPSetId","IPSetDescriptors"],"members":{"IPSetId":{},"Name":{},"IPSetDescriptors":{"type":"list","member":{"shape":"Sj"}}}},"Sj":{"type":"structure","required":["Type","Value"],"members":{"Type":{},"Value":{}}},"Sp":{"type":"structure","required":["RuleId","Predicates"],"members":{"RuleId":{},"Name":{},"MetricName":{},"Predicates":{"type":"list","member":{"shape":"Sr"}}}},"Sr":{"type":"structure","required":["Negated","Type","DataId"],"members":{"Negated":{"type":"boolean"},"Type":{},"DataId":{}}},"Sw":{"type":"structure","required":["SizeConstraintSetId","SizeConstraints"],"members":{"SizeConstraintSetId":{},"Name":{},"SizeConstraints":{"type":"list","member":{"shape":"Sy"}}}},"Sy":{"type":"structure","required":["FieldToMatch","TextTransformation","ComparisonOperator","Size"],"members":{"FieldToMatch":{"shape":"S9"},"TextTransformation":{},"ComparisonOperator":{},"Size":{"type":"long"}}},"S13":{"type":"structure","required":["SqlInjectionMatchSetId","SqlInjectionMatchTuples"],"members":{"SqlInjectionMatchSetId":{},"Name":{},"SqlInjectionMatchTuples":{"type":"list","member":{"shape":"S15"}}}},"S15":{"type":"structure","required":["FieldToMatch","TextTransformation"],"members":{"FieldToMatch":{"shape":"S9"},"TextTransformation":{}}},"S17":{"type":"structure","required":["Type"],"members":{"Type":{}}},"S1a":{"type":"structure","required":["WebACLId","DefaultAction","Rules"],"members":{"WebACLId":{},"Name":{},"MetricName":{},"DefaultAction":{"shape":"S17"},"Rules":{"type":"list","member":{"shape":"S1c"}}}},"S1c":{"type":"structure","required":["Priority","RuleId","Action"],"members":{"Priority":{"type":"integer"},"RuleId":{},"Action":{"shape":"S17"}}},"S22":{"type":"structure","required":["StartTime","EndTime"],"members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}}}}};
                                                                                                                       // 150
},{"./core":4,"./http/xhr":18,"./services/cloudfront":42,"./services/cognitoidentity":43,"./services/dynamodb":44,"./services/ec2":45,"./services/machinelearning":46,"./services/route53":47,"./services/s3":48,"./services/sqs":49,"./services/sts":50,"./xml/browser_parser":60}],2:[function(require,module,exports){
var crypto = require('crypto'),                                                                                        // 152
    url = require('url'),                                                                                              // 153
    AWS = require('../core'),                                                                                          // 154
    base64Encode = AWS.util.base64.encode,                                                                             // 155
    inherit = AWS.util.inherit;                                                                                        // 156
                                                                                                                       // 157
var queryEncode = function (string) {                                                                                  // 158
    var replacements = {                                                                                               // 159
        '+': '-',                                                                                                      // 160
        '=': '_',                                                                                                      // 161
        '/': '~'                                                                                                       // 162
    };                                                                                                                 // 163
    return string.replace(/[\+=\/]/g, function (match) {                                                               // 164
        return replacements[match];                                                                                    // 165
    });                                                                                                                // 166
};                                                                                                                     // 167
                                                                                                                       // 168
var signPolicy = function (policy, privateKey) {                                                                       // 169
    var sign = crypto.createSign('RSA-SHA1');                                                                          // 170
    sign.write(policy);                                                                                                // 171
    return queryEncode(sign.sign(privateKey, 'base64'))                                                                // 172
};                                                                                                                     // 173
                                                                                                                       // 174
var signWithCannedPolicy = function (url, expires, keyPairId, privateKey) {                                            // 175
    var policy = JSON.stringify({                                                                                      // 176
        Statement: [                                                                                                   // 177
            {                                                                                                          // 178
                Resource: url,                                                                                         // 179
                Condition: { DateLessThan: { 'AWS:EpochTime': expires } }                                              // 180
            }                                                                                                          // 181
        ]                                                                                                              // 182
    });                                                                                                                // 183
                                                                                                                       // 184
    return {                                                                                                           // 185
        Expires: expires,                                                                                              // 186
        'Key-Pair-Id': keyPairId,                                                                                      // 187
        Signature: signPolicy(policy.toString(), privateKey)                                                           // 188
    };                                                                                                                 // 189
};                                                                                                                     // 190
                                                                                                                       // 191
var signWithCustomPolicy = function (policy, keyPairId, privateKey) {                                                  // 192
    policy = policy.replace(/\s/mg, policy);                                                                           // 193
                                                                                                                       // 194
    return {                                                                                                           // 195
        Policy: queryEncode(base64Encode(policy)),                                                                     // 196
        'Key-Pair-Id': keyPairId,                                                                                      // 197
        Signature: signPolicy(policy, privateKey)                                                                      // 198
    }                                                                                                                  // 199
};                                                                                                                     // 200
                                                                                                                       // 201
var determineScheme = function (url) {                                                                                 // 202
    var parts = url.split('://');                                                                                      // 203
    if (parts.length < 2) {                                                                                            // 204
        throw new Error('Invalid URL.');                                                                               // 205
    }                                                                                                                  // 206
                                                                                                                       // 207
    return parts[0].replace('*', '');                                                                                  // 208
};                                                                                                                     // 209
                                                                                                                       // 210
var getRtmpUrl = function (rtmpUrl) {                                                                                  // 211
    var parsed = url.parse(rtmpUrl);                                                                                   // 212
    return parsed.path.replace(/^\//, '') + parsed.hash;                                                               // 213
};                                                                                                                     // 214
                                                                                                                       // 215
var getResource = function (url) {                                                                                     // 216
    switch (determineScheme(url)) {                                                                                    // 217
        case 'http':                                                                                                   // 218
        case 'https':                                                                                                  // 219
            return url;                                                                                                // 220
        case 'rtmp':                                                                                                   // 221
            return getRtmpUrl(url);                                                                                    // 222
        default:                                                                                                       // 223
            throw new Error('Invalid URI scheme. Scheme must be one of'                                                // 224
                + ' http, https, or rtmp');                                                                            // 225
    }                                                                                                                  // 226
};                                                                                                                     // 227
                                                                                                                       // 228
var handleError = function (err, callback) {                                                                           // 229
    if (!callback || typeof callback !== 'function') {                                                                 // 230
        throw err;                                                                                                     // 231
    }                                                                                                                  // 232
                                                                                                                       // 233
    callback(err);                                                                                                     // 234
};                                                                                                                     // 235
                                                                                                                       // 236
var handleSuccess = function (result, callback) {                                                                      // 237
    if (!callback || typeof callback !== 'function') {                                                                 // 238
        return result;                                                                                                 // 239
    }                                                                                                                  // 240
                                                                                                                       // 241
    callback(null, result);                                                                                            // 242
};                                                                                                                     // 243
                                                                                                                       // 244
AWS.CloudFront.Signer = inherit({                                                                                      // 245
                                                                                                                       // 246
    constructor: function Signer(keyPairId, privateKey) {                                                              // 247
        if (keyPairId === void 0 || privateKey === void 0) {                                                           // 248
            throw new Error('A key pair ID and private key are required');                                             // 249
        }                                                                                                              // 250
                                                                                                                       // 251
        this.keyPairId = keyPairId;                                                                                    // 252
        this.privateKey = privateKey;                                                                                  // 253
    },                                                                                                                 // 254
                                                                                                                       // 255
                                                                                                                       // 256
    getSignedCookie: function (options, cb) {                                                                          // 257
        var signatureHash = 'policy' in options                                                                        // 258
            ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)                                    // 259
            : signWithCannedPolicy(options.url, options.expires, this.keyPairId, this.privateKey);                     // 260
                                                                                                                       // 261
        var cookieHash = {};                                                                                           // 262
        for (var key in signatureHash) {                                                                               // 263
            if (signatureHash.hasOwnProperty(key)) {                                                                   // 264
                cookieHash['CloudFront-' + key] = signatureHash[key];                                                  // 265
            }                                                                                                          // 266
        }                                                                                                              // 267
                                                                                                                       // 268
        return handleSuccess(cookieHash, cb);                                                                          // 269
    },                                                                                                                 // 270
                                                                                                                       // 271
                                                                                                                       // 272
    getSignedUrl: function (options, cb) {                                                                             // 273
        try {                                                                                                          // 274
            var resource = getResource(options.url);                                                                   // 275
        } catch (err) {                                                                                                // 276
            return handleError(err, cb);                                                                               // 277
        }                                                                                                              // 278
                                                                                                                       // 279
        var parsedUrl = url.parse(options.url, true),                                                                  // 280
            signatureHash = options.hasOwnProperty('policy')                                                           // 281
                ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)                                // 282
                : signWithCannedPolicy(resource, options.expires, this.keyPairId, this.privateKey);                    // 283
                                                                                                                       // 284
        parsedUrl.search = null;                                                                                       // 285
        for (var key in signatureHash) {                                                                               // 286
            if (signatureHash.hasOwnProperty(key)) {                                                                   // 287
                parsedUrl.query[key] = signatureHash[key];                                                             // 288
            }                                                                                                          // 289
        }                                                                                                              // 290
                                                                                                                       // 291
        try {                                                                                                          // 292
            var signedUrl = determineScheme(options.url) === 'rtmp'                                                    // 293
                    ? getRtmpUrl(url.format(parsedUrl))                                                                // 294
                    : url.format(parsedUrl);                                                                           // 295
        } catch (err) {                                                                                                // 296
            return handleError(err, cb);                                                                               // 297
        }                                                                                                              // 298
                                                                                                                       // 299
        return handleSuccess(signedUrl, cb);                                                                           // 300
    }                                                                                                                  // 301
});                                                                                                                    // 302
                                                                                                                       // 303
module.exports = AWS.CloudFront.Signer;                                                                                // 304
                                                                                                                       // 305
},{"../core":4,"crypto":66,"url":78}],3:[function(require,module,exports){                                             // 306
var AWS = require('./core');                                                                                           // 307
require('./credentials');                                                                                              // 308
require('./credentials/credential_provider_chain');                                                                    // 309
                                                                                                                       // 310
                                                                                                                       // 311
AWS.Config = AWS.util.inherit({                                                                                        // 312
                                                                                                                       // 313
                                                                                                                       // 314
                                                                                                                       // 315
  constructor: function Config(options) {                                                                              // 316
    if (options === undefined) options = {};                                                                           // 317
    options = this.extractCredentials(options);                                                                        // 318
                                                                                                                       // 319
    AWS.util.each.call(this, this.keys, function (key, value) {                                                        // 320
      this.set(key, options[key], value);                                                                              // 321
    });                                                                                                                // 322
  },                                                                                                                   // 323
                                                                                                                       // 324
                                                                                                                       // 325
                                                                                                                       // 326
                                                                                                                       // 327
  getCredentials: function getCredentials(callback) {                                                                  // 328
    var self = this;                                                                                                   // 329
                                                                                                                       // 330
    function finish(err) {                                                                                             // 331
      callback(err, err ? null : self.credentials);                                                                    // 332
    }                                                                                                                  // 333
                                                                                                                       // 334
    function credError(msg, err) {                                                                                     // 335
      return new AWS.util.error(err || new Error(), {                                                                  // 336
        code: 'CredentialsError', message: msg                                                                         // 337
      });                                                                                                              // 338
    }                                                                                                                  // 339
                                                                                                                       // 340
    function getAsyncCredentials() {                                                                                   // 341
      self.credentials.get(function(err) {                                                                             // 342
        if (err) {                                                                                                     // 343
          var msg = 'Could not load credentials from ' +                                                               // 344
            self.credentials.constructor.name;                                                                         // 345
          err = credError(msg, err);                                                                                   // 346
        }                                                                                                              // 347
        finish(err);                                                                                                   // 348
      });                                                                                                              // 349
    }                                                                                                                  // 350
                                                                                                                       // 351
    function getStaticCredentials() {                                                                                  // 352
      var err = null;                                                                                                  // 353
      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {                                        // 354
        err = credError('Missing credentials');                                                                        // 355
      }                                                                                                                // 356
      finish(err);                                                                                                     // 357
    }                                                                                                                  // 358
                                                                                                                       // 359
    if (self.credentials) {                                                                                            // 360
      if (typeof self.credentials.get === 'function') {                                                                // 361
        getAsyncCredentials();                                                                                         // 362
      } else { // static credentials                                                                                   // 363
        getStaticCredentials();                                                                                        // 364
      }                                                                                                                // 365
    } else if (self.credentialProvider) {                                                                              // 366
      self.credentialProvider.resolve(function(err, creds) {                                                           // 367
        if (err) {                                                                                                     // 368
          err = credError('Could not load credentials from any providers', err);                                       // 369
        }                                                                                                              // 370
        self.credentials = creds;                                                                                      // 371
        finish(err);                                                                                                   // 372
      });                                                                                                              // 373
    } else {                                                                                                           // 374
      finish(credError('No credentials to load'));                                                                     // 375
    }                                                                                                                  // 376
  },                                                                                                                   // 377
                                                                                                                       // 378
                                                                                                                       // 379
                                                                                                                       // 380
                                                                                                                       // 381
  update: function update(options, allowUnknownKeys) {                                                                 // 382
    allowUnknownKeys = allowUnknownKeys || false;                                                                      // 383
    options = this.extractCredentials(options);                                                                        // 384
    AWS.util.each.call(this, options, function (key, value) {                                                          // 385
      if (allowUnknownKeys || this.keys.hasOwnProperty(key) ||                                                         // 386
          AWS.Service.hasService(key)) {                                                                               // 387
        this.set(key, value);                                                                                          // 388
      }                                                                                                                // 389
    });                                                                                                                // 390
  },                                                                                                                   // 391
                                                                                                                       // 392
                                                                                                                       // 393
  loadFromPath: function loadFromPath(path) {                                                                          // 394
    this.clear();                                                                                                      // 395
                                                                                                                       // 396
    var options = JSON.parse(AWS.util.readFileSync(path));                                                             // 397
    var fileSystemCreds = new AWS.FileSystemCredentials(path);                                                         // 398
    var chain = new AWS.CredentialProviderChain();                                                                     // 399
    chain.providers.unshift(fileSystemCreds);                                                                          // 400
    chain.resolve(function (err, creds) {                                                                              // 401
      if (err) throw err;                                                                                              // 402
      else options.credentials = creds;                                                                                // 403
    });                                                                                                                // 404
                                                                                                                       // 405
    this.constructor(options);                                                                                         // 406
                                                                                                                       // 407
    return this;                                                                                                       // 408
  },                                                                                                                   // 409
                                                                                                                       // 410
                                                                                                                       // 411
  clear: function clear() {                                                                                            // 412
                                                                                                                       // 413
    AWS.util.each.call(this, this.keys, function (key) {                                                               // 414
      delete this[key];                                                                                                // 415
    });                                                                                                                // 416
                                                                                                                       // 417
    this.set('credentials', undefined);                                                                                // 418
    this.set('credentialProvider', undefined);                                                                         // 419
  },                                                                                                                   // 420
                                                                                                                       // 421
                                                                                                                       // 422
  set: function set(property, value, defaultValue) {                                                                   // 423
    if (value === undefined) {                                                                                         // 424
      if (defaultValue === undefined) {                                                                                // 425
        defaultValue = this.keys[property];                                                                            // 426
      }                                                                                                                // 427
      if (typeof defaultValue === 'function') {                                                                        // 428
        this[property] = defaultValue.call(this);                                                                      // 429
      } else {                                                                                                         // 430
        this[property] = defaultValue;                                                                                 // 431
      }                                                                                                                // 432
    } else if (property === 'httpOptions' && this[property]) {                                                         // 433
      this[property] = AWS.util.merge(this[property], value);                                                          // 434
    } else {                                                                                                           // 435
      this[property] = value;                                                                                          // 436
    }                                                                                                                  // 437
  },                                                                                                                   // 438
                                                                                                                       // 439
                                                                                                                       // 440
  keys: {                                                                                                              // 441
    credentials: null,                                                                                                 // 442
    credentialProvider: null,                                                                                          // 443
    region: null,                                                                                                      // 444
    logger: null,                                                                                                      // 445
    apiVersions: {},                                                                                                   // 446
    apiVersion: null,                                                                                                  // 447
    endpoint: undefined,                                                                                               // 448
    httpOptions: {                                                                                                     // 449
      timeout: 120000                                                                                                  // 450
    },                                                                                                                 // 451
    maxRetries: undefined,                                                                                             // 452
    maxRedirects: 10,                                                                                                  // 453
    paramValidation: true,                                                                                             // 454
    sslEnabled: true,                                                                                                  // 455
    s3ForcePathStyle: false,                                                                                           // 456
    s3BucketEndpoint: false,                                                                                           // 457
    computeChecksums: true,                                                                                            // 458
    convertResponseTypes: true,                                                                                        // 459
    correctClockSkew: false,                                                                                           // 460
    customUserAgent: null,                                                                                             // 461
    dynamoDbCrc32: true,                                                                                               // 462
    systemClockOffset: 0,                                                                                              // 463
    signatureVersion: null,                                                                                            // 464
    signatureCache: true,                                                                                              // 465
    retryDelayOptions: {                                                                                               // 466
      base: 100                                                                                                        // 467
    }                                                                                                                  // 468
  },                                                                                                                   // 469
                                                                                                                       // 470
                                                                                                                       // 471
  extractCredentials: function extractCredentials(options) {                                                           // 472
    if (options.accessKeyId && options.secretAccessKey) {                                                              // 473
      options = AWS.util.copy(options);                                                                                // 474
      options.credentials = new AWS.Credentials(options);                                                              // 475
    }                                                                                                                  // 476
    return options;                                                                                                    // 477
  }                                                                                                                    // 478
});                                                                                                                    // 479
                                                                                                                       // 480
                                                                                                                       // 481
AWS.config = new AWS.Config();                                                                                         // 482
                                                                                                                       // 483
},{"./core":4,"./credentials":5,"./credentials/credential_provider_chain":7}],4:[function(require,module,exports){     // 484
                                                                                                                       // 485
var AWS = { util: require('./util') };                                                                                 // 486
                                                                                                                       // 487
                                                                                                                       // 488
var _hidden = {}; _hidden.toString(); // hack to parse macro                                                           // 489
                                                                                                                       // 490
module.exports = AWS;                                                                                                  // 491
                                                                                                                       // 492
AWS.util.update(AWS, {                                                                                                 // 493
                                                                                                                       // 494
                                                                                                                       // 495
  VERSION: '2.2.42',                                                                                                   // 496
                                                                                                                       // 497
                                                                                                                       // 498
  Signers: {},                                                                                                         // 499
                                                                                                                       // 500
                                                                                                                       // 501
  Protocol: {                                                                                                          // 502
    Json: require('./protocol/json'),                                                                                  // 503
    Query: require('./protocol/query'),                                                                                // 504
    Rest: require('./protocol/rest'),                                                                                  // 505
    RestJson: require('./protocol/rest_json'),                                                                         // 506
    RestXml: require('./protocol/rest_xml')                                                                            // 507
  },                                                                                                                   // 508
                                                                                                                       // 509
                                                                                                                       // 510
  XML: {                                                                                                               // 511
    Builder: require('./xml/builder'),                                                                                 // 512
    Parser: null // conditionally set based on environment                                                             // 513
  },                                                                                                                   // 514
                                                                                                                       // 515
                                                                                                                       // 516
  JSON: {                                                                                                              // 517
    Builder: require('./json/builder'),                                                                                // 518
    Parser: require('./json/parser')                                                                                   // 519
  },                                                                                                                   // 520
                                                                                                                       // 521
                                                                                                                       // 522
  Model: {                                                                                                             // 523
    Api: require('./model/api'),                                                                                       // 524
    Operation: require('./model/operation'),                                                                           // 525
    Shape: require('./model/shape'),                                                                                   // 526
    Paginator: require('./model/paginator'),                                                                           // 527
    ResourceWaiter: require('./model/resource_waiter')                                                                 // 528
  },                                                                                                                   // 529
                                                                                                                       // 530
  util: require('./util'),                                                                                             // 531
                                                                                                                       // 532
                                                                                                                       // 533
  apiLoader: function() { throw new Error('No API loader set'); }                                                      // 534
});                                                                                                                    // 535
                                                                                                                       // 536
require('./service');                                                                                                  // 537
                                                                                                                       // 538
require('./credentials');                                                                                              // 539
require('./credentials/credential_provider_chain');                                                                    // 540
require('./credentials/temporary_credentials');                                                                        // 541
require('./credentials/web_identity_credentials');                                                                     // 542
require('./credentials/cognito_identity_credentials');                                                                 // 543
require('./credentials/saml_credentials');                                                                             // 544
                                                                                                                       // 545
require('./config');                                                                                                   // 546
require('./http');                                                                                                     // 547
require('./sequential_executor');                                                                                      // 548
require('./event_listeners');                                                                                          // 549
require('./request');                                                                                                  // 550
require('./response');                                                                                                 // 551
require('./resource_waiter');                                                                                          // 552
require('./signers/request_signer');                                                                                   // 553
require('./param_validator');                                                                                          // 554
                                                                                                                       // 555
                                                                                                                       // 556
AWS.events = new AWS.SequentialExecutor();                                                                             // 557
                                                                                                                       // 558
},{"./config":3,"./credentials":5,"./credentials/cognito_identity_credentials":6,"./credentials/credential_provider_chain":7,"./credentials/saml_credentials":8,"./credentials/temporary_credentials":9,"./credentials/web_identity_credentials":10,"./event_listeners":16,"./http":17,"./json/builder":19,"./json/parser":20,"./model/api":21,"./model/operation":23,"./model/paginator":24,"./model/resource_waiter":25,"./model/shape":26,"./param_validator":27,"./protocol/json":28,"./protocol/query":29,"./protocol/rest":30,"./protocol/rest_json":31,"./protocol/rest_xml":32,"./request":36,"./resource_waiter":37,"./response":38,"./sequential_executor":40,"./service":41,"./signers/request_signer":52,"./util":59,"./xml/builder":61}],5:[function(require,module,exports){
var AWS = require('./core');                                                                                           // 560
                                                                                                                       // 561
                                                                                                                       // 562
AWS.Credentials = AWS.util.inherit({                                                                                   // 563
                                                                                                                       // 564
  constructor: function Credentials() {                                                                                // 565
    AWS.util.hideProperties(this, ['secretAccessKey']);                                                                // 566
                                                                                                                       // 567
    this.expired = false;                                                                                              // 568
    this.expireTime = null;                                                                                            // 569
    if (arguments.length === 1 && typeof arguments[0] === 'object') {                                                  // 570
      var creds = arguments[0].credentials || arguments[0];                                                            // 571
      this.accessKeyId = creds.accessKeyId;                                                                            // 572
      this.secretAccessKey = creds.secretAccessKey;                                                                    // 573
      this.sessionToken = creds.sessionToken;                                                                          // 574
    } else {                                                                                                           // 575
      this.accessKeyId = arguments[0];                                                                                 // 576
      this.secretAccessKey = arguments[1];                                                                             // 577
      this.sessionToken = arguments[2];                                                                                // 578
    }                                                                                                                  // 579
  },                                                                                                                   // 580
                                                                                                                       // 581
                                                                                                                       // 582
  expiryWindow: 15,                                                                                                    // 583
                                                                                                                       // 584
                                                                                                                       // 585
  needsRefresh: function needsRefresh() {                                                                              // 586
    var currentTime = AWS.util.date.getDate().getTime();                                                               // 587
    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);                                               // 588
                                                                                                                       // 589
    if (this.expireTime && adjustedTime > this.expireTime) {                                                           // 590
      return true;                                                                                                     // 591
    } else {                                                                                                           // 592
      return this.expired || !this.accessKeyId || !this.secretAccessKey;                                               // 593
    }                                                                                                                  // 594
  },                                                                                                                   // 595
                                                                                                                       // 596
                                                                                                                       // 597
  get: function get(callback) {                                                                                        // 598
    var self = this;                                                                                                   // 599
    if (this.needsRefresh()) {                                                                                         // 600
      this.refresh(function(err) {                                                                                     // 601
        if (!err) self.expired = false; // reset expired flag                                                          // 602
        if (callback) callback(err);                                                                                   // 603
      });                                                                                                              // 604
    } else if (callback) {                                                                                             // 605
      callback();                                                                                                      // 606
    }                                                                                                                  // 607
  },                                                                                                                   // 608
                                                                                                                       // 609
                                                                                                                       // 610
  refresh: function refresh(callback) {                                                                                // 611
    this.expired = false;                                                                                              // 612
    callback();                                                                                                        // 613
  }                                                                                                                    // 614
});                                                                                                                    // 615
                                                                                                                       // 616
},{"./core":4}],6:[function(require,module,exports){                                                                   // 617
var AWS = require('../core');                                                                                          // 618
                                                                                                                       // 619
                                                                                                                       // 620
AWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {                                                   // 621
                                                                                                                       // 622
  localStorageKey: {                                                                                                   // 623
    id: 'aws.cognito.identity-id.',                                                                                    // 624
    providers: 'aws.cognito.identity-providers.'                                                                       // 625
  },                                                                                                                   // 626
                                                                                                                       // 627
                                                                                                                       // 628
  constructor: function CognitoIdentityCredentials(params) {                                                           // 629
    AWS.Credentials.call(this);                                                                                        // 630
    this.expired = true;                                                                                               // 631
    this.params = params;                                                                                              // 632
    this.data = null;                                                                                                  // 633
    this.identityId = null;                                                                                            // 634
    this.loadCachedId();                                                                                               // 635
  },                                                                                                                   // 636
                                                                                                                       // 637
                                                                                                                       // 638
  refresh: function refresh(callback) {                                                                                // 639
    var self = this;                                                                                                   // 640
    self.createClients();                                                                                              // 641
    self.data = null;                                                                                                  // 642
    self.identityId = null;                                                                                            // 643
    self.getId(function(err) {                                                                                         // 644
      if (!err) {                                                                                                      // 645
        if (!self.params.RoleArn) {                                                                                    // 646
          self.getCredentialsForIdentity(callback);                                                                    // 647
        } else {                                                                                                       // 648
          self.getCredentialsFromSTS(callback);                                                                        // 649
        }                                                                                                              // 650
      } else {                                                                                                         // 651
        self.clearCachedId();                                                                                          // 652
        callback(err);                                                                                                 // 653
      }                                                                                                                // 654
    });                                                                                                                // 655
  },                                                                                                                   // 656
                                                                                                                       // 657
                                                                                                                       // 658
  clearCachedId: function clearCache() {                                                                               // 659
    this.identityId = null;                                                                                            // 660
    delete this.params.IdentityId;                                                                                     // 661
                                                                                                                       // 662
    var poolId = this.params.IdentityPoolId;                                                                           // 663
    var loginId = this.params.LoginId || '';                                                                           // 664
    delete this.storage[this.localStorageKey.id + poolId + loginId];                                                   // 665
    delete this.storage[this.localStorageKey.providers + poolId + loginId];                                            // 666
  },                                                                                                                   // 667
                                                                                                                       // 668
                                                                                                                       // 669
  getId: function getId(callback) {                                                                                    // 670
    var self = this;                                                                                                   // 671
    if (typeof self.params.IdentityId === 'string') {                                                                  // 672
      return callback(null, self.params.IdentityId);                                                                   // 673
    }                                                                                                                  // 674
                                                                                                                       // 675
    self.cognito.getId(function(err, data) {                                                                           // 676
      if (!err && data.IdentityId) {                                                                                   // 677
        self.params.IdentityId = data.IdentityId;                                                                      // 678
        callback(null, data.IdentityId);                                                                               // 679
      } else {                                                                                                         // 680
        callback(err);                                                                                                 // 681
      }                                                                                                                // 682
    });                                                                                                                // 683
  },                                                                                                                   // 684
                                                                                                                       // 685
                                                                                                                       // 686
                                                                                                                       // 687
  loadCredentials: function loadCredentials(data, credentials) {                                                       // 688
    if (!data || !credentials) return;                                                                                 // 689
    credentials.expired = false;                                                                                       // 690
    credentials.accessKeyId = data.Credentials.AccessKeyId;                                                            // 691
    credentials.secretAccessKey = data.Credentials.SecretKey;                                                          // 692
    credentials.sessionToken = data.Credentials.SessionToken;                                                          // 693
    credentials.expireTime = data.Credentials.Expiration;                                                              // 694
  },                                                                                                                   // 695
                                                                                                                       // 696
                                                                                                                       // 697
  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {                                            // 698
    var self = this;                                                                                                   // 699
    self.cognito.getCredentialsForIdentity(function(err, data) {                                                       // 700
      if (!err) {                                                                                                      // 701
        self.cacheId(data);                                                                                            // 702
        self.data = data;                                                                                              // 703
        self.loadCredentials(self.data, self);                                                                         // 704
      } else {                                                                                                         // 705
        self.clearCachedId();                                                                                          // 706
      }                                                                                                                // 707
      callback(err);                                                                                                   // 708
    });                                                                                                                // 709
  },                                                                                                                   // 710
                                                                                                                       // 711
                                                                                                                       // 712
  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {                                                    // 713
    var self = this;                                                                                                   // 714
    self.cognito.getOpenIdToken(function(err, data) {                                                                  // 715
      if (!err) {                                                                                                      // 716
        self.cacheId(data);                                                                                            // 717
        self.params.WebIdentityToken = data.Token;                                                                     // 718
        self.webIdentityCredentials.refresh(function(webErr) {                                                         // 719
          if (!webErr) {                                                                                               // 720
            self.data = self.webIdentityCredentials.data;                                                              // 721
            self.sts.credentialsFrom(self.data, self);                                                                 // 722
          } else {                                                                                                     // 723
            self.clearCachedId();                                                                                      // 724
          }                                                                                                            // 725
          callback(webErr);                                                                                            // 726
        });                                                                                                            // 727
      } else {                                                                                                         // 728
        self.clearCachedId();                                                                                          // 729
        callback(err);                                                                                                 // 730
      }                                                                                                                // 731
    });                                                                                                                // 732
  },                                                                                                                   // 733
                                                                                                                       // 734
                                                                                                                       // 735
  loadCachedId: function loadCachedId() {                                                                              // 736
    var self = this;                                                                                                   // 737
                                                                                                                       // 738
    if (AWS.util.isBrowser() && !self.params.IdentityId) {                                                             // 739
      var id = self.getStorage('id');                                                                                  // 740
      if (id && self.params.Logins) {                                                                                  // 741
        var actualProviders = Object.keys(self.params.Logins);                                                         // 742
        var cachedProviders =                                                                                          // 743
          (self.getStorage('providers') || '').split(',');                                                             // 744
                                                                                                                       // 745
        var intersect = cachedProviders.filter(function(n) {                                                           // 746
          return actualProviders.indexOf(n) !== -1;                                                                    // 747
        });                                                                                                            // 748
        if (intersect.length !== 0) {                                                                                  // 749
          self.params.IdentityId = id;                                                                                 // 750
        }                                                                                                              // 751
      } else if (id) {                                                                                                 // 752
        self.params.IdentityId = id;                                                                                   // 753
      }                                                                                                                // 754
    }                                                                                                                  // 755
  },                                                                                                                   // 756
                                                                                                                       // 757
                                                                                                                       // 758
  createClients: function() {                                                                                          // 759
    this.webIdentityCredentials = this.webIdentityCredentials ||                                                       // 760
      new AWS.WebIdentityCredentials(this.params);                                                                     // 761
    this.cognito = this.cognito ||                                                                                     // 762
      new AWS.CognitoIdentity({params: this.params});                                                                  // 763
    this.sts = this.sts || new AWS.STS();                                                                              // 764
  },                                                                                                                   // 765
                                                                                                                       // 766
                                                                                                                       // 767
  cacheId: function cacheId(data) {                                                                                    // 768
    this.identityId = data.IdentityId;                                                                                 // 769
    this.params.IdentityId = this.identityId;                                                                          // 770
                                                                                                                       // 771
    if (AWS.util.isBrowser()) {                                                                                        // 772
      this.setStorage('id', data.IdentityId);                                                                          // 773
                                                                                                                       // 774
      if (this.params.Logins) {                                                                                        // 775
        this.setStorage('providers', Object.keys(this.params.Logins).join(','));                                       // 776
      }                                                                                                                // 777
    }                                                                                                                  // 778
  },                                                                                                                   // 779
                                                                                                                       // 780
                                                                                                                       // 781
  getStorage: function getStorage(key) {                                                                               // 782
    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];         // 783
  },                                                                                                                   // 784
                                                                                                                       // 785
                                                                                                                       // 786
  setStorage: function setStorage(key, val) {                                                                          // 787
    try {                                                                                                              // 788
      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;        // 789
    } catch (_) {}                                                                                                     // 790
  },                                                                                                                   // 791
                                                                                                                       // 792
                                                                                                                       // 793
  storage: (function() {                                                                                               // 794
    try {                                                                                                              // 795
      return AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?         // 796
             window.localStorage : {};                                                                                 // 797
    } catch (_) {                                                                                                      // 798
      return {};                                                                                                       // 799
    }                                                                                                                  // 800
  })()                                                                                                                 // 801
});                                                                                                                    // 802
                                                                                                                       // 803
},{"../core":4}],7:[function(require,module,exports){                                                                  // 804
var AWS = require('../core');                                                                                          // 805
                                                                                                                       // 806
                                                                                                                       // 807
AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {                                                      // 808
                                                                                                                       // 809
                                                                                                                       // 810
  constructor: function CredentialProviderChain(providers) {                                                           // 811
    if (providers) {                                                                                                   // 812
      this.providers = providers;                                                                                      // 813
    } else {                                                                                                           // 814
      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);                                          // 815
    }                                                                                                                  // 816
  },                                                                                                                   // 817
                                                                                                                       // 818
                                                                                                                       // 819
  resolve: function resolve(callback) {                                                                                // 820
    if (this.providers.length === 0) {                                                                                 // 821
      callback(new Error('No providers'));                                                                             // 822
      return this;                                                                                                     // 823
    }                                                                                                                  // 824
                                                                                                                       // 825
    var index = 0;                                                                                                     // 826
    var providers = this.providers.slice(0);                                                                           // 827
                                                                                                                       // 828
    function resolveNext(err, creds) {                                                                                 // 829
      if ((!err && creds) || index === providers.length) {                                                             // 830
        callback(err, creds);                                                                                          // 831
        return;                                                                                                        // 832
      }                                                                                                                // 833
                                                                                                                       // 834
      var provider = providers[index++];                                                                               // 835
      if (typeof provider === 'function') {                                                                            // 836
        creds = provider.call();                                                                                       // 837
      } else {                                                                                                         // 838
        creds = provider;                                                                                              // 839
      }                                                                                                                // 840
                                                                                                                       // 841
      if (creds.get) {                                                                                                 // 842
        creds.get(function(getErr) {                                                                                   // 843
          resolveNext(getErr, getErr ? null : creds);                                                                  // 844
        });                                                                                                            // 845
      } else {                                                                                                         // 846
        resolveNext(null, creds);                                                                                      // 847
      }                                                                                                                // 848
    }                                                                                                                  // 849
                                                                                                                       // 850
    resolveNext();                                                                                                     // 851
    return this;                                                                                                       // 852
  }                                                                                                                    // 853
                                                                                                                       // 854
});                                                                                                                    // 855
                                                                                                                       // 856
                                                                                                                       // 857
AWS.CredentialProviderChain.defaultProviders = [];                                                                     // 858
                                                                                                                       // 859
},{"../core":4}],8:[function(require,module,exports){                                                                  // 860
var AWS = require('../core');                                                                                          // 861
                                                                                                                       // 862
                                                                                                                       // 863
AWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {                                                              // 864
                                                                                                                       // 865
  constructor: function SAMLCredentials(params) {                                                                      // 866
    AWS.Credentials.call(this);                                                                                        // 867
    this.expired = true;                                                                                               // 868
    this.params = params;                                                                                              // 869
  },                                                                                                                   // 870
                                                                                                                       // 871
                                                                                                                       // 872
  refresh: function refresh(callback) {                                                                                // 873
    var self = this;                                                                                                   // 874
    self.createClients();                                                                                              // 875
    if (!callback) callback = function(err) { if (err) throw err; };                                                   // 876
                                                                                                                       // 877
    self.service.assumeRoleWithSAML(function (err, data) {                                                             // 878
      if (!err) {                                                                                                      // 879
        self.service.credentialsFrom(data, self);                                                                      // 880
      }                                                                                                                // 881
      callback(err);                                                                                                   // 882
    });                                                                                                                // 883
  },                                                                                                                   // 884
                                                                                                                       // 885
                                                                                                                       // 886
  createClients: function() {                                                                                          // 887
    this.service = this.service || new AWS.STS({params: this.params});                                                 // 888
  }                                                                                                                    // 889
                                                                                                                       // 890
});                                                                                                                    // 891
                                                                                                                       // 892
},{"../core":4}],9:[function(require,module,exports){                                                                  // 893
var AWS = require('../core');                                                                                          // 894
                                                                                                                       // 895
                                                                                                                       // 896
AWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {                                                         // 897
                                                                                                                       // 898
  constructor: function TemporaryCredentials(params) {                                                                 // 899
    AWS.Credentials.call(this);                                                                                        // 900
    this.loadMasterCredentials();                                                                                      // 901
    this.expired = true;                                                                                               // 902
                                                                                                                       // 903
    this.params = params || {};                                                                                        // 904
    if (this.params.RoleArn) {                                                                                         // 905
      this.params.RoleSessionName =                                                                                    // 906
        this.params.RoleSessionName || 'temporary-credentials';                                                        // 907
    }                                                                                                                  // 908
  },                                                                                                                   // 909
                                                                                                                       // 910
                                                                                                                       // 911
  refresh: function refresh(callback) {                                                                                // 912
    var self = this;                                                                                                   // 913
    self.createClients();                                                                                              // 914
    if (!callback) callback = function(err) { if (err) throw err; };                                                   // 915
                                                                                                                       // 916
    self.service.config.credentials = self.masterCredentials;                                                          // 917
    var operation = self.params.RoleArn ?                                                                              // 918
      self.service.assumeRole : self.service.getSessionToken;                                                          // 919
    operation.call(self.service, function (err, data) {                                                                // 920
      if (!err) {                                                                                                      // 921
        self.service.credentialsFrom(data, self);                                                                      // 922
      }                                                                                                                // 923
      callback(err);                                                                                                   // 924
    });                                                                                                                // 925
  },                                                                                                                   // 926
                                                                                                                       // 927
                                                                                                                       // 928
  loadMasterCredentials: function loadMasterCredentials() {                                                            // 929
    this.masterCredentials = AWS.config.credentials;                                                                   // 930
    while (this.masterCredentials.masterCredentials) {                                                                 // 931
      this.masterCredentials = this.masterCredentials.masterCredentials;                                               // 932
    }                                                                                                                  // 933
  },                                                                                                                   // 934
                                                                                                                       // 935
                                                                                                                       // 936
  createClients: function() {                                                                                          // 937
    this.service = this.service || new AWS.STS({params: this.params});                                                 // 938
  }                                                                                                                    // 939
                                                                                                                       // 940
});                                                                                                                    // 941
                                                                                                                       // 942
},{"../core":4}],10:[function(require,module,exports){                                                                 // 943
var AWS = require('../core');                                                                                          // 944
                                                                                                                       // 945
                                                                                                                       // 946
AWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {                                                       // 947
                                                                                                                       // 948
  constructor: function WebIdentityCredentials(params) {                                                               // 949
    AWS.Credentials.call(this);                                                                                        // 950
    this.expired = true;                                                                                               // 951
    this.params = params;                                                                                              // 952
    this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';                                       // 953
    this.data = null;                                                                                                  // 954
  },                                                                                                                   // 955
                                                                                                                       // 956
                                                                                                                       // 957
  refresh: function refresh(callback) {                                                                                // 958
    var self = this;                                                                                                   // 959
    self.createClients();                                                                                              // 960
    if (!callback) callback = function(err) { if (err) throw err; };                                                   // 961
                                                                                                                       // 962
    self.service.assumeRoleWithWebIdentity(function (err, data) {                                                      // 963
      self.data = null;                                                                                                // 964
      if (!err) {                                                                                                      // 965
        self.data = data;                                                                                              // 966
        self.service.credentialsFrom(data, self);                                                                      // 967
      }                                                                                                                // 968
      callback(err);                                                                                                   // 969
    });                                                                                                                // 970
  },                                                                                                                   // 971
                                                                                                                       // 972
                                                                                                                       // 973
  createClients: function() {                                                                                          // 974
    this.service = this.service || new AWS.STS({params: this.params});                                                 // 975
  }                                                                                                                    // 976
                                                                                                                       // 977
});                                                                                                                    // 978
                                                                                                                       // 979
},{"../core":4}],11:[function(require,module,exports){                                                                 // 980
var util = require('../core').util;                                                                                    // 981
var typeOf = require('./types').typeOf;                                                                                // 982
var DynamoDBSet = require('./set');                                                                                    // 983
                                                                                                                       // 984
function convertInput(data) {                                                                                          // 985
  if (typeOf(data) === 'Object') {                                                                                     // 986
    var map = {M: {}};                                                                                                 // 987
    for (var key in data) {                                                                                            // 988
      map['M'][key] = convertInput(data[key]);                                                                         // 989
    }                                                                                                                  // 990
    return map;                                                                                                        // 991
  } else if (typeOf(data) === 'Array') {                                                                               // 992
    var list = {L: []};                                                                                                // 993
    for (var i = 0; i < data.length; i++) {                                                                            // 994
      list['L'].push(convertInput(data[i]));                                                                           // 995
    }                                                                                                                  // 996
    return list;                                                                                                       // 997
  } else if (typeOf(data) === 'Set') {                                                                                 // 998
    return formatSet(data);                                                                                            // 999
  } else if (typeOf(data) === 'String') {                                                                              // 1000
    return { 'S': data };                                                                                              // 1001
  } else if (typeOf(data) === 'Number') {                                                                              // 1002
    return { 'N': data.toString() };                                                                                   // 1003
  } else if (typeOf(data) === 'Binary') {                                                                              // 1004
    return { 'B': data };                                                                                              // 1005
  } else if (typeOf(data) === 'Boolean') {                                                                             // 1006
    return {'BOOL': data};                                                                                             // 1007
  } else if (typeOf(data) === 'null') {                                                                                // 1008
    return {'NULL': true};                                                                                             // 1009
  }                                                                                                                    // 1010
}                                                                                                                      // 1011
                                                                                                                       // 1012
function formatSet(data) {                                                                                             // 1013
  var map = {};                                                                                                        // 1014
  switch (data.type) {                                                                                                 // 1015
    case 'String': map['SS'] = data.values; break;                                                                     // 1016
    case 'Binary': map['BS'] = data.values; break;                                                                     // 1017
    case 'Number': map['NS'] = data.values.map(function (value) {                                                      // 1018
      return value.toString();                                                                                         // 1019
    });                                                                                                                // 1020
  }                                                                                                                    // 1021
  return map;                                                                                                          // 1022
}                                                                                                                      // 1023
                                                                                                                       // 1024
function convertOutput(data) {                                                                                         // 1025
  var list, map, i;                                                                                                    // 1026
  for (var type in data) {                                                                                             // 1027
    var values = data[type];                                                                                           // 1028
    if (type === 'M') {                                                                                                // 1029
      map = {};                                                                                                        // 1030
      for (var key in values) {                                                                                        // 1031
        map[key] = convertOutput(values[key]);                                                                         // 1032
      }                                                                                                                // 1033
      return map;                                                                                                      // 1034
    } else if (type === 'L') {                                                                                         // 1035
      list = [];                                                                                                       // 1036
      for (i = 0; i < values.length; i++) {                                                                            // 1037
        list.push(convertOutput(values[i]));                                                                           // 1038
      }                                                                                                                // 1039
      return list;                                                                                                     // 1040
    } else if (type === 'SS') {                                                                                        // 1041
      list = [];                                                                                                       // 1042
      for (i = 0; i < values.length; i++) {                                                                            // 1043
        list.push(values[i] + '');                                                                                     // 1044
      }                                                                                                                // 1045
      return new DynamoDBSet(list);                                                                                    // 1046
    } else if (type === 'NS') {                                                                                        // 1047
      list = [];                                                                                                       // 1048
      for (i = 0; i < values.length; i++) {                                                                            // 1049
        list.push(Number(values[i]));                                                                                  // 1050
      }                                                                                                                // 1051
      return new DynamoDBSet(list);                                                                                    // 1052
    } else if (type === 'BS') {                                                                                        // 1053
      list = [];                                                                                                       // 1054
      for (i = 0; i < values.length; i++) {                                                                            // 1055
        list.push(new util.Buffer(values[i]));                                                                         // 1056
      }                                                                                                                // 1057
      return new DynamoDBSet(list);                                                                                    // 1058
    } else if (type === 'S') {                                                                                         // 1059
      return values + '';                                                                                              // 1060
    } else if (type === 'N') {                                                                                         // 1061
      return Number(values);                                                                                           // 1062
    } else if (type === 'B') {                                                                                         // 1063
      return new util.Buffer(values);                                                                                  // 1064
    } else if (type === 'BOOL') {                                                                                      // 1065
      return (values === 'true' || values === 'TRUE' || values === true);                                              // 1066
    } else if (type === 'NULL') {                                                                                      // 1067
      return null;                                                                                                     // 1068
    }                                                                                                                  // 1069
  }                                                                                                                    // 1070
}                                                                                                                      // 1071
                                                                                                                       // 1072
module.exports = {                                                                                                     // 1073
  input: convertInput,                                                                                                 // 1074
  output: convertOutput                                                                                                // 1075
};                                                                                                                     // 1076
                                                                                                                       // 1077
},{"../core":4,"./set":13,"./types":15}],12:[function(require,module,exports){                                         // 1078
var AWS = require('../core');                                                                                          // 1079
var Translator = require('./translator');                                                                              // 1080
var DynamoDBSet = require('./set');                                                                                    // 1081
                                                                                                                       // 1082
                                                                                                                       // 1083
AWS.DynamoDB.DocumentClient = AWS.util.inherit({                                                                       // 1084
                                                                                                                       // 1085
                                                                                                                       // 1086
  operations: {                                                                                                        // 1087
    batchGetItem: 'batchGet',                                                                                          // 1088
    batchWriteItem: 'batchWrite',                                                                                      // 1089
    putItem: 'put',                                                                                                    // 1090
    getItem: 'get',                                                                                                    // 1091
    deleteItem: 'delete',                                                                                              // 1092
    updateItem: 'update',                                                                                              // 1093
    scan: 'scan',                                                                                                      // 1094
    query: 'query'                                                                                                     // 1095
  },                                                                                                                   // 1096
                                                                                                                       // 1097
                                                                                                                       // 1098
  constructor: function DocumentClient(options) {                                                                      // 1099
    var self = this;                                                                                                   // 1100
    self.options = options || {};                                                                                      // 1101
    self.configure(self.options);                                                                                      // 1102
  },                                                                                                                   // 1103
                                                                                                                       // 1104
                                                                                                                       // 1105
  configure: function configure(options) {                                                                             // 1106
    var self = this;                                                                                                   // 1107
    self.service = options.service;                                                                                    // 1108
    self.bindServiceObject(options);                                                                                   // 1109
    self.attrValue =                                                                                                   // 1110
      self.service.api.operations.putItem.input.members.Item.value.shape;                                              // 1111
  },                                                                                                                   // 1112
                                                                                                                       // 1113
                                                                                                                       // 1114
  bindServiceObject: function bindServiceObject(options) {                                                             // 1115
    var self = this;                                                                                                   // 1116
    options = options || {};                                                                                           // 1117
                                                                                                                       // 1118
    if (!self.service) {                                                                                               // 1119
      self.service = new AWS.DynamoDB(options);                                                                        // 1120
    } else {                                                                                                           // 1121
      var config = AWS.util.copy(self.service.config);                                                                 // 1122
      self.service = new self.service.constructor.__super__(config);                                                   // 1123
      self.service.config.params =                                                                                     // 1124
        AWS.util.merge(self.service.config.params || {}, options.params);                                              // 1125
    }                                                                                                                  // 1126
  },                                                                                                                   // 1127
                                                                                                                       // 1128
                                                                                                                       // 1129
  batchGet: function(params, callback) {                                                                               // 1130
    var self = this;                                                                                                   // 1131
    var request = self.service.batchGetItem(params);                                                                   // 1132
    self.setupRequest(request);                                                                                        // 1133
    self.setupResponse(request);                                                                                       // 1134
    if (typeof callback === 'function') {                                                                              // 1135
      request.send(callback);                                                                                          // 1136
    }                                                                                                                  // 1137
    return request;                                                                                                    // 1138
  },                                                                                                                   // 1139
                                                                                                                       // 1140
                                                                                                                       // 1141
  batchWrite: function(params, callback) {                                                                             // 1142
    var self = this;                                                                                                   // 1143
    var request = self.service.batchWriteItem(params);                                                                 // 1144
    self.setupRequest(request);                                                                                        // 1145
    self.setupResponse(request);                                                                                       // 1146
    if (typeof callback === 'function') {                                                                              // 1147
      request.send(callback);                                                                                          // 1148
    }                                                                                                                  // 1149
    return request;                                                                                                    // 1150
  },                                                                                                                   // 1151
                                                                                                                       // 1152
                                                                                                                       // 1153
  delete: function(params, callback) {                                                                                 // 1154
    var self = this;                                                                                                   // 1155
    var request = self.service.deleteItem(params);                                                                     // 1156
    self.setupRequest(request);                                                                                        // 1157
    self.setupResponse(request);                                                                                       // 1158
    if (typeof callback === 'function') {                                                                              // 1159
      request.send(callback);                                                                                          // 1160
    }                                                                                                                  // 1161
    return request;                                                                                                    // 1162
  },                                                                                                                   // 1163
                                                                                                                       // 1164
                                                                                                                       // 1165
  get: function(params, callback) {                                                                                    // 1166
    var self = this;                                                                                                   // 1167
    var request = self.service.getItem(params);                                                                        // 1168
    self.setupRequest(request);                                                                                        // 1169
    self.setupResponse(request);                                                                                       // 1170
    if (typeof callback === 'function') {                                                                              // 1171
      request.send(callback);                                                                                          // 1172
    }                                                                                                                  // 1173
    return request;                                                                                                    // 1174
  },                                                                                                                   // 1175
                                                                                                                       // 1176
                                                                                                                       // 1177
  put: function put(params, callback) {                                                                                // 1178
    var self = this;                                                                                                   // 1179
    var request = self.service.putItem(params);                                                                        // 1180
    self.setupRequest(request);                                                                                        // 1181
    self.setupResponse(request);                                                                                       // 1182
    if (typeof callback === 'function') {                                                                              // 1183
      request.send(callback);                                                                                          // 1184
    }                                                                                                                  // 1185
    return request;                                                                                                    // 1186
  },                                                                                                                   // 1187
                                                                                                                       // 1188
                                                                                                                       // 1189
  update: function(params, callback) {                                                                                 // 1190
    var self = this;                                                                                                   // 1191
    var request = self.service.updateItem(params);                                                                     // 1192
    self.setupRequest(request);                                                                                        // 1193
    self.setupResponse(request);                                                                                       // 1194
    if (typeof callback === 'function') {                                                                              // 1195
      request.send(callback);                                                                                          // 1196
    }                                                                                                                  // 1197
    return request;                                                                                                    // 1198
  },                                                                                                                   // 1199
                                                                                                                       // 1200
                                                                                                                       // 1201
  scan: function(params, callback) {                                                                                   // 1202
    var self = this;                                                                                                   // 1203
    var request = self.service.scan(params);                                                                           // 1204
    self.setupRequest(request);                                                                                        // 1205
    self.setupResponse(request);                                                                                       // 1206
    if (typeof callback === 'function') {                                                                              // 1207
      request.send(callback);                                                                                          // 1208
    }                                                                                                                  // 1209
    return request;                                                                                                    // 1210
  },                                                                                                                   // 1211
                                                                                                                       // 1212
                                                                                                                       // 1213
  query: function(params, callback) {                                                                                  // 1214
    var self = this;                                                                                                   // 1215
    var request = self.service.query(params);                                                                          // 1216
    self.setupRequest(request);                                                                                        // 1217
    self.setupResponse(request);                                                                                       // 1218
    if (typeof callback === 'function') {                                                                              // 1219
      request.send(callback);                                                                                          // 1220
    }                                                                                                                  // 1221
    return request;                                                                                                    // 1222
  },                                                                                                                   // 1223
                                                                                                                       // 1224
                                                                                                                       // 1225
  createSet: function(list, options) {                                                                                 // 1226
    options = options || {};                                                                                           // 1227
    return new DynamoDBSet(list, options);                                                                             // 1228
  },                                                                                                                   // 1229
                                                                                                                       // 1230
                                                                                                                       // 1231
  getTranslator: function() {                                                                                          // 1232
    return new Translator({attrValue: this.attrValue});                                                                // 1233
  },                                                                                                                   // 1234
                                                                                                                       // 1235
                                                                                                                       // 1236
  setupRequest: function setupRequest(request) {                                                                       // 1237
    var self = this;                                                                                                   // 1238
    var translator = self.getTranslator();                                                                             // 1239
    var operation = request.operation;                                                                                 // 1240
    var inputShape = request.service.api.operations[operation].input;                                                  // 1241
    request._events.validate.unshift(function(req) {                                                                   // 1242
      req.rawParams = AWS.util.copy(req.params);                                                                       // 1243
      req.params = translator.translateInput(req.rawParams, inputShape);                                               // 1244
    });                                                                                                                // 1245
  },                                                                                                                   // 1246
                                                                                                                       // 1247
                                                                                                                       // 1248
  setupResponse: function setupResponse(request) {                                                                     // 1249
    var self = this;                                                                                                   // 1250
    var translator = self.getTranslator();                                                                             // 1251
    var outputShape = self.service.api.operations[request.operation].output;                                           // 1252
    request.on('extractData', function(response) {                                                                     // 1253
      response.data = translator.translateOutput(response.data, outputShape);                                          // 1254
    });                                                                                                                // 1255
                                                                                                                       // 1256
    var response = request.response;                                                                                   // 1257
    response.nextPage = function(cb) {                                                                                 // 1258
      var resp = this;                                                                                                 // 1259
      var req = resp.request;                                                                                          // 1260
      var config;                                                                                                      // 1261
      var service = req.service;                                                                                       // 1262
      var operation = req.operation;                                                                                   // 1263
      try {                                                                                                            // 1264
        config = service.paginationConfig(operation, true);                                                            // 1265
      } catch (e) { resp.error = e; }                                                                                  // 1266
                                                                                                                       // 1267
      if (!resp.hasNextPage()) {                                                                                       // 1268
        if (cb) cb(resp.error, null);                                                                                  // 1269
        else if (resp.error) throw resp.error;                                                                         // 1270
        return null;                                                                                                   // 1271
      }                                                                                                                // 1272
                                                                                                                       // 1273
      var params = AWS.util.copy(req.rawParams);                                                                       // 1274
      if (!resp.nextPageTokens) {                                                                                      // 1275
        return cb ? cb(null, null) : null;                                                                             // 1276
      } else {                                                                                                         // 1277
        var inputTokens = config.inputToken;                                                                           // 1278
        if (typeof inputTokens === 'string') inputTokens = [inputTokens];                                              // 1279
        for (var i = 0; i < inputTokens.length; i++) {                                                                 // 1280
          params[inputTokens[i]] = resp.nextPageTokens[i];                                                             // 1281
        }                                                                                                              // 1282
        return self[operation](params, cb);                                                                            // 1283
      }                                                                                                                // 1284
    };                                                                                                                 // 1285
  }                                                                                                                    // 1286
                                                                                                                       // 1287
});                                                                                                                    // 1288
                                                                                                                       // 1289
module.exports = AWS.DynamoDB.DocumentClient;                                                                          // 1290
                                                                                                                       // 1291
},{"../core":4,"./set":13,"./translator":14}],13:[function(require,module,exports){                                    // 1292
var util = require('../core').util;                                                                                    // 1293
var typeOf = require('./types').typeOf;                                                                                // 1294
                                                                                                                       // 1295
var DynamoDBSet = util.inherit({                                                                                       // 1296
                                                                                                                       // 1297
  constructor: function Set(list, options) {                                                                           // 1298
    options = options || {};                                                                                           // 1299
    this.initialize(list, options.validate);                                                                           // 1300
  },                                                                                                                   // 1301
                                                                                                                       // 1302
  initialize: function(list, validate) {                                                                               // 1303
    var self = this;                                                                                                   // 1304
    self.values = [].concat(list);                                                                                     // 1305
    self.detectType();                                                                                                 // 1306
    if (validate) {                                                                                                    // 1307
      self.validate();                                                                                                 // 1308
    }                                                                                                                  // 1309
  },                                                                                                                   // 1310
                                                                                                                       // 1311
  detectType: function() {                                                                                             // 1312
    var self = this;                                                                                                   // 1313
    var value = self.values[0];                                                                                        // 1314
    if (typeOf(value) === 'String') {                                                                                  // 1315
      self.type = 'String';                                                                                            // 1316
    } else if (typeOf(value) === 'Number') {                                                                           // 1317
      self.type = 'Number';                                                                                            // 1318
    } else if (typeOf(value) === 'Binary') {                                                                           // 1319
      self.type = 'Binary';                                                                                            // 1320
    } else {                                                                                                           // 1321
      throw util.error(new Error(), {                                                                                  // 1322
        code: 'InvalidSetType',                                                                                        // 1323
        message: 'Sets can contain string, number, or binary values'                                                   // 1324
      });                                                                                                              // 1325
    }                                                                                                                  // 1326
  },                                                                                                                   // 1327
                                                                                                                       // 1328
  validate: function() {                                                                                               // 1329
    var self = this;                                                                                                   // 1330
    var length = self.values.length;                                                                                   // 1331
    var values = self.values;                                                                                          // 1332
    for (var i = 0; i < length; i++) {                                                                                 // 1333
      if (typeOf(values[i]) !== self.type) {                                                                           // 1334
        throw util.error(new Error(), {                                                                                // 1335
          code: 'InvalidType',                                                                                         // 1336
          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'                                         // 1337
        });                                                                                                            // 1338
      }                                                                                                                // 1339
    }                                                                                                                  // 1340
  }                                                                                                                    // 1341
                                                                                                                       // 1342
});                                                                                                                    // 1343
                                                                                                                       // 1344
module.exports = DynamoDBSet;                                                                                          // 1345
                                                                                                                       // 1346
},{"../core":4,"./types":15}],14:[function(require,module,exports){                                                    // 1347
var util = require('../core').util;                                                                                    // 1348
var convert = require('./converter');                                                                                  // 1349
                                                                                                                       // 1350
var Translator = function(options) {                                                                                   // 1351
  options = options || {};                                                                                             // 1352
  this.attrValue = options.attrValue;                                                                                  // 1353
};                                                                                                                     // 1354
                                                                                                                       // 1355
Translator.prototype.translateInput = function(value, shape) {                                                         // 1356
  this.mode = 'input';                                                                                                 // 1357
  return this.translate(value, shape);                                                                                 // 1358
};                                                                                                                     // 1359
                                                                                                                       // 1360
Translator.prototype.translateOutput = function(value, shape) {                                                        // 1361
  this.mode = 'output';                                                                                                // 1362
  return this.translate(value, shape);                                                                                 // 1363
};                                                                                                                     // 1364
                                                                                                                       // 1365
Translator.prototype.translate = function(value, shape) {                                                              // 1366
  var self = this;                                                                                                     // 1367
  if (!shape || value === undefined) return undefined;                                                                 // 1368
                                                                                                                       // 1369
  if (shape.shape === self.attrValue) {                                                                                // 1370
    return convert[self.mode](value);                                                                                  // 1371
  }                                                                                                                    // 1372
  switch (shape.type) {                                                                                                // 1373
    case 'structure': return self.translateStructure(value, shape);                                                    // 1374
    case 'map': return self.translateMap(value, shape);                                                                // 1375
    case 'list': return self.translateList(value, shape);                                                              // 1376
    default: return self.translateScalar(value, shape);                                                                // 1377
  }                                                                                                                    // 1378
};                                                                                                                     // 1379
                                                                                                                       // 1380
Translator.prototype.translateStructure = function(structure, shape) {                                                 // 1381
  var self = this;                                                                                                     // 1382
  if (structure == null) return undefined;                                                                             // 1383
                                                                                                                       // 1384
  var struct = {};                                                                                                     // 1385
  util.each(structure, function(name, value) {                                                                         // 1386
    var memberShape = shape.members[name];                                                                             // 1387
    if (memberShape) {                                                                                                 // 1388
      var result = self.translate(value, memberShape);                                                                 // 1389
      if (result !== undefined) struct[name] = result;                                                                 // 1390
    }                                                                                                                  // 1391
  });                                                                                                                  // 1392
  return struct;                                                                                                       // 1393
};                                                                                                                     // 1394
                                                                                                                       // 1395
Translator.prototype.translateList = function(list, shape) {                                                           // 1396
  var self = this;                                                                                                     // 1397
  if (list == null) return undefined;                                                                                  // 1398
                                                                                                                       // 1399
  var out = [];                                                                                                        // 1400
  util.arrayEach(list, function(value) {                                                                               // 1401
    var result = self.translate(value, shape.member);                                                                  // 1402
    if (result === undefined) out.push(null);                                                                          // 1403
    else out.push(result);                                                                                             // 1404
  });                                                                                                                  // 1405
  return out;                                                                                                          // 1406
};                                                                                                                     // 1407
                                                                                                                       // 1408
Translator.prototype.translateMap = function(map, shape) {                                                             // 1409
  var self = this;                                                                                                     // 1410
  if (map == null) return undefined;                                                                                   // 1411
                                                                                                                       // 1412
  var out = {};                                                                                                        // 1413
  util.each(map, function(key, value) {                                                                                // 1414
    var result = self.translate(value, shape.value);                                                                   // 1415
    if (result === undefined) out[key] = null;                                                                         // 1416
    else out[key] = result;                                                                                            // 1417
  });                                                                                                                  // 1418
  return out;                                                                                                          // 1419
};                                                                                                                     // 1420
                                                                                                                       // 1421
Translator.prototype.translateScalar = function(value, shape) {                                                        // 1422
  return shape.toType(value);                                                                                          // 1423
};                                                                                                                     // 1424
                                                                                                                       // 1425
module.exports = Translator;                                                                                           // 1426
                                                                                                                       // 1427
},{"../core":4,"./converter":11}],15:[function(require,module,exports){                                                // 1428
var util = require('../core').util;                                                                                    // 1429
                                                                                                                       // 1430
function typeOf(data) {                                                                                                // 1431
  if (data === null && typeof data === 'object') {                                                                     // 1432
    return 'null';                                                                                                     // 1433
  } else if (data !== undefined && isBinary(data)) {                                                                   // 1434
    return 'Binary';                                                                                                   // 1435
  } else if (data !== undefined && data.constructor) {                                                                 // 1436
    return util.typeName(data.constructor);                                                                            // 1437
  } else {                                                                                                             // 1438
    return 'undefined';                                                                                                // 1439
  }                                                                                                                    // 1440
}                                                                                                                      // 1441
                                                                                                                       // 1442
function isBinary(data) {                                                                                              // 1443
  var types = [                                                                                                        // 1444
    'Buffer', 'File', 'Blob', 'ArrayBuffer', 'DataView',                                                               // 1445
    'Int8Array', 'Uint8Array', 'Uint8ClampedArray',                                                                    // 1446
    'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array',                                                          // 1447
    'Float32Array', 'Float64Array'                                                                                     // 1448
  ];                                                                                                                   // 1449
  if (util.isNode()) {                                                                                                 // 1450
    var Stream = util.nodeRequire('stream').Stream;                                                                    // 1451
    if (util.Buffer.isBuffer(data) || data instanceof Stream)                                                          // 1452
      return true;                                                                                                     // 1453
  } else {                                                                                                             // 1454
    for (var i = 0; i < types.length; i++) {                                                                           // 1455
      if (data !== undefined && data.constructor) {                                                                    // 1456
        if (util.isType(data, types[i])) return true;                                                                  // 1457
        if (util.typeName(data.constructor) === types[i]) return true;                                                 // 1458
      }                                                                                                                // 1459
    }                                                                                                                  // 1460
  }                                                                                                                    // 1461
  return false;                                                                                                        // 1462
}                                                                                                                      // 1463
                                                                                                                       // 1464
module.exports = {                                                                                                     // 1465
  typeOf: typeOf,                                                                                                      // 1466
  isBinary: isBinary                                                                                                   // 1467
};                                                                                                                     // 1468
                                                                                                                       // 1469
},{"../core":4}],16:[function(require,module,exports){                                                                 // 1470
var AWS = require('./core');                                                                                           // 1471
var SequentialExecutor = require('./sequential_executor');                                                             // 1472
                                                                                                                       // 1473
                                                                                                                       // 1474
AWS.EventListeners = {                                                                                                 // 1475
                                                                                                                       // 1476
  Core: {} /* doc hack */                                                                                              // 1477
};                                                                                                                     // 1478
                                                                                                                       // 1479
AWS.EventListeners = {                                                                                                 // 1480
  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {                                           // 1481
    addAsync('VALIDATE_CREDENTIALS', 'validate',                                                                       // 1482
        function VALIDATE_CREDENTIALS(req, done) {                                                                     // 1483
      if (!req.service.api.signatureVersion) return done(); // none                                                    // 1484
      req.service.config.getCredentials(function(err) {                                                                // 1485
        if (err) {                                                                                                     // 1486
          req.response.error = AWS.util.error(err,                                                                     // 1487
            {code: 'CredentialsError', message: 'Missing credentials in config'});                                     // 1488
        }                                                                                                              // 1489
        done();                                                                                                        // 1490
      });                                                                                                              // 1491
    });                                                                                                                // 1492
                                                                                                                       // 1493
    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {                                                 // 1494
      if (!req.service.config.region && !req.service.isGlobalEndpoint) {                                               // 1495
        req.response.error = AWS.util.error(new Error(),                                                               // 1496
          {code: 'ConfigError', message: 'Missing region in config'});                                                 // 1497
      }                                                                                                                // 1498
    });                                                                                                                // 1499
                                                                                                                       // 1500
    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {                                         // 1501
      var rules = req.service.api.operations[req.operation].input;                                                     // 1502
      var validation = req.service.config.paramValidation;                                                             // 1503
      new AWS.ParamValidator(validation).validate(rules, req.params);                                                  // 1504
    });                                                                                                                // 1505
                                                                                                                       // 1506
    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {                                      // 1507
      req.haltHandlersOnError();                                                                                       // 1508
      if (!req.service.api.signatureVersion) return done(); // none                                                    // 1509
      if (req.service.getSignerClass(req) === AWS.Signers.V4) {                                                        // 1510
        var body = req.httpRequest.body || '';                                                                         // 1511
        AWS.util.computeSha256(body, function(err, sha) {                                                              // 1512
          if (err) {                                                                                                   // 1513
            done(err);                                                                                                 // 1514
          }                                                                                                            // 1515
          else {                                                                                                       // 1516
            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;                                                     // 1517
            done();                                                                                                    // 1518
          }                                                                                                            // 1519
        });                                                                                                            // 1520
      } else {                                                                                                         // 1521
        done();                                                                                                        // 1522
      }                                                                                                                // 1523
    });                                                                                                                // 1524
                                                                                                                       // 1525
    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {                                         // 1526
      if (req.httpRequest.headers['Content-Length'] === undefined) {                                                   // 1527
        var length = AWS.util.string.byteLength(req.httpRequest.body);                                                 // 1528
        req.httpRequest.headers['Content-Length'] = length;                                                            // 1529
      }                                                                                                                // 1530
    });                                                                                                                // 1531
                                                                                                                       // 1532
    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {                                                   // 1533
      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;                                                 // 1534
    });                                                                                                                // 1535
                                                                                                                       // 1536
    add('RESTART', 'restart', function RESTART() {                                                                     // 1537
      var err = this.response.error;                                                                                   // 1538
      if (!err || !err.retryable) return;                                                                              // 1539
                                                                                                                       // 1540
      this.httpRequest = new AWS.HttpRequest(                                                                          // 1541
        this.service.endpoint,                                                                                         // 1542
        this.service.region                                                                                            // 1543
      );                                                                                                               // 1544
                                                                                                                       // 1545
      if (this.response.retryCount < this.service.config.maxRetries) {                                                 // 1546
        this.response.retryCount++;                                                                                    // 1547
      } else {                                                                                                         // 1548
        this.response.error = null;                                                                                    // 1549
      }                                                                                                                // 1550
    });                                                                                                                // 1551
                                                                                                                       // 1552
    addAsync('SIGN', 'sign', function SIGN(req, done) {                                                                // 1553
      if (!req.service.api.signatureVersion) return done(); // none                                                    // 1554
                                                                                                                       // 1555
      req.service.config.getCredentials(function (err, credentials) {                                                  // 1556
        if (err) {                                                                                                     // 1557
          req.response.error = err;                                                                                    // 1558
          return done();                                                                                               // 1559
        }                                                                                                              // 1560
                                                                                                                       // 1561
        try {                                                                                                          // 1562
          var date = AWS.util.date.getDate();                                                                          // 1563
          var SignerClass = req.service.getSignerClass(req);                                                           // 1564
          var signer = new SignerClass(req.httpRequest,                                                                // 1565
            req.service.api.signingName || req.service.api.endpointPrefix,                                             // 1566
            req.service.config.signatureCache);                                                                        // 1567
                                                                                                                       // 1568
          delete req.httpRequest.headers['Authorization'];                                                             // 1569
          delete req.httpRequest.headers['Date'];                                                                      // 1570
          delete req.httpRequest.headers['X-Amz-Date'];                                                                // 1571
                                                                                                                       // 1572
          signer.addAuthorization(credentials, date);                                                                  // 1573
          req.signedAt = date;                                                                                         // 1574
        } catch (e) {                                                                                                  // 1575
          req.response.error = e;                                                                                      // 1576
        }                                                                                                              // 1577
        done();                                                                                                        // 1578
      });                                                                                                              // 1579
    });                                                                                                                // 1580
                                                                                                                       // 1581
    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {                                    // 1582
      if (this.service.successfulResponse(resp, this)) {                                                               // 1583
        resp.data = {};                                                                                                // 1584
        resp.error = null;                                                                                             // 1585
      } else {                                                                                                         // 1586
        resp.data = null;                                                                                              // 1587
        resp.error = AWS.util.error(new Error(),                                                                       // 1588
          {code: 'UnknownError', message: 'An unknown error occurred.'});                                              // 1589
      }                                                                                                                // 1590
    });                                                                                                                // 1591
                                                                                                                       // 1592
    addAsync('SEND', 'send', function SEND(resp, done) {                                                               // 1593
      resp.httpResponse._abortCallback = done;                                                                         // 1594
      resp.error = null;                                                                                               // 1595
      resp.data = null;                                                                                                // 1596
                                                                                                                       // 1597
      function callback(httpResp) {                                                                                    // 1598
        resp.httpResponse.stream = httpResp;                                                                           // 1599
                                                                                                                       // 1600
        httpResp.on('headers', function onHeaders(statusCode, headers) {                                               // 1601
          resp.request.emit('httpHeaders', [statusCode, headers, resp]);                                               // 1602
                                                                                                                       // 1603
          if (!resp.httpResponse.streaming) {                                                                          // 1604
            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check                                        // 1605
              httpResp.on('readable', function onReadable() {                                                          // 1606
                var data = httpResp.read();                                                                            // 1607
                if (data !== null) {                                                                                   // 1608
                  resp.request.emit('httpData', [data, resp]);                                                         // 1609
                }                                                                                                      // 1610
              });                                                                                                      // 1611
            } else { // legacy streams API                                                                             // 1612
              httpResp.on('data', function onData(data) {                                                              // 1613
                resp.request.emit('httpData', [data, resp]);                                                           // 1614
              });                                                                                                      // 1615
            }                                                                                                          // 1616
          }                                                                                                            // 1617
        });                                                                                                            // 1618
                                                                                                                       // 1619
        httpResp.on('end', function onEnd() {                                                                          // 1620
          resp.request.emit('httpDone');                                                                               // 1621
          done();                                                                                                      // 1622
        });                                                                                                            // 1623
      }                                                                                                                // 1624
                                                                                                                       // 1625
      function progress(httpResp) {                                                                                    // 1626
        httpResp.on('sendProgress', function onSendProgress(value) {                                                   // 1627
          resp.request.emit('httpUploadProgress', [value, resp]);                                                      // 1628
        });                                                                                                            // 1629
                                                                                                                       // 1630
        httpResp.on('receiveProgress', function onReceiveProgress(value) {                                             // 1631
          resp.request.emit('httpDownloadProgress', [value, resp]);                                                    // 1632
        });                                                                                                            // 1633
      }                                                                                                                // 1634
                                                                                                                       // 1635
      function error(err) {                                                                                            // 1636
        resp.error = AWS.util.error(err, {                                                                             // 1637
          code: 'NetworkingError',                                                                                     // 1638
          region: resp.request.httpRequest.region,                                                                     // 1639
          hostname: resp.request.httpRequest.endpoint.hostname,                                                        // 1640
          retryable: true                                                                                              // 1641
        });                                                                                                            // 1642
        resp.request.emit('httpError', [resp.error, resp], function() {                                                // 1643
          done();                                                                                                      // 1644
        });                                                                                                            // 1645
      }                                                                                                                // 1646
                                                                                                                       // 1647
      function executeSend() {                                                                                         // 1648
        var http = AWS.HttpClient.getInstance();                                                                       // 1649
        var httpOptions = resp.request.service.config.httpOptions || {};                                               // 1650
        try {                                                                                                          // 1651
          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,                                       // 1652
                                          callback, error);                                                            // 1653
          progress(stream);                                                                                            // 1654
        } catch (err) {                                                                                                // 1655
          error(err);                                                                                                  // 1656
        }                                                                                                              // 1657
      }                                                                                                                // 1658
                                                                                                                       // 1659
      var timeDiff = (AWS.util.date.getDate() - this.signedAt) / 1000;                                                 // 1660
      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign                                                    // 1661
        this.emit('sign', [this], function(err) {                                                                      // 1662
          if (err) done(err);                                                                                          // 1663
          else executeSend();                                                                                          // 1664
        });                                                                                                            // 1665
      } else {                                                                                                         // 1666
        executeSend();                                                                                                 // 1667
      }                                                                                                                // 1668
    });                                                                                                                // 1669
                                                                                                                       // 1670
    add('HTTP_HEADERS', 'httpHeaders',                                                                                 // 1671
        function HTTP_HEADERS(statusCode, headers, resp) {                                                             // 1672
      resp.httpResponse.statusCode = statusCode;                                                                       // 1673
      resp.httpResponse.headers = headers;                                                                             // 1674
      resp.httpResponse.body = new AWS.util.Buffer('');                                                                // 1675
      resp.httpResponse.buffers = [];                                                                                  // 1676
      resp.httpResponse.numBytes = 0;                                                                                  // 1677
      var dateHeader = headers.date || headers.Date;                                                                   // 1678
      if (dateHeader) {                                                                                                // 1679
        var serverTime = Date.parse(dateHeader);                                                                       // 1680
        if (resp.request.service.config.correctClockSkew                                                               // 1681
            && AWS.util.isClockSkewed(serverTime)) {                                                                   // 1682
          AWS.util.applyClockOffset(serverTime);                                                                       // 1683
        }                                                                                                              // 1684
      }                                                                                                                // 1685
    });                                                                                                                // 1686
                                                                                                                       // 1687
    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {                                                     // 1688
      if (chunk) {                                                                                                     // 1689
        if (AWS.util.isNode()) {                                                                                       // 1690
          resp.httpResponse.numBytes += chunk.length;                                                                  // 1691
                                                                                                                       // 1692
          var total = resp.httpResponse.headers['content-length'];                                                     // 1693
          var progress = { loaded: resp.httpResponse.numBytes, total: total };                                         // 1694
          resp.request.emit('httpDownloadProgress', [progress, resp]);                                                 // 1695
        }                                                                                                              // 1696
                                                                                                                       // 1697
        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));                                                    // 1698
      }                                                                                                                // 1699
    });                                                                                                                // 1700
                                                                                                                       // 1701
    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {                                                            // 1702
      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {                                         // 1703
        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);                                                  // 1704
        resp.httpResponse.body = body;                                                                                 // 1705
      }                                                                                                                // 1706
      delete resp.httpResponse.numBytes;                                                                               // 1707
      delete resp.httpResponse.buffers;                                                                                // 1708
    });                                                                                                                // 1709
                                                                                                                       // 1710
    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {                                                     // 1711
      if (resp.httpResponse.statusCode) {                                                                              // 1712
        resp.error.statusCode = resp.httpResponse.statusCode;                                                          // 1713
        if (resp.error.retryable === undefined) {                                                                      // 1714
          resp.error.retryable = this.service.retryableError(resp.error, this);                                        // 1715
        }                                                                                                              // 1716
      }                                                                                                                // 1717
    });                                                                                                                // 1718
                                                                                                                       // 1719
    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {                                     // 1720
      if (!resp.error) return;                                                                                         // 1721
      switch (resp.error.code) {                                                                                       // 1722
        case 'RequestExpired': // EC2 only                                                                             // 1723
        case 'ExpiredTokenException':                                                                                  // 1724
        case 'ExpiredToken':                                                                                           // 1725
          resp.error.retryable = true;                                                                                 // 1726
          resp.request.service.config.credentials.expired = true;                                                      // 1727
      }                                                                                                                // 1728
    });                                                                                                                // 1729
                                                                                                                       // 1730
    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {                                               // 1731
      var err = resp.error;                                                                                            // 1732
      if (!err) return;                                                                                                // 1733
      if (typeof err.code === 'string' && typeof err.message === 'string') {                                           // 1734
        if (err.code.match(/Signature/) && err.message.match(/expired/)) {                                             // 1735
          resp.error.retryable = true;                                                                                 // 1736
        }                                                                                                              // 1737
      }                                                                                                                // 1738
    });                                                                                                                // 1739
                                                                                                                       // 1740
    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {                                                         // 1741
      if (!resp.error) return;                                                                                         // 1742
      if (this.service.clockSkewError(resp.error)                                                                      // 1743
          && this.service.config.correctClockSkew                                                                      // 1744
          && AWS.config.isClockSkewed) {                                                                               // 1745
        resp.error.retryable = true;                                                                                   // 1746
      }                                                                                                                // 1747
    });                                                                                                                // 1748
                                                                                                                       // 1749
    add('REDIRECT', 'retry', function REDIRECT(resp) {                                                                 // 1750
      if (resp.error && resp.error.statusCode >= 300 &&                                                                // 1751
          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {                                      // 1752
        this.httpRequest.endpoint =                                                                                    // 1753
          new AWS.Endpoint(resp.httpResponse.headers['location']);                                                     // 1754
        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;                                             // 1755
        resp.error.redirect = true;                                                                                    // 1756
        resp.error.retryable = true;                                                                                   // 1757
      }                                                                                                                // 1758
    });                                                                                                                // 1759
                                                                                                                       // 1760
    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {                                                           // 1761
      if (resp.error) {                                                                                                // 1762
        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {                                           // 1763
          resp.error.retryDelay = 0;                                                                                   // 1764
        } else if (resp.retryCount < resp.maxRetries) {                                                                // 1765
          resp.error.retryDelay = this.service.retryDelays(resp.retryCount) || 0;                                      // 1766
        }                                                                                                              // 1767
      }                                                                                                                // 1768
    });                                                                                                                // 1769
                                                                                                                       // 1770
    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {                               // 1771
      var delay, willRetry = false;                                                                                    // 1772
                                                                                                                       // 1773
      if (resp.error) {                                                                                                // 1774
        delay = resp.error.retryDelay || 0;                                                                            // 1775
        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {                                               // 1776
          resp.retryCount++;                                                                                           // 1777
          willRetry = true;                                                                                            // 1778
        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {                                    // 1779
          resp.redirectCount++;                                                                                        // 1780
          willRetry = true;                                                                                            // 1781
        }                                                                                                              // 1782
      }                                                                                                                // 1783
                                                                                                                       // 1784
      if (willRetry) {                                                                                                 // 1785
        resp.error = null;                                                                                             // 1786
        setTimeout(done, delay);                                                                                       // 1787
      } else {                                                                                                         // 1788
        done();                                                                                                        // 1789
      }                                                                                                                // 1790
    });                                                                                                                // 1791
  }),                                                                                                                  // 1792
                                                                                                                       // 1793
  CorePost: new SequentialExecutor().addNamedListeners(function(add) {                                                 // 1794
    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);                                               // 1795
    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);                                              // 1796
                                                                                                                       // 1797
    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {                                                // 1798
      if (err.code === 'NetworkingError' && err.errno === 'ENOTFOUND') {                                               // 1799
        var message = 'Inaccessible host: `' + err.hostname +                                                          // 1800
          '\'. This service may not be available in the `' + err.region +                                              // 1801
          '\' region.';                                                                                                // 1802
        this.response.error = AWS.util.error(new Error(message), {                                                     // 1803
          code: 'UnknownEndpoint',                                                                                     // 1804
          region: err.region,                                                                                          // 1805
          hostname: err.hostname,                                                                                      // 1806
          retryable: true,                                                                                             // 1807
          originalError: err                                                                                           // 1808
        });                                                                                                            // 1809
      }                                                                                                                // 1810
    });                                                                                                                // 1811
  }),                                                                                                                  // 1812
                                                                                                                       // 1813
  Logger: new SequentialExecutor().addNamedListeners(function(add) {                                                   // 1814
    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {                                                        // 1815
      var req = resp.request;                                                                                          // 1816
      var logger = req.service.config.logger;                                                                          // 1817
      if (!logger) return;                                                                                             // 1818
                                                                                                                       // 1819
      function buildMessage() {                                                                                        // 1820
        var time = AWS.util.date.getDate().getTime();                                                                  // 1821
        var delta = (time - req.startTime.getTime()) / 1000;                                                           // 1822
        var ansi = logger.isTTY ? true : false;                                                                        // 1823
        var status = resp.httpResponse.statusCode;                                                                     // 1824
        var params = require('util').inspect(req.params, true, null);                                                  // 1825
                                                                                                                       // 1826
        var message = '';                                                                                              // 1827
        if (ansi) message += '\x1B[33m';                                                                               // 1828
        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;                                             // 1829
        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';                                      // 1830
        if (ansi) message += '\x1B[0;1m';                                                                              // 1831
        message += ' ' + AWS.util.string.lowerFirst(req.operation);                                                    // 1832
        message += '(' + params + ')';                                                                                 // 1833
        if (ansi) message += '\x1B[0m';                                                                                // 1834
        return message;                                                                                                // 1835
      }                                                                                                                // 1836
                                                                                                                       // 1837
      var line = buildMessage();                                                                                       // 1838
      if (typeof logger.log === 'function') {                                                                          // 1839
        logger.log(line);                                                                                              // 1840
      } else if (typeof logger.write === 'function') {                                                                 // 1841
        logger.write(line + '\n');                                                                                     // 1842
      }                                                                                                                // 1843
    });                                                                                                                // 1844
  }),                                                                                                                  // 1845
                                                                                                                       // 1846
  Json: new SequentialExecutor().addNamedListeners(function(add) {                                                     // 1847
    var svc = require('./protocol/json');                                                                              // 1848
    add('BUILD', 'build', svc.buildRequest);                                                                           // 1849
    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1850
    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1851
  }),                                                                                                                  // 1852
                                                                                                                       // 1853
  Rest: new SequentialExecutor().addNamedListeners(function(add) {                                                     // 1854
    var svc = require('./protocol/rest');                                                                              // 1855
    add('BUILD', 'build', svc.buildRequest);                                                                           // 1856
    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1857
    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1858
  }),                                                                                                                  // 1859
                                                                                                                       // 1860
  RestJson: new SequentialExecutor().addNamedListeners(function(add) {                                                 // 1861
    var svc = require('./protocol/rest_json');                                                                         // 1862
    add('BUILD', 'build', svc.buildRequest);                                                                           // 1863
    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1864
    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1865
  }),                                                                                                                  // 1866
                                                                                                                       // 1867
  RestXml: new SequentialExecutor().addNamedListeners(function(add) {                                                  // 1868
    var svc = require('./protocol/rest_xml');                                                                          // 1869
    add('BUILD', 'build', svc.buildRequest);                                                                           // 1870
    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1871
    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1872
  }),                                                                                                                  // 1873
                                                                                                                       // 1874
  Query: new SequentialExecutor().addNamedListeners(function(add) {                                                    // 1875
    var svc = require('./protocol/query');                                                                             // 1876
    add('BUILD', 'build', svc.buildRequest);                                                                           // 1877
    add('EXTRACT_DATA', 'extractData', svc.extractData);                                                               // 1878
    add('EXTRACT_ERROR', 'extractError', svc.extractError);                                                            // 1879
  })                                                                                                                   // 1880
};                                                                                                                     // 1881
                                                                                                                       // 1882
},{"./core":4,"./protocol/json":28,"./protocol/query":29,"./protocol/rest":30,"./protocol/rest_json":31,"./protocol/rest_xml":32,"./sequential_executor":40,"util":80}],17:[function(require,module,exports){
var AWS = require('./core');                                                                                           // 1884
var inherit = AWS.util.inherit;                                                                                        // 1885
                                                                                                                       // 1886
                                                                                                                       // 1887
AWS.Endpoint = inherit({                                                                                               // 1888
                                                                                                                       // 1889
                                                                                                                       // 1890
  constructor: function Endpoint(endpoint, config) {                                                                   // 1891
    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);                                     // 1892
                                                                                                                       // 1893
    if (typeof endpoint === 'undefined' || endpoint === null) {                                                        // 1894
      throw new Error('Invalid endpoint: ' + endpoint);                                                                // 1895
    } else if (typeof endpoint !== 'string') {                                                                         // 1896
      return AWS.util.copy(endpoint);                                                                                  // 1897
    }                                                                                                                  // 1898
                                                                                                                       // 1899
    if (!endpoint.match(/^http/)) {                                                                                    // 1900
      var useSSL = config && config.sslEnabled !== undefined ?                                                         // 1901
        config.sslEnabled : AWS.config.sslEnabled;                                                                     // 1902
      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;                                                       // 1903
    }                                                                                                                  // 1904
                                                                                                                       // 1905
    AWS.util.update(this, AWS.util.urlParse(endpoint));                                                                // 1906
                                                                                                                       // 1907
    if (this.port) {                                                                                                   // 1908
      this.port = parseInt(this.port, 10);                                                                             // 1909
    } else {                                                                                                           // 1910
      this.port = this.protocol === 'https:' ? 443 : 80;                                                               // 1911
    }                                                                                                                  // 1912
  }                                                                                                                    // 1913
                                                                                                                       // 1914
});                                                                                                                    // 1915
                                                                                                                       // 1916
                                                                                                                       // 1917
AWS.HttpRequest = inherit({                                                                                            // 1918
                                                                                                                       // 1919
                                                                                                                       // 1920
  constructor: function HttpRequest(endpoint, region, customUserAgent) {                                               // 1921
    endpoint = new AWS.Endpoint(endpoint);                                                                             // 1922
    this.method = 'POST';                                                                                              // 1923
    this.path = endpoint.path || '/';                                                                                  // 1924
    this.headers = {};                                                                                                 // 1925
    this.body = '';                                                                                                    // 1926
    this.endpoint = endpoint;                                                                                          // 1927
    this.region = region;                                                                                              // 1928
    this.setUserAgent(customUserAgent);                                                                                // 1929
  },                                                                                                                   // 1930
                                                                                                                       // 1931
                                                                                                                       // 1932
  setUserAgent: function setUserAgent(customUserAgent) {                                                               // 1933
    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';                                                                 // 1934
    var customSuffix = '';                                                                                             // 1935
    if (typeof customUserAgent === 'string' && customUserAgent) {                                                      // 1936
      customSuffix += ' ' + customUserAgent;                                                                           // 1937
    }                                                                                                                  // 1938
    this.headers[prefix + 'User-Agent'] = AWS.util.userAgent() + customSuffix;                                         // 1939
  },                                                                                                                   // 1940
                                                                                                                       // 1941
                                                                                                                       // 1942
  pathname: function pathname() {                                                                                      // 1943
    return this.path.split('?', 1)[0];                                                                                 // 1944
  },                                                                                                                   // 1945
                                                                                                                       // 1946
                                                                                                                       // 1947
  search: function search() {                                                                                          // 1948
    var query = this.path.split('?', 2)[1];                                                                            // 1949
    if (query) {                                                                                                       // 1950
      query = AWS.util.queryStringParse(query);                                                                        // 1951
      return AWS.util.queryParamsToString(query);                                                                      // 1952
    }                                                                                                                  // 1953
    return '';                                                                                                         // 1954
  }                                                                                                                    // 1955
                                                                                                                       // 1956
});                                                                                                                    // 1957
                                                                                                                       // 1958
                                                                                                                       // 1959
AWS.HttpResponse = inherit({                                                                                           // 1960
                                                                                                                       // 1961
                                                                                                                       // 1962
  constructor: function HttpResponse() {                                                                               // 1963
    this.statusCode = undefined;                                                                                       // 1964
    this.headers = {};                                                                                                 // 1965
    this.body = undefined;                                                                                             // 1966
    this.streaming = false;                                                                                            // 1967
    this.stream = null;                                                                                                // 1968
  },                                                                                                                   // 1969
                                                                                                                       // 1970
                                                                                                                       // 1971
  createUnbufferedStream: function createUnbufferedStream() {                                                          // 1972
    this.streaming = true;                                                                                             // 1973
    return this.stream;                                                                                                // 1974
  }                                                                                                                    // 1975
});                                                                                                                    // 1976
                                                                                                                       // 1977
                                                                                                                       // 1978
AWS.HttpClient = inherit({});                                                                                          // 1979
                                                                                                                       // 1980
                                                                                                                       // 1981
AWS.HttpClient.getInstance = function getInstance() {                                                                  // 1982
  if (this.singleton === undefined) {                                                                                  // 1983
    this.singleton = new this();                                                                                       // 1984
  }                                                                                                                    // 1985
  return this.singleton;                                                                                               // 1986
};                                                                                                                     // 1987
                                                                                                                       // 1988
},{"./core":4}],18:[function(require,module,exports){                                                                  // 1989
var AWS = require('../core');                                                                                          // 1990
var EventEmitter = require('events').EventEmitter;                                                                     // 1991
require('../http');                                                                                                    // 1992
                                                                                                                       // 1993
                                                                                                                       // 1994
AWS.XHRClient = AWS.util.inherit({                                                                                     // 1995
  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {                             // 1996
    var self = this;                                                                                                   // 1997
    var endpoint = httpRequest.endpoint;                                                                               // 1998
    var emitter = new EventEmitter();                                                                                  // 1999
    var href = endpoint.protocol + '//' + endpoint.hostname;                                                           // 2000
    if (endpoint.port !== 80 && endpoint.port !== 443) {                                                               // 2001
      href += ':' + endpoint.port;                                                                                     // 2002
    }                                                                                                                  // 2003
    href += httpRequest.path;                                                                                          // 2004
                                                                                                                       // 2005
    var xhr = new XMLHttpRequest(), headersEmitted = false;                                                            // 2006
    httpRequest.stream = xhr;                                                                                          // 2007
                                                                                                                       // 2008
    xhr.addEventListener('readystatechange', function() {                                                              // 2009
      try {                                                                                                            // 2010
        if (xhr.status === 0) return; // 0 code is invalid                                                             // 2011
      } catch (e) { return; }                                                                                          // 2012
                                                                                                                       // 2013
      if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {                                               // 2014
        try { xhr.responseType = 'arraybuffer'; } catch (e) {}                                                         // 2015
        emitter.statusCode = xhr.status;                                                                               // 2016
        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());                                              // 2017
        emitter.emit('headers', emitter.statusCode, emitter.headers);                                                  // 2018
        headersEmitted = true;                                                                                         // 2019
      }                                                                                                                // 2020
      if (this.readyState === this.DONE) {                                                                             // 2021
        self.finishRequest(xhr, emitter);                                                                              // 2022
      }                                                                                                                // 2023
    }, false);                                                                                                         // 2024
    xhr.upload.addEventListener('progress', function (evt) {                                                           // 2025
      emitter.emit('sendProgress', evt);                                                                               // 2026
    });                                                                                                                // 2027
    xhr.addEventListener('progress', function (evt) {                                                                  // 2028
      emitter.emit('receiveProgress', evt);                                                                            // 2029
    }, false);                                                                                                         // 2030
    xhr.addEventListener('timeout', function () {                                                                      // 2031
      errCallback(AWS.util.error(new Error('Timeout'), {code: 'TimeoutError'}));                                       // 2032
    }, false);                                                                                                         // 2033
    xhr.addEventListener('error', function () {                                                                        // 2034
      errCallback(AWS.util.error(new Error('Network Failure'), {                                                       // 2035
        code: 'NetworkingError'                                                                                        // 2036
      }));                                                                                                             // 2037
    }, false);                                                                                                         // 2038
                                                                                                                       // 2039
    callback(emitter);                                                                                                 // 2040
    xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);                                                // 2041
    AWS.util.each(httpRequest.headers, function (key, value) {                                                         // 2042
      if (key !== 'Content-Length' && key !== 'User-Agent' && key !== 'Host') {                                        // 2043
        xhr.setRequestHeader(key, value);                                                                              // 2044
      }                                                                                                                // 2045
    });                                                                                                                // 2046
                                                                                                                       // 2047
    if (httpOptions.timeout && httpOptions.xhrAsync !== false) {                                                       // 2048
      xhr.timeout = httpOptions.timeout;                                                                               // 2049
    }                                                                                                                  // 2050
                                                                                                                       // 2051
    if (httpOptions.xhrWithCredentials) {                                                                              // 2052
      xhr.withCredentials = true;                                                                                      // 2053
    }                                                                                                                  // 2054
                                                                                                                       // 2055
    try {                                                                                                              // 2056
      xhr.send(httpRequest.body);                                                                                      // 2057
    } catch (err) {                                                                                                    // 2058
      if (httpRequest.body && typeof httpRequest.body.buffer === 'object') {                                           // 2059
        xhr.send(httpRequest.body.buffer); // send ArrayBuffer directly                                                // 2060
      } else {                                                                                                         // 2061
        throw err;                                                                                                     // 2062
      }                                                                                                                // 2063
    }                                                                                                                  // 2064
                                                                                                                       // 2065
    return emitter;                                                                                                    // 2066
  },                                                                                                                   // 2067
                                                                                                                       // 2068
  parseHeaders: function parseHeaders(rawHeaders) {                                                                    // 2069
    var headers = {};                                                                                                  // 2070
    AWS.util.arrayEach(rawHeaders.split(/\r?\n/), function (line) {                                                    // 2071
      var key = line.split(':', 1)[0];                                                                                 // 2072
      var value = line.substring(key.length + 2);                                                                      // 2073
      if (key.length > 0) headers[key.toLowerCase()] = value;                                                          // 2074
    });                                                                                                                // 2075
    return headers;                                                                                                    // 2076
  },                                                                                                                   // 2077
                                                                                                                       // 2078
  finishRequest: function finishRequest(xhr, emitter) {                                                                // 2079
    var buffer;                                                                                                        // 2080
    if (xhr.responseType === 'arraybuffer' && xhr.response) {                                                          // 2081
      var ab = xhr.response;                                                                                           // 2082
      buffer = new AWS.util.Buffer(ab.byteLength);                                                                     // 2083
      var view = new Uint8Array(ab);                                                                                   // 2084
      for (var i = 0; i < buffer.length; ++i) {                                                                        // 2085
        buffer[i] = view[i];                                                                                           // 2086
      }                                                                                                                // 2087
    }                                                                                                                  // 2088
                                                                                                                       // 2089
    try {                                                                                                              // 2090
      if (!buffer && typeof xhr.responseText === 'string') {                                                           // 2091
        buffer = new AWS.util.Buffer(xhr.responseText);                                                                // 2092
      }                                                                                                                // 2093
    } catch (e) {}                                                                                                     // 2094
                                                                                                                       // 2095
    if (buffer) emitter.emit('data', buffer);                                                                          // 2096
    emitter.emit('end');                                                                                               // 2097
  }                                                                                                                    // 2098
});                                                                                                                    // 2099
                                                                                                                       // 2100
                                                                                                                       // 2101
AWS.HttpClient.prototype = AWS.XHRClient.prototype;                                                                    // 2102
                                                                                                                       // 2103
                                                                                                                       // 2104
AWS.HttpClient.streamsApiVersion = 1;                                                                                  // 2105
                                                                                                                       // 2106
},{"../core":4,"../http":17,"events":71}],19:[function(require,module,exports){                                        // 2107
var util = require('../util');                                                                                         // 2108
                                                                                                                       // 2109
function JsonBuilder() { }                                                                                             // 2110
                                                                                                                       // 2111
JsonBuilder.prototype.build = function(value, shape) {                                                                 // 2112
  return JSON.stringify(translate(value, shape));                                                                      // 2113
};                                                                                                                     // 2114
                                                                                                                       // 2115
function translate(value, shape) {                                                                                     // 2116
  if (!shape || value === undefined || value === null) return undefined;                                               // 2117
                                                                                                                       // 2118
  switch (shape.type) {                                                                                                // 2119
    case 'structure': return translateStructure(value, shape);                                                         // 2120
    case 'map': return translateMap(value, shape);                                                                     // 2121
    case 'list': return translateList(value, shape);                                                                   // 2122
    default: return translateScalar(value, shape);                                                                     // 2123
  }                                                                                                                    // 2124
}                                                                                                                      // 2125
                                                                                                                       // 2126
function translateStructure(structure, shape) {                                                                        // 2127
  var struct = {};                                                                                                     // 2128
  util.each(structure, function(name, value) {                                                                         // 2129
    var memberShape = shape.members[name];                                                                             // 2130
    if (memberShape) {                                                                                                 // 2131
      if (memberShape.location !== 'body') return;                                                                     // 2132
      var locationName = memberShape.isLocationName ? memberShape.name : name;                                         // 2133
      var result = translate(value, memberShape);                                                                      // 2134
      if (result !== undefined) struct[locationName] = result;                                                         // 2135
    }                                                                                                                  // 2136
  });                                                                                                                  // 2137
  return struct;                                                                                                       // 2138
}                                                                                                                      // 2139
                                                                                                                       // 2140
function translateList(list, shape) {                                                                                  // 2141
  var out = [];                                                                                                        // 2142
  util.arrayEach(list, function(value) {                                                                               // 2143
    var result = translate(value, shape.member);                                                                       // 2144
    if (result !== undefined) out.push(result);                                                                        // 2145
  });                                                                                                                  // 2146
  return out;                                                                                                          // 2147
}                                                                                                                      // 2148
                                                                                                                       // 2149
function translateMap(map, shape) {                                                                                    // 2150
  var out = {};                                                                                                        // 2151
  util.each(map, function(key, value) {                                                                                // 2152
    var result = translate(value, shape.value);                                                                        // 2153
    if (result !== undefined) out[key] = result;                                                                       // 2154
  });                                                                                                                  // 2155
  return out;                                                                                                          // 2156
}                                                                                                                      // 2157
                                                                                                                       // 2158
function translateScalar(value, shape) {                                                                               // 2159
  return shape.toWireFormat(value);                                                                                    // 2160
}                                                                                                                      // 2161
                                                                                                                       // 2162
module.exports = JsonBuilder;                                                                                          // 2163
                                                                                                                       // 2164
},{"../util":59}],20:[function(require,module,exports){                                                                // 2165
var util = require('../util');                                                                                         // 2166
                                                                                                                       // 2167
function JsonParser() { }                                                                                              // 2168
                                                                                                                       // 2169
JsonParser.prototype.parse = function(value, shape) {                                                                  // 2170
  return translate(JSON.parse(value), shape);                                                                          // 2171
};                                                                                                                     // 2172
                                                                                                                       // 2173
function translate(value, shape) {                                                                                     // 2174
  if (!shape || value === undefined) return undefined;                                                                 // 2175
                                                                                                                       // 2176
  switch (shape.type) {                                                                                                // 2177
    case 'structure': return translateStructure(value, shape);                                                         // 2178
    case 'map': return translateMap(value, shape);                                                                     // 2179
    case 'list': return translateList(value, shape);                                                                   // 2180
    default: return translateScalar(value, shape);                                                                     // 2181
  }                                                                                                                    // 2182
}                                                                                                                      // 2183
                                                                                                                       // 2184
function translateStructure(structure, shape) {                                                                        // 2185
  if (structure == null) return undefined;                                                                             // 2186
                                                                                                                       // 2187
  var struct = {};                                                                                                     // 2188
  var shapeMembers = shape.members;                                                                                    // 2189
  util.each(shapeMembers, function(name, memberShape) {                                                                // 2190
    var locationName = memberShape.isLocationName ? memberShape.name : name;                                           // 2191
    if (structure.hasOwnProperty(locationName)) {                                                                      // 2192
      var value = structure[locationName];                                                                             // 2193
      var result = translate(value, memberShape);                                                                      // 2194
      if (result !== undefined) struct[name] = result;                                                                 // 2195
    }                                                                                                                  // 2196
  });                                                                                                                  // 2197
  return struct;                                                                                                       // 2198
}                                                                                                                      // 2199
                                                                                                                       // 2200
function translateList(list, shape) {                                                                                  // 2201
  if (list == null) return undefined;                                                                                  // 2202
                                                                                                                       // 2203
  var out = [];                                                                                                        // 2204
  util.arrayEach(list, function(value) {                                                                               // 2205
    var result = translate(value, shape.member);                                                                       // 2206
    if (result === undefined) out.push(null);                                                                          // 2207
    else out.push(result);                                                                                             // 2208
  });                                                                                                                  // 2209
  return out;                                                                                                          // 2210
}                                                                                                                      // 2211
                                                                                                                       // 2212
function translateMap(map, shape) {                                                                                    // 2213
  if (map == null) return undefined;                                                                                   // 2214
                                                                                                                       // 2215
  var out = {};                                                                                                        // 2216
  util.each(map, function(key, value) {                                                                                // 2217
    var result = translate(value, shape.value);                                                                        // 2218
    if (result === undefined) out[key] = null;                                                                         // 2219
    else out[key] = result;                                                                                            // 2220
  });                                                                                                                  // 2221
  return out;                                                                                                          // 2222
}                                                                                                                      // 2223
                                                                                                                       // 2224
function translateScalar(value, shape) {                                                                               // 2225
  return shape.toType(value);                                                                                          // 2226
}                                                                                                                      // 2227
                                                                                                                       // 2228
module.exports = JsonParser;                                                                                           // 2229
                                                                                                                       // 2230
},{"../util":59}],21:[function(require,module,exports){                                                                // 2231
var Collection = require('./collection');                                                                              // 2232
var Operation = require('./operation');                                                                                // 2233
var Shape = require('./shape');                                                                                        // 2234
var Paginator = require('./paginator');                                                                                // 2235
var ResourceWaiter = require('./resource_waiter');                                                                     // 2236
                                                                                                                       // 2237
var util = require('../util');                                                                                         // 2238
var property = util.property;                                                                                          // 2239
var memoizedProperty = util.memoizedProperty;                                                                          // 2240
                                                                                                                       // 2241
function Api(api, options) {                                                                                           // 2242
  api = api || {};                                                                                                     // 2243
  options = options || {};                                                                                             // 2244
  options.api = this;                                                                                                  // 2245
                                                                                                                       // 2246
  api.metadata = api.metadata || {};                                                                                   // 2247
                                                                                                                       // 2248
  property(this, 'isApi', true, false);                                                                                // 2249
  property(this, 'apiVersion', api.metadata.apiVersion);                                                               // 2250
  property(this, 'endpointPrefix', api.metadata.endpointPrefix);                                                       // 2251
  property(this, 'signingName', api.metadata.signingName);                                                             // 2252
  property(this, 'globalEndpoint', api.metadata.globalEndpoint);                                                       // 2253
  property(this, 'signatureVersion', api.metadata.signatureVersion);                                                   // 2254
  property(this, 'jsonVersion', api.metadata.jsonVersion);                                                             // 2255
  property(this, 'targetPrefix', api.metadata.targetPrefix);                                                           // 2256
  property(this, 'protocol', api.metadata.protocol);                                                                   // 2257
  property(this, 'timestampFormat', api.metadata.timestampFormat);                                                     // 2258
  property(this, 'xmlNamespaceUri', api.metadata.xmlNamespace);                                                        // 2259
  property(this, 'abbreviation', api.metadata.serviceAbbreviation);                                                    // 2260
  property(this, 'fullName', api.metadata.serviceFullName);                                                            // 2261
                                                                                                                       // 2262
  memoizedProperty(this, 'className', function() {                                                                     // 2263
    var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;                                       // 2264
    if (!name) return null;                                                                                            // 2265
                                                                                                                       // 2266
    name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, '');                                                           // 2267
    if (name === 'ElasticLoadBalancing') name = 'ELB';                                                                 // 2268
    return name;                                                                                                       // 2269
  });                                                                                                                  // 2270
                                                                                                                       // 2271
  property(this, 'operations', new Collection(api.operations, options, function(name, operation) {                     // 2272
    return new Operation(name, operation, options);                                                                    // 2273
  }, util.string.lowerFirst));                                                                                         // 2274
                                                                                                                       // 2275
  property(this, 'shapes', new Collection(api.shapes, options, function(name, shape) {                                 // 2276
    return Shape.create(shape, options);                                                                               // 2277
  }));                                                                                                                 // 2278
                                                                                                                       // 2279
  property(this, 'paginators', new Collection(api.paginators, options, function(name, paginator) {                     // 2280
    return new Paginator(name, paginator, options);                                                                    // 2281
  }));                                                                                                                 // 2282
                                                                                                                       // 2283
  property(this, 'waiters', new Collection(api.waiters, options, function(name, waiter) {                              // 2284
    return new ResourceWaiter(name, waiter, options);                                                                  // 2285
  }, util.string.lowerFirst));                                                                                         // 2286
                                                                                                                       // 2287
  if (options.documentation) {                                                                                         // 2288
    property(this, 'documentation', api.documentation);                                                                // 2289
    property(this, 'documentationUrl', api.documentationUrl);                                                          // 2290
  }                                                                                                                    // 2291
}                                                                                                                      // 2292
                                                                                                                       // 2293
module.exports = Api;                                                                                                  // 2294
                                                                                                                       // 2295
},{"../util":59,"./collection":22,"./operation":23,"./paginator":24,"./resource_waiter":25,"./shape":26}],22:[function(require,module,exports){
var memoizedProperty = require('../util').memoizedProperty;                                                            // 2297
                                                                                                                       // 2298
function memoize(name, value, fn, nameTr) {                                                                            // 2299
  memoizedProperty(this, nameTr(name), function() {                                                                    // 2300
    return fn(name, value);                                                                                            // 2301
  });                                                                                                                  // 2302
}                                                                                                                      // 2303
                                                                                                                       // 2304
function Collection(iterable, options, fn, nameTr) {                                                                   // 2305
  nameTr = nameTr || String;                                                                                           // 2306
  var self = this;                                                                                                     // 2307
                                                                                                                       // 2308
  for (var id in iterable) {                                                                                           // 2309
    if (iterable.hasOwnProperty(id)) {                                                                                 // 2310
      memoize.call(self, id, iterable[id], fn, nameTr);                                                                // 2311
    }                                                                                                                  // 2312
  }                                                                                                                    // 2313
}                                                                                                                      // 2314
                                                                                                                       // 2315
module.exports = Collection;                                                                                           // 2316
                                                                                                                       // 2317
},{"../util":59}],23:[function(require,module,exports){                                                                // 2318
var Shape = require('./shape');                                                                                        // 2319
                                                                                                                       // 2320
var util = require('../util');                                                                                         // 2321
var property = util.property;                                                                                          // 2322
var memoizedProperty = util.memoizedProperty;                                                                          // 2323
                                                                                                                       // 2324
function Operation(name, operation, options) {                                                                         // 2325
  options = options || {};                                                                                             // 2326
                                                                                                                       // 2327
  property(this, 'name', operation.name || name);                                                                      // 2328
  property(this, 'api', options.api, false);                                                                           // 2329
                                                                                                                       // 2330
  operation.http = operation.http || {};                                                                               // 2331
  property(this, 'httpMethod', operation.http.method || 'POST');                                                       // 2332
  property(this, 'httpPath', operation.http.requestUri || '/');                                                        // 2333
                                                                                                                       // 2334
  memoizedProperty(this, 'input', function() {                                                                         // 2335
    if (!operation.input) {                                                                                            // 2336
      return new Shape.create({type: 'structure'}, options);                                                           // 2337
    }                                                                                                                  // 2338
    return Shape.create(operation.input, options);                                                                     // 2339
  });                                                                                                                  // 2340
                                                                                                                       // 2341
  memoizedProperty(this, 'output', function() {                                                                        // 2342
    if (!operation.output) {                                                                                           // 2343
      return new Shape.create({type: 'structure'}, options);                                                           // 2344
    }                                                                                                                  // 2345
    return Shape.create(operation.output, options);                                                                    // 2346
  });                                                                                                                  // 2347
                                                                                                                       // 2348
  memoizedProperty(this, 'errors', function() {                                                                        // 2349
    var list = [];                                                                                                     // 2350
    if (!operation.errors) return null;                                                                                // 2351
                                                                                                                       // 2352
    for (var i = 0; i < operation.errors.length; i++) {                                                                // 2353
      list.push(Shape.create(operation.errors[i], options));                                                           // 2354
    }                                                                                                                  // 2355
                                                                                                                       // 2356
    return list;                                                                                                       // 2357
  });                                                                                                                  // 2358
                                                                                                                       // 2359
  memoizedProperty(this, 'paginator', function() {                                                                     // 2360
    return options.api.paginators[name];                                                                               // 2361
  });                                                                                                                  // 2362
                                                                                                                       // 2363
  if (options.documentation) {                                                                                         // 2364
    property(this, 'documentation', operation.documentation);                                                          // 2365
    property(this, 'documentationUrl', operation.documentationUrl);                                                    // 2366
  }                                                                                                                    // 2367
}                                                                                                                      // 2368
                                                                                                                       // 2369
module.exports = Operation;                                                                                            // 2370
                                                                                                                       // 2371
},{"../util":59,"./shape":26}],24:[function(require,module,exports){                                                   // 2372
var property = require('../util').property;                                                                            // 2373
                                                                                                                       // 2374
function Paginator(name, paginator) {                                                                                  // 2375
  property(this, 'inputToken', paginator.input_token);                                                                 // 2376
  property(this, 'limitKey', paginator.limit_key);                                                                     // 2377
  property(this, 'moreResults', paginator.more_results);                                                               // 2378
  property(this, 'outputToken', paginator.output_token);                                                               // 2379
  property(this, 'resultKey', paginator.result_key);                                                                   // 2380
}                                                                                                                      // 2381
                                                                                                                       // 2382
module.exports = Paginator;                                                                                            // 2383
                                                                                                                       // 2384
},{"../util":59}],25:[function(require,module,exports){                                                                // 2385
var util = require('../util');                                                                                         // 2386
var property = util.property;                                                                                          // 2387
                                                                                                                       // 2388
function ResourceWaiter(name, waiter, options) {                                                                       // 2389
  options = options || {};                                                                                             // 2390
                                                                                                                       // 2391
  function InnerResourceWaiter() {                                                                                     // 2392
    property(this, 'name', name);                                                                                      // 2393
    property(this, 'api', options.api, false);                                                                         // 2394
                                                                                                                       // 2395
    if (waiter.operation) {                                                                                            // 2396
      property(this, 'operation', util.string.lowerFirst(waiter.operation));                                           // 2397
    }                                                                                                                  // 2398
                                                                                                                       // 2399
    var self = this, map = {                                                                                           // 2400
      ignoreErrors: 'ignore_errors',                                                                                   // 2401
      successType: 'success_type',                                                                                     // 2402
      successValue: 'success_value',                                                                                   // 2403
      successPath: 'success_path',                                                                                     // 2404
      acceptorType: 'acceptor_type',                                                                                   // 2405
      acceptorValue: 'acceptor_value',                                                                                 // 2406
      acceptorPath: 'acceptor_path',                                                                                   // 2407
      failureType: 'failure_type',                                                                                     // 2408
      failureValue: 'failure_value',                                                                                   // 2409
      failurePath: 'success_path',                                                                                     // 2410
      interval: 'interval',                                                                                            // 2411
      maxAttempts: 'max_attempts'                                                                                      // 2412
    };                                                                                                                 // 2413
    Object.keys(map).forEach(function(key) {                                                                           // 2414
      var value = waiter[map[key]];                                                                                    // 2415
      if (value) property(self, key, value);                                                                           // 2416
    });                                                                                                                // 2417
  }                                                                                                                    // 2418
                                                                                                                       // 2419
  if (options.api) {                                                                                                   // 2420
    var proto = null;                                                                                                  // 2421
    if (waiter['extends']) {                                                                                           // 2422
      proto = options.api.waiters[waiter['extends']];                                                                  // 2423
    } else if (name !== '__default__') {                                                                               // 2424
      proto = options.api.waiters['__default__'];                                                                      // 2425
    }                                                                                                                  // 2426
                                                                                                                       // 2427
    if (proto) InnerResourceWaiter.prototype = proto;                                                                  // 2428
  }                                                                                                                    // 2429
                                                                                                                       // 2430
  return new InnerResourceWaiter();                                                                                    // 2431
}                                                                                                                      // 2432
                                                                                                                       // 2433
module.exports = ResourceWaiter;                                                                                       // 2434
                                                                                                                       // 2435
},{"../util":59}],26:[function(require,module,exports){                                                                // 2436
var Collection = require('./collection');                                                                              // 2437
                                                                                                                       // 2438
var util = require('../util');                                                                                         // 2439
                                                                                                                       // 2440
function property(obj, name, value) {                                                                                  // 2441
  if (value !== null && value !== undefined) {                                                                         // 2442
    util.property.apply(this, arguments);                                                                              // 2443
  }                                                                                                                    // 2444
}                                                                                                                      // 2445
                                                                                                                       // 2446
function memoizedProperty(obj, name) {                                                                                 // 2447
  if (!obj.constructor.prototype[name]) {                                                                              // 2448
    util.memoizedProperty.apply(this, arguments);                                                                      // 2449
  }                                                                                                                    // 2450
}                                                                                                                      // 2451
                                                                                                                       // 2452
function Shape(shape, options, memberName) {                                                                           // 2453
  options = options || {};                                                                                             // 2454
                                                                                                                       // 2455
  property(this, 'shape', shape.shape);                                                                                // 2456
  property(this, 'api', options.api, false);                                                                           // 2457
  property(this, 'type', shape.type);                                                                                  // 2458
  property(this, 'enum', shape.enum);                                                                                  // 2459
  property(this, 'min', shape.min);                                                                                    // 2460
  property(this, 'max', shape.max);                                                                                    // 2461
  property(this, 'pattern', shape.pattern);                                                                            // 2462
  property(this, 'location', shape.location || this.location || 'body');                                               // 2463
  property(this, 'name', this.name || shape.xmlName || shape.queryName ||                                              // 2464
    shape.locationName || memberName);                                                                                 // 2465
  property(this, 'isStreaming', shape.streaming || this.isStreaming || false);                                         // 2466
  property(this, 'isComposite', shape.isComposite || false);                                                           // 2467
  property(this, 'isShape', true, false);                                                                              // 2468
  property(this, 'isQueryName', shape.queryName ? true : false, false);                                                // 2469
  property(this, 'isLocationName', shape.locationName ? true : false, false);                                          // 2470
                                                                                                                       // 2471
  if (options.documentation) {                                                                                         // 2472
    property(this, 'documentation', shape.documentation);                                                              // 2473
    property(this, 'documentationUrl', shape.documentationUrl);                                                        // 2474
  }                                                                                                                    // 2475
                                                                                                                       // 2476
  if (shape.xmlAttribute) {                                                                                            // 2477
    property(this, 'isXmlAttribute', shape.xmlAttribute || false);                                                     // 2478
  }                                                                                                                    // 2479
                                                                                                                       // 2480
  property(this, 'defaultValue', null);                                                                                // 2481
  this.toWireFormat = function(value) {                                                                                // 2482
    if (value === null || value === undefined) return '';                                                              // 2483
    return value;                                                                                                      // 2484
  };                                                                                                                   // 2485
  this.toType = function(value) { return value; };                                                                     // 2486
}                                                                                                                      // 2487
                                                                                                                       // 2488
                                                                                                                       // 2489
Shape.normalizedTypes = {                                                                                              // 2490
  character: 'string',                                                                                                 // 2491
  double: 'float',                                                                                                     // 2492
  long: 'integer',                                                                                                     // 2493
  short: 'integer',                                                                                                    // 2494
  biginteger: 'integer',                                                                                               // 2495
  bigdecimal: 'float',                                                                                                 // 2496
  blob: 'binary'                                                                                                       // 2497
};                                                                                                                     // 2498
                                                                                                                       // 2499
                                                                                                                       // 2500
Shape.types = {                                                                                                        // 2501
  'structure': StructureShape,                                                                                         // 2502
  'list': ListShape,                                                                                                   // 2503
  'map': MapShape,                                                                                                     // 2504
  'boolean': BooleanShape,                                                                                             // 2505
  'timestamp': TimestampShape,                                                                                         // 2506
  'float': FloatShape,                                                                                                 // 2507
  'integer': IntegerShape,                                                                                             // 2508
  'string': StringShape,                                                                                               // 2509
  'base64': Base64Shape,                                                                                               // 2510
  'binary': BinaryShape                                                                                                // 2511
};                                                                                                                     // 2512
                                                                                                                       // 2513
Shape.resolve = function resolve(shape, options) {                                                                     // 2514
  if (shape.shape) {                                                                                                   // 2515
    var refShape = options.api.shapes[shape.shape];                                                                    // 2516
    if (!refShape) {                                                                                                   // 2517
      throw new Error('Cannot find shape reference: ' + shape.shape);                                                  // 2518
    }                                                                                                                  // 2519
                                                                                                                       // 2520
    return refShape;                                                                                                   // 2521
  } else {                                                                                                             // 2522
    return null;                                                                                                       // 2523
  }                                                                                                                    // 2524
};                                                                                                                     // 2525
                                                                                                                       // 2526
Shape.create = function create(shape, options, memberName) {                                                           // 2527
  if (shape.isShape) return shape;                                                                                     // 2528
                                                                                                                       // 2529
  var refShape = Shape.resolve(shape, options);                                                                        // 2530
  if (refShape) {                                                                                                      // 2531
    var filteredKeys = Object.keys(shape);                                                                             // 2532
    if (!options.documentation) {                                                                                      // 2533
      filteredKeys = filteredKeys.filter(function(name) {                                                              // 2534
        return !name.match(/documentation/);                                                                           // 2535
      });                                                                                                              // 2536
    }                                                                                                                  // 2537
    if (filteredKeys === ['shape']) { // no inline customizations                                                      // 2538
      return refShape;                                                                                                 // 2539
    }                                                                                                                  // 2540
                                                                                                                       // 2541
    var InlineShape = function() {                                                                                     // 2542
      refShape.constructor.call(this, shape, options, memberName);                                                     // 2543
    };                                                                                                                 // 2544
    InlineShape.prototype = refShape;                                                                                  // 2545
    return new InlineShape();                                                                                          // 2546
  } else {                                                                                                             // 2547
    if (!shape.type) {                                                                                                 // 2548
      if (shape.members) shape.type = 'structure';                                                                     // 2549
      else if (shape.member) shape.type = 'list';                                                                      // 2550
      else if (shape.key) shape.type = 'map';                                                                          // 2551
      else shape.type = 'string';                                                                                      // 2552
    }                                                                                                                  // 2553
                                                                                                                       // 2554
    var origType = shape.type;                                                                                         // 2555
    if (Shape.normalizedTypes[shape.type]) {                                                                           // 2556
      shape.type = Shape.normalizedTypes[shape.type];                                                                  // 2557
    }                                                                                                                  // 2558
                                                                                                                       // 2559
    if (Shape.types[shape.type]) {                                                                                     // 2560
      return new Shape.types[shape.type](shape, options, memberName);                                                  // 2561
    } else {                                                                                                           // 2562
      throw new Error('Unrecognized shape type: ' + origType);                                                         // 2563
    }                                                                                                                  // 2564
  }                                                                                                                    // 2565
};                                                                                                                     // 2566
                                                                                                                       // 2567
function CompositeShape(shape) {                                                                                       // 2568
  Shape.apply(this, arguments);                                                                                        // 2569
  property(this, 'isComposite', true);                                                                                 // 2570
                                                                                                                       // 2571
  if (shape.flattened) {                                                                                               // 2572
    property(this, 'flattened', shape.flattened || false);                                                             // 2573
  }                                                                                                                    // 2574
}                                                                                                                      // 2575
                                                                                                                       // 2576
function StructureShape(shape, options) {                                                                              // 2577
  var requiredMap = null, firstInit = !this.isShape;                                                                   // 2578
                                                                                                                       // 2579
  CompositeShape.apply(this, arguments);                                                                               // 2580
                                                                                                                       // 2581
  if (firstInit) {                                                                                                     // 2582
    property(this, 'defaultValue', function() { return {}; });                                                         // 2583
    property(this, 'members', {});                                                                                     // 2584
    property(this, 'memberNames', []);                                                                                 // 2585
    property(this, 'required', []);                                                                                    // 2586
    property(this, 'isRequired', function() { return false; });                                                        // 2587
  }                                                                                                                    // 2588
                                                                                                                       // 2589
  if (shape.members) {                                                                                                 // 2590
    property(this, 'members', new Collection(shape.members, options, function(name, member) {                          // 2591
      return Shape.create(member, options, name);                                                                      // 2592
    }));                                                                                                               // 2593
    memoizedProperty(this, 'memberNames', function() {                                                                 // 2594
      return shape.xmlOrder || Object.keys(shape.members);                                                             // 2595
    });                                                                                                                // 2596
  }                                                                                                                    // 2597
                                                                                                                       // 2598
  if (shape.required) {                                                                                                // 2599
    property(this, 'required', shape.required);                                                                        // 2600
    property(this, 'isRequired', function(name) {                                                                      // 2601
      if (!requiredMap) {                                                                                              // 2602
        requiredMap = {};                                                                                              // 2603
        for (var i = 0; i < shape.required.length; i++) {                                                              // 2604
          requiredMap[shape.required[i]] = true;                                                                       // 2605
        }                                                                                                              // 2606
      }                                                                                                                // 2607
                                                                                                                       // 2608
      return requiredMap[name];                                                                                        // 2609
    }, false, true);                                                                                                   // 2610
  }                                                                                                                    // 2611
                                                                                                                       // 2612
  property(this, 'resultWrapper', shape.resultWrapper || null);                                                        // 2613
                                                                                                                       // 2614
  if (shape.payload) {                                                                                                 // 2615
    property(this, 'payload', shape.payload);                                                                          // 2616
  }                                                                                                                    // 2617
                                                                                                                       // 2618
  if (typeof shape.xmlNamespace === 'string') {                                                                        // 2619
    property(this, 'xmlNamespaceUri', shape.xmlNamespace);                                                             // 2620
  } else if (typeof shape.xmlNamespace === 'object') {                                                                 // 2621
    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);                                                   // 2622
    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);                                                         // 2623
  }                                                                                                                    // 2624
}                                                                                                                      // 2625
                                                                                                                       // 2626
function ListShape(shape, options) {                                                                                   // 2627
  var self = this, firstInit = !this.isShape;                                                                          // 2628
  CompositeShape.apply(this, arguments);                                                                               // 2629
                                                                                                                       // 2630
  if (firstInit) {                                                                                                     // 2631
    property(this, 'defaultValue', function() { return []; });                                                         // 2632
  }                                                                                                                    // 2633
                                                                                                                       // 2634
  if (shape.member) {                                                                                                  // 2635
    memoizedProperty(this, 'member', function() {                                                                      // 2636
      return Shape.create(shape.member, options);                                                                      // 2637
    });                                                                                                                // 2638
  }                                                                                                                    // 2639
                                                                                                                       // 2640
  if (this.flattened) {                                                                                                // 2641
    var oldName = this.name;                                                                                           // 2642
    memoizedProperty(this, 'name', function() {                                                                        // 2643
      return self.member.name || oldName;                                                                              // 2644
    });                                                                                                                // 2645
  }                                                                                                                    // 2646
}                                                                                                                      // 2647
                                                                                                                       // 2648
function MapShape(shape, options) {                                                                                    // 2649
  var firstInit = !this.isShape;                                                                                       // 2650
  CompositeShape.apply(this, arguments);                                                                               // 2651
                                                                                                                       // 2652
  if (firstInit) {                                                                                                     // 2653
    property(this, 'defaultValue', function() { return {}; });                                                         // 2654
    property(this, 'key', Shape.create({type: 'string'}, options));                                                    // 2655
    property(this, 'value', Shape.create({type: 'string'}, options));                                                  // 2656
  }                                                                                                                    // 2657
                                                                                                                       // 2658
  if (shape.key) {                                                                                                     // 2659
    memoizedProperty(this, 'key', function() {                                                                         // 2660
      return Shape.create(shape.key, options);                                                                         // 2661
    });                                                                                                                // 2662
  }                                                                                                                    // 2663
  if (shape.value) {                                                                                                   // 2664
    memoizedProperty(this, 'value', function() {                                                                       // 2665
      return Shape.create(shape.value, options);                                                                       // 2666
    });                                                                                                                // 2667
  }                                                                                                                    // 2668
}                                                                                                                      // 2669
                                                                                                                       // 2670
function TimestampShape(shape) {                                                                                       // 2671
  var self = this;                                                                                                     // 2672
  Shape.apply(this, arguments);                                                                                        // 2673
                                                                                                                       // 2674
  if (this.location === 'header') {                                                                                    // 2675
    property(this, 'timestampFormat', 'rfc822');                                                                       // 2676
  } else if (shape.timestampFormat) {                                                                                  // 2677
    property(this, 'timestampFormat', shape.timestampFormat);                                                          // 2678
  } else if (this.api) {                                                                                               // 2679
    if (this.api.timestampFormat) {                                                                                    // 2680
      property(this, 'timestampFormat', this.api.timestampFormat);                                                     // 2681
    } else {                                                                                                           // 2682
      switch (this.api.protocol) {                                                                                     // 2683
        case 'json':                                                                                                   // 2684
        case 'rest-json':                                                                                              // 2685
          property(this, 'timestampFormat', 'unixTimestamp');                                                          // 2686
          break;                                                                                                       // 2687
        case 'rest-xml':                                                                                               // 2688
        case 'query':                                                                                                  // 2689
        case 'ec2':                                                                                                    // 2690
          property(this, 'timestampFormat', 'iso8601');                                                                // 2691
          break;                                                                                                       // 2692
      }                                                                                                                // 2693
    }                                                                                                                  // 2694
  }                                                                                                                    // 2695
                                                                                                                       // 2696
  this.toType = function(value) {                                                                                      // 2697
    if (value === null || value === undefined) return null;                                                            // 2698
    if (typeof value.toUTCString === 'function') return value;                                                         // 2699
    return typeof value === 'string' || typeof value === 'number' ?                                                    // 2700
           util.date.parseTimestamp(value) : null;                                                                     // 2701
  };                                                                                                                   // 2702
                                                                                                                       // 2703
  this.toWireFormat = function(value) {                                                                                // 2704
    return util.date.format(value, self.timestampFormat);                                                              // 2705
  };                                                                                                                   // 2706
}                                                                                                                      // 2707
                                                                                                                       // 2708
function StringShape() {                                                                                               // 2709
  Shape.apply(this, arguments);                                                                                        // 2710
                                                                                                                       // 2711
  if (this.api) {                                                                                                      // 2712
    switch (this.api.protocol) {                                                                                       // 2713
      case 'rest-xml':                                                                                                 // 2714
      case 'query':                                                                                                    // 2715
      case 'ec2':                                                                                                      // 2716
        this.toType = function(value) { return value || ''; };                                                         // 2717
    }                                                                                                                  // 2718
  }                                                                                                                    // 2719
}                                                                                                                      // 2720
                                                                                                                       // 2721
function FloatShape() {                                                                                                // 2722
  Shape.apply(this, arguments);                                                                                        // 2723
                                                                                                                       // 2724
  this.toType = function(value) {                                                                                      // 2725
    if (value === null || value === undefined) return null;                                                            // 2726
    return parseFloat(value);                                                                                          // 2727
  };                                                                                                                   // 2728
  this.toWireFormat = this.toType;                                                                                     // 2729
}                                                                                                                      // 2730
                                                                                                                       // 2731
function IntegerShape() {                                                                                              // 2732
  Shape.apply(this, arguments);                                                                                        // 2733
                                                                                                                       // 2734
  this.toType = function(value) {                                                                                      // 2735
    if (value === null || value === undefined) return null;                                                            // 2736
    return parseInt(value, 10);                                                                                        // 2737
  };                                                                                                                   // 2738
  this.toWireFormat = this.toType;                                                                                     // 2739
}                                                                                                                      // 2740
                                                                                                                       // 2741
function BinaryShape() {                                                                                               // 2742
  Shape.apply(this, arguments);                                                                                        // 2743
  this.toType = util.base64.decode;                                                                                    // 2744
  this.toWireFormat = util.base64.encode;                                                                              // 2745
}                                                                                                                      // 2746
                                                                                                                       // 2747
function Base64Shape() {                                                                                               // 2748
  BinaryShape.apply(this, arguments);                                                                                  // 2749
}                                                                                                                      // 2750
                                                                                                                       // 2751
function BooleanShape() {                                                                                              // 2752
  Shape.apply(this, arguments);                                                                                        // 2753
                                                                                                                       // 2754
  this.toType = function(value) {                                                                                      // 2755
    if (typeof value === 'boolean') return value;                                                                      // 2756
    if (value === null || value === undefined) return null;                                                            // 2757
    return value === 'true';                                                                                           // 2758
  };                                                                                                                   // 2759
}                                                                                                                      // 2760
                                                                                                                       // 2761
                                                                                                                       // 2762
Shape.shapes = {                                                                                                       // 2763
  StructureShape: StructureShape,                                                                                      // 2764
  ListShape: ListShape,                                                                                                // 2765
  MapShape: MapShape,                                                                                                  // 2766
  StringShape: StringShape,                                                                                            // 2767
  BooleanShape: BooleanShape,                                                                                          // 2768
  Base64Shape: Base64Shape                                                                                             // 2769
};                                                                                                                     // 2770
                                                                                                                       // 2771
module.exports = Shape;                                                                                                // 2772
                                                                                                                       // 2773
},{"../util":59,"./collection":22}],27:[function(require,module,exports){                                              // 2774
var AWS = require('./core');                                                                                           // 2775
                                                                                                                       // 2776
                                                                                                                       // 2777
AWS.ParamValidator = AWS.util.inherit({                                                                                // 2778
                                                                                                                       // 2779
  constructor: function ParamValidator(validation) {                                                                   // 2780
    if (validation === true || validation === undefined) {                                                             // 2781
      validation = {'min': true};                                                                                      // 2782
    }                                                                                                                  // 2783
    this.validation = validation;                                                                                      // 2784
  },                                                                                                                   // 2785
                                                                                                                       // 2786
  validate: function validate(shape, params, context) {                                                                // 2787
    this.errors = [];                                                                                                  // 2788
    this.validateMember(shape, params || {}, context || 'params');                                                     // 2789
                                                                                                                       // 2790
    if (this.errors.length > 1) {                                                                                      // 2791
      var msg = this.errors.join('\n* ');                                                                              // 2792
      msg = 'There were ' + this.errors.length +                                                                       // 2793
        ' validation errors:\n* ' + msg;                                                                               // 2794
      throw AWS.util.error(new Error(msg),                                                                             // 2795
        {code: 'MultipleValidationErrors', errors: this.errors});                                                      // 2796
    } else if (this.errors.length === 1) {                                                                             // 2797
      throw this.errors[0];                                                                                            // 2798
    } else {                                                                                                           // 2799
      return true;                                                                                                     // 2800
    }                                                                                                                  // 2801
  },                                                                                                                   // 2802
                                                                                                                       // 2803
  fail: function fail(code, message) {                                                                                 // 2804
    this.errors.push(AWS.util.error(new Error(message), {code: code}));                                                // 2805
  },                                                                                                                   // 2806
                                                                                                                       // 2807
  validateStructure: function validateStructure(shape, params, context) {                                              // 2808
    this.validateType(params, context, ['object'], 'structure');                                                       // 2809
                                                                                                                       // 2810
    var paramName;                                                                                                     // 2811
    for (var i = 0; shape.required && i < shape.required.length; i++) {                                                // 2812
      paramName = shape.required[i];                                                                                   // 2813
      var value = params[paramName];                                                                                   // 2814
      if (value === undefined || value === null) {                                                                     // 2815
        this.fail('MissingRequiredParameter',                                                                          // 2816
          'Missing required key \'' + paramName + '\' in ' + context);                                                 // 2817
      }                                                                                                                // 2818
    }                                                                                                                  // 2819
                                                                                                                       // 2820
    for (paramName in params) {                                                                                        // 2821
      if (!params.hasOwnProperty(paramName)) continue;                                                                 // 2822
                                                                                                                       // 2823
      var paramValue = params[paramName],                                                                              // 2824
          memberShape = shape.members[paramName];                                                                      // 2825
                                                                                                                       // 2826
      if (memberShape !== undefined) {                                                                                 // 2827
        var memberContext = [context, paramName].join('.');                                                            // 2828
        this.validateMember(memberShape, paramValue, memberContext);                                                   // 2829
      } else {                                                                                                         // 2830
        this.fail('UnexpectedParameter',                                                                               // 2831
          'Unexpected key \'' + paramName + '\' found in ' + context);                                                 // 2832
      }                                                                                                                // 2833
    }                                                                                                                  // 2834
                                                                                                                       // 2835
    return true;                                                                                                       // 2836
  },                                                                                                                   // 2837
                                                                                                                       // 2838
  validateMember: function validateMember(shape, param, context) {                                                     // 2839
    switch (shape.type) {                                                                                              // 2840
      case 'structure':                                                                                                // 2841
        return this.validateStructure(shape, param, context);                                                          // 2842
      case 'list':                                                                                                     // 2843
        return this.validateList(shape, param, context);                                                               // 2844
      case 'map':                                                                                                      // 2845
        return this.validateMap(shape, param, context);                                                                // 2846
      default:                                                                                                         // 2847
        return this.validateScalar(shape, param, context);                                                             // 2848
    }                                                                                                                  // 2849
  },                                                                                                                   // 2850
                                                                                                                       // 2851
  validateList: function validateList(shape, params, context) {                                                        // 2852
    if (this.validateType(params, context, [Array])) {                                                                 // 2853
      this.validateRange(shape, params.length, context, 'list member count');                                          // 2854
      for (var i = 0; i < params.length; i++) {                                                                        // 2855
        this.validateMember(shape.member, params[i], context + '[' + i + ']');                                         // 2856
      }                                                                                                                // 2857
    }                                                                                                                  // 2858
  },                                                                                                                   // 2859
                                                                                                                       // 2860
  validateMap: function validateMap(shape, params, context) {                                                          // 2861
    if (this.validateType(params, context, ['object'], 'map')) {                                                       // 2862
      var mapCount = 0;                                                                                                // 2863
      for (var param in params) {                                                                                      // 2864
        if (!params.hasOwnProperty(param)) continue;                                                                   // 2865
        this.validateMember(shape.key, param,                                                                          // 2866
                            context + '[key=\'' + param + '\']')                                                       // 2867
        this.validateMember(shape.value, params[param],                                                                // 2868
                            context + '[\'' + param + '\']');                                                          // 2869
        mapCount++;                                                                                                    // 2870
      }                                                                                                                // 2871
      this.validateRange(shape, mapCount, context, 'map member count');                                                // 2872
    }                                                                                                                  // 2873
  },                                                                                                                   // 2874
                                                                                                                       // 2875
  validateScalar: function validateScalar(shape, value, context) {                                                     // 2876
    switch (shape.type) {                                                                                              // 2877
      case null:                                                                                                       // 2878
      case undefined:                                                                                                  // 2879
      case 'string':                                                                                                   // 2880
        return this.validateString(shape, value, context);                                                             // 2881
      case 'base64':                                                                                                   // 2882
      case 'binary':                                                                                                   // 2883
        return this.validatePayload(value, context);                                                                   // 2884
      case 'integer':                                                                                                  // 2885
      case 'float':                                                                                                    // 2886
        return this.validateNumber(shape, value, context);                                                             // 2887
      case 'boolean':                                                                                                  // 2888
        return this.validateType(value, context, ['boolean']);                                                         // 2889
      case 'timestamp':                                                                                                // 2890
        return this.validateType(value, context, [Date,                                                                // 2891
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/, 'number'],                                                 // 2892
          'Date object, ISO-8601 string, or a UNIX timestamp');                                                        // 2893
      default:                                                                                                         // 2894
        return this.fail('UnkownType', 'Unhandled type ' +                                                             // 2895
                         shape.type + ' for ' + context);                                                              // 2896
    }                                                                                                                  // 2897
  },                                                                                                                   // 2898
                                                                                                                       // 2899
  validateString: function validateString(shape, value, context) {                                                     // 2900
    if (this.validateType(value, context, ['string'])) {                                                               // 2901
      this.validateEnum(shape, value, context);                                                                        // 2902
      this.validateRange(shape, value.length, context, 'string length');                                               // 2903
      this.validatePattern(shape, value, context);                                                                     // 2904
    }                                                                                                                  // 2905
  },                                                                                                                   // 2906
                                                                                                                       // 2907
  validatePattern: function validatePattern(shape, value, context) {                                                   // 2908
    if (this.validation['pattern'] && shape['pattern'] !== undefined) {                                                // 2909
      if (!(new RegExp(shape['pattern'])).test(value)) {                                                               // 2910
        this.fail('PatternMatchError', 'Provided value "' + value + '" '                                               // 2911
          + 'does not match regex pattern /' + shape['pattern'] + '/ for '                                             // 2912
          + context);                                                                                                  // 2913
      }                                                                                                                // 2914
    }                                                                                                                  // 2915
  },                                                                                                                   // 2916
                                                                                                                       // 2917
  validateRange: function validateRange(shape, value, context, descriptor) {                                           // 2918
    if (this.validation['min']) {                                                                                      // 2919
      if (shape['min'] !== undefined && value < shape['min']) {                                                        // 2920
        this.fail('MinRangeError', 'Expected ' + descriptor + ' >= '                                                   // 2921
          + shape['min'] + ', but found ' + value + ' for ' + context);                                                // 2922
      }                                                                                                                // 2923
    }                                                                                                                  // 2924
    if (this.validation['max']) {                                                                                      // 2925
      if (shape['max'] !== undefined && value > shape['max']) {                                                        // 2926
        this.fail('MaxRangeError', 'Expected ' + descriptor + ' <= '                                                   // 2927
          + shape['max'] + ', but found ' + value + ' for ' + context);                                                // 2928
      }                                                                                                                // 2929
    }                                                                                                                  // 2930
  },                                                                                                                   // 2931
                                                                                                                       // 2932
  validateEnum: function validateRange(shape, value, context) {                                                        // 2933
    if (this.validation['enum'] && shape['enum'] !== undefined) {                                                      // 2934
      if (shape['enum'].indexOf(value) === -1) {                                                                       // 2935
        this.fail('EnumError', 'Found string value of ' + value + ', but '                                             // 2936
          + 'expected ' + shape['enum'].join('|') + ' for ' + context);                                                // 2937
      }                                                                                                                // 2938
    }                                                                                                                  // 2939
  },                                                                                                                   // 2940
                                                                                                                       // 2941
  validateType: function validateType(value, context, acceptedTypes, type) {                                           // 2942
    if (value === null || value === undefined) return false;                                                           // 2943
                                                                                                                       // 2944
    var foundInvalidType = false;                                                                                      // 2945
    for (var i = 0; i < acceptedTypes.length; i++) {                                                                   // 2946
      if (typeof acceptedTypes[i] === 'string') {                                                                      // 2947
        if (typeof value === acceptedTypes[i]) return true;                                                            // 2948
      } else if (acceptedTypes[i] instanceof RegExp) {                                                                 // 2949
        if ((value || '').toString().match(acceptedTypes[i])) return true;                                             // 2950
      } else {                                                                                                         // 2951
        if (value instanceof acceptedTypes[i]) return true;                                                            // 2952
        if (AWS.util.isType(value, acceptedTypes[i])) return true;                                                     // 2953
        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();                                         // 2954
        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);                                                        // 2955
      }                                                                                                                // 2956
      foundInvalidType = true;                                                                                         // 2957
    }                                                                                                                  // 2958
                                                                                                                       // 2959
    var acceptedType = type;                                                                                           // 2960
    if (!acceptedType) {                                                                                               // 2961
      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');                                          // 2962
    }                                                                                                                  // 2963
                                                                                                                       // 2964
    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';                                                            // 2965
    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +                                             // 2966
              vowel + ' ' + acceptedType);                                                                             // 2967
    return false;                                                                                                      // 2968
  },                                                                                                                   // 2969
                                                                                                                       // 2970
  validateNumber: function validateNumber(shape, value, context) {                                                     // 2971
    if (value === null || value === undefined) return;                                                                 // 2972
    if (typeof value === 'string') {                                                                                   // 2973
      var castedValue = parseFloat(value);                                                                             // 2974
      if (castedValue.toString() === value) value = castedValue;                                                       // 2975
    }                                                                                                                  // 2976
    if (this.validateType(value, context, ['number'])) {                                                               // 2977
      this.validateRange(shape, value, context, 'numeric value');                                                      // 2978
    }                                                                                                                  // 2979
  },                                                                                                                   // 2980
                                                                                                                       // 2981
  validatePayload: function validatePayload(value, context) {                                                          // 2982
    if (value === null || value === undefined) return;                                                                 // 2983
    if (typeof value === 'string') return;                                                                             // 2984
    if (value && typeof value.byteLength === 'number') return; // typed arrays                                         // 2985
    if (AWS.util.isNode()) { // special check for buffer/stream in Node.js                                             // 2986
      var Stream = AWS.util.nodeRequire('stream').Stream;                                                              // 2987
      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;                                          // 2988
    }                                                                                                                  // 2989
                                                                                                                       // 2990
    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];                                       // 2991
    if (value) {                                                                                                       // 2992
      for (var i = 0; i < types.length; i++) {                                                                         // 2993
        if (AWS.util.isType(value, types[i])) return;                                                                  // 2994
        if (AWS.util.typeName(value.constructor) === types[i]) return;                                                 // 2995
      }                                                                                                                // 2996
    }                                                                                                                  // 2997
                                                                                                                       // 2998
    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +                                            // 2999
      'string, Buffer, Stream, Blob, or typed array object');                                                          // 3000
  }                                                                                                                    // 3001
});                                                                                                                    // 3002
                                                                                                                       // 3003
},{"./core":4}],28:[function(require,module,exports){                                                                  // 3004
var util = require('../util');                                                                                         // 3005
var JsonBuilder = require('../json/builder');                                                                          // 3006
var JsonParser = require('../json/parser');                                                                            // 3007
                                                                                                                       // 3008
function buildRequest(req) {                                                                                           // 3009
  var httpRequest = req.httpRequest;                                                                                   // 3010
  var api = req.service.api;                                                                                           // 3011
  var target = api.targetPrefix + '.' + api.operations[req.operation].name;                                            // 3012
  var version = api.jsonVersion || '1.0';                                                                              // 3013
  var input = api.operations[req.operation].input;                                                                     // 3014
  var builder = new JsonBuilder();                                                                                     // 3015
                                                                                                                       // 3016
  if (version === 1) version = '1.0';                                                                                  // 3017
  httpRequest.body = builder.build(req.params || {}, input);                                                           // 3018
  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;                                           // 3019
  httpRequest.headers['X-Amz-Target'] = target;                                                                        // 3020
}                                                                                                                      // 3021
                                                                                                                       // 3022
function extractError(resp) {                                                                                          // 3023
  var error = {};                                                                                                      // 3024
  var httpResponse = resp.httpResponse;                                                                                // 3025
                                                                                                                       // 3026
  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';                                             // 3027
  if (typeof error.code === 'string') {                                                                                // 3028
    error.code = error.code.split(':')[0];                                                                             // 3029
  }                                                                                                                    // 3030
                                                                                                                       // 3031
  if (httpResponse.body.length > 0) {                                                                                  // 3032
    var e = JSON.parse(httpResponse.body.toString());                                                                  // 3033
    if (e.__type || e.code) {                                                                                          // 3034
      error.code = (e.__type || e.code).split('#').pop();                                                              // 3035
    }                                                                                                                  // 3036
    if (error.code === 'RequestEntityTooLarge') {                                                                      // 3037
      error.message = 'Request body must be less than 1 MB';                                                           // 3038
    } else {                                                                                                           // 3039
      error.message = (e.message || e.Message || null);                                                                // 3040
    }                                                                                                                  // 3041
  } else {                                                                                                             // 3042
    error.statusCode = httpResponse.statusCode;                                                                        // 3043
    error.message = httpResponse.statusCode.toString();                                                                // 3044
  }                                                                                                                    // 3045
                                                                                                                       // 3046
  resp.error = util.error(new Error(), error);                                                                         // 3047
}                                                                                                                      // 3048
                                                                                                                       // 3049
function extractData(resp) {                                                                                           // 3050
  var body = resp.httpResponse.body.toString() || '{}';                                                                // 3051
  if (resp.request.service.config.convertResponseTypes === false) {                                                    // 3052
    resp.data = JSON.parse(body);                                                                                      // 3053
  } else {                                                                                                             // 3054
    var operation = resp.request.service.api.operations[resp.request.operation];                                       // 3055
    var shape = operation.output || {};                                                                                // 3056
    var parser = new JsonParser();                                                                                     // 3057
    resp.data = parser.parse(body, shape);                                                                             // 3058
  }                                                                                                                    // 3059
}                                                                                                                      // 3060
                                                                                                                       // 3061
module.exports = {                                                                                                     // 3062
  buildRequest: buildRequest,                                                                                          // 3063
  extractError: extractError,                                                                                          // 3064
  extractData: extractData                                                                                             // 3065
};                                                                                                                     // 3066
                                                                                                                       // 3067
},{"../json/builder":19,"../json/parser":20,"../util":59}],29:[function(require,module,exports){                       // 3068
var AWS = require('../core');                                                                                          // 3069
var util = require('../util');                                                                                         // 3070
var QueryParamSerializer = require('../query/query_param_serializer');                                                 // 3071
var Shape = require('../model/shape');                                                                                 // 3072
                                                                                                                       // 3073
function buildRequest(req) {                                                                                           // 3074
  var operation = req.service.api.operations[req.operation];                                                           // 3075
  var httpRequest = req.httpRequest;                                                                                   // 3076
  httpRequest.headers['Content-Type'] =                                                                                // 3077
    'application/x-www-form-urlencoded; charset=utf-8';                                                                // 3078
  httpRequest.params = {                                                                                               // 3079
    Version: req.service.api.apiVersion,                                                                               // 3080
    Action: operation.name                                                                                             // 3081
  };                                                                                                                   // 3082
                                                                                                                       // 3083
  var builder = new QueryParamSerializer();                                                                            // 3084
  builder.serialize(req.params, operation.input, function(name, value) {                                               // 3085
    httpRequest.params[name] = value;                                                                                  // 3086
  });                                                                                                                  // 3087
  httpRequest.body = util.queryParamsToString(httpRequest.params);                                                     // 3088
}                                                                                                                      // 3089
                                                                                                                       // 3090
function extractError(resp) {                                                                                          // 3091
  var data, body = resp.httpResponse.body.toString();                                                                  // 3092
  if (body.match('<UnknownOperationException')) {                                                                      // 3093
    data = {                                                                                                           // 3094
      Code: 'UnknownOperation',                                                                                        // 3095
      Message: 'Unknown operation ' + resp.request.operation                                                           // 3096
    };                                                                                                                 // 3097
  } else {                                                                                                             // 3098
    data = new AWS.XML.Parser().parse(body);                                                                           // 3099
  }                                                                                                                    // 3100
                                                                                                                       // 3101
  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;                                              // 3102
  if (data.Errors) data = data.Errors;                                                                                 // 3103
  if (data.Error) data = data.Error;                                                                                   // 3104
  if (data.Code) {                                                                                                     // 3105
    resp.error = util.error(new Error(), {                                                                             // 3106
      code: data.Code,                                                                                                 // 3107
      message: data.Message                                                                                            // 3108
    });                                                                                                                // 3109
  } else {                                                                                                             // 3110
    resp.error = util.error(new Error(), {                                                                             // 3111
      code: resp.httpResponse.statusCode,                                                                              // 3112
      message: null                                                                                                    // 3113
    });                                                                                                                // 3114
  }                                                                                                                    // 3115
}                                                                                                                      // 3116
                                                                                                                       // 3117
function extractData(resp) {                                                                                           // 3118
  var req = resp.request;                                                                                              // 3119
  var operation = req.service.api.operations[req.operation];                                                           // 3120
  var shape = operation.output || {};                                                                                  // 3121
  var origRules = shape;                                                                                               // 3122
                                                                                                                       // 3123
  if (origRules.resultWrapper) {                                                                                       // 3124
    var tmp = Shape.create({type: 'structure'});                                                                       // 3125
    tmp.members[origRules.resultWrapper] = shape;                                                                      // 3126
    tmp.memberNames = [origRules.resultWrapper];                                                                       // 3127
    util.property(shape, 'name', shape.resultWrapper);                                                                 // 3128
    shape = tmp;                                                                                                       // 3129
  }                                                                                                                    // 3130
                                                                                                                       // 3131
  var parser = new AWS.XML.Parser();                                                                                   // 3132
                                                                                                                       // 3133
  if (shape && shape.members && !shape.members._XAMZRequestId) {                                                       // 3134
    var requestIdShape = Shape.create(                                                                                 // 3135
      { type: 'string' },                                                                                              // 3136
      { api: { protocol: 'query' } },                                                                                  // 3137
      'requestId'                                                                                                      // 3138
    );                                                                                                                 // 3139
    shape.members._XAMZRequestId = requestIdShape;                                                                     // 3140
  }                                                                                                                    // 3141
                                                                                                                       // 3142
  var data = parser.parse(resp.httpResponse.body.toString(), shape);                                                   // 3143
  resp.requestId = data._XAMZRequestId || data.requestId;                                                              // 3144
                                                                                                                       // 3145
  if (data._XAMZRequestId) delete data._XAMZRequestId;                                                                 // 3146
                                                                                                                       // 3147
  if (origRules.resultWrapper) {                                                                                       // 3148
    if (data[origRules.resultWrapper]) {                                                                               // 3149
      util.update(data, data[origRules.resultWrapper]);                                                                // 3150
      delete data[origRules.resultWrapper];                                                                            // 3151
    }                                                                                                                  // 3152
  }                                                                                                                    // 3153
                                                                                                                       // 3154
  resp.data = data;                                                                                                    // 3155
}                                                                                                                      // 3156
                                                                                                                       // 3157
module.exports = {                                                                                                     // 3158
  buildRequest: buildRequest,                                                                                          // 3159
  extractError: extractError,                                                                                          // 3160
  extractData: extractData                                                                                             // 3161
};                                                                                                                     // 3162
                                                                                                                       // 3163
},{"../core":4,"../model/shape":26,"../query/query_param_serializer":33,"../util":59}],30:[function(require,module,exports){
var util = require('../util');                                                                                         // 3165
                                                                                                                       // 3166
function populateMethod(req) {                                                                                         // 3167
  req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;                                       // 3168
}                                                                                                                      // 3169
                                                                                                                       // 3170
function populateURI(req) {                                                                                            // 3171
  var operation = req.service.api.operations[req.operation];                                                           // 3172
  var input = operation.input;                                                                                         // 3173
  var uri = [req.httpRequest.endpoint.path, operation.httpPath].join('/');                                             // 3174
  uri = uri.replace(/\/+/g, '/');                                                                                      // 3175
                                                                                                                       // 3176
  var queryString = {}, queryStringSet = false;                                                                        // 3177
  util.each(input.members, function (name, member) {                                                                   // 3178
    var paramValue = req.params[name];                                                                                 // 3179
    if (paramValue === null || paramValue === undefined) return;                                                       // 3180
    if (member.location === 'uri') {                                                                                   // 3181
      var regex = new RegExp('\\{' + member.name + '(\\+)?\\}');                                                       // 3182
      uri = uri.replace(regex, function(_, plus) {                                                                     // 3183
        var fn = plus ? util.uriEscapePath : util.uriEscape;                                                           // 3184
        return fn(String(paramValue));                                                                                 // 3185
      });                                                                                                              // 3186
    } else if (member.location === 'querystring') {                                                                    // 3187
      queryStringSet = true;                                                                                           // 3188
                                                                                                                       // 3189
      if (member.type === 'list') {                                                                                    // 3190
        queryString[member.name] = paramValue.map(function(val) {                                                      // 3191
          return util.uriEscape(String(val));                                                                          // 3192
        });                                                                                                            // 3193
      } else if (member.type === 'map') {                                                                              // 3194
        util.each(paramValue, function(key, value) {                                                                   // 3195
          if (Array.isArray(value)) {                                                                                  // 3196
            queryString[key] = value.map(function(val) {                                                               // 3197
              return util.uriEscape(String(val));                                                                      // 3198
            });                                                                                                        // 3199
          } else {                                                                                                     // 3200
            queryString[key] = util.uriEscape(String(value));                                                          // 3201
          }                                                                                                            // 3202
        });                                                                                                            // 3203
      } else {                                                                                                         // 3204
        queryString[member.name] = util.uriEscape(String(paramValue));                                                 // 3205
      }                                                                                                                // 3206
    }                                                                                                                  // 3207
  });                                                                                                                  // 3208
                                                                                                                       // 3209
  if (queryStringSet) {                                                                                                // 3210
    uri += (uri.indexOf('?') >= 0 ? '&' : '?');                                                                        // 3211
    var parts = [];                                                                                                    // 3212
    util.arrayEach(Object.keys(queryString).sort(), function(key) {                                                    // 3213
      if (!Array.isArray(queryString[key])) {                                                                          // 3214
        queryString[key] = [queryString[key]];                                                                         // 3215
      }                                                                                                                // 3216
      for (var i = 0; i < queryString[key].length; i++) {                                                              // 3217
        parts.push(util.uriEscape(String(key)) + '=' + queryString[key][i]);                                           // 3218
      }                                                                                                                // 3219
    });                                                                                                                // 3220
    uri += parts.join('&');                                                                                            // 3221
  }                                                                                                                    // 3222
                                                                                                                       // 3223
  req.httpRequest.path = uri;                                                                                          // 3224
}                                                                                                                      // 3225
                                                                                                                       // 3226
function populateHeaders(req) {                                                                                        // 3227
  var operation = req.service.api.operations[req.operation];                                                           // 3228
  util.each(operation.input.members, function (name, member) {                                                         // 3229
    var value = req.params[name];                                                                                      // 3230
    if (value === null || value === undefined) return;                                                                 // 3231
                                                                                                                       // 3232
    if (member.location === 'headers' && member.type === 'map') {                                                      // 3233
      util.each(value, function(key, memberValue) {                                                                    // 3234
        req.httpRequest.headers[member.name + key] = memberValue;                                                      // 3235
      });                                                                                                              // 3236
    } else if (member.location === 'header') {                                                                         // 3237
      value = member.toWireFormat(value).toString();                                                                   // 3238
      req.httpRequest.headers[member.name] = value;                                                                    // 3239
    }                                                                                                                  // 3240
  });                                                                                                                  // 3241
}                                                                                                                      // 3242
                                                                                                                       // 3243
function buildRequest(req) {                                                                                           // 3244
  populateMethod(req);                                                                                                 // 3245
  populateURI(req);                                                                                                    // 3246
  populateHeaders(req);                                                                                                // 3247
}                                                                                                                      // 3248
                                                                                                                       // 3249
function extractError() {                                                                                              // 3250
}                                                                                                                      // 3251
                                                                                                                       // 3252
function extractData(resp) {                                                                                           // 3253
  var req = resp.request;                                                                                              // 3254
  var data = {};                                                                                                       // 3255
  var r = resp.httpResponse;                                                                                           // 3256
  var operation = req.service.api.operations[req.operation];                                                           // 3257
  var output = operation.output;                                                                                       // 3258
                                                                                                                       // 3259
  var headers = {};                                                                                                    // 3260
  util.each(r.headers, function (k, v) {                                                                               // 3261
    headers[k.toLowerCase()] = v;                                                                                      // 3262
  });                                                                                                                  // 3263
                                                                                                                       // 3264
  util.each(output.members, function(name, member) {                                                                   // 3265
    var header = (member.name || name).toLowerCase();                                                                  // 3266
    if (member.location === 'headers' && member.type === 'map') {                                                      // 3267
      data[name] = {};                                                                                                 // 3268
      var location = member.isLocationName ? member.name : '';                                                         // 3269
      var pattern = new RegExp('^' + location + '(.+)', 'i');                                                          // 3270
      util.each(r.headers, function (k, v) {                                                                           // 3271
        var result = k.match(pattern);                                                                                 // 3272
        if (result !== null) {                                                                                         // 3273
          data[name][result[1]] = v;                                                                                   // 3274
        }                                                                                                              // 3275
      });                                                                                                              // 3276
    } else if (member.location === 'header') {                                                                         // 3277
      if (headers[header] !== undefined) {                                                                             // 3278
        data[name] = headers[header];                                                                                  // 3279
      }                                                                                                                // 3280
    } else if (member.location === 'statusCode') {                                                                     // 3281
      data[name] = parseInt(r.statusCode, 10);                                                                         // 3282
    }                                                                                                                  // 3283
  });                                                                                                                  // 3284
                                                                                                                       // 3285
  resp.data = data;                                                                                                    // 3286
}                                                                                                                      // 3287
                                                                                                                       // 3288
module.exports = {                                                                                                     // 3289
  buildRequest: buildRequest,                                                                                          // 3290
  extractError: extractError,                                                                                          // 3291
  extractData: extractData                                                                                             // 3292
};                                                                                                                     // 3293
                                                                                                                       // 3294
},{"../util":59}],31:[function(require,module,exports){                                                                // 3295
var util = require('../util');                                                                                         // 3296
var Rest = require('./rest');                                                                                          // 3297
var Json = require('./json');                                                                                          // 3298
var JsonBuilder = require('../json/builder');                                                                          // 3299
var JsonParser = require('../json/parser');                                                                            // 3300
                                                                                                                       // 3301
function populateBody(req) {                                                                                           // 3302
  var builder = new JsonBuilder();                                                                                     // 3303
  var input = req.service.api.operations[req.operation].input;                                                         // 3304
                                                                                                                       // 3305
  if (input.payload) {                                                                                                 // 3306
    var params = {};                                                                                                   // 3307
    var payloadShape = input.members[input.payload];                                                                   // 3308
    params = req.params[input.payload];                                                                                // 3309
    if (params === undefined) return;                                                                                  // 3310
                                                                                                                       // 3311
    if (payloadShape.type === 'structure') {                                                                           // 3312
      req.httpRequest.body = builder.build(params, payloadShape);                                                      // 3313
    } else { // non-JSON payload                                                                                       // 3314
      req.httpRequest.body = params;                                                                                   // 3315
    }                                                                                                                  // 3316
  } else {                                                                                                             // 3317
    req.httpRequest.body = builder.build(req.params, input);                                                           // 3318
  }                                                                                                                    // 3319
}                                                                                                                      // 3320
                                                                                                                       // 3321
function buildRequest(req) {                                                                                           // 3322
  Rest.buildRequest(req);                                                                                              // 3323
                                                                                                                       // 3324
  if (['GET', 'HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {                                                 // 3325
    populateBody(req);                                                                                                 // 3326
  }                                                                                                                    // 3327
}                                                                                                                      // 3328
                                                                                                                       // 3329
function extractError(resp) {                                                                                          // 3330
  Json.extractError(resp);                                                                                             // 3331
}                                                                                                                      // 3332
                                                                                                                       // 3333
function extractData(resp) {                                                                                           // 3334
  Rest.extractData(resp);                                                                                              // 3335
                                                                                                                       // 3336
  var req = resp.request;                                                                                              // 3337
  var rules = req.service.api.operations[req.operation].output || {};                                                  // 3338
  if (rules.payload) {                                                                                                 // 3339
    var payloadMember = rules.members[rules.payload];                                                                  // 3340
    var body = resp.httpResponse.body;                                                                                 // 3341
    if (payloadMember.isStreaming) {                                                                                   // 3342
      resp.data[rules.payload] = body;                                                                                 // 3343
    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {                                  // 3344
      var parser = new JsonParser();                                                                                   // 3345
      resp.data[rules.payload] = parser.parse(body, payloadMember);                                                    // 3346
    } else {                                                                                                           // 3347
      resp.data[rules.payload] = body.toString();                                                                      // 3348
    }                                                                                                                  // 3349
  } else {                                                                                                             // 3350
    var data = resp.data;                                                                                              // 3351
    Json.extractData(resp);                                                                                            // 3352
    resp.data = util.merge(data, resp.data);                                                                           // 3353
  }                                                                                                                    // 3354
}                                                                                                                      // 3355
                                                                                                                       // 3356
module.exports = {                                                                                                     // 3357
  buildRequest: buildRequest,                                                                                          // 3358
  extractError: extractError,                                                                                          // 3359
  extractData: extractData                                                                                             // 3360
};                                                                                                                     // 3361
                                                                                                                       // 3362
},{"../json/builder":19,"../json/parser":20,"../util":59,"./json":28,"./rest":30}],32:[function(require,module,exports){
var AWS = require('../core');                                                                                          // 3364
var util = require('../util');                                                                                         // 3365
var Rest = require('./rest');                                                                                          // 3366
                                                                                                                       // 3367
function populateBody(req) {                                                                                           // 3368
  var input = req.service.api.operations[req.operation].input;                                                         // 3369
  var builder = new AWS.XML.Builder();                                                                                 // 3370
  var params = req.params;                                                                                             // 3371
                                                                                                                       // 3372
  var payload = input.payload;                                                                                         // 3373
  if (payload) {                                                                                                       // 3374
    var payloadMember = input.members[payload];                                                                        // 3375
    params = params[payload];                                                                                          // 3376
    if (params === undefined) return;                                                                                  // 3377
                                                                                                                       // 3378
    if (payloadMember.type === 'structure') {                                                                          // 3379
      var rootElement = payloadMember.name;                                                                            // 3380
      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);                                  // 3381
    } else { // non-xml payload                                                                                        // 3382
      req.httpRequest.body = params;                                                                                   // 3383
    }                                                                                                                  // 3384
  } else {                                                                                                             // 3385
    req.httpRequest.body = builder.toXML(params, input, input.name ||                                                  // 3386
      input.shape || util.string.upperFirst(req.operation) + 'Request');                                               // 3387
  }                                                                                                                    // 3388
}                                                                                                                      // 3389
                                                                                                                       // 3390
function buildRequest(req) {                                                                                           // 3391
  Rest.buildRequest(req);                                                                                              // 3392
                                                                                                                       // 3393
  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {                                                           // 3394
    populateBody(req);                                                                                                 // 3395
  }                                                                                                                    // 3396
}                                                                                                                      // 3397
                                                                                                                       // 3398
function extractError(resp) {                                                                                          // 3399
  Rest.extractError(resp);                                                                                             // 3400
                                                                                                                       // 3401
  var data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());                                            // 3402
  if (data.Errors) data = data.Errors;                                                                                 // 3403
  if (data.Error) data = data.Error;                                                                                   // 3404
  if (data.Code) {                                                                                                     // 3405
    resp.error = util.error(new Error(), {                                                                             // 3406
      code: data.Code,                                                                                                 // 3407
      message: data.Message                                                                                            // 3408
    });                                                                                                                // 3409
  } else {                                                                                                             // 3410
    resp.error = util.error(new Error(), {                                                                             // 3411
      code: resp.httpResponse.statusCode,                                                                              // 3412
      message: null                                                                                                    // 3413
    });                                                                                                                // 3414
  }                                                                                                                    // 3415
}                                                                                                                      // 3416
                                                                                                                       // 3417
function extractData(resp) {                                                                                           // 3418
  Rest.extractData(resp);                                                                                              // 3419
                                                                                                                       // 3420
  var parser;                                                                                                          // 3421
  var req = resp.request;                                                                                              // 3422
  var body = resp.httpResponse.body;                                                                                   // 3423
  var operation = req.service.api.operations[req.operation];                                                           // 3424
  var output = operation.output;                                                                                       // 3425
                                                                                                                       // 3426
  var payload = output.payload;                                                                                        // 3427
  if (payload) {                                                                                                       // 3428
    var payloadMember = output.members[payload];                                                                       // 3429
    if (payloadMember.isStreaming) {                                                                                   // 3430
      resp.data[payload] = body;                                                                                       // 3431
    } else if (payloadMember.type === 'structure') {                                                                   // 3432
      parser = new AWS.XML.Parser();                                                                                   // 3433
      resp.data[payload] = parser.parse(body.toString(), payloadMember);                                               // 3434
    } else {                                                                                                           // 3435
      resp.data[payload] = body.toString();                                                                            // 3436
    }                                                                                                                  // 3437
  } else if (body.length > 0) {                                                                                        // 3438
    parser = new AWS.XML.Parser();                                                                                     // 3439
    var data = parser.parse(body.toString(), output);                                                                  // 3440
    util.update(resp.data, data);                                                                                      // 3441
  }                                                                                                                    // 3442
}                                                                                                                      // 3443
                                                                                                                       // 3444
module.exports = {                                                                                                     // 3445
  buildRequest: buildRequest,                                                                                          // 3446
  extractError: extractError,                                                                                          // 3447
  extractData: extractData                                                                                             // 3448
};                                                                                                                     // 3449
                                                                                                                       // 3450
},{"../core":4,"../util":59,"./rest":30}],33:[function(require,module,exports){                                        // 3451
var util = require('../util');                                                                                         // 3452
                                                                                                                       // 3453
function QueryParamSerializer() {                                                                                      // 3454
}                                                                                                                      // 3455
                                                                                                                       // 3456
QueryParamSerializer.prototype.serialize = function(params, shape, fn) {                                               // 3457
  serializeStructure('', params, shape, fn);                                                                           // 3458
};                                                                                                                     // 3459
                                                                                                                       // 3460
function ucfirst(shape) {                                                                                              // 3461
  if (shape.isQueryName || shape.api.protocol !== 'ec2') {                                                             // 3462
    return shape.name;                                                                                                 // 3463
  } else {                                                                                                             // 3464
    return shape.name[0].toUpperCase() + shape.name.substr(1);                                                         // 3465
  }                                                                                                                    // 3466
}                                                                                                                      // 3467
                                                                                                                       // 3468
function serializeStructure(prefix, struct, rules, fn) {                                                               // 3469
  util.each(rules.members, function(name, member) {                                                                    // 3470
    var value = struct[name];                                                                                          // 3471
    if (value === null || value === undefined) return;                                                                 // 3472
                                                                                                                       // 3473
    var memberName = ucfirst(member);                                                                                  // 3474
    memberName = prefix ? prefix + '.' + memberName : memberName;                                                      // 3475
    serializeMember(memberName, value, member, fn);                                                                    // 3476
  });                                                                                                                  // 3477
}                                                                                                                      // 3478
                                                                                                                       // 3479
function serializeMap(name, map, rules, fn) {                                                                          // 3480
  var i = 1;                                                                                                           // 3481
  util.each(map, function (key, value) {                                                                               // 3482
    var prefix = rules.flattened ? '.' : '.entry.';                                                                    // 3483
    var position = prefix + (i++) + '.';                                                                               // 3484
    var keyName = position + (rules.key.name || 'key');                                                                // 3485
    var valueName = position + (rules.value.name || 'value');                                                          // 3486
    serializeMember(name + keyName, key, rules.key, fn);                                                               // 3487
    serializeMember(name + valueName, value, rules.value, fn);                                                         // 3488
  });                                                                                                                  // 3489
}                                                                                                                      // 3490
                                                                                                                       // 3491
function serializeList(name, list, rules, fn) {                                                                        // 3492
  var memberRules = rules.member || {};                                                                                // 3493
                                                                                                                       // 3494
  if (list.length === 0) {                                                                                             // 3495
    fn.call(this, name, null);                                                                                         // 3496
    return;                                                                                                            // 3497
  }                                                                                                                    // 3498
                                                                                                                       // 3499
  util.arrayEach(list, function (v, n) {                                                                               // 3500
    var suffix = '.' + (n + 1);                                                                                        // 3501
    if (rules.api.protocol === 'ec2') {                                                                                // 3502
      suffix = suffix + ''; // make linter happy                                                                       // 3503
    } else if (rules.flattened) {                                                                                      // 3504
      if (memberRules.name) {                                                                                          // 3505
        var parts = name.split('.');                                                                                   // 3506
        parts.pop();                                                                                                   // 3507
        parts.push(ucfirst(memberRules));                                                                              // 3508
        name = parts.join('.');                                                                                        // 3509
      }                                                                                                                // 3510
    } else {                                                                                                           // 3511
      suffix = '.member' + suffix;                                                                                     // 3512
    }                                                                                                                  // 3513
    serializeMember(name + suffix, v, memberRules, fn);                                                                // 3514
  });                                                                                                                  // 3515
}                                                                                                                      // 3516
                                                                                                                       // 3517
function serializeMember(name, value, rules, fn) {                                                                     // 3518
  if (value === null || value === undefined) return;                                                                   // 3519
  if (rules.type === 'structure') {                                                                                    // 3520
    serializeStructure(name, value, rules, fn);                                                                        // 3521
  } else if (rules.type === 'list') {                                                                                  // 3522
    serializeList(name, value, rules, fn);                                                                             // 3523
  } else if (rules.type === 'map') {                                                                                   // 3524
    serializeMap(name, value, rules, fn);                                                                              // 3525
  } else {                                                                                                             // 3526
    fn(name, rules.toWireFormat(value).toString());                                                                    // 3527
  }                                                                                                                    // 3528
}                                                                                                                      // 3529
                                                                                                                       // 3530
module.exports = QueryParamSerializer;                                                                                 // 3531
                                                                                                                       // 3532
},{"../util":59}],34:[function(require,module,exports){                                                                // 3533
var util = require('./util');                                                                                          // 3534
var regionConfig = require('./region_config.json');                                                                    // 3535
                                                                                                                       // 3536
function generateRegionPrefix(region) {                                                                                // 3537
  if (!region) return null;                                                                                            // 3538
                                                                                                                       // 3539
  var parts = region.split('-');                                                                                       // 3540
  if (parts.length < 3) return null;                                                                                   // 3541
  return parts.slice(0, parts.length - 2).join('-') + '-*';                                                            // 3542
}                                                                                                                      // 3543
                                                                                                                       // 3544
function derivedKeys(service) {                                                                                        // 3545
  var region = service.config.region;                                                                                  // 3546
  var regionPrefix = generateRegionPrefix(region);                                                                     // 3547
  var endpointPrefix = service.api.endpointPrefix;                                                                     // 3548
                                                                                                                       // 3549
  return [                                                                                                             // 3550
    [region, endpointPrefix],                                                                                          // 3551
    [regionPrefix, endpointPrefix],                                                                                    // 3552
    [region, '*'],                                                                                                     // 3553
    [regionPrefix, '*'],                                                                                               // 3554
    ['*', endpointPrefix],                                                                                             // 3555
    ['*', '*']                                                                                                         // 3556
  ].map(function(item) {                                                                                               // 3557
    return item[0] && item[1] ? item.join('/') : null;                                                                 // 3558
  });                                                                                                                  // 3559
}                                                                                                                      // 3560
                                                                                                                       // 3561
function applyConfig(service, config) {                                                                                // 3562
  util.each(config, function(key, value) {                                                                             // 3563
    if (key === 'globalEndpoint') return;                                                                              // 3564
    if (service.config[key] === undefined || service.config[key] === null) {                                           // 3565
      service.config[key] = value;                                                                                     // 3566
    }                                                                                                                  // 3567
  });                                                                                                                  // 3568
}                                                                                                                      // 3569
                                                                                                                       // 3570
function configureEndpoint(service) {                                                                                  // 3571
  var keys = derivedKeys(service);                                                                                     // 3572
  for (var i = 0; i < keys.length; i++) {                                                                              // 3573
    var key = keys[i];                                                                                                 // 3574
    if (!key) continue;                                                                                                // 3575
                                                                                                                       // 3576
    if (regionConfig.rules.hasOwnProperty(key)) {                                                                      // 3577
      var config = regionConfig.rules[key];                                                                            // 3578
      if (typeof config === 'string') {                                                                                // 3579
        config = regionConfig.patterns[config];                                                                        // 3580
      }                                                                                                                // 3581
                                                                                                                       // 3582
      service.isGlobalEndpoint = !!config.globalEndpoint;                                                              // 3583
                                                                                                                       // 3584
      if (!config.signatureVersion) config.signatureVersion = 'v4';                                                    // 3585
                                                                                                                       // 3586
      applyConfig(service, config);                                                                                    // 3587
      return;                                                                                                          // 3588
    }                                                                                                                  // 3589
  }                                                                                                                    // 3590
}                                                                                                                      // 3591
                                                                                                                       // 3592
module.exports = configureEndpoint;                                                                                    // 3593
                                                                                                                       // 3594
},{"./region_config.json":35,"./util":59}],35:[function(require,module,exports){                                       // 3595
module.exports={                                                                                                       // 3596
  "rules": {                                                                                                           // 3597
    "*/*": {                                                                                                           // 3598
      "endpoint": "{service}.{region}.amazonaws.com"                                                                   // 3599
    },                                                                                                                 // 3600
    "cn-*/*": {                                                                                                        // 3601
      "endpoint": "{service}.{region}.amazonaws.com.cn"                                                                // 3602
    },                                                                                                                 // 3603
    "*/cloudfront": "globalSSL",                                                                                       // 3604
    "*/iam": "globalSSL",                                                                                              // 3605
    "*/sts": "globalSSL",                                                                                              // 3606
    "*/importexport": {                                                                                                // 3607
      "endpoint": "{service}.amazonaws.com",                                                                           // 3608
      "signatureVersion": "v2",                                                                                        // 3609
      "globalEndpoint": true                                                                                           // 3610
    },                                                                                                                 // 3611
    "*/route53": {                                                                                                     // 3612
      "endpoint": "https://{service}.amazonaws.com",                                                                   // 3613
      "signatureVersion": "v3https",                                                                                   // 3614
      "globalEndpoint": true                                                                                           // 3615
    },                                                                                                                 // 3616
    "*/waf": "globalSSL",                                                                                              // 3617
    "us-gov-*/iam": "globalGovCloud",                                                                                  // 3618
    "us-gov-*/sts": {                                                                                                  // 3619
      "endpoint": "{service}.{region}.amazonaws.com"                                                                   // 3620
    },                                                                                                                 // 3621
    "us-gov-west-1/s3": "s3dash",                                                                                      // 3622
    "us-west-1/s3": "s3dash",                                                                                          // 3623
    "us-west-2/s3": "s3dash",                                                                                          // 3624
    "eu-west-1/s3": "s3dash",                                                                                          // 3625
    "ap-southeast-1/s3": "s3dash",                                                                                     // 3626
    "ap-southeast-2/s3": "s3dash",                                                                                     // 3627
    "ap-northeast-1/s3": "s3dash",                                                                                     // 3628
    "sa-east-1/s3": "s3dash",                                                                                          // 3629
    "us-east-1/s3": {                                                                                                  // 3630
      "endpoint": "{service}.amazonaws.com",                                                                           // 3631
      "signatureVersion": "s3"                                                                                         // 3632
    },                                                                                                                 // 3633
    "us-east-1/sdb": {                                                                                                 // 3634
      "endpoint": "{service}.amazonaws.com",                                                                           // 3635
      "signatureVersion": "v2"                                                                                         // 3636
    },                                                                                                                 // 3637
    "*/sdb": {                                                                                                         // 3638
      "endpoint": "{service}.{region}.amazonaws.com",                                                                  // 3639
      "signatureVersion": "v2"                                                                                         // 3640
    }                                                                                                                  // 3641
  },                                                                                                                   // 3642
                                                                                                                       // 3643
  "patterns": {                                                                                                        // 3644
    "globalSSL": {                                                                                                     // 3645
      "endpoint": "https://{service}.amazonaws.com",                                                                   // 3646
      "globalEndpoint": true                                                                                           // 3647
    },                                                                                                                 // 3648
    "globalGovCloud": {                                                                                                // 3649
      "endpoint": "{service}.us-gov.amazonaws.com"                                                                     // 3650
    },                                                                                                                 // 3651
    "s3dash": {                                                                                                        // 3652
      "endpoint": "{service}-{region}.amazonaws.com",                                                                  // 3653
      "signatureVersion": "s3"                                                                                         // 3654
    }                                                                                                                  // 3655
  }                                                                                                                    // 3656
}                                                                                                                      // 3657
                                                                                                                       // 3658
},{}],36:[function(require,module,exports){                                                                            // 3659
(function (process){                                                                                                   // 3660
var AWS = require('./core');                                                                                           // 3661
var AcceptorStateMachine = require('./state_machine');                                                                 // 3662
var inherit = AWS.util.inherit;                                                                                        // 3663
var domain = AWS.util.nodeRequire('domain');                                                                           // 3664
                                                                                                                       // 3665
                                                                                                                       // 3666
var hardErrorStates = {success: 1, error: 1, complete: 1};                                                             // 3667
                                                                                                                       // 3668
function isTerminalState(machine) {                                                                                    // 3669
  return hardErrorStates.hasOwnProperty(machine._asm.currentState);                                                    // 3670
}                                                                                                                      // 3671
                                                                                                                       // 3672
var fsm = new AcceptorStateMachine();                                                                                  // 3673
fsm.setupStates = function() {                                                                                         // 3674
  var transition = function(_, done) {                                                                                 // 3675
    var self = this;                                                                                                   // 3676
    self._haltHandlersOnError = false;                                                                                 // 3677
                                                                                                                       // 3678
    self.emit(self._asm.currentState, function(err) {                                                                  // 3679
      if (err) {                                                                                                       // 3680
        if (isTerminalState(self)) {                                                                                   // 3681
          if (domain && self.domain instanceof domain.Domain) {                                                        // 3682
            err.domainEmitter = self;                                                                                  // 3683
            err.domain = self.domain;                                                                                  // 3684
            err.domainThrown = false;                                                                                  // 3685
            self.domain.emit('error', err);                                                                            // 3686
          } else {                                                                                                     // 3687
            throw err;                                                                                                 // 3688
          }                                                                                                            // 3689
        } else {                                                                                                       // 3690
          self.response.error = err;                                                                                   // 3691
          done(err);                                                                                                   // 3692
        }                                                                                                              // 3693
      } else {                                                                                                         // 3694
        done(self.response.error);                                                                                     // 3695
      }                                                                                                                // 3696
    });                                                                                                                // 3697
                                                                                                                       // 3698
  };                                                                                                                   // 3699
                                                                                                                       // 3700
  this.addState('validate', 'build', 'error', transition);                                                             // 3701
  this.addState('build', 'afterBuild', 'restart', transition);                                                         // 3702
  this.addState('afterBuild', 'sign', 'restart', transition);                                                          // 3703
  this.addState('sign', 'send', 'retry', transition);                                                                  // 3704
  this.addState('retry', 'afterRetry', 'afterRetry', transition);                                                      // 3705
  this.addState('afterRetry', 'sign', 'error', transition);                                                            // 3706
  this.addState('send', 'validateResponse', 'retry', transition);                                                      // 3707
  this.addState('validateResponse', 'extractData', 'extractError', transition);                                        // 3708
  this.addState('extractError', 'extractData', 'retry', transition);                                                   // 3709
  this.addState('extractData', 'success', 'retry', transition);                                                        // 3710
  this.addState('restart', 'build', 'error', transition);                                                              // 3711
  this.addState('success', 'complete', 'complete', transition);                                                        // 3712
  this.addState('error', 'complete', 'complete', transition);                                                          // 3713
  this.addState('complete', null, null, transition);                                                                   // 3714
};                                                                                                                     // 3715
fsm.setupStates();                                                                                                     // 3716
                                                                                                                       // 3717
                                                                                                                       // 3718
AWS.Request = inherit({                                                                                                // 3719
                                                                                                                       // 3720
                                                                                                                       // 3721
  constructor: function Request(service, operation, params) {                                                          // 3722
    var endpoint = service.endpoint;                                                                                   // 3723
    var region = service.config.region;                                                                                // 3724
    var customUserAgent = service.config.customUserAgent;                                                              // 3725
                                                                                                                       // 3726
    if (service.isGlobalEndpoint) region = 'us-east-1';                                                                // 3727
                                                                                                                       // 3728
    this.domain = domain && domain.active;                                                                             // 3729
    this.service = service;                                                                                            // 3730
    this.operation = operation;                                                                                        // 3731
    this.params = params || {};                                                                                        // 3732
    this.httpRequest = new AWS.HttpRequest(endpoint, region, customUserAgent);                                         // 3733
    this.startTime = AWS.util.date.getDate();                                                                          // 3734
                                                                                                                       // 3735
    this.response = new AWS.Response(this);                                                                            // 3736
    this._asm = new AcceptorStateMachine(fsm.states, 'validate');                                                      // 3737
    this._haltHandlersOnError = false;                                                                                 // 3738
                                                                                                                       // 3739
    AWS.SequentialExecutor.call(this);                                                                                 // 3740
    this.emit = this.emitEvent;                                                                                        // 3741
  },                                                                                                                   // 3742
                                                                                                                       // 3743
                                                                                                                       // 3744
                                                                                                                       // 3745
                                                                                                                       // 3746
  send: function send(callback) {                                                                                      // 3747
    if (callback) {                                                                                                    // 3748
      this.on('complete', function (resp) {                                                                            // 3749
        callback.call(resp, resp.error, resp.data);                                                                    // 3750
      });                                                                                                              // 3751
    }                                                                                                                  // 3752
    this.runTo();                                                                                                      // 3753
                                                                                                                       // 3754
    return this.response;                                                                                              // 3755
  },                                                                                                                   // 3756
                                                                                                                       // 3757
                                                                                                                       // 3758
  build: function build(callback) {                                                                                    // 3759
    return this.runTo('send', callback);                                                                               // 3760
  },                                                                                                                   // 3761
                                                                                                                       // 3762
                                                                                                                       // 3763
  runTo: function runTo(state, done) {                                                                                 // 3764
    this._asm.runTo(state, done, this);                                                                                // 3765
    return this;                                                                                                       // 3766
  },                                                                                                                   // 3767
                                                                                                                       // 3768
                                                                                                                       // 3769
  abort: function abort() {                                                                                            // 3770
    this.removeAllListeners('validateResponse');                                                                       // 3771
    this.removeAllListeners('extractError');                                                                           // 3772
    this.on('validateResponse', function addAbortedError(resp) {                                                       // 3773
      resp.error = AWS.util.error(new Error('Request aborted by user'), {                                              // 3774
         code: 'RequestAbortedError', retryable: false                                                                 // 3775
      });                                                                                                              // 3776
    });                                                                                                                // 3777
                                                                                                                       // 3778
    if (this.httpRequest.stream) { // abort HTTP stream                                                                // 3779
      this.httpRequest.stream.abort();                                                                                 // 3780
      if (this.httpRequest._abortCallback) {                                                                           // 3781
         this.httpRequest._abortCallback();                                                                            // 3782
      } else {                                                                                                         // 3783
        this.removeAllListeners('send'); // haven't sent yet, so let's not                                             // 3784
      }                                                                                                                // 3785
    }                                                                                                                  // 3786
                                                                                                                       // 3787
    return this;                                                                                                       // 3788
  },                                                                                                                   // 3789
                                                                                                                       // 3790
                                                                                                                       // 3791
  eachPage: function eachPage(callback) {                                                                              // 3792
    callback = AWS.util.fn.makeAsync(callback, 3);                                                                     // 3793
                                                                                                                       // 3794
    function wrappedCallback(response) {                                                                               // 3795
      callback.call(response, response.error, response.data, function (result) {                                       // 3796
        if (result === false) return;                                                                                  // 3797
                                                                                                                       // 3798
        if (response.hasNextPage()) {                                                                                  // 3799
          response.nextPage().on('complete', wrappedCallback).send();                                                  // 3800
        } else {                                                                                                       // 3801
          callback.call(response, null, null, AWS.util.fn.noop);                                                       // 3802
        }                                                                                                              // 3803
      });                                                                                                              // 3804
    }                                                                                                                  // 3805
                                                                                                                       // 3806
    this.on('complete', wrappedCallback).send();                                                                       // 3807
  },                                                                                                                   // 3808
                                                                                                                       // 3809
                                                                                                                       // 3810
  eachItem: function eachItem(callback) {                                                                              // 3811
    var self = this;                                                                                                   // 3812
    function wrappedCallback(err, data) {                                                                              // 3813
      if (err) return callback(err, null);                                                                             // 3814
      if (data === null) return callback(null, null);                                                                  // 3815
                                                                                                                       // 3816
      var config = self.service.paginationConfig(self.operation);                                                      // 3817
      var resultKey = config.resultKey;                                                                                // 3818
      if (Array.isArray(resultKey)) resultKey = resultKey[0];                                                          // 3819
      var results = AWS.util.jamespath.query(resultKey, data);                                                         // 3820
      AWS.util.arrayEach(results, function(result) {                                                                   // 3821
        AWS.util.arrayEach(result, function(item) { callback(null, item); });                                          // 3822
      });                                                                                                              // 3823
    }                                                                                                                  // 3824
                                                                                                                       // 3825
    this.eachPage(wrappedCallback);                                                                                    // 3826
  },                                                                                                                   // 3827
                                                                                                                       // 3828
                                                                                                                       // 3829
  isPageable: function isPageable() {                                                                                  // 3830
    return this.service.paginationConfig(this.operation) ? true : false;                                               // 3831
  },                                                                                                                   // 3832
                                                                                                                       // 3833
                                                                                                                       // 3834
  createReadStream: function createReadStream() {                                                                      // 3835
    var streams = AWS.util.nodeRequire('stream');                                                                      // 3836
    var req = this;                                                                                                    // 3837
    var stream = null;                                                                                                 // 3838
                                                                                                                       // 3839
    if (AWS.HttpClient.streamsApiVersion === 2) {                                                                      // 3840
      stream = new streams.PassThrough();                                                                              // 3841
      req.send();                                                                                                      // 3842
    } else {                                                                                                           // 3843
      stream = new streams.Stream();                                                                                   // 3844
      stream.readable = true;                                                                                          // 3845
                                                                                                                       // 3846
      stream.sent = false;                                                                                             // 3847
      stream.on('newListener', function(event) {                                                                       // 3848
        if (!stream.sent && event === 'data') {                                                                        // 3849
          stream.sent = true;                                                                                          // 3850
          process.nextTick(function() { req.send(); });                                                                // 3851
        }                                                                                                              // 3852
      });                                                                                                              // 3853
    }                                                                                                                  // 3854
                                                                                                                       // 3855
    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {                                         // 3856
      if (statusCode < 300) {                                                                                          // 3857
        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);                                             // 3858
        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);                                           // 3859
        req.on('httpError', function streamHttpError(error) {                                                          // 3860
          resp.error = error;                                                                                          // 3861
          resp.error.retryable = false;                                                                                // 3862
        });                                                                                                            // 3863
                                                                                                                       // 3864
        var httpStream = resp.httpResponse.createUnbufferedStream();                                                   // 3865
        if (AWS.HttpClient.streamsApiVersion === 2) {                                                                  // 3866
          httpStream.pipe(stream);                                                                                     // 3867
        } else {                                                                                                       // 3868
          httpStream.on('data', function(arg) {                                                                        // 3869
            stream.emit('data', arg);                                                                                  // 3870
          });                                                                                                          // 3871
          httpStream.on('end', function() {                                                                            // 3872
            stream.emit('end');                                                                                        // 3873
          });                                                                                                          // 3874
        }                                                                                                              // 3875
                                                                                                                       // 3876
        httpStream.on('error', function(err) {                                                                         // 3877
          stream.emit('error', err);                                                                                   // 3878
        });                                                                                                            // 3879
      }                                                                                                                // 3880
    });                                                                                                                // 3881
                                                                                                                       // 3882
    this.on('error', function(err) {                                                                                   // 3883
      stream.emit('error', err);                                                                                       // 3884
    });                                                                                                                // 3885
                                                                                                                       // 3886
    return stream;                                                                                                     // 3887
  },                                                                                                                   // 3888
                                                                                                                       // 3889
                                                                                                                       // 3890
  emitEvent: function emit(eventName, args, done) {                                                                    // 3891
    if (typeof args === 'function') { done = args; args = null; }                                                      // 3892
    if (!done) done = function() { };                                                                                  // 3893
    if (!args) args = this.eventParameters(eventName, this.response);                                                  // 3894
                                                                                                                       // 3895
    var origEmit = AWS.SequentialExecutor.prototype.emit;                                                              // 3896
    origEmit.call(this, eventName, args, function (err) {                                                              // 3897
      if (err) this.response.error = err;                                                                              // 3898
      done.call(this, err);                                                                                            // 3899
    });                                                                                                                // 3900
  },                                                                                                                   // 3901
                                                                                                                       // 3902
                                                                                                                       // 3903
  eventParameters: function eventParameters(eventName) {                                                               // 3904
    switch (eventName) {                                                                                               // 3905
      case 'restart':                                                                                                  // 3906
      case 'validate':                                                                                                 // 3907
      case 'sign':                                                                                                     // 3908
      case 'build':                                                                                                    // 3909
      case 'afterValidate':                                                                                            // 3910
      case 'afterBuild':                                                                                               // 3911
        return [this];                                                                                                 // 3912
      case 'error':                                                                                                    // 3913
        return [this.response.error, this.response];                                                                   // 3914
      default:                                                                                                         // 3915
        return [this.response];                                                                                        // 3916
    }                                                                                                                  // 3917
  },                                                                                                                   // 3918
                                                                                                                       // 3919
                                                                                                                       // 3920
  presign: function presign(expires, callback) {                                                                       // 3921
    if (!callback && typeof expires === 'function') {                                                                  // 3922
      callback = expires;                                                                                              // 3923
      expires = null;                                                                                                  // 3924
    }                                                                                                                  // 3925
    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);                                            // 3926
  },                                                                                                                   // 3927
                                                                                                                       // 3928
                                                                                                                       // 3929
  toUnauthenticated: function toUnauthenticated() {                                                                    // 3930
    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);                                     // 3931
    this.removeListener('sign', AWS.EventListeners.Core.SIGN);                                                         // 3932
    return this;                                                                                                       // 3933
  },                                                                                                                   // 3934
                                                                                                                       // 3935
                                                                                                                       // 3936
  toGet: function toGet() {                                                                                            // 3937
    if (this.service.api.protocol === 'query' ||                                                                       // 3938
        this.service.api.protocol === 'ec2') {                                                                         // 3939
      this.removeListener('build', this.buildAsGet);                                                                   // 3940
      this.addListener('build', this.buildAsGet);                                                                      // 3941
    }                                                                                                                  // 3942
    return this;                                                                                                       // 3943
  },                                                                                                                   // 3944
                                                                                                                       // 3945
                                                                                                                       // 3946
  buildAsGet: function buildAsGet(request) {                                                                           // 3947
    request.httpRequest.method = 'GET';                                                                                // 3948
    request.httpRequest.path = request.service.endpoint.path +                                                         // 3949
                               '?' + request.httpRequest.body;                                                         // 3950
    request.httpRequest.body = '';                                                                                     // 3951
                                                                                                                       // 3952
    delete request.httpRequest.headers['Content-Length'];                                                              // 3953
    delete request.httpRequest.headers['Content-Type'];                                                                // 3954
  },                                                                                                                   // 3955
                                                                                                                       // 3956
                                                                                                                       // 3957
  haltHandlersOnError: function haltHandlersOnError() {                                                                // 3958
    this._haltHandlersOnError = true;                                                                                  // 3959
  }                                                                                                                    // 3960
});                                                                                                                    // 3961
                                                                                                                       // 3962
AWS.util.mixin(AWS.Request, AWS.SequentialExecutor);                                                                   // 3963
                                                                                                                       // 3964
}).call(this,require("FWaASH"))                                                                                        // 3965
},{"./core":4,"./state_machine":58,"FWaASH":73}],37:[function(require,module,exports){                                 // 3966
                                                                                                                       // 3967
                                                                                                                       // 3968
var AWS = require('./core');                                                                                           // 3969
var inherit = AWS.util.inherit;                                                                                        // 3970
                                                                                                                       // 3971
                                                                                                                       // 3972
AWS.ResourceWaiter = inherit({                                                                                         // 3973
                                                                                                                       // 3974
  constructor: function constructor(service, state) {                                                                  // 3975
    this.service = service;                                                                                            // 3976
    this.state = state;                                                                                                // 3977
                                                                                                                       // 3978
    if (typeof this.state === 'object') {                                                                              // 3979
      AWS.util.each.call(this, this.state, function (key, value) {                                                     // 3980
        this.state = key;                                                                                              // 3981
        this.expectedValue = value;                                                                                    // 3982
      });                                                                                                              // 3983
    }                                                                                                                  // 3984
                                                                                                                       // 3985
    this.loadWaiterConfig(this.state);                                                                                 // 3986
    if (!this.expectedValue) {                                                                                         // 3987
      this.expectedValue = this.config.successValue;                                                                   // 3988
    }                                                                                                                  // 3989
  },                                                                                                                   // 3990
                                                                                                                       // 3991
  service: null,                                                                                                       // 3992
                                                                                                                       // 3993
  state: null,                                                                                                         // 3994
                                                                                                                       // 3995
  expectedValue: null,                                                                                                 // 3996
                                                                                                                       // 3997
  config: null,                                                                                                        // 3998
                                                                                                                       // 3999
  waitDone: false,                                                                                                     // 4000
                                                                                                                       // 4001
  Listeners: {                                                                                                         // 4002
    retry: new AWS.SequentialExecutor().addNamedListeners(function(add) {                                              // 4003
      add('RETRY_CHECK', 'retry', function(resp) {                                                                     // 4004
        var waiter = resp.request._waiter;                                                                             // 4005
        if (resp.error && resp.error.code === 'ResourceNotReady') {                                                    // 4006
          resp.error.retryDelay = waiter.config.interval * 1000;                                                       // 4007
        }                                                                                                              // 4008
      });                                                                                                              // 4009
    }),                                                                                                                // 4010
                                                                                                                       // 4011
    output: new AWS.SequentialExecutor().addNamedListeners(function(add) {                                             // 4012
      add('CHECK_OUT_ERROR', 'extractError', function CHECK_OUT_ERROR(resp) {                                          // 4013
        if (resp.error) {                                                                                              // 4014
          resp.request._waiter.setError(resp, true);                                                                   // 4015
        }                                                                                                              // 4016
      });                                                                                                              // 4017
                                                                                                                       // 4018
      add('CHECK_OUTPUT', 'extractData', function CHECK_OUTPUT(resp) {                                                 // 4019
        var waiter = resp.request._waiter;                                                                             // 4020
        var success = waiter.checkSuccess(resp);                                                                       // 4021
        if (!success) {                                                                                                // 4022
          waiter.setError(resp, success === null ? false : true);                                                      // 4023
        } else {                                                                                                       // 4024
          resp.error = null;                                                                                           // 4025
        }                                                                                                              // 4026
      });                                                                                                              // 4027
    }),                                                                                                                // 4028
                                                                                                                       // 4029
    error: new AWS.SequentialExecutor().addNamedListeners(function(add) {                                              // 4030
      add('CHECK_ERROR', 'extractError', function CHECK_ERROR(resp) {                                                  // 4031
        var waiter = resp.request._waiter;                                                                             // 4032
        var success = waiter.checkError(resp);                                                                         // 4033
        if (!success) {                                                                                                // 4034
          waiter.setError(resp, success === null ? false : true);                                                      // 4035
        } else {                                                                                                       // 4036
          resp.error = null;                                                                                           // 4037
          resp.data = {};                                                                                              // 4038
          resp.request.removeAllListeners('extractData');                                                              // 4039
        }                                                                                                              // 4040
      });                                                                                                              // 4041
                                                                                                                       // 4042
      add('CHECK_ERR_OUTPUT', 'extractData', function CHECK_ERR_OUTPUT(resp) {                                         // 4043
        resp.request._waiter.setError(resp, true);                                                                     // 4044
      });                                                                                                              // 4045
    })                                                                                                                 // 4046
  },                                                                                                                   // 4047
                                                                                                                       // 4048
                                                                                                                       // 4049
  wait: function wait(params, callback) {                                                                              // 4050
    if (typeof params === 'function') {                                                                                // 4051
      callback = params; params = undefined;                                                                           // 4052
    }                                                                                                                  // 4053
                                                                                                                       // 4054
    var request = this.service.makeRequest(this.config.operation, params);                                             // 4055
    var listeners = this.Listeners[this.config.successType];                                                           // 4056
    request._waiter = this;                                                                                            // 4057
    request.response.maxRetries = this.config.maxAttempts;                                                             // 4058
    request.addListeners(this.Listeners.retry);                                                                        // 4059
    if (listeners) request.addListeners(listeners);                                                                    // 4060
                                                                                                                       // 4061
    if (callback) request.send(callback);                                                                              // 4062
    return request;                                                                                                    // 4063
  },                                                                                                                   // 4064
                                                                                                                       // 4065
  setError: function setError(resp, retryable) {                                                                       // 4066
    resp.data = null;                                                                                                  // 4067
    resp.error = AWS.util.error(resp.error || new Error(), {                                                           // 4068
      code: 'ResourceNotReady',                                                                                        // 4069
      message: 'Resource is not in the state ' + this.state,                                                           // 4070
      retryable: retryable                                                                                             // 4071
    });                                                                                                                // 4072
  },                                                                                                                   // 4073
                                                                                                                       // 4074
                                                                                                                       // 4075
  checkSuccess: function checkSuccess(resp) {                                                                          // 4076
    if (!this.config.successPath) {                                                                                    // 4077
      return resp.httpResponse.statusCode < 300;                                                                       // 4078
    }                                                                                                                  // 4079
                                                                                                                       // 4080
    var r = AWS.util.jamespath.find(this.config.successPath, resp.data);                                               // 4081
                                                                                                                       // 4082
    if (this.config.failureValue &&                                                                                    // 4083
        this.config.failureValue.indexOf(r) >= 0) {                                                                    // 4084
      return null; // fast fail                                                                                        // 4085
    }                                                                                                                  // 4086
                                                                                                                       // 4087
    if (this.expectedValue) {                                                                                          // 4088
      return r === this.expectedValue;                                                                                 // 4089
    } else {                                                                                                           // 4090
      return r ? true : false;                                                                                         // 4091
    }                                                                                                                  // 4092
  },                                                                                                                   // 4093
                                                                                                                       // 4094
                                                                                                                       // 4095
  checkError: function checkError(resp) {                                                                              // 4096
    var value = this.config.successValue;                                                                              // 4097
    if (typeof value === 'number') {                                                                                   // 4098
      return resp.httpResponse.statusCode === value;                                                                   // 4099
    } else {                                                                                                           // 4100
      return resp.error && resp.error.code === value;                                                                  // 4101
    }                                                                                                                  // 4102
  },                                                                                                                   // 4103
                                                                                                                       // 4104
                                                                                                                       // 4105
  loadWaiterConfig: function loadWaiterConfig(state, noException) {                                                    // 4106
    if (!this.service.api.waiters[state]) {                                                                            // 4107
      if (noException) return;                                                                                         // 4108
      throw new AWS.util.error(new Error(), {                                                                          // 4109
        code: 'StateNotFoundError',                                                                                    // 4110
        message: 'State ' + state + ' not found.'                                                                      // 4111
      });                                                                                                              // 4112
    }                                                                                                                  // 4113
                                                                                                                       // 4114
    this.config = this.service.api.waiters[state];                                                                     // 4115
    var config = this.config;                                                                                          // 4116
                                                                                                                       // 4117
    (function () { // anonymous function to avoid max complexity count                                                 // 4118
      config.successType = config.successType || config.acceptorType;                                                  // 4119
      config.successPath = config.successPath || config.acceptorPath;                                                  // 4120
      config.successValue = config.successValue || config.acceptorValue;                                               // 4121
      config.failureType = config.failureType || config.acceptorType;                                                  // 4122
      config.failurePath = config.failurePath || config.acceptorPath;                                                  // 4123
      config.failureValue = config.failureValue || config.acceptorValue;                                               // 4124
    })();                                                                                                              // 4125
  }                                                                                                                    // 4126
});                                                                                                                    // 4127
                                                                                                                       // 4128
},{"./core":4}],38:[function(require,module,exports){                                                                  // 4129
var AWS = require('./core');                                                                                           // 4130
var inherit = AWS.util.inherit;                                                                                        // 4131
                                                                                                                       // 4132
                                                                                                                       // 4133
AWS.Response = inherit({                                                                                               // 4134
                                                                                                                       // 4135
                                                                                                                       // 4136
  constructor: function Response(request) {                                                                            // 4137
    this.request = request;                                                                                            // 4138
    this.data = null;                                                                                                  // 4139
    this.error = null;                                                                                                 // 4140
    this.retryCount = 0;                                                                                               // 4141
    this.redirectCount = 0;                                                                                            // 4142
    this.httpResponse = new AWS.HttpResponse();                                                                        // 4143
    if (request) {                                                                                                     // 4144
      this.maxRetries = request.service.numRetries();                                                                  // 4145
      this.maxRedirects = request.service.config.maxRedirects;                                                         // 4146
    }                                                                                                                  // 4147
  },                                                                                                                   // 4148
                                                                                                                       // 4149
                                                                                                                       // 4150
  nextPage: function nextPage(callback) {                                                                              // 4151
    var config;                                                                                                        // 4152
    var service = this.request.service;                                                                                // 4153
    var operation = this.request.operation;                                                                            // 4154
    try {                                                                                                              // 4155
      config = service.paginationConfig(operation, true);                                                              // 4156
    } catch (e) { this.error = e; }                                                                                    // 4157
                                                                                                                       // 4158
    if (!this.hasNextPage()) {                                                                                         // 4159
      if (callback) callback(this.error, null);                                                                        // 4160
      else if (this.error) throw this.error;                                                                           // 4161
      return null;                                                                                                     // 4162
    }                                                                                                                  // 4163
                                                                                                                       // 4164
    var params = AWS.util.copy(this.request.params);                                                                   // 4165
    if (!this.nextPageTokens) {                                                                                        // 4166
      return callback ? callback(null, null) : null;                                                                   // 4167
    } else {                                                                                                           // 4168
      var inputTokens = config.inputToken;                                                                             // 4169
      if (typeof inputTokens === 'string') inputTokens = [inputTokens];                                                // 4170
      for (var i = 0; i < inputTokens.length; i++) {                                                                   // 4171
        params[inputTokens[i]] = this.nextPageTokens[i];                                                               // 4172
      }                                                                                                                // 4173
      return service.makeRequest(this.request.operation, params, callback);                                            // 4174
    }                                                                                                                  // 4175
  },                                                                                                                   // 4176
                                                                                                                       // 4177
                                                                                                                       // 4178
  hasNextPage: function hasNextPage() {                                                                                // 4179
    this.cacheNextPageTokens();                                                                                        // 4180
    if (this.nextPageTokens) return true;                                                                              // 4181
    if (this.nextPageTokens === undefined) return undefined;                                                           // 4182
    else return false;                                                                                                 // 4183
  },                                                                                                                   // 4184
                                                                                                                       // 4185
                                                                                                                       // 4186
  cacheNextPageTokens: function cacheNextPageTokens() {                                                                // 4187
    if (this.hasOwnProperty('nextPageTokens')) return this.nextPageTokens;                                             // 4188
    this.nextPageTokens = undefined;                                                                                   // 4189
                                                                                                                       // 4190
    var config = this.request.service.paginationConfig(this.request.operation);                                        // 4191
    if (!config) return this.nextPageTokens;                                                                           // 4192
                                                                                                                       // 4193
    this.nextPageTokens = null;                                                                                        // 4194
    if (config.moreResults) {                                                                                          // 4195
      if (!AWS.util.jamespath.find(config.moreResults, this.data)) {                                                   // 4196
        return this.nextPageTokens;                                                                                    // 4197
      }                                                                                                                // 4198
    }                                                                                                                  // 4199
                                                                                                                       // 4200
    var exprs = config.outputToken;                                                                                    // 4201
    if (typeof exprs === 'string') exprs = [exprs];                                                                    // 4202
    AWS.util.arrayEach.call(this, exprs, function (expr) {                                                             // 4203
      var output = AWS.util.jamespath.find(expr, this.data);                                                           // 4204
      if (output) {                                                                                                    // 4205
        this.nextPageTokens = this.nextPageTokens || [];                                                               // 4206
        this.nextPageTokens.push(output);                                                                              // 4207
      }                                                                                                                // 4208
    });                                                                                                                // 4209
                                                                                                                       // 4210
    return this.nextPageTokens;                                                                                        // 4211
  }                                                                                                                    // 4212
                                                                                                                       // 4213
});                                                                                                                    // 4214
                                                                                                                       // 4215
},{"./core":4}],39:[function(require,module,exports){                                                                  // 4216
(function (Buffer){                                                                                                    // 4217
var AWS = require('../core');                                                                                          // 4218
var byteLength = AWS.util.string.byteLength;                                                                           // 4219
                                                                                                                       // 4220
                                                                                                                       // 4221
AWS.S3.ManagedUpload = AWS.util.inherit({                                                                              // 4222
                                                                                                                       // 4223
  constructor: function ManagedUpload(options) {                                                                       // 4224
    var self = this;                                                                                                   // 4225
    AWS.SequentialExecutor.call(self);                                                                                 // 4226
    self.body = null;                                                                                                  // 4227
    self.sliceFn = null;                                                                                               // 4228
    self.callback = null;                                                                                              // 4229
    self.parts = {};                                                                                                   // 4230
    self.completeInfo = [];                                                                                            // 4231
    self.fillQueue = function() {                                                                                      // 4232
      self.callback(new Error('Unsupported body payload ' + typeof self.body));                                        // 4233
    };                                                                                                                 // 4234
                                                                                                                       // 4235
    self.configure(options);                                                                                           // 4236
  },                                                                                                                   // 4237
                                                                                                                       // 4238
                                                                                                                       // 4239
  configure: function configure(options) {                                                                             // 4240
    options = options || {};                                                                                           // 4241
    this.partSize = this.minPartSize;                                                                                  // 4242
                                                                                                                       // 4243
    if (options.queueSize) this.queueSize = options.queueSize;                                                         // 4244
    if (options.partSize) this.partSize = options.partSize;                                                            // 4245
    if (options.leavePartsOnError) this.leavePartsOnError = true;                                                      // 4246
                                                                                                                       // 4247
    if (this.partSize < this.minPartSize) {                                                                            // 4248
      throw new Error('partSize must be greater than ' +                                                               // 4249
                      this.minPartSize);                                                                               // 4250
    }                                                                                                                  // 4251
                                                                                                                       // 4252
    this.service = options.service;                                                                                    // 4253
    this.bindServiceObject(options.params);                                                                            // 4254
    this.validateBody();                                                                                               // 4255
    this.adjustTotalBytes();                                                                                           // 4256
  },                                                                                                                   // 4257
                                                                                                                       // 4258
                                                                                                                       // 4259
  leavePartsOnError: false,                                                                                            // 4260
                                                                                                                       // 4261
                                                                                                                       // 4262
  queueSize: 4,                                                                                                        // 4263
                                                                                                                       // 4264
                                                                                                                       // 4265
  partSize: null,                                                                                                      // 4266
                                                                                                                       // 4267
                                                                                                                       // 4268
  minPartSize: 1024 * 1024 * 5,                                                                                        // 4269
                                                                                                                       // 4270
                                                                                                                       // 4271
  maxTotalParts: 10000,                                                                                                // 4272
                                                                                                                       // 4273
                                                                                                                       // 4274
  send: function(callback) {                                                                                           // 4275
    var self = this;                                                                                                   // 4276
    self.failed = false;                                                                                               // 4277
    self.callback = callback || function(err) { if (err) throw err; };                                                 // 4278
                                                                                                                       // 4279
    var runFill = true;                                                                                                // 4280
    if (self.sliceFn) {                                                                                                // 4281
      self.fillQueue = self.fillBuffer;                                                                                // 4282
    } else if (AWS.util.isNode()) {                                                                                    // 4283
      var Stream = AWS.util.nodeRequire('stream').Stream;                                                              // 4284
      if (self.body instanceof Stream) {                                                                               // 4285
        runFill = false;                                                                                               // 4286
        self.fillQueue = self.fillStream;                                                                              // 4287
        self.partBuffers = [];                                                                                         // 4288
        self.body.                                                                                                     // 4289
          on('readable', function() { self.fillQueue(); }).                                                            // 4290
          on('end', function() {                                                                                       // 4291
            self.isDoneChunking = true;                                                                                // 4292
            self.numParts = self.totalPartNumbers;                                                                     // 4293
            self.fillQueue.call(self);                                                                                 // 4294
          });                                                                                                          // 4295
      }                                                                                                                // 4296
    }                                                                                                                  // 4297
                                                                                                                       // 4298
    if (runFill) self.fillQueue.call(self);                                                                            // 4299
  },                                                                                                                   // 4300
                                                                                                                       // 4301
                                                                                                                       // 4302
  abort: function() {                                                                                                  // 4303
    this.cleanup(AWS.util.error(new Error('Request aborted by user'), {                                                // 4304
      code: 'RequestAbortedError', retryable: false                                                                    // 4305
    }));                                                                                                               // 4306
  },                                                                                                                   // 4307
                                                                                                                       // 4308
                                                                                                                       // 4309
  validateBody: function validateBody() {                                                                              // 4310
    var self = this;                                                                                                   // 4311
    self.body = self.service.config.params.Body;                                                                       // 4312
    if (!self.body) throw new Error('params.Body is required');                                                        // 4313
    if (typeof self.body === 'string') {                                                                               // 4314
      self.body = new AWS.util.Buffer(self.body);                                                                      // 4315
    }                                                                                                                  // 4316
    self.sliceFn = AWS.util.arraySliceFn(self.body);                                                                   // 4317
  },                                                                                                                   // 4318
                                                                                                                       // 4319
                                                                                                                       // 4320
  bindServiceObject: function bindServiceObject(params) {                                                              // 4321
    params = params || {};                                                                                             // 4322
    var self = this;                                                                                                   // 4323
                                                                                                                       // 4324
    if (!self.service) {                                                                                               // 4325
      self.service = new AWS.S3({params: params});                                                                     // 4326
    } else {                                                                                                           // 4327
      var config = AWS.util.copy(self.service.config);                                                                 // 4328
      self.service = new self.service.constructor.__super__(config);                                                   // 4329
      self.service.config.params =                                                                                     // 4330
        AWS.util.merge(self.service.config.params || {}, params);                                                      // 4331
    }                                                                                                                  // 4332
  },                                                                                                                   // 4333
                                                                                                                       // 4334
                                                                                                                       // 4335
  adjustTotalBytes: function adjustTotalBytes() {                                                                      // 4336
    var self = this;                                                                                                   // 4337
    try { // try to get totalBytes                                                                                     // 4338
      self.totalBytes = byteLength(self.body);                                                                         // 4339
    } catch (e) { }                                                                                                    // 4340
                                                                                                                       // 4341
    if (self.totalBytes) {                                                                                             // 4342
      var newPartSize = Math.ceil(self.totalBytes / self.maxTotalParts);                                               // 4343
      if (newPartSize > self.partSize) self.partSize = newPartSize;                                                    // 4344
    } else {                                                                                                           // 4345
      self.totalBytes = undefined;                                                                                     // 4346
    }                                                                                                                  // 4347
  },                                                                                                                   // 4348
                                                                                                                       // 4349
                                                                                                                       // 4350
  isDoneChunking: false,                                                                                               // 4351
                                                                                                                       // 4352
                                                                                                                       // 4353
  partPos: 0,                                                                                                          // 4354
                                                                                                                       // 4355
                                                                                                                       // 4356
  totalChunkedBytes: 0,                                                                                                // 4357
                                                                                                                       // 4358
                                                                                                                       // 4359
  totalUploadedBytes: 0,                                                                                               // 4360
                                                                                                                       // 4361
                                                                                                                       // 4362
  totalBytes: undefined,                                                                                               // 4363
                                                                                                                       // 4364
                                                                                                                       // 4365
  numParts: 0,                                                                                                         // 4366
                                                                                                                       // 4367
                                                                                                                       // 4368
  totalPartNumbers: 0,                                                                                                 // 4369
                                                                                                                       // 4370
                                                                                                                       // 4371
  activeParts: 0,                                                                                                      // 4372
                                                                                                                       // 4373
                                                                                                                       // 4374
  doneParts: 0,                                                                                                        // 4375
                                                                                                                       // 4376
                                                                                                                       // 4377
  parts: null,                                                                                                         // 4378
                                                                                                                       // 4379
                                                                                                                       // 4380
  completeInfo: null,                                                                                                  // 4381
                                                                                                                       // 4382
                                                                                                                       // 4383
  failed: false,                                                                                                       // 4384
                                                                                                                       // 4385
                                                                                                                       // 4386
  multipartReq: null,                                                                                                  // 4387
                                                                                                                       // 4388
                                                                                                                       // 4389
  partBuffers: null,                                                                                                   // 4390
                                                                                                                       // 4391
                                                                                                                       // 4392
  partBufferLength: 0,                                                                                                 // 4393
                                                                                                                       // 4394
                                                                                                                       // 4395
  fillBuffer: function fillBuffer() {                                                                                  // 4396
    var self = this;                                                                                                   // 4397
    var bodyLen = byteLength(self.body);                                                                               // 4398
                                                                                                                       // 4399
    if (bodyLen === 0) {                                                                                               // 4400
      self.isDoneChunking = true;                                                                                      // 4401
      self.numParts = 1;                                                                                               // 4402
      self.nextChunk(self.body);                                                                                       // 4403
      return;                                                                                                          // 4404
    }                                                                                                                  // 4405
                                                                                                                       // 4406
    while (self.activeParts < self.queueSize && self.partPos < bodyLen) {                                              // 4407
      var endPos = Math.min(self.partPos + self.partSize, bodyLen);                                                    // 4408
      var buf = self.sliceFn.call(self.body, self.partPos, endPos);                                                    // 4409
      self.partPos += self.partSize;                                                                                   // 4410
                                                                                                                       // 4411
      if (byteLength(buf) < self.partSize || self.partPos === bodyLen) {                                               // 4412
        self.isDoneChunking = true;                                                                                    // 4413
        self.numParts = self.totalPartNumbers + 1;                                                                     // 4414
      }                                                                                                                // 4415
      self.nextChunk(buf);                                                                                             // 4416
    }                                                                                                                  // 4417
  },                                                                                                                   // 4418
                                                                                                                       // 4419
                                                                                                                       // 4420
  fillStream: function fillStream() {                                                                                  // 4421
    var self = this;                                                                                                   // 4422
    if (self.activeParts >= self.queueSize) return;                                                                    // 4423
                                                                                                                       // 4424
    var buf = self.body.read(self.partSize - self.partBufferLength) ||                                                 // 4425
              self.body.read();                                                                                        // 4426
    if (buf) {                                                                                                         // 4427
      self.partBuffers.push(buf);                                                                                      // 4428
      self.partBufferLength += buf.length;                                                                             // 4429
      self.totalChunkedBytes += buf.length;                                                                            // 4430
    }                                                                                                                  // 4431
                                                                                                                       // 4432
    if (self.partBufferLength >= self.partSize) {                                                                      // 4433
      var pbuf = self.partBuffers.length === 1 ?                                                                       // 4434
        self.partBuffers[0] : Buffer.concat(self.partBuffers);                                                         // 4435
      self.partBuffers = [];                                                                                           // 4436
      self.partBufferLength = 0;                                                                                       // 4437
                                                                                                                       // 4438
      if (pbuf.length > self.partSize) {                                                                               // 4439
        var rest = pbuf.slice(self.partSize);                                                                          // 4440
        self.partBuffers.push(rest);                                                                                   // 4441
        self.partBufferLength += rest.length;                                                                          // 4442
        pbuf = pbuf.slice(0, self.partSize);                                                                           // 4443
      }                                                                                                                // 4444
                                                                                                                       // 4445
      self.nextChunk(pbuf);                                                                                            // 4446
    }                                                                                                                  // 4447
                                                                                                                       // 4448
    if (self.isDoneChunking && !self.isDoneSending) {                                                                  // 4449
      pbuf = self.partBuffers.length === 1 ?                                                                           // 4450
          self.partBuffers[0] : Buffer.concat(self.partBuffers);                                                       // 4451
      self.partBuffers = [];                                                                                           // 4452
      self.partBufferLength = 0;                                                                                       // 4453
      self.totalBytes = self.totalChunkedBytes;                                                                        // 4454
      self.isDoneSending = true;                                                                                       // 4455
                                                                                                                       // 4456
      if (self.numParts === 0 || pbuf.length > 0) {                                                                    // 4457
        self.numParts++;                                                                                               // 4458
        self.nextChunk(pbuf);                                                                                          // 4459
      }                                                                                                                // 4460
    }                                                                                                                  // 4461
                                                                                                                       // 4462
    self.body.read(0);                                                                                                 // 4463
  },                                                                                                                   // 4464
                                                                                                                       // 4465
                                                                                                                       // 4466
  nextChunk: function nextChunk(chunk) {                                                                               // 4467
    var self = this;                                                                                                   // 4468
    if (self.failed) return null;                                                                                      // 4469
                                                                                                                       // 4470
    var partNumber = ++self.totalPartNumbers;                                                                          // 4471
    if (self.isDoneChunking && partNumber === 1) {                                                                     // 4472
      var req = self.service.putObject({Body: chunk});                                                                 // 4473
      req._managedUpload = self;                                                                                       // 4474
      req.on('httpUploadProgress', self.progress).send(self.finishSinglePart);                                         // 4475
      return null;                                                                                                     // 4476
    } else if (self.service.config.params.ContentMD5) {                                                                // 4477
      var err = AWS.util.error(new Error('The Content-MD5 you specified is invalid for multi-part uploads.'), {        // 4478
        code: 'InvalidDigest', retryable: false                                                                        // 4479
      });                                                                                                              // 4480
                                                                                                                       // 4481
      self.cleanup(err);                                                                                               // 4482
      return null;                                                                                                     // 4483
    }                                                                                                                  // 4484
                                                                                                                       // 4485
    if (self.completeInfo[partNumber] && self.completeInfo[partNumber].ETag !== null) {                                // 4486
      return null; // Already uploaded this part.                                                                      // 4487
    }                                                                                                                  // 4488
                                                                                                                       // 4489
    self.activeParts++;                                                                                                // 4490
    if (!self.service.config.params.UploadId) {                                                                        // 4491
                                                                                                                       // 4492
      if (!self.multipartReq) { // create multipart                                                                    // 4493
        self.multipartReq = self.service.createMultipartUpload();                                                      // 4494
        self.multipartReq.on('success', function(resp) {                                                               // 4495
          self.service.config.params.UploadId = resp.data.UploadId;                                                    // 4496
          self.multipartReq = null;                                                                                    // 4497
        });                                                                                                            // 4498
        self.queueChunks(chunk, partNumber);                                                                           // 4499
        self.multipartReq.on('error', function(err) {                                                                  // 4500
          self.cleanup(err);                                                                                           // 4501
        });                                                                                                            // 4502
        self.multipartReq.send();                                                                                      // 4503
      } else {                                                                                                         // 4504
        self.queueChunks(chunk, partNumber);                                                                           // 4505
      }                                                                                                                // 4506
    } else { // multipart is created, just send                                                                        // 4507
      self.uploadPart(chunk, partNumber);                                                                              // 4508
    }                                                                                                                  // 4509
  },                                                                                                                   // 4510
                                                                                                                       // 4511
                                                                                                                       // 4512
  uploadPart: function uploadPart(chunk, partNumber) {                                                                 // 4513
    var self = this;                                                                                                   // 4514
                                                                                                                       // 4515
    var partParams = {                                                                                                 // 4516
      Body: chunk,                                                                                                     // 4517
      ContentLength: AWS.util.string.byteLength(chunk),                                                                // 4518
      PartNumber: partNumber                                                                                           // 4519
    };                                                                                                                 // 4520
                                                                                                                       // 4521
    var partInfo = {ETag: null, PartNumber: partNumber};                                                               // 4522
    self.completeInfo[partNumber] = partInfo;                                                                          // 4523
                                                                                                                       // 4524
    var req = self.service.uploadPart(partParams);                                                                     // 4525
    self.parts[partNumber] = req;                                                                                      // 4526
    req._lastUploadedBytes = 0;                                                                                        // 4527
    req._managedUpload = self;                                                                                         // 4528
    req.on('httpUploadProgress', self.progress);                                                                       // 4529
    req.send(function(err, data) {                                                                                     // 4530
      delete self.parts[partParams.PartNumber];                                                                        // 4531
      self.activeParts--;                                                                                              // 4532
                                                                                                                       // 4533
      if (!err && (!data || !data.ETag)) {                                                                             // 4534
        var message = 'No access to ETag property on response.';                                                       // 4535
        if (AWS.util.isBrowser()) {                                                                                    // 4536
          message += ' Check CORS configuration to expose ETag header.';                                               // 4537
        }                                                                                                              // 4538
                                                                                                                       // 4539
        err = AWS.util.error(new Error(message), {                                                                     // 4540
          code: 'ETagMissing', retryable: false                                                                        // 4541
        });                                                                                                            // 4542
      }                                                                                                                // 4543
      if (err) return self.cleanup(err);                                                                               // 4544
                                                                                                                       // 4545
      partInfo.ETag = data.ETag;                                                                                       // 4546
      self.doneParts++;                                                                                                // 4547
      if (self.isDoneChunking && self.doneParts === self.numParts) {                                                   // 4548
        self.finishMultiPart();                                                                                        // 4549
      } else {                                                                                                         // 4550
        self.fillQueue.call(self);                                                                                     // 4551
      }                                                                                                                // 4552
    });                                                                                                                // 4553
  },                                                                                                                   // 4554
                                                                                                                       // 4555
                                                                                                                       // 4556
  queueChunks: function queueChunks(chunk, partNumber) {                                                               // 4557
    var self = this;                                                                                                   // 4558
    self.multipartReq.on('success', function() {                                                                       // 4559
      self.uploadPart(chunk, partNumber);                                                                              // 4560
    });                                                                                                                // 4561
  },                                                                                                                   // 4562
                                                                                                                       // 4563
                                                                                                                       // 4564
  cleanup: function cleanup(err) {                                                                                     // 4565
    var self = this;                                                                                                   // 4566
    if (self.failed) return;                                                                                           // 4567
                                                                                                                       // 4568
    if (typeof self.body.removeAllListeners === 'function' &&                                                          // 4569
        typeof self.body.resume === 'function') {                                                                      // 4570
      self.body.removeAllListeners('readable');                                                                        // 4571
      self.body.removeAllListeners('end');                                                                             // 4572
      self.body.resume();                                                                                              // 4573
    }                                                                                                                  // 4574
                                                                                                                       // 4575
    if (self.service.config.params.UploadId && !self.leavePartsOnError) {                                              // 4576
      self.service.abortMultipartUpload().send();                                                                      // 4577
    }                                                                                                                  // 4578
                                                                                                                       // 4579
    AWS.util.each(self.parts, function(partNumber, part) {                                                             // 4580
      part.removeAllListeners('complete');                                                                             // 4581
      part.abort();                                                                                                    // 4582
    });                                                                                                                // 4583
                                                                                                                       // 4584
    self.activeParts = 0;                                                                                              // 4585
    self.partPos = 0;                                                                                                  // 4586
    self.numParts = 0;                                                                                                 // 4587
    self.totalPartNumbers = 0;                                                                                         // 4588
    self.parts = {};                                                                                                   // 4589
    self.failed = true;                                                                                                // 4590
    self.callback(err);                                                                                                // 4591
  },                                                                                                                   // 4592
                                                                                                                       // 4593
                                                                                                                       // 4594
  finishMultiPart: function finishMultiPart() {                                                                        // 4595
    var self = this;                                                                                                   // 4596
    var completeParams = { MultipartUpload: { Parts: self.completeInfo.slice(1) } };                                   // 4597
    self.service.completeMultipartUpload(completeParams, function(err, data) {                                         // 4598
      if (err) return self.cleanup(err);                                                                               // 4599
      else self.callback(err, data);                                                                                   // 4600
    });                                                                                                                // 4601
  },                                                                                                                   // 4602
                                                                                                                       // 4603
                                                                                                                       // 4604
  finishSinglePart: function finishSinglePart(err, data) {                                                             // 4605
    var upload = this.request._managedUpload;                                                                          // 4606
    var httpReq = this.request.httpRequest;                                                                            // 4607
    var endpoint = httpReq.endpoint;                                                                                   // 4608
    if (err) return upload.callback(err);                                                                              // 4609
    data.Location =                                                                                                    // 4610
      [endpoint.protocol, '//', endpoint.host, httpReq.path].join('');                                                 // 4611
    data.key = this.request.params.Key;                                                                                // 4612
    upload.callback(err, data);                                                                                        // 4613
  },                                                                                                                   // 4614
                                                                                                                       // 4615
                                                                                                                       // 4616
  progress: function progress(info) {                                                                                  // 4617
    var upload = this._managedUpload;                                                                                  // 4618
    if (this.operation === 'putObject') {                                                                              // 4619
      info.part = 1;                                                                                                   // 4620
      info.key = this.params.Key;                                                                                      // 4621
    } else {                                                                                                           // 4622
      upload.totalUploadedBytes += info.loaded - this._lastUploadedBytes;                                              // 4623
      this._lastUploadedBytes = info.loaded;                                                                           // 4624
      info = {                                                                                                         // 4625
        loaded: upload.totalUploadedBytes,                                                                             // 4626
        total: upload.totalBytes,                                                                                      // 4627
        part: this.params.PartNumber,                                                                                  // 4628
        key: this.params.Key                                                                                           // 4629
      };                                                                                                               // 4630
    }                                                                                                                  // 4631
    upload.emit('httpUploadProgress', [info]);                                                                         // 4632
  }                                                                                                                    // 4633
});                                                                                                                    // 4634
                                                                                                                       // 4635
AWS.util.mixin(AWS.S3.ManagedUpload, AWS.SequentialExecutor);                                                          // 4636
module.exports = AWS.S3.ManagedUpload;                                                                                 // 4637
                                                                                                                       // 4638
}).call(this,require("buffer").Buffer)                                                                                 // 4639
},{"../core":4,"buffer":62}],40:[function(require,module,exports){                                                     // 4640
var AWS = require('./core');                                                                                           // 4641
                                                                                                                       // 4642
                                                                                                                       // 4643
AWS.SequentialExecutor = AWS.util.inherit({                                                                            // 4644
                                                                                                                       // 4645
  constructor: function SequentialExecutor() {                                                                         // 4646
    this._events = {};                                                                                                 // 4647
  },                                                                                                                   // 4648
                                                                                                                       // 4649
                                                                                                                       // 4650
  listeners: function listeners(eventName) {                                                                           // 4651
    return this._events[eventName] ? this._events[eventName].slice(0) : [];                                            // 4652
  },                                                                                                                   // 4653
                                                                                                                       // 4654
  on: function on(eventName, listener) {                                                                               // 4655
    if (this._events[eventName]) {                                                                                     // 4656
      this._events[eventName].push(listener);                                                                          // 4657
    } else {                                                                                                           // 4658
      this._events[eventName] = [listener];                                                                            // 4659
    }                                                                                                                  // 4660
    return this;                                                                                                       // 4661
  },                                                                                                                   // 4662
                                                                                                                       // 4663
                                                                                                                       // 4664
  onAsync: function onAsync(eventName, listener) {                                                                     // 4665
    listener._isAsync = true;                                                                                          // 4666
    return this.on(eventName, listener);                                                                               // 4667
  },                                                                                                                   // 4668
                                                                                                                       // 4669
  removeListener: function removeListener(eventName, listener) {                                                       // 4670
    var listeners = this._events[eventName];                                                                           // 4671
    if (listeners) {                                                                                                   // 4672
      var length = listeners.length;                                                                                   // 4673
      var position = -1;                                                                                               // 4674
      for (var i = 0; i < length; ++i) {                                                                               // 4675
        if (listeners[i] === listener) {                                                                               // 4676
          position = i;                                                                                                // 4677
        }                                                                                                              // 4678
      }                                                                                                                // 4679
      if (position > -1) {                                                                                             // 4680
        listeners.splice(position, 1);                                                                                 // 4681
      }                                                                                                                // 4682
    }                                                                                                                  // 4683
    return this;                                                                                                       // 4684
  },                                                                                                                   // 4685
                                                                                                                       // 4686
  removeAllListeners: function removeAllListeners(eventName) {                                                         // 4687
    if (eventName) {                                                                                                   // 4688
      delete this._events[eventName];                                                                                  // 4689
    } else {                                                                                                           // 4690
      this._events = {};                                                                                               // 4691
    }                                                                                                                  // 4692
    return this;                                                                                                       // 4693
  },                                                                                                                   // 4694
                                                                                                                       // 4695
                                                                                                                       // 4696
  emit: function emit(eventName, eventArgs, doneCallback) {                                                            // 4697
    if (!doneCallback) doneCallback = function() { };                                                                  // 4698
    var listeners = this.listeners(eventName);                                                                         // 4699
    var count = listeners.length;                                                                                      // 4700
    this.callListeners(listeners, eventArgs, doneCallback);                                                            // 4701
    return count > 0;                                                                                                  // 4702
  },                                                                                                                   // 4703
                                                                                                                       // 4704
                                                                                                                       // 4705
  callListeners: function callListeners(listeners, args, doneCallback, prevError) {                                    // 4706
    var self = this;                                                                                                   // 4707
    var error = prevError || null;                                                                                     // 4708
                                                                                                                       // 4709
    function callNextListener(err) {                                                                                   // 4710
      if (err) {                                                                                                       // 4711
        error = AWS.util.error(error || new Error(), err);                                                             // 4712
        if (self._haltHandlersOnError) {                                                                               // 4713
          return doneCallback.call(self, error);                                                                       // 4714
        }                                                                                                              // 4715
      }                                                                                                                // 4716
      self.callListeners(listeners, args, doneCallback, error);                                                        // 4717
    }                                                                                                                  // 4718
                                                                                                                       // 4719
    while (listeners.length > 0) {                                                                                     // 4720
      var listener = listeners.shift();                                                                                // 4721
      if (listener._isAsync) { // asynchronous listener                                                                // 4722
        listener.apply(self, args.concat([callNextListener]));                                                         // 4723
        return; // stop here, callNextListener will continue                                                           // 4724
      } else { // synchronous listener                                                                                 // 4725
        try {                                                                                                          // 4726
          listener.apply(self, args);                                                                                  // 4727
        } catch (err) {                                                                                                // 4728
          error = AWS.util.error(error || new Error(), err);                                                           // 4729
        }                                                                                                              // 4730
        if (error && self._haltHandlersOnError) {                                                                      // 4731
          doneCallback.call(self, error);                                                                              // 4732
          return;                                                                                                      // 4733
        }                                                                                                              // 4734
      }                                                                                                                // 4735
    }                                                                                                                  // 4736
    doneCallback.call(self, error);                                                                                    // 4737
  },                                                                                                                   // 4738
                                                                                                                       // 4739
                                                                                                                       // 4740
  addListeners: function addListeners(listeners) {                                                                     // 4741
    var self = this;                                                                                                   // 4742
                                                                                                                       // 4743
    if (listeners._events) listeners = listeners._events;                                                              // 4744
                                                                                                                       // 4745
    AWS.util.each(listeners, function(event, callbacks) {                                                              // 4746
      if (typeof callbacks === 'function') callbacks = [callbacks];                                                    // 4747
      AWS.util.arrayEach(callbacks, function(callback) {                                                               // 4748
        self.on(event, callback);                                                                                      // 4749
      });                                                                                                              // 4750
    });                                                                                                                // 4751
                                                                                                                       // 4752
    return self;                                                                                                       // 4753
  },                                                                                                                   // 4754
                                                                                                                       // 4755
                                                                                                                       // 4756
  addNamedListener: function addNamedListener(name, eventName, callback) {                                             // 4757
    this[name] = callback;                                                                                             // 4758
    this.addListener(eventName, callback);                                                                             // 4759
    return this;                                                                                                       // 4760
  },                                                                                                                   // 4761
                                                                                                                       // 4762
                                                                                                                       // 4763
  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback) {                                   // 4764
    callback._isAsync = true;                                                                                          // 4765
    return this.addNamedListener(name, eventName, callback);                                                           // 4766
  },                                                                                                                   // 4767
                                                                                                                       // 4768
                                                                                                                       // 4769
  addNamedListeners: function addNamedListeners(callback) {                                                            // 4770
    var self = this;                                                                                                   // 4771
    callback(                                                                                                          // 4772
      function() {                                                                                                     // 4773
        self.addNamedListener.apply(self, arguments);                                                                  // 4774
      },                                                                                                               // 4775
      function() {                                                                                                     // 4776
        self.addNamedAsyncListener.apply(self, arguments);                                                             // 4777
      }                                                                                                                // 4778
    );                                                                                                                 // 4779
    return this;                                                                                                       // 4780
  }                                                                                                                    // 4781
});                                                                                                                    // 4782
                                                                                                                       // 4783
                                                                                                                       // 4784
AWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;                                    // 4785
                                                                                                                       // 4786
module.exports = AWS.SequentialExecutor;                                                                               // 4787
                                                                                                                       // 4788
},{"./core":4}],41:[function(require,module,exports){                                                                  // 4789
var AWS = require('./core');                                                                                           // 4790
var Api = require('./model/api');                                                                                      // 4791
var regionConfig = require('./region_config');                                                                         // 4792
var inherit = AWS.util.inherit;                                                                                        // 4793
                                                                                                                       // 4794
                                                                                                                       // 4795
AWS.Service = inherit({                                                                                                // 4796
                                                                                                                       // 4797
  constructor: function Service(config) {                                                                              // 4798
    if (!this.loadServiceClass) {                                                                                      // 4799
      throw AWS.util.error(new Error(),                                                                                // 4800
        'Service must be constructed with `new\' operator');                                                           // 4801
    }                                                                                                                  // 4802
    var ServiceClass = this.loadServiceClass(config || {});                                                            // 4803
    if (ServiceClass) return new ServiceClass(config);                                                                 // 4804
    this.initialize(config);                                                                                           // 4805
  },                                                                                                                   // 4806
                                                                                                                       // 4807
                                                                                                                       // 4808
  initialize: function initialize(config) {                                                                            // 4809
    var svcConfig = AWS.config[this.serviceIdentifier];                                                                // 4810
                                                                                                                       // 4811
    this.config = new AWS.Config(AWS.config);                                                                          // 4812
    if (svcConfig) this.config.update(svcConfig, true);                                                                // 4813
    if (config) this.config.update(config, true);                                                                      // 4814
                                                                                                                       // 4815
    this.validateService();                                                                                            // 4816
    if (!this.config.endpoint) regionConfig(this);                                                                     // 4817
                                                                                                                       // 4818
    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);                                            // 4819
    this.setEndpoint(this.config.endpoint);                                                                            // 4820
  },                                                                                                                   // 4821
                                                                                                                       // 4822
                                                                                                                       // 4823
  validateService: function validateService() {                                                                        // 4824
  },                                                                                                                   // 4825
                                                                                                                       // 4826
                                                                                                                       // 4827
  loadServiceClass: function loadServiceClass(serviceConfig) {                                                         // 4828
    var config = serviceConfig;                                                                                        // 4829
    if (!AWS.util.isEmpty(this.api)) {                                                                                 // 4830
      return null;                                                                                                     // 4831
    } else if (config.apiConfig) {                                                                                     // 4832
      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);                                         // 4833
    } else if (!this.constructor.services) {                                                                           // 4834
      return null;                                                                                                     // 4835
    } else {                                                                                                           // 4836
      config = new AWS.Config(AWS.config);                                                                             // 4837
      config.update(serviceConfig, true);                                                                              // 4838
      var version = config.apiVersions[this.constructor.serviceIdentifier];                                            // 4839
      version = version || config.apiVersion;                                                                          // 4840
      return this.getLatestServiceClass(version);                                                                      // 4841
    }                                                                                                                  // 4842
  },                                                                                                                   // 4843
                                                                                                                       // 4844
                                                                                                                       // 4845
  getLatestServiceClass: function getLatestServiceClass(version) {                                                     // 4846
    version = this.getLatestServiceVersion(version);                                                                   // 4847
    if (this.constructor.services[version] === null) {                                                                 // 4848
      AWS.Service.defineServiceApi(this.constructor, version);                                                         // 4849
    }                                                                                                                  // 4850
                                                                                                                       // 4851
    return this.constructor.services[version];                                                                         // 4852
  },                                                                                                                   // 4853
                                                                                                                       // 4854
                                                                                                                       // 4855
  getLatestServiceVersion: function getLatestServiceVersion(version) {                                                 // 4856
    if (!this.constructor.services || this.constructor.services.length === 0) {                                        // 4857
      throw new Error('No services defined on ' +                                                                      // 4858
                      this.constructor.serviceIdentifier);                                                             // 4859
    }                                                                                                                  // 4860
                                                                                                                       // 4861
    if (!version) {                                                                                                    // 4862
      version = 'latest';                                                                                              // 4863
    } else if (AWS.util.isType(version, Date)) {                                                                       // 4864
      version = AWS.util.date.iso8601(version).split('T')[0];                                                          // 4865
    }                                                                                                                  // 4866
                                                                                                                       // 4867
    if (Object.hasOwnProperty(this.constructor.services, version)) {                                                   // 4868
      return version;                                                                                                  // 4869
    }                                                                                                                  // 4870
                                                                                                                       // 4871
    var keys = Object.keys(this.constructor.services).sort();                                                          // 4872
    var selectedVersion = null;                                                                                        // 4873
    for (var i = keys.length - 1; i >= 0; i--) {                                                                       // 4874
      if (keys[i][keys[i].length - 1] !== '*') {                                                                       // 4875
        selectedVersion = keys[i];                                                                                     // 4876
      }                                                                                                                // 4877
      if (keys[i].substr(0, 10) <= version) {                                                                          // 4878
        return selectedVersion;                                                                                        // 4879
      }                                                                                                                // 4880
    }                                                                                                                  // 4881
                                                                                                                       // 4882
    throw new Error('Could not find ' + this.constructor.serviceIdentifier +                                           // 4883
                    ' API to satisfy version constraint `' + version + '\'');                                          // 4884
  },                                                                                                                   // 4885
                                                                                                                       // 4886
                                                                                                                       // 4887
  api: {},                                                                                                             // 4888
                                                                                                                       // 4889
                                                                                                                       // 4890
  defaultRetryCount: 3,                                                                                                // 4891
                                                                                                                       // 4892
                                                                                                                       // 4893
  makeRequest: function makeRequest(operation, params, callback) {                                                     // 4894
    if (typeof params === 'function') {                                                                                // 4895
      callback = params;                                                                                               // 4896
      params = null;                                                                                                   // 4897
    }                                                                                                                  // 4898
                                                                                                                       // 4899
    params = params || {};                                                                                             // 4900
    if (this.config.params) { // copy only toplevel bound params                                                       // 4901
      var rules = this.api.operations[operation];                                                                      // 4902
      if (rules) {                                                                                                     // 4903
        params = AWS.util.copy(params);                                                                                // 4904
        AWS.util.each(this.config.params, function(key, value) {                                                       // 4905
          if (rules.input.members[key]) {                                                                              // 4906
            if (params[key] === undefined || params[key] === null) {                                                   // 4907
              params[key] = value;                                                                                     // 4908
            }                                                                                                          // 4909
          }                                                                                                            // 4910
        });                                                                                                            // 4911
      }                                                                                                                // 4912
    }                                                                                                                  // 4913
                                                                                                                       // 4914
    var request = new AWS.Request(this, operation, params);                                                            // 4915
    this.addAllRequestListeners(request);                                                                              // 4916
                                                                                                                       // 4917
    if (callback) request.send(callback);                                                                              // 4918
    return request;                                                                                                    // 4919
  },                                                                                                                   // 4920
                                                                                                                       // 4921
                                                                                                                       // 4922
  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {                       // 4923
    if (typeof params === 'function') {                                                                                // 4924
      callback = params;                                                                                               // 4925
      params = {};                                                                                                     // 4926
    }                                                                                                                  // 4927
                                                                                                                       // 4928
    var request = this.makeRequest(operation, params).toUnauthenticated();                                             // 4929
    return callback ? request.send(callback) : request;                                                                // 4930
  },                                                                                                                   // 4931
                                                                                                                       // 4932
                                                                                                                       // 4933
  waitFor: function waitFor(state, params, callback) {                                                                 // 4934
    var waiter = new AWS.ResourceWaiter(this, state);                                                                  // 4935
    return waiter.wait(params, callback);                                                                              // 4936
  },                                                                                                                   // 4937
                                                                                                                       // 4938
                                                                                                                       // 4939
  addAllRequestListeners: function addAllRequestListeners(request) {                                                   // 4940
    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(),                                          // 4941
                AWS.EventListeners.CorePost];                                                                          // 4942
    for (var i = 0; i < list.length; i++) {                                                                            // 4943
      if (list[i]) request.addListeners(list[i]);                                                                      // 4944
    }                                                                                                                  // 4945
                                                                                                                       // 4946
    if (!this.config.paramValidation) {                                                                                // 4947
      request.removeListener('validate',                                                                               // 4948
        AWS.EventListeners.Core.VALIDATE_PARAMETERS);                                                                  // 4949
    }                                                                                                                  // 4950
                                                                                                                       // 4951
    if (this.config.logger) { // add logging events                                                                    // 4952
      request.addListeners(AWS.EventListeners.Logger);                                                                 // 4953
    }                                                                                                                  // 4954
                                                                                                                       // 4955
    this.setupRequestListeners(request);                                                                               // 4956
  },                                                                                                                   // 4957
                                                                                                                       // 4958
                                                                                                                       // 4959
  setupRequestListeners: function setupRequestListeners() {                                                            // 4960
  },                                                                                                                   // 4961
                                                                                                                       // 4962
                                                                                                                       // 4963
  getSignerClass: function getSignerClass() {                                                                          // 4964
    var version;                                                                                                       // 4965
    if (this.config.signatureVersion) {                                                                                // 4966
      version = this.config.signatureVersion;                                                                          // 4967
    } else {                                                                                                           // 4968
      version = this.api.signatureVersion;                                                                             // 4969
    }                                                                                                                  // 4970
    return AWS.Signers.RequestSigner.getVersion(version);                                                              // 4971
  },                                                                                                                   // 4972
                                                                                                                       // 4973
                                                                                                                       // 4974
  serviceInterface: function serviceInterface() {                                                                      // 4975
    switch (this.api.protocol) {                                                                                       // 4976
      case 'ec2': return AWS.EventListeners.Query;                                                                     // 4977
      case 'query': return AWS.EventListeners.Query;                                                                   // 4978
      case 'json': return AWS.EventListeners.Json;                                                                     // 4979
      case 'rest-json': return AWS.EventListeners.RestJson;                                                            // 4980
      case 'rest-xml': return AWS.EventListeners.RestXml;                                                              // 4981
    }                                                                                                                  // 4982
    if (this.api.protocol) {                                                                                           // 4983
      throw new Error('Invalid service `protocol\' ' +                                                                 // 4984
        this.api.protocol + ' in API config');                                                                         // 4985
    }                                                                                                                  // 4986
  },                                                                                                                   // 4987
                                                                                                                       // 4988
                                                                                                                       // 4989
  successfulResponse: function successfulResponse(resp) {                                                              // 4990
    return resp.httpResponse.statusCode < 300;                                                                         // 4991
  },                                                                                                                   // 4992
                                                                                                                       // 4993
                                                                                                                       // 4994
  numRetries: function numRetries() {                                                                                  // 4995
    if (this.config.maxRetries !== undefined) {                                                                        // 4996
      return this.config.maxRetries;                                                                                   // 4997
    } else {                                                                                                           // 4998
      return this.defaultRetryCount;                                                                                   // 4999
    }                                                                                                                  // 5000
  },                                                                                                                   // 5001
                                                                                                                       // 5002
                                                                                                                       // 5003
  retryDelays: function retryDelays(retryCount) {                                                                      // 5004
    var retryDelayOptions = this.config.retryDelayOptions || {};                                                       // 5005
    var customBackoff = retryDelayOptions.customBackoff || null;                                                       // 5006
    if (typeof customBackoff === 'function') {                                                                         // 5007
      return customBackoff(retryCount);                                                                                // 5008
    }                                                                                                                  // 5009
    var base = retryDelayOptions.base || 30;                                                                           // 5010
    var delay = Math.random() * (Math.pow(2, retryCount) * base);                                                      // 5011
    return delay;                                                                                                      // 5012
  },                                                                                                                   // 5013
                                                                                                                       // 5014
                                                                                                                       // 5015
  retryableError: function retryableError(error) {                                                                     // 5016
    if (this.networkingError(error)) return true;                                                                      // 5017
    if (this.expiredCredentialsError(error)) return true;                                                              // 5018
    if (this.throttledError(error)) return true;                                                                       // 5019
    if (error.statusCode >= 500) return true;                                                                          // 5020
    return false;                                                                                                      // 5021
  },                                                                                                                   // 5022
                                                                                                                       // 5023
                                                                                                                       // 5024
  networkingError: function networkingError(error) {                                                                   // 5025
    return error.code === 'NetworkingError';                                                                           // 5026
  },                                                                                                                   // 5027
                                                                                                                       // 5028
                                                                                                                       // 5029
  expiredCredentialsError: function expiredCredentialsError(error) {                                                   // 5030
    return (error.code === 'ExpiredTokenException');                                                                   // 5031
  },                                                                                                                   // 5032
                                                                                                                       // 5033
                                                                                                                       // 5034
  clockSkewError: function clockSkewError(error) {                                                                     // 5035
    switch (error.code) {                                                                                              // 5036
      case 'RequestTimeTooSkewed':                                                                                     // 5037
      case 'RequestExpired':                                                                                           // 5038
      case 'InvalidSignatureException':                                                                                // 5039
      case 'SignatureDoesNotMatch':                                                                                    // 5040
      case 'AuthFailure':                                                                                              // 5041
      case 'RequestInTheFuture':                                                                                       // 5042
        return true;                                                                                                   // 5043
      default: return false;                                                                                           // 5044
    }                                                                                                                  // 5045
  },                                                                                                                   // 5046
                                                                                                                       // 5047
                                                                                                                       // 5048
  throttledError: function throttledError(error) {                                                                     // 5049
    switch (error.code) {                                                                                              // 5050
      case 'ProvisionedThroughputExceededException':                                                                   // 5051
      case 'Throttling':                                                                                               // 5052
      case 'ThrottlingException':                                                                                      // 5053
      case 'RequestLimitExceeded':                                                                                     // 5054
      case 'RequestThrottled':                                                                                         // 5055
        return true;                                                                                                   // 5056
      default:                                                                                                         // 5057
        return false;                                                                                                  // 5058
    }                                                                                                                  // 5059
  },                                                                                                                   // 5060
                                                                                                                       // 5061
                                                                                                                       // 5062
  endpointFromTemplate: function endpointFromTemplate(endpoint) {                                                      // 5063
    if (typeof endpoint !== 'string') return endpoint;                                                                 // 5064
                                                                                                                       // 5065
    var e = endpoint;                                                                                                  // 5066
    e = e.replace(/\{service\}/g, this.api.endpointPrefix);                                                            // 5067
    e = e.replace(/\{region\}/g, this.config.region);                                                                  // 5068
    e = e.replace(/\{scheme\}/g, this.config.sslEnabled ? 'https' : 'http');                                           // 5069
    return e;                                                                                                          // 5070
  },                                                                                                                   // 5071
                                                                                                                       // 5072
                                                                                                                       // 5073
  setEndpoint: function setEndpoint(endpoint) {                                                                        // 5074
    this.endpoint = new AWS.Endpoint(endpoint, this.config);                                                           // 5075
  },                                                                                                                   // 5076
                                                                                                                       // 5077
                                                                                                                       // 5078
  paginationConfig: function paginationConfig(operation, throwException) {                                             // 5079
    var paginator = this.api.operations[operation].paginator;                                                          // 5080
    if (!paginator) {                                                                                                  // 5081
      if (throwException) {                                                                                            // 5082
        var e = new Error();                                                                                           // 5083
        throw AWS.util.error(e, 'No pagination configuration for ' + operation);                                       // 5084
      }                                                                                                                // 5085
      return null;                                                                                                     // 5086
    }                                                                                                                  // 5087
                                                                                                                       // 5088
    return paginator;                                                                                                  // 5089
  }                                                                                                                    // 5090
});                                                                                                                    // 5091
                                                                                                                       // 5092
AWS.util.update(AWS.Service, {                                                                                         // 5093
                                                                                                                       // 5094
                                                                                                                       // 5095
  defineMethods: function defineMethods(svc) {                                                                         // 5096
    AWS.util.each(svc.prototype.api.operations, function iterator(method) {                                            // 5097
      if (svc.prototype[method]) return;                                                                               // 5098
      svc.prototype[method] = function (params, callback) {                                                            // 5099
        return this.makeRequest(method, params, callback);                                                             // 5100
      };                                                                                                               // 5101
    });                                                                                                                // 5102
  },                                                                                                                   // 5103
                                                                                                                       // 5104
                                                                                                                       // 5105
  defineService: function defineService(serviceIdentifier, versions, features) {                                       // 5106
    AWS.Service._serviceMap[serviceIdentifier] = true;                                                                 // 5107
    if (!Array.isArray(versions)) {                                                                                    // 5108
      features = versions;                                                                                             // 5109
      versions = [];                                                                                                   // 5110
    }                                                                                                                  // 5111
                                                                                                                       // 5112
    var svc = inherit(AWS.Service, features || {});                                                                    // 5113
                                                                                                                       // 5114
    if (typeof serviceIdentifier === 'string') {                                                                       // 5115
      AWS.Service.addVersions(svc, versions);                                                                          // 5116
                                                                                                                       // 5117
      var identifier = svc.serviceIdentifier || serviceIdentifier;                                                     // 5118
      svc.serviceIdentifier = identifier;                                                                              // 5119
    } else { // defineService called with an API                                                                       // 5120
      svc.prototype.api = serviceIdentifier;                                                                           // 5121
      AWS.Service.defineMethods(svc);                                                                                  // 5122
    }                                                                                                                  // 5123
                                                                                                                       // 5124
    return svc;                                                                                                        // 5125
  },                                                                                                                   // 5126
                                                                                                                       // 5127
                                                                                                                       // 5128
  addVersions: function addVersions(svc, versions) {                                                                   // 5129
    if (!Array.isArray(versions)) versions = [versions];                                                               // 5130
                                                                                                                       // 5131
    svc.services = svc.services || {};                                                                                 // 5132
    for (var i = 0; i < versions.length; i++) {                                                                        // 5133
      if (svc.services[versions[i]] === undefined) {                                                                   // 5134
        svc.services[versions[i]] = null;                                                                              // 5135
      }                                                                                                                // 5136
    }                                                                                                                  // 5137
                                                                                                                       // 5138
    svc.apiVersions = Object.keys(svc.services).sort();                                                                // 5139
  },                                                                                                                   // 5140
                                                                                                                       // 5141
                                                                                                                       // 5142
  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {                                        // 5143
    var svc = inherit(superclass, {                                                                                    // 5144
      serviceIdentifier: superclass.serviceIdentifier                                                                  // 5145
    });                                                                                                                // 5146
                                                                                                                       // 5147
    function setApi(api) {                                                                                             // 5148
      if (api.isApi) {                                                                                                 // 5149
        svc.prototype.api = api;                                                                                       // 5150
      } else {                                                                                                         // 5151
        svc.prototype.api = new Api(api);                                                                              // 5152
      }                                                                                                                // 5153
    }                                                                                                                  // 5154
                                                                                                                       // 5155
    if (typeof version === 'string') {                                                                                 // 5156
      if (apiConfig) {                                                                                                 // 5157
        setApi(apiConfig);                                                                                             // 5158
      } else {                                                                                                         // 5159
        try {                                                                                                          // 5160
          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));                                                // 5161
        } catch (err) {                                                                                                // 5162
          throw AWS.util.error(err, {                                                                                  // 5163
            message: 'Could not find API configuration ' +                                                             // 5164
              superclass.serviceIdentifier + '-' + version                                                             // 5165
          });                                                                                                          // 5166
        }                                                                                                              // 5167
      }                                                                                                                // 5168
      if (!superclass.services.hasOwnProperty(version)) {                                                              // 5169
        superclass.apiVersions = superclass.apiVersions.concat(version).sort();                                        // 5170
      }                                                                                                                // 5171
      superclass.services[version] = svc;                                                                              // 5172
    } else {                                                                                                           // 5173
      setApi(version);                                                                                                 // 5174
    }                                                                                                                  // 5175
                                                                                                                       // 5176
    AWS.Service.defineMethods(svc);                                                                                    // 5177
    return svc;                                                                                                        // 5178
  },                                                                                                                   // 5179
                                                                                                                       // 5180
                                                                                                                       // 5181
  hasService: function(identifier) {                                                                                   // 5182
    return AWS.Service._serviceMap.hasOwnProperty(identifier);                                                         // 5183
  },                                                                                                                   // 5184
                                                                                                                       // 5185
                                                                                                                       // 5186
  _serviceMap: {}                                                                                                      // 5187
});                                                                                                                    // 5188
                                                                                                                       // 5189
},{"./core":4,"./model/api":21,"./region_config":34}],42:[function(require,module,exports){                            // 5190
var AWS = require('../core');                                                                                          // 5191
                                                                                                                       // 5192
require('../cloudfront/signer');                                                                                       // 5193
                                                                                                                       // 5194
AWS.util.update(AWS.CloudFront.prototype, {                                                                            // 5195
                                                                                                                       // 5196
  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5197
    request.addListener('extractData', AWS.util.hoistPayloadMember);                                                   // 5198
  }                                                                                                                    // 5199
                                                                                                                       // 5200
});                                                                                                                    // 5201
                                                                                                                       // 5202
},{"../cloudfront/signer":2,"../core":4}],43:[function(require,module,exports){                                        // 5203
var AWS = require('../core');                                                                                          // 5204
                                                                                                                       // 5205
AWS.util.update(AWS.CognitoIdentity.prototype, {                                                                       // 5206
  getOpenIdToken: function getOpenIdToken(params, callback) {                                                          // 5207
    return this.makeUnauthenticatedRequest('getOpenIdToken', params, callback);                                        // 5208
  },                                                                                                                   // 5209
                                                                                                                       // 5210
  getId: function getId(params, callback) {                                                                            // 5211
    return this.makeUnauthenticatedRequest('getId', params, callback);                                                 // 5212
  },                                                                                                                   // 5213
                                                                                                                       // 5214
  getCredentialsForIdentity: function getCredentialsForIdentity(params, callback) {                                    // 5215
    return this.makeUnauthenticatedRequest('getCredentialsForIdentity', params, callback);                             // 5216
  }                                                                                                                    // 5217
});                                                                                                                    // 5218
                                                                                                                       // 5219
},{"../core":4}],44:[function(require,module,exports){                                                                 // 5220
var AWS = require('../core');                                                                                          // 5221
require('../dynamodb/document_client');                                                                                // 5222
                                                                                                                       // 5223
AWS.util.update(AWS.DynamoDB.prototype, {                                                                              // 5224
                                                                                                                       // 5225
  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5226
    if (request.service.config.dynamoDbCrc32) {                                                                        // 5227
      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);                                     // 5228
      request.addListener('extractData', this.checkCrc32);                                                             // 5229
      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);                                        // 5230
    }                                                                                                                  // 5231
  },                                                                                                                   // 5232
                                                                                                                       // 5233
                                                                                                                       // 5234
  checkCrc32: function checkCrc32(resp) {                                                                              // 5235
    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {                                    // 5236
      resp.error = AWS.util.error(new Error(), {                                                                       // 5237
        code: 'CRC32CheckFailed',                                                                                      // 5238
        message: 'CRC32 integrity check failed',                                                                       // 5239
        retryable: true                                                                                                // 5240
      });                                                                                                              // 5241
      resp.request.haltHandlersOnError();                                                                              // 5242
      throw (resp.error);                                                                                              // 5243
    }                                                                                                                  // 5244
  },                                                                                                                   // 5245
                                                                                                                       // 5246
                                                                                                                       // 5247
  crc32IsValid: function crc32IsValid(resp) {                                                                          // 5248
    var crc = resp.httpResponse.headers['x-amz-crc32'];                                                                // 5249
    if (!crc) return true; // no (valid) CRC32 header                                                                  // 5250
    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);                                        // 5251
  },                                                                                                                   // 5252
                                                                                                                       // 5253
                                                                                                                       // 5254
  defaultRetryCount: 10,                                                                                               // 5255
                                                                                                                       // 5256
                                                                                                                       // 5257
  retryDelays: function retryDelays(retryCount) {                                                                      // 5258
    var delay = retryCount > 0 ? (50 * Math.pow(2, retryCount - 1)) : 0;                                               // 5259
    return delay;                                                                                                      // 5260
  }                                                                                                                    // 5261
});                                                                                                                    // 5262
                                                                                                                       // 5263
},{"../core":4,"../dynamodb/document_client":12}],45:[function(require,module,exports){                                // 5264
var AWS = require('../core');                                                                                          // 5265
                                                                                                                       // 5266
AWS.util.update(AWS.EC2.prototype, {                                                                                   // 5267
                                                                                                                       // 5268
  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5269
    request.removeListener('extractError', AWS.EventListeners.Query.EXTRACT_ERROR);                                    // 5270
    request.addListener('extractError', this.extractError);                                                            // 5271
                                                                                                                       // 5272
    if (request.operation === 'copySnapshot') {                                                                        // 5273
      request.onAsync('validate', this.buildCopySnapshotPresignedUrl);                                                 // 5274
    }                                                                                                                  // 5275
  },                                                                                                                   // 5276
                                                                                                                       // 5277
                                                                                                                       // 5278
  buildCopySnapshotPresignedUrl: function buildCopySnapshotPresignedUrl(req, done) {                                   // 5279
    if (req.params.PresignedUrl || req._subRequest) {                                                                  // 5280
      return done();                                                                                                   // 5281
    }                                                                                                                  // 5282
                                                                                                                       // 5283
    req.params = AWS.util.copy(req.params);                                                                            // 5284
    req.params.DestinationRegion = req.service.config.region;                                                          // 5285
                                                                                                                       // 5286
    var config = AWS.util.copy(req.service.config);                                                                    // 5287
    delete config.endpoint;                                                                                            // 5288
    config.region = req.params.SourceRegion;                                                                           // 5289
    var svc = new req.service.constructor(config);                                                                     // 5290
    var newReq = svc[req.operation](req.params);                                                                       // 5291
    newReq._subRequest = true;                                                                                         // 5292
    newReq.presign(function(err, url) {                                                                                // 5293
      if (err) done(err);                                                                                              // 5294
      else {                                                                                                           // 5295
        req.params.PresignedUrl = url;                                                                                 // 5296
        done();                                                                                                        // 5297
      }                                                                                                                // 5298
    });                                                                                                                // 5299
  },                                                                                                                   // 5300
                                                                                                                       // 5301
                                                                                                                       // 5302
  extractError: function extractError(resp) {                                                                          // 5303
    var httpResponse = resp.httpResponse;                                                                              // 5304
    var data = new AWS.XML.Parser().parse(httpResponse.body.toString() || '');                                         // 5305
    if (data.Errors) {                                                                                                 // 5306
      resp.error = AWS.util.error(new Error(), {                                                                       // 5307
        code: data.Errors.Error.Code,                                                                                  // 5308
        message: data.Errors.Error.Message                                                                             // 5309
      });                                                                                                              // 5310
    } else {                                                                                                           // 5311
      resp.error = AWS.util.error(new Error(), {                                                                       // 5312
        code: httpResponse.statusCode,                                                                                 // 5313
        message: null                                                                                                  // 5314
      });                                                                                                              // 5315
    }                                                                                                                  // 5316
    resp.error.requestId = data.RequestID || null;                                                                     // 5317
  }                                                                                                                    // 5318
});                                                                                                                    // 5319
                                                                                                                       // 5320
},{"../core":4}],46:[function(require,module,exports){                                                                 // 5321
var AWS = require('../core');                                                                                          // 5322
                                                                                                                       // 5323
AWS.util.update(AWS.MachineLearning.prototype, {                                                                       // 5324
                                                                                                                       // 5325
  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5326
    if (request.operation === 'predict') {                                                                             // 5327
      request.addListener('build', this.buildEndpoint);                                                                // 5328
    }                                                                                                                  // 5329
  },                                                                                                                   // 5330
                                                                                                                       // 5331
                                                                                                                       // 5332
  buildEndpoint: function buildEndpoint(request) {                                                                     // 5333
    var url = request.params.PredictEndpoint;                                                                          // 5334
    if (url) {                                                                                                         // 5335
      request.httpRequest.endpoint = new AWS.Endpoint(url);                                                            // 5336
    }                                                                                                                  // 5337
  }                                                                                                                    // 5338
                                                                                                                       // 5339
});                                                                                                                    // 5340
                                                                                                                       // 5341
},{"../core":4}],47:[function(require,module,exports){                                                                 // 5342
var AWS = require('../core');                                                                                          // 5343
                                                                                                                       // 5344
AWS.util.update(AWS.Route53.prototype, {                                                                               // 5345
                                                                                                                       // 5346
  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5347
    request.on('build', this.sanitizeUrl);                                                                             // 5348
  },                                                                                                                   // 5349
                                                                                                                       // 5350
                                                                                                                       // 5351
  sanitizeUrl: function sanitizeUrl(request) {                                                                         // 5352
    var path = request.httpRequest.path;                                                                               // 5353
    request.httpRequest.path = path.replace(/\/%2F\w+%2F/, '/');                                                       // 5354
  }                                                                                                                    // 5355
});                                                                                                                    // 5356
                                                                                                                       // 5357
},{"../core":4}],48:[function(require,module,exports){                                                                 // 5358
var AWS = require('../core');                                                                                          // 5359
                                                                                                                       // 5360
require('../s3/managed_upload');                                                                                       // 5361
                                                                                                                       // 5362
AWS.util.update(AWS.S3.prototype, {                                                                                    // 5363
                                                                                                                       // 5364
  validateService: function validateService() {                                                                        // 5365
    if (!this.config.region) this.config.region = 'us-east-1';                                                         // 5366
                                                                                                                       // 5367
    if (!this.config.endpoint && this.config.s3BucketEndpoint) {                                                       // 5368
      var msg = 'An endpoint must be provided when configuring ' +                                                     // 5369
                '`s3BucketEndpoint` to true.';                                                                         // 5370
      throw AWS.util.error(new Error(),                                                                                // 5371
        {name: 'InvalidEndpoint', message: msg});                                                                      // 5372
    }                                                                                                                  // 5373
  },                                                                                                                   // 5374
                                                                                                                       // 5375
                                                                                                                       // 5376
  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5377
    request.addListener('validate', this.validateScheme);                                                              // 5378
    request.addListener('validate', this.validateBucketEndpoint);                                                      // 5379
    request.addListener('build', this.addContentType);                                                                 // 5380
    request.addListener('build', this.populateURI);                                                                    // 5381
    request.addListener('build', this.computeContentMd5);                                                              // 5382
    request.addListener('build', this.computeSseCustomerKeyMd5);                                                       // 5383
    request.addListener('afterBuild', this.addExpect100Continue);                                                      // 5384
    request.removeListener('validate',                                                                                 // 5385
      AWS.EventListeners.Core.VALIDATE_REGION);                                                                        // 5386
    request.addListener('extractError', this.extractError);                                                            // 5387
    request.addListener('extractData', this.extractData);                                                              // 5388
    request.addListener('extractData', AWS.util.hoistPayloadMember);                                                   // 5389
    request.addListener('beforePresign', this.prepareSignedUrl);                                                       // 5390
  },                                                                                                                   // 5391
                                                                                                                       // 5392
                                                                                                                       // 5393
  validateScheme: function(req) {                                                                                      // 5394
    var params = req.params,                                                                                           // 5395
        scheme = req.httpRequest.endpoint.protocol,                                                                    // 5396
        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;                                          // 5397
    if (sensitive && scheme !== 'https:') {                                                                            // 5398
      var msg = 'Cannot send SSE keys over HTTP. Set \'sslEnabled\'' +                                                 // 5399
        'to \'true\' in your configuration';                                                                           // 5400
      throw AWS.util.error(new Error(),                                                                                // 5401
        { code: 'ConfigError', message: msg });                                                                        // 5402
    }                                                                                                                  // 5403
  },                                                                                                                   // 5404
                                                                                                                       // 5405
                                                                                                                       // 5406
  validateBucketEndpoint: function(req) {                                                                              // 5407
    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {                                                   // 5408
      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';                                       // 5409
      throw AWS.util.error(new Error(),                                                                                // 5410
        { code: 'ConfigError', message: msg });                                                                        // 5411
    }                                                                                                                  // 5412
  },                                                                                                                   // 5413
                                                                                                                       // 5414
                                                                                                                       // 5415
  populateURI: function populateURI(req) {                                                                             // 5416
    var httpRequest = req.httpRequest;                                                                                 // 5417
    var b = req.params.Bucket;                                                                                         // 5418
                                                                                                                       // 5419
    if (b) {                                                                                                           // 5420
      if (!req.service.pathStyleBucketName(b)) {                                                                       // 5421
        if (!req.service.config.s3BucketEndpoint) {                                                                    // 5422
          httpRequest.endpoint.hostname =                                                                              // 5423
            b + '.' + httpRequest.endpoint.hostname;                                                                   // 5424
                                                                                                                       // 5425
          var port = httpRequest.endpoint.port;                                                                        // 5426
          if (port !== 80 && port !== 443) {                                                                           // 5427
            httpRequest.endpoint.host = httpRequest.endpoint.hostname + ':' +                                          // 5428
              httpRequest.endpoint.port;                                                                               // 5429
          } else {                                                                                                     // 5430
            httpRequest.endpoint.host = httpRequest.endpoint.hostname;                                                 // 5431
          }                                                                                                            // 5432
        }                                                                                                              // 5433
                                                                                                                       // 5434
        httpRequest.virtualHostedBucket = b; // needed for signing the request                                         // 5435
        httpRequest.path = httpRequest.path.replace(new RegExp('/' + b), '');                                          // 5436
        if (httpRequest.path[0] !== '/') {                                                                             // 5437
          httpRequest.path = '/' + httpRequest.path;                                                                   // 5438
        }                                                                                                              // 5439
      }                                                                                                                // 5440
    }                                                                                                                  // 5441
  },                                                                                                                   // 5442
                                                                                                                       // 5443
                                                                                                                       // 5444
  addExpect100Continue: function addExpect100Continue(req) {                                                           // 5445
    var len = req.httpRequest.headers['Content-Length'];                                                               // 5446
    if (AWS.util.isNode() && len >= 1024 * 1024) {                                                                     // 5447
      req.httpRequest.headers['Expect'] = '100-continue';                                                              // 5448
    }                                                                                                                  // 5449
  },                                                                                                                   // 5450
                                                                                                                       // 5451
                                                                                                                       // 5452
  addContentType: function addContentType(req) {                                                                       // 5453
    var httpRequest = req.httpRequest;                                                                                 // 5454
    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {                                               // 5455
      delete httpRequest.headers['Content-Type'];                                                                      // 5456
      return;                                                                                                          // 5457
    }                                                                                                                  // 5458
                                                                                                                       // 5459
    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type                                          // 5460
      httpRequest.headers['Content-Type'] = 'application/octet-stream';                                                // 5461
    }                                                                                                                  // 5462
                                                                                                                       // 5463
    var contentType = httpRequest.headers['Content-Type'];                                                             // 5464
    if (AWS.util.isBrowser()) {                                                                                        // 5465
      if (typeof httpRequest.body === 'string' && !contentType.match(/;\s*charset=/)) {                                // 5466
        var charset = '; charset=UTF-8';                                                                               // 5467
        httpRequest.headers['Content-Type'] += charset;                                                                // 5468
      } else {                                                                                                         // 5469
        var replaceFn = function(_, prefix, charsetName) {                                                             // 5470
          return prefix + charsetName.toUpperCase();                                                                   // 5471
        };                                                                                                             // 5472
                                                                                                                       // 5473
        httpRequest.headers['Content-Type'] =                                                                          // 5474
          contentType.replace(/(;\s*charset=)(.+)$/, replaceFn);                                                       // 5475
      }                                                                                                                // 5476
    }                                                                                                                  // 5477
  },                                                                                                                   // 5478
                                                                                                                       // 5479
                                                                                                                       // 5480
  computableChecksumOperations: {                                                                                      // 5481
    putBucketCors: true,                                                                                               // 5482
    putBucketLifecycle: true,                                                                                          // 5483
    putBucketLifecycleConfiguration: true,                                                                             // 5484
    putBucketTagging: true,                                                                                            // 5485
    deleteObjects: true                                                                                                // 5486
  },                                                                                                                   // 5487
                                                                                                                       // 5488
                                                                                                                       // 5489
  willComputeChecksums: function willComputeChecksums(req) {                                                           // 5490
    if (this.computableChecksumOperations[req.operation]) return true;                                                 // 5491
    if (!this.config.computeChecksums) return false;                                                                   // 5492
                                                                                                                       // 5493
    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) &&                                                             // 5494
        typeof req.httpRequest.body !== 'string') {                                                                    // 5495
      return false;                                                                                                    // 5496
    }                                                                                                                  // 5497
                                                                                                                       // 5498
    var rules = req.service.api.operations[req.operation].input.members;                                               // 5499
                                                                                                                       // 5500
    if (req.service.getSignerClass(req) === AWS.Signers.V4) {                                                          // 5501
      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;                                                // 5502
    }                                                                                                                  // 5503
                                                                                                                       // 5504
    if (rules.ContentMD5 && !req.params.ContentMD5) return true;                                                       // 5505
  },                                                                                                                   // 5506
                                                                                                                       // 5507
                                                                                                                       // 5508
  computeContentMd5: function computeContentMd5(req) {                                                                 // 5509
    if (req.service.willComputeChecksums(req)) {                                                                       // 5510
      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');                                                   // 5511
      req.httpRequest.headers['Content-MD5'] = md5;                                                                    // 5512
    }                                                                                                                  // 5513
  },                                                                                                                   // 5514
                                                                                                                       // 5515
                                                                                                                       // 5516
  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {                                                   // 5517
    var keys = {                                                                                                       // 5518
      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',                                                 // 5519
      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'                            // 5520
    };                                                                                                                 // 5521
    AWS.util.each(keys, function(key, header) {                                                                        // 5522
      if (req.params[key]) {                                                                                           // 5523
        var value = AWS.util.crypto.md5(req.params[key], 'base64');                                                    // 5524
        req.httpRequest.headers[header] = value;                                                                       // 5525
      }                                                                                                                // 5526
    });                                                                                                                // 5527
  },                                                                                                                   // 5528
                                                                                                                       // 5529
                                                                                                                       // 5530
  pathStyleBucketName: function pathStyleBucketName(bucketName) {                                                      // 5531
    if (this.config.s3ForcePathStyle) return true;                                                                     // 5532
    if (this.config.s3BucketEndpoint) return false;                                                                    // 5533
                                                                                                                       // 5534
    if (this.dnsCompatibleBucketName(bucketName)) {                                                                    // 5535
      return (this.config.sslEnabled && bucketName.match(/\./)) ? true : false;                                        // 5536
    } else {                                                                                                           // 5537
      return true; // not dns compatible names must always use path style                                              // 5538
    }                                                                                                                  // 5539
  },                                                                                                                   // 5540
                                                                                                                       // 5541
                                                                                                                       // 5542
  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {                                              // 5543
    var b = bucketName;                                                                                                // 5544
    var domain = new RegExp(/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/);                                                   // 5545
    var ipAddress = new RegExp(/(\d+\.){3}\d+/);                                                                       // 5546
    var dots = new RegExp(/\.\./);                                                                                     // 5547
    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;                                  // 5548
  },                                                                                                                   // 5549
                                                                                                                       // 5550
                                                                                                                       // 5551
  successfulResponse: function successfulResponse(resp) {                                                              // 5552
    var req = resp.request;                                                                                            // 5553
    var httpResponse = resp.httpResponse;                                                                              // 5554
    if (req.operation === 'completeMultipartUpload' &&                                                                 // 5555
        httpResponse.body.toString().match('<Error>')) {                                                               // 5556
      return false;                                                                                                    // 5557
    } else {                                                                                                           // 5558
      return httpResponse.statusCode < 300;                                                                            // 5559
    }                                                                                                                  // 5560
  },                                                                                                                   // 5561
                                                                                                                       // 5562
                                                                                                                       // 5563
  retryableError: function retryableError(error, request) {                                                            // 5564
    if (request.operation === 'completeMultipartUpload' &&                                                             // 5565
        error.statusCode === 200) {                                                                                    // 5566
      return true;                                                                                                     // 5567
    } else if (error && error.code === 'RequestTimeout') {                                                             // 5568
      return true;                                                                                                     // 5569
    } else if (error && error.code === 'AuthorizationHeaderMalformed' &&                                               // 5570
        error.region && error.region != request.httpRequest.region) {                                                  // 5571
      request.httpRequest.region = error.region;                                                                       // 5572
      return true;                                                                                                     // 5573
    } else {                                                                                                           // 5574
      var _super = AWS.Service.prototype.retryableError;                                                               // 5575
      return _super.call(this, error, request);                                                                        // 5576
    }                                                                                                                  // 5577
  },                                                                                                                   // 5578
                                                                                                                       // 5579
                                                                                                                       // 5580
  extractData: function extractData(resp) {                                                                            // 5581
    var req = resp.request;                                                                                            // 5582
    if (req.operation === 'getBucketLocation') {                                                                       // 5583
      var match = resp.httpResponse.body.toString().match(/>(.+)<\/Location/);                                         // 5584
      delete resp.data['_'];                                                                                           // 5585
      if (match) {                                                                                                     // 5586
        resp.data.LocationConstraint = match[1];                                                                       // 5587
      } else {                                                                                                         // 5588
        resp.data.LocationConstraint = '';                                                                             // 5589
      }                                                                                                                // 5590
    }                                                                                                                  // 5591
  },                                                                                                                   // 5592
                                                                                                                       // 5593
                                                                                                                       // 5594
  extractError: function extractError(resp) {                                                                          // 5595
    var codes = {                                                                                                      // 5596
      304: 'NotModified',                                                                                              // 5597
      403: 'Forbidden',                                                                                                // 5598
      400: 'BadRequest',                                                                                               // 5599
      404: 'NotFound'                                                                                                  // 5600
    };                                                                                                                 // 5601
                                                                                                                       // 5602
    var code = resp.httpResponse.statusCode;                                                                           // 5603
    var body = resp.httpResponse.body || '';                                                                           // 5604
    var requestId = resp.requestId;                                                                                    // 5605
    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;                // 5606
    if (codes[code] && body.length === 0) {                                                                            // 5607
      resp.error = AWS.util.error(new Error(), {                                                                       // 5608
        code: codes[resp.httpResponse.statusCode],                                                                     // 5609
        message: null                                                                                                  // 5610
      });                                                                                                              // 5611
    } else {                                                                                                           // 5612
      var data = new AWS.XML.Parser().parse(body.toString());                                                          // 5613
      resp.error = AWS.util.error(new Error(), {                                                                       // 5614
        code: data.Code || code,                                                                                       // 5615
        message: data.Message || null,                                                                                 // 5616
        region: data.Region || null                                                                                    // 5617
      });                                                                                                              // 5618
    }                                                                                                                  // 5619
    resp.error.requestId = requestId || null;                                                                          // 5620
    resp.error.extendedRequestId = extendedRequestId || null;                                                          // 5621
  },                                                                                                                   // 5622
                                                                                                                       // 5623
                                                                                                                       // 5624
  getSignedUrl: function getSignedUrl(operation, params, callback) {                                                   // 5625
    params = AWS.util.copy(params || {});                                                                              // 5626
    var expires = params.Expires || 900;                                                                               // 5627
    delete params.Expires; // we can't validate this                                                                   // 5628
    var request = this.makeRequest(operation, params);                                                                 // 5629
    return request.presign(expires, callback);                                                                         // 5630
  },                                                                                                                   // 5631
                                                                                                                       // 5632
                                                                                                                       // 5633
  prepareSignedUrl: function prepareSignedUrl(request) {                                                               // 5634
    request.addListener('validate', request.service.noPresignedContentLength);                                         // 5635
    request.removeListener('build', request.service.addContentType);                                                   // 5636
    if (!request.params.Body) {                                                                                        // 5637
      request.removeListener('build', request.service.computeContentMd5);                                              // 5638
    } else {                                                                                                           // 5639
      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);                                       // 5640
    }                                                                                                                  // 5641
  },                                                                                                                   // 5642
                                                                                                                       // 5643
  noPresignedContentLength: function noPresignedContentLength(request) {                                               // 5644
    if (request.params.ContentLength !== undefined) {                                                                  // 5645
      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',                                                  // 5646
        message: 'ContentLength is not supported in pre-signed URLs.'});                                               // 5647
    }                                                                                                                  // 5648
  },                                                                                                                   // 5649
                                                                                                                       // 5650
  createBucket: function createBucket(params, callback) {                                                              // 5651
    if (typeof params === 'function' || !params) {                                                                     // 5652
      callback = callback || params;                                                                                   // 5653
      params = {};                                                                                                     // 5654
    }                                                                                                                  // 5655
    var hostname = this.endpoint.hostname;                                                                             // 5656
    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {                                   // 5657
      params.CreateBucketConfiguration = { LocationConstraint: this.config.region };                                   // 5658
    }                                                                                                                  // 5659
    return this.makeRequest('createBucket', params, callback);                                                         // 5660
  },                                                                                                                   // 5661
                                                                                                                       // 5662
                                                                                                                       // 5663
  upload: function upload(params, options, callback) {                                                                 // 5664
    if (typeof options === 'function' && callback === undefined) {                                                     // 5665
      callback = options;                                                                                              // 5666
      options = null;                                                                                                  // 5667
    }                                                                                                                  // 5668
                                                                                                                       // 5669
    options = options || {};                                                                                           // 5670
    options = AWS.util.merge(options || {}, {service: this, params: params});                                          // 5671
                                                                                                                       // 5672
    var uploader = new AWS.S3.ManagedUpload(options);                                                                  // 5673
    if (typeof callback === 'function') uploader.send(callback);                                                       // 5674
    return uploader;                                                                                                   // 5675
  }                                                                                                                    // 5676
});                                                                                                                    // 5677
                                                                                                                       // 5678
},{"../core":4,"../s3/managed_upload":39}],49:[function(require,module,exports){                                       // 5679
var AWS = require('../core');                                                                                          // 5680
                                                                                                                       // 5681
AWS.util.update(AWS.SQS.prototype, {                                                                                   // 5682
                                                                                                                       // 5683
  setupRequestListeners: function setupRequestListeners(request) {                                                     // 5684
    request.addListener('build', this.buildEndpoint);                                                                  // 5685
                                                                                                                       // 5686
    if (request.service.config.computeChecksums) {                                                                     // 5687
      if (request.operation === 'sendMessage') {                                                                       // 5688
        request.addListener('extractData', this.verifySendMessageChecksum);                                            // 5689
      } else if (request.operation === 'sendMessageBatch') {                                                           // 5690
        request.addListener('extractData', this.verifySendMessageBatchChecksum);                                       // 5691
      } else if (request.operation === 'receiveMessage') {                                                             // 5692
        request.addListener('extractData', this.verifyReceiveMessageChecksum);                                         // 5693
      }                                                                                                                // 5694
    }                                                                                                                  // 5695
  },                                                                                                                   // 5696
                                                                                                                       // 5697
                                                                                                                       // 5698
  verifySendMessageChecksum: function verifySendMessageChecksum(response) {                                            // 5699
    if (!response.data) return;                                                                                        // 5700
                                                                                                                       // 5701
    var md5 = response.data.MD5OfMessageBody;                                                                          // 5702
    var body = this.params.MessageBody;                                                                                // 5703
    var calculatedMd5 = this.service.calculateChecksum(body);                                                          // 5704
    if (calculatedMd5 !== md5) {                                                                                       // 5705
      var msg = 'Got "' + response.data.MD5OfMessageBody +                                                             // 5706
        '", expecting "' + calculatedMd5 + '".';                                                                       // 5707
      this.service.throwInvalidChecksumError(response,                                                                 // 5708
        [response.data.MessageId], msg);                                                                               // 5709
    }                                                                                                                  // 5710
  },                                                                                                                   // 5711
                                                                                                                       // 5712
                                                                                                                       // 5713
  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {                                  // 5714
    if (!response.data) return;                                                                                        // 5715
                                                                                                                       // 5716
    var service = this.service;                                                                                        // 5717
    var entries = {};                                                                                                  // 5718
    var errors = [];                                                                                                   // 5719
    var messageIds = [];                                                                                               // 5720
    AWS.util.arrayEach(response.data.Successful, function (entry) {                                                    // 5721
      entries[entry.Id] = entry;                                                                                       // 5722
    });                                                                                                                // 5723
    AWS.util.arrayEach(this.params.Entries, function (entry) {                                                         // 5724
      if (entries[entry.Id]) {                                                                                         // 5725
        var md5 = entries[entry.Id].MD5OfMessageBody;                                                                  // 5726
        var body = entry.MessageBody;                                                                                  // 5727
        if (!service.isChecksumValid(md5, body)) {                                                                     // 5728
          errors.push(entry.Id);                                                                                       // 5729
          messageIds.push(entries[entry.Id].MessageId);                                                                // 5730
        }                                                                                                              // 5731
      }                                                                                                                // 5732
    });                                                                                                                // 5733
                                                                                                                       // 5734
    if (errors.length > 0) {                                                                                           // 5735
      service.throwInvalidChecksumError(response, messageIds,                                                          // 5736
        'Invalid messages: ' + errors.join(', '));                                                                     // 5737
    }                                                                                                                  // 5738
  },                                                                                                                   // 5739
                                                                                                                       // 5740
                                                                                                                       // 5741
  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {                                      // 5742
    if (!response.data) return;                                                                                        // 5743
                                                                                                                       // 5744
    var service = this.service;                                                                                        // 5745
    var messageIds = [];                                                                                               // 5746
    AWS.util.arrayEach(response.data.Messages, function(message) {                                                     // 5747
      var md5 = message.MD5OfBody;                                                                                     // 5748
      var body = message.Body;                                                                                         // 5749
      if (!service.isChecksumValid(md5, body)) {                                                                       // 5750
        messageIds.push(message.MessageId);                                                                            // 5751
      }                                                                                                                // 5752
    });                                                                                                                // 5753
                                                                                                                       // 5754
    if (messageIds.length > 0) {                                                                                       // 5755
      service.throwInvalidChecksumError(response, messageIds,                                                          // 5756
        'Invalid messages: ' + messageIds.join(', '));                                                                 // 5757
    }                                                                                                                  // 5758
  },                                                                                                                   // 5759
                                                                                                                       // 5760
                                                                                                                       // 5761
  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {                              // 5762
    response.error = AWS.util.error(new Error(), {                                                                     // 5763
      retryable: true,                                                                                                 // 5764
      code: 'InvalidChecksum',                                                                                         // 5765
      messageIds: ids,                                                                                                 // 5766
      message: response.request.operation +                                                                            // 5767
               ' returned an invalid MD5 response. ' + message                                                         // 5768
    });                                                                                                                // 5769
  },                                                                                                                   // 5770
                                                                                                                       // 5771
                                                                                                                       // 5772
  isChecksumValid: function isChecksumValid(checksum, data) {                                                          // 5773
    return this.calculateChecksum(data) === checksum;                                                                  // 5774
  },                                                                                                                   // 5775
                                                                                                                       // 5776
                                                                                                                       // 5777
  calculateChecksum: function calculateChecksum(data) {                                                                // 5778
    return AWS.util.crypto.md5(data, 'hex');                                                                           // 5779
  },                                                                                                                   // 5780
                                                                                                                       // 5781
                                                                                                                       // 5782
  buildEndpoint: function buildEndpoint(request) {                                                                     // 5783
    var url = request.httpRequest.params.QueueUrl;                                                                     // 5784
    if (url) {                                                                                                         // 5785
      request.httpRequest.endpoint = new AWS.Endpoint(url);                                                            // 5786
                                                                                                                       // 5787
      var matches = request.httpRequest.endpoint.host.match(/^sqs\.(.+?)\./);                                          // 5788
      if (matches) request.httpRequest.region = matches[1];                                                            // 5789
    }                                                                                                                  // 5790
  }                                                                                                                    // 5791
});                                                                                                                    // 5792
                                                                                                                       // 5793
},{"../core":4}],50:[function(require,module,exports){                                                                 // 5794
var AWS = require('../core');                                                                                          // 5795
                                                                                                                       // 5796
AWS.util.update(AWS.STS.prototype, {                                                                                   // 5797
                                                                                                                       // 5798
  credentialsFrom: function credentialsFrom(data, credentials) {                                                       // 5799
    if (!data) return null;                                                                                            // 5800
    if (!credentials) credentials = new AWS.TemporaryCredentials();                                                    // 5801
    credentials.expired = false;                                                                                       // 5802
    credentials.accessKeyId = data.Credentials.AccessKeyId;                                                            // 5803
    credentials.secretAccessKey = data.Credentials.SecretAccessKey;                                                    // 5804
    credentials.sessionToken = data.Credentials.SessionToken;                                                          // 5805
    credentials.expireTime = data.Credentials.Expiration;                                                              // 5806
    return credentials;                                                                                                // 5807
  },                                                                                                                   // 5808
                                                                                                                       // 5809
  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {                                    // 5810
    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);                             // 5811
  },                                                                                                                   // 5812
                                                                                                                       // 5813
  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {                                                  // 5814
    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);                                    // 5815
  }                                                                                                                    // 5816
});                                                                                                                    // 5817
                                                                                                                       // 5818
},{"../core":4}],51:[function(require,module,exports){                                                                 // 5819
var AWS = require('../core');                                                                                          // 5820
var inherit = AWS.util.inherit;                                                                                        // 5821
                                                                                                                       // 5822
                                                                                                                       // 5823
var expiresHeader = 'presigned-expires';                                                                               // 5824
                                                                                                                       // 5825
                                                                                                                       // 5826
function signedUrlBuilder(request) {                                                                                   // 5827
  var expires = request.httpRequest.headers[expiresHeader];                                                            // 5828
                                                                                                                       // 5829
  delete request.httpRequest.headers['User-Agent'];                                                                    // 5830
  delete request.httpRequest.headers['X-Amz-User-Agent'];                                                              // 5831
                                                                                                                       // 5832
  if (request.service.getSignerClass() === AWS.Signers.V4) {                                                           // 5833
    if (expires > 604800) { // one week expiry is invalid                                                              // 5834
      var message = 'Presigning does not support expiry time greater ' +                                               // 5835
                    'than a week with SigV4 signing.';                                                                 // 5836
      throw AWS.util.error(new Error(), {                                                                              // 5837
        code: 'InvalidExpiryTime', message: message, retryable: false                                                  // 5838
      });                                                                                                              // 5839
    }                                                                                                                  // 5840
    request.httpRequest.headers[expiresHeader] = expires;                                                              // 5841
  } else if (request.service.getSignerClass() === AWS.Signers.S3) {                                                    // 5842
    request.httpRequest.headers[expiresHeader] = parseInt(                                                             // 5843
      AWS.util.date.unixTimestamp() + expires, 10).toString();                                                         // 5844
  } else {                                                                                                             // 5845
    throw AWS.util.error(new Error(), {                                                                                // 5846
      message: 'Presigning only supports S3 or SigV4 signing.',                                                        // 5847
      code: 'UnsupportedSigner', retryable: false                                                                      // 5848
    });                                                                                                                // 5849
  }                                                                                                                    // 5850
}                                                                                                                      // 5851
                                                                                                                       // 5852
                                                                                                                       // 5853
function signedUrlSigner(request) {                                                                                    // 5854
  var endpoint = request.httpRequest.endpoint;                                                                         // 5855
  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);                                                         // 5856
  var queryParams = {};                                                                                                // 5857
                                                                                                                       // 5858
  if (parsedUrl.search) {                                                                                              // 5859
    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));                                               // 5860
  }                                                                                                                    // 5861
                                                                                                                       // 5862
  AWS.util.each(request.httpRequest.headers, function (key, value) {                                                   // 5863
    if (key === expiresHeader) key = 'Expires';                                                                        // 5864
    if (key.indexOf('x-amz-meta-') === 0) {                                                                            // 5865
      key = key.toLowerCase();                                                                                         // 5866
    }                                                                                                                  // 5867
    queryParams[key] = value;                                                                                          // 5868
  });                                                                                                                  // 5869
  delete request.httpRequest.headers[expiresHeader];                                                                   // 5870
                                                                                                                       // 5871
  var auth = queryParams['Authorization'].split(' ');                                                                  // 5872
  if (auth[0] === 'AWS') {                                                                                             // 5873
    auth = auth[1].split(':');                                                                                         // 5874
    queryParams['AWSAccessKeyId'] = auth[0];                                                                           // 5875
    queryParams['Signature'] = auth[1];                                                                                // 5876
  } else if (auth[0] === 'AWS4-HMAC-SHA256') { // SigV4 signing                                                        // 5877
    auth.shift();                                                                                                      // 5878
    var rest = auth.join(' ');                                                                                         // 5879
    var signature = rest.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];                                                  // 5880
    queryParams['X-Amz-Signature'] = signature;                                                                        // 5881
    delete queryParams['Expires'];                                                                                     // 5882
  }                                                                                                                    // 5883
  delete queryParams['Authorization'];                                                                                 // 5884
  delete queryParams['Host'];                                                                                          // 5885
                                                                                                                       // 5886
  endpoint.pathname = parsedUrl.pathname;                                                                              // 5887
  endpoint.search = AWS.util.queryParamsToString(queryParams);                                                         // 5888
}                                                                                                                      // 5889
                                                                                                                       // 5890
                                                                                                                       // 5891
AWS.Signers.Presign = inherit({                                                                                        // 5892
                                                                                                                       // 5893
  sign: function sign(request, expireTime, callback) {                                                                 // 5894
    request.httpRequest.headers[expiresHeader] = expireTime || 3600;                                                   // 5895
    request.on('build', signedUrlBuilder);                                                                             // 5896
    request.on('sign', signedUrlSigner);                                                                               // 5897
    request.removeListener('afterBuild',                                                                               // 5898
      AWS.EventListeners.Core.SET_CONTENT_LENGTH);                                                                     // 5899
    request.removeListener('afterBuild',                                                                               // 5900
      AWS.EventListeners.Core.COMPUTE_SHA256);                                                                         // 5901
                                                                                                                       // 5902
    request.emit('beforePresign', [request]);                                                                          // 5903
                                                                                                                       // 5904
    if (callback) {                                                                                                    // 5905
      request.build(function() {                                                                                       // 5906
        if (this.response.error) callback(this.response.error);                                                        // 5907
        else {                                                                                                         // 5908
          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));                                            // 5909
        }                                                                                                              // 5910
      });                                                                                                              // 5911
    } else {                                                                                                           // 5912
      request.build();                                                                                                 // 5913
      if (request.response.error) throw request.response.error;                                                        // 5914
      return AWS.util.urlFormat(request.httpRequest.endpoint);                                                         // 5915
    }                                                                                                                  // 5916
  }                                                                                                                    // 5917
});                                                                                                                    // 5918
                                                                                                                       // 5919
module.exports = AWS.Signers.Presign;                                                                                  // 5920
                                                                                                                       // 5921
},{"../core":4}],52:[function(require,module,exports){                                                                 // 5922
var AWS = require('../core');                                                                                          // 5923
var inherit = AWS.util.inherit;                                                                                        // 5924
                                                                                                                       // 5925
                                                                                                                       // 5926
AWS.Signers.RequestSigner = inherit({                                                                                  // 5927
  constructor: function RequestSigner(request) {                                                                       // 5928
    this.request = request;                                                                                            // 5929
  }                                                                                                                    // 5930
});                                                                                                                    // 5931
                                                                                                                       // 5932
AWS.Signers.RequestSigner.getVersion = function getVersion(version) {                                                  // 5933
  switch (version) {                                                                                                   // 5934
    case 'v2': return AWS.Signers.V2;                                                                                  // 5935
    case 'v3': return AWS.Signers.V3;                                                                                  // 5936
    case 'v4': return AWS.Signers.V4;                                                                                  // 5937
    case 's3': return AWS.Signers.S3;                                                                                  // 5938
    case 'v3https': return AWS.Signers.V3Https;                                                                        // 5939
  }                                                                                                                    // 5940
  throw new Error('Unknown signing version ' + version);                                                               // 5941
};                                                                                                                     // 5942
                                                                                                                       // 5943
require('./v2');                                                                                                       // 5944
require('./v3');                                                                                                       // 5945
require('./v3https');                                                                                                  // 5946
require('./v4');                                                                                                       // 5947
require('./s3');                                                                                                       // 5948
require('./presign');                                                                                                  // 5949
                                                                                                                       // 5950
},{"../core":4,"./presign":51,"./s3":53,"./v2":54,"./v3":55,"./v3https":56,"./v4":57}],53:[function(require,module,exports){
var AWS = require('../core');                                                                                          // 5952
var inherit = AWS.util.inherit;                                                                                        // 5953
                                                                                                                       // 5954
                                                                                                                       // 5955
AWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {                                                                  // 5956
                                                                                                                       // 5957
  subResources: {                                                                                                      // 5958
    'acl': 1,                                                                                                          // 5959
    'cors': 1,                                                                                                         // 5960
    'lifecycle': 1,                                                                                                    // 5961
    'delete': 1,                                                                                                       // 5962
    'location': 1,                                                                                                     // 5963
    'logging': 1,                                                                                                      // 5964
    'notification': 1,                                                                                                 // 5965
    'partNumber': 1,                                                                                                   // 5966
    'policy': 1,                                                                                                       // 5967
    'requestPayment': 1,                                                                                               // 5968
    'restore': 1,                                                                                                      // 5969
    'tagging': 1,                                                                                                      // 5970
    'torrent': 1,                                                                                                      // 5971
    'uploadId': 1,                                                                                                     // 5972
    'uploads': 1,                                                                                                      // 5973
    'versionId': 1,                                                                                                    // 5974
    'versioning': 1,                                                                                                   // 5975
    'versions': 1,                                                                                                     // 5976
    'website': 1                                                                                                       // 5977
  },                                                                                                                   // 5978
                                                                                                                       // 5979
  responseHeaders: {                                                                                                   // 5980
    'response-content-type': 1,                                                                                        // 5981
    'response-content-language': 1,                                                                                    // 5982
    'response-expires': 1,                                                                                             // 5983
    'response-cache-control': 1,                                                                                       // 5984
    'response-content-disposition': 1,                                                                                 // 5985
    'response-content-encoding': 1                                                                                     // 5986
  },                                                                                                                   // 5987
                                                                                                                       // 5988
  addAuthorization: function addAuthorization(credentials, date) {                                                     // 5989
    if (!this.request.headers['presigned-expires']) {                                                                  // 5990
      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);                                                 // 5991
    }                                                                                                                  // 5992
                                                                                                                       // 5993
    if (credentials.sessionToken) {                                                                                    // 5994
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;                                         // 5995
    }                                                                                                                  // 5996
                                                                                                                       // 5997
    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());                                       // 5998
    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;                                                     // 5999
                                                                                                                       // 6000
    this.request.headers['Authorization'] = auth;                                                                      // 6001
  },                                                                                                                   // 6002
                                                                                                                       // 6003
  stringToSign: function stringToSign() {                                                                              // 6004
    var r = this.request;                                                                                              // 6005
                                                                                                                       // 6006
    var parts = [];                                                                                                    // 6007
    parts.push(r.method);                                                                                              // 6008
    parts.push(r.headers['Content-MD5'] || '');                                                                        // 6009
    parts.push(r.headers['Content-Type'] || '');                                                                       // 6010
                                                                                                                       // 6011
    parts.push(r.headers['presigned-expires'] || '');                                                                  // 6012
                                                                                                                       // 6013
    var headers = this.canonicalizedAmzHeaders();                                                                      // 6014
    if (headers) parts.push(headers);                                                                                  // 6015
    parts.push(this.canonicalizedResource());                                                                          // 6016
                                                                                                                       // 6017
    return parts.join('\n');                                                                                           // 6018
                                                                                                                       // 6019
  },                                                                                                                   // 6020
                                                                                                                       // 6021
  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {                                                        // 6022
                                                                                                                       // 6023
    var amzHeaders = [];                                                                                               // 6024
                                                                                                                       // 6025
    AWS.util.each(this.request.headers, function (name) {                                                              // 6026
      if (name.match(/^x-amz-/i))                                                                                      // 6027
        amzHeaders.push(name);                                                                                         // 6028
    });                                                                                                                // 6029
                                                                                                                       // 6030
    amzHeaders.sort(function (a, b) {                                                                                  // 6031
      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;                                                               // 6032
    });                                                                                                                // 6033
                                                                                                                       // 6034
    var parts = [];                                                                                                    // 6035
    AWS.util.arrayEach.call(this, amzHeaders, function (name) {                                                        // 6036
      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));                                       // 6037
    });                                                                                                                // 6038
                                                                                                                       // 6039
    return parts.join('\n');                                                                                           // 6040
                                                                                                                       // 6041
  },                                                                                                                   // 6042
                                                                                                                       // 6043
  canonicalizedResource: function canonicalizedResource() {                                                            // 6044
                                                                                                                       // 6045
    var r = this.request;                                                                                              // 6046
                                                                                                                       // 6047
    var parts = r.path.split('?');                                                                                     // 6048
    var path = parts[0];                                                                                               // 6049
    var querystring = parts[1];                                                                                        // 6050
                                                                                                                       // 6051
    var resource = '';                                                                                                 // 6052
                                                                                                                       // 6053
    if (r.virtualHostedBucket)                                                                                         // 6054
      resource += '/' + r.virtualHostedBucket;                                                                         // 6055
                                                                                                                       // 6056
    resource += path;                                                                                                  // 6057
                                                                                                                       // 6058
    if (querystring) {                                                                                                 // 6059
                                                                                                                       // 6060
      var resources = [];                                                                                              // 6061
                                                                                                                       // 6062
      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {                                         // 6063
        var name = param.split('=')[0];                                                                                // 6064
        var value = param.split('=')[1];                                                                               // 6065
        if (this.subResources[name] || this.responseHeaders[name]) {                                                   // 6066
          var subresource = { name: name };                                                                            // 6067
          if (value !== undefined) {                                                                                   // 6068
            if (this.subResources[name]) {                                                                             // 6069
              subresource.value = value;                                                                               // 6070
            } else {                                                                                                   // 6071
              subresource.value = decodeURIComponent(value);                                                           // 6072
            }                                                                                                          // 6073
          }                                                                                                            // 6074
          resources.push(subresource);                                                                                 // 6075
        }                                                                                                              // 6076
      });                                                                                                              // 6077
                                                                                                                       // 6078
      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });                                            // 6079
                                                                                                                       // 6080
      if (resources.length) {                                                                                          // 6081
                                                                                                                       // 6082
        querystring = [];                                                                                              // 6083
        AWS.util.arrayEach(resources, function (res) {                                                                 // 6084
          if (res.value === undefined) {                                                                               // 6085
            querystring.push(res.name);                                                                                // 6086
          } else {                                                                                                     // 6087
            querystring.push(res.name + '=' + res.value);                                                              // 6088
          }                                                                                                            // 6089
        });                                                                                                            // 6090
                                                                                                                       // 6091
        resource += '?' + querystring.join('&');                                                                       // 6092
      }                                                                                                                // 6093
                                                                                                                       // 6094
    }                                                                                                                  // 6095
                                                                                                                       // 6096
    return resource;                                                                                                   // 6097
                                                                                                                       // 6098
  },                                                                                                                   // 6099
                                                                                                                       // 6100
  sign: function sign(secret, string) {                                                                                // 6101
    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');                                                     // 6102
  }                                                                                                                    // 6103
});                                                                                                                    // 6104
                                                                                                                       // 6105
module.exports = AWS.Signers.S3;                                                                                       // 6106
                                                                                                                       // 6107
},{"../core":4}],54:[function(require,module,exports){                                                                 // 6108
var AWS = require('../core');                                                                                          // 6109
var inherit = AWS.util.inherit;                                                                                        // 6110
                                                                                                                       // 6111
                                                                                                                       // 6112
AWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {                                                                  // 6113
  addAuthorization: function addAuthorization(credentials, date) {                                                     // 6114
                                                                                                                       // 6115
    if (!date) date = AWS.util.date.getDate();                                                                         // 6116
                                                                                                                       // 6117
    var r = this.request;                                                                                              // 6118
                                                                                                                       // 6119
    r.params.Timestamp = AWS.util.date.iso8601(date);                                                                  // 6120
    r.params.SignatureVersion = '2';                                                                                   // 6121
    r.params.SignatureMethod = 'HmacSHA256';                                                                           // 6122
    r.params.AWSAccessKeyId = credentials.accessKeyId;                                                                 // 6123
                                                                                                                       // 6124
    if (credentials.sessionToken) {                                                                                    // 6125
      r.params.SecurityToken = credentials.sessionToken;                                                               // 6126
    }                                                                                                                  // 6127
                                                                                                                       // 6128
    delete r.params.Signature; // delete old Signature for re-signing                                                  // 6129
    r.params.Signature = this.signature(credentials);                                                                  // 6130
                                                                                                                       // 6131
    r.body = AWS.util.queryParamsToString(r.params);                                                                   // 6132
    r.headers['Content-Length'] = r.body.length;                                                                       // 6133
  },                                                                                                                   // 6134
                                                                                                                       // 6135
  signature: function signature(credentials) {                                                                         // 6136
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');                           // 6137
  },                                                                                                                   // 6138
                                                                                                                       // 6139
  stringToSign: function stringToSign() {                                                                              // 6140
    var parts = [];                                                                                                    // 6141
    parts.push(this.request.method);                                                                                   // 6142
    parts.push(this.request.endpoint.host.toLowerCase());                                                              // 6143
    parts.push(this.request.pathname());                                                                               // 6144
    parts.push(AWS.util.queryParamsToString(this.request.params));                                                     // 6145
    return parts.join('\n');                                                                                           // 6146
  }                                                                                                                    // 6147
                                                                                                                       // 6148
});                                                                                                                    // 6149
                                                                                                                       // 6150
module.exports = AWS.Signers.V2;                                                                                       // 6151
                                                                                                                       // 6152
},{"../core":4}],55:[function(require,module,exports){                                                                 // 6153
var AWS = require('../core');                                                                                          // 6154
var inherit = AWS.util.inherit;                                                                                        // 6155
                                                                                                                       // 6156
                                                                                                                       // 6157
AWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {                                                                  // 6158
  addAuthorization: function addAuthorization(credentials, date) {                                                     // 6159
                                                                                                                       // 6160
    var datetime = AWS.util.date.rfc822(date);                                                                         // 6161
                                                                                                                       // 6162
    this.request.headers['X-Amz-Date'] = datetime;                                                                     // 6163
                                                                                                                       // 6164
    if (credentials.sessionToken) {                                                                                    // 6165
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;                                         // 6166
    }                                                                                                                  // 6167
                                                                                                                       // 6168
    this.request.headers['X-Amzn-Authorization'] =                                                                     // 6169
      this.authorization(credentials, datetime);                                                                       // 6170
                                                                                                                       // 6171
  },                                                                                                                   // 6172
                                                                                                                       // 6173
  authorization: function authorization(credentials) {                                                                 // 6174
    return 'AWS3 ' +                                                                                                   // 6175
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +                                                              // 6176
      'Algorithm=HmacSHA256,' +                                                                                        // 6177
      'SignedHeaders=' + this.signedHeaders() + ',' +                                                                  // 6178
      'Signature=' + this.signature(credentials);                                                                      // 6179
  },                                                                                                                   // 6180
                                                                                                                       // 6181
  signedHeaders: function signedHeaders() {                                                                            // 6182
    var headers = [];                                                                                                  // 6183
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {                                                    // 6184
      headers.push(h.toLowerCase());                                                                                   // 6185
    });                                                                                                                // 6186
    return headers.sort().join(';');                                                                                   // 6187
  },                                                                                                                   // 6188
                                                                                                                       // 6189
  canonicalHeaders: function canonicalHeaders() {                                                                      // 6190
    var headers = this.request.headers;                                                                                // 6191
    var parts = [];                                                                                                    // 6192
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {                                                    // 6193
      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());                                            // 6194
    });                                                                                                                // 6195
    return parts.sort().join('\n') + '\n';                                                                             // 6196
  },                                                                                                                   // 6197
                                                                                                                       // 6198
  headersToSign: function headersToSign() {                                                                            // 6199
    var headers = [];                                                                                                  // 6200
    AWS.util.each(this.request.headers, function iterator(k) {                                                         // 6201
      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {                                            // 6202
        headers.push(k);                                                                                               // 6203
      }                                                                                                                // 6204
    });                                                                                                                // 6205
    return headers;                                                                                                    // 6206
  },                                                                                                                   // 6207
                                                                                                                       // 6208
  signature: function signature(credentials) {                                                                         // 6209
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');                           // 6210
  },                                                                                                                   // 6211
                                                                                                                       // 6212
  stringToSign: function stringToSign() {                                                                              // 6213
    var parts = [];                                                                                                    // 6214
    parts.push(this.request.method);                                                                                   // 6215
    parts.push('/');                                                                                                   // 6216
    parts.push('');                                                                                                    // 6217
    parts.push(this.canonicalHeaders());                                                                               // 6218
    parts.push(this.request.body);                                                                                     // 6219
    return AWS.util.crypto.sha256(parts.join('\n'));                                                                   // 6220
  }                                                                                                                    // 6221
                                                                                                                       // 6222
});                                                                                                                    // 6223
                                                                                                                       // 6224
module.exports = AWS.Signers.V3;                                                                                       // 6225
                                                                                                                       // 6226
},{"../core":4}],56:[function(require,module,exports){                                                                 // 6227
var AWS = require('../core');                                                                                          // 6228
var inherit = AWS.util.inherit;                                                                                        // 6229
                                                                                                                       // 6230
require('./v3');                                                                                                       // 6231
                                                                                                                       // 6232
                                                                                                                       // 6233
AWS.Signers.V3Https = inherit(AWS.Signers.V3, {                                                                        // 6234
  authorization: function authorization(credentials) {                                                                 // 6235
    return 'AWS3-HTTPS ' +                                                                                             // 6236
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +                                                              // 6237
      'Algorithm=HmacSHA256,' +                                                                                        // 6238
      'Signature=' + this.signature(credentials);                                                                      // 6239
  },                                                                                                                   // 6240
                                                                                                                       // 6241
  stringToSign: function stringToSign() {                                                                              // 6242
    return this.request.headers['X-Amz-Date'];                                                                         // 6243
  }                                                                                                                    // 6244
});                                                                                                                    // 6245
                                                                                                                       // 6246
module.exports = AWS.Signers.V3Https;                                                                                  // 6247
                                                                                                                       // 6248
},{"../core":4,"./v3":55}],57:[function(require,module,exports){                                                       // 6249
var AWS = require('../core');                                                                                          // 6250
var inherit = AWS.util.inherit;                                                                                        // 6251
                                                                                                                       // 6252
                                                                                                                       // 6253
var cachedSecret = {};                                                                                                 // 6254
                                                                                                                       // 6255
                                                                                                                       // 6256
var expiresHeader = 'presigned-expires';                                                                               // 6257
                                                                                                                       // 6258
                                                                                                                       // 6259
AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {                                                                  // 6260
  constructor: function V4(request, serviceName, signatureCache) {                                                     // 6261
    AWS.Signers.RequestSigner.call(this, request);                                                                     // 6262
    this.serviceName = serviceName;                                                                                    // 6263
    this.signatureCache = signatureCache;                                                                              // 6264
  },                                                                                                                   // 6265
                                                                                                                       // 6266
  algorithm: 'AWS4-HMAC-SHA256',                                                                                       // 6267
                                                                                                                       // 6268
  addAuthorization: function addAuthorization(credentials, date) {                                                     // 6269
    var datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, '');                                          // 6270
                                                                                                                       // 6271
    if (this.isPresigned()) {                                                                                          // 6272
      this.updateForPresigned(credentials, datetime);                                                                  // 6273
    } else {                                                                                                           // 6274
      this.addHeaders(credentials, datetime);                                                                          // 6275
    }                                                                                                                  // 6276
                                                                                                                       // 6277
    this.request.headers['Authorization'] =                                                                            // 6278
      this.authorization(credentials, datetime);                                                                       // 6279
  },                                                                                                                   // 6280
                                                                                                                       // 6281
  addHeaders: function addHeaders(credentials, datetime) {                                                             // 6282
    this.request.headers['X-Amz-Date'] = datetime;                                                                     // 6283
    if (credentials.sessionToken) {                                                                                    // 6284
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;                                         // 6285
    }                                                                                                                  // 6286
  },                                                                                                                   // 6287
                                                                                                                       // 6288
  updateForPresigned: function updateForPresigned(credentials, datetime) {                                             // 6289
    var credString = this.credentialString(datetime);                                                                  // 6290
    var qs = {                                                                                                         // 6291
      'X-Amz-Date': datetime,                                                                                          // 6292
      'X-Amz-Algorithm': this.algorithm,                                                                               // 6293
      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,                                                  // 6294
      'X-Amz-Expires': this.request.headers[expiresHeader],                                                            // 6295
      'X-Amz-SignedHeaders': this.signedHeaders()                                                                      // 6296
    };                                                                                                                 // 6297
                                                                                                                       // 6298
    if (credentials.sessionToken) {                                                                                    // 6299
      qs['X-Amz-Security-Token'] = credentials.sessionToken;                                                           // 6300
    }                                                                                                                  // 6301
                                                                                                                       // 6302
    if (this.request.headers['Content-Type']) {                                                                        // 6303
      qs['Content-Type'] = this.request.headers['Content-Type'];                                                       // 6304
    }                                                                                                                  // 6305
    if (this.request.headers['Content-MD5']) {                                                                         // 6306
      qs['Content-MD5'] = this.request.headers['Content-MD5'];                                                         // 6307
    }                                                                                                                  // 6308
    if (this.request.headers['Cache-Control']) {                                                                       // 6309
      qs['Cache-Control'] = this.request.headers['Cache-Control'];                                                     // 6310
    }                                                                                                                  // 6311
                                                                                                                       // 6312
    AWS.util.each.call(this, this.request.headers, function(key, value) {                                              // 6313
      if (key === expiresHeader) return;                                                                               // 6314
      if (this.isSignableHeader(key) &&                                                                                // 6315
          key.toLowerCase().indexOf('x-amz-') === 0) {                                                                 // 6316
        qs[key] = value;                                                                                               // 6317
      }                                                                                                                // 6318
    });                                                                                                                // 6319
                                                                                                                       // 6320
    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';                                                         // 6321
    this.request.path += sep + AWS.util.queryParamsToString(qs);                                                       // 6322
  },                                                                                                                   // 6323
                                                                                                                       // 6324
  authorization: function authorization(credentials, datetime) {                                                       // 6325
    var parts = [];                                                                                                    // 6326
    var credString = this.credentialString(datetime);                                                                  // 6327
    parts.push(this.algorithm + ' Credential=' +                                                                       // 6328
      credentials.accessKeyId + '/' + credString);                                                                     // 6329
    parts.push('SignedHeaders=' + this.signedHeaders());                                                               // 6330
    parts.push('Signature=' + this.signature(credentials, datetime));                                                  // 6331
    return parts.join(', ');                                                                                           // 6332
  },                                                                                                                   // 6333
                                                                                                                       // 6334
  signature: function signature(credentials, datetime) {                                                               // 6335
    var cache = null;                                                                                                  // 6336
    if (this.signatureCache) {                                                                                         // 6337
      var cache = cachedSecret[this.serviceName];                                                                      // 6338
    }                                                                                                                  // 6339
    var date = datetime.substr(0, 8);                                                                                  // 6340
                                                                                                                       // 6341
    if (!cache ||                                                                                                      // 6342
        cache.akid !== credentials.accessKeyId ||                                                                      // 6343
        cache.region !== this.request.region ||                                                                        // 6344
        cache.date !== date) {                                                                                         // 6345
                                                                                                                       // 6346
      var kSecret = credentials.secretAccessKey;                                                                       // 6347
      var kDate = AWS.util.crypto.hmac('AWS4' + kSecret, date, 'buffer');                                              // 6348
      var kRegion = AWS.util.crypto.hmac(kDate, this.request.region, 'buffer');                                        // 6349
      var kService = AWS.util.crypto.hmac(kRegion, this.serviceName, 'buffer');                                        // 6350
      var kCredentials = AWS.util.crypto.hmac(kService, 'aws4_request', 'buffer');                                     // 6351
                                                                                                                       // 6352
      if (!this.signatureCache) {                                                                                      // 6353
        return AWS.util.crypto.hmac(kCredentials, this.stringToSign(datetime), 'hex');                                 // 6354
      }                                                                                                                // 6355
                                                                                                                       // 6356
      cachedSecret[this.serviceName] = {                                                                               // 6357
        region: this.request.region, date: date,                                                                       // 6358
        key: kCredentials, akid: credentials.accessKeyId                                                               // 6359
      };                                                                                                               // 6360
    }                                                                                                                  // 6361
                                                                                                                       // 6362
    var key = cachedSecret[this.serviceName].key;                                                                      // 6363
    return AWS.util.crypto.hmac(key, this.stringToSign(datetime), 'hex');                                              // 6364
  },                                                                                                                   // 6365
                                                                                                                       // 6366
  stringToSign: function stringToSign(datetime) {                                                                      // 6367
    var parts = [];                                                                                                    // 6368
    parts.push('AWS4-HMAC-SHA256');                                                                                    // 6369
    parts.push(datetime);                                                                                              // 6370
    parts.push(this.credentialString(datetime));                                                                       // 6371
    parts.push(this.hexEncodedHash(this.canonicalString()));                                                           // 6372
    return parts.join('\n');                                                                                           // 6373
  },                                                                                                                   // 6374
                                                                                                                       // 6375
  canonicalString: function canonicalString() {                                                                        // 6376
    var parts = [], pathname = this.request.pathname();                                                                // 6377
    if (this.serviceName !== 's3') pathname = AWS.util.uriEscapePath(pathname);                                        // 6378
                                                                                                                       // 6379
    parts.push(this.request.method);                                                                                   // 6380
    parts.push(pathname);                                                                                              // 6381
    parts.push(this.request.search());                                                                                 // 6382
    parts.push(this.canonicalHeaders() + '\n');                                                                        // 6383
    parts.push(this.signedHeaders());                                                                                  // 6384
    parts.push(this.hexEncodedBodyHash());                                                                             // 6385
    return parts.join('\n');                                                                                           // 6386
  },                                                                                                                   // 6387
                                                                                                                       // 6388
  canonicalHeaders: function canonicalHeaders() {                                                                      // 6389
    var headers = [];                                                                                                  // 6390
    AWS.util.each.call(this, this.request.headers, function (key, item) {                                              // 6391
      headers.push([key, item]);                                                                                       // 6392
    });                                                                                                                // 6393
    headers.sort(function (a, b) {                                                                                     // 6394
      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;                                                         // 6395
    });                                                                                                                // 6396
    var parts = [];                                                                                                    // 6397
    AWS.util.arrayEach.call(this, headers, function (item) {                                                           // 6398
      var key = item[0].toLowerCase();                                                                                 // 6399
      if (this.isSignableHeader(key)) {                                                                                // 6400
        parts.push(key + ':' +                                                                                         // 6401
          this.canonicalHeaderValues(item[1].toString()));                                                             // 6402
      }                                                                                                                // 6403
    });                                                                                                                // 6404
    return parts.join('\n');                                                                                           // 6405
  },                                                                                                                   // 6406
                                                                                                                       // 6407
  canonicalHeaderValues: function canonicalHeaderValues(values) {                                                      // 6408
    return values.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');                                                      // 6409
  },                                                                                                                   // 6410
                                                                                                                       // 6411
  signedHeaders: function signedHeaders() {                                                                            // 6412
    var keys = [];                                                                                                     // 6413
    AWS.util.each.call(this, this.request.headers, function (key) {                                                    // 6414
      key = key.toLowerCase();                                                                                         // 6415
      if (this.isSignableHeader(key)) keys.push(key);                                                                  // 6416
    });                                                                                                                // 6417
    return keys.sort().join(';');                                                                                      // 6418
  },                                                                                                                   // 6419
                                                                                                                       // 6420
  credentialString: function credentialString(datetime) {                                                              // 6421
    var parts = [];                                                                                                    // 6422
    parts.push(datetime.substr(0, 8));                                                                                 // 6423
    parts.push(this.request.region);                                                                                   // 6424
    parts.push(this.serviceName);                                                                                      // 6425
    parts.push('aws4_request');                                                                                        // 6426
    return parts.join('/');                                                                                            // 6427
  },                                                                                                                   // 6428
                                                                                                                       // 6429
  hexEncodedHash: function hash(string) {                                                                              // 6430
    return AWS.util.crypto.sha256(string, 'hex');                                                                      // 6431
  },                                                                                                                   // 6432
                                                                                                                       // 6433
  hexEncodedBodyHash: function hexEncodedBodyHash() {                                                                  // 6434
    if (this.isPresigned() && this.serviceName === 's3') {                                                             // 6435
      return 'UNSIGNED-PAYLOAD';                                                                                       // 6436
    } else if (this.request.headers['X-Amz-Content-Sha256']) {                                                         // 6437
      return this.request.headers['X-Amz-Content-Sha256'];                                                             // 6438
    } else {                                                                                                           // 6439
      return this.hexEncodedHash(this.request.body || '');                                                             // 6440
    }                                                                                                                  // 6441
  },                                                                                                                   // 6442
                                                                                                                       // 6443
  unsignableHeaders: ['authorization', 'content-type', 'content-length',                                               // 6444
                      'user-agent', expiresHeader],                                                                    // 6445
                                                                                                                       // 6446
  isSignableHeader: function isSignableHeader(key) {                                                                   // 6447
    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;                                                        // 6448
    return this.unsignableHeaders.indexOf(key) < 0;                                                                    // 6449
  },                                                                                                                   // 6450
                                                                                                                       // 6451
  isPresigned: function isPresigned() {                                                                                // 6452
    return this.request.headers[expiresHeader] ? true : false;                                                         // 6453
  }                                                                                                                    // 6454
                                                                                                                       // 6455
});                                                                                                                    // 6456
                                                                                                                       // 6457
module.exports = AWS.Signers.V4;                                                                                       // 6458
                                                                                                                       // 6459
},{"../core":4}],58:[function(require,module,exports){                                                                 // 6460
function AcceptorStateMachine(states, state) {                                                                         // 6461
  this.currentState = state || null;                                                                                   // 6462
  this.states = states || {};                                                                                          // 6463
}                                                                                                                      // 6464
                                                                                                                       // 6465
AcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {                      // 6466
  if (typeof finalState === 'function') {                                                                              // 6467
    inputError = bindObject; bindObject = done;                                                                        // 6468
    done = finalState; finalState = null;                                                                              // 6469
  }                                                                                                                    // 6470
                                                                                                                       // 6471
  var self = this;                                                                                                     // 6472
  var state = self.states[self.currentState];                                                                          // 6473
  state.fn.call(bindObject || self, inputError, function(err) {                                                        // 6474
    if (err) {                                                                                                         // 6475
      if (state.fail) self.currentState = state.fail;                                                                  // 6476
      else return done ? done.call(bindObject, err) : null;                                                            // 6477
    } else {                                                                                                           // 6478
      if (state.accept) self.currentState = state.accept;                                                              // 6479
      else return done ? done.call(bindObject) : null;                                                                 // 6480
    }                                                                                                                  // 6481
    if (self.currentState === finalState) {                                                                            // 6482
      return done ? done.call(bindObject, err) : null;                                                                 // 6483
    }                                                                                                                  // 6484
                                                                                                                       // 6485
    self.runTo(finalState, done, bindObject, err);                                                                     // 6486
  });                                                                                                                  // 6487
};                                                                                                                     // 6488
                                                                                                                       // 6489
AcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {                        // 6490
  if (typeof acceptState === 'function') {                                                                             // 6491
    fn = acceptState; acceptState = null; failState = null;                                                            // 6492
  } else if (typeof failState === 'function') {                                                                        // 6493
    fn = failState; failState = null;                                                                                  // 6494
  }                                                                                                                    // 6495
                                                                                                                       // 6496
  if (!this.currentState) this.currentState = name;                                                                    // 6497
  this.states[name] = { accept: acceptState, fail: failState, fn: fn };                                                // 6498
  return this;                                                                                                         // 6499
};                                                                                                                     // 6500
                                                                                                                       // 6501
module.exports = AcceptorStateMachine;                                                                                 // 6502
                                                                                                                       // 6503
},{}],59:[function(require,module,exports){                                                                            // 6504
(function (process){                                                                                                   // 6505
                                                                                                                       // 6506
                                                                                                                       // 6507
var cryptoLib = require('crypto');                                                                                     // 6508
var Buffer = require('buffer').Buffer;                                                                                 // 6509
var AWS;                                                                                                               // 6510
                                                                                                                       // 6511
                                                                                                                       // 6512
var util = {                                                                                                           // 6513
  engine: function engine() {                                                                                          // 6514
    if (util.isBrowser() && typeof navigator !== 'undefined') {                                                        // 6515
      return navigator.userAgent;                                                                                      // 6516
    } else {                                                                                                           // 6517
      return process.platform + '/' + process.version;                                                                 // 6518
    }                                                                                                                  // 6519
  },                                                                                                                   // 6520
                                                                                                                       // 6521
  userAgent: function userAgent() {                                                                                    // 6522
    var name = util.isBrowser() ? 'js' : 'nodejs';                                                                     // 6523
    var agent = 'aws-sdk-' + name + '/' + require('./core').VERSION;                                                   // 6524
    if (name === 'nodejs') agent += ' ' + util.engine();                                                               // 6525
    return agent;                                                                                                      // 6526
  },                                                                                                                   // 6527
                                                                                                                       // 6528
  isBrowser: function isBrowser() { return process && process.browser; },                                              // 6529
  isNode: function isNode() { return !util.isBrowser(); },                                                             // 6530
  nodeRequire: function nodeRequire(module) {                                                                          // 6531
    if (util.isNode()) return require(module);                                                                         // 6532
  },                                                                                                                   // 6533
  multiRequire: function multiRequire(module1, module2) {                                                              // 6534
    return require(util.isNode() ? module1 : module2);                                                                 // 6535
  },                                                                                                                   // 6536
                                                                                                                       // 6537
  uriEscape: function uriEscape(string) {                                                                              // 6538
    var output = encodeURIComponent(string);                                                                           // 6539
    output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);                                                           // 6540
                                                                                                                       // 6541
    output = output.replace(/[*]/g, function(ch) {                                                                     // 6542
      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();                                                        // 6543
    });                                                                                                                // 6544
                                                                                                                       // 6545
    return output;                                                                                                     // 6546
  },                                                                                                                   // 6547
                                                                                                                       // 6548
  uriEscapePath: function uriEscapePath(string) {                                                                      // 6549
    var parts = [];                                                                                                    // 6550
    util.arrayEach(string.split('/'), function (part) {                                                                // 6551
      parts.push(util.uriEscape(part));                                                                                // 6552
    });                                                                                                                // 6553
    return parts.join('/');                                                                                            // 6554
  },                                                                                                                   // 6555
                                                                                                                       // 6556
  urlParse: function urlParse(url) {                                                                                   // 6557
    return require('url').parse(url);                                                                                  // 6558
  },                                                                                                                   // 6559
                                                                                                                       // 6560
  urlFormat: function urlFormat(url) {                                                                                 // 6561
    return require('url').format(url);                                                                                 // 6562
  },                                                                                                                   // 6563
                                                                                                                       // 6564
  queryStringParse: function queryStringParse(qs) {                                                                    // 6565
    return require('querystring').parse(qs);                                                                           // 6566
  },                                                                                                                   // 6567
                                                                                                                       // 6568
  queryParamsToString: function queryParamsToString(params) {                                                          // 6569
    var items = [];                                                                                                    // 6570
    var escape = util.uriEscape;                                                                                       // 6571
    var sortedKeys = Object.keys(params).sort();                                                                       // 6572
                                                                                                                       // 6573
    util.arrayEach(sortedKeys, function(name) {                                                                        // 6574
      var value = params[name];                                                                                        // 6575
      var ename = escape(name);                                                                                        // 6576
      var result = ename + '=';                                                                                        // 6577
      if (Array.isArray(value)) {                                                                                      // 6578
        var vals = [];                                                                                                 // 6579
        util.arrayEach(value, function(item) { vals.push(escape(item)); });                                            // 6580
        result = ename + '=' + vals.sort().join('&' + ename + '=');                                                    // 6581
      } else if (value !== undefined && value !== null) {                                                              // 6582
        result = ename + '=' + escape(value);                                                                          // 6583
      }                                                                                                                // 6584
      items.push(result);                                                                                              // 6585
    });                                                                                                                // 6586
                                                                                                                       // 6587
    return items.join('&');                                                                                            // 6588
  },                                                                                                                   // 6589
                                                                                                                       // 6590
  readFileSync: function readFileSync(path) {                                                                          // 6591
    if (typeof window !== 'undefined') return null;                                                                    // 6592
    return util.nodeRequire('fs').readFileSync(path, 'utf-8');                                                         // 6593
  },                                                                                                                   // 6594
                                                                                                                       // 6595
  base64: {                                                                                                            // 6596
                                                                                                                       // 6597
    encode: function encode64(string) {                                                                                // 6598
      return new Buffer(string).toString('base64');                                                                    // 6599
    },                                                                                                                 // 6600
                                                                                                                       // 6601
    decode: function decode64(string) {                                                                                // 6602
      return new Buffer(string, 'base64');                                                                             // 6603
    }                                                                                                                  // 6604
                                                                                                                       // 6605
  },                                                                                                                   // 6606
                                                                                                                       // 6607
  Buffer: Buffer,                                                                                                      // 6608
                                                                                                                       // 6609
  buffer: {                                                                                                            // 6610
    toStream: function toStream(buffer) {                                                                              // 6611
      if (!util.Buffer.isBuffer(buffer)) buffer = new util.Buffer(buffer);                                             // 6612
                                                                                                                       // 6613
      var readable = new (util.nodeRequire('stream').Readable)();                                                      // 6614
      var pos = 0;                                                                                                     // 6615
      readable._read = function(size) {                                                                                // 6616
        if (pos >= buffer.length) return readable.push(null);                                                          // 6617
                                                                                                                       // 6618
        var end = pos + size;                                                                                          // 6619
        if (end > buffer.length) end = buffer.length;                                                                  // 6620
        readable.push(buffer.slice(pos, end));                                                                         // 6621
        pos = end;                                                                                                     // 6622
      };                                                                                                               // 6623
                                                                                                                       // 6624
      return readable;                                                                                                 // 6625
    },                                                                                                                 // 6626
                                                                                                                       // 6627
                                                                                                                       // 6628
    concat: function(buffers) {                                                                                        // 6629
      var length = 0,                                                                                                  // 6630
          offset = 0,                                                                                                  // 6631
          buffer = null, i;                                                                                            // 6632
                                                                                                                       // 6633
      for (i = 0; i < buffers.length; i++) {                                                                           // 6634
        length += buffers[i].length;                                                                                   // 6635
      }                                                                                                                // 6636
                                                                                                                       // 6637
      buffer = new Buffer(length);                                                                                     // 6638
                                                                                                                       // 6639
      for (i = 0; i < buffers.length; i++) {                                                                           // 6640
        buffers[i].copy(buffer, offset);                                                                               // 6641
        offset += buffers[i].length;                                                                                   // 6642
      }                                                                                                                // 6643
                                                                                                                       // 6644
      return buffer;                                                                                                   // 6645
    }                                                                                                                  // 6646
  },                                                                                                                   // 6647
                                                                                                                       // 6648
  string: {                                                                                                            // 6649
    byteLength: function byteLength(string) {                                                                          // 6650
      if (string === null || string === undefined) return 0;                                                           // 6651
      if (typeof string === 'string') string = new Buffer(string);                                                     // 6652
                                                                                                                       // 6653
      if (typeof string.byteLength === 'number') {                                                                     // 6654
        return string.byteLength;                                                                                      // 6655
      } else if (typeof string.length === 'number') {                                                                  // 6656
        return string.length;                                                                                          // 6657
      } else if (typeof string.size === 'number') {                                                                    // 6658
        return string.size;                                                                                            // 6659
      } else if (typeof string.path === 'string') {                                                                    // 6660
        return util.nodeRequire('fs').lstatSync(string.path).size;                                                     // 6661
      } else {                                                                                                         // 6662
        throw util.error(new Error('Cannot determine length of ' + string),                                            // 6663
          { object: string });                                                                                         // 6664
      }                                                                                                                // 6665
    },                                                                                                                 // 6666
                                                                                                                       // 6667
    upperFirst: function upperFirst(string) {                                                                          // 6668
      return string[0].toUpperCase() + string.substr(1);                                                               // 6669
    },                                                                                                                 // 6670
                                                                                                                       // 6671
    lowerFirst: function lowerFirst(string) {                                                                          // 6672
      return string[0].toLowerCase() + string.substr(1);                                                               // 6673
    }                                                                                                                  // 6674
  },                                                                                                                   // 6675
                                                                                                                       // 6676
  ini: {                                                                                                               // 6677
    parse: function string(ini) {                                                                                      // 6678
      var currentSection, map = {};                                                                                    // 6679
      util.arrayEach(ini.split(/\r?\n/), function(line) {                                                              // 6680
        line = line.split(/(^|\s);/)[0]; // remove comments                                                            // 6681
        var section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);                                                            // 6682
        if (section) {                                                                                                 // 6683
          currentSection = section[1];                                                                                 // 6684
        } else if (currentSection) {                                                                                   // 6685
          var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);                                                          // 6686
          if (item) {                                                                                                  // 6687
            map[currentSection] = map[currentSection] || {};                                                           // 6688
            map[currentSection][item[1]] = item[2];                                                                    // 6689
          }                                                                                                            // 6690
        }                                                                                                              // 6691
      });                                                                                                              // 6692
                                                                                                                       // 6693
      return map;                                                                                                      // 6694
    }                                                                                                                  // 6695
  },                                                                                                                   // 6696
                                                                                                                       // 6697
  fn: {                                                                                                                // 6698
    noop: function() {},                                                                                               // 6699
                                                                                                                       // 6700
                                                                                                                       // 6701
    makeAsync: function makeAsync(fn, expectedArgs) {                                                                  // 6702
      if (expectedArgs && expectedArgs <= fn.length) {                                                                 // 6703
        return fn;                                                                                                     // 6704
      }                                                                                                                // 6705
                                                                                                                       // 6706
      return function() {                                                                                              // 6707
        var args = Array.prototype.slice.call(arguments, 0);                                                           // 6708
        var callback = args.pop();                                                                                     // 6709
        var result = fn.apply(null, args);                                                                             // 6710
        callback(result);                                                                                              // 6711
      };                                                                                                               // 6712
    }                                                                                                                  // 6713
  },                                                                                                                   // 6714
                                                                                                                       // 6715
  jamespath: {                                                                                                         // 6716
    query: function query(expression, data) {                                                                          // 6717
      if (!data) return [];                                                                                            // 6718
                                                                                                                       // 6719
      var results = [];                                                                                                // 6720
      var expressions = expression.split(/\s+\|\|\s+/);                                                                // 6721
      util.arrayEach.call(this, expressions, function (expr) {                                                         // 6722
        var objects = [data];                                                                                          // 6723
        var tokens = expr.split('.');                                                                                  // 6724
        util.arrayEach.call(this, tokens, function (token) {                                                           // 6725
          var match = token.match('^(.+?)(?:\\[(-?\\d+|\\*|)\\])?$');                                                  // 6726
          var newObjects = [];                                                                                         // 6727
          util.arrayEach.call(this, objects, function (obj) {                                                          // 6728
            if (match[1] === '*') {                                                                                    // 6729
              util.arrayEach.call(this, obj, function (value) {                                                        // 6730
                newObjects.push(value);                                                                                // 6731
              });                                                                                                      // 6732
            } else if (obj.hasOwnProperty(match[1])) {                                                                 // 6733
              newObjects.push(obj[match[1]]);                                                                          // 6734
            }                                                                                                          // 6735
          });                                                                                                          // 6736
          objects = newObjects;                                                                                        // 6737
                                                                                                                       // 6738
          if (match[2] !== undefined) {                                                                                // 6739
            newObjects = [];                                                                                           // 6740
            util.arrayEach.call(this, objects, function (obj) {                                                        // 6741
              if (Array.isArray(obj)) {                                                                                // 6742
                if (match[2] === '*' || match[2] === '') {                                                             // 6743
                  newObjects = newObjects.concat(obj);                                                                 // 6744
                } else {                                                                                               // 6745
                  var idx = parseInt(match[2], 10);                                                                    // 6746
                  if (idx < 0) idx = obj.length + idx; // negative indexing                                            // 6747
                  newObjects.push(obj[idx]);                                                                           // 6748
                }                                                                                                      // 6749
              }                                                                                                        // 6750
            });                                                                                                        // 6751
            objects = newObjects;                                                                                      // 6752
          }                                                                                                            // 6753
                                                                                                                       // 6754
          if (objects.length === 0) return util.abort;                                                                 // 6755
        });                                                                                                            // 6756
                                                                                                                       // 6757
        if (objects.length > 0) {                                                                                      // 6758
          results = objects;                                                                                           // 6759
          return util.abort;                                                                                           // 6760
        }                                                                                                              // 6761
      });                                                                                                              // 6762
                                                                                                                       // 6763
      return results;                                                                                                  // 6764
    },                                                                                                                 // 6765
                                                                                                                       // 6766
    find: function find(expression, data) {                                                                            // 6767
      return util.jamespath.query(expression, data)[0];                                                                // 6768
    }                                                                                                                  // 6769
  },                                                                                                                   // 6770
                                                                                                                       // 6771
                                                                                                                       // 6772
  date: {                                                                                                              // 6773
                                                                                                                       // 6774
                                                                                                                       // 6775
    getDate: function getDate() {                                                                                      // 6776
      if (!AWS) AWS = require('./core');                                                                               // 6777
      if (AWS.config.systemClockOffset) { // use offset when non-zero                                                  // 6778
        return new Date(new Date().getTime() + AWS.config.systemClockOffset);                                          // 6779
      } else {                                                                                                         // 6780
        return new Date();                                                                                             // 6781
      }                                                                                                                // 6782
    },                                                                                                                 // 6783
                                                                                                                       // 6784
                                                                                                                       // 6785
    iso8601: function iso8601(date) {                                                                                  // 6786
      if (date === undefined) { date = util.date.getDate(); }                                                          // 6787
      return date.toISOString().replace(/\.\d{3}Z$/, 'Z');                                                             // 6788
    },                                                                                                                 // 6789
                                                                                                                       // 6790
                                                                                                                       // 6791
    rfc822: function rfc822(date) {                                                                                    // 6792
      if (date === undefined) { date = util.date.getDate(); }                                                          // 6793
      return date.toUTCString();                                                                                       // 6794
    },                                                                                                                 // 6795
                                                                                                                       // 6796
                                                                                                                       // 6797
    unixTimestamp: function unixTimestamp(date) {                                                                      // 6798
      if (date === undefined) { date = util.date.getDate(); }                                                          // 6799
      return date.getTime() / 1000;                                                                                    // 6800
    },                                                                                                                 // 6801
                                                                                                                       // 6802
                                                                                                                       // 6803
    from: function format(date) {                                                                                      // 6804
      if (typeof date === 'number') {                                                                                  // 6805
        return new Date(date * 1000); // unix timestamp                                                                // 6806
      } else {                                                                                                         // 6807
        return new Date(date);                                                                                         // 6808
      }                                                                                                                // 6809
    },                                                                                                                 // 6810
                                                                                                                       // 6811
                                                                                                                       // 6812
    format: function format(date, formatter) {                                                                         // 6813
      if (!formatter) formatter = 'iso8601';                                                                           // 6814
      return util.date[formatter](util.date.from(date));                                                               // 6815
    },                                                                                                                 // 6816
                                                                                                                       // 6817
    parseTimestamp: function parseTimestamp(value) {                                                                   // 6818
      if (typeof value === 'number') { // unix timestamp (number)                                                      // 6819
        return new Date(value * 1000);                                                                                 // 6820
      } else if (value.match(/^\d+$/)) { // unix timestamp                                                             // 6821
        return new Date(value * 1000);                                                                                 // 6822
      } else if (value.match(/^\d{4}/)) { // iso8601                                                                   // 6823
        return new Date(value);                                                                                        // 6824
      } else if (value.match(/^\w{3},/)) { // rfc822                                                                   // 6825
        return new Date(value);                                                                                        // 6826
      } else {                                                                                                         // 6827
        throw util.error(                                                                                              // 6828
          new Error('unhandled timestamp format: ' + value),                                                           // 6829
          {code: 'TimestampParserError'});                                                                             // 6830
      }                                                                                                                // 6831
    }                                                                                                                  // 6832
                                                                                                                       // 6833
  },                                                                                                                   // 6834
                                                                                                                       // 6835
  crypto: {                                                                                                            // 6836
    crc32Table: [                                                                                                      // 6837
     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,                                                       // 6838
     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,                                                       // 6839
     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,                                                       // 6840
     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,                                                       // 6841
     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,                                                       // 6842
     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,                                                       // 6843
     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,                                                       // 6844
     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,                                                       // 6845
     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,                                                       // 6846
     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,                                                       // 6847
     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,                                                       // 6848
     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,                                                       // 6849
     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,                                                       // 6850
     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,                                                       // 6851
     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,                                                       // 6852
     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,                                                       // 6853
     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,                                                       // 6854
     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,                                                       // 6855
     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,                                                       // 6856
     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,                                                       // 6857
     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,                                                       // 6858
     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,                                                       // 6859
     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,                                                       // 6860
     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,                                                       // 6861
     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,                                                       // 6862
     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,                                                       // 6863
     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,                                                       // 6864
     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,                                                       // 6865
     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,                                                       // 6866
     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,                                                       // 6867
     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,                                                       // 6868
     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,                                                       // 6869
     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,                                                       // 6870
     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,                                                       // 6871
     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,                                                       // 6872
     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,                                                       // 6873
     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,                                                       // 6874
     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,                                                       // 6875
     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,                                                       // 6876
     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,                                                       // 6877
     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,                                                       // 6878
     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,                                                       // 6879
     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,                                                       // 6880
     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,                                                       // 6881
     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,                                                       // 6882
     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,                                                       // 6883
     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,                                                       // 6884
     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,                                                       // 6885
     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,                                                       // 6886
     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,                                                       // 6887
     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,                                                       // 6888
     0x2D02EF8D],                                                                                                      // 6889
                                                                                                                       // 6890
    crc32: function crc32(data) {                                                                                      // 6891
      var tbl = util.crypto.crc32Table;                                                                                // 6892
      var crc = 0 ^ -1;                                                                                                // 6893
                                                                                                                       // 6894
      if (typeof data === 'string') {                                                                                  // 6895
        data = new Buffer(data);                                                                                       // 6896
      }                                                                                                                // 6897
                                                                                                                       // 6898
      for (var i = 0; i < data.length; i++) {                                                                          // 6899
        var code = data.readUInt8(i);                                                                                  // 6900
        crc = (crc >>> 8) ^ tbl[(crc ^ code) & 0xFF];                                                                  // 6901
      }                                                                                                                // 6902
      return (crc ^ -1) >>> 0;                                                                                         // 6903
    },                                                                                                                 // 6904
                                                                                                                       // 6905
    hmac: function hmac(key, string, digest, fn) {                                                                     // 6906
      if (!digest) digest = 'binary';                                                                                  // 6907
      if (digest === 'buffer') { digest = undefined; }                                                                 // 6908
      if (!fn) fn = 'sha256';                                                                                          // 6909
      if (typeof string === 'string') string = new Buffer(string);                                                     // 6910
      return cryptoLib.createHmac(fn, key).update(string).digest(digest);                                              // 6911
    },                                                                                                                 // 6912
                                                                                                                       // 6913
    md5: function md5(data, digest, callback) {                                                                        // 6914
      return util.crypto.hash('md5', data, digest, callback);                                                          // 6915
    },                                                                                                                 // 6916
                                                                                                                       // 6917
    sha256: function sha256(data, digest, callback) {                                                                  // 6918
      return util.crypto.hash('sha256', data, digest, callback);                                                       // 6919
    },                                                                                                                 // 6920
                                                                                                                       // 6921
    hash: function(algorithm, data, digest, callback) {                                                                // 6922
      var hash = util.crypto.createHash(algorithm);                                                                    // 6923
      if (!digest) { digest = 'binary'; }                                                                              // 6924
      if (digest === 'buffer') { digest = undefined; }                                                                 // 6925
      if (typeof data === 'string') data = new Buffer(data);                                                           // 6926
      var sliceFn = util.arraySliceFn(data);                                                                           // 6927
      var isBuffer = Buffer.isBuffer(data);                                                                            // 6928
      if (util.isBrowser() && typeof ArrayBuffer !== 'undefined' && data && data.buffer instanceof ArrayBuffer) isBuffer = true;
                                                                                                                       // 6930
      if (callback && typeof data === 'object' &&                                                                      // 6931
          typeof data.on === 'function' && !isBuffer) {                                                                // 6932
        data.on('data', function(chunk) { hash.update(chunk); });                                                      // 6933
        data.on('error', function(err) { callback(err); });                                                            // 6934
        data.on('end', function() { callback(null, hash.digest(digest)); });                                           // 6935
      } else if (callback && sliceFn && !isBuffer &&                                                                   // 6936
                 typeof FileReader !== 'undefined') {                                                                  // 6937
        var index = 0, size = 1024 * 512;                                                                              // 6938
        var reader = new FileReader();                                                                                 // 6939
        reader.onerror = function() {                                                                                  // 6940
          callback(new Error('Failed to read data.'));                                                                 // 6941
        };                                                                                                             // 6942
        reader.onload = function() {                                                                                   // 6943
          var buf = new Buffer(new Uint8Array(reader.result));                                                         // 6944
          hash.update(buf);                                                                                            // 6945
          index += buf.length;                                                                                         // 6946
          reader._continueReading();                                                                                   // 6947
        };                                                                                                             // 6948
        reader._continueReading = function() {                                                                         // 6949
          if (index >= data.size) {                                                                                    // 6950
            callback(null, hash.digest(digest));                                                                       // 6951
            return;                                                                                                    // 6952
          }                                                                                                            // 6953
                                                                                                                       // 6954
          var back = index + size;                                                                                     // 6955
          if (back > data.size) back = data.size;                                                                      // 6956
          reader.readAsArrayBuffer(sliceFn.call(data, index, back));                                                   // 6957
        };                                                                                                             // 6958
                                                                                                                       // 6959
        reader._continueReading();                                                                                     // 6960
      } else {                                                                                                         // 6961
        if (util.isBrowser() && typeof data === 'object' && !isBuffer) {                                               // 6962
          data = new Buffer(new Uint8Array(data));                                                                     // 6963
        }                                                                                                              // 6964
        var out = hash.update(data).digest(digest);                                                                    // 6965
        if (callback) callback(null, out);                                                                             // 6966
        return out;                                                                                                    // 6967
      }                                                                                                                // 6968
    },                                                                                                                 // 6969
                                                                                                                       // 6970
    toHex: function toHex(data) {                                                                                      // 6971
      var out = [];                                                                                                    // 6972
      for (var i = 0; i < data.length; i++) {                                                                          // 6973
        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));                                               // 6974
      }                                                                                                                // 6975
      return out.join('');                                                                                             // 6976
    },                                                                                                                 // 6977
                                                                                                                       // 6978
    createHash: function createHash(algorithm) {                                                                       // 6979
      return cryptoLib.createHash(algorithm);                                                                          // 6980
    }                                                                                                                  // 6981
                                                                                                                       // 6982
  },                                                                                                                   // 6983
                                                                                                                       // 6984
                                                                                                                       // 6985
                                                                                                                       // 6986
                                                                                                                       // 6987
  abort: {},                                                                                                           // 6988
                                                                                                                       // 6989
  each: function each(object, iterFunction) {                                                                          // 6990
    for (var key in object) {                                                                                          // 6991
      if (Object.prototype.hasOwnProperty.call(object, key)) {                                                         // 6992
        var ret = iterFunction.call(this, key, object[key]);                                                           // 6993
        if (ret === util.abort) break;                                                                                 // 6994
      }                                                                                                                // 6995
    }                                                                                                                  // 6996
  },                                                                                                                   // 6997
                                                                                                                       // 6998
  arrayEach: function arrayEach(array, iterFunction) {                                                                 // 6999
    for (var idx in array) {                                                                                           // 7000
      if (array.hasOwnProperty(idx)) {                                                                                 // 7001
        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));                                              // 7002
        if (ret === util.abort) break;                                                                                 // 7003
      }                                                                                                                // 7004
    }                                                                                                                  // 7005
  },                                                                                                                   // 7006
                                                                                                                       // 7007
  update: function update(obj1, obj2) {                                                                                // 7008
    util.each(obj2, function iterator(key, item) {                                                                     // 7009
      obj1[key] = item;                                                                                                // 7010
    });                                                                                                                // 7011
    return obj1;                                                                                                       // 7012
  },                                                                                                                   // 7013
                                                                                                                       // 7014
  merge: function merge(obj1, obj2) {                                                                                  // 7015
    return util.update(util.copy(obj1), obj2);                                                                         // 7016
  },                                                                                                                   // 7017
                                                                                                                       // 7018
  copy: function copy(object) {                                                                                        // 7019
    if (object === null || object === undefined) return object;                                                        // 7020
    var dupe = {};                                                                                                     // 7021
    for (var key in object) {                                                                                          // 7022
      dupe[key] = object[key];                                                                                         // 7023
    }                                                                                                                  // 7024
    return dupe;                                                                                                       // 7025
  },                                                                                                                   // 7026
                                                                                                                       // 7027
  isEmpty: function isEmpty(obj) {                                                                                     // 7028
    for (var prop in obj) {                                                                                            // 7029
      if (obj.hasOwnProperty(prop)) {                                                                                  // 7030
        return false;                                                                                                  // 7031
      }                                                                                                                // 7032
    }                                                                                                                  // 7033
    return true;                                                                                                       // 7034
  },                                                                                                                   // 7035
                                                                                                                       // 7036
  arraySliceFn: function arraySliceFn(obj) {                                                                           // 7037
    var fn = obj.slice || obj.webkitSlice || obj.mozSlice;                                                             // 7038
    return typeof fn === 'function' ? fn : null;                                                                       // 7039
  },                                                                                                                   // 7040
                                                                                                                       // 7041
  isType: function isType(obj, type) {                                                                                 // 7042
    if (typeof type === 'function') type = util.typeName(type);                                                        // 7043
    return Object.prototype.toString.call(obj) === '[object ' + type + ']';                                            // 7044
  },                                                                                                                   // 7045
                                                                                                                       // 7046
  typeName: function typeName(type) {                                                                                  // 7047
    if (type.hasOwnProperty('name')) return type.name;                                                                 // 7048
    var str = type.toString();                                                                                         // 7049
    var match = str.match(/^\s*function (.+)\(/);                                                                      // 7050
    return match ? match[1] : str;                                                                                     // 7051
  },                                                                                                                   // 7052
                                                                                                                       // 7053
  error: function error(err, options) {                                                                                // 7054
    var originalError = null;                                                                                          // 7055
    if (typeof err.message === 'string' && err.message !== '') {                                                       // 7056
      if (typeof options === 'string' || (options && options.message)) {                                               // 7057
        originalError = util.copy(err);                                                                                // 7058
        originalError.message = err.message;                                                                           // 7059
      }                                                                                                                // 7060
    }                                                                                                                  // 7061
    err.message = err.message || null;                                                                                 // 7062
                                                                                                                       // 7063
    if (typeof options === 'string') {                                                                                 // 7064
      err.message = options;                                                                                           // 7065
    } else if (typeof options === 'object' && options !== null) {                                                      // 7066
      util.update(err, options);                                                                                       // 7067
      if (options.message)                                                                                             // 7068
        err.message = options.message;                                                                                 // 7069
      if (options.code || options.name)                                                                                // 7070
        err.code = options.code || options.name;                                                                       // 7071
      if (options.stack)                                                                                               // 7072
        err.stack = options.stack;                                                                                     // 7073
    }                                                                                                                  // 7074
                                                                                                                       // 7075
    if (typeof Object.defineProperty === 'function') {                                                                 // 7076
      Object.defineProperty(err, 'name', {writable: true, enumerable: false});                                         // 7077
      Object.defineProperty(err, 'message', {enumerable: true});                                                       // 7078
    }                                                                                                                  // 7079
                                                                                                                       // 7080
    err.name = options && options.name || err.name || err.code || 'Error';                                             // 7081
    err.time = new Date();                                                                                             // 7082
                                                                                                                       // 7083
    if (originalError) err.originalError = originalError;                                                              // 7084
                                                                                                                       // 7085
    return err;                                                                                                        // 7086
  },                                                                                                                   // 7087
                                                                                                                       // 7088
                                                                                                                       // 7089
  inherit: function inherit(klass, features) {                                                                         // 7090
    var newObject = null;                                                                                              // 7091
    if (features === undefined) {                                                                                      // 7092
      features = klass;                                                                                                // 7093
      klass = Object;                                                                                                  // 7094
      newObject = {};                                                                                                  // 7095
    } else {                                                                                                           // 7096
      var ctor = function ConstructorWrapper() {};                                                                     // 7097
      ctor.prototype = klass.prototype;                                                                                // 7098
      newObject = new ctor();                                                                                          // 7099
    }                                                                                                                  // 7100
                                                                                                                       // 7101
    if (features.constructor === Object) {                                                                             // 7102
      features.constructor = function() {                                                                              // 7103
        if (klass !== Object) {                                                                                        // 7104
          return klass.apply(this, arguments);                                                                         // 7105
        }                                                                                                              // 7106
      };                                                                                                               // 7107
    }                                                                                                                  // 7108
                                                                                                                       // 7109
    features.constructor.prototype = newObject;                                                                        // 7110
    util.update(features.constructor.prototype, features);                                                             // 7111
    features.constructor.__super__ = klass;                                                                            // 7112
    return features.constructor;                                                                                       // 7113
  },                                                                                                                   // 7114
                                                                                                                       // 7115
                                                                                                                       // 7116
  mixin: function mixin() {                                                                                            // 7117
    var klass = arguments[0];                                                                                          // 7118
    for (var i = 1; i < arguments.length; i++) {                                                                       // 7119
      for (var prop in arguments[i].prototype) {                                                                       // 7120
        var fn = arguments[i].prototype[prop];                                                                         // 7121
        if (prop !== 'constructor') {                                                                                  // 7122
          klass.prototype[prop] = fn;                                                                                  // 7123
        }                                                                                                              // 7124
      }                                                                                                                // 7125
    }                                                                                                                  // 7126
    return klass;                                                                                                      // 7127
  },                                                                                                                   // 7128
                                                                                                                       // 7129
                                                                                                                       // 7130
  hideProperties: function hideProperties(obj, props) {                                                                // 7131
    if (typeof Object.defineProperty !== 'function') return;                                                           // 7132
                                                                                                                       // 7133
    util.arrayEach(props, function (key) {                                                                             // 7134
      Object.defineProperty(obj, key, {                                                                                // 7135
        enumerable: false, writable: true, configurable: true });                                                      // 7136
    });                                                                                                                // 7137
  },                                                                                                                   // 7138
                                                                                                                       // 7139
                                                                                                                       // 7140
  property: function property(obj, name, value, enumerable, isValue) {                                                 // 7141
    var opts = {                                                                                                       // 7142
      configurable: true,                                                                                              // 7143
      enumerable: enumerable !== undefined ? enumerable : true                                                         // 7144
    };                                                                                                                 // 7145
    if (typeof value === 'function' && !isValue) {                                                                     // 7146
      opts.get = value;                                                                                                // 7147
    }                                                                                                                  // 7148
    else {                                                                                                             // 7149
      opts.value = value; opts.writable = true;                                                                        // 7150
    }                                                                                                                  // 7151
                                                                                                                       // 7152
    Object.defineProperty(obj, name, opts);                                                                            // 7153
  },                                                                                                                   // 7154
                                                                                                                       // 7155
                                                                                                                       // 7156
  memoizedProperty: function memoizedProperty(obj, name, get, enumerable) {                                            // 7157
    var cachedValue = null;                                                                                            // 7158
                                                                                                                       // 7159
    util.property(obj, name, function() {                                                                              // 7160
      if (cachedValue === null) {                                                                                      // 7161
        cachedValue = get();                                                                                           // 7162
      }                                                                                                                // 7163
      return cachedValue;                                                                                              // 7164
    }, enumerable);                                                                                                    // 7165
  },                                                                                                                   // 7166
                                                                                                                       // 7167
                                                                                                                       // 7168
  hoistPayloadMember: function hoistPayloadMember(resp) {                                                              // 7169
    var req = resp.request;                                                                                            // 7170
    var operation = req.operation;                                                                                     // 7171
    var output = req.service.api.operations[operation].output;                                                         // 7172
    if (output.payload) {                                                                                              // 7173
      var payloadMember = output.members[output.payload];                                                              // 7174
      var responsePayload = resp.data[output.payload];                                                                 // 7175
      if (payloadMember.type === 'structure') {                                                                        // 7176
        util.each(responsePayload, function(key, value) {                                                              // 7177
          util.property(resp.data, key, value, false);                                                                 // 7178
        });                                                                                                            // 7179
      }                                                                                                                // 7180
    }                                                                                                                  // 7181
  },                                                                                                                   // 7182
                                                                                                                       // 7183
                                                                                                                       // 7184
  computeSha256: function computeSha256(body, done) {                                                                  // 7185
    if (util.isNode()) {                                                                                               // 7186
      var Stream = util.nodeRequire('stream').Stream;                                                                  // 7187
      var fs = util.nodeRequire('fs');                                                                                 // 7188
      if (body instanceof Stream) {                                                                                    // 7189
        if (typeof body.path === 'string') { // assume file object                                                     // 7190
          body = fs.createReadStream(body.path);                                                                       // 7191
        } else { // TODO support other stream types                                                                    // 7192
          return done(new Error('Non-file stream objects are ' +                                                       // 7193
                                'not supported with SigV4'));                                                          // 7194
        }                                                                                                              // 7195
      }                                                                                                                // 7196
    }                                                                                                                  // 7197
                                                                                                                       // 7198
    util.crypto.sha256(body, 'hex', function(err, sha) {                                                               // 7199
      if (err) done(err);                                                                                              // 7200
      else done(null, sha);                                                                                            // 7201
    });                                                                                                                // 7202
  },                                                                                                                   // 7203
                                                                                                                       // 7204
                                                                                                                       // 7205
  isClockSkewed: function isClockSkewed(serverTime) {                                                                  // 7206
    if (serverTime) {                                                                                                  // 7207
      util.property(AWS.config, 'isClockSkewed',                                                                       // 7208
        Math.abs(new Date().getTime() - serverTime) >= 300000, false);                                                 // 7209
      return AWS.config.isClockSkewed;                                                                                 // 7210
    }                                                                                                                  // 7211
  },                                                                                                                   // 7212
                                                                                                                       // 7213
  applyClockOffset: function applyClockOffset(serverTime) {                                                            // 7214
    if (serverTime)                                                                                                    // 7215
      AWS.config.systemClockOffset = serverTime - new Date().getTime();                                                // 7216
  },                                                                                                                   // 7217
                                                                                                                       // 7218
                                                                                                                       // 7219
  extractRequestId: function extractRequestId(resp) {                                                                  // 7220
    var requestId = resp.httpResponse.headers['x-amz-request-id'] ||                                                   // 7221
                     resp.httpResponse.headers['x-amzn-requestid'];                                                    // 7222
                                                                                                                       // 7223
    if (!requestId && resp.data && resp.data.ResponseMetadata) {                                                       // 7224
      requestId = resp.data.ResponseMetadata.RequestId;                                                                // 7225
    }                                                                                                                  // 7226
                                                                                                                       // 7227
    if (requestId) {                                                                                                   // 7228
      resp.requestId = requestId;                                                                                      // 7229
    }                                                                                                                  // 7230
                                                                                                                       // 7231
    if (resp.error) {                                                                                                  // 7232
      resp.error.requestId = requestId;                                                                                // 7233
    }                                                                                                                  // 7234
  }                                                                                                                    // 7235
};                                                                                                                     // 7236
                                                                                                                       // 7237
module.exports = util;                                                                                                 // 7238
                                                                                                                       // 7239
}).call(this,require("FWaASH"))                                                                                        // 7240
},{"./core":4,"FWaASH":73,"buffer":62,"crypto":66,"querystring":77,"url":78}],60:[function(require,module,exports){    // 7241
var util = require('../util');                                                                                         // 7242
var Shape = require('../model/shape');                                                                                 // 7243
                                                                                                                       // 7244
function DomXmlParser() { }                                                                                            // 7245
                                                                                                                       // 7246
DomXmlParser.prototype.parse = function(xml, shape) {                                                                  // 7247
  if (xml.replace(/^\s+/, '') === '') return {};                                                                       // 7248
                                                                                                                       // 7249
  var result, error;                                                                                                   // 7250
  try {                                                                                                                // 7251
    if (window.DOMParser) {                                                                                            // 7252
      try {                                                                                                            // 7253
        var parser = new DOMParser();                                                                                  // 7254
        result = parser.parseFromString(xml, 'text/xml');                                                              // 7255
      } catch (syntaxError) {                                                                                          // 7256
        throw util.error(new Error('Parse error in document'),                                                         // 7257
          {                                                                                                            // 7258
            originalError: syntaxError,                                                                                // 7259
            code: 'XMLParserError',                                                                                    // 7260
            retryable: true                                                                                            // 7261
          });                                                                                                          // 7262
      }                                                                                                                // 7263
                                                                                                                       // 7264
      if (result.documentElement === null) {                                                                           // 7265
        throw util.error(new Error('Cannot parse empty document.'),                                                    // 7266
          {                                                                                                            // 7267
            code: 'XMLParserError',                                                                                    // 7268
            retryable: true                                                                                            // 7269
          });                                                                                                          // 7270
      }                                                                                                                // 7271
                                                                                                                       // 7272
      var isError = result.getElementsByTagName('parsererror')[0];                                                     // 7273
      if (isError && (isError.parentNode === result ||                                                                 // 7274
          isError.parentNode.nodeName === 'body' ||                                                                    // 7275
          isError.parentNode.parentNode === result ||                                                                  // 7276
          isError.parentNode.parentNode.nodeName === 'body')) {                                                        // 7277
        var errorElement = isError.getElementsByTagName('div')[0] || isError;                                          // 7278
        throw util.error(new Error(errorElement.textContent || 'Parser error in document'),                            // 7279
          {                                                                                                            // 7280
            code: 'XMLParserError',                                                                                    // 7281
            retryable: true                                                                                            // 7282
          });                                                                                                          // 7283
      }                                                                                                                // 7284
    } else if (window.ActiveXObject) {                                                                                 // 7285
      result = new window.ActiveXObject('Microsoft.XMLDOM');                                                           // 7286
      result.async = false;                                                                                            // 7287
                                                                                                                       // 7288
      if (!result.loadXML(xml)) {                                                                                      // 7289
        throw util.error(new Error('Parse error in document'),                                                         // 7290
          {                                                                                                            // 7291
            code: 'XMLParserError',                                                                                    // 7292
            retryable: true                                                                                            // 7293
          });                                                                                                          // 7294
      }                                                                                                                // 7295
    } else {                                                                                                           // 7296
      throw new Error('Cannot load XML parser');                                                                       // 7297
    }                                                                                                                  // 7298
  } catch (e) {                                                                                                        // 7299
    error = e;                                                                                                         // 7300
  }                                                                                                                    // 7301
                                                                                                                       // 7302
  if (result && result.documentElement && !error) {                                                                    // 7303
    var data = parseXml(result.documentElement, shape);                                                                // 7304
    var metadata = result.getElementsByTagName('ResponseMetadata')[0];                                                 // 7305
    if (metadata) {                                                                                                    // 7306
      data.ResponseMetadata = parseXml(metadata, {});                                                                  // 7307
    }                                                                                                                  // 7308
    return data;                                                                                                       // 7309
  } else if (error) {                                                                                                  // 7310
    throw util.error(error || new Error(), {code: 'XMLParserError', retryable: true});                                 // 7311
  } else { // empty xml document                                                                                       // 7312
    return {};                                                                                                         // 7313
  }                                                                                                                    // 7314
};                                                                                                                     // 7315
                                                                                                                       // 7316
function parseXml(xml, shape) {                                                                                        // 7317
  if (!shape) shape = {};                                                                                              // 7318
  switch (shape.type) {                                                                                                // 7319
    case 'structure': return parseStructure(xml, shape);                                                               // 7320
    case 'map': return parseMap(xml, shape);                                                                           // 7321
    case 'list': return parseList(xml, shape);                                                                         // 7322
    case undefined: case null: return parseUnknown(xml);                                                               // 7323
    default: return parseScalar(xml, shape);                                                                           // 7324
  }                                                                                                                    // 7325
}                                                                                                                      // 7326
                                                                                                                       // 7327
function parseStructure(xml, shape) {                                                                                  // 7328
  var data = {};                                                                                                       // 7329
  if (xml === null) return data;                                                                                       // 7330
                                                                                                                       // 7331
  util.each(shape.members, function(memberName, memberShape) {                                                         // 7332
    if (memberShape.isXmlAttribute) {                                                                                  // 7333
      if (xml.attributes.hasOwnProperty(memberShape.name)) {                                                           // 7334
        var value = xml.attributes[memberShape.name].value;                                                            // 7335
        data[memberName] = parseXml({textContent: value}, memberShape);                                                // 7336
      }                                                                                                                // 7337
    } else {                                                                                                           // 7338
      var xmlChild = memberShape.flattened ? xml :                                                                     // 7339
        xml.getElementsByTagName(memberShape.name)[0];                                                                 // 7340
      if (xmlChild) {                                                                                                  // 7341
        data[memberName] = parseXml(xmlChild, memberShape);                                                            // 7342
      } else if (!memberShape.flattened && memberShape.type === 'list') {                                              // 7343
        data[memberName] = memberShape.defaultValue;                                                                   // 7344
      }                                                                                                                // 7345
    }                                                                                                                  // 7346
  });                                                                                                                  // 7347
                                                                                                                       // 7348
  return data;                                                                                                         // 7349
}                                                                                                                      // 7350
                                                                                                                       // 7351
function parseMap(xml, shape) {                                                                                        // 7352
  var data = {};                                                                                                       // 7353
  var xmlKey = shape.key.name || 'key';                                                                                // 7354
  var xmlValue = shape.value.name || 'value';                                                                          // 7355
  var tagName = shape.flattened ? shape.name : 'entry';                                                                // 7356
                                                                                                                       // 7357
  var child = xml.firstElementChild;                                                                                   // 7358
  while (child) {                                                                                                      // 7359
    if (child.nodeName === tagName) {                                                                                  // 7360
      var key = child.getElementsByTagName(xmlKey)[0].textContent;                                                     // 7361
      var value = child.getElementsByTagName(xmlValue)[0];                                                             // 7362
      data[key] = parseXml(value, shape.value);                                                                        // 7363
    }                                                                                                                  // 7364
    child = child.nextElementSibling;                                                                                  // 7365
  }                                                                                                                    // 7366
  return data;                                                                                                         // 7367
}                                                                                                                      // 7368
                                                                                                                       // 7369
function parseList(xml, shape) {                                                                                       // 7370
  var data = [];                                                                                                       // 7371
  var tagName = shape.flattened ? shape.name : (shape.member.name || 'member');                                        // 7372
                                                                                                                       // 7373
  var child = xml.firstElementChild;                                                                                   // 7374
  while (child) {                                                                                                      // 7375
    if (child.nodeName === tagName) {                                                                                  // 7376
      data.push(parseXml(child, shape.member));                                                                        // 7377
    }                                                                                                                  // 7378
    child = child.nextElementSibling;                                                                                  // 7379
  }                                                                                                                    // 7380
  return data;                                                                                                         // 7381
}                                                                                                                      // 7382
                                                                                                                       // 7383
function parseScalar(xml, shape) {                                                                                     // 7384
  if (xml.getAttribute) {                                                                                              // 7385
    var encoding = xml.getAttribute('encoding');                                                                       // 7386
    if (encoding === 'base64') {                                                                                       // 7387
      shape = new Shape.create({type: encoding});                                                                      // 7388
    }                                                                                                                  // 7389
  }                                                                                                                    // 7390
                                                                                                                       // 7391
  var text = xml.textContent;                                                                                          // 7392
  if (text === '') text = null;                                                                                        // 7393
  if (typeof shape.toType === 'function') {                                                                            // 7394
    return shape.toType(text);                                                                                         // 7395
  } else {                                                                                                             // 7396
    return text;                                                                                                       // 7397
  }                                                                                                                    // 7398
}                                                                                                                      // 7399
                                                                                                                       // 7400
function parseUnknown(xml) {                                                                                           // 7401
  if (xml === undefined || xml === null) return '';                                                                    // 7402
                                                                                                                       // 7403
  if (!xml.firstElementChild) {                                                                                        // 7404
    if (xml.parentNode.parentNode === null) return {};                                                                 // 7405
    if (xml.childNodes.length === 0) return '';                                                                        // 7406
    else return xml.textContent;                                                                                       // 7407
  }                                                                                                                    // 7408
                                                                                                                       // 7409
  var shape = {type: 'structure', members: {}};                                                                        // 7410
  var child = xml.firstElementChild;                                                                                   // 7411
  while (child) {                                                                                                      // 7412
    var tag = child.nodeName;                                                                                          // 7413
    if (shape.members.hasOwnProperty(tag)) {                                                                           // 7414
      shape.members[tag].type = 'list';                                                                                // 7415
    } else {                                                                                                           // 7416
      shape.members[tag] = {name: tag};                                                                                // 7417
    }                                                                                                                  // 7418
    child = child.nextElementSibling;                                                                                  // 7419
  }                                                                                                                    // 7420
  return parseStructure(xml, shape);                                                                                   // 7421
}                                                                                                                      // 7422
                                                                                                                       // 7423
module.exports = DomXmlParser;                                                                                         // 7424
                                                                                                                       // 7425
},{"../model/shape":26,"../util":59}],61:[function(require,module,exports){                                            // 7426
var util = require('../util');                                                                                         // 7427
var builder = require('xmlbuilder');                                                                                   // 7428
                                                                                                                       // 7429
function XmlBuilder() { }                                                                                              // 7430
                                                                                                                       // 7431
XmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {                                           // 7432
  var xml = builder.create(rootElement);                                                                               // 7433
  applyNamespaces(xml, shape);                                                                                         // 7434
  serialize(xml, params, shape);                                                                                       // 7435
  return xml.children.length > 0 || noEmpty ? xml.root().toString() : '';                                              // 7436
};                                                                                                                     // 7437
                                                                                                                       // 7438
function serialize(xml, value, shape) {                                                                                // 7439
  switch (shape.type) {                                                                                                // 7440
    case 'structure': return serializeStructure(xml, value, shape);                                                    // 7441
    case 'map': return serializeMap(xml, value, shape);                                                                // 7442
    case 'list': return serializeList(xml, value, shape);                                                              // 7443
    default: return serializeScalar(xml, value, shape);                                                                // 7444
  }                                                                                                                    // 7445
}                                                                                                                      // 7446
                                                                                                                       // 7447
function serializeStructure(xml, params, shape) {                                                                      // 7448
  util.arrayEach(shape.memberNames, function(memberName) {                                                             // 7449
    var memberShape = shape.members[memberName];                                                                       // 7450
    if (memberShape.location !== 'body') return;                                                                       // 7451
                                                                                                                       // 7452
    var value = params[memberName];                                                                                    // 7453
    var name = memberShape.name;                                                                                       // 7454
    if (value !== undefined && value !== null) {                                                                       // 7455
      if (memberShape.isXmlAttribute) {                                                                                // 7456
        xml.att(name, value);                                                                                          // 7457
      } else if (memberShape.flattened) {                                                                              // 7458
        serialize(xml, value, memberShape);                                                                            // 7459
      } else {                                                                                                         // 7460
        var element = xml.ele(name);                                                                                   // 7461
        applyNamespaces(element, memberShape);                                                                         // 7462
        serialize(element, value, memberShape);                                                                        // 7463
      }                                                                                                                // 7464
    }                                                                                                                  // 7465
  });                                                                                                                  // 7466
}                                                                                                                      // 7467
                                                                                                                       // 7468
function serializeMap(xml, map, shape) {                                                                               // 7469
  var xmlKey = shape.key.name || 'key';                                                                                // 7470
  var xmlValue = shape.value.name || 'value';                                                                          // 7471
                                                                                                                       // 7472
  util.each(map, function(key, value) {                                                                                // 7473
    var entry = xml.ele(shape.flattened ? shape.name : 'entry');                                                       // 7474
    serialize(entry.ele(xmlKey), key, shape.key);                                                                      // 7475
    serialize(entry.ele(xmlValue), value, shape.value);                                                                // 7476
  });                                                                                                                  // 7477
}                                                                                                                      // 7478
                                                                                                                       // 7479
function serializeList(xml, list, shape) {                                                                             // 7480
  if (shape.flattened) {                                                                                               // 7481
    util.arrayEach(list, function(value) {                                                                             // 7482
      var name = shape.member.name || shape.name;                                                                      // 7483
      var element = xml.ele(name);                                                                                     // 7484
      serialize(element, value, shape.member);                                                                         // 7485
    });                                                                                                                // 7486
  } else {                                                                                                             // 7487
    util.arrayEach(list, function(value) {                                                                             // 7488
      var name = shape.member.name || 'member';                                                                        // 7489
      var element = xml.ele(name);                                                                                     // 7490
      serialize(element, value, shape.member);                                                                         // 7491
    });                                                                                                                // 7492
  }                                                                                                                    // 7493
}                                                                                                                      // 7494
                                                                                                                       // 7495
function serializeScalar(xml, value, shape) {                                                                          // 7496
  xml.txt(shape.toWireFormat(value));                                                                                  // 7497
}                                                                                                                      // 7498
                                                                                                                       // 7499
function applyNamespaces(xml, shape) {                                                                                 // 7500
  var uri, prefix = 'xmlns';                                                                                           // 7501
  if (shape.xmlNamespaceUri) {                                                                                         // 7502
    uri = shape.xmlNamespaceUri;                                                                                       // 7503
    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;                                            // 7504
  } else if (xml.isRoot && shape.api.xmlNamespaceUri) {                                                                // 7505
    uri = shape.api.xmlNamespaceUri;                                                                                   // 7506
  }                                                                                                                    // 7507
                                                                                                                       // 7508
  if (uri) xml.att(prefix, uri);                                                                                       // 7509
}                                                                                                                      // 7510
                                                                                                                       // 7511
module.exports = XmlBuilder;                                                                                           // 7512
                                                                                                                       // 7513
},{"../util":59,"xmlbuilder":97}],62:[function(require,module,exports){                                                // 7514
                                                                                                                       // 7515
                                                                                                                       // 7516
var base64 = require('base64-js')                                                                                      // 7517
var ieee754 = require('ieee754')                                                                                       // 7518
                                                                                                                       // 7519
exports.Buffer = Buffer                                                                                                // 7520
exports.SlowBuffer = Buffer                                                                                            // 7521
exports.INSPECT_MAX_BYTES = 50                                                                                         // 7522
Buffer.poolSize = 8192                                                                                                 // 7523
                                                                                                                       // 7524
                                                                                                                       // 7525
Buffer._useTypedArrays = (function () {                                                                                // 7526
  try {                                                                                                                // 7527
    var buf = new ArrayBuffer(0)                                                                                       // 7528
    var arr = new Uint8Array(buf)                                                                                      // 7529
    arr.foo = function () { return 42 }                                                                                // 7530
    return 42 === arr.foo() &&                                                                                         // 7531
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`                                              // 7532
  } catch (e) {                                                                                                        // 7533
    return false                                                                                                       // 7534
  }                                                                                                                    // 7535
})()                                                                                                                   // 7536
                                                                                                                       // 7537
                                                                                                                       // 7538
function Buffer (subject, encoding, noZero) {                                                                          // 7539
  if (!(this instanceof Buffer))                                                                                       // 7540
    return new Buffer(subject, encoding, noZero)                                                                       // 7541
                                                                                                                       // 7542
  var type = typeof subject                                                                                            // 7543
                                                                                                                       // 7544
  if (encoding === 'base64' && type === 'string') {                                                                    // 7545
    subject = stringtrim(subject)                                                                                      // 7546
    while (subject.length % 4 !== 0) {                                                                                 // 7547
      subject = subject + '='                                                                                          // 7548
    }                                                                                                                  // 7549
  }                                                                                                                    // 7550
                                                                                                                       // 7551
  var length                                                                                                           // 7552
  if (type === 'number')                                                                                               // 7553
    length = coerce(subject)                                                                                           // 7554
  else if (type === 'string')                                                                                          // 7555
    length = Buffer.byteLength(subject, encoding)                                                                      // 7556
  else if (type === 'object')                                                                                          // 7557
    length = coerce(subject.length) // assume that object is array-like                                                // 7558
  else                                                                                                                 // 7559
    throw new Error('First argument needs to be a number, array or string.')                                           // 7560
                                                                                                                       // 7561
  var buf                                                                                                              // 7562
  if (Buffer._useTypedArrays) {                                                                                        // 7563
    buf = Buffer._augment(new Uint8Array(length))                                                                      // 7564
  } else {                                                                                                             // 7565
    buf = this                                                                                                         // 7566
    buf.length = length                                                                                                // 7567
    buf._isBuffer = true                                                                                               // 7568
  }                                                                                                                    // 7569
                                                                                                                       // 7570
  var i                                                                                                                // 7571
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {                                              // 7572
    buf._set(subject)                                                                                                  // 7573
  } else if (isArrayish(subject)) {                                                                                    // 7574
    for (i = 0; i < length; i++) {                                                                                     // 7575
      if (Buffer.isBuffer(subject))                                                                                    // 7576
        buf[i] = subject.readUInt8(i)                                                                                  // 7577
      else                                                                                                             // 7578
        buf[i] = subject[i]                                                                                            // 7579
    }                                                                                                                  // 7580
  } else if (type === 'string') {                                                                                      // 7581
    buf.write(subject, 0, encoding)                                                                                    // 7582
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {                                                // 7583
    for (i = 0; i < length; i++) {                                                                                     // 7584
      buf[i] = 0                                                                                                       // 7585
    }                                                                                                                  // 7586
  }                                                                                                                    // 7587
                                                                                                                       // 7588
  return buf                                                                                                           // 7589
}                                                                                                                      // 7590
                                                                                                                       // 7591
                                                                                                                       // 7592
Buffer.isEncoding = function (encoding) {                                                                              // 7593
  switch (String(encoding).toLowerCase()) {                                                                            // 7594
    case 'hex':                                                                                                        // 7595
    case 'utf8':                                                                                                       // 7596
    case 'utf-8':                                                                                                      // 7597
    case 'ascii':                                                                                                      // 7598
    case 'binary':                                                                                                     // 7599
    case 'base64':                                                                                                     // 7600
    case 'raw':                                                                                                        // 7601
    case 'ucs2':                                                                                                       // 7602
    case 'ucs-2':                                                                                                      // 7603
    case 'utf16le':                                                                                                    // 7604
    case 'utf-16le':                                                                                                   // 7605
      return true                                                                                                      // 7606
    default:                                                                                                           // 7607
      return false                                                                                                     // 7608
  }                                                                                                                    // 7609
}                                                                                                                      // 7610
                                                                                                                       // 7611
Buffer.isBuffer = function (b) {                                                                                       // 7612
  return !!(b !== null && b !== undefined && b._isBuffer)                                                              // 7613
}                                                                                                                      // 7614
                                                                                                                       // 7615
Buffer.byteLength = function (str, encoding) {                                                                         // 7616
  var ret                                                                                                              // 7617
  str = str + ''                                                                                                       // 7618
  switch (encoding || 'utf8') {                                                                                        // 7619
    case 'hex':                                                                                                        // 7620
      ret = str.length / 2                                                                                             // 7621
      break                                                                                                            // 7622
    case 'utf8':                                                                                                       // 7623
    case 'utf-8':                                                                                                      // 7624
      ret = utf8ToBytes(str).length                                                                                    // 7625
      break                                                                                                            // 7626
    case 'ascii':                                                                                                      // 7627
    case 'binary':                                                                                                     // 7628
    case 'raw':                                                                                                        // 7629
      ret = str.length                                                                                                 // 7630
      break                                                                                                            // 7631
    case 'base64':                                                                                                     // 7632
      ret = base64ToBytes(str).length                                                                                  // 7633
      break                                                                                                            // 7634
    case 'ucs2':                                                                                                       // 7635
    case 'ucs-2':                                                                                                      // 7636
    case 'utf16le':                                                                                                    // 7637
    case 'utf-16le':                                                                                                   // 7638
      ret = str.length * 2                                                                                             // 7639
      break                                                                                                            // 7640
    default:                                                                                                           // 7641
      throw new Error('Unknown encoding')                                                                              // 7642
  }                                                                                                                    // 7643
  return ret                                                                                                           // 7644
}                                                                                                                      // 7645
                                                                                                                       // 7646
Buffer.concat = function (list, totalLength) {                                                                         // 7647
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +                                                // 7648
      'list should be an Array.')                                                                                      // 7649
                                                                                                                       // 7650
  if (list.length === 0) {                                                                                             // 7651
    return new Buffer(0)                                                                                               // 7652
  } else if (list.length === 1) {                                                                                      // 7653
    return list[0]                                                                                                     // 7654
  }                                                                                                                    // 7655
                                                                                                                       // 7656
  var i                                                                                                                // 7657
  if (typeof totalLength !== 'number') {                                                                               // 7658
    totalLength = 0                                                                                                    // 7659
    for (i = 0; i < list.length; i++) {                                                                                // 7660
      totalLength += list[i].length                                                                                    // 7661
    }                                                                                                                  // 7662
  }                                                                                                                    // 7663
                                                                                                                       // 7664
  var buf = new Buffer(totalLength)                                                                                    // 7665
  var pos = 0                                                                                                          // 7666
  for (i = 0; i < list.length; i++) {                                                                                  // 7667
    var item = list[i]                                                                                                 // 7668
    item.copy(buf, pos)                                                                                                // 7669
    pos += item.length                                                                                                 // 7670
  }                                                                                                                    // 7671
  return buf                                                                                                           // 7672
}                                                                                                                      // 7673
                                                                                                                       // 7674
                                                                                                                       // 7675
function _hexWrite (buf, string, offset, length) {                                                                     // 7676
  offset = Number(offset) || 0                                                                                         // 7677
  var remaining = buf.length - offset                                                                                  // 7678
  if (!length) {                                                                                                       // 7679
    length = remaining                                                                                                 // 7680
  } else {                                                                                                             // 7681
    length = Number(length)                                                                                            // 7682
    if (length > remaining) {                                                                                          // 7683
      length = remaining                                                                                               // 7684
    }                                                                                                                  // 7685
  }                                                                                                                    // 7686
                                                                                                                       // 7687
  var strLen = string.length                                                                                           // 7688
  assert(strLen % 2 === 0, 'Invalid hex string')                                                                       // 7689
                                                                                                                       // 7690
  if (length > strLen / 2) {                                                                                           // 7691
    length = strLen / 2                                                                                                // 7692
  }                                                                                                                    // 7693
  for (var i = 0; i < length; i++) {                                                                                   // 7694
    var byte = parseInt(string.substr(i * 2, 2), 16)                                                                   // 7695
    assert(!isNaN(byte), 'Invalid hex string')                                                                         // 7696
    buf[offset + i] = byte                                                                                             // 7697
  }                                                                                                                    // 7698
  Buffer._charsWritten = i * 2                                                                                         // 7699
  return i                                                                                                             // 7700
}                                                                                                                      // 7701
                                                                                                                       // 7702
function _utf8Write (buf, string, offset, length) {                                                                    // 7703
  var charsWritten = Buffer._charsWritten =                                                                            // 7704
    blitBuffer(utf8ToBytes(string), buf, offset, length)                                                               // 7705
  return charsWritten                                                                                                  // 7706
}                                                                                                                      // 7707
                                                                                                                       // 7708
function _asciiWrite (buf, string, offset, length) {                                                                   // 7709
  var charsWritten = Buffer._charsWritten =                                                                            // 7710
    blitBuffer(asciiToBytes(string), buf, offset, length)                                                              // 7711
  return charsWritten                                                                                                  // 7712
}                                                                                                                      // 7713
                                                                                                                       // 7714
function _binaryWrite (buf, string, offset, length) {                                                                  // 7715
  return _asciiWrite(buf, string, offset, length)                                                                      // 7716
}                                                                                                                      // 7717
                                                                                                                       // 7718
function _base64Write (buf, string, offset, length) {                                                                  // 7719
  var charsWritten = Buffer._charsWritten =                                                                            // 7720
    blitBuffer(base64ToBytes(string), buf, offset, length)                                                             // 7721
  return charsWritten                                                                                                  // 7722
}                                                                                                                      // 7723
                                                                                                                       // 7724
function _utf16leWrite (buf, string, offset, length) {                                                                 // 7725
  var charsWritten = Buffer._charsWritten =                                                                            // 7726
    blitBuffer(utf16leToBytes(string), buf, offset, length)                                                            // 7727
  return charsWritten                                                                                                  // 7728
}                                                                                                                      // 7729
                                                                                                                       // 7730
Buffer.prototype.write = function (string, offset, length, encoding) {                                                 // 7731
  if (isFinite(offset)) {                                                                                              // 7732
    if (!isFinite(length)) {                                                                                           // 7733
      encoding = length                                                                                                // 7734
      length = undefined                                                                                               // 7735
    }                                                                                                                  // 7736
  } else {  // legacy                                                                                                  // 7737
    var swap = encoding                                                                                                // 7738
    encoding = offset                                                                                                  // 7739
    offset = length                                                                                                    // 7740
    length = swap                                                                                                      // 7741
  }                                                                                                                    // 7742
                                                                                                                       // 7743
  offset = Number(offset) || 0                                                                                         // 7744
  var remaining = this.length - offset                                                                                 // 7745
  if (!length) {                                                                                                       // 7746
    length = remaining                                                                                                 // 7747
  } else {                                                                                                             // 7748
    length = Number(length)                                                                                            // 7749
    if (length > remaining) {                                                                                          // 7750
      length = remaining                                                                                               // 7751
    }                                                                                                                  // 7752
  }                                                                                                                    // 7753
  encoding = String(encoding || 'utf8').toLowerCase()                                                                  // 7754
                                                                                                                       // 7755
  var ret                                                                                                              // 7756
  switch (encoding) {                                                                                                  // 7757
    case 'hex':                                                                                                        // 7758
      ret = _hexWrite(this, string, offset, length)                                                                    // 7759
      break                                                                                                            // 7760
    case 'utf8':                                                                                                       // 7761
    case 'utf-8':                                                                                                      // 7762
      ret = _utf8Write(this, string, offset, length)                                                                   // 7763
      break                                                                                                            // 7764
    case 'ascii':                                                                                                      // 7765
      ret = _asciiWrite(this, string, offset, length)                                                                  // 7766
      break                                                                                                            // 7767
    case 'binary':                                                                                                     // 7768
      ret = _binaryWrite(this, string, offset, length)                                                                 // 7769
      break                                                                                                            // 7770
    case 'base64':                                                                                                     // 7771
      ret = _base64Write(this, string, offset, length)                                                                 // 7772
      break                                                                                                            // 7773
    case 'ucs2':                                                                                                       // 7774
    case 'ucs-2':                                                                                                      // 7775
    case 'utf16le':                                                                                                    // 7776
    case 'utf-16le':                                                                                                   // 7777
      ret = _utf16leWrite(this, string, offset, length)                                                                // 7778
      break                                                                                                            // 7779
    default:                                                                                                           // 7780
      throw new Error('Unknown encoding')                                                                              // 7781
  }                                                                                                                    // 7782
  return ret                                                                                                           // 7783
}                                                                                                                      // 7784
                                                                                                                       // 7785
Buffer.prototype.toString = function (encoding, start, end) {                                                          // 7786
  var self = this                                                                                                      // 7787
                                                                                                                       // 7788
  encoding = String(encoding || 'utf8').toLowerCase()                                                                  // 7789
  start = Number(start) || 0                                                                                           // 7790
  end = (end !== undefined)                                                                                            // 7791
    ? Number(end)                                                                                                      // 7792
    : end = self.length                                                                                                // 7793
                                                                                                                       // 7794
  if (end === start)                                                                                                   // 7795
    return ''                                                                                                          // 7796
                                                                                                                       // 7797
  var ret                                                                                                              // 7798
  switch (encoding) {                                                                                                  // 7799
    case 'hex':                                                                                                        // 7800
      ret = _hexSlice(self, start, end)                                                                                // 7801
      break                                                                                                            // 7802
    case 'utf8':                                                                                                       // 7803
    case 'utf-8':                                                                                                      // 7804
      ret = _utf8Slice(self, start, end)                                                                               // 7805
      break                                                                                                            // 7806
    case 'ascii':                                                                                                      // 7807
      ret = _asciiSlice(self, start, end)                                                                              // 7808
      break                                                                                                            // 7809
    case 'binary':                                                                                                     // 7810
      ret = _binarySlice(self, start, end)                                                                             // 7811
      break                                                                                                            // 7812
    case 'base64':                                                                                                     // 7813
      ret = _base64Slice(self, start, end)                                                                             // 7814
      break                                                                                                            // 7815
    case 'ucs2':                                                                                                       // 7816
    case 'ucs-2':                                                                                                      // 7817
    case 'utf16le':                                                                                                    // 7818
    case 'utf-16le':                                                                                                   // 7819
      ret = _utf16leSlice(self, start, end)                                                                            // 7820
      break                                                                                                            // 7821
    default:                                                                                                           // 7822
      throw new Error('Unknown encoding')                                                                              // 7823
  }                                                                                                                    // 7824
  return ret                                                                                                           // 7825
}                                                                                                                      // 7826
                                                                                                                       // 7827
Buffer.prototype.toJSON = function () {                                                                                // 7828
  return {                                                                                                             // 7829
    type: 'Buffer',                                                                                                    // 7830
    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 7831
  }                                                                                                                    // 7832
}                                                                                                                      // 7833
                                                                                                                       // 7834
Buffer.prototype.copy = function (target, target_start, start, end) {                                                  // 7835
  var source = this                                                                                                    // 7836
                                                                                                                       // 7837
  if (!start) start = 0                                                                                                // 7838
  if (!end && end !== 0) end = this.length                                                                             // 7839
  if (!target_start) target_start = 0                                                                                  // 7840
                                                                                                                       // 7841
  if (end === start) return                                                                                            // 7842
  if (target.length === 0 || source.length === 0) return                                                               // 7843
                                                                                                                       // 7844
  assert(end >= start, 'sourceEnd < sourceStart')                                                                      // 7845
  assert(target_start >= 0 && target_start < target.length,                                                            // 7846
      'targetStart out of bounds')                                                                                     // 7847
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')                                             // 7848
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')                                                  // 7849
                                                                                                                       // 7850
  if (end > this.length)                                                                                               // 7851
    end = this.length                                                                                                  // 7852
  if (target.length - target_start < end - start)                                                                      // 7853
    end = target.length - target_start + start                                                                         // 7854
                                                                                                                       // 7855
  var len = end - start                                                                                                // 7856
                                                                                                                       // 7857
  if (len < 100 || !Buffer._useTypedArrays) {                                                                          // 7858
    for (var i = 0; i < len; i++)                                                                                      // 7859
      target[i + target_start] = this[i + start]                                                                       // 7860
  } else {                                                                                                             // 7861
    target._set(this.subarray(start, start + len), target_start)                                                       // 7862
  }                                                                                                                    // 7863
}                                                                                                                      // 7864
                                                                                                                       // 7865
function _base64Slice (buf, start, end) {                                                                              // 7866
  if (start === 0 && end === buf.length) {                                                                             // 7867
    return base64.fromByteArray(buf)                                                                                   // 7868
  } else {                                                                                                             // 7869
    return base64.fromByteArray(buf.slice(start, end))                                                                 // 7870
  }                                                                                                                    // 7871
}                                                                                                                      // 7872
                                                                                                                       // 7873
function _utf8Slice (buf, start, end) {                                                                                // 7874
  var res = ''                                                                                                         // 7875
  var tmp = ''                                                                                                         // 7876
  end = Math.min(buf.length, end)                                                                                      // 7877
                                                                                                                       // 7878
  for (var i = start; i < end; i++) {                                                                                  // 7879
    if (buf[i] <= 0x7F) {                                                                                              // 7880
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])                                                         // 7881
      tmp = ''                                                                                                         // 7882
    } else {                                                                                                           // 7883
      tmp += '%' + buf[i].toString(16)                                                                                 // 7884
    }                                                                                                                  // 7885
  }                                                                                                                    // 7886
                                                                                                                       // 7887
  return res + decodeUtf8Char(tmp)                                                                                     // 7888
}                                                                                                                      // 7889
                                                                                                                       // 7890
function _asciiSlice (buf, start, end) {                                                                               // 7891
  var ret = ''                                                                                                         // 7892
  end = Math.min(buf.length, end)                                                                                      // 7893
                                                                                                                       // 7894
  for (var i = start; i < end; i++)                                                                                    // 7895
    ret += String.fromCharCode(buf[i])                                                                                 // 7896
  return ret                                                                                                           // 7897
}                                                                                                                      // 7898
                                                                                                                       // 7899
function _binarySlice (buf, start, end) {                                                                              // 7900
  return _asciiSlice(buf, start, end)                                                                                  // 7901
}                                                                                                                      // 7902
                                                                                                                       // 7903
function _hexSlice (buf, start, end) {                                                                                 // 7904
  var len = buf.length                                                                                                 // 7905
                                                                                                                       // 7906
  if (!start || start < 0) start = 0                                                                                   // 7907
  if (!end || end < 0 || end > len) end = len                                                                          // 7908
                                                                                                                       // 7909
  var out = ''                                                                                                         // 7910
  for (var i = start; i < end; i++) {                                                                                  // 7911
    out += toHex(buf[i])                                                                                               // 7912
  }                                                                                                                    // 7913
  return out                                                                                                           // 7914
}                                                                                                                      // 7915
                                                                                                                       // 7916
function _utf16leSlice (buf, start, end) {                                                                             // 7917
  var bytes = buf.slice(start, end)                                                                                    // 7918
  var res = ''                                                                                                         // 7919
  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 7920
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)                                                            // 7921
  }                                                                                                                    // 7922
  return res                                                                                                           // 7923
}                                                                                                                      // 7924
                                                                                                                       // 7925
Buffer.prototype.slice = function (start, end) {                                                                       // 7926
  var len = this.length                                                                                                // 7927
  start = clamp(start, len, 0)                                                                                         // 7928
  end = clamp(end, len, len)                                                                                           // 7929
                                                                                                                       // 7930
  if (Buffer._useTypedArrays) {                                                                                        // 7931
    return Buffer._augment(this.subarray(start, end))                                                                  // 7932
  } else {                                                                                                             // 7933
    var sliceLen = end - start                                                                                         // 7934
    var newBuf = new Buffer(sliceLen, undefined, true)                                                                 // 7935
    for (var i = 0; i < sliceLen; i++) {                                                                               // 7936
      newBuf[i] = this[i + start]                                                                                      // 7937
    }                                                                                                                  // 7938
    return newBuf                                                                                                      // 7939
  }                                                                                                                    // 7940
}                                                                                                                      // 7941
                                                                                                                       // 7942
Buffer.prototype.get = function (offset) {                                                                             // 7943
  console.log('.get() is deprecated. Access using array indexes instead.')                                             // 7944
  return this.readUInt8(offset)                                                                                        // 7945
}                                                                                                                      // 7946
                                                                                                                       // 7947
Buffer.prototype.set = function (v, offset) {                                                                          // 7948
  console.log('.set() is deprecated. Access using array indexes instead.')                                             // 7949
  return this.writeUInt8(v, offset)                                                                                    // 7950
}                                                                                                                      // 7951
                                                                                                                       // 7952
Buffer.prototype.readUInt8 = function (offset, noAssert) {                                                             // 7953
  if (!noAssert) {                                                                                                     // 7954
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 7955
    assert(offset < this.length, 'Trying to read beyond buffer length')                                                // 7956
  }                                                                                                                    // 7957
                                                                                                                       // 7958
  if (offset >= this.length)                                                                                           // 7959
    return                                                                                                             // 7960
                                                                                                                       // 7961
  return this[offset]                                                                                                  // 7962
}                                                                                                                      // 7963
                                                                                                                       // 7964
function _readUInt16 (buf, offset, littleEndian, noAssert) {                                                           // 7965
  if (!noAssert) {                                                                                                     // 7966
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 7967
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 7968
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')                                             // 7969
  }                                                                                                                    // 7970
                                                                                                                       // 7971
  var len = buf.length                                                                                                 // 7972
  if (offset >= len)                                                                                                   // 7973
    return                                                                                                             // 7974
                                                                                                                       // 7975
  var val                                                                                                              // 7976
  if (littleEndian) {                                                                                                  // 7977
    val = buf[offset]                                                                                                  // 7978
    if (offset + 1 < len)                                                                                              // 7979
      val |= buf[offset + 1] << 8                                                                                      // 7980
  } else {                                                                                                             // 7981
    val = buf[offset] << 8                                                                                             // 7982
    if (offset + 1 < len)                                                                                              // 7983
      val |= buf[offset + 1]                                                                                           // 7984
  }                                                                                                                    // 7985
  return val                                                                                                           // 7986
}                                                                                                                      // 7987
                                                                                                                       // 7988
Buffer.prototype.readUInt16LE = function (offset, noAssert) {                                                          // 7989
  return _readUInt16(this, offset, true, noAssert)                                                                     // 7990
}                                                                                                                      // 7991
                                                                                                                       // 7992
Buffer.prototype.readUInt16BE = function (offset, noAssert) {                                                          // 7993
  return _readUInt16(this, offset, false, noAssert)                                                                    // 7994
}                                                                                                                      // 7995
                                                                                                                       // 7996
function _readUInt32 (buf, offset, littleEndian, noAssert) {                                                           // 7997
  if (!noAssert) {                                                                                                     // 7998
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 7999
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8000
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')                                             // 8001
  }                                                                                                                    // 8002
                                                                                                                       // 8003
  var len = buf.length                                                                                                 // 8004
  if (offset >= len)                                                                                                   // 8005
    return                                                                                                             // 8006
                                                                                                                       // 8007
  var val                                                                                                              // 8008
  if (littleEndian) {                                                                                                  // 8009
    if (offset + 2 < len)                                                                                              // 8010
      val = buf[offset + 2] << 16                                                                                      // 8011
    if (offset + 1 < len)                                                                                              // 8012
      val |= buf[offset + 1] << 8                                                                                      // 8013
    val |= buf[offset]                                                                                                 // 8014
    if (offset + 3 < len)                                                                                              // 8015
      val = val + (buf[offset + 3] << 24 >>> 0)                                                                        // 8016
  } else {                                                                                                             // 8017
    if (offset + 1 < len)                                                                                              // 8018
      val = buf[offset + 1] << 16                                                                                      // 8019
    if (offset + 2 < len)                                                                                              // 8020
      val |= buf[offset + 2] << 8                                                                                      // 8021
    if (offset + 3 < len)                                                                                              // 8022
      val |= buf[offset + 3]                                                                                           // 8023
    val = val + (buf[offset] << 24 >>> 0)                                                                              // 8024
  }                                                                                                                    // 8025
  return val                                                                                                           // 8026
}                                                                                                                      // 8027
                                                                                                                       // 8028
Buffer.prototype.readUInt32LE = function (offset, noAssert) {                                                          // 8029
  return _readUInt32(this, offset, true, noAssert)                                                                     // 8030
}                                                                                                                      // 8031
                                                                                                                       // 8032
Buffer.prototype.readUInt32BE = function (offset, noAssert) {                                                          // 8033
  return _readUInt32(this, offset, false, noAssert)                                                                    // 8034
}                                                                                                                      // 8035
                                                                                                                       // 8036
Buffer.prototype.readInt8 = function (offset, noAssert) {                                                              // 8037
  if (!noAssert) {                                                                                                     // 8038
    assert(offset !== undefined && offset !== null,                                                                    // 8039
        'missing offset')                                                                                              // 8040
    assert(offset < this.length, 'Trying to read beyond buffer length')                                                // 8041
  }                                                                                                                    // 8042
                                                                                                                       // 8043
  if (offset >= this.length)                                                                                           // 8044
    return                                                                                                             // 8045
                                                                                                                       // 8046
  var neg = this[offset] & 0x80                                                                                        // 8047
  if (neg)                                                                                                             // 8048
    return (0xff - this[offset] + 1) * -1                                                                              // 8049
  else                                                                                                                 // 8050
    return this[offset]                                                                                                // 8051
}                                                                                                                      // 8052
                                                                                                                       // 8053
function _readInt16 (buf, offset, littleEndian, noAssert) {                                                            // 8054
  if (!noAssert) {                                                                                                     // 8055
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8056
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8057
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')                                             // 8058
  }                                                                                                                    // 8059
                                                                                                                       // 8060
  var len = buf.length                                                                                                 // 8061
  if (offset >= len)                                                                                                   // 8062
    return                                                                                                             // 8063
                                                                                                                       // 8064
  var val = _readUInt16(buf, offset, littleEndian, true)                                                               // 8065
  var neg = val & 0x8000                                                                                               // 8066
  if (neg)                                                                                                             // 8067
    return (0xffff - val + 1) * -1                                                                                     // 8068
  else                                                                                                                 // 8069
    return val                                                                                                         // 8070
}                                                                                                                      // 8071
                                                                                                                       // 8072
Buffer.prototype.readInt16LE = function (offset, noAssert) {                                                           // 8073
  return _readInt16(this, offset, true, noAssert)                                                                      // 8074
}                                                                                                                      // 8075
                                                                                                                       // 8076
Buffer.prototype.readInt16BE = function (offset, noAssert) {                                                           // 8077
  return _readInt16(this, offset, false, noAssert)                                                                     // 8078
}                                                                                                                      // 8079
                                                                                                                       // 8080
function _readInt32 (buf, offset, littleEndian, noAssert) {                                                            // 8081
  if (!noAssert) {                                                                                                     // 8082
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8083
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8084
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')                                             // 8085
  }                                                                                                                    // 8086
                                                                                                                       // 8087
  var len = buf.length                                                                                                 // 8088
  if (offset >= len)                                                                                                   // 8089
    return                                                                                                             // 8090
                                                                                                                       // 8091
  var val = _readUInt32(buf, offset, littleEndian, true)                                                               // 8092
  var neg = val & 0x80000000                                                                                           // 8093
  if (neg)                                                                                                             // 8094
    return (0xffffffff - val + 1) * -1                                                                                 // 8095
  else                                                                                                                 // 8096
    return val                                                                                                         // 8097
}                                                                                                                      // 8098
                                                                                                                       // 8099
Buffer.prototype.readInt32LE = function (offset, noAssert) {                                                           // 8100
  return _readInt32(this, offset, true, noAssert)                                                                      // 8101
}                                                                                                                      // 8102
                                                                                                                       // 8103
Buffer.prototype.readInt32BE = function (offset, noAssert) {                                                           // 8104
  return _readInt32(this, offset, false, noAssert)                                                                     // 8105
}                                                                                                                      // 8106
                                                                                                                       // 8107
function _readFloat (buf, offset, littleEndian, noAssert) {                                                            // 8108
  if (!noAssert) {                                                                                                     // 8109
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8110
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')                                             // 8111
  }                                                                                                                    // 8112
                                                                                                                       // 8113
  return ieee754.read(buf, offset, littleEndian, 23, 4)                                                                // 8114
}                                                                                                                      // 8115
                                                                                                                       // 8116
Buffer.prototype.readFloatLE = function (offset, noAssert) {                                                           // 8117
  return _readFloat(this, offset, true, noAssert)                                                                      // 8118
}                                                                                                                      // 8119
                                                                                                                       // 8120
Buffer.prototype.readFloatBE = function (offset, noAssert) {                                                           // 8121
  return _readFloat(this, offset, false, noAssert)                                                                     // 8122
}                                                                                                                      // 8123
                                                                                                                       // 8124
function _readDouble (buf, offset, littleEndian, noAssert) {                                                           // 8125
  if (!noAssert) {                                                                                                     // 8126
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8127
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')                                             // 8128
  }                                                                                                                    // 8129
                                                                                                                       // 8130
  return ieee754.read(buf, offset, littleEndian, 52, 8)                                                                // 8131
}                                                                                                                      // 8132
                                                                                                                       // 8133
Buffer.prototype.readDoubleLE = function (offset, noAssert) {                                                          // 8134
  return _readDouble(this, offset, true, noAssert)                                                                     // 8135
}                                                                                                                      // 8136
                                                                                                                       // 8137
Buffer.prototype.readDoubleBE = function (offset, noAssert) {                                                          // 8138
  return _readDouble(this, offset, false, noAssert)                                                                    // 8139
}                                                                                                                      // 8140
                                                                                                                       // 8141
Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {                                                     // 8142
  if (!noAssert) {                                                                                                     // 8143
    assert(value !== undefined && value !== null, 'missing value')                                                     // 8144
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8145
    assert(offset < this.length, 'trying to write beyond buffer length')                                               // 8146
    verifuint(value, 0xff)                                                                                             // 8147
  }                                                                                                                    // 8148
                                                                                                                       // 8149
  if (offset >= this.length) return                                                                                    // 8150
                                                                                                                       // 8151
  this[offset] = value                                                                                                 // 8152
}                                                                                                                      // 8153
                                                                                                                       // 8154
function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {                                                   // 8155
  if (!noAssert) {                                                                                                     // 8156
    assert(value !== undefined && value !== null, 'missing value')                                                     // 8157
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8158
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8159
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')                                            // 8160
    verifuint(value, 0xffff)                                                                                           // 8161
  }                                                                                                                    // 8162
                                                                                                                       // 8163
  var len = buf.length                                                                                                 // 8164
  if (offset >= len)                                                                                                   // 8165
    return                                                                                                             // 8166
                                                                                                                       // 8167
  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {                                                         // 8168
    buf[offset + i] =                                                                                                  // 8169
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                                       // 8170
            (littleEndian ? i : 1 - i) * 8                                                                             // 8171
  }                                                                                                                    // 8172
}                                                                                                                      // 8173
                                                                                                                       // 8174
Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {                                                  // 8175
  _writeUInt16(this, value, offset, true, noAssert)                                                                    // 8176
}                                                                                                                      // 8177
                                                                                                                       // 8178
Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {                                                  // 8179
  _writeUInt16(this, value, offset, false, noAssert)                                                                   // 8180
}                                                                                                                      // 8181
                                                                                                                       // 8182
function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {                                                   // 8183
  if (!noAssert) {                                                                                                     // 8184
    assert(value !== undefined && value !== null, 'missing value')                                                     // 8185
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8186
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8187
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')                                            // 8188
    verifuint(value, 0xffffffff)                                                                                       // 8189
  }                                                                                                                    // 8190
                                                                                                                       // 8191
  var len = buf.length                                                                                                 // 8192
  if (offset >= len)                                                                                                   // 8193
    return                                                                                                             // 8194
                                                                                                                       // 8195
  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {                                                         // 8196
    buf[offset + i] =                                                                                                  // 8197
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                              // 8198
  }                                                                                                                    // 8199
}                                                                                                                      // 8200
                                                                                                                       // 8201
Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {                                                  // 8202
  _writeUInt32(this, value, offset, true, noAssert)                                                                    // 8203
}                                                                                                                      // 8204
                                                                                                                       // 8205
Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {                                                  // 8206
  _writeUInt32(this, value, offset, false, noAssert)                                                                   // 8207
}                                                                                                                      // 8208
                                                                                                                       // 8209
Buffer.prototype.writeInt8 = function (value, offset, noAssert) {                                                      // 8210
  if (!noAssert) {                                                                                                     // 8211
    assert(value !== undefined && value !== null, 'missing value')                                                     // 8212
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8213
    assert(offset < this.length, 'Trying to write beyond buffer length')                                               // 8214
    verifsint(value, 0x7f, -0x80)                                                                                      // 8215
  }                                                                                                                    // 8216
                                                                                                                       // 8217
  if (offset >= this.length)                                                                                           // 8218
    return                                                                                                             // 8219
                                                                                                                       // 8220
  if (value >= 0)                                                                                                      // 8221
    this.writeUInt8(value, offset, noAssert)                                                                           // 8222
  else                                                                                                                 // 8223
    this.writeUInt8(0xff + value + 1, offset, noAssert)                                                                // 8224
}                                                                                                                      // 8225
                                                                                                                       // 8226
function _writeInt16 (buf, value, offset, littleEndian, noAssert) {                                                    // 8227
  if (!noAssert) {                                                                                                     // 8228
    assert(value !== undefined && value !== null, 'missing value')                                                     // 8229
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8230
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8231
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')                                            // 8232
    verifsint(value, 0x7fff, -0x8000)                                                                                  // 8233
  }                                                                                                                    // 8234
                                                                                                                       // 8235
  var len = buf.length                                                                                                 // 8236
  if (offset >= len)                                                                                                   // 8237
    return                                                                                                             // 8238
                                                                                                                       // 8239
  if (value >= 0)                                                                                                      // 8240
    _writeUInt16(buf, value, offset, littleEndian, noAssert)                                                           // 8241
  else                                                                                                                 // 8242
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)                                              // 8243
}                                                                                                                      // 8244
                                                                                                                       // 8245
Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {                                                   // 8246
  _writeInt16(this, value, offset, true, noAssert)                                                                     // 8247
}                                                                                                                      // 8248
                                                                                                                       // 8249
Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {                                                   // 8250
  _writeInt16(this, value, offset, false, noAssert)                                                                    // 8251
}                                                                                                                      // 8252
                                                                                                                       // 8253
function _writeInt32 (buf, value, offset, littleEndian, noAssert) {                                                    // 8254
  if (!noAssert) {                                                                                                     // 8255
    assert(value !== undefined && value !== null, 'missing value')                                                     // 8256
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8257
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8258
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')                                            // 8259
    verifsint(value, 0x7fffffff, -0x80000000)                                                                          // 8260
  }                                                                                                                    // 8261
                                                                                                                       // 8262
  var len = buf.length                                                                                                 // 8263
  if (offset >= len)                                                                                                   // 8264
    return                                                                                                             // 8265
                                                                                                                       // 8266
  if (value >= 0)                                                                                                      // 8267
    _writeUInt32(buf, value, offset, littleEndian, noAssert)                                                           // 8268
  else                                                                                                                 // 8269
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)                                          // 8270
}                                                                                                                      // 8271
                                                                                                                       // 8272
Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {                                                   // 8273
  _writeInt32(this, value, offset, true, noAssert)                                                                     // 8274
}                                                                                                                      // 8275
                                                                                                                       // 8276
Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {                                                   // 8277
  _writeInt32(this, value, offset, false, noAssert)                                                                    // 8278
}                                                                                                                      // 8279
                                                                                                                       // 8280
function _writeFloat (buf, value, offset, littleEndian, noAssert) {                                                    // 8281
  if (!noAssert) {                                                                                                     // 8282
    assert(value !== undefined && value !== null, 'missing value')                                                     // 8283
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8284
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8285
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')                                            // 8286
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)                                               // 8287
  }                                                                                                                    // 8288
                                                                                                                       // 8289
  var len = buf.length                                                                                                 // 8290
  if (offset >= len)                                                                                                   // 8291
    return                                                                                                             // 8292
                                                                                                                       // 8293
  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 8294
}                                                                                                                      // 8295
                                                                                                                       // 8296
Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {                                                   // 8297
  _writeFloat(this, value, offset, true, noAssert)                                                                     // 8298
}                                                                                                                      // 8299
                                                                                                                       // 8300
Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {                                                   // 8301
  _writeFloat(this, value, offset, false, noAssert)                                                                    // 8302
}                                                                                                                      // 8303
                                                                                                                       // 8304
function _writeDouble (buf, value, offset, littleEndian, noAssert) {                                                   // 8305
  if (!noAssert) {                                                                                                     // 8306
    assert(value !== undefined && value !== null, 'missing value')                                                     // 8307
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')                                             // 8308
    assert(offset !== undefined && offset !== null, 'missing offset')                                                  // 8309
    assert(offset + 7 < buf.length,                                                                                    // 8310
        'Trying to write beyond buffer length')                                                                        // 8311
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)                                             // 8312
  }                                                                                                                    // 8313
                                                                                                                       // 8314
  var len = buf.length                                                                                                 // 8315
  if (offset >= len)                                                                                                   // 8316
    return                                                                                                             // 8317
                                                                                                                       // 8318
  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 8319
}                                                                                                                      // 8320
                                                                                                                       // 8321
Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {                                                  // 8322
  _writeDouble(this, value, offset, true, noAssert)                                                                    // 8323
}                                                                                                                      // 8324
                                                                                                                       // 8325
Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {                                                  // 8326
  _writeDouble(this, value, offset, false, noAssert)                                                                   // 8327
}                                                                                                                      // 8328
                                                                                                                       // 8329
Buffer.prototype.fill = function (value, start, end) {                                                                 // 8330
  if (!value) value = 0                                                                                                // 8331
  if (!start) start = 0                                                                                                // 8332
  if (!end) end = this.length                                                                                          // 8333
                                                                                                                       // 8334
  if (typeof value === 'string') {                                                                                     // 8335
    value = value.charCodeAt(0)                                                                                        // 8336
  }                                                                                                                    // 8337
                                                                                                                       // 8338
  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')                                          // 8339
  assert(end >= start, 'end < start')                                                                                  // 8340
                                                                                                                       // 8341
  if (end === start) return                                                                                            // 8342
  if (this.length === 0) return                                                                                        // 8343
                                                                                                                       // 8344
  assert(start >= 0 && start < this.length, 'start out of bounds')                                                     // 8345
  assert(end >= 0 && end <= this.length, 'end out of bounds')                                                          // 8346
                                                                                                                       // 8347
  for (var i = start; i < end; i++) {                                                                                  // 8348
    this[i] = value                                                                                                    // 8349
  }                                                                                                                    // 8350
}                                                                                                                      // 8351
                                                                                                                       // 8352
Buffer.prototype.inspect = function () {                                                                               // 8353
  var out = []                                                                                                         // 8354
  var len = this.length                                                                                                // 8355
  for (var i = 0; i < len; i++) {                                                                                      // 8356
    out[i] = toHex(this[i])                                                                                            // 8357
    if (i === exports.INSPECT_MAX_BYTES) {                                                                             // 8358
      out[i + 1] = '...'                                                                                               // 8359
      break                                                                                                            // 8360
    }                                                                                                                  // 8361
  }                                                                                                                    // 8362
  return '<Buffer ' + out.join(' ') + '>'                                                                              // 8363
}                                                                                                                      // 8364
                                                                                                                       // 8365
                                                                                                                       // 8366
Buffer.prototype.toArrayBuffer = function () {                                                                         // 8367
  if (typeof Uint8Array !== 'undefined') {                                                                             // 8368
    if (Buffer._useTypedArrays) {                                                                                      // 8369
      return (new Buffer(this)).buffer                                                                                 // 8370
    } else {                                                                                                           // 8371
      var buf = new Uint8Array(this.length)                                                                            // 8372
      for (var i = 0, len = buf.length; i < len; i += 1)                                                               // 8373
        buf[i] = this[i]                                                                                               // 8374
      return buf.buffer                                                                                                // 8375
    }                                                                                                                  // 8376
  } else {                                                                                                             // 8377
    throw new Error('Buffer.toArrayBuffer not supported in this browser')                                              // 8378
  }                                                                                                                    // 8379
}                                                                                                                      // 8380
                                                                                                                       // 8381
                                                                                                                       // 8382
function stringtrim (str) {                                                                                            // 8383
  if (str.trim) return str.trim()                                                                                      // 8384
  return str.replace(/^\s+|\s+$/g, '')                                                                                 // 8385
}                                                                                                                      // 8386
                                                                                                                       // 8387
var BP = Buffer.prototype                                                                                              // 8388
                                                                                                                       // 8389
                                                                                                                       // 8390
Buffer._augment = function (arr) {                                                                                     // 8391
  arr._isBuffer = true                                                                                                 // 8392
                                                                                                                       // 8393
  arr._get = arr.get                                                                                                   // 8394
  arr._set = arr.set                                                                                                   // 8395
                                                                                                                       // 8396
  arr.get = BP.get                                                                                                     // 8397
  arr.set = BP.set                                                                                                     // 8398
                                                                                                                       // 8399
  arr.write = BP.write                                                                                                 // 8400
  arr.toString = BP.toString                                                                                           // 8401
  arr.toLocaleString = BP.toString                                                                                     // 8402
  arr.toJSON = BP.toJSON                                                                                               // 8403
  arr.copy = BP.copy                                                                                                   // 8404
  arr.slice = BP.slice                                                                                                 // 8405
  arr.readUInt8 = BP.readUInt8                                                                                         // 8406
  arr.readUInt16LE = BP.readUInt16LE                                                                                   // 8407
  arr.readUInt16BE = BP.readUInt16BE                                                                                   // 8408
  arr.readUInt32LE = BP.readUInt32LE                                                                                   // 8409
  arr.readUInt32BE = BP.readUInt32BE                                                                                   // 8410
  arr.readInt8 = BP.readInt8                                                                                           // 8411
  arr.readInt16LE = BP.readInt16LE                                                                                     // 8412
  arr.readInt16BE = BP.readInt16BE                                                                                     // 8413
  arr.readInt32LE = BP.readInt32LE                                                                                     // 8414
  arr.readInt32BE = BP.readInt32BE                                                                                     // 8415
  arr.readFloatLE = BP.readFloatLE                                                                                     // 8416
  arr.readFloatBE = BP.readFloatBE                                                                                     // 8417
  arr.readDoubleLE = BP.readDoubleLE                                                                                   // 8418
  arr.readDoubleBE = BP.readDoubleBE                                                                                   // 8419
  arr.writeUInt8 = BP.writeUInt8                                                                                       // 8420
  arr.writeUInt16LE = BP.writeUInt16LE                                                                                 // 8421
  arr.writeUInt16BE = BP.writeUInt16BE                                                                                 // 8422
  arr.writeUInt32LE = BP.writeUInt32LE                                                                                 // 8423
  arr.writeUInt32BE = BP.writeUInt32BE                                                                                 // 8424
  arr.writeInt8 = BP.writeInt8                                                                                         // 8425
  arr.writeInt16LE = BP.writeInt16LE                                                                                   // 8426
  arr.writeInt16BE = BP.writeInt16BE                                                                                   // 8427
  arr.writeInt32LE = BP.writeInt32LE                                                                                   // 8428
  arr.writeInt32BE = BP.writeInt32BE                                                                                   // 8429
  arr.writeFloatLE = BP.writeFloatLE                                                                                   // 8430
  arr.writeFloatBE = BP.writeFloatBE                                                                                   // 8431
  arr.writeDoubleLE = BP.writeDoubleLE                                                                                 // 8432
  arr.writeDoubleBE = BP.writeDoubleBE                                                                                 // 8433
  arr.fill = BP.fill                                                                                                   // 8434
  arr.inspect = BP.inspect                                                                                             // 8435
  arr.toArrayBuffer = BP.toArrayBuffer                                                                                 // 8436
                                                                                                                       // 8437
  return arr                                                                                                           // 8438
}                                                                                                                      // 8439
                                                                                                                       // 8440
function clamp (index, len, defaultValue) {                                                                            // 8441
  if (typeof index !== 'number') return defaultValue                                                                   // 8442
  index = ~~index;  // Coerce to integer.                                                                              // 8443
  if (index >= len) return len                                                                                         // 8444
  if (index >= 0) return index                                                                                         // 8445
  index += len                                                                                                         // 8446
  if (index >= 0) return index                                                                                         // 8447
  return 0                                                                                                             // 8448
}                                                                                                                      // 8449
                                                                                                                       // 8450
function coerce (length) {                                                                                             // 8451
  length = ~~Math.ceil(+length)                                                                                        // 8452
  return length < 0 ? 0 : length                                                                                       // 8453
}                                                                                                                      // 8454
                                                                                                                       // 8455
function isArray (subject) {                                                                                           // 8456
  return (Array.isArray || function (subject) {                                                                        // 8457
    return Object.prototype.toString.call(subject) === '[object Array]'                                                // 8458
  })(subject)                                                                                                          // 8459
}                                                                                                                      // 8460
                                                                                                                       // 8461
function isArrayish (subject) {                                                                                        // 8462
  return isArray(subject) || Buffer.isBuffer(subject) ||                                                               // 8463
      subject && typeof subject === 'object' &&                                                                        // 8464
      typeof subject.length === 'number'                                                                               // 8465
}                                                                                                                      // 8466
                                                                                                                       // 8467
function toHex (n) {                                                                                                   // 8468
  if (n < 16) return '0' + n.toString(16)                                                                              // 8469
  return n.toString(16)                                                                                                // 8470
}                                                                                                                      // 8471
                                                                                                                       // 8472
function utf8ToBytes (str) {                                                                                           // 8473
  var byteArray = []                                                                                                   // 8474
  for (var i = 0; i < str.length; i++) {                                                                               // 8475
    var b = str.charCodeAt(i)                                                                                          // 8476
    if (b <= 0x7F)                                                                                                     // 8477
      byteArray.push(str.charCodeAt(i))                                                                                // 8478
    else {                                                                                                             // 8479
      var start = i                                                                                                    // 8480
      if (b >= 0xD800 && b <= 0xDFFF) i++                                                                              // 8481
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')                                           // 8482
      for (var j = 0; j < h.length; j++)                                                                               // 8483
        byteArray.push(parseInt(h[j], 16))                                                                             // 8484
    }                                                                                                                  // 8485
  }                                                                                                                    // 8486
  return byteArray                                                                                                     // 8487
}                                                                                                                      // 8488
                                                                                                                       // 8489
function asciiToBytes (str) {                                                                                          // 8490
  var byteArray = []                                                                                                   // 8491
  for (var i = 0; i < str.length; i++) {                                                                               // 8492
    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 8493
  }                                                                                                                    // 8494
  return byteArray                                                                                                     // 8495
}                                                                                                                      // 8496
                                                                                                                       // 8497
function utf16leToBytes (str) {                                                                                        // 8498
  var c, hi, lo                                                                                                        // 8499
  var byteArray = []                                                                                                   // 8500
  for (var i = 0; i < str.length; i++) {                                                                               // 8501
    c = str.charCodeAt(i)                                                                                              // 8502
    hi = c >> 8                                                                                                        // 8503
    lo = c % 256                                                                                                       // 8504
    byteArray.push(lo)                                                                                                 // 8505
    byteArray.push(hi)                                                                                                 // 8506
  }                                                                                                                    // 8507
                                                                                                                       // 8508
  return byteArray                                                                                                     // 8509
}                                                                                                                      // 8510
                                                                                                                       // 8511
function base64ToBytes (str) {                                                                                         // 8512
  return base64.toByteArray(str)                                                                                       // 8513
}                                                                                                                      // 8514
                                                                                                                       // 8515
function blitBuffer (src, dst, offset, length) {                                                                       // 8516
  var pos                                                                                                              // 8517
  for (var i = 0; i < length; i++) {                                                                                   // 8518
    if ((i + offset >= dst.length) || (i >= src.length))                                                               // 8519
      break                                                                                                            // 8520
    dst[i + offset] = src[i]                                                                                           // 8521
  }                                                                                                                    // 8522
  return i                                                                                                             // 8523
}                                                                                                                      // 8524
                                                                                                                       // 8525
function decodeUtf8Char (str) {                                                                                        // 8526
  try {                                                                                                                // 8527
    return decodeURIComponent(str)                                                                                     // 8528
  } catch (err) {                                                                                                      // 8529
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char                                                           // 8530
  }                                                                                                                    // 8531
}                                                                                                                      // 8532
                                                                                                                       // 8533
                                                                                                                       // 8534
function verifuint (value, max) {                                                                                      // 8535
  assert(typeof value === 'number', 'cannot write a non-number as a number')                                           // 8536
  assert(value >= 0, 'specified a negative value for writing an unsigned value')                                       // 8537
  assert(value <= max, 'value is larger than maximum value for type')                                                  // 8538
  assert(Math.floor(value) === value, 'value has a fractional component')                                              // 8539
}                                                                                                                      // 8540
                                                                                                                       // 8541
function verifsint (value, max, min) {                                                                                 // 8542
  assert(typeof value === 'number', 'cannot write a non-number as a number')                                           // 8543
  assert(value <= max, 'value larger than maximum allowed value')                                                      // 8544
  assert(value >= min, 'value smaller than minimum allowed value')                                                     // 8545
  assert(Math.floor(value) === value, 'value has a fractional component')                                              // 8546
}                                                                                                                      // 8547
                                                                                                                       // 8548
function verifIEEE754 (value, max, min) {                                                                              // 8549
  assert(typeof value === 'number', 'cannot write a non-number as a number')                                           // 8550
  assert(value <= max, 'value larger than maximum allowed value')                                                      // 8551
  assert(value >= min, 'value smaller than minimum allowed value')                                                     // 8552
}                                                                                                                      // 8553
                                                                                                                       // 8554
function assert (test, message) {                                                                                      // 8555
  if (!test) throw new Error(message || 'Failed assertion')                                                            // 8556
}                                                                                                                      // 8557
                                                                                                                       // 8558
},{"base64-js":63,"ieee754":64}],63:[function(require,module,exports){                                                 // 8559
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';                                       // 8560
                                                                                                                       // 8561
;(function (exports) {                                                                                                 // 8562
	'use strict';                                                                                                         // 8563
                                                                                                                       // 8564
  var Arr = (typeof Uint8Array !== 'undefined')                                                                        // 8565
    ? Uint8Array                                                                                                       // 8566
    : Array                                                                                                            // 8567
                                                                                                                       // 8568
	var PLUS   = '+'.charCodeAt(0)                                                                                        // 8569
	var SLASH  = '/'.charCodeAt(0)                                                                                        // 8570
	var NUMBER = '0'.charCodeAt(0)                                                                                        // 8571
	var LOWER  = 'a'.charCodeAt(0)                                                                                        // 8572
	var UPPER  = 'A'.charCodeAt(0)                                                                                        // 8573
	var PLUS_URL_SAFE = '-'.charCodeAt(0)                                                                                 // 8574
	var SLASH_URL_SAFE = '_'.charCodeAt(0)                                                                                // 8575
                                                                                                                       // 8576
	function decode (elt) {                                                                                               // 8577
		var code = elt.charCodeAt(0)                                                                                         // 8578
		if (code === PLUS ||                                                                                                 // 8579
		    code === PLUS_URL_SAFE)                                                                                          // 8580
			return 62 // '+'                                                                                                    // 8581
		if (code === SLASH ||                                                                                                // 8582
		    code === SLASH_URL_SAFE)                                                                                         // 8583
			return 63 // '/'                                                                                                    // 8584
		if (code < NUMBER)                                                                                                   // 8585
			return -1 //no match                                                                                                // 8586
		if (code < NUMBER + 10)                                                                                              // 8587
			return code - NUMBER + 26 + 26                                                                                      // 8588
		if (code < UPPER + 26)                                                                                               // 8589
			return code - UPPER                                                                                                 // 8590
		if (code < LOWER + 26)                                                                                               // 8591
			return code - LOWER + 26                                                                                            // 8592
	}                                                                                                                     // 8593
                                                                                                                       // 8594
	function b64ToByteArray (b64) {                                                                                       // 8595
		var i, j, l, tmp, placeHolders, arr                                                                                  // 8596
                                                                                                                       // 8597
		if (b64.length % 4 > 0) {                                                                                            // 8598
			throw new Error('Invalid string. Length must be a multiple of 4')                                                   // 8599
		}                                                                                                                    // 8600
                                                                                                                       // 8601
		var len = b64.length                                                                                                 // 8602
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0                                 // 8603
                                                                                                                       // 8604
		arr = new Arr(b64.length * 3 / 4 - placeHolders)                                                                     // 8605
                                                                                                                       // 8606
		l = placeHolders > 0 ? b64.length - 4 : b64.length                                                                   // 8607
                                                                                                                       // 8608
		var L = 0                                                                                                            // 8609
                                                                                                                       // 8610
		function push (v) {                                                                                                  // 8611
			arr[L++] = v                                                                                                        // 8612
		}                                                                                                                    // 8613
                                                                                                                       // 8614
		for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 8615
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)                                                                                        // 8617
			push((tmp & 0xFF00) >> 8)                                                                                           // 8618
			push(tmp & 0xFF)                                                                                                    // 8619
		}                                                                                                                    // 8620
                                                                                                                       // 8621
		if (placeHolders === 2) {                                                                                            // 8622
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)                                               // 8623
			push(tmp & 0xFF)                                                                                                    // 8624
		} else if (placeHolders === 1) {                                                                                     // 8625
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)           // 8626
			push((tmp >> 8) & 0xFF)                                                                                             // 8627
			push(tmp & 0xFF)                                                                                                    // 8628
		}                                                                                                                    // 8629
                                                                                                                       // 8630
		return arr                                                                                                           // 8631
	}                                                                                                                     // 8632
                                                                                                                       // 8633
	function uint8ToBase64 (uint8) {                                                                                      // 8634
		var i,                                                                                                               // 8635
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes                                               // 8636
			output = "",                                                                                                        // 8637
			temp, length                                                                                                        // 8638
                                                                                                                       // 8639
		function encode (num) {                                                                                              // 8640
			return lookup.charAt(num)                                                                                           // 8641
		}                                                                                                                    // 8642
                                                                                                                       // 8643
		function tripletToBase64 (num) {                                                                                     // 8644
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)           // 8645
		}                                                                                                                    // 8646
                                                                                                                       // 8647
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {                                                // 8648
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 8649
			output += tripletToBase64(temp)                                                                                     // 8650
		}                                                                                                                    // 8651
                                                                                                                       // 8652
		switch (extraBytes) {                                                                                                // 8653
			case 1:                                                                                                             // 8654
				temp = uint8[uint8.length - 1]                                                                                     // 8655
				output += encode(temp >> 2)                                                                                        // 8656
				output += encode((temp << 4) & 0x3F)                                                                               // 8657
				output += '=='                                                                                                     // 8658
				break                                                                                                              // 8659
			case 2:                                                                                                             // 8660
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])                                                  // 8661
				output += encode(temp >> 10)                                                                                       // 8662
				output += encode((temp >> 4) & 0x3F)                                                                               // 8663
				output += encode((temp << 2) & 0x3F)                                                                               // 8664
				output += '='                                                                                                      // 8665
				break                                                                                                              // 8666
		}                                                                                                                    // 8667
                                                                                                                       // 8668
		return output                                                                                                        // 8669
	}                                                                                                                     // 8670
                                                                                                                       // 8671
	exports.toByteArray = b64ToByteArray                                                                                  // 8672
	exports.fromByteArray = uint8ToBase64                                                                                 // 8673
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))                                                    // 8674
                                                                                                                       // 8675
},{}],64:[function(require,module,exports){                                                                            // 8676
exports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 8677
  var e, m                                                                                                             // 8678
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 8679
  var eMax = (1 << eLen) - 1                                                                                           // 8680
  var eBias = eMax >> 1                                                                                                // 8681
  var nBits = -7                                                                                                       // 8682
  var i = isLE ? (nBytes - 1) : 0                                                                                      // 8683
  var d = isLE ? -1 : 1                                                                                                // 8684
  var s = buffer[offset + i]                                                                                           // 8685
                                                                                                                       // 8686
  i += d                                                                                                               // 8687
                                                                                                                       // 8688
  e = s & ((1 << (-nBits)) - 1)                                                                                        // 8689
  s >>= (-nBits)                                                                                                       // 8690
  nBits += eLen                                                                                                        // 8691
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 8692
                                                                                                                       // 8693
  m = e & ((1 << (-nBits)) - 1)                                                                                        // 8694
  e >>= (-nBits)                                                                                                       // 8695
  nBits += mLen                                                                                                        // 8696
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 8697
                                                                                                                       // 8698
  if (e === 0) {                                                                                                       // 8699
    e = 1 - eBias                                                                                                      // 8700
  } else if (e === eMax) {                                                                                             // 8701
    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 8702
  } else {                                                                                                             // 8703
    m = m + Math.pow(2, mLen)                                                                                          // 8704
    e = e - eBias                                                                                                      // 8705
  }                                                                                                                    // 8706
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 8707
}                                                                                                                      // 8708
                                                                                                                       // 8709
exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 8710
  var e, m, c                                                                                                          // 8711
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 8712
  var eMax = (1 << eLen) - 1                                                                                           // 8713
  var eBias = eMax >> 1                                                                                                // 8714
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 8715
  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 8716
  var d = isLE ? 1 : -1                                                                                                // 8717
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 8718
                                                                                                                       // 8719
  value = Math.abs(value)                                                                                              // 8720
                                                                                                                       // 8721
  if (isNaN(value) || value === Infinity) {                                                                            // 8722
    m = isNaN(value) ? 1 : 0                                                                                           // 8723
    e = eMax                                                                                                           // 8724
  } else {                                                                                                             // 8725
    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 8726
    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 8727
      e--                                                                                                              // 8728
      c *= 2                                                                                                           // 8729
    }                                                                                                                  // 8730
    if (e + eBias >= 1) {                                                                                              // 8731
      value += rt / c                                                                                                  // 8732
    } else {                                                                                                           // 8733
      value += rt * Math.pow(2, 1 - eBias)                                                                             // 8734
    }                                                                                                                  // 8735
    if (value * c >= 2) {                                                                                              // 8736
      e++                                                                                                              // 8737
      c /= 2                                                                                                           // 8738
    }                                                                                                                  // 8739
                                                                                                                       // 8740
    if (e + eBias >= eMax) {                                                                                           // 8741
      m = 0                                                                                                            // 8742
      e = eMax                                                                                                         // 8743
    } else if (e + eBias >= 1) {                                                                                       // 8744
      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 8745
      e = e + eBias                                                                                                    // 8746
    } else {                                                                                                           // 8747
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 8748
      e = 0                                                                                                            // 8749
    }                                                                                                                  // 8750
  }                                                                                                                    // 8751
                                                                                                                       // 8752
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 8753
                                                                                                                       // 8754
  e = (e << mLen) | m                                                                                                  // 8755
  eLen += mLen                                                                                                         // 8756
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 8757
                                                                                                                       // 8758
  buffer[offset + i - d] |= s * 128                                                                                    // 8759
}                                                                                                                      // 8760
                                                                                                                       // 8761
},{}],65:[function(require,module,exports){                                                                            // 8762
var Buffer = require('buffer').Buffer;                                                                                 // 8763
var intSize = 4;                                                                                                       // 8764
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);                                                              // 8765
var chrsz = 8;                                                                                                         // 8766
                                                                                                                       // 8767
function toArray(buf, bigEndian) {                                                                                     // 8768
  if ((buf.length % intSize) !== 0) {                                                                                  // 8769
    var len = buf.length + (intSize - (buf.length % intSize));                                                         // 8770
    buf = Buffer.concat([buf, zeroBuffer], len);                                                                       // 8771
  }                                                                                                                    // 8772
                                                                                                                       // 8773
  var arr = [];                                                                                                        // 8774
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;                                                              // 8775
  for (var i = 0; i < buf.length; i += intSize) {                                                                      // 8776
    arr.push(fn.call(buf, i));                                                                                         // 8777
  }                                                                                                                    // 8778
  return arr;                                                                                                          // 8779
}                                                                                                                      // 8780
                                                                                                                       // 8781
function toBuffer(arr, size, bigEndian) {                                                                              // 8782
  var buf = new Buffer(size);                                                                                          // 8783
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;                                                            // 8784
  for (var i = 0; i < arr.length; i++) {                                                                               // 8785
    fn.call(buf, arr[i], i * 4, true);                                                                                 // 8786
  }                                                                                                                    // 8787
  return buf;                                                                                                          // 8788
}                                                                                                                      // 8789
                                                                                                                       // 8790
function hash(buf, fn, hashSize, bigEndian) {                                                                          // 8791
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);                                                                    // 8792
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);                                                           // 8793
  return toBuffer(arr, hashSize, bigEndian);                                                                           // 8794
}                                                                                                                      // 8795
                                                                                                                       // 8796
module.exports = { hash: hash };                                                                                       // 8797
                                                                                                                       // 8798
},{"buffer":62}],66:[function(require,module,exports){                                                                 // 8799
var Buffer = require('buffer').Buffer                                                                                  // 8800
var sha = require('./sha')                                                                                             // 8801
var sha256 = require('./sha256')                                                                                       // 8802
var rng = require('./rng')                                                                                             // 8803
var md5 = require('./md5')                                                                                             // 8804
                                                                                                                       // 8805
var algorithms = {                                                                                                     // 8806
  sha1: sha,                                                                                                           // 8807
  sha256: sha256,                                                                                                      // 8808
  md5: md5                                                                                                             // 8809
}                                                                                                                      // 8810
                                                                                                                       // 8811
var blocksize = 64                                                                                                     // 8812
var zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)                                                             // 8813
function hmac(fn, key, data) {                                                                                         // 8814
  if(!Buffer.isBuffer(key)) key = new Buffer(key)                                                                      // 8815
  if(!Buffer.isBuffer(data)) data = new Buffer(data)                                                                   // 8816
                                                                                                                       // 8817
  if(key.length > blocksize) {                                                                                         // 8818
    key = fn(key)                                                                                                      // 8819
  } else if(key.length < blocksize) {                                                                                  // 8820
    key = Buffer.concat([key, zeroBuffer], blocksize)                                                                  // 8821
  }                                                                                                                    // 8822
                                                                                                                       // 8823
  var ipad = new Buffer(blocksize), opad = new Buffer(blocksize)                                                       // 8824
  for(var i = 0; i < blocksize; i++) {                                                                                 // 8825
    ipad[i] = key[i] ^ 0x36                                                                                            // 8826
    opad[i] = key[i] ^ 0x5C                                                                                            // 8827
  }                                                                                                                    // 8828
                                                                                                                       // 8829
  var hash = fn(Buffer.concat([ipad, data]))                                                                           // 8830
  return fn(Buffer.concat([opad, hash]))                                                                               // 8831
}                                                                                                                      // 8832
                                                                                                                       // 8833
function hash(alg, key) {                                                                                              // 8834
  alg = alg || 'sha1'                                                                                                  // 8835
  var fn = algorithms[alg]                                                                                             // 8836
  var bufs = []                                                                                                        // 8837
  var length = 0                                                                                                       // 8838
  if(!fn) error('algorithm:', alg, 'is not yet supported')                                                             // 8839
  return {                                                                                                             // 8840
    update: function (data) {                                                                                          // 8841
      if(!Buffer.isBuffer(data)) data = new Buffer(data)                                                               // 8842
                                                                                                                       // 8843
      bufs.push(data)                                                                                                  // 8844
      length += data.length                                                                                            // 8845
      return this                                                                                                      // 8846
    },                                                                                                                 // 8847
    digest: function (enc) {                                                                                           // 8848
      var buf = Buffer.concat(bufs)                                                                                    // 8849
      var r = key ? hmac(fn, key, buf) : fn(buf)                                                                       // 8850
      bufs = null                                                                                                      // 8851
      return enc ? r.toString(enc) : r                                                                                 // 8852
    }                                                                                                                  // 8853
  }                                                                                                                    // 8854
}                                                                                                                      // 8855
                                                                                                                       // 8856
function error () {                                                                                                    // 8857
  var m = [].slice.call(arguments).join(' ')                                                                           // 8858
  throw new Error([                                                                                                    // 8859
    m,                                                                                                                 // 8860
    'we accept pull requests',                                                                                         // 8861
    'http://github.com/dominictarr/crypto-browserify'                                                                  // 8862
    ].join('\n'))                                                                                                      // 8863
}                                                                                                                      // 8864
                                                                                                                       // 8865
exports.createHash = function (alg) { return hash(alg) }                                                               // 8866
exports.createHmac = function (alg, key) { return hash(alg, key) }                                                     // 8867
exports.randomBytes = function(size, callback) {                                                                       // 8868
  if (callback && callback.call) {                                                                                     // 8869
    try {                                                                                                              // 8870
      callback.call(this, undefined, new Buffer(rng(size)))                                                            // 8871
    } catch (err) { callback(err) }                                                                                    // 8872
  } else {                                                                                                             // 8873
    return new Buffer(rng(size))                                                                                       // 8874
  }                                                                                                                    // 8875
}                                                                                                                      // 8876
                                                                                                                       // 8877
function each(a, f) {                                                                                                  // 8878
  for(var i in a)                                                                                                      // 8879
    f(a[i], i)                                                                                                         // 8880
}                                                                                                                      // 8881
                                                                                                                       // 8882
each(['createCredentials'                                                                                              // 8883
, 'createCipher'                                                                                                       // 8884
, 'createCipheriv'                                                                                                     // 8885
, 'createDecipher'                                                                                                     // 8886
, 'createDecipheriv'                                                                                                   // 8887
, 'createSign'                                                                                                         // 8888
, 'createVerify'                                                                                                       // 8889
, 'createDiffieHellman'                                                                                                // 8890
, 'pbkdf2'], function (name) {                                                                                         // 8891
  exports[name] = function () {                                                                                        // 8892
    error('sorry,', name, 'is not implemented yet')                                                                    // 8893
  }                                                                                                                    // 8894
})                                                                                                                     // 8895
                                                                                                                       // 8896
},{"./md5":67,"./rng":68,"./sha":69,"./sha256":70,"buffer":62}],67:[function(require,module,exports){                  // 8897
                                                                                                                       // 8898
                                                                                                                       // 8899
var helpers = require('./helpers');                                                                                    // 8900
                                                                                                                       // 8901
                                                                                                                       // 8902
function md5_vm_test()                                                                                                 // 8903
{                                                                                                                      // 8904
  return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72";                                                         // 8905
}                                                                                                                      // 8906
                                                                                                                       // 8907
                                                                                                                       // 8908
function core_md5(x, len)                                                                                              // 8909
{                                                                                                                      // 8910
                                                                                                                       // 8911
  x[len >> 5] |= 0x80 << ((len) % 32);                                                                                 // 8912
  x[(((len + 64) >>> 9) << 4) + 14] = len;                                                                             // 8913
                                                                                                                       // 8914
  var a =  1732584193;                                                                                                 // 8915
  var b = -271733879;                                                                                                  // 8916
  var c = -1732584194;                                                                                                 // 8917
  var d =  271733878;                                                                                                  // 8918
                                                                                                                       // 8919
  for(var i = 0; i < x.length; i += 16)                                                                                // 8920
  {                                                                                                                    // 8921
    var olda = a;                                                                                                      // 8922
    var oldb = b;                                                                                                      // 8923
    var oldc = c;                                                                                                      // 8924
    var oldd = d;                                                                                                      // 8925
                                                                                                                       // 8926
    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);                                                                   // 8927
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);                                                                   // 8928
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);                                                                   // 8929
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);                                                                  // 8930
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);                                                                   // 8931
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);                                                                  // 8932
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);                                                                  // 8933
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);                                                                    // 8934
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);                                                                  // 8935
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);                                                                  // 8936
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);                                                                       // 8937
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);                                                                  // 8938
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);                                                                  // 8939
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);                                                                    // 8940
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);                                                                  // 8941
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);                                                                  // 8942
                                                                                                                       // 8943
    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);                                                                   // 8944
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);                                                                  // 8945
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);                                                                   // 8946
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);                                                                   // 8947
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);                                                                   // 8948
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);                                                                    // 8949
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);                                                                   // 8950
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);                                                                   // 8951
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);                                                                   // 8952
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);                                                                  // 8953
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);                                                                   // 8954
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);                                                                  // 8955
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);                                                                  // 8956
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);                                                                    // 8957
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);                                                                  // 8958
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);                                                                  // 8959
                                                                                                                       // 8960
    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);                                                                      // 8961
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);                                                                  // 8962
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);                                                                  // 8963
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);                                                                    // 8964
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);                                                                  // 8965
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);                                                                  // 8966
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);                                                                   // 8967
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);                                                                  // 8968
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);                                                                   // 8969
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);                                                                   // 8970
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);                                                                   // 8971
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);                                                                    // 8972
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);                                                                   // 8973
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);                                                                   // 8974
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);                                                                   // 8975
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);                                                                   // 8976
                                                                                                                       // 8977
    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);                                                                   // 8978
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);                                                                  // 8979
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);                                                                  // 8980
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);                                                                    // 8981
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);                                                                  // 8982
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);                                                                  // 8983
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);                                                                     // 8984
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);                                                                  // 8985
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);                                                                  // 8986
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);                                                                    // 8987
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);                                                                  // 8988
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);                                                                  // 8989
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);                                                                   // 8990
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);                                                                  // 8991
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);                                                                   // 8992
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);                                                                   // 8993
                                                                                                                       // 8994
    a = safe_add(a, olda);                                                                                             // 8995
    b = safe_add(b, oldb);                                                                                             // 8996
    c = safe_add(c, oldc);                                                                                             // 8997
    d = safe_add(d, oldd);                                                                                             // 8998
  }                                                                                                                    // 8999
  return Array(a, b, c, d);                                                                                            // 9000
                                                                                                                       // 9001
}                                                                                                                      // 9002
                                                                                                                       // 9003
                                                                                                                       // 9004
function md5_cmn(q, a, b, x, s, t)                                                                                     // 9005
{                                                                                                                      // 9006
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);                                             // 9007
}                                                                                                                      // 9008
function md5_ff(a, b, c, d, x, s, t)                                                                                   // 9009
{                                                                                                                      // 9010
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);                                                                 // 9011
}                                                                                                                      // 9012
function md5_gg(a, b, c, d, x, s, t)                                                                                   // 9013
{                                                                                                                      // 9014
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);                                                                 // 9015
}                                                                                                                      // 9016
function md5_hh(a, b, c, d, x, s, t)                                                                                   // 9017
{                                                                                                                      // 9018
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);                                                                            // 9019
}                                                                                                                      // 9020
function md5_ii(a, b, c, d, x, s, t)                                                                                   // 9021
{                                                                                                                      // 9022
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);                                                                       // 9023
}                                                                                                                      // 9024
                                                                                                                       // 9025
                                                                                                                       // 9026
function safe_add(x, y)                                                                                                // 9027
{                                                                                                                      // 9028
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                               // 9029
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                                       // 9030
  return (msw << 16) | (lsw & 0xFFFF);                                                                                 // 9031
}                                                                                                                      // 9032
                                                                                                                       // 9033
                                                                                                                       // 9034
function bit_rol(num, cnt)                                                                                             // 9035
{                                                                                                                      // 9036
  return (num << cnt) | (num >>> (32 - cnt));                                                                          // 9037
}                                                                                                                      // 9038
                                                                                                                       // 9039
module.exports = function md5(buf) {                                                                                   // 9040
  return helpers.hash(buf, core_md5, 16);                                                                              // 9041
};                                                                                                                     // 9042
                                                                                                                       // 9043
},{"./helpers":65}],68:[function(require,module,exports){                                                              // 9044
(function() {                                                                                                          // 9045
  var _global = this;                                                                                                  // 9046
                                                                                                                       // 9047
  var mathRNG, whatwgRNG;                                                                                              // 9048
                                                                                                                       // 9049
  mathRNG = function(size) {                                                                                           // 9050
    var bytes = new Array(size);                                                                                       // 9051
    var r;                                                                                                             // 9052
                                                                                                                       // 9053
    for (var i = 0, r; i < size; i++) {                                                                                // 9054
      if ((i & 0x03) == 0) r = Math.random() * 0x100000000;                                                            // 9055
      bytes[i] = r >>> ((i & 0x03) << 3) & 0xff;                                                                       // 9056
    }                                                                                                                  // 9057
                                                                                                                       // 9058
    return bytes;                                                                                                      // 9059
  }                                                                                                                    // 9060
                                                                                                                       // 9061
  if (_global.crypto && crypto.getRandomValues) {                                                                      // 9062
    whatwgRNG = function(size) {                                                                                       // 9063
      var bytes = new Uint8Array(size);                                                                                // 9064
      crypto.getRandomValues(bytes);                                                                                   // 9065
      return bytes;                                                                                                    // 9066
    }                                                                                                                  // 9067
  }                                                                                                                    // 9068
                                                                                                                       // 9069
  module.exports = whatwgRNG || mathRNG;                                                                               // 9070
                                                                                                                       // 9071
}())                                                                                                                   // 9072
                                                                                                                       // 9073
},{}],69:[function(require,module,exports){                                                                            // 9074
                                                                                                                       // 9075
                                                                                                                       // 9076
var helpers = require('./helpers');                                                                                    // 9077
                                                                                                                       // 9078
                                                                                                                       // 9079
function core_sha1(x, len)                                                                                             // 9080
{                                                                                                                      // 9081
                                                                                                                       // 9082
  x[len >> 5] |= 0x80 << (24 - len % 32);                                                                              // 9083
  x[((len + 64 >> 9) << 4) + 15] = len;                                                                                // 9084
                                                                                                                       // 9085
  var w = Array(80);                                                                                                   // 9086
  var a =  1732584193;                                                                                                 // 9087
  var b = -271733879;                                                                                                  // 9088
  var c = -1732584194;                                                                                                 // 9089
  var d =  271733878;                                                                                                  // 9090
  var e = -1009589776;                                                                                                 // 9091
                                                                                                                       // 9092
  for(var i = 0; i < x.length; i += 16)                                                                                // 9093
  {                                                                                                                    // 9094
    var olda = a;                                                                                                      // 9095
    var oldb = b;                                                                                                      // 9096
    var oldc = c;                                                                                                      // 9097
    var oldd = d;                                                                                                      // 9098
    var olde = e;                                                                                                      // 9099
                                                                                                                       // 9100
    for(var j = 0; j < 80; j++)                                                                                        // 9101
    {                                                                                                                  // 9102
      if(j < 16) w[j] = x[i + j];                                                                                      // 9103
      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);                                                         // 9104
      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),                                                       // 9105
                       safe_add(safe_add(e, w[j]), sha1_kt(j)));                                                       // 9106
      e = d;                                                                                                           // 9107
      d = c;                                                                                                           // 9108
      c = rol(b, 30);                                                                                                  // 9109
      b = a;                                                                                                           // 9110
      a = t;                                                                                                           // 9111
    }                                                                                                                  // 9112
                                                                                                                       // 9113
    a = safe_add(a, olda);                                                                                             // 9114
    b = safe_add(b, oldb);                                                                                             // 9115
    c = safe_add(c, oldc);                                                                                             // 9116
    d = safe_add(d, oldd);                                                                                             // 9117
    e = safe_add(e, olde);                                                                                             // 9118
  }                                                                                                                    // 9119
  return Array(a, b, c, d, e);                                                                                         // 9120
                                                                                                                       // 9121
}                                                                                                                      // 9122
                                                                                                                       // 9123
                                                                                                                       // 9124
function sha1_ft(t, b, c, d)                                                                                           // 9125
{                                                                                                                      // 9126
  if(t < 20) return (b & c) | ((~b) & d);                                                                              // 9127
  if(t < 40) return b ^ c ^ d;                                                                                         // 9128
  if(t < 60) return (b & c) | (b & d) | (c & d);                                                                       // 9129
  return b ^ c ^ d;                                                                                                    // 9130
}                                                                                                                      // 9131
                                                                                                                       // 9132
                                                                                                                       // 9133
function sha1_kt(t)                                                                                                    // 9134
{                                                                                                                      // 9135
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :                                                             // 9136
         (t < 60) ? -1894007588 : -899497514;                                                                          // 9137
}                                                                                                                      // 9138
                                                                                                                       // 9139
                                                                                                                       // 9140
function safe_add(x, y)                                                                                                // 9141
{                                                                                                                      // 9142
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                               // 9143
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                                       // 9144
  return (msw << 16) | (lsw & 0xFFFF);                                                                                 // 9145
}                                                                                                                      // 9146
                                                                                                                       // 9147
                                                                                                                       // 9148
function rol(num, cnt)                                                                                                 // 9149
{                                                                                                                      // 9150
  return (num << cnt) | (num >>> (32 - cnt));                                                                          // 9151
}                                                                                                                      // 9152
                                                                                                                       // 9153
module.exports = function sha1(buf) {                                                                                  // 9154
  return helpers.hash(buf, core_sha1, 20, true);                                                                       // 9155
};                                                                                                                     // 9156
                                                                                                                       // 9157
},{"./helpers":65}],70:[function(require,module,exports){                                                              // 9158
                                                                                                                       // 9159
                                                                                                                       // 9160
                                                                                                                       // 9161
var helpers = require('./helpers');                                                                                    // 9162
                                                                                                                       // 9163
var safe_add = function(x, y) {                                                                                        // 9164
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                               // 9165
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                                       // 9166
  return (msw << 16) | (lsw & 0xFFFF);                                                                                 // 9167
};                                                                                                                     // 9168
                                                                                                                       // 9169
var S = function(X, n) {                                                                                               // 9170
  return (X >>> n) | (X << (32 - n));                                                                                  // 9171
};                                                                                                                     // 9172
                                                                                                                       // 9173
var R = function(X, n) {                                                                                               // 9174
  return (X >>> n);                                                                                                    // 9175
};                                                                                                                     // 9176
                                                                                                                       // 9177
var Ch = function(x, y, z) {                                                                                           // 9178
  return ((x & y) ^ ((~x) & z));                                                                                       // 9179
};                                                                                                                     // 9180
                                                                                                                       // 9181
var Maj = function(x, y, z) {                                                                                          // 9182
  return ((x & y) ^ (x & z) ^ (y & z));                                                                                // 9183
};                                                                                                                     // 9184
                                                                                                                       // 9185
var Sigma0256 = function(x) {                                                                                          // 9186
  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));                                                                              // 9187
};                                                                                                                     // 9188
                                                                                                                       // 9189
var Sigma1256 = function(x) {                                                                                          // 9190
  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));                                                                              // 9191
};                                                                                                                     // 9192
                                                                                                                       // 9193
var Gamma0256 = function(x) {                                                                                          // 9194
  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));                                                                               // 9195
};                                                                                                                     // 9196
                                                                                                                       // 9197
var Gamma1256 = function(x) {                                                                                          // 9198
  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));                                                                             // 9199
};                                                                                                                     // 9200
                                                                                                                       // 9201
var core_sha256 = function(m, l) {                                                                                     // 9202
  var K = new Array(0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0xFC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x6CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2);
  var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
    var W = new Array(64);                                                                                             // 9205
    var a, b, c, d, e, f, g, h, i, j;                                                                                  // 9206
    var T1, T2;                                                                                                        // 9207
                                                                                                                       // 9208
  m[l >> 5] |= 0x80 << (24 - l % 32);                                                                                  // 9209
  m[((l + 64 >> 9) << 4) + 15] = l;                                                                                    // 9210
  for (var i = 0; i < m.length; i += 16) {                                                                             // 9211
    a = HASH[0]; b = HASH[1]; c = HASH[2]; d = HASH[3]; e = HASH[4]; f = HASH[5]; g = HASH[6]; h = HASH[7];            // 9212
    for (var j = 0; j < 64; j++) {                                                                                     // 9213
      if (j < 16) {                                                                                                    // 9214
        W[j] = m[j + i];                                                                                               // 9215
      } else {                                                                                                         // 9216
        W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);           // 9217
      }                                                                                                                // 9218
      T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);                           // 9219
      T2 = safe_add(Sigma0256(a), Maj(a, b, c));                                                                       // 9220
      h = g; g = f; f = e; e = safe_add(d, T1); d = c; c = b; b = a; a = safe_add(T1, T2);                             // 9221
    }                                                                                                                  // 9222
    HASH[0] = safe_add(a, HASH[0]); HASH[1] = safe_add(b, HASH[1]); HASH[2] = safe_add(c, HASH[2]); HASH[3] = safe_add(d, HASH[3]);
    HASH[4] = safe_add(e, HASH[4]); HASH[5] = safe_add(f, HASH[5]); HASH[6] = safe_add(g, HASH[6]); HASH[7] = safe_add(h, HASH[7]);
  }                                                                                                                    // 9225
  return HASH;                                                                                                         // 9226
};                                                                                                                     // 9227
                                                                                                                       // 9228
module.exports = function sha256(buf) {                                                                                // 9229
  return helpers.hash(buf, core_sha256, 32, true);                                                                     // 9230
};                                                                                                                     // 9231
                                                                                                                       // 9232
},{"./helpers":65}],71:[function(require,module,exports){                                                              // 9233
                                                                                                                       // 9234
function EventEmitter() {                                                                                              // 9235
  this._events = this._events || {};                                                                                   // 9236
  this._maxListeners = this._maxListeners || undefined;                                                                // 9237
}                                                                                                                      // 9238
module.exports = EventEmitter;                                                                                         // 9239
                                                                                                                       // 9240
EventEmitter.EventEmitter = EventEmitter;                                                                              // 9241
                                                                                                                       // 9242
EventEmitter.prototype._events = undefined;                                                                            // 9243
EventEmitter.prototype._maxListeners = undefined;                                                                      // 9244
                                                                                                                       // 9245
EventEmitter.defaultMaxListeners = 10;                                                                                 // 9246
                                                                                                                       // 9247
EventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 9248
  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 9249
    throw TypeError('n must be a positive number');                                                                    // 9250
  this._maxListeners = n;                                                                                              // 9251
  return this;                                                                                                         // 9252
};                                                                                                                     // 9253
                                                                                                                       // 9254
EventEmitter.prototype.emit = function(type) {                                                                         // 9255
  var er, handler, len, args, i, listeners;                                                                            // 9256
                                                                                                                       // 9257
  if (!this._events)                                                                                                   // 9258
    this._events = {};                                                                                                 // 9259
                                                                                                                       // 9260
  if (type === 'error') {                                                                                              // 9261
    if (!this._events.error ||                                                                                         // 9262
        (isObject(this._events.error) && !this._events.error.length)) {                                                // 9263
      er = arguments[1];                                                                                               // 9264
      if (er instanceof Error) {                                                                                       // 9265
        throw er; // Unhandled 'error' event                                                                           // 9266
      }                                                                                                                // 9267
      throw TypeError('Uncaught, unspecified "error" event.');                                                         // 9268
    }                                                                                                                  // 9269
  }                                                                                                                    // 9270
                                                                                                                       // 9271
  handler = this._events[type];                                                                                        // 9272
                                                                                                                       // 9273
  if (isUndefined(handler))                                                                                            // 9274
    return false;                                                                                                      // 9275
                                                                                                                       // 9276
  if (isFunction(handler)) {                                                                                           // 9277
    switch (arguments.length) {                                                                                        // 9278
      case 1:                                                                                                          // 9279
        handler.call(this);                                                                                            // 9280
        break;                                                                                                         // 9281
      case 2:                                                                                                          // 9282
        handler.call(this, arguments[1]);                                                                              // 9283
        break;                                                                                                         // 9284
      case 3:                                                                                                          // 9285
        handler.call(this, arguments[1], arguments[2]);                                                                // 9286
        break;                                                                                                         // 9287
      default:                                                                                                         // 9288
        len = arguments.length;                                                                                        // 9289
        args = new Array(len - 1);                                                                                     // 9290
        for (i = 1; i < len; i++)                                                                                      // 9291
          args[i - 1] = arguments[i];                                                                                  // 9292
        handler.apply(this, args);                                                                                     // 9293
    }                                                                                                                  // 9294
  } else if (isObject(handler)) {                                                                                      // 9295
    len = arguments.length;                                                                                            // 9296
    args = new Array(len - 1);                                                                                         // 9297
    for (i = 1; i < len; i++)                                                                                          // 9298
      args[i - 1] = arguments[i];                                                                                      // 9299
                                                                                                                       // 9300
    listeners = handler.slice();                                                                                       // 9301
    len = listeners.length;                                                                                            // 9302
    for (i = 0; i < len; i++)                                                                                          // 9303
      listeners[i].apply(this, args);                                                                                  // 9304
  }                                                                                                                    // 9305
                                                                                                                       // 9306
  return true;                                                                                                         // 9307
};                                                                                                                     // 9308
                                                                                                                       // 9309
EventEmitter.prototype.addListener = function(type, listener) {                                                        // 9310
  var m;                                                                                                               // 9311
                                                                                                                       // 9312
  if (!isFunction(listener))                                                                                           // 9313
    throw TypeError('listener must be a function');                                                                    // 9314
                                                                                                                       // 9315
  if (!this._events)                                                                                                   // 9316
    this._events = {};                                                                                                 // 9317
                                                                                                                       // 9318
  if (this._events.newListener)                                                                                        // 9319
    this.emit('newListener', type,                                                                                     // 9320
              isFunction(listener.listener) ?                                                                          // 9321
              listener.listener : listener);                                                                           // 9322
                                                                                                                       // 9323
  if (!this._events[type])                                                                                             // 9324
    this._events[type] = listener;                                                                                     // 9325
  else if (isObject(this._events[type]))                                                                               // 9326
    this._events[type].push(listener);                                                                                 // 9327
  else                                                                                                                 // 9328
    this._events[type] = [this._events[type], listener];                                                               // 9329
                                                                                                                       // 9330
  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 9331
    var m;                                                                                                             // 9332
    if (!isUndefined(this._maxListeners)) {                                                                            // 9333
      m = this._maxListeners;                                                                                          // 9334
    } else {                                                                                                           // 9335
      m = EventEmitter.defaultMaxListeners;                                                                            // 9336
    }                                                                                                                  // 9337
                                                                                                                       // 9338
    if (m && m > 0 && this._events[type].length > m) {                                                                 // 9339
      this._events[type].warned = true;                                                                                // 9340
      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 9341
                    'leak detected. %d listeners added. ' +                                                            // 9342
                    'Use emitter.setMaxListeners() to increase limit.',                                                // 9343
                    this._events[type].length);                                                                        // 9344
      if (typeof console.trace === 'function') {                                                                       // 9345
        console.trace();                                                                                               // 9346
      }                                                                                                                // 9347
    }                                                                                                                  // 9348
  }                                                                                                                    // 9349
                                                                                                                       // 9350
  return this;                                                                                                         // 9351
};                                                                                                                     // 9352
                                                                                                                       // 9353
EventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 9354
                                                                                                                       // 9355
EventEmitter.prototype.once = function(type, listener) {                                                               // 9356
  if (!isFunction(listener))                                                                                           // 9357
    throw TypeError('listener must be a function');                                                                    // 9358
                                                                                                                       // 9359
  var fired = false;                                                                                                   // 9360
                                                                                                                       // 9361
  function g() {                                                                                                       // 9362
    this.removeListener(type, g);                                                                                      // 9363
                                                                                                                       // 9364
    if (!fired) {                                                                                                      // 9365
      fired = true;                                                                                                    // 9366
      listener.apply(this, arguments);                                                                                 // 9367
    }                                                                                                                  // 9368
  }                                                                                                                    // 9369
                                                                                                                       // 9370
  g.listener = listener;                                                                                               // 9371
  this.on(type, g);                                                                                                    // 9372
                                                                                                                       // 9373
  return this;                                                                                                         // 9374
};                                                                                                                     // 9375
                                                                                                                       // 9376
EventEmitter.prototype.removeListener = function(type, listener) {                                                     // 9377
  var list, position, length, i;                                                                                       // 9378
                                                                                                                       // 9379
  if (!isFunction(listener))                                                                                           // 9380
    throw TypeError('listener must be a function');                                                                    // 9381
                                                                                                                       // 9382
  if (!this._events || !this._events[type])                                                                            // 9383
    return this;                                                                                                       // 9384
                                                                                                                       // 9385
  list = this._events[type];                                                                                           // 9386
  length = list.length;                                                                                                // 9387
  position = -1;                                                                                                       // 9388
                                                                                                                       // 9389
  if (list === listener ||                                                                                             // 9390
      (isFunction(list.listener) && list.listener === listener)) {                                                     // 9391
    delete this._events[type];                                                                                         // 9392
    if (this._events.removeListener)                                                                                   // 9393
      this.emit('removeListener', type, listener);                                                                     // 9394
                                                                                                                       // 9395
  } else if (isObject(list)) {                                                                                         // 9396
    for (i = length; i-- > 0;) {                                                                                       // 9397
      if (list[i] === listener ||                                                                                      // 9398
          (list[i].listener && list[i].listener === listener)) {                                                       // 9399
        position = i;                                                                                                  // 9400
        break;                                                                                                         // 9401
      }                                                                                                                // 9402
    }                                                                                                                  // 9403
                                                                                                                       // 9404
    if (position < 0)                                                                                                  // 9405
      return this;                                                                                                     // 9406
                                                                                                                       // 9407
    if (list.length === 1) {                                                                                           // 9408
      list.length = 0;                                                                                                 // 9409
      delete this._events[type];                                                                                       // 9410
    } else {                                                                                                           // 9411
      list.splice(position, 1);                                                                                        // 9412
    }                                                                                                                  // 9413
                                                                                                                       // 9414
    if (this._events.removeListener)                                                                                   // 9415
      this.emit('removeListener', type, listener);                                                                     // 9416
  }                                                                                                                    // 9417
                                                                                                                       // 9418
  return this;                                                                                                         // 9419
};                                                                                                                     // 9420
                                                                                                                       // 9421
EventEmitter.prototype.removeAllListeners = function(type) {                                                           // 9422
  var key, listeners;                                                                                                  // 9423
                                                                                                                       // 9424
  if (!this._events)                                                                                                   // 9425
    return this;                                                                                                       // 9426
                                                                                                                       // 9427
  if (!this._events.removeListener) {                                                                                  // 9428
    if (arguments.length === 0)                                                                                        // 9429
      this._events = {};                                                                                               // 9430
    else if (this._events[type])                                                                                       // 9431
      delete this._events[type];                                                                                       // 9432
    return this;                                                                                                       // 9433
  }                                                                                                                    // 9434
                                                                                                                       // 9435
  if (arguments.length === 0) {                                                                                        // 9436
    for (key in this._events) {                                                                                        // 9437
      if (key === 'removeListener') continue;                                                                          // 9438
      this.removeAllListeners(key);                                                                                    // 9439
    }                                                                                                                  // 9440
    this.removeAllListeners('removeListener');                                                                         // 9441
    this._events = {};                                                                                                 // 9442
    return this;                                                                                                       // 9443
  }                                                                                                                    // 9444
                                                                                                                       // 9445
  listeners = this._events[type];                                                                                      // 9446
                                                                                                                       // 9447
  if (isFunction(listeners)) {                                                                                         // 9448
    this.removeListener(type, listeners);                                                                              // 9449
  } else {                                                                                                             // 9450
    while (listeners.length)                                                                                           // 9451
      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 9452
  }                                                                                                                    // 9453
  delete this._events[type];                                                                                           // 9454
                                                                                                                       // 9455
  return this;                                                                                                         // 9456
};                                                                                                                     // 9457
                                                                                                                       // 9458
EventEmitter.prototype.listeners = function(type) {                                                                    // 9459
  var ret;                                                                                                             // 9460
  if (!this._events || !this._events[type])                                                                            // 9461
    ret = [];                                                                                                          // 9462
  else if (isFunction(this._events[type]))                                                                             // 9463
    ret = [this._events[type]];                                                                                        // 9464
  else                                                                                                                 // 9465
    ret = this._events[type].slice();                                                                                  // 9466
  return ret;                                                                                                          // 9467
};                                                                                                                     // 9468
                                                                                                                       // 9469
EventEmitter.listenerCount = function(emitter, type) {                                                                 // 9470
  var ret;                                                                                                             // 9471
  if (!emitter._events || !emitter._events[type])                                                                      // 9472
    ret = 0;                                                                                                           // 9473
  else if (isFunction(emitter._events[type]))                                                                          // 9474
    ret = 1;                                                                                                           // 9475
  else                                                                                                                 // 9476
    ret = emitter._events[type].length;                                                                                // 9477
  return ret;                                                                                                          // 9478
};                                                                                                                     // 9479
                                                                                                                       // 9480
function isFunction(arg) {                                                                                             // 9481
  return typeof arg === 'function';                                                                                    // 9482
}                                                                                                                      // 9483
                                                                                                                       // 9484
function isNumber(arg) {                                                                                               // 9485
  return typeof arg === 'number';                                                                                      // 9486
}                                                                                                                      // 9487
                                                                                                                       // 9488
function isObject(arg) {                                                                                               // 9489
  return typeof arg === 'object' && arg !== null;                                                                      // 9490
}                                                                                                                      // 9491
                                                                                                                       // 9492
function isUndefined(arg) {                                                                                            // 9493
  return arg === void 0;                                                                                               // 9494
}                                                                                                                      // 9495
                                                                                                                       // 9496
},{}],72:[function(require,module,exports){                                                                            // 9497
if (typeof Object.create === 'function') {                                                                             // 9498
  module.exports = function inherits(ctor, superCtor) {                                                                // 9499
    ctor.super_ = superCtor                                                                                            // 9500
    ctor.prototype = Object.create(superCtor.prototype, {                                                              // 9501
      constructor: {                                                                                                   // 9502
        value: ctor,                                                                                                   // 9503
        enumerable: false,                                                                                             // 9504
        writable: true,                                                                                                // 9505
        configurable: true                                                                                             // 9506
      }                                                                                                                // 9507
    });                                                                                                                // 9508
  };                                                                                                                   // 9509
} else {                                                                                                               // 9510
  module.exports = function inherits(ctor, superCtor) {                                                                // 9511
    ctor.super_ = superCtor                                                                                            // 9512
    var TempCtor = function () {}                                                                                      // 9513
    TempCtor.prototype = superCtor.prototype                                                                           // 9514
    ctor.prototype = new TempCtor()                                                                                    // 9515
    ctor.prototype.constructor = ctor                                                                                  // 9516
  }                                                                                                                    // 9517
}                                                                                                                      // 9518
                                                                                                                       // 9519
},{}],73:[function(require,module,exports){                                                                            // 9520
                                                                                                                       // 9521
var process = module.exports = {};                                                                                     // 9522
                                                                                                                       // 9523
process.nextTick = (function () {                                                                                      // 9524
    var canSetImmediate = typeof window !== 'undefined'                                                                // 9525
    && window.setImmediate;                                                                                            // 9526
    var canPost = typeof window !== 'undefined'                                                                        // 9527
    && window.postMessage && window.addEventListener                                                                   // 9528
    ;                                                                                                                  // 9529
                                                                                                                       // 9530
    if (canSetImmediate) {                                                                                             // 9531
        return function (f) { return window.setImmediate(f) };                                                         // 9532
    }                                                                                                                  // 9533
                                                                                                                       // 9534
    if (canPost) {                                                                                                     // 9535
        var queue = [];                                                                                                // 9536
        window.addEventListener('message', function (ev) {                                                             // 9537
            var source = ev.source;                                                                                    // 9538
            if ((source === window || source === null) && ev.data === 'process-tick') {                                // 9539
                ev.stopPropagation();                                                                                  // 9540
                if (queue.length > 0) {                                                                                // 9541
                    var fn = queue.shift();                                                                            // 9542
                    fn();                                                                                              // 9543
                }                                                                                                      // 9544
            }                                                                                                          // 9545
        }, true);                                                                                                      // 9546
                                                                                                                       // 9547
        return function nextTick(fn) {                                                                                 // 9548
            queue.push(fn);                                                                                            // 9549
            window.postMessage('process-tick', '*');                                                                   // 9550
        };                                                                                                             // 9551
    }                                                                                                                  // 9552
                                                                                                                       // 9553
    return function nextTick(fn) {                                                                                     // 9554
        setTimeout(fn, 0);                                                                                             // 9555
    };                                                                                                                 // 9556
})();                                                                                                                  // 9557
                                                                                                                       // 9558
process.title = 'browser';                                                                                             // 9559
process.browser = true;                                                                                                // 9560
process.env = {};                                                                                                      // 9561
process.argv = [];                                                                                                     // 9562
                                                                                                                       // 9563
function noop() {}                                                                                                     // 9564
                                                                                                                       // 9565
process.on = noop;                                                                                                     // 9566
process.addListener = noop;                                                                                            // 9567
process.once = noop;                                                                                                   // 9568
process.off = noop;                                                                                                    // 9569
process.removeListener = noop;                                                                                         // 9570
process.removeAllListeners = noop;                                                                                     // 9571
process.emit = noop;                                                                                                   // 9572
                                                                                                                       // 9573
process.binding = function (name) {                                                                                    // 9574
    throw new Error('process.binding is not supported');                                                               // 9575
}                                                                                                                      // 9576
                                                                                                                       // 9577
process.cwd = function () { return '/' };                                                                              // 9578
process.chdir = function (dir) {                                                                                       // 9579
    throw new Error('process.chdir is not supported');                                                                 // 9580
};                                                                                                                     // 9581
                                                                                                                       // 9582
},{}],74:[function(require,module,exports){                                                                            // 9583
(function (global){                                                                                                    // 9584
                                                                                                                       // 9585
;(function(root) {                                                                                                     // 9586
                                                                                                                       // 9587
                                                                                                                       // 9588
	var freeExports = typeof exports == 'object' && exports;                                                              // 9589
	var freeModule = typeof module == 'object' && module &&                                                               // 9590
		module.exports == freeExports && module;                                                                             // 9591
	var freeGlobal = typeof global == 'object' && global;                                                                 // 9592
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {                                           // 9593
		root = freeGlobal;                                                                                                   // 9594
	}                                                                                                                     // 9595
                                                                                                                       // 9596
                                                                                                                       // 9597
	var punycode,                                                                                                         // 9598
                                                                                                                       // 9599
                                                                                                                       // 9600
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1                                                                     // 9601
                                                                                                                       // 9602
                                                                                                                       // 9603
	base = 36,                                                                                                            // 9604
	tMin = 1,                                                                                                             // 9605
	tMax = 26,                                                                                                            // 9606
	skew = 38,                                                                                                            // 9607
	damp = 700,                                                                                                           // 9608
	initialBias = 72,                                                                                                     // 9609
	initialN = 128, // 0x80                                                                                               // 9610
	delimiter = '-', // '\x2D'                                                                                            // 9611
                                                                                                                       // 9612
                                                                                                                       // 9613
	regexPunycode = /^xn--/,                                                                                              // 9614
	regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars                                                // 9615
	regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators                                                // 9616
                                                                                                                       // 9617
                                                                                                                       // 9618
	errors = {                                                                                                            // 9619
		'overflow': 'Overflow: input needs wider integers to process',                                                       // 9620
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',                                                       // 9621
		'invalid-input': 'Invalid input'                                                                                     // 9622
	},                                                                                                                    // 9623
                                                                                                                       // 9624
                                                                                                                       // 9625
	baseMinusTMin = base - tMin,                                                                                          // 9626
	floor = Math.floor,                                                                                                   // 9627
	stringFromCharCode = String.fromCharCode,                                                                             // 9628
                                                                                                                       // 9629
                                                                                                                       // 9630
	key;                                                                                                                  // 9631
                                                                                                                       // 9632
                                                                                                                       // 9633
                                                                                                                       // 9634
                                                                                                                       // 9635
	function error(type) {                                                                                                // 9636
		throw RangeError(errors[type]);                                                                                      // 9637
	}                                                                                                                     // 9638
                                                                                                                       // 9639
                                                                                                                       // 9640
	function map(array, fn) {                                                                                             // 9641
		var length = array.length;                                                                                           // 9642
		while (length--) {                                                                                                   // 9643
			array[length] = fn(array[length]);                                                                                  // 9644
		}                                                                                                                    // 9645
		return array;                                                                                                        // 9646
	}                                                                                                                     // 9647
                                                                                                                       // 9648
                                                                                                                       // 9649
	function mapDomain(string, fn) {                                                                                      // 9650
		return map(string.split(regexSeparators), fn).join('.');                                                             // 9651
	}                                                                                                                     // 9652
                                                                                                                       // 9653
                                                                                                                       // 9654
	function ucs2decode(string) {                                                                                         // 9655
		var output = [],                                                                                                     // 9656
		    counter = 0,                                                                                                     // 9657
		    length = string.length,                                                                                          // 9658
		    value,                                                                                                           // 9659
		    extra;                                                                                                           // 9660
		while (counter < length) {                                                                                           // 9661
			value = string.charCodeAt(counter++);                                                                               // 9662
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {                                                       // 9663
				extra = string.charCodeAt(counter++);                                                                              // 9664
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate                                                                 // 9665
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                                                 // 9666
				} else {                                                                                                           // 9667
					output.push(value);                                                                                               // 9668
					counter--;                                                                                                        // 9669
				}                                                                                                                  // 9670
			} else {                                                                                                            // 9671
				output.push(value);                                                                                                // 9672
			}                                                                                                                   // 9673
		}                                                                                                                    // 9674
		return output;                                                                                                       // 9675
	}                                                                                                                     // 9676
                                                                                                                       // 9677
                                                                                                                       // 9678
	function ucs2encode(array) {                                                                                          // 9679
		return map(array, function(value) {                                                                                  // 9680
			var output = '';                                                                                                    // 9681
			if (value > 0xFFFF) {                                                                                               // 9682
				value -= 0x10000;                                                                                                  // 9683
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);                                                       // 9684
				value = 0xDC00 | value & 0x3FF;                                                                                    // 9685
			}                                                                                                                   // 9686
			output += stringFromCharCode(value);                                                                                // 9687
			return output;                                                                                                      // 9688
		}).join('');                                                                                                         // 9689
	}                                                                                                                     // 9690
                                                                                                                       // 9691
                                                                                                                       // 9692
	function basicToDigit(codePoint) {                                                                                    // 9693
		if (codePoint - 48 < 10) {                                                                                           // 9694
			return codePoint - 22;                                                                                              // 9695
		}                                                                                                                    // 9696
		if (codePoint - 65 < 26) {                                                                                           // 9697
			return codePoint - 65;                                                                                              // 9698
		}                                                                                                                    // 9699
		if (codePoint - 97 < 26) {                                                                                           // 9700
			return codePoint - 97;                                                                                              // 9701
		}                                                                                                                    // 9702
		return base;                                                                                                         // 9703
	}                                                                                                                     // 9704
                                                                                                                       // 9705
                                                                                                                       // 9706
	function digitToBasic(digit, flag) {                                                                                  // 9707
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);                                                          // 9708
	}                                                                                                                     // 9709
                                                                                                                       // 9710
                                                                                                                       // 9711
	function adapt(delta, numPoints, firstTime) {                                                                         // 9712
		var k = 0;                                                                                                           // 9713
		delta = firstTime ? floor(delta / damp) : delta >> 1;                                                                // 9714
		delta += floor(delta / numPoints);                                                                                   // 9715
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {                                        // 9716
			delta = floor(delta / baseMinusTMin);                                                                               // 9717
		}                                                                                                                    // 9718
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));                                                      // 9719
	}                                                                                                                     // 9720
                                                                                                                       // 9721
                                                                                                                       // 9722
	function decode(input) {                                                                                              // 9723
		var output = [],                                                                                                     // 9724
		    inputLength = input.length,                                                                                      // 9725
		    out,                                                                                                             // 9726
		    i = 0,                                                                                                           // 9727
		    n = initialN,                                                                                                    // 9728
		    bias = initialBias,                                                                                              // 9729
		    basic,                                                                                                           // 9730
		    j,                                                                                                               // 9731
		    index,                                                                                                           // 9732
		    oldi,                                                                                                            // 9733
		    w,                                                                                                               // 9734
		    k,                                                                                                               // 9735
		    digit,                                                                                                           // 9736
		    t,                                                                                                               // 9737
                                                                                                                       // 9738
		    baseMinusT;                                                                                                      // 9739
                                                                                                                       // 9740
                                                                                                                       // 9741
		basic = input.lastIndexOf(delimiter);                                                                                // 9742
		if (basic < 0) {                                                                                                     // 9743
			basic = 0;                                                                                                          // 9744
		}                                                                                                                    // 9745
                                                                                                                       // 9746
		for (j = 0; j < basic; ++j) {                                                                                        // 9747
			if (input.charCodeAt(j) >= 0x80) {                                                                                  // 9748
				error('not-basic');                                                                                                // 9749
			}                                                                                                                   // 9750
			output.push(input.charCodeAt(j));                                                                                   // 9751
		}                                                                                                                    // 9752
                                                                                                                       // 9753
                                                                                                                       // 9754
		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {                            // 9755
                                                                                                                       // 9756
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {                                                    // 9757
                                                                                                                       // 9758
				if (index >= inputLength) {                                                                                        // 9759
					error('invalid-input');                                                                                           // 9760
				}                                                                                                                  // 9761
                                                                                                                       // 9762
				digit = basicToDigit(input.charCodeAt(index++));                                                                   // 9763
                                                                                                                       // 9764
				if (digit >= base || digit > floor((maxInt - i) / w)) {                                                            // 9765
					error('overflow');                                                                                                // 9766
				}                                                                                                                  // 9767
                                                                                                                       // 9768
				i += digit * w;                                                                                                    // 9769
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);                                                       // 9770
                                                                                                                       // 9771
				if (digit < t) {                                                                                                   // 9772
					break;                                                                                                            // 9773
				}                                                                                                                  // 9774
                                                                                                                       // 9775
				baseMinusT = base - t;                                                                                             // 9776
				if (w > floor(maxInt / baseMinusT)) {                                                                              // 9777
					error('overflow');                                                                                                // 9778
				}                                                                                                                  // 9779
                                                                                                                       // 9780
				w *= baseMinusT;                                                                                                   // 9781
                                                                                                                       // 9782
			}                                                                                                                   // 9783
                                                                                                                       // 9784
			out = output.length + 1;                                                                                            // 9785
			bias = adapt(i - oldi, out, oldi == 0);                                                                             // 9786
                                                                                                                       // 9787
			if (floor(i / out) > maxInt - n) {                                                                                  // 9788
				error('overflow');                                                                                                 // 9789
			}                                                                                                                   // 9790
                                                                                                                       // 9791
			n += floor(i / out);                                                                                                // 9792
			i %= out;                                                                                                           // 9793
                                                                                                                       // 9794
			output.splice(i++, 0, n);                                                                                           // 9795
                                                                                                                       // 9796
		}                                                                                                                    // 9797
                                                                                                                       // 9798
		return ucs2encode(output);                                                                                           // 9799
	}                                                                                                                     // 9800
                                                                                                                       // 9801
                                                                                                                       // 9802
	function encode(input) {                                                                                              // 9803
		var n,                                                                                                               // 9804
		    delta,                                                                                                           // 9805
		    handledCPCount,                                                                                                  // 9806
		    basicLength,                                                                                                     // 9807
		    bias,                                                                                                            // 9808
		    j,                                                                                                               // 9809
		    m,                                                                                                               // 9810
		    q,                                                                                                               // 9811
		    k,                                                                                                               // 9812
		    t,                                                                                                               // 9813
		    currentValue,                                                                                                    // 9814
		    output = [],                                                                                                     // 9815
                                                                                                                       // 9816
		    inputLength,                                                                                                     // 9817
                                                                                                                       // 9818
		    handledCPCountPlusOne,                                                                                           // 9819
		    baseMinusT,                                                                                                      // 9820
		    qMinusT;                                                                                                         // 9821
                                                                                                                       // 9822
		input = ucs2decode(input);                                                                                           // 9823
                                                                                                                       // 9824
		inputLength = input.length;                                                                                          // 9825
                                                                                                                       // 9826
		n = initialN;                                                                                                        // 9827
		delta = 0;                                                                                                           // 9828
		bias = initialBias;                                                                                                  // 9829
                                                                                                                       // 9830
		for (j = 0; j < inputLength; ++j) {                                                                                  // 9831
			currentValue = input[j];                                                                                            // 9832
			if (currentValue < 0x80) {                                                                                          // 9833
				output.push(stringFromCharCode(currentValue));                                                                     // 9834
			}                                                                                                                   // 9835
		}                                                                                                                    // 9836
                                                                                                                       // 9837
		handledCPCount = basicLength = output.length;                                                                        // 9838
                                                                                                                       // 9839
                                                                                                                       // 9840
		if (basicLength) {                                                                                                   // 9841
			output.push(delimiter);                                                                                             // 9842
		}                                                                                                                    // 9843
                                                                                                                       // 9844
		while (handledCPCount < inputLength) {                                                                               // 9845
                                                                                                                       // 9846
			for (m = maxInt, j = 0; j < inputLength; ++j) {                                                                     // 9847
				currentValue = input[j];                                                                                           // 9848
				if (currentValue >= n && currentValue < m) {                                                                       // 9849
					m = currentValue;                                                                                                 // 9850
				}                                                                                                                  // 9851
			}                                                                                                                   // 9852
                                                                                                                       // 9853
			handledCPCountPlusOne = handledCPCount + 1;                                                                         // 9854
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {                                                      // 9855
				error('overflow');                                                                                                 // 9856
			}                                                                                                                   // 9857
                                                                                                                       // 9858
			delta += (m - n) * handledCPCountPlusOne;                                                                           // 9859
			n = m;                                                                                                              // 9860
                                                                                                                       // 9861
			for (j = 0; j < inputLength; ++j) {                                                                                 // 9862
				currentValue = input[j];                                                                                           // 9863
                                                                                                                       // 9864
				if (currentValue < n && ++delta > maxInt) {                                                                        // 9865
					error('overflow');                                                                                                // 9866
				}                                                                                                                  // 9867
                                                                                                                       // 9868
				if (currentValue == n) {                                                                                           // 9869
					for (q = delta, k = base; /* no condition */; k += base) {                                                        // 9870
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);                                                     // 9871
						if (q < t) {                                                                                                     // 9872
							break;                                                                                                          // 9873
						}                                                                                                                // 9874
						qMinusT = q - t;                                                                                                 // 9875
						baseMinusT = base - t;                                                                                           // 9876
						output.push(                                                                                                     // 9877
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))                                                   // 9878
						);                                                                                                               // 9879
						q = floor(qMinusT / baseMinusT);                                                                                 // 9880
					}                                                                                                                 // 9881
                                                                                                                       // 9882
					output.push(stringFromCharCode(digitToBasic(q, 0)));                                                              // 9883
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);                                        // 9884
					delta = 0;                                                                                                        // 9885
					++handledCPCount;                                                                                                 // 9886
				}                                                                                                                  // 9887
			}                                                                                                                   // 9888
                                                                                                                       // 9889
			++delta;                                                                                                            // 9890
			++n;                                                                                                                // 9891
                                                                                                                       // 9892
		}                                                                                                                    // 9893
		return output.join('');                                                                                              // 9894
	}                                                                                                                     // 9895
                                                                                                                       // 9896
                                                                                                                       // 9897
	function toUnicode(domain) {                                                                                          // 9898
		return mapDomain(domain, function(string) {                                                                          // 9899
			return regexPunycode.test(string)                                                                                   // 9900
				? decode(string.slice(4).toLowerCase())                                                                            // 9901
				: string;                                                                                                          // 9902
		});                                                                                                                  // 9903
	}                                                                                                                     // 9904
                                                                                                                       // 9905
                                                                                                                       // 9906
	function toASCII(domain) {                                                                                            // 9907
		return mapDomain(domain, function(string) {                                                                          // 9908
			return regexNonASCII.test(string)                                                                                   // 9909
				? 'xn--' + encode(string)                                                                                          // 9910
				: string;                                                                                                          // 9911
		});                                                                                                                  // 9912
	}                                                                                                                     // 9913
                                                                                                                       // 9914
                                                                                                                       // 9915
                                                                                                                       // 9916
                                                                                                                       // 9917
	punycode = {                                                                                                          // 9918
                                                                                                                       // 9919
		'version': '1.2.4',                                                                                                  // 9920
                                                                                                                       // 9921
		'ucs2': {                                                                                                            // 9922
			'decode': ucs2decode,                                                                                               // 9923
			'encode': ucs2encode                                                                                                // 9924
		},                                                                                                                   // 9925
		'decode': decode,                                                                                                    // 9926
		'encode': encode,                                                                                                    // 9927
		'toASCII': toASCII,                                                                                                  // 9928
		'toUnicode': toUnicode                                                                                               // 9929
	};                                                                                                                    // 9930
                                                                                                                       // 9931
                                                                                                                       // 9932
	if (                                                                                                                  // 9933
		typeof define == 'function' &&                                                                                       // 9934
		typeof define.amd == 'object' &&                                                                                     // 9935
		define.amd                                                                                                           // 9936
	) {                                                                                                                   // 9937
		define('punycode', function() {                                                                                      // 9938
			return punycode;                                                                                                    // 9939
		});                                                                                                                  // 9940
	} else if (freeExports && !freeExports.nodeType) {                                                                    // 9941
		if (freeModule) { // in Node.js or RingoJS v0.8.0+                                                                   // 9942
			freeModule.exports = punycode;                                                                                      // 9943
		} else { // in Narwhal or RingoJS v0.7.0-                                                                            // 9944
			for (key in punycode) {                                                                                             // 9945
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);                                                // 9946
			}                                                                                                                   // 9947
		}                                                                                                                    // 9948
	} else { // in Rhino or a web browser                                                                                 // 9949
		root.punycode = punycode;                                                                                            // 9950
	}                                                                                                                     // 9951
                                                                                                                       // 9952
}(this));                                                                                                              // 9953
                                                                                                                       // 9954
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})                         // 9955
},{}],75:[function(require,module,exports){                                                                            // 9956
                                                                                                                       // 9957
'use strict';                                                                                                          // 9958
                                                                                                                       // 9959
function hasOwnProperty(obj, prop) {                                                                                   // 9960
  return Object.prototype.hasOwnProperty.call(obj, prop);                                                              // 9961
}                                                                                                                      // 9962
                                                                                                                       // 9963
module.exports = function(qs, sep, eq, options) {                                                                      // 9964
  sep = sep || '&';                                                                                                    // 9965
  eq = eq || '=';                                                                                                      // 9966
  var obj = {};                                                                                                        // 9967
                                                                                                                       // 9968
  if (typeof qs !== 'string' || qs.length === 0) {                                                                     // 9969
    return obj;                                                                                                        // 9970
  }                                                                                                                    // 9971
                                                                                                                       // 9972
  var regexp = /\+/g;                                                                                                  // 9973
  qs = qs.split(sep);                                                                                                  // 9974
                                                                                                                       // 9975
  var maxKeys = 1000;                                                                                                  // 9976
  if (options && typeof options.maxKeys === 'number') {                                                                // 9977
    maxKeys = options.maxKeys;                                                                                         // 9978
  }                                                                                                                    // 9979
                                                                                                                       // 9980
  var len = qs.length;                                                                                                 // 9981
  if (maxKeys > 0 && len > maxKeys) {                                                                                  // 9982
    len = maxKeys;                                                                                                     // 9983
  }                                                                                                                    // 9984
                                                                                                                       // 9985
  for (var i = 0; i < len; ++i) {                                                                                      // 9986
    var x = qs[i].replace(regexp, '%20'),                                                                              // 9987
        idx = x.indexOf(eq),                                                                                           // 9988
        kstr, vstr, k, v;                                                                                              // 9989
                                                                                                                       // 9990
    if (idx >= 0) {                                                                                                    // 9991
      kstr = x.substr(0, idx);                                                                                         // 9992
      vstr = x.substr(idx + 1);                                                                                        // 9993
    } else {                                                                                                           // 9994
      kstr = x;                                                                                                        // 9995
      vstr = '';                                                                                                       // 9996
    }                                                                                                                  // 9997
                                                                                                                       // 9998
    k = decodeURIComponent(kstr);                                                                                      // 9999
    v = decodeURIComponent(vstr);                                                                                      // 10000
                                                                                                                       // 10001
    if (!hasOwnProperty(obj, k)) {                                                                                     // 10002
      obj[k] = v;                                                                                                      // 10003
    } else if (isArray(obj[k])) {                                                                                      // 10004
      obj[k].push(v);                                                                                                  // 10005
    } else {                                                                                                           // 10006
      obj[k] = [obj[k], v];                                                                                            // 10007
    }                                                                                                                  // 10008
  }                                                                                                                    // 10009
                                                                                                                       // 10010
  return obj;                                                                                                          // 10011
};                                                                                                                     // 10012
                                                                                                                       // 10013
var isArray = Array.isArray || function (xs) {                                                                         // 10014
  return Object.prototype.toString.call(xs) === '[object Array]';                                                      // 10015
};                                                                                                                     // 10016
                                                                                                                       // 10017
},{}],76:[function(require,module,exports){                                                                            // 10018
                                                                                                                       // 10019
'use strict';                                                                                                          // 10020
                                                                                                                       // 10021
var stringifyPrimitive = function(v) {                                                                                 // 10022
  switch (typeof v) {                                                                                                  // 10023
    case 'string':                                                                                                     // 10024
      return v;                                                                                                        // 10025
                                                                                                                       // 10026
    case 'boolean':                                                                                                    // 10027
      return v ? 'true' : 'false';                                                                                     // 10028
                                                                                                                       // 10029
    case 'number':                                                                                                     // 10030
      return isFinite(v) ? v : '';                                                                                     // 10031
                                                                                                                       // 10032
    default:                                                                                                           // 10033
      return '';                                                                                                       // 10034
  }                                                                                                                    // 10035
};                                                                                                                     // 10036
                                                                                                                       // 10037
module.exports = function(obj, sep, eq, name) {                                                                        // 10038
  sep = sep || '&';                                                                                                    // 10039
  eq = eq || '=';                                                                                                      // 10040
  if (obj === null) {                                                                                                  // 10041
    obj = undefined;                                                                                                   // 10042
  }                                                                                                                    // 10043
                                                                                                                       // 10044
  if (typeof obj === 'object') {                                                                                       // 10045
    return map(objectKeys(obj), function(k) {                                                                          // 10046
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;                                                         // 10047
      if (isArray(obj[k])) {                                                                                           // 10048
        return obj[k].map(function(v) {                                                                                // 10049
          return ks + encodeURIComponent(stringifyPrimitive(v));                                                       // 10050
        }).join(sep);                                                                                                  // 10051
      } else {                                                                                                         // 10052
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));                                                    // 10053
      }                                                                                                                // 10054
    }).join(sep);                                                                                                      // 10055
                                                                                                                       // 10056
  }                                                                                                                    // 10057
                                                                                                                       // 10058
  if (!name) return '';                                                                                                // 10059
  return encodeURIComponent(stringifyPrimitive(name)) + eq +                                                           // 10060
         encodeURIComponent(stringifyPrimitive(obj));                                                                  // 10061
};                                                                                                                     // 10062
                                                                                                                       // 10063
var isArray = Array.isArray || function (xs) {                                                                         // 10064
  return Object.prototype.toString.call(xs) === '[object Array]';                                                      // 10065
};                                                                                                                     // 10066
                                                                                                                       // 10067
function map (xs, f) {                                                                                                 // 10068
  if (xs.map) return xs.map(f);                                                                                        // 10069
  var res = [];                                                                                                        // 10070
  for (var i = 0; i < xs.length; i++) {                                                                                // 10071
    res.push(f(xs[i], i));                                                                                             // 10072
  }                                                                                                                    // 10073
  return res;                                                                                                          // 10074
}                                                                                                                      // 10075
                                                                                                                       // 10076
var objectKeys = Object.keys || function (obj) {                                                                       // 10077
  var res = [];                                                                                                        // 10078
  for (var key in obj) {                                                                                               // 10079
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);                                                 // 10080
  }                                                                                                                    // 10081
  return res;                                                                                                          // 10082
};                                                                                                                     // 10083
                                                                                                                       // 10084
},{}],77:[function(require,module,exports){                                                                            // 10085
'use strict';                                                                                                          // 10086
                                                                                                                       // 10087
exports.decode = exports.parse = require('./decode');                                                                  // 10088
exports.encode = exports.stringify = require('./encode');                                                              // 10089
                                                                                                                       // 10090
},{"./decode":75,"./encode":76}],78:[function(require,module,exports){                                                 // 10091
                                                                                                                       // 10092
var punycode = require('punycode');                                                                                    // 10093
                                                                                                                       // 10094
exports.parse = urlParse;                                                                                              // 10095
exports.resolve = urlResolve;                                                                                          // 10096
exports.resolveObject = urlResolveObject;                                                                              // 10097
exports.format = urlFormat;                                                                                            // 10098
                                                                                                                       // 10099
exports.Url = Url;                                                                                                     // 10100
                                                                                                                       // 10101
function Url() {                                                                                                       // 10102
  this.protocol = null;                                                                                                // 10103
  this.slashes = null;                                                                                                 // 10104
  this.auth = null;                                                                                                    // 10105
  this.host = null;                                                                                                    // 10106
  this.port = null;                                                                                                    // 10107
  this.hostname = null;                                                                                                // 10108
  this.hash = null;                                                                                                    // 10109
  this.search = null;                                                                                                  // 10110
  this.query = null;                                                                                                   // 10111
  this.pathname = null;                                                                                                // 10112
  this.path = null;                                                                                                    // 10113
  this.href = null;                                                                                                    // 10114
}                                                                                                                      // 10115
                                                                                                                       // 10116
                                                                                                                       // 10117
var protocolPattern = /^([a-z0-9.+-]+:)/i,                                                                             // 10118
    portPattern = /:[0-9]*$/,                                                                                          // 10119
                                                                                                                       // 10120
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],                                                              // 10121
                                                                                                                       // 10122
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),                                                           // 10123
                                                                                                                       // 10124
    autoEscape = ['\''].concat(unwise),                                                                                // 10125
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),                                                       // 10126
    hostEndingChars = ['/', '?', '#'],                                                                                 // 10127
    hostnameMaxLen = 255,                                                                                              // 10128
    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,                                                                     // 10129
    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,                                                                 // 10130
    unsafeProtocol = {                                                                                                 // 10131
      'javascript': true,                                                                                              // 10132
      'javascript:': true                                                                                              // 10133
    },                                                                                                                 // 10134
    hostlessProtocol = {                                                                                               // 10135
      'javascript': true,                                                                                              // 10136
      'javascript:': true                                                                                              // 10137
    },                                                                                                                 // 10138
    slashedProtocol = {                                                                                                // 10139
      'http': true,                                                                                                    // 10140
      'https': true,                                                                                                   // 10141
      'ftp': true,                                                                                                     // 10142
      'gopher': true,                                                                                                  // 10143
      'file': true,                                                                                                    // 10144
      'http:': true,                                                                                                   // 10145
      'https:': true,                                                                                                  // 10146
      'ftp:': true,                                                                                                    // 10147
      'gopher:': true,                                                                                                 // 10148
      'file:': true                                                                                                    // 10149
    },                                                                                                                 // 10150
    querystring = require('querystring');                                                                              // 10151
                                                                                                                       // 10152
function urlParse(url, parseQueryString, slashesDenoteHost) {                                                          // 10153
  if (url && isObject(url) && url instanceof Url) return url;                                                          // 10154
                                                                                                                       // 10155
  var u = new Url;                                                                                                     // 10156
  u.parse(url, parseQueryString, slashesDenoteHost);                                                                   // 10157
  return u;                                                                                                            // 10158
}                                                                                                                      // 10159
                                                                                                                       // 10160
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {                                             // 10161
  if (!isString(url)) {                                                                                                // 10162
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);                                        // 10163
  }                                                                                                                    // 10164
                                                                                                                       // 10165
  var rest = url;                                                                                                      // 10166
                                                                                                                       // 10167
  rest = rest.trim();                                                                                                  // 10168
                                                                                                                       // 10169
  var proto = protocolPattern.exec(rest);                                                                              // 10170
  if (proto) {                                                                                                         // 10171
    proto = proto[0];                                                                                                  // 10172
    var lowerProto = proto.toLowerCase();                                                                              // 10173
    this.protocol = lowerProto;                                                                                        // 10174
    rest = rest.substr(proto.length);                                                                                  // 10175
  }                                                                                                                    // 10176
                                                                                                                       // 10177
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {                                              // 10178
    var slashes = rest.substr(0, 2) === '//';                                                                          // 10179
    if (slashes && !(proto && hostlessProtocol[proto])) {                                                              // 10180
      rest = rest.substr(2);                                                                                           // 10181
      this.slashes = true;                                                                                             // 10182
    }                                                                                                                  // 10183
  }                                                                                                                    // 10184
                                                                                                                       // 10185
  if (!hostlessProtocol[proto] &&                                                                                      // 10186
      (slashes || (proto && !slashedProtocol[proto]))) {                                                               // 10187
                                                                                                                       // 10188
                                                                                                                       // 10189
                                                                                                                       // 10190
    var hostEnd = -1;                                                                                                  // 10191
    for (var i = 0; i < hostEndingChars.length; i++) {                                                                 // 10192
      var hec = rest.indexOf(hostEndingChars[i]);                                                                      // 10193
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))                                                             // 10194
        hostEnd = hec;                                                                                                 // 10195
    }                                                                                                                  // 10196
                                                                                                                       // 10197
    var auth, atSign;                                                                                                  // 10198
    if (hostEnd === -1) {                                                                                              // 10199
      atSign = rest.lastIndexOf('@');                                                                                  // 10200
    } else {                                                                                                           // 10201
      atSign = rest.lastIndexOf('@', hostEnd);                                                                         // 10202
    }                                                                                                                  // 10203
                                                                                                                       // 10204
    if (atSign !== -1) {                                                                                               // 10205
      auth = rest.slice(0, atSign);                                                                                    // 10206
      rest = rest.slice(atSign + 1);                                                                                   // 10207
      this.auth = decodeURIComponent(auth);                                                                            // 10208
    }                                                                                                                  // 10209
                                                                                                                       // 10210
    hostEnd = -1;                                                                                                      // 10211
    for (var i = 0; i < nonHostChars.length; i++) {                                                                    // 10212
      var hec = rest.indexOf(nonHostChars[i]);                                                                         // 10213
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))                                                             // 10214
        hostEnd = hec;                                                                                                 // 10215
    }                                                                                                                  // 10216
    if (hostEnd === -1)                                                                                                // 10217
      hostEnd = rest.length;                                                                                           // 10218
                                                                                                                       // 10219
    this.host = rest.slice(0, hostEnd);                                                                                // 10220
    rest = rest.slice(hostEnd);                                                                                        // 10221
                                                                                                                       // 10222
    this.parseHost();                                                                                                  // 10223
                                                                                                                       // 10224
    this.hostname = this.hostname || '';                                                                               // 10225
                                                                                                                       // 10226
    var ipv6Hostname = this.hostname[0] === '[' &&                                                                     // 10227
        this.hostname[this.hostname.length - 1] === ']';                                                               // 10228
                                                                                                                       // 10229
    if (!ipv6Hostname) {                                                                                               // 10230
      var hostparts = this.hostname.split(/\./);                                                                       // 10231
      for (var i = 0, l = hostparts.length; i < l; i++) {                                                              // 10232
        var part = hostparts[i];                                                                                       // 10233
        if (!part) continue;                                                                                           // 10234
        if (!part.match(hostnamePartPattern)) {                                                                        // 10235
          var newpart = '';                                                                                            // 10236
          for (var j = 0, k = part.length; j < k; j++) {                                                               // 10237
            if (part.charCodeAt(j) > 127) {                                                                            // 10238
              newpart += 'x';                                                                                          // 10239
            } else {                                                                                                   // 10240
              newpart += part[j];                                                                                      // 10241
            }                                                                                                          // 10242
          }                                                                                                            // 10243
          if (!newpart.match(hostnamePartPattern)) {                                                                   // 10244
            var validParts = hostparts.slice(0, i);                                                                    // 10245
            var notHost = hostparts.slice(i + 1);                                                                      // 10246
            var bit = part.match(hostnamePartStart);                                                                   // 10247
            if (bit) {                                                                                                 // 10248
              validParts.push(bit[1]);                                                                                 // 10249
              notHost.unshift(bit[2]);                                                                                 // 10250
            }                                                                                                          // 10251
            if (notHost.length) {                                                                                      // 10252
              rest = '/' + notHost.join('.') + rest;                                                                   // 10253
            }                                                                                                          // 10254
            this.hostname = validParts.join('.');                                                                      // 10255
            break;                                                                                                     // 10256
          }                                                                                                            // 10257
        }                                                                                                              // 10258
      }                                                                                                                // 10259
    }                                                                                                                  // 10260
                                                                                                                       // 10261
    if (this.hostname.length > hostnameMaxLen) {                                                                       // 10262
      this.hostname = '';                                                                                              // 10263
    } else {                                                                                                           // 10264
      this.hostname = this.hostname.toLowerCase();                                                                     // 10265
    }                                                                                                                  // 10266
                                                                                                                       // 10267
    if (!ipv6Hostname) {                                                                                               // 10268
      var domainArray = this.hostname.split('.');                                                                      // 10269
      var newOut = [];                                                                                                 // 10270
      for (var i = 0; i < domainArray.length; ++i) {                                                                   // 10271
        var s = domainArray[i];                                                                                        // 10272
        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?                                                                        // 10273
            'xn--' + punycode.encode(s) : s);                                                                          // 10274
      }                                                                                                                // 10275
      this.hostname = newOut.join('.');                                                                                // 10276
    }                                                                                                                  // 10277
                                                                                                                       // 10278
    var p = this.port ? ':' + this.port : '';                                                                          // 10279
    var h = this.hostname || '';                                                                                       // 10280
    this.host = h + p;                                                                                                 // 10281
    this.href += this.host;                                                                                            // 10282
                                                                                                                       // 10283
    if (ipv6Hostname) {                                                                                                // 10284
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);                                               // 10285
      if (rest[0] !== '/') {                                                                                           // 10286
        rest = '/' + rest;                                                                                             // 10287
      }                                                                                                                // 10288
    }                                                                                                                  // 10289
  }                                                                                                                    // 10290
                                                                                                                       // 10291
  if (!unsafeProtocol[lowerProto]) {                                                                                   // 10292
                                                                                                                       // 10293
    for (var i = 0, l = autoEscape.length; i < l; i++) {                                                               // 10294
      var ae = autoEscape[i];                                                                                          // 10295
      var esc = encodeURIComponent(ae);                                                                                // 10296
      if (esc === ae) {                                                                                                // 10297
        esc = escape(ae);                                                                                              // 10298
      }                                                                                                                // 10299
      rest = rest.split(ae).join(esc);                                                                                 // 10300
    }                                                                                                                  // 10301
  }                                                                                                                    // 10302
                                                                                                                       // 10303
                                                                                                                       // 10304
  var hash = rest.indexOf('#');                                                                                        // 10305
  if (hash !== -1) {                                                                                                   // 10306
    this.hash = rest.substr(hash);                                                                                     // 10307
    rest = rest.slice(0, hash);                                                                                        // 10308
  }                                                                                                                    // 10309
  var qm = rest.indexOf('?');                                                                                          // 10310
  if (qm !== -1) {                                                                                                     // 10311
    this.search = rest.substr(qm);                                                                                     // 10312
    this.query = rest.substr(qm + 1);                                                                                  // 10313
    if (parseQueryString) {                                                                                            // 10314
      this.query = querystring.parse(this.query);                                                                      // 10315
    }                                                                                                                  // 10316
    rest = rest.slice(0, qm);                                                                                          // 10317
  } else if (parseQueryString) {                                                                                       // 10318
    this.search = '';                                                                                                  // 10319
    this.query = {};                                                                                                   // 10320
  }                                                                                                                    // 10321
  if (rest) this.pathname = rest;                                                                                      // 10322
  if (slashedProtocol[lowerProto] &&                                                                                   // 10323
      this.hostname && !this.pathname) {                                                                               // 10324
    this.pathname = '/';                                                                                               // 10325
  }                                                                                                                    // 10326
                                                                                                                       // 10327
  if (this.pathname || this.search) {                                                                                  // 10328
    var p = this.pathname || '';                                                                                       // 10329
    var s = this.search || '';                                                                                         // 10330
    this.path = p + s;                                                                                                 // 10331
  }                                                                                                                    // 10332
                                                                                                                       // 10333
  this.href = this.format();                                                                                           // 10334
  return this;                                                                                                         // 10335
};                                                                                                                     // 10336
                                                                                                                       // 10337
function urlFormat(obj) {                                                                                              // 10338
  if (isString(obj)) obj = urlParse(obj);                                                                              // 10339
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);                                                    // 10340
  return obj.format();                                                                                                 // 10341
}                                                                                                                      // 10342
                                                                                                                       // 10343
Url.prototype.format = function() {                                                                                    // 10344
  var auth = this.auth || '';                                                                                          // 10345
  if (auth) {                                                                                                          // 10346
    auth = encodeURIComponent(auth);                                                                                   // 10347
    auth = auth.replace(/%3A/i, ':');                                                                                  // 10348
    auth += '@';                                                                                                       // 10349
  }                                                                                                                    // 10350
                                                                                                                       // 10351
  var protocol = this.protocol || '',                                                                                  // 10352
      pathname = this.pathname || '',                                                                                  // 10353
      hash = this.hash || '',                                                                                          // 10354
      host = false,                                                                                                    // 10355
      query = '';                                                                                                      // 10356
                                                                                                                       // 10357
  if (this.host) {                                                                                                     // 10358
    host = auth + this.host;                                                                                           // 10359
  } else if (this.hostname) {                                                                                          // 10360
    host = auth + (this.hostname.indexOf(':') === -1 ?                                                                 // 10361
        this.hostname :                                                                                                // 10362
        '[' + this.hostname + ']');                                                                                    // 10363
    if (this.port) {                                                                                                   // 10364
      host += ':' + this.port;                                                                                         // 10365
    }                                                                                                                  // 10366
  }                                                                                                                    // 10367
                                                                                                                       // 10368
  if (this.query &&                                                                                                    // 10369
      isObject(this.query) &&                                                                                          // 10370
      Object.keys(this.query).length) {                                                                                // 10371
    query = querystring.stringify(this.query);                                                                         // 10372
  }                                                                                                                    // 10373
                                                                                                                       // 10374
  var search = this.search || (query && ('?' + query)) || '';                                                          // 10375
                                                                                                                       // 10376
  if (protocol && protocol.substr(-1) !== ':') protocol += ':';                                                        // 10377
                                                                                                                       // 10378
  if (this.slashes ||                                                                                                  // 10379
      (!protocol || slashedProtocol[protocol]) && host !== false) {                                                    // 10380
    host = '//' + (host || '');                                                                                        // 10381
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;                                             // 10382
  } else if (!host) {                                                                                                  // 10383
    host = '';                                                                                                         // 10384
  }                                                                                                                    // 10385
                                                                                                                       // 10386
  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;                                                               // 10387
  if (search && search.charAt(0) !== '?') search = '?' + search;                                                       // 10388
                                                                                                                       // 10389
  pathname = pathname.replace(/[?#]/g, function(match) {                                                               // 10390
    return encodeURIComponent(match);                                                                                  // 10391
  });                                                                                                                  // 10392
  search = search.replace('#', '%23');                                                                                 // 10393
                                                                                                                       // 10394
  return protocol + host + pathname + search + hash;                                                                   // 10395
};                                                                                                                     // 10396
                                                                                                                       // 10397
function urlResolve(source, relative) {                                                                                // 10398
  return urlParse(source, false, true).resolve(relative);                                                              // 10399
}                                                                                                                      // 10400
                                                                                                                       // 10401
Url.prototype.resolve = function(relative) {                                                                           // 10402
  return this.resolveObject(urlParse(relative, false, true)).format();                                                 // 10403
};                                                                                                                     // 10404
                                                                                                                       // 10405
function urlResolveObject(source, relative) {                                                                          // 10406
  if (!source) return relative;                                                                                        // 10407
  return urlParse(source, false, true).resolveObject(relative);                                                        // 10408
}                                                                                                                      // 10409
                                                                                                                       // 10410
Url.prototype.resolveObject = function(relative) {                                                                     // 10411
  if (isString(relative)) {                                                                                            // 10412
    var rel = new Url();                                                                                               // 10413
    rel.parse(relative, false, true);                                                                                  // 10414
    relative = rel;                                                                                                    // 10415
  }                                                                                                                    // 10416
                                                                                                                       // 10417
  var result = new Url();                                                                                              // 10418
  Object.keys(this).forEach(function(k) {                                                                              // 10419
    result[k] = this[k];                                                                                               // 10420
  }, this);                                                                                                            // 10421
                                                                                                                       // 10422
  result.hash = relative.hash;                                                                                         // 10423
                                                                                                                       // 10424
  if (relative.href === '') {                                                                                          // 10425
    result.href = result.format();                                                                                     // 10426
    return result;                                                                                                     // 10427
  }                                                                                                                    // 10428
                                                                                                                       // 10429
  if (relative.slashes && !relative.protocol) {                                                                        // 10430
    Object.keys(relative).forEach(function(k) {                                                                        // 10431
      if (k !== 'protocol')                                                                                            // 10432
        result[k] = relative[k];                                                                                       // 10433
    });                                                                                                                // 10434
                                                                                                                       // 10435
    if (slashedProtocol[result.protocol] &&                                                                            // 10436
        result.hostname && !result.pathname) {                                                                         // 10437
      result.path = result.pathname = '/';                                                                             // 10438
    }                                                                                                                  // 10439
                                                                                                                       // 10440
    result.href = result.format();                                                                                     // 10441
    return result;                                                                                                     // 10442
  }                                                                                                                    // 10443
                                                                                                                       // 10444
  if (relative.protocol && relative.protocol !== result.protocol) {                                                    // 10445
    if (!slashedProtocol[relative.protocol]) {                                                                         // 10446
      Object.keys(relative).forEach(function(k) {                                                                      // 10447
        result[k] = relative[k];                                                                                       // 10448
      });                                                                                                              // 10449
      result.href = result.format();                                                                                   // 10450
      return result;                                                                                                   // 10451
    }                                                                                                                  // 10452
                                                                                                                       // 10453
    result.protocol = relative.protocol;                                                                               // 10454
    if (!relative.host && !hostlessProtocol[relative.protocol]) {                                                      // 10455
      var relPath = (relative.pathname || '').split('/');                                                              // 10456
      while (relPath.length && !(relative.host = relPath.shift()));                                                    // 10457
      if (!relative.host) relative.host = '';                                                                          // 10458
      if (!relative.hostname) relative.hostname = '';                                                                  // 10459
      if (relPath[0] !== '') relPath.unshift('');                                                                      // 10460
      if (relPath.length < 2) relPath.unshift('');                                                                     // 10461
      result.pathname = relPath.join('/');                                                                             // 10462
    } else {                                                                                                           // 10463
      result.pathname = relative.pathname;                                                                             // 10464
    }                                                                                                                  // 10465
    result.search = relative.search;                                                                                   // 10466
    result.query = relative.query;                                                                                     // 10467
    result.host = relative.host || '';                                                                                 // 10468
    result.auth = relative.auth;                                                                                       // 10469
    result.hostname = relative.hostname || relative.host;                                                              // 10470
    result.port = relative.port;                                                                                       // 10471
    if (result.pathname || result.search) {                                                                            // 10472
      var p = result.pathname || '';                                                                                   // 10473
      var s = result.search || '';                                                                                     // 10474
      result.path = p + s;                                                                                             // 10475
    }                                                                                                                  // 10476
    result.slashes = result.slashes || relative.slashes;                                                               // 10477
    result.href = result.format();                                                                                     // 10478
    return result;                                                                                                     // 10479
  }                                                                                                                    // 10480
                                                                                                                       // 10481
  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),                                            // 10482
      isRelAbs = (                                                                                                     // 10483
          relative.host ||                                                                                             // 10484
          relative.pathname && relative.pathname.charAt(0) === '/'                                                     // 10485
      ),                                                                                                               // 10486
      mustEndAbs = (isRelAbs || isSourceAbs ||                                                                         // 10487
                    (result.host && relative.pathname)),                                                               // 10488
      removeAllDots = mustEndAbs,                                                                                      // 10489
      srcPath = result.pathname && result.pathname.split('/') || [],                                                   // 10490
      relPath = relative.pathname && relative.pathname.split('/') || [],                                               // 10491
      psychotic = result.protocol && !slashedProtocol[result.protocol];                                                // 10492
                                                                                                                       // 10493
  if (psychotic) {                                                                                                     // 10494
    result.hostname = '';                                                                                              // 10495
    result.port = null;                                                                                                // 10496
    if (result.host) {                                                                                                 // 10497
      if (srcPath[0] === '') srcPath[0] = result.host;                                                                 // 10498
      else srcPath.unshift(result.host);                                                                               // 10499
    }                                                                                                                  // 10500
    result.host = '';                                                                                                  // 10501
    if (relative.protocol) {                                                                                           // 10502
      relative.hostname = null;                                                                                        // 10503
      relative.port = null;                                                                                            // 10504
      if (relative.host) {                                                                                             // 10505
        if (relPath[0] === '') relPath[0] = relative.host;                                                             // 10506
        else relPath.unshift(relative.host);                                                                           // 10507
      }                                                                                                                // 10508
      relative.host = null;                                                                                            // 10509
    }                                                                                                                  // 10510
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');                                               // 10511
  }                                                                                                                    // 10512
                                                                                                                       // 10513
  if (isRelAbs) {                                                                                                      // 10514
    result.host = (relative.host || relative.host === '') ?                                                            // 10515
                  relative.host : result.host;                                                                         // 10516
    result.hostname = (relative.hostname || relative.hostname === '') ?                                                // 10517
                      relative.hostname : result.hostname;                                                             // 10518
    result.search = relative.search;                                                                                   // 10519
    result.query = relative.query;                                                                                     // 10520
    srcPath = relPath;                                                                                                 // 10521
  } else if (relPath.length) {                                                                                         // 10522
    if (!srcPath) srcPath = [];                                                                                        // 10523
    srcPath.pop();                                                                                                     // 10524
    srcPath = srcPath.concat(relPath);                                                                                 // 10525
    result.search = relative.search;                                                                                   // 10526
    result.query = relative.query;                                                                                     // 10527
  } else if (!isNullOrUndefined(relative.search)) {                                                                    // 10528
    if (psychotic) {                                                                                                   // 10529
      result.hostname = result.host = srcPath.shift();                                                                 // 10530
      var authInHost = result.host && result.host.indexOf('@') > 0 ?                                                   // 10531
                       result.host.split('@') : false;                                                                 // 10532
      if (authInHost) {                                                                                                // 10533
        result.auth = authInHost.shift();                                                                              // 10534
        result.host = result.hostname = authInHost.shift();                                                            // 10535
      }                                                                                                                // 10536
    }                                                                                                                  // 10537
    result.search = relative.search;                                                                                   // 10538
    result.query = relative.query;                                                                                     // 10539
    if (!isNull(result.pathname) || !isNull(result.search)) {                                                          // 10540
      result.path = (result.pathname ? result.pathname : '') +                                                         // 10541
                    (result.search ? result.search : '');                                                              // 10542
    }                                                                                                                  // 10543
    result.href = result.format();                                                                                     // 10544
    return result;                                                                                                     // 10545
  }                                                                                                                    // 10546
                                                                                                                       // 10547
  if (!srcPath.length) {                                                                                               // 10548
    result.pathname = null;                                                                                            // 10549
    if (result.search) {                                                                                               // 10550
      result.path = '/' + result.search;                                                                               // 10551
    } else {                                                                                                           // 10552
      result.path = null;                                                                                              // 10553
    }                                                                                                                  // 10554
    result.href = result.format();                                                                                     // 10555
    return result;                                                                                                     // 10556
  }                                                                                                                    // 10557
                                                                                                                       // 10558
  var last = srcPath.slice(-1)[0];                                                                                     // 10559
  var hasTrailingSlash = (                                                                                             // 10560
      (result.host || relative.host) && (last === '.' || last === '..') ||                                             // 10561
      last === '');                                                                                                    // 10562
                                                                                                                       // 10563
  var up = 0;                                                                                                          // 10564
  for (var i = srcPath.length; i >= 0; i--) {                                                                          // 10565
    last = srcPath[i];                                                                                                 // 10566
    if (last == '.') {                                                                                                 // 10567
      srcPath.splice(i, 1);                                                                                            // 10568
    } else if (last === '..') {                                                                                        // 10569
      srcPath.splice(i, 1);                                                                                            // 10570
      up++;                                                                                                            // 10571
    } else if (up) {                                                                                                   // 10572
      srcPath.splice(i, 1);                                                                                            // 10573
      up--;                                                                                                            // 10574
    }                                                                                                                  // 10575
  }                                                                                                                    // 10576
                                                                                                                       // 10577
  if (!mustEndAbs && !removeAllDots) {                                                                                 // 10578
    for (; up--; up) {                                                                                                 // 10579
      srcPath.unshift('..');                                                                                           // 10580
    }                                                                                                                  // 10581
  }                                                                                                                    // 10582
                                                                                                                       // 10583
  if (mustEndAbs && srcPath[0] !== '' &&                                                                               // 10584
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {                                                                 // 10585
    srcPath.unshift('');                                                                                               // 10586
  }                                                                                                                    // 10587
                                                                                                                       // 10588
  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {                                                    // 10589
    srcPath.push('');                                                                                                  // 10590
  }                                                                                                                    // 10591
                                                                                                                       // 10592
  var isAbsolute = srcPath[0] === '' ||                                                                                // 10593
      (srcPath[0] && srcPath[0].charAt(0) === '/');                                                                    // 10594
                                                                                                                       // 10595
  if (psychotic) {                                                                                                     // 10596
    result.hostname = result.host = isAbsolute ? '' :                                                                  // 10597
                                    srcPath.length ? srcPath.shift() : '';                                             // 10598
    var authInHost = result.host && result.host.indexOf('@') > 0 ?                                                     // 10599
                     result.host.split('@') : false;                                                                   // 10600
    if (authInHost) {                                                                                                  // 10601
      result.auth = authInHost.shift();                                                                                // 10602
      result.host = result.hostname = authInHost.shift();                                                              // 10603
    }                                                                                                                  // 10604
  }                                                                                                                    // 10605
                                                                                                                       // 10606
  mustEndAbs = mustEndAbs || (result.host && srcPath.length);                                                          // 10607
                                                                                                                       // 10608
  if (mustEndAbs && !isAbsolute) {                                                                                     // 10609
    srcPath.unshift('');                                                                                               // 10610
  }                                                                                                                    // 10611
                                                                                                                       // 10612
  if (!srcPath.length) {                                                                                               // 10613
    result.pathname = null;                                                                                            // 10614
    result.path = null;                                                                                                // 10615
  } else {                                                                                                             // 10616
    result.pathname = srcPath.join('/');                                                                               // 10617
  }                                                                                                                    // 10618
                                                                                                                       // 10619
  if (!isNull(result.pathname) || !isNull(result.search)) {                                                            // 10620
    result.path = (result.pathname ? result.pathname : '') +                                                           // 10621
                  (result.search ? result.search : '');                                                                // 10622
  }                                                                                                                    // 10623
  result.auth = relative.auth || result.auth;                                                                          // 10624
  result.slashes = result.slashes || relative.slashes;                                                                 // 10625
  result.href = result.format();                                                                                       // 10626
  return result;                                                                                                       // 10627
};                                                                                                                     // 10628
                                                                                                                       // 10629
Url.prototype.parseHost = function() {                                                                                 // 10630
  var host = this.host;                                                                                                // 10631
  var port = portPattern.exec(host);                                                                                   // 10632
  if (port) {                                                                                                          // 10633
    port = port[0];                                                                                                    // 10634
    if (port !== ':') {                                                                                                // 10635
      this.port = port.substr(1);                                                                                      // 10636
    }                                                                                                                  // 10637
    host = host.substr(0, host.length - port.length);                                                                  // 10638
  }                                                                                                                    // 10639
  if (host) this.hostname = host;                                                                                      // 10640
};                                                                                                                     // 10641
                                                                                                                       // 10642
function isString(arg) {                                                                                               // 10643
  return typeof arg === "string";                                                                                      // 10644
}                                                                                                                      // 10645
                                                                                                                       // 10646
function isObject(arg) {                                                                                               // 10647
  return typeof arg === 'object' && arg !== null;                                                                      // 10648
}                                                                                                                      // 10649
                                                                                                                       // 10650
function isNull(arg) {                                                                                                 // 10651
  return arg === null;                                                                                                 // 10652
}                                                                                                                      // 10653
function isNullOrUndefined(arg) {                                                                                      // 10654
  return  arg == null;                                                                                                 // 10655
}                                                                                                                      // 10656
                                                                                                                       // 10657
},{"punycode":74,"querystring":77}],79:[function(require,module,exports){                                              // 10658
module.exports = function isBuffer(arg) {                                                                              // 10659
  return arg && typeof arg === 'object'                                                                                // 10660
    && typeof arg.copy === 'function'                                                                                  // 10661
    && typeof arg.fill === 'function'                                                                                  // 10662
    && typeof arg.readUInt8 === 'function';                                                                            // 10663
}                                                                                                                      // 10664
},{}],80:[function(require,module,exports){                                                                            // 10665
(function (process,global){                                                                                            // 10666
                                                                                                                       // 10667
var formatRegExp = /%[sdj%]/g;                                                                                         // 10668
exports.format = function(f) {                                                                                         // 10669
  if (!isString(f)) {                                                                                                  // 10670
    var objects = [];                                                                                                  // 10671
    for (var i = 0; i < arguments.length; i++) {                                                                       // 10672
      objects.push(inspect(arguments[i]));                                                                             // 10673
    }                                                                                                                  // 10674
    return objects.join(' ');                                                                                          // 10675
  }                                                                                                                    // 10676
                                                                                                                       // 10677
  var i = 1;                                                                                                           // 10678
  var args = arguments;                                                                                                // 10679
  var len = args.length;                                                                                               // 10680
  var str = String(f).replace(formatRegExp, function(x) {                                                              // 10681
    if (x === '%') return '%';                                                                                         // 10682
    if (i >= len) return x;                                                                                            // 10683
    switch (x) {                                                                                                       // 10684
      case '%s': return String(args[i++]);                                                                             // 10685
      case '%d': return Number(args[i++]);                                                                             // 10686
      case '%j':                                                                                                       // 10687
        try {                                                                                                          // 10688
          return JSON.stringify(args[i++]);                                                                            // 10689
        } catch (_) {                                                                                                  // 10690
          return '[Circular]';                                                                                         // 10691
        }                                                                                                              // 10692
      default:                                                                                                         // 10693
        return x;                                                                                                      // 10694
    }                                                                                                                  // 10695
  });                                                                                                                  // 10696
  for (var x = args[i]; i < len; x = args[++i]) {                                                                      // 10697
    if (isNull(x) || !isObject(x)) {                                                                                   // 10698
      str += ' ' + x;                                                                                                  // 10699
    } else {                                                                                                           // 10700
      str += ' ' + inspect(x);                                                                                         // 10701
    }                                                                                                                  // 10702
  }                                                                                                                    // 10703
  return str;                                                                                                          // 10704
};                                                                                                                     // 10705
                                                                                                                       // 10706
                                                                                                                       // 10707
exports.deprecate = function(fn, msg) {                                                                                // 10708
  if (isUndefined(global.process)) {                                                                                   // 10709
    return function() {                                                                                                // 10710
      return exports.deprecate(fn, msg).apply(this, arguments);                                                        // 10711
    };                                                                                                                 // 10712
  }                                                                                                                    // 10713
                                                                                                                       // 10714
  if (process.noDeprecation === true) {                                                                                // 10715
    return fn;                                                                                                         // 10716
  }                                                                                                                    // 10717
                                                                                                                       // 10718
  var warned = false;                                                                                                  // 10719
  function deprecated() {                                                                                              // 10720
    if (!warned) {                                                                                                     // 10721
      if (process.throwDeprecation) {                                                                                  // 10722
        throw new Error(msg);                                                                                          // 10723
      } else if (process.traceDeprecation) {                                                                           // 10724
        console.trace(msg);                                                                                            // 10725
      } else {                                                                                                         // 10726
        console.error(msg);                                                                                            // 10727
      }                                                                                                                // 10728
      warned = true;                                                                                                   // 10729
    }                                                                                                                  // 10730
    return fn.apply(this, arguments);                                                                                  // 10731
  }                                                                                                                    // 10732
                                                                                                                       // 10733
  return deprecated;                                                                                                   // 10734
};                                                                                                                     // 10735
                                                                                                                       // 10736
                                                                                                                       // 10737
var debugs = {};                                                                                                       // 10738
var debugEnviron;                                                                                                      // 10739
exports.debuglog = function(set) {                                                                                     // 10740
  if (isUndefined(debugEnviron))                                                                                       // 10741
    debugEnviron = process.env.NODE_DEBUG || '';                                                                       // 10742
  set = set.toUpperCase();                                                                                             // 10743
  if (!debugs[set]) {                                                                                                  // 10744
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {                                                     // 10745
      var pid = process.pid;                                                                                           // 10746
      debugs[set] = function() {                                                                                       // 10747
        var msg = exports.format.apply(exports, arguments);                                                            // 10748
        console.error('%s %d: %s', set, pid, msg);                                                                     // 10749
      };                                                                                                               // 10750
    } else {                                                                                                           // 10751
      debugs[set] = function() {};                                                                                     // 10752
    }                                                                                                                  // 10753
  }                                                                                                                    // 10754
  return debugs[set];                                                                                                  // 10755
};                                                                                                                     // 10756
                                                                                                                       // 10757
                                                                                                                       // 10758
                                                                                                                       // 10759
                                                                                                                       // 10760
function inspect(obj, opts) {                                                                                          // 10761
  var ctx = {                                                                                                          // 10762
    seen: [],                                                                                                          // 10763
    stylize: stylizeNoColor                                                                                            // 10764
  };                                                                                                                   // 10765
  if (arguments.length >= 3) ctx.depth = arguments[2];                                                                 // 10766
  if (arguments.length >= 4) ctx.colors = arguments[3];                                                                // 10767
  if (isBoolean(opts)) {                                                                                               // 10768
    ctx.showHidden = opts;                                                                                             // 10769
  } else if (opts) {                                                                                                   // 10770
    exports._extend(ctx, opts);                                                                                        // 10771
  }                                                                                                                    // 10772
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;                                                             // 10773
  if (isUndefined(ctx.depth)) ctx.depth = 2;                                                                           // 10774
  if (isUndefined(ctx.colors)) ctx.colors = false;                                                                     // 10775
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;                                                        // 10776
  if (ctx.colors) ctx.stylize = stylizeWithColor;                                                                      // 10777
  return formatValue(ctx, obj, ctx.depth);                                                                             // 10778
}                                                                                                                      // 10779
exports.inspect = inspect;                                                                                             // 10780
                                                                                                                       // 10781
                                                                                                                       // 10782
inspect.colors = {                                                                                                     // 10783
  'bold' : [1, 22],                                                                                                    // 10784
  'italic' : [3, 23],                                                                                                  // 10785
  'underline' : [4, 24],                                                                                               // 10786
  'inverse' : [7, 27],                                                                                                 // 10787
  'white' : [37, 39],                                                                                                  // 10788
  'grey' : [90, 39],                                                                                                   // 10789
  'black' : [30, 39],                                                                                                  // 10790
  'blue' : [34, 39],                                                                                                   // 10791
  'cyan' : [36, 39],                                                                                                   // 10792
  'green' : [32, 39],                                                                                                  // 10793
  'magenta' : [35, 39],                                                                                                // 10794
  'red' : [31, 39],                                                                                                    // 10795
  'yellow' : [33, 39]                                                                                                  // 10796
};                                                                                                                     // 10797
                                                                                                                       // 10798
inspect.styles = {                                                                                                     // 10799
  'special': 'cyan',                                                                                                   // 10800
  'number': 'yellow',                                                                                                  // 10801
  'boolean': 'yellow',                                                                                                 // 10802
  'undefined': 'grey',                                                                                                 // 10803
  'null': 'bold',                                                                                                      // 10804
  'string': 'green',                                                                                                   // 10805
  'date': 'magenta',                                                                                                   // 10806
  'regexp': 'red'                                                                                                      // 10807
};                                                                                                                     // 10808
                                                                                                                       // 10809
                                                                                                                       // 10810
function stylizeWithColor(str, styleType) {                                                                            // 10811
  var style = inspect.styles[styleType];                                                                               // 10812
                                                                                                                       // 10813
  if (style) {                                                                                                         // 10814
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +                                                          // 10815
           '\u001b[' + inspect.colors[style][1] + 'm';                                                                 // 10816
  } else {                                                                                                             // 10817
    return str;                                                                                                        // 10818
  }                                                                                                                    // 10819
}                                                                                                                      // 10820
                                                                                                                       // 10821
                                                                                                                       // 10822
function stylizeNoColor(str, styleType) {                                                                              // 10823
  return str;                                                                                                          // 10824
}                                                                                                                      // 10825
                                                                                                                       // 10826
                                                                                                                       // 10827
function arrayToHash(array) {                                                                                          // 10828
  var hash = {};                                                                                                       // 10829
                                                                                                                       // 10830
  array.forEach(function(val, idx) {                                                                                   // 10831
    hash[val] = true;                                                                                                  // 10832
  });                                                                                                                  // 10833
                                                                                                                       // 10834
  return hash;                                                                                                         // 10835
}                                                                                                                      // 10836
                                                                                                                       // 10837
                                                                                                                       // 10838
function formatValue(ctx, value, recurseTimes) {                                                                       // 10839
  if (ctx.customInspect &&                                                                                             // 10840
      value &&                                                                                                         // 10841
      isFunction(value.inspect) &&                                                                                     // 10842
      value.inspect !== exports.inspect &&                                                                             // 10843
      !(value.constructor && value.constructor.prototype === value)) {                                                 // 10844
    var ret = value.inspect(recurseTimes, ctx);                                                                        // 10845
    if (!isString(ret)) {                                                                                              // 10846
      ret = formatValue(ctx, ret, recurseTimes);                                                                       // 10847
    }                                                                                                                  // 10848
    return ret;                                                                                                        // 10849
  }                                                                                                                    // 10850
                                                                                                                       // 10851
  var primitive = formatPrimitive(ctx, value);                                                                         // 10852
  if (primitive) {                                                                                                     // 10853
    return primitive;                                                                                                  // 10854
  }                                                                                                                    // 10855
                                                                                                                       // 10856
  var keys = Object.keys(value);                                                                                       // 10857
  var visibleKeys = arrayToHash(keys);                                                                                 // 10858
                                                                                                                       // 10859
  if (ctx.showHidden) {                                                                                                // 10860
    keys = Object.getOwnPropertyNames(value);                                                                          // 10861
  }                                                                                                                    // 10862
                                                                                                                       // 10863
  if (isError(value)                                                                                                   // 10864
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {                                         // 10865
    return formatError(value);                                                                                         // 10866
  }                                                                                                                    // 10867
                                                                                                                       // 10868
  if (keys.length === 0) {                                                                                             // 10869
    if (isFunction(value)) {                                                                                           // 10870
      var name = value.name ? ': ' + value.name : '';                                                                  // 10871
      return ctx.stylize('[Function' + name + ']', 'special');                                                         // 10872
    }                                                                                                                  // 10873
    if (isRegExp(value)) {                                                                                             // 10874
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 10875
    }                                                                                                                  // 10876
    if (isDate(value)) {                                                                                               // 10877
      return ctx.stylize(Date.prototype.toString.call(value), 'date');                                                 // 10878
    }                                                                                                                  // 10879
    if (isError(value)) {                                                                                              // 10880
      return formatError(value);                                                                                       // 10881
    }                                                                                                                  // 10882
  }                                                                                                                    // 10883
                                                                                                                       // 10884
  var base = '', array = false, braces = ['{', '}'];                                                                   // 10885
                                                                                                                       // 10886
  if (isArray(value)) {                                                                                                // 10887
    array = true;                                                                                                      // 10888
    braces = ['[', ']'];                                                                                               // 10889
  }                                                                                                                    // 10890
                                                                                                                       // 10891
  if (isFunction(value)) {                                                                                             // 10892
    var n = value.name ? ': ' + value.name : '';                                                                       // 10893
    base = ' [Function' + n + ']';                                                                                     // 10894
  }                                                                                                                    // 10895
                                                                                                                       // 10896
  if (isRegExp(value)) {                                                                                               // 10897
    base = ' ' + RegExp.prototype.toString.call(value);                                                                // 10898
  }                                                                                                                    // 10899
                                                                                                                       // 10900
  if (isDate(value)) {                                                                                                 // 10901
    base = ' ' + Date.prototype.toUTCString.call(value);                                                               // 10902
  }                                                                                                                    // 10903
                                                                                                                       // 10904
  if (isError(value)) {                                                                                                // 10905
    base = ' ' + formatError(value);                                                                                   // 10906
  }                                                                                                                    // 10907
                                                                                                                       // 10908
  if (keys.length === 0 && (!array || value.length == 0)) {                                                            // 10909
    return braces[0] + base + braces[1];                                                                               // 10910
  }                                                                                                                    // 10911
                                                                                                                       // 10912
  if (recurseTimes < 0) {                                                                                              // 10913
    if (isRegExp(value)) {                                                                                             // 10914
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');                                             // 10915
    } else {                                                                                                           // 10916
      return ctx.stylize('[Object]', 'special');                                                                       // 10917
    }                                                                                                                  // 10918
  }                                                                                                                    // 10919
                                                                                                                       // 10920
  ctx.seen.push(value);                                                                                                // 10921
                                                                                                                       // 10922
  var output;                                                                                                          // 10923
  if (array) {                                                                                                         // 10924
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);                                                 // 10925
  } else {                                                                                                             // 10926
    output = keys.map(function(key) {                                                                                  // 10927
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);                                        // 10928
    });                                                                                                                // 10929
  }                                                                                                                    // 10930
                                                                                                                       // 10931
  ctx.seen.pop();                                                                                                      // 10932
                                                                                                                       // 10933
  return reduceToSingleString(output, base, braces);                                                                   // 10934
}                                                                                                                      // 10935
                                                                                                                       // 10936
                                                                                                                       // 10937
function formatPrimitive(ctx, value) {                                                                                 // 10938
  if (isUndefined(value))                                                                                              // 10939
    return ctx.stylize('undefined', 'undefined');                                                                      // 10940
  if (isString(value)) {                                                                                               // 10941
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')                                                    // 10942
                                             .replace(/'/g, "\\'")                                                     // 10943
                                             .replace(/\\"/g, '"') + '\'';                                             // 10944
    return ctx.stylize(simple, 'string');                                                                              // 10945
  }                                                                                                                    // 10946
  if (isNumber(value))                                                                                                 // 10947
    return ctx.stylize('' + value, 'number');                                                                          // 10948
  if (isBoolean(value))                                                                                                // 10949
    return ctx.stylize('' + value, 'boolean');                                                                         // 10950
  if (isNull(value))                                                                                                   // 10951
    return ctx.stylize('null', 'null');                                                                                // 10952
}                                                                                                                      // 10953
                                                                                                                       // 10954
                                                                                                                       // 10955
function formatError(value) {                                                                                          // 10956
  return '[' + Error.prototype.toString.call(value) + ']';                                                             // 10957
}                                                                                                                      // 10958
                                                                                                                       // 10959
                                                                                                                       // 10960
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {                                                    // 10961
  var output = [];                                                                                                     // 10962
  for (var i = 0, l = value.length; i < l; ++i) {                                                                      // 10963
    if (hasOwnProperty(value, String(i))) {                                                                            // 10964
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 10965
          String(i), true));                                                                                           // 10966
    } else {                                                                                                           // 10967
      output.push('');                                                                                                 // 10968
    }                                                                                                                  // 10969
  }                                                                                                                    // 10970
  keys.forEach(function(key) {                                                                                         // 10971
    if (!key.match(/^\d+$/)) {                                                                                         // 10972
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,                                                // 10973
          key, true));                                                                                                 // 10974
    }                                                                                                                  // 10975
  });                                                                                                                  // 10976
  return output;                                                                                                       // 10977
}                                                                                                                      // 10978
                                                                                                                       // 10979
                                                                                                                       // 10980
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {                                           // 10981
  var name, str, desc;                                                                                                 // 10982
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };                                         // 10983
  if (desc.get) {                                                                                                      // 10984
    if (desc.set) {                                                                                                    // 10985
      str = ctx.stylize('[Getter/Setter]', 'special');                                                                 // 10986
    } else {                                                                                                           // 10987
      str = ctx.stylize('[Getter]', 'special');                                                                        // 10988
    }                                                                                                                  // 10989
  } else {                                                                                                             // 10990
    if (desc.set) {                                                                                                    // 10991
      str = ctx.stylize('[Setter]', 'special');                                                                        // 10992
    }                                                                                                                  // 10993
  }                                                                                                                    // 10994
  if (!hasOwnProperty(visibleKeys, key)) {                                                                             // 10995
    name = '[' + key + ']';                                                                                            // 10996
  }                                                                                                                    // 10997
  if (!str) {                                                                                                          // 10998
    if (ctx.seen.indexOf(desc.value) < 0) {                                                                            // 10999
      if (isNull(recurseTimes)) {                                                                                      // 11000
        str = formatValue(ctx, desc.value, null);                                                                      // 11001
      } else {                                                                                                         // 11002
        str = formatValue(ctx, desc.value, recurseTimes - 1);                                                          // 11003
      }                                                                                                                // 11004
      if (str.indexOf('\n') > -1) {                                                                                    // 11005
        if (array) {                                                                                                   // 11006
          str = str.split('\n').map(function(line) {                                                                   // 11007
            return '  ' + line;                                                                                        // 11008
          }).join('\n').substr(2);                                                                                     // 11009
        } else {                                                                                                       // 11010
          str = '\n' + str.split('\n').map(function(line) {                                                            // 11011
            return '   ' + line;                                                                                       // 11012
          }).join('\n');                                                                                               // 11013
        }                                                                                                              // 11014
      }                                                                                                                // 11015
    } else {                                                                                                           // 11016
      str = ctx.stylize('[Circular]', 'special');                                                                      // 11017
    }                                                                                                                  // 11018
  }                                                                                                                    // 11019
  if (isUndefined(name)) {                                                                                             // 11020
    if (array && key.match(/^\d+$/)) {                                                                                 // 11021
      return str;                                                                                                      // 11022
    }                                                                                                                  // 11023
    name = JSON.stringify('' + key);                                                                                   // 11024
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {                                                                  // 11025
      name = name.substr(1, name.length - 2);                                                                          // 11026
      name = ctx.stylize(name, 'name');                                                                                // 11027
    } else {                                                                                                           // 11028
      name = name.replace(/'/g, "\\'")                                                                                 // 11029
                 .replace(/\\"/g, '"')                                                                                 // 11030
                 .replace(/(^"|"$)/g, "'");                                                                            // 11031
      name = ctx.stylize(name, 'string');                                                                              // 11032
    }                                                                                                                  // 11033
  }                                                                                                                    // 11034
                                                                                                                       // 11035
  return name + ': ' + str;                                                                                            // 11036
}                                                                                                                      // 11037
                                                                                                                       // 11038
                                                                                                                       // 11039
function reduceToSingleString(output, base, braces) {                                                                  // 11040
  var numLinesEst = 0;                                                                                                 // 11041
  var length = output.reduce(function(prev, cur) {                                                                     // 11042
    numLinesEst++;                                                                                                     // 11043
    if (cur.indexOf('\n') >= 0) numLinesEst++;                                                                         // 11044
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;                                                       // 11045
  }, 0);                                                                                                               // 11046
                                                                                                                       // 11047
  if (length > 60) {                                                                                                   // 11048
    return braces[0] +                                                                                                 // 11049
           (base === '' ? '' : base + '\n ') +                                                                         // 11050
           ' ' +                                                                                                       // 11051
           output.join(',\n  ') +                                                                                      // 11052
           ' ' +                                                                                                       // 11053
           braces[1];                                                                                                  // 11054
  }                                                                                                                    // 11055
                                                                                                                       // 11056
  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];                                                 // 11057
}                                                                                                                      // 11058
                                                                                                                       // 11059
                                                                                                                       // 11060
function isArray(ar) {                                                                                                 // 11061
  return Array.isArray(ar);                                                                                            // 11062
}                                                                                                                      // 11063
exports.isArray = isArray;                                                                                             // 11064
                                                                                                                       // 11065
function isBoolean(arg) {                                                                                              // 11066
  return typeof arg === 'boolean';                                                                                     // 11067
}                                                                                                                      // 11068
exports.isBoolean = isBoolean;                                                                                         // 11069
                                                                                                                       // 11070
function isNull(arg) {                                                                                                 // 11071
  return arg === null;                                                                                                 // 11072
}                                                                                                                      // 11073
exports.isNull = isNull;                                                                                               // 11074
                                                                                                                       // 11075
function isNullOrUndefined(arg) {                                                                                      // 11076
  return arg == null;                                                                                                  // 11077
}                                                                                                                      // 11078
exports.isNullOrUndefined = isNullOrUndefined;                                                                         // 11079
                                                                                                                       // 11080
function isNumber(arg) {                                                                                               // 11081
  return typeof arg === 'number';                                                                                      // 11082
}                                                                                                                      // 11083
exports.isNumber = isNumber;                                                                                           // 11084
                                                                                                                       // 11085
function isString(arg) {                                                                                               // 11086
  return typeof arg === 'string';                                                                                      // 11087
}                                                                                                                      // 11088
exports.isString = isString;                                                                                           // 11089
                                                                                                                       // 11090
function isSymbol(arg) {                                                                                               // 11091
  return typeof arg === 'symbol';                                                                                      // 11092
}                                                                                                                      // 11093
exports.isSymbol = isSymbol;                                                                                           // 11094
                                                                                                                       // 11095
function isUndefined(arg) {                                                                                            // 11096
  return arg === void 0;                                                                                               // 11097
}                                                                                                                      // 11098
exports.isUndefined = isUndefined;                                                                                     // 11099
                                                                                                                       // 11100
function isRegExp(re) {                                                                                                // 11101
  return isObject(re) && objectToString(re) === '[object RegExp]';                                                     // 11102
}                                                                                                                      // 11103
exports.isRegExp = isRegExp;                                                                                           // 11104
                                                                                                                       // 11105
function isObject(arg) {                                                                                               // 11106
  return typeof arg === 'object' && arg !== null;                                                                      // 11107
}                                                                                                                      // 11108
exports.isObject = isObject;                                                                                           // 11109
                                                                                                                       // 11110
function isDate(d) {                                                                                                   // 11111
  return isObject(d) && objectToString(d) === '[object Date]';                                                         // 11112
}                                                                                                                      // 11113
exports.isDate = isDate;                                                                                               // 11114
                                                                                                                       // 11115
function isError(e) {                                                                                                  // 11116
  return isObject(e) &&                                                                                                // 11117
      (objectToString(e) === '[object Error]' || e instanceof Error);                                                  // 11118
}                                                                                                                      // 11119
exports.isError = isError;                                                                                             // 11120
                                                                                                                       // 11121
function isFunction(arg) {                                                                                             // 11122
  return typeof arg === 'function';                                                                                    // 11123
}                                                                                                                      // 11124
exports.isFunction = isFunction;                                                                                       // 11125
                                                                                                                       // 11126
function isPrimitive(arg) {                                                                                            // 11127
  return arg === null ||                                                                                               // 11128
         typeof arg === 'boolean' ||                                                                                   // 11129
         typeof arg === 'number' ||                                                                                    // 11130
         typeof arg === 'string' ||                                                                                    // 11131
         typeof arg === 'symbol' ||  // ES6 symbol                                                                     // 11132
         typeof arg === 'undefined';                                                                                   // 11133
}                                                                                                                      // 11134
exports.isPrimitive = isPrimitive;                                                                                     // 11135
                                                                                                                       // 11136
exports.isBuffer = require('./support/isBuffer');                                                                      // 11137
                                                                                                                       // 11138
function objectToString(o) {                                                                                           // 11139
  return Object.prototype.toString.call(o);                                                                            // 11140
}                                                                                                                      // 11141
                                                                                                                       // 11142
                                                                                                                       // 11143
function pad(n) {                                                                                                      // 11144
  return n < 10 ? '0' + n.toString(10) : n.toString(10);                                                               // 11145
}                                                                                                                      // 11146
                                                                                                                       // 11147
                                                                                                                       // 11148
var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',                                           // 11149
              'Oct', 'Nov', 'Dec'];                                                                                    // 11150
                                                                                                                       // 11151
function timestamp() {                                                                                                 // 11152
  var d = new Date();                                                                                                  // 11153
  var time = [pad(d.getHours()),                                                                                       // 11154
              pad(d.getMinutes()),                                                                                     // 11155
              pad(d.getSeconds())].join(':');                                                                          // 11156
  return [d.getDate(), months[d.getMonth()], time].join(' ');                                                          // 11157
}                                                                                                                      // 11158
                                                                                                                       // 11159
                                                                                                                       // 11160
exports.log = function() {                                                                                             // 11161
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));                                       // 11162
};                                                                                                                     // 11163
                                                                                                                       // 11164
                                                                                                                       // 11165
                                                                                                                       // 11166
exports.inherits = require('inherits');                                                                                // 11167
                                                                                                                       // 11168
exports._extend = function(origin, add) {                                                                              // 11169
  if (!add || !isObject(add)) return origin;                                                                           // 11170
                                                                                                                       // 11171
  var keys = Object.keys(add);                                                                                         // 11172
  var i = keys.length;                                                                                                 // 11173
  while (i--) {                                                                                                        // 11174
    origin[keys[i]] = add[keys[i]];                                                                                    // 11175
  }                                                                                                                    // 11176
  return origin;                                                                                                       // 11177
};                                                                                                                     // 11178
                                                                                                                       // 11179
function hasOwnProperty(obj, prop) {                                                                                   // 11180
  return Object.prototype.hasOwnProperty.call(obj, prop);                                                              // 11181
}                                                                                                                      // 11182
                                                                                                                       // 11183
}).call(this,require("FWaASH"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})       // 11184
},{"./support/isBuffer":79,"FWaASH":73,"inherits":72}],81:[function(require,module,exports){                           // 11185
(function() {                                                                                                          // 11186
  var XMLAttribute, create;                                                                                            // 11187
                                                                                                                       // 11188
  create = require('lodash/object/create');                                                                            // 11189
                                                                                                                       // 11190
  module.exports = XMLAttribute = (function() {                                                                        // 11191
    function XMLAttribute(parent, name, value) {                                                                       // 11192
      this.stringify = parent.stringify;                                                                               // 11193
      if (name == null) {                                                                                              // 11194
        throw new Error("Missing attribute name of element " + parent.name);                                           // 11195
      }                                                                                                                // 11196
      if (value == null) {                                                                                             // 11197
        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);               // 11198
      }                                                                                                                // 11199
      this.name = this.stringify.attName(name);                                                                        // 11200
      this.value = this.stringify.attValue(value);                                                                     // 11201
    }                                                                                                                  // 11202
                                                                                                                       // 11203
    XMLAttribute.prototype.clone = function() {                                                                        // 11204
      return create(XMLAttribute.prototype, this);                                                                     // 11205
    };                                                                                                                 // 11206
                                                                                                                       // 11207
    XMLAttribute.prototype.toString = function(options, level) {                                                       // 11208
      return ' ' + this.name + '="' + this.value + '"';                                                                // 11209
    };                                                                                                                 // 11210
                                                                                                                       // 11211
    return XMLAttribute;                                                                                               // 11212
                                                                                                                       // 11213
  })();                                                                                                                // 11214
                                                                                                                       // 11215
}).call(this);                                                                                                         // 11216
                                                                                                                       // 11217
},{"lodash/object/create":140}],82:[function(require,module,exports){                                                  // 11218
(function() {                                                                                                          // 11219
  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;                                              // 11220
                                                                                                                       // 11221
  XMLStringifier = require('./XMLStringifier');                                                                        // 11222
                                                                                                                       // 11223
  XMLDeclaration = require('./XMLDeclaration');                                                                        // 11224
                                                                                                                       // 11225
  XMLDocType = require('./XMLDocType');                                                                                // 11226
                                                                                                                       // 11227
  XMLElement = require('./XMLElement');                                                                                // 11228
                                                                                                                       // 11229
  module.exports = XMLBuilder = (function() {                                                                          // 11230
    function XMLBuilder(name, options) {                                                                               // 11231
      var root, temp;                                                                                                  // 11232
      if (name == null) {                                                                                              // 11233
        throw new Error("Root element needs a name");                                                                  // 11234
      }                                                                                                                // 11235
      if (options == null) {                                                                                           // 11236
        options = {};                                                                                                  // 11237
      }                                                                                                                // 11238
      this.options = options;                                                                                          // 11239
      this.stringify = new XMLStringifier(options);                                                                    // 11240
      temp = new XMLElement(this, 'doc');                                                                              // 11241
      root = temp.element(name);                                                                                       // 11242
      root.isRoot = true;                                                                                              // 11243
      root.documentObject = this;                                                                                      // 11244
      this.rootObject = root;                                                                                          // 11245
      if (!options.headless) {                                                                                         // 11246
        root.declaration(options);                                                                                     // 11247
        if ((options.pubID != null) || (options.sysID != null)) {                                                      // 11248
          root.doctype(options);                                                                                       // 11249
        }                                                                                                              // 11250
      }                                                                                                                // 11251
    }                                                                                                                  // 11252
                                                                                                                       // 11253
    XMLBuilder.prototype.root = function() {                                                                           // 11254
      return this.rootObject;                                                                                          // 11255
    };                                                                                                                 // 11256
                                                                                                                       // 11257
    XMLBuilder.prototype.end = function(options) {                                                                     // 11258
      return this.toString(options);                                                                                   // 11259
    };                                                                                                                 // 11260
                                                                                                                       // 11261
    XMLBuilder.prototype.toString = function(options) {                                                                // 11262
      var indent, newline, offset, pretty, r, ref, ref1, ref2;                                                         // 11263
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11264
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11265
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11266
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 11267
      r = '';                                                                                                          // 11268
      if (this.xmldec != null) {                                                                                       // 11269
        r += this.xmldec.toString(options);                                                                            // 11270
      }                                                                                                                // 11271
      if (this.doctype != null) {                                                                                      // 11272
        r += this.doctype.toString(options);                                                                           // 11273
      }                                                                                                                // 11274
      r += this.rootObject.toString(options);                                                                          // 11275
      if (pretty && r.slice(-newline.length) === newline) {                                                            // 11276
        r = r.slice(0, -newline.length);                                                                               // 11277
      }                                                                                                                // 11278
      return r;                                                                                                        // 11279
    };                                                                                                                 // 11280
                                                                                                                       // 11281
    return XMLBuilder;                                                                                                 // 11282
                                                                                                                       // 11283
  })();                                                                                                                // 11284
                                                                                                                       // 11285
}).call(this);                                                                                                         // 11286
                                                                                                                       // 11287
},{"./XMLDeclaration":89,"./XMLDocType":90,"./XMLElement":91,"./XMLStringifier":95}],83:[function(require,module,exports){
(function() {                                                                                                          // 11289
  var XMLCData, XMLNode, create,                                                                                       // 11290
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;                                                                                       // 11292
                                                                                                                       // 11293
  create = require('lodash/object/create');                                                                            // 11294
                                                                                                                       // 11295
  XMLNode = require('./XMLNode');                                                                                      // 11296
                                                                                                                       // 11297
  module.exports = XMLCData = (function(superClass) {                                                                  // 11298
    extend(XMLCData, superClass);                                                                                      // 11299
                                                                                                                       // 11300
    function XMLCData(parent, text) {                                                                                  // 11301
      XMLCData.__super__.constructor.call(this, parent);                                                               // 11302
      if (text == null) {                                                                                              // 11303
        throw new Error("Missing CDATA text");                                                                         // 11304
      }                                                                                                                // 11305
      this.text = this.stringify.cdata(text);                                                                          // 11306
    }                                                                                                                  // 11307
                                                                                                                       // 11308
    XMLCData.prototype.clone = function() {                                                                            // 11309
      return create(XMLCData.prototype, this);                                                                         // 11310
    };                                                                                                                 // 11311
                                                                                                                       // 11312
    XMLCData.prototype.toString = function(options, level) {                                                           // 11313
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11314
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11315
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11316
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11317
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 11318
      level || (level = 0);                                                                                            // 11319
      space = new Array(level + offset + 1).join(indent);                                                              // 11320
      r = '';                                                                                                          // 11321
      if (pretty) {                                                                                                    // 11322
        r += space;                                                                                                    // 11323
      }                                                                                                                // 11324
      r += '<![CDATA[' + this.text + ']]>';                                                                            // 11325
      if (pretty) {                                                                                                    // 11326
        r += newline;                                                                                                  // 11327
      }                                                                                                                // 11328
      return r;                                                                                                        // 11329
    };                                                                                                                 // 11330
                                                                                                                       // 11331
    return XMLCData;                                                                                                   // 11332
                                                                                                                       // 11333
  })(XMLNode);                                                                                                         // 11334
                                                                                                                       // 11335
}).call(this);                                                                                                         // 11336
                                                                                                                       // 11337
},{"./XMLNode":92,"lodash/object/create":140}],84:[function(require,module,exports){                                   // 11338
(function() {                                                                                                          // 11339
  var XMLComment, XMLNode, create,                                                                                     // 11340
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;                                                                                       // 11342
                                                                                                                       // 11343
  create = require('lodash/object/create');                                                                            // 11344
                                                                                                                       // 11345
  XMLNode = require('./XMLNode');                                                                                      // 11346
                                                                                                                       // 11347
  module.exports = XMLComment = (function(superClass) {                                                                // 11348
    extend(XMLComment, superClass);                                                                                    // 11349
                                                                                                                       // 11350
    function XMLComment(parent, text) {                                                                                // 11351
      XMLComment.__super__.constructor.call(this, parent);                                                             // 11352
      if (text == null) {                                                                                              // 11353
        throw new Error("Missing comment text");                                                                       // 11354
      }                                                                                                                // 11355
      this.text = this.stringify.comment(text);                                                                        // 11356
    }                                                                                                                  // 11357
                                                                                                                       // 11358
    XMLComment.prototype.clone = function() {                                                                          // 11359
      return create(XMLComment.prototype, this);                                                                       // 11360
    };                                                                                                                 // 11361
                                                                                                                       // 11362
    XMLComment.prototype.toString = function(options, level) {                                                         // 11363
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11364
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11365
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11366
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11367
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 11368
      level || (level = 0);                                                                                            // 11369
      space = new Array(level + offset + 1).join(indent);                                                              // 11370
      r = '';                                                                                                          // 11371
      if (pretty) {                                                                                                    // 11372
        r += space;                                                                                                    // 11373
      }                                                                                                                // 11374
      r += '<!-- ' + this.text + ' -->';                                                                               // 11375
      if (pretty) {                                                                                                    // 11376
        r += newline;                                                                                                  // 11377
      }                                                                                                                // 11378
      return r;                                                                                                        // 11379
    };                                                                                                                 // 11380
                                                                                                                       // 11381
    return XMLComment;                                                                                                 // 11382
                                                                                                                       // 11383
  })(XMLNode);                                                                                                         // 11384
                                                                                                                       // 11385
}).call(this);                                                                                                         // 11386
                                                                                                                       // 11387
},{"./XMLNode":92,"lodash/object/create":140}],85:[function(require,module,exports){                                   // 11388
(function() {                                                                                                          // 11389
  var XMLDTDAttList, create;                                                                                           // 11390
                                                                                                                       // 11391
  create = require('lodash/object/create');                                                                            // 11392
                                                                                                                       // 11393
  module.exports = XMLDTDAttList = (function() {                                                                       // 11394
    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {        // 11395
      this.stringify = parent.stringify;                                                                               // 11396
      if (elementName == null) {                                                                                       // 11397
        throw new Error("Missing DTD element name");                                                                   // 11398
      }                                                                                                                // 11399
      if (attributeName == null) {                                                                                     // 11400
        throw new Error("Missing DTD attribute name");                                                                 // 11401
      }                                                                                                                // 11402
      if (!attributeType) {                                                                                            // 11403
        throw new Error("Missing DTD attribute type");                                                                 // 11404
      }                                                                                                                // 11405
      if (!defaultValueType) {                                                                                         // 11406
        throw new Error("Missing DTD attribute default");                                                              // 11407
      }                                                                                                                // 11408
      if (defaultValueType.indexOf('#') !== 0) {                                                                       // 11409
        defaultValueType = '#' + defaultValueType;                                                                     // 11410
      }                                                                                                                // 11411
      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {                                         // 11412
        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");              // 11413
      }                                                                                                                // 11414
      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {                                            // 11415
        throw new Error("Default value only applies to #FIXED or #DEFAULT");                                           // 11416
      }                                                                                                                // 11417
      this.elementName = this.stringify.eleName(elementName);                                                          // 11418
      this.attributeName = this.stringify.attName(attributeName);                                                      // 11419
      this.attributeType = this.stringify.dtdAttType(attributeType);                                                   // 11420
      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);                                                  // 11421
      this.defaultValueType = defaultValueType;                                                                        // 11422
    }                                                                                                                  // 11423
                                                                                                                       // 11424
    XMLDTDAttList.prototype.clone = function() {                                                                       // 11425
      return create(XMLDTDAttList.prototype, this);                                                                    // 11426
    };                                                                                                                 // 11427
                                                                                                                       // 11428
    XMLDTDAttList.prototype.toString = function(options, level) {                                                      // 11429
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11430
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11431
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11432
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11433
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 11434
      level || (level = 0);                                                                                            // 11435
      space = new Array(level + offset + 1).join(indent);                                                              // 11436
      r = '';                                                                                                          // 11437
      if (pretty) {                                                                                                    // 11438
        r += space;                                                                                                    // 11439
      }                                                                                                                // 11440
      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;                      // 11441
      if (this.defaultValueType !== '#DEFAULT') {                                                                      // 11442
        r += ' ' + this.defaultValueType;                                                                              // 11443
      }                                                                                                                // 11444
      if (this.defaultValue) {                                                                                         // 11445
        r += ' "' + this.defaultValue + '"';                                                                           // 11446
      }                                                                                                                // 11447
      r += '>';                                                                                                        // 11448
      if (pretty) {                                                                                                    // 11449
        r += newline;                                                                                                  // 11450
      }                                                                                                                // 11451
      return r;                                                                                                        // 11452
    };                                                                                                                 // 11453
                                                                                                                       // 11454
    return XMLDTDAttList;                                                                                              // 11455
                                                                                                                       // 11456
  })();                                                                                                                // 11457
                                                                                                                       // 11458
}).call(this);                                                                                                         // 11459
                                                                                                                       // 11460
},{"lodash/object/create":140}],86:[function(require,module,exports){                                                  // 11461
(function() {                                                                                                          // 11462
  var XMLDTDElement, create, isArray;                                                                                  // 11463
                                                                                                                       // 11464
  create = require('lodash/object/create');                                                                            // 11465
                                                                                                                       // 11466
  isArray = require('lodash/lang/isArray');                                                                            // 11467
                                                                                                                       // 11468
  module.exports = XMLDTDElement = (function() {                                                                       // 11469
    function XMLDTDElement(parent, name, value) {                                                                      // 11470
      this.stringify = parent.stringify;                                                                               // 11471
      if (name == null) {                                                                                              // 11472
        throw new Error("Missing DTD element name");                                                                   // 11473
      }                                                                                                                // 11474
      if (!value) {                                                                                                    // 11475
        value = '(#PCDATA)';                                                                                           // 11476
      }                                                                                                                // 11477
      if (isArray(value)) {                                                                                            // 11478
        value = '(' + value.join(',') + ')';                                                                           // 11479
      }                                                                                                                // 11480
      this.name = this.stringify.eleName(name);                                                                        // 11481
      this.value = this.stringify.dtdElementValue(value);                                                              // 11482
    }                                                                                                                  // 11483
                                                                                                                       // 11484
    XMLDTDElement.prototype.clone = function() {                                                                       // 11485
      return create(XMLDTDElement.prototype, this);                                                                    // 11486
    };                                                                                                                 // 11487
                                                                                                                       // 11488
    XMLDTDElement.prototype.toString = function(options, level) {                                                      // 11489
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11490
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11491
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11492
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11493
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 11494
      level || (level = 0);                                                                                            // 11495
      space = new Array(level + offset + 1).join(indent);                                                              // 11496
      r = '';                                                                                                          // 11497
      if (pretty) {                                                                                                    // 11498
        r += space;                                                                                                    // 11499
      }                                                                                                                // 11500
      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';                                                          // 11501
      if (pretty) {                                                                                                    // 11502
        r += newline;                                                                                                  // 11503
      }                                                                                                                // 11504
      return r;                                                                                                        // 11505
    };                                                                                                                 // 11506
                                                                                                                       // 11507
    return XMLDTDElement;                                                                                              // 11508
                                                                                                                       // 11509
  })();                                                                                                                // 11510
                                                                                                                       // 11511
}).call(this);                                                                                                         // 11512
                                                                                                                       // 11513
},{"lodash/lang/isArray":132,"lodash/object/create":140}],87:[function(require,module,exports){                        // 11514
(function() {                                                                                                          // 11515
  var XMLDTDEntity, create, isObject;                                                                                  // 11516
                                                                                                                       // 11517
  create = require('lodash/object/create');                                                                            // 11518
                                                                                                                       // 11519
  isObject = require('lodash/lang/isObject');                                                                          // 11520
                                                                                                                       // 11521
  module.exports = XMLDTDEntity = (function() {                                                                        // 11522
    function XMLDTDEntity(parent, pe, name, value) {                                                                   // 11523
      this.stringify = parent.stringify;                                                                               // 11524
      if (name == null) {                                                                                              // 11525
        throw new Error("Missing entity name");                                                                        // 11526
      }                                                                                                                // 11527
      if (value == null) {                                                                                             // 11528
        throw new Error("Missing entity value");                                                                       // 11529
      }                                                                                                                // 11530
      this.pe = !!pe;                                                                                                  // 11531
      this.name = this.stringify.eleName(name);                                                                        // 11532
      if (!isObject(value)) {                                                                                          // 11533
        this.value = this.stringify.dtdEntityValue(value);                                                             // 11534
      } else {                                                                                                         // 11535
        if (!value.pubID && !value.sysID) {                                                                            // 11536
          throw new Error("Public and/or system identifiers are required for an external entity");                     // 11537
        }                                                                                                              // 11538
        if (value.pubID && !value.sysID) {                                                                             // 11539
          throw new Error("System identifier is required for a public external entity");                               // 11540
        }                                                                                                              // 11541
        if (value.pubID != null) {                                                                                     // 11542
          this.pubID = this.stringify.dtdPubID(value.pubID);                                                           // 11543
        }                                                                                                              // 11544
        if (value.sysID != null) {                                                                                     // 11545
          this.sysID = this.stringify.dtdSysID(value.sysID);                                                           // 11546
        }                                                                                                              // 11547
        if (value.nData != null) {                                                                                     // 11548
          this.nData = this.stringify.dtdNData(value.nData);                                                           // 11549
        }                                                                                                              // 11550
        if (this.pe && this.nData) {                                                                                   // 11551
          throw new Error("Notation declaration is not allowed in a parameter entity");                                // 11552
        }                                                                                                              // 11553
      }                                                                                                                // 11554
    }                                                                                                                  // 11555
                                                                                                                       // 11556
    XMLDTDEntity.prototype.clone = function() {                                                                        // 11557
      return create(XMLDTDEntity.prototype, this);                                                                     // 11558
    };                                                                                                                 // 11559
                                                                                                                       // 11560
    XMLDTDEntity.prototype.toString = function(options, level) {                                                       // 11561
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11562
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11563
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11564
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11565
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 11566
      level || (level = 0);                                                                                            // 11567
      space = new Array(level + offset + 1).join(indent);                                                              // 11568
      r = '';                                                                                                          // 11569
      if (pretty) {                                                                                                    // 11570
        r += space;                                                                                                    // 11571
      }                                                                                                                // 11572
      r += '<!ENTITY';                                                                                                 // 11573
      if (this.pe) {                                                                                                   // 11574
        r += ' %';                                                                                                     // 11575
      }                                                                                                                // 11576
      r += ' ' + this.name;                                                                                            // 11577
      if (this.value) {                                                                                                // 11578
        r += ' "' + this.value + '"';                                                                                  // 11579
      } else {                                                                                                         // 11580
        if (this.pubID && this.sysID) {                                                                                // 11581
          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';                                                    // 11582
        } else if (this.sysID) {                                                                                       // 11583
          r += ' SYSTEM "' + this.sysID + '"';                                                                         // 11584
        }                                                                                                              // 11585
        if (this.nData) {                                                                                              // 11586
          r += ' NDATA ' + this.nData;                                                                                 // 11587
        }                                                                                                              // 11588
      }                                                                                                                // 11589
      r += '>';                                                                                                        // 11590
      if (pretty) {                                                                                                    // 11591
        r += newline;                                                                                                  // 11592
      }                                                                                                                // 11593
      return r;                                                                                                        // 11594
    };                                                                                                                 // 11595
                                                                                                                       // 11596
    return XMLDTDEntity;                                                                                               // 11597
                                                                                                                       // 11598
  })();                                                                                                                // 11599
                                                                                                                       // 11600
}).call(this);                                                                                                         // 11601
                                                                                                                       // 11602
},{"lodash/lang/isObject":136,"lodash/object/create":140}],88:[function(require,module,exports){                       // 11603
(function() {                                                                                                          // 11604
  var XMLDTDNotation, create;                                                                                          // 11605
                                                                                                                       // 11606
  create = require('lodash/object/create');                                                                            // 11607
                                                                                                                       // 11608
  module.exports = XMLDTDNotation = (function() {                                                                      // 11609
    function XMLDTDNotation(parent, name, value) {                                                                     // 11610
      this.stringify = parent.stringify;                                                                               // 11611
      if (name == null) {                                                                                              // 11612
        throw new Error("Missing notation name");                                                                      // 11613
      }                                                                                                                // 11614
      if (!value.pubID && !value.sysID) {                                                                              // 11615
        throw new Error("Public or system identifiers are required for an external entity");                           // 11616
      }                                                                                                                // 11617
      this.name = this.stringify.eleName(name);                                                                        // 11618
      if (value.pubID != null) {                                                                                       // 11619
        this.pubID = this.stringify.dtdPubID(value.pubID);                                                             // 11620
      }                                                                                                                // 11621
      if (value.sysID != null) {                                                                                       // 11622
        this.sysID = this.stringify.dtdSysID(value.sysID);                                                             // 11623
      }                                                                                                                // 11624
    }                                                                                                                  // 11625
                                                                                                                       // 11626
    XMLDTDNotation.prototype.clone = function() {                                                                      // 11627
      return create(XMLDTDNotation.prototype, this);                                                                   // 11628
    };                                                                                                                 // 11629
                                                                                                                       // 11630
    XMLDTDNotation.prototype.toString = function(options, level) {                                                     // 11631
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11632
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11633
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11634
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11635
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 11636
      level || (level = 0);                                                                                            // 11637
      space = new Array(level + offset + 1).join(indent);                                                              // 11638
      r = '';                                                                                                          // 11639
      if (pretty) {                                                                                                    // 11640
        r += space;                                                                                                    // 11641
      }                                                                                                                // 11642
      r += '<!NOTATION ' + this.name;                                                                                  // 11643
      if (this.pubID && this.sysID) {                                                                                  // 11644
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';                                                      // 11645
      } else if (this.pubID) {                                                                                         // 11646
        r += ' PUBLIC "' + this.pubID + '"';                                                                           // 11647
      } else if (this.sysID) {                                                                                         // 11648
        r += ' SYSTEM "' + this.sysID + '"';                                                                           // 11649
      }                                                                                                                // 11650
      r += '>';                                                                                                        // 11651
      if (pretty) {                                                                                                    // 11652
        r += newline;                                                                                                  // 11653
      }                                                                                                                // 11654
      return r;                                                                                                        // 11655
    };                                                                                                                 // 11656
                                                                                                                       // 11657
    return XMLDTDNotation;                                                                                             // 11658
                                                                                                                       // 11659
  })();                                                                                                                // 11660
                                                                                                                       // 11661
}).call(this);                                                                                                         // 11662
                                                                                                                       // 11663
},{"lodash/object/create":140}],89:[function(require,module,exports){                                                  // 11664
(function() {                                                                                                          // 11665
  var XMLDeclaration, XMLNode, create, isObject,                                                                       // 11666
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;                                                                                       // 11668
                                                                                                                       // 11669
  create = require('lodash/object/create');                                                                            // 11670
                                                                                                                       // 11671
  isObject = require('lodash/lang/isObject');                                                                          // 11672
                                                                                                                       // 11673
  XMLNode = require('./XMLNode');                                                                                      // 11674
                                                                                                                       // 11675
  module.exports = XMLDeclaration = (function(superClass) {                                                            // 11676
    extend(XMLDeclaration, superClass);                                                                                // 11677
                                                                                                                       // 11678
    function XMLDeclaration(parent, version, encoding, standalone) {                                                   // 11679
      var ref;                                                                                                         // 11680
      XMLDeclaration.__super__.constructor.call(this, parent);                                                         // 11681
      if (isObject(version)) {                                                                                         // 11682
        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;                    // 11683
      }                                                                                                                // 11684
      if (!version) {                                                                                                  // 11685
        version = '1.0';                                                                                               // 11686
      }                                                                                                                // 11687
      if (version != null) {                                                                                           // 11688
        this.version = this.stringify.xmlVersion(version);                                                             // 11689
      }                                                                                                                // 11690
      if (encoding != null) {                                                                                          // 11691
        this.encoding = this.stringify.xmlEncoding(encoding);                                                          // 11692
      }                                                                                                                // 11693
      if (standalone != null) {                                                                                        // 11694
        this.standalone = this.stringify.xmlStandalone(standalone);                                                    // 11695
      }                                                                                                                // 11696
    }                                                                                                                  // 11697
                                                                                                                       // 11698
    XMLDeclaration.prototype.clone = function() {                                                                      // 11699
      return create(XMLDeclaration.prototype, this);                                                                   // 11700
    };                                                                                                                 // 11701
                                                                                                                       // 11702
    XMLDeclaration.prototype.toString = function(options, level) {                                                     // 11703
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 11704
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11705
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11706
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11707
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 11708
      level || (level = 0);                                                                                            // 11709
      space = new Array(level + offset + 1).join(indent);                                                              // 11710
      r = '';                                                                                                          // 11711
      if (pretty) {                                                                                                    // 11712
        r += space;                                                                                                    // 11713
      }                                                                                                                // 11714
      r += '<?xml';                                                                                                    // 11715
      if (this.version != null) {                                                                                      // 11716
        r += ' version="' + this.version + '"';                                                                        // 11717
      }                                                                                                                // 11718
      if (this.encoding != null) {                                                                                     // 11719
        r += ' encoding="' + this.encoding + '"';                                                                      // 11720
      }                                                                                                                // 11721
      if (this.standalone != null) {                                                                                   // 11722
        r += ' standalone="' + this.standalone + '"';                                                                  // 11723
      }                                                                                                                // 11724
      r += '?>';                                                                                                       // 11725
      if (pretty) {                                                                                                    // 11726
        r += newline;                                                                                                  // 11727
      }                                                                                                                // 11728
      return r;                                                                                                        // 11729
    };                                                                                                                 // 11730
                                                                                                                       // 11731
    return XMLDeclaration;                                                                                             // 11732
                                                                                                                       // 11733
  })(XMLNode);                                                                                                         // 11734
                                                                                                                       // 11735
}).call(this);                                                                                                         // 11736
                                                                                                                       // 11737
},{"./XMLNode":92,"lodash/lang/isObject":136,"lodash/object/create":140}],90:[function(require,module,exports){        // 11738
(function() {                                                                                                          // 11739
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;
                                                                                                                       // 11741
  create = require('lodash/object/create');                                                                            // 11742
                                                                                                                       // 11743
  isObject = require('lodash/lang/isObject');                                                                          // 11744
                                                                                                                       // 11745
  XMLCData = require('./XMLCData');                                                                                    // 11746
                                                                                                                       // 11747
  XMLComment = require('./XMLComment');                                                                                // 11748
                                                                                                                       // 11749
  XMLDTDAttList = require('./XMLDTDAttList');                                                                          // 11750
                                                                                                                       // 11751
  XMLDTDEntity = require('./XMLDTDEntity');                                                                            // 11752
                                                                                                                       // 11753
  XMLDTDElement = require('./XMLDTDElement');                                                                          // 11754
                                                                                                                       // 11755
  XMLDTDNotation = require('./XMLDTDNotation');                                                                        // 11756
                                                                                                                       // 11757
  XMLProcessingInstruction = require('./XMLProcessingInstruction');                                                    // 11758
                                                                                                                       // 11759
  module.exports = XMLDocType = (function() {                                                                          // 11760
    function XMLDocType(parent, pubID, sysID) {                                                                        // 11761
      var ref, ref1;                                                                                                   // 11762
      this.documentObject = parent;                                                                                    // 11763
      this.stringify = this.documentObject.stringify;                                                                  // 11764
      this.children = [];                                                                                              // 11765
      if (isObject(pubID)) {                                                                                           // 11766
        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;                                                             // 11767
      }                                                                                                                // 11768
      if (sysID == null) {                                                                                             // 11769
        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];                                                       // 11770
      }                                                                                                                // 11771
      if (pubID != null) {                                                                                             // 11772
        this.pubID = this.stringify.dtdPubID(pubID);                                                                   // 11773
      }                                                                                                                // 11774
      if (sysID != null) {                                                                                             // 11775
        this.sysID = this.stringify.dtdSysID(sysID);                                                                   // 11776
      }                                                                                                                // 11777
    }                                                                                                                  // 11778
                                                                                                                       // 11779
    XMLDocType.prototype.clone = function() {                                                                          // 11780
      return create(XMLDocType.prototype, this);                                                                       // 11781
    };                                                                                                                 // 11782
                                                                                                                       // 11783
    XMLDocType.prototype.element = function(name, value) {                                                             // 11784
      var child;                                                                                                       // 11785
      child = new XMLDTDElement(this, name, value);                                                                    // 11786
      this.children.push(child);                                                                                       // 11787
      return this;                                                                                                     // 11788
    };                                                                                                                 // 11789
                                                                                                                       // 11790
    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var child;                                                                                                       // 11792
      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);      // 11793
      this.children.push(child);                                                                                       // 11794
      return this;                                                                                                     // 11795
    };                                                                                                                 // 11796
                                                                                                                       // 11797
    XMLDocType.prototype.entity = function(name, value) {                                                              // 11798
      var child;                                                                                                       // 11799
      child = new XMLDTDEntity(this, false, name, value);                                                              // 11800
      this.children.push(child);                                                                                       // 11801
      return this;                                                                                                     // 11802
    };                                                                                                                 // 11803
                                                                                                                       // 11804
    XMLDocType.prototype.pEntity = function(name, value) {                                                             // 11805
      var child;                                                                                                       // 11806
      child = new XMLDTDEntity(this, true, name, value);                                                               // 11807
      this.children.push(child);                                                                                       // 11808
      return this;                                                                                                     // 11809
    };                                                                                                                 // 11810
                                                                                                                       // 11811
    XMLDocType.prototype.notation = function(name, value) {                                                            // 11812
      var child;                                                                                                       // 11813
      child = new XMLDTDNotation(this, name, value);                                                                   // 11814
      this.children.push(child);                                                                                       // 11815
      return this;                                                                                                     // 11816
    };                                                                                                                 // 11817
                                                                                                                       // 11818
    XMLDocType.prototype.cdata = function(value) {                                                                     // 11819
      var child;                                                                                                       // 11820
      child = new XMLCData(this, value);                                                                               // 11821
      this.children.push(child);                                                                                       // 11822
      return this;                                                                                                     // 11823
    };                                                                                                                 // 11824
                                                                                                                       // 11825
    XMLDocType.prototype.comment = function(value) {                                                                   // 11826
      var child;                                                                                                       // 11827
      child = new XMLComment(this, value);                                                                             // 11828
      this.children.push(child);                                                                                       // 11829
      return this;                                                                                                     // 11830
    };                                                                                                                 // 11831
                                                                                                                       // 11832
    XMLDocType.prototype.instruction = function(target, value) {                                                       // 11833
      var child;                                                                                                       // 11834
      child = new XMLProcessingInstruction(this, target, value);                                                       // 11835
      this.children.push(child);                                                                                       // 11836
      return this;                                                                                                     // 11837
    };                                                                                                                 // 11838
                                                                                                                       // 11839
    XMLDocType.prototype.root = function() {                                                                           // 11840
      return this.documentObject.root();                                                                               // 11841
    };                                                                                                                 // 11842
                                                                                                                       // 11843
    XMLDocType.prototype.document = function() {                                                                       // 11844
      return this.documentObject;                                                                                      // 11845
    };                                                                                                                 // 11846
                                                                                                                       // 11847
    XMLDocType.prototype.toString = function(options, level) {                                                         // 11848
      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;                             // 11849
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 11850
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 11851
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 11852
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 11853
      level || (level = 0);                                                                                            // 11854
      space = new Array(level + offset + 1).join(indent);                                                              // 11855
      r = '';                                                                                                          // 11856
      if (pretty) {                                                                                                    // 11857
        r += space;                                                                                                    // 11858
      }                                                                                                                // 11859
      r += '<!DOCTYPE ' + this.root().name;                                                                            // 11860
      if (this.pubID && this.sysID) {                                                                                  // 11861
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';                                                      // 11862
      } else if (this.sysID) {                                                                                         // 11863
        r += ' SYSTEM "' + this.sysID + '"';                                                                           // 11864
      }                                                                                                                // 11865
      if (this.children.length > 0) {                                                                                  // 11866
        r += ' [';                                                                                                     // 11867
        if (pretty) {                                                                                                  // 11868
          r += newline;                                                                                                // 11869
        }                                                                                                              // 11870
        ref3 = this.children;                                                                                          // 11871
        for (i = 0, len = ref3.length; i < len; i++) {                                                                 // 11872
          child = ref3[i];                                                                                             // 11873
          r += child.toString(options, level + 1);                                                                     // 11874
        }                                                                                                              // 11875
        r += ']';                                                                                                      // 11876
      }                                                                                                                // 11877
      r += '>';                                                                                                        // 11878
      if (pretty) {                                                                                                    // 11879
        r += newline;                                                                                                  // 11880
      }                                                                                                                // 11881
      return r;                                                                                                        // 11882
    };                                                                                                                 // 11883
                                                                                                                       // 11884
    XMLDocType.prototype.ele = function(name, value) {                                                                 // 11885
      return this.element(name, value);                                                                                // 11886
    };                                                                                                                 // 11887
                                                                                                                       // 11888
    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {   // 11889
      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);                  // 11890
    };                                                                                                                 // 11891
                                                                                                                       // 11892
    XMLDocType.prototype.ent = function(name, value) {                                                                 // 11893
      return this.entity(name, value);                                                                                 // 11894
    };                                                                                                                 // 11895
                                                                                                                       // 11896
    XMLDocType.prototype.pent = function(name, value) {                                                                // 11897
      return this.pEntity(name, value);                                                                                // 11898
    };                                                                                                                 // 11899
                                                                                                                       // 11900
    XMLDocType.prototype.not = function(name, value) {                                                                 // 11901
      return this.notation(name, value);                                                                               // 11902
    };                                                                                                                 // 11903
                                                                                                                       // 11904
    XMLDocType.prototype.dat = function(value) {                                                                       // 11905
      return this.cdata(value);                                                                                        // 11906
    };                                                                                                                 // 11907
                                                                                                                       // 11908
    XMLDocType.prototype.com = function(value) {                                                                       // 11909
      return this.comment(value);                                                                                      // 11910
    };                                                                                                                 // 11911
                                                                                                                       // 11912
    XMLDocType.prototype.ins = function(target, value) {                                                               // 11913
      return this.instruction(target, value);                                                                          // 11914
    };                                                                                                                 // 11915
                                                                                                                       // 11916
    XMLDocType.prototype.up = function() {                                                                             // 11917
      return this.root();                                                                                              // 11918
    };                                                                                                                 // 11919
                                                                                                                       // 11920
    XMLDocType.prototype.doc = function() {                                                                            // 11921
      return this.document();                                                                                          // 11922
    };                                                                                                                 // 11923
                                                                                                                       // 11924
    return XMLDocType;                                                                                                 // 11925
                                                                                                                       // 11926
  })();                                                                                                                // 11927
                                                                                                                       // 11928
}).call(this);                                                                                                         // 11929
                                                                                                                       // 11930
},{"./XMLCData":83,"./XMLComment":84,"./XMLDTDAttList":85,"./XMLDTDElement":86,"./XMLDTDEntity":87,"./XMLDTDNotation":88,"./XMLProcessingInstruction":93,"lodash/lang/isObject":136,"lodash/object/create":140}],91:[function(require,module,exports){
(function() {                                                                                                          // 11932
  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isArray, isFunction, isObject,       // 11933
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;                                                                                       // 11935
                                                                                                                       // 11936
  create = require('lodash/object/create');                                                                            // 11937
                                                                                                                       // 11938
  isObject = require('lodash/lang/isObject');                                                                          // 11939
                                                                                                                       // 11940
  isArray = require('lodash/lang/isArray');                                                                            // 11941
                                                                                                                       // 11942
  isFunction = require('lodash/lang/isFunction');                                                                      // 11943
                                                                                                                       // 11944
  every = require('lodash/collection/every');                                                                          // 11945
                                                                                                                       // 11946
  XMLNode = require('./XMLNode');                                                                                      // 11947
                                                                                                                       // 11948
  XMLAttribute = require('./XMLAttribute');                                                                            // 11949
                                                                                                                       // 11950
  XMLProcessingInstruction = require('./XMLProcessingInstruction');                                                    // 11951
                                                                                                                       // 11952
  module.exports = XMLElement = (function(superClass) {                                                                // 11953
    extend(XMLElement, superClass);                                                                                    // 11954
                                                                                                                       // 11955
    function XMLElement(parent, name, attributes) {                                                                    // 11956
      XMLElement.__super__.constructor.call(this, parent);                                                             // 11957
      if (name == null) {                                                                                              // 11958
        throw new Error("Missing element name");                                                                       // 11959
      }                                                                                                                // 11960
      this.name = this.stringify.eleName(name);                                                                        // 11961
      this.children = [];                                                                                              // 11962
      this.instructions = [];                                                                                          // 11963
      this.attributes = {};                                                                                            // 11964
      if (attributes != null) {                                                                                        // 11965
        this.attribute(attributes);                                                                                    // 11966
      }                                                                                                                // 11967
    }                                                                                                                  // 11968
                                                                                                                       // 11969
    XMLElement.prototype.clone = function() {                                                                          // 11970
      var att, attName, clonedSelf, i, len, pi, ref, ref1;                                                             // 11971
      clonedSelf = create(XMLElement.prototype, this);                                                                 // 11972
      if (clonedSelf.isRoot) {                                                                                         // 11973
        clonedSelf.documentObject = null;                                                                              // 11974
      }                                                                                                                // 11975
      clonedSelf.attributes = {};                                                                                      // 11976
      ref = this.attributes;                                                                                           // 11977
      for (attName in ref) {                                                                                           // 11978
        if (!hasProp.call(ref, attName)) continue;                                                                     // 11979
        att = ref[attName];                                                                                            // 11980
        clonedSelf.attributes[attName] = att.clone();                                                                  // 11981
      }                                                                                                                // 11982
      clonedSelf.instructions = [];                                                                                    // 11983
      ref1 = this.instructions;                                                                                        // 11984
      for (i = 0, len = ref1.length; i < len; i++) {                                                                   // 11985
        pi = ref1[i];                                                                                                  // 11986
        clonedSelf.instructions.push(pi.clone());                                                                      // 11987
      }                                                                                                                // 11988
      clonedSelf.children = [];                                                                                        // 11989
      this.children.forEach(function(child) {                                                                          // 11990
        var clonedChild;                                                                                               // 11991
        clonedChild = child.clone();                                                                                   // 11992
        clonedChild.parent = clonedSelf;                                                                               // 11993
        return clonedSelf.children.push(clonedChild);                                                                  // 11994
      });                                                                                                              // 11995
      return clonedSelf;                                                                                               // 11996
    };                                                                                                                 // 11997
                                                                                                                       // 11998
    XMLElement.prototype.attribute = function(name, value) {                                                           // 11999
      var attName, attValue;                                                                                           // 12000
      if (name != null) {                                                                                              // 12001
        name = name.valueOf();                                                                                         // 12002
      }                                                                                                                // 12003
      if (isObject(name)) {                                                                                            // 12004
        for (attName in name) {                                                                                        // 12005
          if (!hasProp.call(name, attName)) continue;                                                                  // 12006
          attValue = name[attName];                                                                                    // 12007
          this.attribute(attName, attValue);                                                                           // 12008
        }                                                                                                              // 12009
      } else {                                                                                                         // 12010
        if (isFunction(value)) {                                                                                       // 12011
          value = value.apply();                                                                                       // 12012
        }                                                                                                              // 12013
        if (!this.options.skipNullAttributes || (value != null)) {                                                     // 12014
          this.attributes[name] = new XMLAttribute(this, name, value);                                                 // 12015
        }                                                                                                              // 12016
      }                                                                                                                // 12017
      return this;                                                                                                     // 12018
    };                                                                                                                 // 12019
                                                                                                                       // 12020
    XMLElement.prototype.removeAttribute = function(name) {                                                            // 12021
      var attName, i, len;                                                                                             // 12022
      if (name == null) {                                                                                              // 12023
        throw new Error("Missing attribute name");                                                                     // 12024
      }                                                                                                                // 12025
      name = name.valueOf();                                                                                           // 12026
      if (isArray(name)) {                                                                                             // 12027
        for (i = 0, len = name.length; i < len; i++) {                                                                 // 12028
          attName = name[i];                                                                                           // 12029
          delete this.attributes[attName];                                                                             // 12030
        }                                                                                                              // 12031
      } else {                                                                                                         // 12032
        delete this.attributes[name];                                                                                  // 12033
      }                                                                                                                // 12034
      return this;                                                                                                     // 12035
    };                                                                                                                 // 12036
                                                                                                                       // 12037
    XMLElement.prototype.instruction = function(target, value) {                                                       // 12038
      var i, insTarget, insValue, instruction, len;                                                                    // 12039
      if (target != null) {                                                                                            // 12040
        target = target.valueOf();                                                                                     // 12041
      }                                                                                                                // 12042
      if (value != null) {                                                                                             // 12043
        value = value.valueOf();                                                                                       // 12044
      }                                                                                                                // 12045
      if (isArray(target)) {                                                                                           // 12046
        for (i = 0, len = target.length; i < len; i++) {                                                               // 12047
          insTarget = target[i];                                                                                       // 12048
          this.instruction(insTarget);                                                                                 // 12049
        }                                                                                                              // 12050
      } else if (isObject(target)) {                                                                                   // 12051
        for (insTarget in target) {                                                                                    // 12052
          if (!hasProp.call(target, insTarget)) continue;                                                              // 12053
          insValue = target[insTarget];                                                                                // 12054
          this.instruction(insTarget, insValue);                                                                       // 12055
        }                                                                                                              // 12056
      } else {                                                                                                         // 12057
        if (isFunction(value)) {                                                                                       // 12058
          value = value.apply();                                                                                       // 12059
        }                                                                                                              // 12060
        instruction = new XMLProcessingInstruction(this, target, value);                                               // 12061
        this.instructions.push(instruction);                                                                           // 12062
      }                                                                                                                // 12063
      return this;                                                                                                     // 12064
    };                                                                                                                 // 12065
                                                                                                                       // 12066
    XMLElement.prototype.toString = function(options, level) {                                                         // 12067
      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 12069
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 12070
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 12071
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 12072
      level || (level = 0);                                                                                            // 12073
      space = new Array(level + offset + 1).join(indent);                                                              // 12074
      r = '';                                                                                                          // 12075
      ref3 = this.instructions;                                                                                        // 12076
      for (i = 0, len = ref3.length; i < len; i++) {                                                                   // 12077
        instruction = ref3[i];                                                                                         // 12078
        r += instruction.toString(options, level + 1);                                                                 // 12079
      }                                                                                                                // 12080
      if (pretty) {                                                                                                    // 12081
        r += space;                                                                                                    // 12082
      }                                                                                                                // 12083
      r += '<' + this.name;                                                                                            // 12084
      ref4 = this.attributes;                                                                                          // 12085
      for (name in ref4) {                                                                                             // 12086
        if (!hasProp.call(ref4, name)) continue;                                                                       // 12087
        att = ref4[name];                                                                                              // 12088
        r += att.toString(options);                                                                                    // 12089
      }                                                                                                                // 12090
      if (this.children.length === 0 || every(this.children, function(e) {                                             // 12091
        return e.value === '';                                                                                         // 12092
      })) {                                                                                                            // 12093
        r += '/>';                                                                                                     // 12094
        if (pretty) {                                                                                                  // 12095
          r += newline;                                                                                                // 12096
        }                                                                                                              // 12097
      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {                           // 12098
        r += '>';                                                                                                      // 12099
        r += this.children[0].value;                                                                                   // 12100
        r += '</' + this.name + '>';                                                                                   // 12101
        r += newline;                                                                                                  // 12102
      } else {                                                                                                         // 12103
        r += '>';                                                                                                      // 12104
        if (pretty) {                                                                                                  // 12105
          r += newline;                                                                                                // 12106
        }                                                                                                              // 12107
        ref5 = this.children;                                                                                          // 12108
        for (j = 0, len1 = ref5.length; j < len1; j++) {                                                               // 12109
          child = ref5[j];                                                                                             // 12110
          r += child.toString(options, level + 1);                                                                     // 12111
        }                                                                                                              // 12112
        if (pretty) {                                                                                                  // 12113
          r += space;                                                                                                  // 12114
        }                                                                                                              // 12115
        r += '</' + this.name + '>';                                                                                   // 12116
        if (pretty) {                                                                                                  // 12117
          r += newline;                                                                                                // 12118
        }                                                                                                              // 12119
      }                                                                                                                // 12120
      return r;                                                                                                        // 12121
    };                                                                                                                 // 12122
                                                                                                                       // 12123
    XMLElement.prototype.att = function(name, value) {                                                                 // 12124
      return this.attribute(name, value);                                                                              // 12125
    };                                                                                                                 // 12126
                                                                                                                       // 12127
    XMLElement.prototype.ins = function(target, value) {                                                               // 12128
      return this.instruction(target, value);                                                                          // 12129
    };                                                                                                                 // 12130
                                                                                                                       // 12131
    XMLElement.prototype.a = function(name, value) {                                                                   // 12132
      return this.attribute(name, value);                                                                              // 12133
    };                                                                                                                 // 12134
                                                                                                                       // 12135
    XMLElement.prototype.i = function(target, value) {                                                                 // 12136
      return this.instruction(target, value);                                                                          // 12137
    };                                                                                                                 // 12138
                                                                                                                       // 12139
    return XMLElement;                                                                                                 // 12140
                                                                                                                       // 12141
  })(XMLNode);                                                                                                         // 12142
                                                                                                                       // 12143
}).call(this);                                                                                                         // 12144
                                                                                                                       // 12145
},{"./XMLAttribute":81,"./XMLNode":92,"./XMLProcessingInstruction":93,"lodash/collection/every":98,"lodash/lang/isArray":132,"lodash/lang/isFunction":134,"lodash/lang/isObject":136,"lodash/object/create":140}],92:[function(require,module,exports){
(function() {                                                                                                          // 12147
  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isArray, isEmpty, isFunction, isObject,
    hasProp = {}.hasOwnProperty;                                                                                       // 12149
                                                                                                                       // 12150
  isObject = require('lodash/lang/isObject');                                                                          // 12151
                                                                                                                       // 12152
  isArray = require('lodash/lang/isArray');                                                                            // 12153
                                                                                                                       // 12154
  isFunction = require('lodash/lang/isFunction');                                                                      // 12155
                                                                                                                       // 12156
  isEmpty = require('lodash/lang/isEmpty');                                                                            // 12157
                                                                                                                       // 12158
  XMLElement = null;                                                                                                   // 12159
                                                                                                                       // 12160
  XMLCData = null;                                                                                                     // 12161
                                                                                                                       // 12162
  XMLComment = null;                                                                                                   // 12163
                                                                                                                       // 12164
  XMLDeclaration = null;                                                                                               // 12165
                                                                                                                       // 12166
  XMLDocType = null;                                                                                                   // 12167
                                                                                                                       // 12168
  XMLRaw = null;                                                                                                       // 12169
                                                                                                                       // 12170
  XMLText = null;                                                                                                      // 12171
                                                                                                                       // 12172
  module.exports = XMLNode = (function() {                                                                             // 12173
    function XMLNode(parent) {                                                                                         // 12174
      this.parent = parent;                                                                                            // 12175
      this.options = this.parent.options;                                                                              // 12176
      this.stringify = this.parent.stringify;                                                                          // 12177
      if (XMLElement === null) {                                                                                       // 12178
        XMLElement = require('./XMLElement');                                                                          // 12179
        XMLCData = require('./XMLCData');                                                                              // 12180
        XMLComment = require('./XMLComment');                                                                          // 12181
        XMLDeclaration = require('./XMLDeclaration');                                                                  // 12182
        XMLDocType = require('./XMLDocType');                                                                          // 12183
        XMLRaw = require('./XMLRaw');                                                                                  // 12184
        XMLText = require('./XMLText');                                                                                // 12185
      }                                                                                                                // 12186
    }                                                                                                                  // 12187
                                                                                                                       // 12188
    XMLNode.prototype.clone = function() {                                                                             // 12189
      throw new Error("Cannot clone generic XMLNode");                                                                 // 12190
    };                                                                                                                 // 12191
                                                                                                                       // 12192
    XMLNode.prototype.element = function(name, attributes, text) {                                                     // 12193
      var item, j, key, lastChild, len, ref, val;                                                                      // 12194
      lastChild = null;                                                                                                // 12195
      if (attributes == null) {                                                                                        // 12196
        attributes = {};                                                                                               // 12197
      }                                                                                                                // 12198
      attributes = attributes.valueOf();                                                                               // 12199
      if (!isObject(attributes)) {                                                                                     // 12200
        ref = [attributes, text], text = ref[0], attributes = ref[1];                                                  // 12201
      }                                                                                                                // 12202
      if (name != null) {                                                                                              // 12203
        name = name.valueOf();                                                                                         // 12204
      }                                                                                                                // 12205
      if (isArray(name)) {                                                                                             // 12206
        for (j = 0, len = name.length; j < len; j++) {                                                                 // 12207
          item = name[j];                                                                                              // 12208
          lastChild = this.element(item);                                                                              // 12209
        }                                                                                                              // 12210
      } else if (isFunction(name)) {                                                                                   // 12211
        lastChild = this.element(name.apply());                                                                        // 12212
      } else if (isObject(name)) {                                                                                     // 12213
        for (key in name) {                                                                                            // 12214
          if (!hasProp.call(name, key)) continue;                                                                      // 12215
          val = name[key];                                                                                             // 12216
          if (isFunction(val)) {                                                                                       // 12217
            val = val.apply();                                                                                         // 12218
          }                                                                                                            // 12219
          if ((isObject(val)) && (isEmpty(val))) {                                                                     // 12220
            val = null;                                                                                                // 12221
          }                                                                                                            // 12222
          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);                          // 12224
          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);                         // 12226
          } else if (isObject(val)) {                                                                                  // 12227
            if (!this.options.ignoreDecorators && this.stringify.convertListKey && key.indexOf(this.stringify.convertListKey) === 0 && isArray(val)) {
              lastChild = this.element(val);                                                                           // 12229
            } else {                                                                                                   // 12230
              lastChild = this.element(key);                                                                           // 12231
              lastChild.element(val);                                                                                  // 12232
            }                                                                                                          // 12233
          } else {                                                                                                     // 12234
            lastChild = this.element(key, val);                                                                        // 12235
          }                                                                                                            // 12236
        }                                                                                                              // 12237
      } else {                                                                                                         // 12238
        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
          lastChild = this.text(text);                                                                                 // 12240
        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
          lastChild = this.cdata(text);                                                                                // 12242
        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
          lastChild = this.comment(text);                                                                              // 12244
        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
          lastChild = this.raw(text);                                                                                  // 12246
        } else {                                                                                                       // 12247
          lastChild = this.node(name, attributes, text);                                                               // 12248
        }                                                                                                              // 12249
      }                                                                                                                // 12250
      if (lastChild == null) {                                                                                         // 12251
        throw new Error("Could not create any elements with: " + name);                                                // 12252
      }                                                                                                                // 12253
      return lastChild;                                                                                                // 12254
    };                                                                                                                 // 12255
                                                                                                                       // 12256
    XMLNode.prototype.insertBefore = function(name, attributes, text) {                                                // 12257
      var child, i, removed;                                                                                           // 12258
      if (this.isRoot) {                                                                                               // 12259
        throw new Error("Cannot insert elements at root level");                                                       // 12260
      }                                                                                                                // 12261
      i = this.parent.children.indexOf(this);                                                                          // 12262
      removed = this.parent.children.splice(i);                                                                        // 12263
      child = this.parent.element(name, attributes, text);                                                             // 12264
      Array.prototype.push.apply(this.parent.children, removed);                                                       // 12265
      return child;                                                                                                    // 12266
    };                                                                                                                 // 12267
                                                                                                                       // 12268
    XMLNode.prototype.insertAfter = function(name, attributes, text) {                                                 // 12269
      var child, i, removed;                                                                                           // 12270
      if (this.isRoot) {                                                                                               // 12271
        throw new Error("Cannot insert elements at root level");                                                       // 12272
      }                                                                                                                // 12273
      i = this.parent.children.indexOf(this);                                                                          // 12274
      removed = this.parent.children.splice(i + 1);                                                                    // 12275
      child = this.parent.element(name, attributes, text);                                                             // 12276
      Array.prototype.push.apply(this.parent.children, removed);                                                       // 12277
      return child;                                                                                                    // 12278
    };                                                                                                                 // 12279
                                                                                                                       // 12280
    XMLNode.prototype.remove = function() {                                                                            // 12281
      var i, ref;                                                                                                      // 12282
      if (this.isRoot) {                                                                                               // 12283
        throw new Error("Cannot remove the root element");                                                             // 12284
      }                                                                                                                // 12285
      i = this.parent.children.indexOf(this);                                                                          // 12286
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;                                     // 12287
      return this.parent;                                                                                              // 12288
    };                                                                                                                 // 12289
                                                                                                                       // 12290
    XMLNode.prototype.node = function(name, attributes, text) {                                                        // 12291
      var child, ref;                                                                                                  // 12292
      if (name != null) {                                                                                              // 12293
        name = name.valueOf();                                                                                         // 12294
      }                                                                                                                // 12295
      if (attributes == null) {                                                                                        // 12296
        attributes = {};                                                                                               // 12297
      }                                                                                                                // 12298
      attributes = attributes.valueOf();                                                                               // 12299
      if (!isObject(attributes)) {                                                                                     // 12300
        ref = [attributes, text], text = ref[0], attributes = ref[1];                                                  // 12301
      }                                                                                                                // 12302
      child = new XMLElement(this, name, attributes);                                                                  // 12303
      if (text != null) {                                                                                              // 12304
        child.text(text);                                                                                              // 12305
      }                                                                                                                // 12306
      this.children.push(child);                                                                                       // 12307
      return child;                                                                                                    // 12308
    };                                                                                                                 // 12309
                                                                                                                       // 12310
    XMLNode.prototype.text = function(value) {                                                                         // 12311
      var child;                                                                                                       // 12312
      child = new XMLText(this, value);                                                                                // 12313
      this.children.push(child);                                                                                       // 12314
      return this;                                                                                                     // 12315
    };                                                                                                                 // 12316
                                                                                                                       // 12317
    XMLNode.prototype.cdata = function(value) {                                                                        // 12318
      var child;                                                                                                       // 12319
      child = new XMLCData(this, value);                                                                               // 12320
      this.children.push(child);                                                                                       // 12321
      return this;                                                                                                     // 12322
    };                                                                                                                 // 12323
                                                                                                                       // 12324
    XMLNode.prototype.comment = function(value) {                                                                      // 12325
      var child;                                                                                                       // 12326
      child = new XMLComment(this, value);                                                                             // 12327
      this.children.push(child);                                                                                       // 12328
      return this;                                                                                                     // 12329
    };                                                                                                                 // 12330
                                                                                                                       // 12331
    XMLNode.prototype.raw = function(value) {                                                                          // 12332
      var child;                                                                                                       // 12333
      child = new XMLRaw(this, value);                                                                                 // 12334
      this.children.push(child);                                                                                       // 12335
      return this;                                                                                                     // 12336
    };                                                                                                                 // 12337
                                                                                                                       // 12338
    XMLNode.prototype.declaration = function(version, encoding, standalone) {                                          // 12339
      var doc, xmldec;                                                                                                 // 12340
      doc = this.document();                                                                                           // 12341
      xmldec = new XMLDeclaration(doc, version, encoding, standalone);                                                 // 12342
      doc.xmldec = xmldec;                                                                                             // 12343
      return doc.root();                                                                                               // 12344
    };                                                                                                                 // 12345
                                                                                                                       // 12346
    XMLNode.prototype.doctype = function(pubID, sysID) {                                                               // 12347
      var doc, doctype;                                                                                                // 12348
      doc = this.document();                                                                                           // 12349
      doctype = new XMLDocType(doc, pubID, sysID);                                                                     // 12350
      doc.doctype = doctype;                                                                                           // 12351
      return doctype;                                                                                                  // 12352
    };                                                                                                                 // 12353
                                                                                                                       // 12354
    XMLNode.prototype.up = function() {                                                                                // 12355
      if (this.isRoot) {                                                                                               // 12356
        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");             // 12357
      }                                                                                                                // 12358
      return this.parent;                                                                                              // 12359
    };                                                                                                                 // 12360
                                                                                                                       // 12361
    XMLNode.prototype.root = function() {                                                                              // 12362
      var child;                                                                                                       // 12363
      if (this.isRoot) {                                                                                               // 12364
        return this;                                                                                                   // 12365
      }                                                                                                                // 12366
      child = this.parent;                                                                                             // 12367
      while (!child.isRoot) {                                                                                          // 12368
        child = child.parent;                                                                                          // 12369
      }                                                                                                                // 12370
      return child;                                                                                                    // 12371
    };                                                                                                                 // 12372
                                                                                                                       // 12373
    XMLNode.prototype.document = function() {                                                                          // 12374
      return this.root().documentObject;                                                                               // 12375
    };                                                                                                                 // 12376
                                                                                                                       // 12377
    XMLNode.prototype.end = function(options) {                                                                        // 12378
      return this.document().toString(options);                                                                        // 12379
    };                                                                                                                 // 12380
                                                                                                                       // 12381
    XMLNode.prototype.prev = function() {                                                                              // 12382
      var i;                                                                                                           // 12383
      if (this.isRoot) {                                                                                               // 12384
        throw new Error("Root node has no siblings");                                                                  // 12385
      }                                                                                                                // 12386
      i = this.parent.children.indexOf(this);                                                                          // 12387
      if (i < 1) {                                                                                                     // 12388
        throw new Error("Already at the first node");                                                                  // 12389
      }                                                                                                                // 12390
      return this.parent.children[i - 1];                                                                              // 12391
    };                                                                                                                 // 12392
                                                                                                                       // 12393
    XMLNode.prototype.next = function() {                                                                              // 12394
      var i;                                                                                                           // 12395
      if (this.isRoot) {                                                                                               // 12396
        throw new Error("Root node has no siblings");                                                                  // 12397
      }                                                                                                                // 12398
      i = this.parent.children.indexOf(this);                                                                          // 12399
      if (i === -1 || i === this.parent.children.length - 1) {                                                         // 12400
        throw new Error("Already at the last node");                                                                   // 12401
      }                                                                                                                // 12402
      return this.parent.children[i + 1];                                                                              // 12403
    };                                                                                                                 // 12404
                                                                                                                       // 12405
    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {                                                        // 12406
      var clonedRoot;                                                                                                  // 12407
      clonedRoot = xmlbuilder.root().clone();                                                                          // 12408
      clonedRoot.parent = this;                                                                                        // 12409
      clonedRoot.isRoot = false;                                                                                       // 12410
      this.children.push(clonedRoot);                                                                                  // 12411
      return this;                                                                                                     // 12412
    };                                                                                                                 // 12413
                                                                                                                       // 12414
    XMLNode.prototype.ele = function(name, attributes, text) {                                                         // 12415
      return this.element(name, attributes, text);                                                                     // 12416
    };                                                                                                                 // 12417
                                                                                                                       // 12418
    XMLNode.prototype.nod = function(name, attributes, text) {                                                         // 12419
      return this.node(name, attributes, text);                                                                        // 12420
    };                                                                                                                 // 12421
                                                                                                                       // 12422
    XMLNode.prototype.txt = function(value) {                                                                          // 12423
      return this.text(value);                                                                                         // 12424
    };                                                                                                                 // 12425
                                                                                                                       // 12426
    XMLNode.prototype.dat = function(value) {                                                                          // 12427
      return this.cdata(value);                                                                                        // 12428
    };                                                                                                                 // 12429
                                                                                                                       // 12430
    XMLNode.prototype.com = function(value) {                                                                          // 12431
      return this.comment(value);                                                                                      // 12432
    };                                                                                                                 // 12433
                                                                                                                       // 12434
    XMLNode.prototype.doc = function() {                                                                               // 12435
      return this.document();                                                                                          // 12436
    };                                                                                                                 // 12437
                                                                                                                       // 12438
    XMLNode.prototype.dec = function(version, encoding, standalone) {                                                  // 12439
      return this.declaration(version, encoding, standalone);                                                          // 12440
    };                                                                                                                 // 12441
                                                                                                                       // 12442
    XMLNode.prototype.dtd = function(pubID, sysID) {                                                                   // 12443
      return this.doctype(pubID, sysID);                                                                               // 12444
    };                                                                                                                 // 12445
                                                                                                                       // 12446
    XMLNode.prototype.e = function(name, attributes, text) {                                                           // 12447
      return this.element(name, attributes, text);                                                                     // 12448
    };                                                                                                                 // 12449
                                                                                                                       // 12450
    XMLNode.prototype.n = function(name, attributes, text) {                                                           // 12451
      return this.node(name, attributes, text);                                                                        // 12452
    };                                                                                                                 // 12453
                                                                                                                       // 12454
    XMLNode.prototype.t = function(value) {                                                                            // 12455
      return this.text(value);                                                                                         // 12456
    };                                                                                                                 // 12457
                                                                                                                       // 12458
    XMLNode.prototype.d = function(value) {                                                                            // 12459
      return this.cdata(value);                                                                                        // 12460
    };                                                                                                                 // 12461
                                                                                                                       // 12462
    XMLNode.prototype.c = function(value) {                                                                            // 12463
      return this.comment(value);                                                                                      // 12464
    };                                                                                                                 // 12465
                                                                                                                       // 12466
    XMLNode.prototype.r = function(value) {                                                                            // 12467
      return this.raw(value);                                                                                          // 12468
    };                                                                                                                 // 12469
                                                                                                                       // 12470
    XMLNode.prototype.u = function() {                                                                                 // 12471
      return this.up();                                                                                                // 12472
    };                                                                                                                 // 12473
                                                                                                                       // 12474
    return XMLNode;                                                                                                    // 12475
                                                                                                                       // 12476
  })();                                                                                                                // 12477
                                                                                                                       // 12478
}).call(this);                                                                                                         // 12479
                                                                                                                       // 12480
},{"./XMLCData":83,"./XMLComment":84,"./XMLDeclaration":89,"./XMLDocType":90,"./XMLElement":91,"./XMLRaw":94,"./XMLText":96,"lodash/lang/isArray":132,"lodash/lang/isEmpty":133,"lodash/lang/isFunction":134,"lodash/lang/isObject":136}],93:[function(require,module,exports){
(function() {                                                                                                          // 12482
  var XMLProcessingInstruction, create;                                                                                // 12483
                                                                                                                       // 12484
  create = require('lodash/object/create');                                                                            // 12485
                                                                                                                       // 12486
  module.exports = XMLProcessingInstruction = (function() {                                                            // 12487
    function XMLProcessingInstruction(parent, target, value) {                                                         // 12488
      this.stringify = parent.stringify;                                                                               // 12489
      if (target == null) {                                                                                            // 12490
        throw new Error("Missing instruction target");                                                                 // 12491
      }                                                                                                                // 12492
      this.target = this.stringify.insTarget(target);                                                                  // 12493
      if (value) {                                                                                                     // 12494
        this.value = this.stringify.insValue(value);                                                                   // 12495
      }                                                                                                                // 12496
    }                                                                                                                  // 12497
                                                                                                                       // 12498
    XMLProcessingInstruction.prototype.clone = function() {                                                            // 12499
      return create(XMLProcessingInstruction.prototype, this);                                                         // 12500
    };                                                                                                                 // 12501
                                                                                                                       // 12502
    XMLProcessingInstruction.prototype.toString = function(options, level) {                                           // 12503
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 12504
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 12505
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 12506
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 12507
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 12508
      level || (level = 0);                                                                                            // 12509
      space = new Array(level + offset + 1).join(indent);                                                              // 12510
      r = '';                                                                                                          // 12511
      if (pretty) {                                                                                                    // 12512
        r += space;                                                                                                    // 12513
      }                                                                                                                // 12514
      r += '<?';                                                                                                       // 12515
      r += this.target;                                                                                                // 12516
      if (this.value) {                                                                                                // 12517
        r += ' ' + this.value;                                                                                         // 12518
      }                                                                                                                // 12519
      r += '?>';                                                                                                       // 12520
      if (pretty) {                                                                                                    // 12521
        r += newline;                                                                                                  // 12522
      }                                                                                                                // 12523
      return r;                                                                                                        // 12524
    };                                                                                                                 // 12525
                                                                                                                       // 12526
    return XMLProcessingInstruction;                                                                                   // 12527
                                                                                                                       // 12528
  })();                                                                                                                // 12529
                                                                                                                       // 12530
}).call(this);                                                                                                         // 12531
                                                                                                                       // 12532
},{"lodash/object/create":140}],94:[function(require,module,exports){                                                  // 12533
(function() {                                                                                                          // 12534
  var XMLNode, XMLRaw, create,                                                                                         // 12535
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;                                                                                       // 12537
                                                                                                                       // 12538
  create = require('lodash/object/create');                                                                            // 12539
                                                                                                                       // 12540
  XMLNode = require('./XMLNode');                                                                                      // 12541
                                                                                                                       // 12542
  module.exports = XMLRaw = (function(superClass) {                                                                    // 12543
    extend(XMLRaw, superClass);                                                                                        // 12544
                                                                                                                       // 12545
    function XMLRaw(parent, text) {                                                                                    // 12546
      XMLRaw.__super__.constructor.call(this, parent);                                                                 // 12547
      if (text == null) {                                                                                              // 12548
        throw new Error("Missing raw text");                                                                           // 12549
      }                                                                                                                // 12550
      this.value = this.stringify.raw(text);                                                                           // 12551
    }                                                                                                                  // 12552
                                                                                                                       // 12553
    XMLRaw.prototype.clone = function() {                                                                              // 12554
      return create(XMLRaw.prototype, this);                                                                           // 12555
    };                                                                                                                 // 12556
                                                                                                                       // 12557
    XMLRaw.prototype.toString = function(options, level) {                                                             // 12558
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 12559
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 12560
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 12561
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 12562
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 12563
      level || (level = 0);                                                                                            // 12564
      space = new Array(level + offset + 1).join(indent);                                                              // 12565
      r = '';                                                                                                          // 12566
      if (pretty) {                                                                                                    // 12567
        r += space;                                                                                                    // 12568
      }                                                                                                                // 12569
      r += this.value;                                                                                                 // 12570
      if (pretty) {                                                                                                    // 12571
        r += newline;                                                                                                  // 12572
      }                                                                                                                // 12573
      return r;                                                                                                        // 12574
    };                                                                                                                 // 12575
                                                                                                                       // 12576
    return XMLRaw;                                                                                                     // 12577
                                                                                                                       // 12578
  })(XMLNode);                                                                                                         // 12579
                                                                                                                       // 12580
}).call(this);                                                                                                         // 12581
                                                                                                                       // 12582
},{"./XMLNode":92,"lodash/object/create":140}],95:[function(require,module,exports){                                   // 12583
(function() {                                                                                                          // 12584
  var XMLStringifier,                                                                                                  // 12585
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },                                  // 12586
    hasProp = {}.hasOwnProperty;                                                                                       // 12587
                                                                                                                       // 12588
  module.exports = XMLStringifier = (function() {                                                                      // 12589
    function XMLStringifier(options) {                                                                                 // 12590
      this.assertLegalChar = bind(this.assertLegalChar, this);                                                         // 12591
      var key, ref, value;                                                                                             // 12592
      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;                               // 12593
      ref = (options != null ? options.stringify : void 0) || {};                                                      // 12594
      for (key in ref) {                                                                                               // 12595
        if (!hasProp.call(ref, key)) continue;                                                                         // 12596
        value = ref[key];                                                                                              // 12597
        this[key] = value;                                                                                             // 12598
      }                                                                                                                // 12599
    }                                                                                                                  // 12600
                                                                                                                       // 12601
    XMLStringifier.prototype.eleName = function(val) {                                                                 // 12602
      val = '' + val || '';                                                                                            // 12603
      return this.assertLegalChar(val);                                                                                // 12604
    };                                                                                                                 // 12605
                                                                                                                       // 12606
    XMLStringifier.prototype.eleText = function(val) {                                                                 // 12607
      val = '' + val || '';                                                                                            // 12608
      return this.assertLegalChar(this.elEscape(val));                                                                 // 12609
    };                                                                                                                 // 12610
                                                                                                                       // 12611
    XMLStringifier.prototype.cdata = function(val) {                                                                   // 12612
      val = '' + val || '';                                                                                            // 12613
      if (val.match(/]]>/)) {                                                                                          // 12614
        throw new Error("Invalid CDATA text: " + val);                                                                 // 12615
      }                                                                                                                // 12616
      return this.assertLegalChar(val);                                                                                // 12617
    };                                                                                                                 // 12618
                                                                                                                       // 12619
    XMLStringifier.prototype.comment = function(val) {                                                                 // 12620
      val = '' + val || '';                                                                                            // 12621
      if (val.match(/--/)) {                                                                                           // 12622
        throw new Error("Comment text cannot contain double-hypen: " + val);                                           // 12623
      }                                                                                                                // 12624
      return this.assertLegalChar(val);                                                                                // 12625
    };                                                                                                                 // 12626
                                                                                                                       // 12627
    XMLStringifier.prototype.raw = function(val) {                                                                     // 12628
      return '' + val || '';                                                                                           // 12629
    };                                                                                                                 // 12630
                                                                                                                       // 12631
    XMLStringifier.prototype.attName = function(val) {                                                                 // 12632
      return '' + val || '';                                                                                           // 12633
    };                                                                                                                 // 12634
                                                                                                                       // 12635
    XMLStringifier.prototype.attValue = function(val) {                                                                // 12636
      val = '' + val || '';                                                                                            // 12637
      return this.attEscape(val);                                                                                      // 12638
    };                                                                                                                 // 12639
                                                                                                                       // 12640
    XMLStringifier.prototype.insTarget = function(val) {                                                               // 12641
      return '' + val || '';                                                                                           // 12642
    };                                                                                                                 // 12643
                                                                                                                       // 12644
    XMLStringifier.prototype.insValue = function(val) {                                                                // 12645
      val = '' + val || '';                                                                                            // 12646
      if (val.match(/\?>/)) {                                                                                          // 12647
        throw new Error("Invalid processing instruction value: " + val);                                               // 12648
      }                                                                                                                // 12649
      return val;                                                                                                      // 12650
    };                                                                                                                 // 12651
                                                                                                                       // 12652
    XMLStringifier.prototype.xmlVersion = function(val) {                                                              // 12653
      val = '' + val || '';                                                                                            // 12654
      if (!val.match(/1\.[0-9]+/)) {                                                                                   // 12655
        throw new Error("Invalid version number: " + val);                                                             // 12656
      }                                                                                                                // 12657
      return val;                                                                                                      // 12658
    };                                                                                                                 // 12659
                                                                                                                       // 12660
    XMLStringifier.prototype.xmlEncoding = function(val) {                                                             // 12661
      val = '' + val || '';                                                                                            // 12662
      if (!val.match(/[A-Za-z](?:[A-Za-z0-9._-]|-)*/)) {                                                               // 12663
        throw new Error("Invalid encoding: " + val);                                                                   // 12664
      }                                                                                                                // 12665
      return val;                                                                                                      // 12666
    };                                                                                                                 // 12667
                                                                                                                       // 12668
    XMLStringifier.prototype.xmlStandalone = function(val) {                                                           // 12669
      if (val) {                                                                                                       // 12670
        return "yes";                                                                                                  // 12671
      } else {                                                                                                         // 12672
        return "no";                                                                                                   // 12673
      }                                                                                                                // 12674
    };                                                                                                                 // 12675
                                                                                                                       // 12676
    XMLStringifier.prototype.dtdPubID = function(val) {                                                                // 12677
      return '' + val || '';                                                                                           // 12678
    };                                                                                                                 // 12679
                                                                                                                       // 12680
    XMLStringifier.prototype.dtdSysID = function(val) {                                                                // 12681
      return '' + val || '';                                                                                           // 12682
    };                                                                                                                 // 12683
                                                                                                                       // 12684
    XMLStringifier.prototype.dtdElementValue = function(val) {                                                         // 12685
      return '' + val || '';                                                                                           // 12686
    };                                                                                                                 // 12687
                                                                                                                       // 12688
    XMLStringifier.prototype.dtdAttType = function(val) {                                                              // 12689
      return '' + val || '';                                                                                           // 12690
    };                                                                                                                 // 12691
                                                                                                                       // 12692
    XMLStringifier.prototype.dtdAttDefault = function(val) {                                                           // 12693
      if (val != null) {                                                                                               // 12694
        return '' + val || '';                                                                                         // 12695
      } else {                                                                                                         // 12696
        return val;                                                                                                    // 12697
      }                                                                                                                // 12698
    };                                                                                                                 // 12699
                                                                                                                       // 12700
    XMLStringifier.prototype.dtdEntityValue = function(val) {                                                          // 12701
      return '' + val || '';                                                                                           // 12702
    };                                                                                                                 // 12703
                                                                                                                       // 12704
    XMLStringifier.prototype.dtdNData = function(val) {                                                                // 12705
      return '' + val || '';                                                                                           // 12706
    };                                                                                                                 // 12707
                                                                                                                       // 12708
    XMLStringifier.prototype.convertAttKey = '@';                                                                      // 12709
                                                                                                                       // 12710
    XMLStringifier.prototype.convertPIKey = '?';                                                                       // 12711
                                                                                                                       // 12712
    XMLStringifier.prototype.convertTextKey = '#text';                                                                 // 12713
                                                                                                                       // 12714
    XMLStringifier.prototype.convertCDataKey = '#cdata';                                                               // 12715
                                                                                                                       // 12716
    XMLStringifier.prototype.convertCommentKey = '#comment';                                                           // 12717
                                                                                                                       // 12718
    XMLStringifier.prototype.convertRawKey = '#raw';                                                                   // 12719
                                                                                                                       // 12720
    XMLStringifier.prototype.convertListKey = '#list';                                                                 // 12721
                                                                                                                       // 12722
    XMLStringifier.prototype.assertLegalChar = function(str) {                                                         // 12723
      var chars, chr;                                                                                                  // 12724
      if (this.allowSurrogateChars) {                                                                                  // 12725
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;                                              // 12726
      } else {                                                                                                         // 12727
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;                                 // 12728
      }                                                                                                                // 12729
      chr = str.match(chars);                                                                                          // 12730
      if (chr) {                                                                                                       // 12731
        throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);               // 12732
      }                                                                                                                // 12733
      return str;                                                                                                      // 12734
    };                                                                                                                 // 12735
                                                                                                                       // 12736
    XMLStringifier.prototype.elEscape = function(str) {                                                                // 12737
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');           // 12738
    };                                                                                                                 // 12739
                                                                                                                       // 12740
    XMLStringifier.prototype.attEscape = function(str) {                                                               // 12741
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
    };                                                                                                                 // 12743
                                                                                                                       // 12744
    return XMLStringifier;                                                                                             // 12745
                                                                                                                       // 12746
  })();                                                                                                                // 12747
                                                                                                                       // 12748
}).call(this);                                                                                                         // 12749
                                                                                                                       // 12750
},{}],96:[function(require,module,exports){                                                                            // 12751
(function() {                                                                                                          // 12752
  var XMLNode, XMLText, create,                                                                                        // 12753
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;                                                                                       // 12755
                                                                                                                       // 12756
  create = require('lodash/object/create');                                                                            // 12757
                                                                                                                       // 12758
  XMLNode = require('./XMLNode');                                                                                      // 12759
                                                                                                                       // 12760
  module.exports = XMLText = (function(superClass) {                                                                   // 12761
    extend(XMLText, superClass);                                                                                       // 12762
                                                                                                                       // 12763
    function XMLText(parent, text) {                                                                                   // 12764
      XMLText.__super__.constructor.call(this, parent);                                                                // 12765
      if (text == null) {                                                                                              // 12766
        throw new Error("Missing element text");                                                                       // 12767
      }                                                                                                                // 12768
      this.value = this.stringify.eleText(text);                                                                       // 12769
    }                                                                                                                  // 12770
                                                                                                                       // 12771
    XMLText.prototype.clone = function() {                                                                             // 12772
      return create(XMLText.prototype, this);                                                                          // 12773
    };                                                                                                                 // 12774
                                                                                                                       // 12775
    XMLText.prototype.toString = function(options, level) {                                                            // 12776
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;                                                  // 12777
      pretty = (options != null ? options.pretty : void 0) || false;                                                   // 12778
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';                                 // 12779
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;                                  // 12780
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';                             // 12781
      level || (level = 0);                                                                                            // 12782
      space = new Array(level + offset + 1).join(indent);                                                              // 12783
      r = '';                                                                                                          // 12784
      if (pretty) {                                                                                                    // 12785
        r += space;                                                                                                    // 12786
      }                                                                                                                // 12787
      r += this.value;                                                                                                 // 12788
      if (pretty) {                                                                                                    // 12789
        r += newline;                                                                                                  // 12790
      }                                                                                                                // 12791
      return r;                                                                                                        // 12792
    };                                                                                                                 // 12793
                                                                                                                       // 12794
    return XMLText;                                                                                                    // 12795
                                                                                                                       // 12796
  })(XMLNode);                                                                                                         // 12797
                                                                                                                       // 12798
}).call(this);                                                                                                         // 12799
                                                                                                                       // 12800
},{"./XMLNode":92,"lodash/object/create":140}],97:[function(require,module,exports){                                   // 12801
(function() {                                                                                                          // 12802
  var XMLBuilder, assign;                                                                                              // 12803
                                                                                                                       // 12804
  assign = require('lodash/object/assign');                                                                            // 12805
                                                                                                                       // 12806
  XMLBuilder = require('./XMLBuilder');                                                                                // 12807
                                                                                                                       // 12808
  module.exports.create = function(name, xmldec, doctype, options) {                                                   // 12809
    options = assign({}, xmldec, doctype, options);                                                                    // 12810
    return new XMLBuilder(name, options).root();                                                                       // 12811
  };                                                                                                                   // 12812
                                                                                                                       // 12813
}).call(this);                                                                                                         // 12814
                                                                                                                       // 12815
},{"./XMLBuilder":82,"lodash/object/assign":139}],98:[function(require,module,exports){                                // 12816
var arrayEvery = require('../internal/arrayEvery'),                                                                    // 12817
    baseCallback = require('../internal/baseCallback'),                                                                // 12818
    baseEvery = require('../internal/baseEvery'),                                                                      // 12819
    isArray = require('../lang/isArray');                                                                              // 12820
                                                                                                                       // 12821
                                                                                                                       // 12822
function every(collection, predicate, thisArg) {                                                                       // 12823
  var func = isArray(collection) ? arrayEvery : baseEvery;                                                             // 12824
  if (typeof predicate != 'function' || typeof thisArg != 'undefined') {                                               // 12825
    predicate = baseCallback(predicate, thisArg, 3);                                                                   // 12826
  }                                                                                                                    // 12827
  return func(collection, predicate);                                                                                  // 12828
}                                                                                                                      // 12829
                                                                                                                       // 12830
module.exports = every;                                                                                                // 12831
                                                                                                                       // 12832
},{"../internal/arrayEvery":99,"../internal/baseCallback":101,"../internal/baseEvery":105,"../lang/isArray":132}],99:[function(require,module,exports){
                                                                                                                       // 12834
function arrayEvery(array, predicate) {                                                                                // 12835
  var index = -1,                                                                                                      // 12836
      length = array.length;                                                                                           // 12837
                                                                                                                       // 12838
  while (++index < length) {                                                                                           // 12839
    if (!predicate(array[index], index, array)) {                                                                      // 12840
      return false;                                                                                                    // 12841
    }                                                                                                                  // 12842
  }                                                                                                                    // 12843
  return true;                                                                                                         // 12844
}                                                                                                                      // 12845
                                                                                                                       // 12846
module.exports = arrayEvery;                                                                                           // 12847
                                                                                                                       // 12848
},{}],100:[function(require,module,exports){                                                                           // 12849
var baseCopy = require('./baseCopy'),                                                                                  // 12850
    keys = require('../object/keys');                                                                                  // 12851
                                                                                                                       // 12852
                                                                                                                       // 12853
function baseAssign(object, source, customizer) {                                                                      // 12854
  var props = keys(source);                                                                                            // 12855
  if (!customizer) {                                                                                                   // 12856
    return baseCopy(source, object, props);                                                                            // 12857
  }                                                                                                                    // 12858
  var index = -1,                                                                                                      // 12859
      length = props.length;                                                                                           // 12860
                                                                                                                       // 12861
  while (++index < length) {                                                                                           // 12862
    var key = props[index],                                                                                            // 12863
        value = object[key],                                                                                           // 12864
        result = customizer(value, source[key], key, object, source);                                                  // 12865
                                                                                                                       // 12866
    if ((result === result ? (result !== value) : (value === value)) ||                                                // 12867
        (typeof value == 'undefined' && !(key in object))) {                                                           // 12868
      object[key] = result;                                                                                            // 12869
    }                                                                                                                  // 12870
  }                                                                                                                    // 12871
  return object;                                                                                                       // 12872
}                                                                                                                      // 12873
                                                                                                                       // 12874
module.exports = baseAssign;                                                                                           // 12875
                                                                                                                       // 12876
},{"../object/keys":141,"./baseCopy":102}],101:[function(require,module,exports){                                      // 12877
var baseMatches = require('./baseMatches'),                                                                            // 12878
    baseMatchesProperty = require('./baseMatchesProperty'),                                                            // 12879
    baseProperty = require('./baseProperty'),                                                                          // 12880
    bindCallback = require('./bindCallback'),                                                                          // 12881
    identity = require('../utility/identity'),                                                                         // 12882
    isBindable = require('./isBindable');                                                                              // 12883
                                                                                                                       // 12884
                                                                                                                       // 12885
function baseCallback(func, thisArg, argCount) {                                                                       // 12886
  var type = typeof func;                                                                                              // 12887
  if (type == 'function') {                                                                                            // 12888
    return (typeof thisArg != 'undefined' && isBindable(func))                                                         // 12889
      ? bindCallback(func, thisArg, argCount)                                                                          // 12890
      : func;                                                                                                          // 12891
  }                                                                                                                    // 12892
  if (func == null) {                                                                                                  // 12893
    return identity;                                                                                                   // 12894
  }                                                                                                                    // 12895
  if (type == 'object') {                                                                                              // 12896
    return baseMatches(func);                                                                                          // 12897
  }                                                                                                                    // 12898
  return typeof thisArg == 'undefined'                                                                                 // 12899
    ? baseProperty(func + '')                                                                                          // 12900
    : baseMatchesProperty(func + '', thisArg);                                                                         // 12901
}                                                                                                                      // 12902
                                                                                                                       // 12903
module.exports = baseCallback;                                                                                         // 12904
                                                                                                                       // 12905
},{"../utility/identity":145,"./baseMatches":112,"./baseMatchesProperty":113,"./baseProperty":114,"./bindCallback":117,"./isBindable":122}],102:[function(require,module,exports){
                                                                                                                       // 12907
function baseCopy(source, object, props) {                                                                             // 12908
  if (!props) {                                                                                                        // 12909
    props = object;                                                                                                    // 12910
    object = {};                                                                                                       // 12911
  }                                                                                                                    // 12912
  var index = -1,                                                                                                      // 12913
      length = props.length;                                                                                           // 12914
                                                                                                                       // 12915
  while (++index < length) {                                                                                           // 12916
    var key = props[index];                                                                                            // 12917
    object[key] = source[key];                                                                                         // 12918
  }                                                                                                                    // 12919
  return object;                                                                                                       // 12920
}                                                                                                                      // 12921
                                                                                                                       // 12922
module.exports = baseCopy;                                                                                             // 12923
                                                                                                                       // 12924
},{}],103:[function(require,module,exports){                                                                           // 12925
(function (global){                                                                                                    // 12926
var isObject = require('../lang/isObject');                                                                            // 12927
                                                                                                                       // 12928
                                                                                                                       // 12929
var baseCreate = (function() {                                                                                         // 12930
  function Object() {}                                                                                                 // 12931
  return function(prototype) {                                                                                         // 12932
    if (isObject(prototype)) {                                                                                         // 12933
      Object.prototype = prototype;                                                                                    // 12934
      var result = new Object;                                                                                         // 12935
      Object.prototype = null;                                                                                         // 12936
    }                                                                                                                  // 12937
    return result || global.Object();                                                                                  // 12938
  };                                                                                                                   // 12939
}());                                                                                                                  // 12940
                                                                                                                       // 12941
module.exports = baseCreate;                                                                                           // 12942
                                                                                                                       // 12943
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})                         // 12944
},{"../lang/isObject":136}],104:[function(require,module,exports){                                                     // 12945
var baseForOwn = require('./baseForOwn'),                                                                              // 12946
    isLength = require('./isLength'),                                                                                  // 12947
    toObject = require('./toObject');                                                                                  // 12948
                                                                                                                       // 12949
                                                                                                                       // 12950
function baseEach(collection, iteratee) {                                                                              // 12951
  var length = collection ? collection.length : 0;                                                                     // 12952
  if (!isLength(length)) {                                                                                             // 12953
    return baseForOwn(collection, iteratee);                                                                           // 12954
  }                                                                                                                    // 12955
  var index = -1,                                                                                                      // 12956
      iterable = toObject(collection);                                                                                 // 12957
                                                                                                                       // 12958
  while (++index < length) {                                                                                           // 12959
    if (iteratee(iterable[index], index, iterable) === false) {                                                        // 12960
      break;                                                                                                           // 12961
    }                                                                                                                  // 12962
  }                                                                                                                    // 12963
  return collection;                                                                                                   // 12964
}                                                                                                                      // 12965
                                                                                                                       // 12966
module.exports = baseEach;                                                                                             // 12967
                                                                                                                       // 12968
},{"./baseForOwn":107,"./isLength":125,"./toObject":130}],105:[function(require,module,exports){                       // 12969
var baseEach = require('./baseEach');                                                                                  // 12970
                                                                                                                       // 12971
                                                                                                                       // 12972
function baseEvery(collection, predicate) {                                                                            // 12973
  var result = true;                                                                                                   // 12974
  baseEach(collection, function(value, index, collection) {                                                            // 12975
    result = !!predicate(value, index, collection);                                                                    // 12976
    return result;                                                                                                     // 12977
  });                                                                                                                  // 12978
  return result;                                                                                                       // 12979
}                                                                                                                      // 12980
                                                                                                                       // 12981
module.exports = baseEvery;                                                                                            // 12982
                                                                                                                       // 12983
},{"./baseEach":104}],106:[function(require,module,exports){                                                           // 12984
var toObject = require('./toObject');                                                                                  // 12985
                                                                                                                       // 12986
                                                                                                                       // 12987
function baseFor(object, iteratee, keysFunc) {                                                                         // 12988
  var index = -1,                                                                                                      // 12989
      iterable = toObject(object),                                                                                     // 12990
      props = keysFunc(object),                                                                                        // 12991
      length = props.length;                                                                                           // 12992
                                                                                                                       // 12993
  while (++index < length) {                                                                                           // 12994
    var key = props[index];                                                                                            // 12995
    if (iteratee(iterable[key], key, iterable) === false) {                                                            // 12996
      break;                                                                                                           // 12997
    }                                                                                                                  // 12998
  }                                                                                                                    // 12999
  return object;                                                                                                       // 13000
}                                                                                                                      // 13001
                                                                                                                       // 13002
module.exports = baseFor;                                                                                              // 13003
                                                                                                                       // 13004
},{"./toObject":130}],107:[function(require,module,exports){                                                           // 13005
var baseFor = require('./baseFor'),                                                                                    // 13006
    keys = require('../object/keys');                                                                                  // 13007
                                                                                                                       // 13008
                                                                                                                       // 13009
function baseForOwn(object, iteratee) {                                                                                // 13010
  return baseFor(object, iteratee, keys);                                                                              // 13011
}                                                                                                                      // 13012
                                                                                                                       // 13013
module.exports = baseForOwn;                                                                                           // 13014
                                                                                                                       // 13015
},{"../object/keys":141,"./baseFor":106}],108:[function(require,module,exports){                                       // 13016
var baseIsEqualDeep = require('./baseIsEqualDeep');                                                                    // 13017
                                                                                                                       // 13018
                                                                                                                       // 13019
function baseIsEqual(value, other, customizer, isWhere, stackA, stackB) {                                              // 13020
  if (value === other) {                                                                                               // 13021
    return value !== 0 || (1 / value == 1 / other);                                                                    // 13022
  }                                                                                                                    // 13023
  var valType = typeof value,                                                                                          // 13024
      othType = typeof other;                                                                                          // 13025
                                                                                                                       // 13026
  if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||                // 13027
      value == null || other == null) {                                                                                // 13028
    return value !== value && other !== other;                                                                         // 13029
  }                                                                                                                    // 13030
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isWhere, stackA, stackB);                              // 13031
}                                                                                                                      // 13032
                                                                                                                       // 13033
module.exports = baseIsEqual;                                                                                          // 13034
                                                                                                                       // 13035
},{"./baseIsEqualDeep":109}],109:[function(require,module,exports){                                                    // 13036
var equalArrays = require('./equalArrays'),                                                                            // 13037
    equalByTag = require('./equalByTag'),                                                                              // 13038
    equalObjects = require('./equalObjects'),                                                                          // 13039
    isArray = require('../lang/isArray'),                                                                              // 13040
    isTypedArray = require('../lang/isTypedArray');                                                                    // 13041
                                                                                                                       // 13042
                                                                                                                       // 13043
var argsTag = '[object Arguments]',                                                                                    // 13044
    arrayTag = '[object Array]',                                                                                       // 13045
    objectTag = '[object Object]';                                                                                     // 13046
                                                                                                                       // 13047
                                                                                                                       // 13048
var objectProto = Object.prototype;                                                                                    // 13049
                                                                                                                       // 13050
                                                                                                                       // 13051
var hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13052
                                                                                                                       // 13053
                                                                                                                       // 13054
var objToString = objectProto.toString;                                                                                // 13055
                                                                                                                       // 13056
                                                                                                                       // 13057
function baseIsEqualDeep(object, other, equalFunc, customizer, isWhere, stackA, stackB) {                              // 13058
  var objIsArr = isArray(object),                                                                                      // 13059
      othIsArr = isArray(other),                                                                                       // 13060
      objTag = arrayTag,                                                                                               // 13061
      othTag = arrayTag;                                                                                               // 13062
                                                                                                                       // 13063
  if (!objIsArr) {                                                                                                     // 13064
    objTag = objToString.call(object);                                                                                 // 13065
    if (objTag == argsTag) {                                                                                           // 13066
      objTag = objectTag;                                                                                              // 13067
    } else if (objTag != objectTag) {                                                                                  // 13068
      objIsArr = isTypedArray(object);                                                                                 // 13069
    }                                                                                                                  // 13070
  }                                                                                                                    // 13071
  if (!othIsArr) {                                                                                                     // 13072
    othTag = objToString.call(other);                                                                                  // 13073
    if (othTag == argsTag) {                                                                                           // 13074
      othTag = objectTag;                                                                                              // 13075
    } else if (othTag != objectTag) {                                                                                  // 13076
      othIsArr = isTypedArray(other);                                                                                  // 13077
    }                                                                                                                  // 13078
  }                                                                                                                    // 13079
  var objIsObj = objTag == objectTag,                                                                                  // 13080
      othIsObj = othTag == objectTag,                                                                                  // 13081
      isSameTag = objTag == othTag;                                                                                    // 13082
                                                                                                                       // 13083
  if (isSameTag && !(objIsArr || objIsObj)) {                                                                          // 13084
    return equalByTag(object, other, objTag);                                                                          // 13085
  }                                                                                                                    // 13086
  var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                             // 13087
      othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                              // 13088
                                                                                                                       // 13089
  if (valWrapped || othWrapped) {                                                                                      // 13090
    return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isWhere, stackA, stackB);
  }                                                                                                                    // 13092
  if (!isSameTag) {                                                                                                    // 13093
    return false;                                                                                                      // 13094
  }                                                                                                                    // 13095
  stackA || (stackA = []);                                                                                             // 13096
  stackB || (stackB = []);                                                                                             // 13097
                                                                                                                       // 13098
  var length = stackA.length;                                                                                          // 13099
  while (length--) {                                                                                                   // 13100
    if (stackA[length] == object) {                                                                                    // 13101
      return stackB[length] == other;                                                                                  // 13102
    }                                                                                                                  // 13103
  }                                                                                                                    // 13104
  stackA.push(object);                                                                                                 // 13105
  stackB.push(other);                                                                                                  // 13106
                                                                                                                       // 13107
  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isWhere, stackA, stackB); // 13108
                                                                                                                       // 13109
  stackA.pop();                                                                                                        // 13110
  stackB.pop();                                                                                                        // 13111
                                                                                                                       // 13112
  return result;                                                                                                       // 13113
}                                                                                                                      // 13114
                                                                                                                       // 13115
module.exports = baseIsEqualDeep;                                                                                      // 13116
                                                                                                                       // 13117
},{"../lang/isArray":132,"../lang/isTypedArray":138,"./equalArrays":119,"./equalByTag":120,"./equalObjects":121}],110:[function(require,module,exports){
                                                                                                                       // 13119
function baseIsFunction(value) {                                                                                       // 13120
  return typeof value == 'function' || false;                                                                          // 13121
}                                                                                                                      // 13122
                                                                                                                       // 13123
module.exports = baseIsFunction;                                                                                       // 13124
                                                                                                                       // 13125
},{}],111:[function(require,module,exports){                                                                           // 13126
var baseIsEqual = require('./baseIsEqual');                                                                            // 13127
                                                                                                                       // 13128
                                                                                                                       // 13129
var objectProto = Object.prototype;                                                                                    // 13130
                                                                                                                       // 13131
                                                                                                                       // 13132
var hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13133
                                                                                                                       // 13134
                                                                                                                       // 13135
function baseIsMatch(object, props, values, strictCompareFlags, customizer) {                                          // 13136
  var length = props.length;                                                                                           // 13137
  if (object == null) {                                                                                                // 13138
    return !length;                                                                                                    // 13139
  }                                                                                                                    // 13140
  var index = -1,                                                                                                      // 13141
      noCustomizer = !customizer;                                                                                      // 13142
                                                                                                                       // 13143
  while (++index < length) {                                                                                           // 13144
    if ((noCustomizer && strictCompareFlags[index])                                                                    // 13145
          ? values[index] !== object[props[index]]                                                                     // 13146
          : !hasOwnProperty.call(object, props[index])                                                                 // 13147
        ) {                                                                                                            // 13148
      return false;                                                                                                    // 13149
    }                                                                                                                  // 13150
  }                                                                                                                    // 13151
  index = -1;                                                                                                          // 13152
  while (++index < length) {                                                                                           // 13153
    var key = props[index];                                                                                            // 13154
    if (noCustomizer && strictCompareFlags[index]) {                                                                   // 13155
      var result = hasOwnProperty.call(object, key);                                                                   // 13156
    } else {                                                                                                           // 13157
      var objValue = object[key],                                                                                      // 13158
          srcValue = values[index];                                                                                    // 13159
                                                                                                                       // 13160
      result = customizer ? customizer(objValue, srcValue, key) : undefined;                                           // 13161
      if (typeof result == 'undefined') {                                                                              // 13162
        result = baseIsEqual(srcValue, objValue, customizer, true);                                                    // 13163
      }                                                                                                                // 13164
    }                                                                                                                  // 13165
    if (!result) {                                                                                                     // 13166
      return false;                                                                                                    // 13167
    }                                                                                                                  // 13168
  }                                                                                                                    // 13169
  return true;                                                                                                         // 13170
}                                                                                                                      // 13171
                                                                                                                       // 13172
module.exports = baseIsMatch;                                                                                          // 13173
                                                                                                                       // 13174
},{"./baseIsEqual":108}],112:[function(require,module,exports){                                                        // 13175
var baseIsMatch = require('./baseIsMatch'),                                                                            // 13176
    isStrictComparable = require('./isStrictComparable'),                                                              // 13177
    keys = require('../object/keys');                                                                                  // 13178
                                                                                                                       // 13179
                                                                                                                       // 13180
var objectProto = Object.prototype;                                                                                    // 13181
                                                                                                                       // 13182
                                                                                                                       // 13183
var hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13184
                                                                                                                       // 13185
                                                                                                                       // 13186
function baseMatches(source) {                                                                                         // 13187
  var props = keys(source),                                                                                            // 13188
      length = props.length;                                                                                           // 13189
                                                                                                                       // 13190
  if (length == 1) {                                                                                                   // 13191
    var key = props[0],                                                                                                // 13192
        value = source[key];                                                                                           // 13193
                                                                                                                       // 13194
    if (isStrictComparable(value)) {                                                                                   // 13195
      return function(object) {                                                                                        // 13196
        return object != null && object[key] === value && hasOwnProperty.call(object, key);                            // 13197
      };                                                                                                               // 13198
    }                                                                                                                  // 13199
  }                                                                                                                    // 13200
  var values = Array(length),                                                                                          // 13201
      strictCompareFlags = Array(length);                                                                              // 13202
                                                                                                                       // 13203
  while (length--) {                                                                                                   // 13204
    value = source[props[length]];                                                                                     // 13205
    values[length] = value;                                                                                            // 13206
    strictCompareFlags[length] = isStrictComparable(value);                                                            // 13207
  }                                                                                                                    // 13208
  return function(object) {                                                                                            // 13209
    return baseIsMatch(object, props, values, strictCompareFlags);                                                     // 13210
  };                                                                                                                   // 13211
}                                                                                                                      // 13212
                                                                                                                       // 13213
module.exports = baseMatches;                                                                                          // 13214
                                                                                                                       // 13215
},{"../object/keys":141,"./baseIsMatch":111,"./isStrictComparable":127}],113:[function(require,module,exports){        // 13216
var baseIsEqual = require('./baseIsEqual'),                                                                            // 13217
    isStrictComparable = require('./isStrictComparable');                                                              // 13218
                                                                                                                       // 13219
                                                                                                                       // 13220
function baseMatchesProperty(key, value) {                                                                             // 13221
  if (isStrictComparable(value)) {                                                                                     // 13222
    return function(object) {                                                                                          // 13223
      return object != null && object[key] === value;                                                                  // 13224
    };                                                                                                                 // 13225
  }                                                                                                                    // 13226
  return function(object) {                                                                                            // 13227
    return object != null && baseIsEqual(value, object[key], null, true);                                              // 13228
  };                                                                                                                   // 13229
}                                                                                                                      // 13230
                                                                                                                       // 13231
module.exports = baseMatchesProperty;                                                                                  // 13232
                                                                                                                       // 13233
},{"./baseIsEqual":108,"./isStrictComparable":127}],114:[function(require,module,exports){                             // 13234
                                                                                                                       // 13235
function baseProperty(key) {                                                                                           // 13236
  return function(object) {                                                                                            // 13237
    return object == null ? undefined : object[key];                                                                   // 13238
  };                                                                                                                   // 13239
}                                                                                                                      // 13240
                                                                                                                       // 13241
module.exports = baseProperty;                                                                                         // 13242
                                                                                                                       // 13243
},{}],115:[function(require,module,exports){                                                                           // 13244
var identity = require('../utility/identity'),                                                                         // 13245
    metaMap = require('./metaMap');                                                                                    // 13246
                                                                                                                       // 13247
                                                                                                                       // 13248
var baseSetData = !metaMap ? identity : function(func, data) {                                                         // 13249
  metaMap.set(func, data);                                                                                             // 13250
  return func;                                                                                                         // 13251
};                                                                                                                     // 13252
                                                                                                                       // 13253
module.exports = baseSetData;                                                                                          // 13254
                                                                                                                       // 13255
},{"../utility/identity":145,"./metaMap":128}],116:[function(require,module,exports){                                  // 13256
                                                                                                                       // 13257
function baseToString(value) {                                                                                         // 13258
  if (typeof value == 'string') {                                                                                      // 13259
    return value;                                                                                                      // 13260
  }                                                                                                                    // 13261
  return value == null ? '' : (value + '');                                                                            // 13262
}                                                                                                                      // 13263
                                                                                                                       // 13264
module.exports = baseToString;                                                                                         // 13265
                                                                                                                       // 13266
},{}],117:[function(require,module,exports){                                                                           // 13267
var identity = require('../utility/identity');                                                                         // 13268
                                                                                                                       // 13269
                                                                                                                       // 13270
function bindCallback(func, thisArg, argCount) {                                                                       // 13271
  if (typeof func != 'function') {                                                                                     // 13272
    return identity;                                                                                                   // 13273
  }                                                                                                                    // 13274
  if (typeof thisArg == 'undefined') {                                                                                 // 13275
    return func;                                                                                                       // 13276
  }                                                                                                                    // 13277
  switch (argCount) {                                                                                                  // 13278
    case 1: return function(value) {                                                                                   // 13279
      return func.call(thisArg, value);                                                                                // 13280
    };                                                                                                                 // 13281
    case 3: return function(value, index, collection) {                                                                // 13282
      return func.call(thisArg, value, index, collection);                                                             // 13283
    };                                                                                                                 // 13284
    case 4: return function(accumulator, value, index, collection) {                                                   // 13285
      return func.call(thisArg, accumulator, value, index, collection);                                                // 13286
    };                                                                                                                 // 13287
    case 5: return function(value, other, key, object, source) {                                                       // 13288
      return func.call(thisArg, value, other, key, object, source);                                                    // 13289
    };                                                                                                                 // 13290
  }                                                                                                                    // 13291
  return function() {                                                                                                  // 13292
    return func.apply(thisArg, arguments);                                                                             // 13293
  };                                                                                                                   // 13294
}                                                                                                                      // 13295
                                                                                                                       // 13296
module.exports = bindCallback;                                                                                         // 13297
                                                                                                                       // 13298
},{"../utility/identity":145}],118:[function(require,module,exports){                                                  // 13299
var bindCallback = require('./bindCallback'),                                                                          // 13300
    isIterateeCall = require('./isIterateeCall');                                                                      // 13301
                                                                                                                       // 13302
                                                                                                                       // 13303
function createAssigner(assigner) {                                                                                    // 13304
  return function() {                                                                                                  // 13305
    var args = arguments,                                                                                              // 13306
        length = args.length,                                                                                          // 13307
        object = args[0];                                                                                              // 13308
                                                                                                                       // 13309
    if (length < 2 || object == null) {                                                                                // 13310
      return object;                                                                                                   // 13311
    }                                                                                                                  // 13312
    var customizer = args[length - 2],                                                                                 // 13313
        thisArg = args[length - 1],                                                                                    // 13314
        guard = args[3];                                                                                               // 13315
                                                                                                                       // 13316
    if (length > 3 && typeof customizer == 'function') {                                                               // 13317
      customizer = bindCallback(customizer, thisArg, 5);                                                               // 13318
      length -= 2;                                                                                                     // 13319
    } else {                                                                                                           // 13320
      customizer = (length > 2 && typeof thisArg == 'function') ? thisArg : null;                                      // 13321
      length -= (customizer ? 1 : 0);                                                                                  // 13322
    }                                                                                                                  // 13323
    if (guard && isIterateeCall(args[1], args[2], guard)) {                                                            // 13324
      customizer = length == 3 ? null : customizer;                                                                    // 13325
      length = 2;                                                                                                      // 13326
    }                                                                                                                  // 13327
    var index = 0;                                                                                                     // 13328
    while (++index < length) {                                                                                         // 13329
      var source = args[index];                                                                                        // 13330
      if (source) {                                                                                                    // 13331
        assigner(object, source, customizer);                                                                          // 13332
      }                                                                                                                // 13333
    }                                                                                                                  // 13334
    return object;                                                                                                     // 13335
  };                                                                                                                   // 13336
}                                                                                                                      // 13337
                                                                                                                       // 13338
module.exports = createAssigner;                                                                                       // 13339
                                                                                                                       // 13340
},{"./bindCallback":117,"./isIterateeCall":124}],119:[function(require,module,exports){                                // 13341
                                                                                                                       // 13342
function equalArrays(array, other, equalFunc, customizer, isWhere, stackA, stackB) {                                   // 13343
  var index = -1,                                                                                                      // 13344
      arrLength = array.length,                                                                                        // 13345
      othLength = other.length,                                                                                        // 13346
      result = true;                                                                                                   // 13347
                                                                                                                       // 13348
  if (arrLength != othLength && !(isWhere && othLength > arrLength)) {                                                 // 13349
    return false;                                                                                                      // 13350
  }                                                                                                                    // 13351
  while (result && ++index < arrLength) {                                                                              // 13352
    var arrValue = array[index],                                                                                       // 13353
        othValue = other[index];                                                                                       // 13354
                                                                                                                       // 13355
    result = undefined;                                                                                                // 13356
    if (customizer) {                                                                                                  // 13357
      result = isWhere                                                                                                 // 13358
        ? customizer(othValue, arrValue, index)                                                                        // 13359
        : customizer(arrValue, othValue, index);                                                                       // 13360
    }                                                                                                                  // 13361
    if (typeof result == 'undefined') {                                                                                // 13362
      if (isWhere) {                                                                                                   // 13363
        var othIndex = othLength;                                                                                      // 13364
        while (othIndex--) {                                                                                           // 13365
          othValue = other[othIndex];                                                                                  // 13366
          result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
          if (result) {                                                                                                // 13368
            break;                                                                                                     // 13369
          }                                                                                                            // 13370
        }                                                                                                              // 13371
      } else {                                                                                                         // 13372
        result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
      }                                                                                                                // 13374
    }                                                                                                                  // 13375
  }                                                                                                                    // 13376
  return !!result;                                                                                                     // 13377
}                                                                                                                      // 13378
                                                                                                                       // 13379
module.exports = equalArrays;                                                                                          // 13380
                                                                                                                       // 13381
},{}],120:[function(require,module,exports){                                                                           // 13382
                                                                                                                       // 13383
var boolTag = '[object Boolean]',                                                                                      // 13384
    dateTag = '[object Date]',                                                                                         // 13385
    errorTag = '[object Error]',                                                                                       // 13386
    numberTag = '[object Number]',                                                                                     // 13387
    regexpTag = '[object RegExp]',                                                                                     // 13388
    stringTag = '[object String]';                                                                                     // 13389
                                                                                                                       // 13390
                                                                                                                       // 13391
function equalByTag(object, other, tag) {                                                                              // 13392
  switch (tag) {                                                                                                       // 13393
    case boolTag:                                                                                                      // 13394
    case dateTag:                                                                                                      // 13395
      return +object == +other;                                                                                        // 13396
                                                                                                                       // 13397
    case errorTag:                                                                                                     // 13398
      return object.name == other.name && object.message == other.message;                                             // 13399
                                                                                                                       // 13400
    case numberTag:                                                                                                    // 13401
      return (object != +object)                                                                                       // 13402
        ? other != +other                                                                                              // 13403
        : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);                                            // 13404
                                                                                                                       // 13405
    case regexpTag:                                                                                                    // 13406
    case stringTag:                                                                                                    // 13407
      return object == (other + '');                                                                                   // 13408
  }                                                                                                                    // 13409
  return false;                                                                                                        // 13410
}                                                                                                                      // 13411
                                                                                                                       // 13412
module.exports = equalByTag;                                                                                           // 13413
                                                                                                                       // 13414
},{}],121:[function(require,module,exports){                                                                           // 13415
var keys = require('../object/keys');                                                                                  // 13416
                                                                                                                       // 13417
                                                                                                                       // 13418
var objectProto = Object.prototype;                                                                                    // 13419
                                                                                                                       // 13420
                                                                                                                       // 13421
var hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13422
                                                                                                                       // 13423
                                                                                                                       // 13424
function equalObjects(object, other, equalFunc, customizer, isWhere, stackA, stackB) {                                 // 13425
  var objProps = keys(object),                                                                                         // 13426
      objLength = objProps.length,                                                                                     // 13427
      othProps = keys(other),                                                                                          // 13428
      othLength = othProps.length;                                                                                     // 13429
                                                                                                                       // 13430
  if (objLength != othLength && !isWhere) {                                                                            // 13431
    return false;                                                                                                      // 13432
  }                                                                                                                    // 13433
  var hasCtor,                                                                                                         // 13434
      index = -1;                                                                                                      // 13435
                                                                                                                       // 13436
  while (++index < objLength) {                                                                                        // 13437
    var key = objProps[index],                                                                                         // 13438
        result = hasOwnProperty.call(other, key);                                                                      // 13439
                                                                                                                       // 13440
    if (result) {                                                                                                      // 13441
      var objValue = object[key],                                                                                      // 13442
          othValue = other[key];                                                                                       // 13443
                                                                                                                       // 13444
      result = undefined;                                                                                              // 13445
      if (customizer) {                                                                                                // 13446
        result = isWhere                                                                                               // 13447
          ? customizer(othValue, objValue, key)                                                                        // 13448
          : customizer(objValue, othValue, key);                                                                       // 13449
      }                                                                                                                // 13450
      if (typeof result == 'undefined') {                                                                              // 13451
        result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isWhere, stackA, stackB);
      }                                                                                                                // 13453
    }                                                                                                                  // 13454
    if (!result) {                                                                                                     // 13455
      return false;                                                                                                    // 13456
    }                                                                                                                  // 13457
    hasCtor || (hasCtor = key == 'constructor');                                                                       // 13458
  }                                                                                                                    // 13459
  if (!hasCtor) {                                                                                                      // 13460
    var objCtor = object.constructor,                                                                                  // 13461
        othCtor = other.constructor;                                                                                   // 13462
                                                                                                                       // 13463
    if (objCtor != othCtor &&                                                                                          // 13464
        ('constructor' in object && 'constructor' in other) &&                                                         // 13465
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                                // 13466
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                               // 13467
      return false;                                                                                                    // 13468
    }                                                                                                                  // 13469
  }                                                                                                                    // 13470
  return true;                                                                                                         // 13471
}                                                                                                                      // 13472
                                                                                                                       // 13473
module.exports = equalObjects;                                                                                         // 13474
                                                                                                                       // 13475
},{"../object/keys":141}],122:[function(require,module,exports){                                                       // 13476
var baseSetData = require('./baseSetData'),                                                                            // 13477
    isNative = require('../lang/isNative'),                                                                            // 13478
    support = require('../support');                                                                                   // 13479
                                                                                                                       // 13480
                                                                                                                       // 13481
var reFuncName = /^\s*function[ \n\r\t]+\w/;                                                                           // 13482
                                                                                                                       // 13483
                                                                                                                       // 13484
var reThis = /\bthis\b/;                                                                                               // 13485
                                                                                                                       // 13486
                                                                                                                       // 13487
var fnToString = Function.prototype.toString;                                                                          // 13488
                                                                                                                       // 13489
                                                                                                                       // 13490
function isBindable(func) {                                                                                            // 13491
  var result = !(support.funcNames ? func.name : support.funcDecomp);                                                  // 13492
                                                                                                                       // 13493
  if (!result) {                                                                                                       // 13494
    var source = fnToString.call(func);                                                                                // 13495
    if (!support.funcNames) {                                                                                          // 13496
      result = !reFuncName.test(source);                                                                               // 13497
    }                                                                                                                  // 13498
    if (!result) {                                                                                                     // 13499
      result = reThis.test(source) || isNative(func);                                                                  // 13500
      baseSetData(func, result);                                                                                       // 13501
    }                                                                                                                  // 13502
  }                                                                                                                    // 13503
  return result;                                                                                                       // 13504
}                                                                                                                      // 13505
                                                                                                                       // 13506
module.exports = isBindable;                                                                                           // 13507
                                                                                                                       // 13508
},{"../lang/isNative":135,"../support":144,"./baseSetData":115}],123:[function(require,module,exports){                // 13509
                                                                                                                       // 13510
var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;                                                                            // 13511
                                                                                                                       // 13512
                                                                                                                       // 13513
function isIndex(value, length) {                                                                                      // 13514
  value = +value;                                                                                                      // 13515
  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 13516
  return value > -1 && value % 1 == 0 && value < length;                                                               // 13517
}                                                                                                                      // 13518
                                                                                                                       // 13519
module.exports = isIndex;                                                                                              // 13520
                                                                                                                       // 13521
},{}],124:[function(require,module,exports){                                                                           // 13522
var isIndex = require('./isIndex'),                                                                                    // 13523
    isLength = require('./isLength'),                                                                                  // 13524
    isObject = require('../lang/isObject');                                                                            // 13525
                                                                                                                       // 13526
                                                                                                                       // 13527
function isIterateeCall(value, index, object) {                                                                        // 13528
  if (!isObject(object)) {                                                                                             // 13529
    return false;                                                                                                      // 13530
  }                                                                                                                    // 13531
  var type = typeof index;                                                                                             // 13532
  if (type == 'number') {                                                                                              // 13533
    var length = object.length,                                                                                        // 13534
        prereq = isLength(length) && isIndex(index, length);                                                           // 13535
  } else {                                                                                                             // 13536
    prereq = type == 'string' && index in object;                                                                      // 13537
  }                                                                                                                    // 13538
  if (prereq) {                                                                                                        // 13539
    var other = object[index];                                                                                         // 13540
    return value === value ? (value === other) : (other !== other);                                                    // 13541
  }                                                                                                                    // 13542
  return false;                                                                                                        // 13543
}                                                                                                                      // 13544
                                                                                                                       // 13545
module.exports = isIterateeCall;                                                                                       // 13546
                                                                                                                       // 13547
},{"../lang/isObject":136,"./isIndex":123,"./isLength":125}],125:[function(require,module,exports){                    // 13548
                                                                                                                       // 13549
var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;                                                                            // 13550
                                                                                                                       // 13551
                                                                                                                       // 13552
function isLength(value) {                                                                                             // 13553
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                        // 13554
}                                                                                                                      // 13555
                                                                                                                       // 13556
module.exports = isLength;                                                                                             // 13557
                                                                                                                       // 13558
},{}],126:[function(require,module,exports){                                                                           // 13559
                                                                                                                       // 13560
function isObjectLike(value) {                                                                                         // 13561
  return (value && typeof value == 'object') || false;                                                                 // 13562
}                                                                                                                      // 13563
                                                                                                                       // 13564
module.exports = isObjectLike;                                                                                         // 13565
                                                                                                                       // 13566
},{}],127:[function(require,module,exports){                                                                           // 13567
var isObject = require('../lang/isObject');                                                                            // 13568
                                                                                                                       // 13569
                                                                                                                       // 13570
function isStrictComparable(value) {                                                                                   // 13571
  return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));                                      // 13572
}                                                                                                                      // 13573
                                                                                                                       // 13574
module.exports = isStrictComparable;                                                                                   // 13575
                                                                                                                       // 13576
},{"../lang/isObject":136}],128:[function(require,module,exports){                                                     // 13577
(function (global){                                                                                                    // 13578
var isNative = require('../lang/isNative');                                                                            // 13579
                                                                                                                       // 13580
                                                                                                                       // 13581
var WeakMap = isNative(WeakMap = global.WeakMap) && WeakMap;                                                           // 13582
                                                                                                                       // 13583
                                                                                                                       // 13584
var metaMap = WeakMap && new WeakMap;                                                                                  // 13585
                                                                                                                       // 13586
module.exports = metaMap;                                                                                              // 13587
                                                                                                                       // 13588
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})                         // 13589
},{"../lang/isNative":135}],129:[function(require,module,exports){                                                     // 13590
var isArguments = require('../lang/isArguments'),                                                                      // 13591
    isArray = require('../lang/isArray'),                                                                              // 13592
    isIndex = require('./isIndex'),                                                                                    // 13593
    isLength = require('./isLength'),                                                                                  // 13594
    keysIn = require('../object/keysIn'),                                                                              // 13595
    support = require('../support');                                                                                   // 13596
                                                                                                                       // 13597
                                                                                                                       // 13598
var objectProto = Object.prototype;                                                                                    // 13599
                                                                                                                       // 13600
                                                                                                                       // 13601
var hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13602
                                                                                                                       // 13603
                                                                                                                       // 13604
function shimKeys(object) {                                                                                            // 13605
  var props = keysIn(object),                                                                                          // 13606
      propsLength = props.length,                                                                                      // 13607
      length = propsLength && object.length;                                                                           // 13608
                                                                                                                       // 13609
  var allowIndexes = length && isLength(length) &&                                                                     // 13610
    (isArray(object) || (support.nonEnumArgs && isArguments(object)));                                                 // 13611
                                                                                                                       // 13612
  var index = -1,                                                                                                      // 13613
      result = [];                                                                                                     // 13614
                                                                                                                       // 13615
  while (++index < propsLength) {                                                                                      // 13616
    var key = props[index];                                                                                            // 13617
    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {                                  // 13618
      result.push(key);                                                                                                // 13619
    }                                                                                                                  // 13620
  }                                                                                                                    // 13621
  return result;                                                                                                       // 13622
}                                                                                                                      // 13623
                                                                                                                       // 13624
module.exports = shimKeys;                                                                                             // 13625
                                                                                                                       // 13626
},{"../lang/isArguments":131,"../lang/isArray":132,"../object/keysIn":142,"../support":144,"./isIndex":123,"./isLength":125}],130:[function(require,module,exports){
var isObject = require('../lang/isObject');                                                                            // 13628
                                                                                                                       // 13629
                                                                                                                       // 13630
function toObject(value) {                                                                                             // 13631
  return isObject(value) ? value : Object(value);                                                                      // 13632
}                                                                                                                      // 13633
                                                                                                                       // 13634
module.exports = toObject;                                                                                             // 13635
                                                                                                                       // 13636
},{"../lang/isObject":136}],131:[function(require,module,exports){                                                     // 13637
var isLength = require('../internal/isLength'),                                                                        // 13638
    isObjectLike = require('../internal/isObjectLike');                                                                // 13639
                                                                                                                       // 13640
                                                                                                                       // 13641
var argsTag = '[object Arguments]';                                                                                    // 13642
                                                                                                                       // 13643
                                                                                                                       // 13644
var objectProto = Object.prototype;                                                                                    // 13645
                                                                                                                       // 13646
                                                                                                                       // 13647
var objToString = objectProto.toString;                                                                                // 13648
                                                                                                                       // 13649
                                                                                                                       // 13650
function isArguments(value) {                                                                                          // 13651
  var length = isObjectLike(value) ? value.length : undefined;                                                         // 13652
  return (isLength(length) && objToString.call(value) == argsTag) || false;                                            // 13653
}                                                                                                                      // 13654
                                                                                                                       // 13655
module.exports = isArguments;                                                                                          // 13656
                                                                                                                       // 13657
},{"../internal/isLength":125,"../internal/isObjectLike":126}],132:[function(require,module,exports){                  // 13658
var isLength = require('../internal/isLength'),                                                                        // 13659
    isNative = require('./isNative'),                                                                                  // 13660
    isObjectLike = require('../internal/isObjectLike');                                                                // 13661
                                                                                                                       // 13662
                                                                                                                       // 13663
var arrayTag = '[object Array]';                                                                                       // 13664
                                                                                                                       // 13665
                                                                                                                       // 13666
var objectProto = Object.prototype;                                                                                    // 13667
                                                                                                                       // 13668
                                                                                                                       // 13669
var objToString = objectProto.toString;                                                                                // 13670
                                                                                                                       // 13671
                                                                                                                       // 13672
var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray;                                          // 13673
                                                                                                                       // 13674
                                                                                                                       // 13675
var isArray = nativeIsArray || function(value) {                                                                       // 13676
  return (isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag) || false;              // 13677
};                                                                                                                     // 13678
                                                                                                                       // 13679
module.exports = isArray;                                                                                              // 13680
                                                                                                                       // 13681
},{"../internal/isLength":125,"../internal/isObjectLike":126,"./isNative":135}],133:[function(require,module,exports){ // 13682
var isArguments = require('./isArguments'),                                                                            // 13683
    isArray = require('./isArray'),                                                                                    // 13684
    isFunction = require('./isFunction'),                                                                              // 13685
    isLength = require('../internal/isLength'),                                                                        // 13686
    isObjectLike = require('../internal/isObjectLike'),                                                                // 13687
    isString = require('./isString'),                                                                                  // 13688
    keys = require('../object/keys');                                                                                  // 13689
                                                                                                                       // 13690
                                                                                                                       // 13691
function isEmpty(value) {                                                                                              // 13692
  if (value == null) {                                                                                                 // 13693
    return true;                                                                                                       // 13694
  }                                                                                                                    // 13695
  var length = value.length;                                                                                           // 13696
  if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||                                  // 13697
      (isObjectLike(value) && isFunction(value.splice)))) {                                                            // 13698
    return !length;                                                                                                    // 13699
  }                                                                                                                    // 13700
  return !keys(value).length;                                                                                          // 13701
}                                                                                                                      // 13702
                                                                                                                       // 13703
module.exports = isEmpty;                                                                                              // 13704
                                                                                                                       // 13705
},{"../internal/isLength":125,"../internal/isObjectLike":126,"../object/keys":141,"./isArguments":131,"./isArray":132,"./isFunction":134,"./isString":137}],134:[function(require,module,exports){
(function (global){                                                                                                    // 13707
var baseIsFunction = require('../internal/baseIsFunction'),                                                            // 13708
    isNative = require('./isNative');                                                                                  // 13709
                                                                                                                       // 13710
                                                                                                                       // 13711
var funcTag = '[object Function]';                                                                                     // 13712
                                                                                                                       // 13713
                                                                                                                       // 13714
var objectProto = Object.prototype;                                                                                    // 13715
                                                                                                                       // 13716
                                                                                                                       // 13717
var objToString = objectProto.toString;                                                                                // 13718
                                                                                                                       // 13719
                                                                                                                       // 13720
var Uint8Array = isNative(Uint8Array = global.Uint8Array) && Uint8Array;                                               // 13721
                                                                                                                       // 13722
                                                                                                                       // 13723
var isFunction = !(baseIsFunction(/x/) || (Uint8Array && !baseIsFunction(Uint8Array))) ? baseIsFunction : function(value) {
  return objToString.call(value) == funcTag;                                                                           // 13725
};                                                                                                                     // 13726
                                                                                                                       // 13727
module.exports = isFunction;                                                                                           // 13728
                                                                                                                       // 13729
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})                         // 13730
},{"../internal/baseIsFunction":110,"./isNative":135}],135:[function(require,module,exports){                          // 13731
var escapeRegExp = require('../string/escapeRegExp'),                                                                  // 13732
    isObjectLike = require('../internal/isObjectLike');                                                                // 13733
                                                                                                                       // 13734
                                                                                                                       // 13735
var funcTag = '[object Function]';                                                                                     // 13736
                                                                                                                       // 13737
                                                                                                                       // 13738
var reHostCtor = /^\[object .+?Constructor\]$/;                                                                        // 13739
                                                                                                                       // 13740
                                                                                                                       // 13741
var objectProto = Object.prototype;                                                                                    // 13742
                                                                                                                       // 13743
                                                                                                                       // 13744
var fnToString = Function.prototype.toString;                                                                          // 13745
                                                                                                                       // 13746
                                                                                                                       // 13747
var objToString = objectProto.toString;                                                                                // 13748
                                                                                                                       // 13749
                                                                                                                       // 13750
var reNative = RegExp('^' +                                                                                            // 13751
  escapeRegExp(objToString)                                                                                            // 13752
  .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'                                          // 13753
);                                                                                                                     // 13754
                                                                                                                       // 13755
                                                                                                                       // 13756
function isNative(value) {                                                                                             // 13757
  if (value == null) {                                                                                                 // 13758
    return false;                                                                                                      // 13759
  }                                                                                                                    // 13760
  if (objToString.call(value) == funcTag) {                                                                            // 13761
    return reNative.test(fnToString.call(value));                                                                      // 13762
  }                                                                                                                    // 13763
  return (isObjectLike(value) && reHostCtor.test(value)) || false;                                                     // 13764
}                                                                                                                      // 13765
                                                                                                                       // 13766
module.exports = isNative;                                                                                             // 13767
                                                                                                                       // 13768
},{"../internal/isObjectLike":126,"../string/escapeRegExp":143}],136:[function(require,module,exports){                // 13769
                                                                                                                       // 13770
function isObject(value) {                                                                                             // 13771
  var type = typeof value;                                                                                             // 13772
  return type == 'function' || (value && type == 'object') || false;                                                   // 13773
}                                                                                                                      // 13774
                                                                                                                       // 13775
module.exports = isObject;                                                                                             // 13776
                                                                                                                       // 13777
},{}],137:[function(require,module,exports){                                                                           // 13778
var isObjectLike = require('../internal/isObjectLike');                                                                // 13779
                                                                                                                       // 13780
                                                                                                                       // 13781
var stringTag = '[object String]';                                                                                     // 13782
                                                                                                                       // 13783
                                                                                                                       // 13784
var objectProto = Object.prototype;                                                                                    // 13785
                                                                                                                       // 13786
                                                                                                                       // 13787
var objToString = objectProto.toString;                                                                                // 13788
                                                                                                                       // 13789
                                                                                                                       // 13790
function isString(value) {                                                                                             // 13791
  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag) || false;           // 13792
}                                                                                                                      // 13793
                                                                                                                       // 13794
module.exports = isString;                                                                                             // 13795
                                                                                                                       // 13796
},{"../internal/isObjectLike":126}],138:[function(require,module,exports){                                             // 13797
var isLength = require('../internal/isLength'),                                                                        // 13798
    isObjectLike = require('../internal/isObjectLike');                                                                // 13799
                                                                                                                       // 13800
                                                                                                                       // 13801
var argsTag = '[object Arguments]',                                                                                    // 13802
    arrayTag = '[object Array]',                                                                                       // 13803
    boolTag = '[object Boolean]',                                                                                      // 13804
    dateTag = '[object Date]',                                                                                         // 13805
    errorTag = '[object Error]',                                                                                       // 13806
    funcTag = '[object Function]',                                                                                     // 13807
    mapTag = '[object Map]',                                                                                           // 13808
    numberTag = '[object Number]',                                                                                     // 13809
    objectTag = '[object Object]',                                                                                     // 13810
    regexpTag = '[object RegExp]',                                                                                     // 13811
    setTag = '[object Set]',                                                                                           // 13812
    stringTag = '[object String]',                                                                                     // 13813
    weakMapTag = '[object WeakMap]';                                                                                   // 13814
                                                                                                                       // 13815
var arrayBufferTag = '[object ArrayBuffer]',                                                                           // 13816
    float32Tag = '[object Float32Array]',                                                                              // 13817
    float64Tag = '[object Float64Array]',                                                                              // 13818
    int8Tag = '[object Int8Array]',                                                                                    // 13819
    int16Tag = '[object Int16Array]',                                                                                  // 13820
    int32Tag = '[object Int32Array]',                                                                                  // 13821
    uint8Tag = '[object Uint8Array]',                                                                                  // 13822
    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 13823
    uint16Tag = '[object Uint16Array]',                                                                                // 13824
    uint32Tag = '[object Uint32Array]';                                                                                // 13825
                                                                                                                       // 13826
                                                                                                                       // 13827
var typedArrayTags = {};                                                                                               // 13828
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                              // 13829
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                   // 13830
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                  // 13831
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                          // 13832
typedArrayTags[uint32Tag] = true;                                                                                      // 13833
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                   // 13834
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                             // 13835
typedArrayTags[dateTag] = typedArrayTags[errorTag] =                                                                   // 13836
typedArrayTags[funcTag] = typedArrayTags[mapTag] =                                                                     // 13837
typedArrayTags[numberTag] = typedArrayTags[objectTag] =                                                                // 13838
typedArrayTags[regexpTag] = typedArrayTags[setTag] =                                                                   // 13839
typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;                                                        // 13840
                                                                                                                       // 13841
                                                                                                                       // 13842
var objectProto = Object.prototype;                                                                                    // 13843
                                                                                                                       // 13844
                                                                                                                       // 13845
var objToString = objectProto.toString;                                                                                // 13846
                                                                                                                       // 13847
                                                                                                                       // 13848
function isTypedArray(value) {                                                                                         // 13849
  return (isObjectLike(value) && isLength(value.length) && typedArrayTags[objToString.call(value)]) || false;          // 13850
}                                                                                                                      // 13851
                                                                                                                       // 13852
module.exports = isTypedArray;                                                                                         // 13853
                                                                                                                       // 13854
},{"../internal/isLength":125,"../internal/isObjectLike":126}],139:[function(require,module,exports){                  // 13855
var baseAssign = require('../internal/baseAssign'),                                                                    // 13856
    createAssigner = require('../internal/createAssigner');                                                            // 13857
                                                                                                                       // 13858
                                                                                                                       // 13859
var assign = createAssigner(baseAssign);                                                                               // 13860
                                                                                                                       // 13861
module.exports = assign;                                                                                               // 13862
                                                                                                                       // 13863
},{"../internal/baseAssign":100,"../internal/createAssigner":118}],140:[function(require,module,exports){              // 13864
var baseCopy = require('../internal/baseCopy'),                                                                        // 13865
    baseCreate = require('../internal/baseCreate'),                                                                    // 13866
    isIterateeCall = require('../internal/isIterateeCall'),                                                            // 13867
    keys = require('./keys');                                                                                          // 13868
                                                                                                                       // 13869
                                                                                                                       // 13870
function create(prototype, properties, guard) {                                                                        // 13871
  var result = baseCreate(prototype);                                                                                  // 13872
  if (guard && isIterateeCall(prototype, properties, guard)) {                                                         // 13873
    properties = null;                                                                                                 // 13874
  }                                                                                                                    // 13875
  return properties ? baseCopy(properties, result, keys(properties)) : result;                                         // 13876
}                                                                                                                      // 13877
                                                                                                                       // 13878
module.exports = create;                                                                                               // 13879
                                                                                                                       // 13880
},{"../internal/baseCopy":102,"../internal/baseCreate":103,"../internal/isIterateeCall":124,"./keys":141}],141:[function(require,module,exports){
var isLength = require('../internal/isLength'),                                                                        // 13882
    isNative = require('../lang/isNative'),                                                                            // 13883
    isObject = require('../lang/isObject'),                                                                            // 13884
    shimKeys = require('../internal/shimKeys');                                                                        // 13885
                                                                                                                       // 13886
                                                                                                                       // 13887
var nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys;                                                     // 13888
                                                                                                                       // 13889
                                                                                                                       // 13890
var keys = !nativeKeys ? shimKeys : function(object) {                                                                 // 13891
  if (object) {                                                                                                        // 13892
    var Ctor = object.constructor,                                                                                     // 13893
        length = object.length;                                                                                        // 13894
  }                                                                                                                    // 13895
  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||                                                      // 13896
      (typeof object != 'function' && (length && isLength(length)))) {                                                 // 13897
    return shimKeys(object);                                                                                           // 13898
  }                                                                                                                    // 13899
  return isObject(object) ? nativeKeys(object) : [];                                                                   // 13900
};                                                                                                                     // 13901
                                                                                                                       // 13902
module.exports = keys;                                                                                                 // 13903
                                                                                                                       // 13904
},{"../internal/isLength":125,"../internal/shimKeys":129,"../lang/isNative":135,"../lang/isObject":136}],142:[function(require,module,exports){
var isArguments = require('../lang/isArguments'),                                                                      // 13906
    isArray = require('../lang/isArray'),                                                                              // 13907
    isIndex = require('../internal/isIndex'),                                                                          // 13908
    isLength = require('../internal/isLength'),                                                                        // 13909
    isObject = require('../lang/isObject'),                                                                            // 13910
    support = require('../support');                                                                                   // 13911
                                                                                                                       // 13912
                                                                                                                       // 13913
var objectProto = Object.prototype;                                                                                    // 13914
                                                                                                                       // 13915
                                                                                                                       // 13916
var hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 13917
                                                                                                                       // 13918
                                                                                                                       // 13919
function keysIn(object) {                                                                                              // 13920
  if (object == null) {                                                                                                // 13921
    return [];                                                                                                         // 13922
  }                                                                                                                    // 13923
  if (!isObject(object)) {                                                                                             // 13924
    object = Object(object);                                                                                           // 13925
  }                                                                                                                    // 13926
  var length = object.length;                                                                                          // 13927
  length = (length && isLength(length) &&                                                                              // 13928
    (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;                                 // 13929
                                                                                                                       // 13930
  var Ctor = object.constructor,                                                                                       // 13931
      index = -1,                                                                                                      // 13932
      isProto = typeof Ctor == 'function' && Ctor.prototype === object,                                                // 13933
      result = Array(length),                                                                                          // 13934
      skipIndexes = length > 0;                                                                                        // 13935
                                                                                                                       // 13936
  while (++index < length) {                                                                                           // 13937
    result[index] = (index + '');                                                                                      // 13938
  }                                                                                                                    // 13939
  for (var key in object) {                                                                                            // 13940
    if (!(skipIndexes && isIndex(key, length)) &&                                                                      // 13941
        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                                   // 13942
      result.push(key);                                                                                                // 13943
    }                                                                                                                  // 13944
  }                                                                                                                    // 13945
  return result;                                                                                                       // 13946
}                                                                                                                      // 13947
                                                                                                                       // 13948
module.exports = keysIn;                                                                                               // 13949
                                                                                                                       // 13950
},{"../internal/isIndex":123,"../internal/isLength":125,"../lang/isArguments":131,"../lang/isArray":132,"../lang/isObject":136,"../support":144}],143:[function(require,module,exports){
var baseToString = require('../internal/baseToString');                                                                // 13952
                                                                                                                       // 13953
                                                                                                                       // 13954
var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,                                                                           // 13955
    reHasRegExpChars = RegExp(reRegExpChars.source);                                                                   // 13956
                                                                                                                       // 13957
                                                                                                                       // 13958
function escapeRegExp(string) {                                                                                        // 13959
  string = baseToString(string);                                                                                       // 13960
  return (string && reHasRegExpChars.test(string))                                                                     // 13961
    ? string.replace(reRegExpChars, '\\$&')                                                                            // 13962
    : string;                                                                                                          // 13963
}                                                                                                                      // 13964
                                                                                                                       // 13965
module.exports = escapeRegExp;                                                                                         // 13966
                                                                                                                       // 13967
},{"../internal/baseToString":116}],144:[function(require,module,exports){                                             // 13968
(function (global){                                                                                                    // 13969
var isNative = require('./lang/isNative');                                                                             // 13970
                                                                                                                       // 13971
                                                                                                                       // 13972
var reThis = /\bthis\b/;                                                                                               // 13973
                                                                                                                       // 13974
                                                                                                                       // 13975
var objectProto = Object.prototype;                                                                                    // 13976
                                                                                                                       // 13977
                                                                                                                       // 13978
var document = (document = global.window) && document.document;                                                        // 13979
                                                                                                                       // 13980
                                                                                                                       // 13981
var propertyIsEnumerable = objectProto.propertyIsEnumerable;                                                           // 13982
                                                                                                                       // 13983
                                                                                                                       // 13984
var support = {};                                                                                                      // 13985
                                                                                                                       // 13986
(function(x) {                                                                                                         // 13987
                                                                                                                       // 13988
                                                                                                                       // 13989
  support.funcDecomp = !isNative(global.WinRTError) && reThis.test(function() { return this; });                       // 13990
                                                                                                                       // 13991
                                                                                                                       // 13992
  support.funcNames = typeof Function.name == 'string';                                                                // 13993
                                                                                                                       // 13994
                                                                                                                       // 13995
  try {                                                                                                                // 13996
    support.dom = document.createDocumentFragment().nodeType === 11;                                                   // 13997
  } catch(e) {                                                                                                         // 13998
    support.dom = false;                                                                                               // 13999
  }                                                                                                                    // 14000
                                                                                                                       // 14001
                                                                                                                       // 14002
  try {                                                                                                                // 14003
    support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);                                                    // 14004
  } catch(e) {                                                                                                         // 14005
    support.nonEnumArgs = true;                                                                                        // 14006
  }                                                                                                                    // 14007
}(0, 0));                                                                                                              // 14008
                                                                                                                       // 14009
module.exports = support;                                                                                              // 14010
                                                                                                                       // 14011
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})                         // 14012
},{"./lang/isNative":135}],145:[function(require,module,exports){                                                      // 14013
                                                                                                                       // 14014
function identity(value) {                                                                                             // 14015
  return value;                                                                                                        // 14016
}                                                                                                                      // 14017
                                                                                                                       // 14018
module.exports = identity;                                                                                             // 14019
                                                                                                                       // 14020
},{}]},{},[1])                                                                                                         // 14021
                                                                                                                       // 14022
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/peerlibrary:aws-sdk/client.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
AWS = window.AWS;                                                                                                      // 1
delete window.AWS;                                                                                                     // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);

///////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['peerlibrary:aws-sdk'] = {}, {
  AWS: AWS
});

})();
