{"version":3,"sources":["meteor://ðŸ’»app/packages/lukemadera_autoform-autocomplete/template.autoform-autocomplete.js","meteor://ðŸ’»app/packages/lukemadera_autoform-autocomplete/autoform-autocomplete.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H","file":"/packages/lukemadera_autoform-autocomplete.js","sourcesContent":["\nTemplate.__checkName(\"afAutocomplete\");\nTemplate[\"afAutocomplete\"] = new Template(\"Template.afAutocomplete\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"lm-autoform-autocomplete-input-cont\"\n  }, \"\\n\\n    \", Blaze.If(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\"opts\"), \"multi\"));\n  }, function() {\n    return [ \"\\n      \", HTML.DIV({\n      \"class\": \"lm-autoform-autocomplete-input-multi-cont\"\n    }, \"\\n        \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"values\"));\n    }, function() {\n      return [ \"\\n          \", HTML.DIV({\n        \"class\": \"lm-autoform-autocomplete-selected-value\"\n      }, \"\\n            \", HTML.Comment(\" <div class='lm-autoform-autocomplete-selected-value-remove'>x</div> \"), \"\\n            \", Blaze.If(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));\n      }, function() {\n        return [ \"\\n              \", Blaze.View(\"lookup:xDisplay.name\", function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));\n        }), \"\\n            \" ];\n      }, function() {\n        return [ \"\\n              \", Blaze.View(\"lookup:name\", function() {\n          return Spacebars.mustache(view.lookup(\"name\"));\n        }), \"\\n            \" ];\n      }), \"\\n          \"), \"\\n        \" ];\n    }), \"\\n        \", HTML.INPUT(HTML.Attrs({\n      type: \"text\",\n      \"class\": \"lm-autoform-autocomplete-input\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n      \"), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n      \", HTML.INPUT(HTML.Attrs({\n      type: \"text\",\n      \"class\": \"lm-autoform-autocomplete-input\"\n    }, function() {\n      return Spacebars.attrMustache(view.lookup(\"atts\"));\n    })), \"\\n    \" ];\n  }), \"\\n    \\n    \", HTML.DIV({\n    \"class\": function() {\n      return [ \"lm-autoform-autocomplete-predictions \", Spacebars.mustache(Spacebars.dot(view.lookup(\"classes\"), \"predictions\")) ];\n    }\n  }, \"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"predictions\"));\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": \"lm-autoform-autocomplete-prediction-item\"\n    }, \"\\n          \", Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));\n    }, function() {\n      return [ \"\\n            \", Blaze.View(\"lookup:xDisplay.name\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"xDisplay\"), \"name\"));\n      }), \"\\n          \" ];\n    }, function() {\n      return [ \"\\n            \", Blaze.View(\"lookup:name\", function() {\n        return Spacebars.mustache(view.lookup(\"name\"));\n      }), \"\\n          \" ];\n    }), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n","/**\n@param {Object} [atts.opts]\n  @param {String} [instid] Required to use any external API calls\n  @param {Number} [multi =0] Set to 1 to make a multi select rather than a normal select\n  @param {Boolean} [createNew =false] True to allow creating a new value (instead of \"no results\" being displayed, the entered value will be displayed and will be given a value of newNamePrefix+name for uniquely identifying and then (optionally) using to create / save this new value to the database for next time)\n  @param {String} [newNamePrefix ='__'] The prefix that will be used for creating a new name (if no match)\n  @param {Function} getPredictions The function to call to look up predictions for the autocomplete. It is passed:\n    @param {String} name The text input by the user to look up / match to\n    @param {Object} [params]\n    @return {Object}\n      @param {Array} predictions Array of objects with the predictions. Each object should have:\n        @param {String} value\n        @param {String} name\n  @param {Function} [onUpdateVals] A function to call every time value(s) are updated (set, added, removed). It is passed either an array of objects (if multi) or just one object.\n    @param {String} optsInstid The same atts.opts.instid that was passed in (to uniquely identify)\n    @param {Object|Array} vals Array if multi is set, object otherwise of:\n      @param {String} value\n      @param {String} name Set if multi\n\n\nAPI is all the lmAfAutocomplete functions (see below)\n\n\n@toc\nlmAfAutocomplete.\n  3. setVals\n  15. removeVals\n  16. addVals\n  18. removeAllVals\nlmAfAutocompletePrivate.\n  17. onUpdateVals\n  19. focusInput\n  12. getTemplateInst\n  1. init\n  13. destroy\n  2. initOpts\n  4. getPredictions\n  5. hide\n  6. show\n7. AutoForm.addInputType(\"lmautocomplete\",..\nTemplate.afAutocomplete.\n  8. created\n  9. rendered\n  14. destroyed\n  10. helpers\n  11. events\n*/\n\nlmAfAutocomplete ={};\n\nvar lmAfAutocompletePrivate ={};\n\n/**\n//for external calls in, need to store reference to template instance to get the correct one so for EACH instance of this package / template, will store two values: a passed in instid (for external reference) as a key and that is an object with the internal template instance. This will allow going back and forth between the two and allow external interaction with the proper template instance.\n@example\n  lmAfAutocompletePrivate.inst ={\n    'inst1': {\n      templateInst: templateInst1,\n      optsInstid: '',\n      values: [{value: 'val1', name:'name1'}],\n      multi: 0\n    },\n    'inst2': {\n      templateInst: templateInst2,\n      optsInstid: 'asfdlkjl3lajkf',\n      values: [{value: 'val2', name:'name2'}],\n      multi: 1\n    }\n  };\n*/\nlmAfAutocompletePrivate.inst ={};\n\n/**\n@toc 3.\n@param {Array|Object} vals Array of objects (or one single object) to set, each object has:\n  @param {String} [value] If not set, will be assumed it is a NEW value to add\n  @param {String} name The display text\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n*/\nlmAfAutocomplete.setVals =function(vals, params) {\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {\n    vals =[vals];\n  }\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);\n  if(templateInst) {\n    var instid =templateInst.data.atts['data-schema-key'];\n\n    //if no multi, only set/add ONE\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {\n      vals =vals.slice(0, 1);\n    }\n\n    var opts =templateInst.opts.get();\n    var ii;\n    for(ii =0; ii<vals.length; ii++) {\n      if(vals[ii].value ===undefined || !vals[ii].value) {\n        vals[ii].value =opts.newNamePrefix+vals[ii].name;\n      }\n    }\n\n    lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, vals, {});\n  }\n};\n\n/**\n@toc 15.\n@param {Array|Object} vals Array of objects (or one single object) to remove, each object has:\n  @param {String} value\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n  // @param {Boolean} [noOnUpdate] True to NOT run the on update (i.e. if just using this to remove all values befor ea set, do not want to call it twice)\n*/\nlmAfAutocomplete.removeVals =function(vals, params) {\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {\n    vals =[vals];\n  }\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);\n  if(templateInst) {\n    var instid =templateInst.data.atts['data-schema-key'];\n    var curVals =lmAfAutocompletePrivate.inst[instid].values;\n    var ii, index1;\n    //have to go through from the END since removing elements and do not want to mess up indices\n    for(ii =(curVals.length-1); ii>=0; ii--) {\n      index1 =notoriiArray.findArrayIndex(vals, 'value', curVals[ii].value, {});\n      if(index1 >-1) {\n        curVals =notoriiArray.remove(curVals, ii);\n      }\n    }\n\n    // if(params.noOnUpdate ===undefined || !params.noOnUpdate) {\n      lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, curVals, {});\n    // }\n  }\n};\n\n/**\n@toc 16.\n@param {Array|Object} vals Array of objects (or one single object) to add, each object has:\n  @param {String} value\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n*/\nlmAfAutocomplete.addVals =function(vals, params) {\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {\n    vals =[vals];\n  }\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);\n  if(templateInst) {\n    var instid =templateInst.data.atts['data-schema-key'];\n    \n    //if no multi, clear out first and only set/add ONE\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {\n      lmAfAutocomplete.removeAllVals(params);\n      vals =vals.slice(0, 1);\n    }\n\n    var curVals =lmAfAutocompletePrivate.inst[instid].values;\n    var ii, index1;\n    for(ii =0; ii<vals.length; ii++) {\n      index1 =notoriiArray.findArrayIndex(curVals, 'value', vals[ii].value, {});\n      if(index1 <0) {\n        curVals.push(vals[ii]);\n      }\n    }\n\n    lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, curVals, {});\n  }\n};\n\n/**\n@toc 18.\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n  // @param {Boolean} [noOnUpdate] True to NOT run the on update (i.e. if just using this to remove all values befor ea set, do not want to call it twice)\n*/\nlmAfAutocomplete.removeAllVals =function(params) {\n  var templateInst =lmAfAutocompletePrivate.getTemplateInst(params);\n  if(templateInst) {\n    var instid =templateInst.data.atts['data-schema-key'];\n    var curVals =[];\n    lmAfAutocompletePrivate.onUpdateVals(instid, templateInst, curVals, {});\n  }\n};\n\n\n\n/**\n@toc 17.\n*/\nlmAfAutocompletePrivate.onUpdateVals =function(instid, templateInst, vals, params) {\n  //update UI too\n  var ele =templateInst.find('input.lm-autoform-autocomplete-input');\n  if(lmAfAutocompletePrivate.inst[instid].multi) {\n    ele.value ='';    //blank out\n  }\n  else if(vals.length) {\n    ele.value =vals[0].name;\n  }\n\n  lmAfAutocompletePrivate.inst[instid].values =vals;\n  templateInst.values.set(vals);\n  lmAfAutocompletePrivate.hide(templateInst, {});\n\n  if(vals.length && templateInst.data.atts.opts.instid !==undefined && templateInst.data.atts.opts.onUpdateVals !==undefined) {\n    var valToSend =vals;\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {\n      valToSend =valToSend[0];\n    }\n    templateInst.data.atts.opts.onUpdateVals.call(templateInst, templateInst.data.atts.opts.instid, valToSend, {});\n  }\n};\n\n/**\n@toc 19.\n*/\nlmAfAutocompletePrivate.focusInput =function(templateInst, params) {\n  var ele =templateInst.find('input.lm-autoform-autocomplete-input');\n  ele.focus();\n};\n\n/**\n@toc 12.\n@param {Object} params\n  @param {Object} [templateInst] (for internal use) One of 'templateInst' or 'optsInstid' is required\n  @param {Object} [optsInstid] The opts.instid passed in with the template options (for external use)\n*/\nlmAfAutocompletePrivate.getTemplateInst =function(params) {\n  var templateInst =false;\n  if(params.templateInst) {\n    templateInst =params.templateInst;\n  }\n  else if(params.instid) {\n    if(lmAfAutocompletePrivate.inst[params.instid] !==undefined) {\n      templateInst =lmAfAutocompletePrivate.inst[params.instid].templateInst;\n    }\n  }\n  else if(params.optsInstid) {\n    var xx;\n    for(xx in lmAfAutocompletePrivate.inst) {\n      if(lmAfAutocompletePrivate.inst[xx].optsInstid ===params.optsInstid) {\n        templateInst =lmAfAutocompletePrivate.inst[xx].templateInst;\n        break;\n      }\n    }\n  }\n  return templateInst;\n}\n\n/**\n@toc 1.\n*/\nlmAfAutocompletePrivate.init =function(templateInst, params) {\n  this.initOpts(templateInst, params);\n\n  var vals =templateInst.data.value;\n  if(vals ===undefined || !vals) {\n    vals =[];\n  }\n  if(typeof(vals) ==='object' && !(Object.prototype.toString.apply(vals) === \"[object Array]\")) {\n    vals =[vals];\n  }\n\n  lmAfAutocomplete.setVals(vals, {templateInst:templateInst});\n};\n\n/**\n@toc 13.\n*/\nlmAfAutocompletePrivate.destroy =function(templateInst, params) {\n  //remove instid id key\n  var xx;\n  for(xx in lmAfAutocompletePrivate.inst) {\n    if(lmAfAutocompletePrivate.inst[xx].templateInst ===templateInst) {\n      delete lmAfAutocompletePrivate.inst[xx];\n      break;\n    }\n  }\n};\n\n/**\n@toc 2.\n*/\nlmAfAutocompletePrivate.initOpts =function(templateInst, params) {\n  var optsDefault ={\n    newNamePrefix: '__',\n    multi: 0,\n    createNew: false\n  };\n  var xx, opts;\n  opts =EJSON.clone(templateInst.data.atts.opts);\n  if(opts ===undefined) {\n    opts =EJSON.clone(optsDefault);\n  }\n  else {\n    //extend\n    for(xx in optsDefault) {\n      if(opts[xx] ===undefined) {\n        opts[xx] =optsDefault[xx];\n      }\n    }\n  }\n  opts.multi =parseInt(opts.multi, 10);\n\n  if(opts.instid ===undefined) {\n    console.log('lmAfAutocomplete: opts.instid not set (it is required if you want to use any (external) api calls)');\n    opts.instid =false;\n  }\n  var instid =templateInst.data.atts['data-schema-key'];\n  lmAfAutocompletePrivate.inst[instid] ={\n    templateInst: templateInst,\n    optsInstid: opts.instid,\n    multi: opts.multi,\n    values: []\n  };\n\n  templateInst.opts.set(opts);\n};\n\n/**\n@toc 4.\n@param {Object} params\n  @param {Boolean} [noShow] True to NOT display predictions\n*/\nlmAfAutocompletePrivate.getPredictions =function(templateInst, val, params) {\n  var predictions =[];\n  var retPredictions =templateInst.data.atts.opts.getPredictions.call(templateInst, val, {});\n  predictions =retPredictions.predictions;\n  if(!predictions.length) {\n    //if none and allow create new, show the val for allowing creation\n    if(templateInst.data.atts.opts.createNew) {\n      predictions =[\n        {\n          name: val,\n          value: '',\n          xDisplay: {\n            name: '*'+val\n          }\n        }\n      ];\n    }\n  }\n  else {\n    //filter out already selected values\n    var instid =templateInst.data.atts['data-schema-key'];\n    var curVals =lmAfAutocompletePrivate.inst[instid].values;\n    var ii, index1;\n    for(ii =(predictions.length-1); ii>=0; ii--) {\n      index1 =notoriiArray.findArrayIndex(curVals, 'value', predictions[ii].value, {});\n      if(index1 >-1) {\n        predictions =notoriiArray.remove(predictions, ii);\n      }\n    }\n  }\n  templateInst.predictions.set(predictions);\n  if(params.noShow ===undefined || !params.noShow) {\n    this.show(templateInst, {});\n  }\n};\n\n/**\n@toc 5.\n*/\nlmAfAutocompletePrivate.hide =function(templateInst, params) {\n  var classes =templateInst.classes.get();\n  classes.predictions ='hidden';\n  templateInst.classes.set(classes);\n};\n\n/**\n@toc 6.\n*/\nlmAfAutocompletePrivate.show =function(templateInst, params) {\n  var classes =templateInst.classes.get();\n  classes.predictions ='visible';\n  templateInst.classes.set(classes);\n};\n\n/**\n@toc 7.\n*/\nAutoForm.addInputType(\"lmautocomplete\", {\n  template: \"afAutocomplete\",\n  valueIn: function(val) {\n    //will convert to display value later after set / extend opts\n    return val;\n  },\n  valueOut: function() {\n    var instid =this.attr('data-schema-key');\n    var valOut =lmAfAutocompletePrivate.inst[instid].values;\n    if(!lmAfAutocompletePrivate.inst[instid].multi) {\n      valOut =valOut[0];\n    }\n    return valOut;\n  }\n});\n\n/**\n@toc 8.\n*/\nTemplate.afAutocomplete.created =function() {\n  this.opts =new ReactiveVar({});\n\n  this.predictions =new ReactiveVar([]);\n  this.classes =new ReactiveVar({\n    predictions: 'hidden'\n  });\n\n  this.values =new ReactiveVar([]);\n};\n\n/**\n@toc 9.\n*/\nTemplate.afAutocomplete.rendered =function() {\n  //LAME! need timeout otherwise current value sometimes is not set yet..   //@todo - fix this\n  var templateInst =this;\n  lmAfAutocompletePrivate.init(templateInst, {});\n  setTimeout(function() {\n    lmAfAutocompletePrivate.init(templateInst, {});\n  }, 750);\n};\n\n/**\n@toc 14.\n*/\nTemplate.afAutocomplete.destroyed =function() {\n  lmAfAutocompletePrivate.destroy(this, {});\n};\n\n/**\n@toc 10.\n*/\nTemplate.afAutocomplete.helpers({\n  //fix to avoid error for passed in object\n  // - https://github.com/aldeed/meteor-autoform-bs-datepicker/issues/3\n  // - https://github.com/aldeed/meteor-autoform-bs-datepicker/commit/3977aa69b61152cf8c0f731a11676b087d2ec9df\n  atts: function() {\n    var atts =EJSON.clone(this.atts);\n    delete atts.opts;\n    return atts;\n  },\n  classes: function() {\n    return Template.instance().classes.get();\n  },\n  predictions: function() {\n    return Template.instance().predictions.get();\n  },\n  values: function() {\n    return Template.instance().values.get();\n  },\n  opts: function() {\n    return Template.instance().opts.get();\n  }\n});\n\n/**\n@toc 11.\n*/\nTemplate.afAutocomplete.events({\n  'keyup .lm-autoform-autocomplete-input': function(evt, template) {\n    lmAfAutocompletePrivate.getPredictions(template, evt.target.value, {});\n  },\n  'click .lm-autoform-autocomplete-prediction-item': function(evt, template) {\n    lmAfAutocomplete.addVals([this], {templateInst:template});\n    lmAfAutocompletePrivate.focusInput(template, {});\n  },\n  'click .lm-autoform-autocomplete-selected-value': function(evt, template) {\n    lmAfAutocomplete.removeVals([this], {templateInst:template});\n  },\n  'click .lm-autoform-autocomplete-input-multi-cont': function(evt, template) {\n    lmAfAutocompletePrivate.focusInput(template, {});\n  }\n});"]}