{"version":3,"sources":["meteor://ðŸ’»app/packages/notorii_array/packages/notorii_array.js"],"names":[],"mappingsfile":"/packages/notorii_array.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/notorii:array/notorii-array.js                                                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nnotoriiArray ={};                                                                                                    // 1\n                                                                                                                     // 2\n/**                                                                                                                  // 3\nRemoves one or more items from an array                                                                              // 4\n// Array Remove - By John Resig (MIT Licensed)                                                                       // 5\n@usage                                                                                                               // 6\n// Remove the second item from the array                                                                             // 7\nremove(arr1, 1);                                                                                                     // 8\n// Remove the second-to-last item from the array                                                                     // 9\nremove(arr1, -2);                                                                                                    // 10\n// Remove the second and third items from the array                                                                  // 11\nremove(arr1, 1,2);                                                                                                   // 12\n// Remove the last and second-to-last items from the array                                                           // 13\nremove(arr1, -2,-1);                                                                                                 // 14\n@toc 0.                                                                                                              // 15\n@method remove                                                                                                       // 16\n@param {Array} arr1 The array to remove from                                                                         // 17\n@param {Number} from The index to remove (or remove starting from if removing more than one)                         // 18\n@param {Number} [to] The index to remove up to. Pass in boolean false to not use this parameter (i.e. if want to use 'params' but not 'to')\n@param {Object} [params]                                                                                             // 20\n  @param {Boolean} [modifyOriginal] True to modify the passed in array itself (thus no return value is needed) - this is better for performance but can lead to unexpected behavior since the original version is modified everywhere it's used. NOTE: this doesn't seem to be working 100% properly - the returned value IS correct and no '.copy' is used so still good for performance, BUT the original array is cut to smaller length and is wrong..   //@todo - fix this..\n@return {Array} arr1 The new array with the appropriate element(s) removed                                           // 22\n@usage                                                                                                               // 23\n  var arr1 =[                                                                                                        // 24\n    {_id:1, name:'Joe'},                                                                                             // 25\n    {_id:2, name:'Bob'},                                                                                             // 26\n    {_id:3, name:'Sally'},                                                                                           // 27\n    {_id:4, name:'Sue'},                                                                                             // 28\n    {_id:5, name:'Becky'}                                                                                            // 29\n  ];                                                                                                                 // 30\n  var smallerArray =notoriiArray.remove(arr1, 1, false, {});    //can also just do 'notoriiArray.remove(arr1, 1);' if not using 'to' or 'params' parameters\n*/                                                                                                                   // 32\nnotoriiArray.remove =function(arrOrig, from, to, params) {                                                           // 33\n  // console.log(arrOrig);   //TESTING                                                                               // 34\n  if(params ===undefined) {                                                                                          // 35\n    params ={};                                                                                                      // 36\n  }                                                                                                                  // 37\n  var arr1;                                                                                                          // 38\n  if(params.modifyOriginal !==undefined && params.modifyOriginal) {                                                  // 39\n    arr1 =arrOrig;                                                                                                   // 40\n  }                                                                                                                  // 41\n  else {    //make a copy first                                                                                      // 42\n    arr1 =EJSON.clone(arrOrig);   //don't' change the original version of the array                                  // 43\n  }                                                                                                                  // 44\n  // console.log('array remove: before: '+JSON.stringify(arr1));                                                     // 45\n  var rest = arr1.slice((to || from) + 1 || arr1.length);                                                            // 46\n  arr1.length = from < 0 ? arr1.length + from : from;                                                                // 47\n  // arr1 =arr1.push.apply(this, rest);                                                                              // 48\n  // arr1.push(rest);                                                                                                // 49\n  arr1 =arr1.concat(rest);                                                                                           // 50\n  // console.log('array remove: after: '+JSON.stringify(arr1));                                                      // 51\n  return arr1;                                                                                                       // 52\n};                                                                                                                   // 53\n                                                                                                                     // 54\n/**                                                                                                                  // 55\nReturns the index of an 2D []{} associative array when given the key & value to search for within the array. Like native javascript '.indexOf()' but for arrays of objects.\n@toc 1.                                                                                                              // 57\n@method findArrayIndex                                                                                               // 58\n@param {Array} array 2D array []{} to search                                                                         // 59\n@param {String} key Object key to check value against                                                                // 60\n@param {Mixed} val To match key value against                                                                        // 61\n@param {Object} [params]                                                                                             // 62\n  @param {Boolean} oneD True if it's a 1D array                                                                      // 63\n@return {Number} The index of the element OR -1 if not found                                                         // 64\n@usage                                                                                                               // 65\n  var arr1 =[                                                                                                        // 66\n    {_id:1, name:'Joe'},                                                                                             // 67\n    {_id:2, name:'Bob'},                                                                                             // 68\n    {_id:3, name:'Sally'},                                                                                           // 69\n    {_id:4, name:'Sue'},                                                                                             // 70\n    {_id:5, name:'Becky'}                                                                                            // 71\n  ];                                                                                                                 // 72\n  var index1 =notoriiArray.findArrayIndex(arr1, 'name', 'Bob', {});   //index1 will return 1 since the 2nd element (array index 1 since arrays are 0 indexed) is the one with 'Bob' in the 'name' field\n*/                                                                                                                   // 74\nnotoriiArray.findArrayIndex =function(array, key, val, params) {                                                     // 75\n  var ii;                                                                                                            // 76\n  var index =-1;                                                                                                     // 77\n  if(params.oneD)                                                                                                    // 78\n  {                                                                                                                  // 79\n    for(ii=0; ii<array.length; ii++)                                                                                 // 80\n    {                                                                                                                // 81\n      if(array[ii] == val)                                                                                           // 82\n      {                                                                                                              // 83\n        index = ii;                                                                                                  // 84\n        break;                                                                                                       // 85\n      }                                                                                                              // 86\n    }                                                                                                                // 87\n  }                                                                                                                  // 88\n  else                                                                                                               // 89\n  {                                                                                                                  // 90\n    for(ii=0; ii<array.length; ii++)                                                                                 // 91\n    {                                                                                                                // 92\n      if(array[ii][key] == val)                                                                                      // 93\n      {                                                                                                              // 94\n        index = ii;                                                                                                  // 95\n        break;                                                                                                       // 96\n      }                                                                                                              // 97\n    }                                                                                                                // 98\n  }                                                                                                                  // 99\n  return index;                                                                                                      // 100\n};                                                                                                                   // 101\n                                                                                                                     // 102\n/**                                                                                                                  // 103\narray has 2 elements: 1st is an identifier (for use to match later), 2nd gets sorted & keeps it's identifier with it // 104\n@return array1                                                                                                       // 105\n*/                                                                                                                   // 106\nfunction subSort2D(array1)                                                                                           // 107\n{                                                                                                                    // 108\n  var left;                                                                                                          // 109\n  var right;                                                                                                         // 110\n  var beg =[];                                                                                                       // 111\n  var end =[];                                                                                                       // 112\n  var pivot =[];                                                                                                     // 113\n  pivot[0] =[];                                                                                                      // 114\n  pivot[0][0] =[];                                                                                                   // 115\n  pivot[0][1] =[];                                                                                                   // 116\n  pivot[1] =[];                                                                                                      // 117\n  pivot[1][0] =[];                                                                                                   // 118\n  pivot[1][1] =[];                                                                                                   // 119\n  var count =0;                                                                                                      // 120\n                                                                                                                     // 121\n  beg[0] =0;                                                                                                         // 122\n  //end[0] =rosterLength-1;                                                                                          // 123\n  //end[0] =array1.length-1;                                                                                         // 124\n  end[0] =array1.length;    //CHANGE - not sure why... (array1 doesn't have a blank last index so don't have to subtract 1 anymore...)\n  while(count>=0)                                                                                                    // 126\n  {                                                                                                                  // 127\n    left =beg[count];                                                                                                // 128\n    right =end[count]-1;                                                                                             // 129\n    if(left <right)                                                                                                  // 130\n    {                                                                                                                // 131\n      pivot[0][1] =array1[left][1];                                                                                  // 132\n      pivot[0][0] =array1[left][0];                                                                                  // 133\n      while(left <right)                                                                                             // 134\n      {                                                                                                              // 135\n        while((array1[right][1] >= pivot[0][1]) && (left <right))                                                    // 136\n        {                                                                                                            // 137\n          right--;                                                                                                   // 138\n        }                                                                                                            // 139\n        if(left <right)                                                                                              // 140\n        {                                                                                                            // 141\n          array1[left][0] =array1[right][0];                                                                         // 142\n          array1[left][1] =array1[right][1];                                                                         // 143\n          left++;                                                                                                    // 144\n        }                                                                                                            // 145\n        while((array1[left][1] <= pivot[0][1]) && (left <right))                                                     // 146\n        {                                                                                                            // 147\n          left++;                                                                                                    // 148\n        }                                                                                                            // 149\n        if(left <right)                                                                                              // 150\n        {                                                                                                            // 151\n          array1[right][0] =array1[left][0];                                                                         // 152\n          array1[right][1] =array1[left][1];                                                                         // 153\n          right--;                                                                                                   // 154\n        }                                                                                                            // 155\n      }                                                                                                              // 156\n      array1[left][0] =pivot[0][0];                                                                                  // 157\n      array1[left][1] =pivot[0][1];                                                                                  // 158\n      beg[count+1] =left+1;                                                                                          // 159\n      end[count+1] =end[count];                                                                                      // 160\n      end[count] =left;                                                                                              // 161\n      count++;                                                                                                       // 162\n    }                                                                                                                // 163\n    else                                                                                                             // 164\n    {                                                                                                                // 165\n      count--;                                                                                                       // 166\n    }                                                                                                                // 167\n  }                                                                                                                  // 168\n                                                                                                                     // 169\n  //var yes =1;   //dummy                                                                                            // 170\n  return array1;                                                                                                     // 171\n}                                                                                                                    // 172\n                                                                                                                     // 173\n/**                                                                                                                  // 174\ntakes a multidimensional array & array index to sort by and returns the multidimensional array, now sorted by that array index\n@method sort2D                                                                                                       // 176\n@param {Array} arrayUnsorted 2D array []{} of objects to sort                                                        // 177\n@param {Number} column Array index to sort by (note first one is 0)                                                  // 178\n@param {Object} [params]                                                                                             // 179\n  @param {String} [order] 'desc' for reverse order sort                                                              // 180\n@return {Array} sortedArray input array of objects []{} but now sorted                                               // 181\n@usage                                                                                                               // 182\n  var arr1 =[                                                                                                        // 183\n    {_id:1, name:'Joe'},                                                                                             // 184\n    {_id:2, name:'Bob'},                                                                                             // 185\n    {_id:3, name:'Sally'},                                                                                           // 186\n    {_id:4, name:'Sue'},                                                                                             // 187\n    {_id:5, name:'Becky'}                                                                                            // 188\n  ];                                                                                                                 // 189\n  var sortedArray =notoriiArray.sort2D(arr1, 'name', {});   //will now have array sorted by alphabetical order by name (i.e. Becky, Bob, Joe, Sally, Sue)\n*/                                                                                                                   // 191\nnotoriiArray.sort2D =function(arrayUnsorted, column, params) {                                                       // 192\n  var tempArray =[];  //copy calHide array here to sort; then re-copy back into calHide array once sorted            // 193\n  var array2D =[];                                                                                                   // 194\n  var ii;                                                                                                            // 195\n  for(ii =0; ii<arrayUnsorted.length; ii++)                                                                          // 196\n  {                                                                                                                  // 197\n    tempArray[ii] =[];                                                                                               // 198\n    tempArray[ii] =arrayUnsorted[ii];                                                                                // 199\n    array2D[ii] =[ii, tempArray[ii][column]];                                                                        // 200\n  }                                                                                                                  // 201\n                                                                                                                     // 202\n  array2D =subSort2D(array2D);    //function    - array2D will come out sorted                                       // 203\n                                                                                                                     // 204\n  var sortedArray =[];                                                                                               // 205\n  var counter =0;                                                                                                    // 206\n  if(params.order !==undefined && params.order =='desc')                                                             // 207\n  {                                                                                                                  // 208\n    for(ii=(array2D.length-1); ii>=0; ii--)                                                                          // 209\n    {                                                                                                                // 210\n      sortedArray[counter] =tempArray[array2D[ii][0]];                                                               // 211\n      counter++;                                                                                                     // 212\n    }                                                                                                                // 213\n  }                                                                                                                  // 214\n  else                                                                                                               // 215\n  {                                                                                                                  // 216\n    for(ii =0; ii<array2D.length; ii++)                                                                              // 217\n    {                                                                                                                // 218\n      sortedArray[counter] =tempArray[array2D[ii][0]];                                                               // 219\n      counter++;                                                                                                     // 220\n    }                                                                                                                // 221\n  }                                                                                                                  // 222\n                                                                                                                     // 223\n  return sortedArray;                                                                                                // 224\n};                                                                                                                   // 225\n                                                                                                                     // 226\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}