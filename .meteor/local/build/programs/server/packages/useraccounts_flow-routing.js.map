{"version":3,"sources":["meteor://ðŸ’»app/packages/useraccounts_flow-routing/lib/core.js"],"names":[],"mappingsfile":"/packages/useraccounts_flow-routing.js","sourcesContent":["/* global\n  AccountsTemplates: false,\n  BlazeLayout: false,\n  FlowRouter: false\n*/\n'use strict';\n\n// ---------------------------------------------------------------------------------\n\n// Patterns for methods\" parameters\n\n// ---------------------------------------------------------------------------------\n\n// Add new configuration options\n_.extend(AccountsTemplates.CONFIG_PAT, {\n  defaultLayoutType: Match.Optional(String),\n  defaultLayout: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n  defaultTemplate: Match.Optional(String),\n  defaultLayoutRegions: Match.Optional(Object),\n  defaultContentRegion: Match.Optional(String),\n  renderLayout: Match.Optional(Object),\n  contentRange: Match.Optional(String),\n});\n\n// Route configuration pattern to be checked with check\nvar ROUTE_PAT = {\n  name: Match.Optional(String),\n  path: Match.Optional(String),\n  template: Match.Optional(String),\n  layoutTemplate: Match.Optional(String),\n  renderLayout: Match.Optional(Object),\n  contentRange: Match.Optional(String),\n  redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n};\n\n/*\n  Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the\n  following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);\n    name:           String (optional). A unique route\"s name to be passed to iron-router\n    path:           String (optional). A unique route\"s path to be passed to iron-router\n    template:       String (optional). The name of the template to be rendered\n    layoutTemplate: String (optional). The name of the layout to be used\n    redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/\n\n\n// Allowed routes along with theirs default configuration values\nAccountsTemplates.ROUTE_DEFAULT = {\n  changePwd:      { name: \"atChangePwd\",      path: \"/change-password\"},\n  enrollAccount:  { name: \"atEnrollAccount\",  path: \"/enroll-account\"},\n  ensureSignedIn: { name: \"atEnsureSignedIn\", path: null},\n  forgotPwd:      { name: \"atForgotPwd\",      path: \"/forgot-password\"},\n  resetPwd:       { name: \"atResetPwd\",       path: \"/reset-password\"},\n  signIn:         { name: \"atSignIn\",         path: \"/sign-in\"},\n  signUp:         { name: \"atSignUp\",         path: \"/sign-up\"},\n  verifyEmail:    { name: \"atVerifyEmail\",    path: \"/verify-email\"},\n  resendVerificationEmail: { name: \"atResendVerificationEmail\", path: \"/send-again\"}\n};\n\n// Current configuration values\nAccountsTemplates.options.defaultLayoutRegions = {};\n// Redirects\nAccountsTemplates.options.homeRoutePath = \"/\";\nAccountsTemplates.options.redirectTimeout = 2000; // 2 seconds\n\n// Known routes used to filter out previous path for redirects...\nAccountsTemplates.knownRoutes = [];\n\n// Configured routes\nAccountsTemplates.routes = {};\n\nAccountsTemplates.configureRoute = function(route, options) {\n  check(route, String);\n  check(options, Match.OneOf(undefined, Match.ObjectIncluding(ROUTE_PAT)));\n  options = _.clone(options);\n  // Route Configuration can be done only before initialization\n  if (this._initialized) {\n    throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");\n  }\n  // Only allowed routes can be configured\n  if (!(route in this.ROUTE_DEFAULT)) {\n    throw new Error(\"Unknown Route!\");\n  }\n  // Allow route configuration only once\n  if (route in this.routes) {\n    throw new Error(\"Route already configured!\");\n  }\n\n  // Possibly adds a initial / to the provided path\n  if (options && options.path && options.path[0] !== \"/\") {\n    options.path = \"/\" + options.path;\n  }\n\n  // Updates the current configuration\n  options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);\n\n  // Store route options\n  this.routes[route] = options;\n\n  // Known routes are used to filter out previous path for redirects...\n  AccountsTemplates.knownRoutes.push(options.name);\n\n  if (Meteor.isServer) {\n    // Configures \"reset password\" email link\n    if (route === \"resetPwd\") {\n      var resetPwdPath = options.path.substr(1);\n      Accounts.urls.resetPassword = function(token) {\n        return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);\n      };\n    }\n    // Configures \"enroll account\" email link\n    if (route === \"enrollAccount\") {\n      var enrollAccountPath = options.path.substr(1);\n      Accounts.urls.enrollAccount = function(token) {\n        return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);\n      };\n    }\n    // Configures \"verify email\" email link\n    if (route === \"verifyEmail\") {\n      var verifyEmailPath = options.path.substr(1);\n      Accounts.urls.verifyEmail = function(token) {\n        return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);\n      };\n    }\n  }\n\n  if (route === \"ensureSignedIn\") {\n    return;\n  }\n  if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange) {\n    throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");\n  }\n  if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink) {\n    throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");\n  }\n  if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation) {\n    throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");\n  }\n\n  // Use BlazeLayout by default\n  var defaultLayoutType = AccountsTemplates.options.defaultLayoutType || 'blaze';\n  // fullPageAtForm template unless user specified a different site-wide default\n  var defaultTemplate = AccountsTemplates.options.defaultTemplate || \"fullPageAtForm\";\n  // Determines the default layout to be used in case no specific one is\n  // specified for single routes\n  var defaultLayout = AccountsTemplates.options.defaultLayout;\n  var defaultLayoutRegions = AccountsTemplates.options.defaultLayoutRegions;\n  var defaultContentRegion = AccountsTemplates.options.defaultContentRegion;\n\n  var name = options.name; // Default provided...\n  var path = options.path; // Default provided...\n  var layoutType = options.layoutType || defaultLayoutType;\n  var template = options.template || defaultTemplate;\n  var layoutTemplate = options.layoutTemplate || defaultLayout;\n  var contentRegion = options.contentRegion || defaultContentRegion;\n  var layoutRegions = _.clone(options.layoutRegions || defaultLayoutRegions || {});\n\n  if (layoutType === \"blaze\") {\n\n    // Ensure that we have the required packages to render Blaze templates\n\n    if (Package['kadira:blaze-layout']) {\n      var BlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;\n    } else {\n      throw new Error(\"useraccounts:flow-routing requires that your project includes kadira:blaze-layout package.\");\n    }\n\n    // Strings are assumed to be Blaze template names\n    layoutRegions[contentRegion] = template;\n  }\n\n  if (layoutType === \"blaze-to-react\") {\n\n    // Ensure that we have the required packages to render Blaze templates\n    //\n    // For now we need to render the main template using BlazeToReact\n\n    if (Package['react-runtime']) {\n      var React = Package['react-runtime'].React;\n    } else {\n      throw new Error(\"layoutTemplate is a React element but React runtime package is not found\");\n    }\n\n    if (Package['kadira:react-layout']) {\n      var ReactLayout = Package['kadira:react-layout'].ReactLayout;\n    } else {\n      throw new Error(\"useraccounts:flow-routing requires that your project includes kadira:react-layout package.\");\n    }\n\n    if (Package['gwendall:blaze-to-react']) {\n      var BlazeToReact = Package['gwendall:blaze-to-react'].BlazeToReact;\n    } else {\n      throw new Error(\"useraccounts:flow-routing requires that your project includes the gwendall:blaze-to-react package.\");\n    }\n\n    layoutRegions[contentRegion] = React.createElement(BlazeToReact, { blazeTemplate: template });\n  }\n\n  function doLayout() {\n    if (layoutType === \"blaze-to-react\") {\n\n      // The layout template is a React Class.\n      // We need to render using ReactLayout and BlazeToReact\n\n      ReactLayout.render(layoutTemplate, layoutRegions);\n    } else {\n      // Render using BlazeLayout\n      BlazeLayout.render(layoutTemplate, layoutRegions);\n    }\n  }\n\n  // Possibly adds token parameter\n  if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)) {\n    path += \"/:paramToken\";\n    if (route === \"verifyEmail\") {\n      FlowRouter.route(path, {\n        name: name,\n        triggersEnter: [\n          function() {\n            AccountsTemplates.setState(route);\n            AccountsTemplates.setDisabled(true);\n          }\n        ],\n        action: function(params) {\n          doLayout();\n\n          var token = params.paramToken;\n          if (Meteor.isClient) {\n             Accounts.verifyEmail(token, function(error) {\n               AccountsTemplates.setDisabled(false);\n               AccountsTemplates.submitCallback(error, route, function() {\n                 AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);\n               });\n             });\n          }\n        }\n      });\n    } else {\n      FlowRouter.route(path, {\n        name: name,\n        triggersEnter: [\n          function() {\n            AccountsTemplates.setState(route);\n          }\n        ],\n        action: function(params) {\n          doLayout();\n        }\n      });\n    }\n  } else {\n    FlowRouter.route(path, {\n      name: name,\n      triggersEnter: [\n        function() {\n          var redirect = false;\n          if (route === 'changePwd') {\n            if (!Meteor.loggingIn() && !Meteor.userId()) {\n              redirect = true;\n            }\n          } else if (Meteor.userId()) {\n            redirect = true;\n          }\n          if (redirect) {\n            AccountsTemplates.postSubmitRedirect(route);\n          } else {\n            AccountsTemplates.setState(route);\n          }\n        }\n      ],\n      action: function() {\n        doLayout();\n      }\n    });\n  }\n};\n\n\nAccountsTemplates.getRouteName = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].name;\n  }\n  return null;\n};\n\nAccountsTemplates.getRoutePath = function(route) {\n  if (route in this.routes) {\n    return this.routes[route].path;\n  }\n  return \"#\";\n};\n"]}