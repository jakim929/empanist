{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed_geocoder/geocoder.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/aldeed_geocoder.js","sourcesContent":["var geocoder = Npm.require('node-geocoder');\n\n// backwards compatibility\nif (typeof Meteor.wrapAsync === \"undefined\") {\n  Meteor.wrapAsync = Meteor._wrapAsync;\n}\n\nGeoCoder = function geoCoderConstructor(options) {\n  var self = this;\n  self.options = _.extend({\n    geocoderProvider: 'google',\n    httpAdapter: 'http'\n  }, options || {});\n};\n\nvar gc = function (address, options, callback) {\n  var g = geocoder(options.geocoderProvider, options.httpAdapter, options);\n  g.geocode(address, callback);\n};\n\nGeoCoder.prototype.geocode = function geoCoderGeocode(address, callback) {\n  if (callback) {\n    callback = Meteor.bindEnvironment(callback, function (error) {\n      if (error) throw error;\n    });\n    gc(address, this.options, callback);\n  } else {\n    return Meteor.wrapAsync(gc)(address, this.options);\n  }\n};\n\nvar rv = function (lat, lng, options, callback) {\n  var g = geocoder(options.geocoderProvider, options.httpAdapter, options);\n  g.reverse({lat: lat, lon: lng}, callback);\n};\n\nGeoCoder.prototype.reverse = function geoCoderReverse(lat, lng, callback) {\n  if (callback) {\n    callback = Meteor.bindEnvironment(callback, function (error) {\n      if (error) throw error;\n    });\n    rv(lat, lng, this.options, callback);\n  } else {\n    return Meteor.wrapAsync(rv)(lat, lng, this.options);\n  }\n};\n"]}