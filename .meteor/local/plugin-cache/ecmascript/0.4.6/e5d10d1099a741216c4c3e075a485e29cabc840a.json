{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:core/lib/engines/mongo-db.js","filenameRelative":"/packages/easysearch:core/lib/engines/mongo-db.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:core/lib/engines/mongo-db.js.map","sourceFileName":"/packages/easysearch:core/lib/engines/mongo-db.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"mongo-db"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications\n * are handled within the Engine.\n *\n * @type {MongoDBEngine}\n */\nMongoDBEngine = function (_ReactiveEngine) {\n  (0, _inherits3['default'])(MongoDBEngine, _ReactiveEngine);\n\n  function MongoDBEngine() {\n    (0, _classCallCheck3['default'])(this, MongoDBEngine);\n    return (0, _possibleConstructorReturn3['default'])(this, _ReactiveEngine.apply(this, arguments));\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n  MongoDBEngine.prototype.defaultConfiguration = function defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _ReactiveEngine.prototype.defaultConfiguration.call(this));\n  };\n\n  /**\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.\n   *\n   * @param {Object} engineScope Scope of the engine\n   *\n   * @returns {Object}\n   */\n\n\n  MongoDBEngine.defaultMongoConfiguration = function defaultMongoConfiguration(engineScope) {\n    return {\n      aggregation: '$or',\n      selector: function selector(searchObject, options, aggregation) {\n        var selector = {};\n\n        selector[aggregation] = [];\n\n        _.each(searchObject, function (searchString, field) {\n          var fieldSelector = engineScope.callConfigMethod('selectorPerField', field, searchString, options);\n\n          if (fieldSelector) {\n            selector[aggregation].push(fieldSelector);\n          }\n        });\n\n        return selector;\n      },\n      selectorPerField: function selectorPerField(field, searchString) {\n        var selector = {};\n\n        selector[field] = { '$regex': '.*' + searchString + '.*', '$options': 'i' };\n\n        return selector;\n      },\n      sort: function sort(searchObject, options) {\n        return options.index.fields;\n      }\n    };\n  };\n\n  /**\n   * Return the find options for the mongo find query.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n\n\n  MongoDBEngine.prototype.getFindOptions = function getFindOptions(searchDefinition, options) {\n    return {\n      sort: this.callConfigMethod('sort', searchDefinition, options),\n      limit: options.search.limit,\n      skip: options.search.skip,\n      fields: this.callConfigMethod('fields', searchDefinition, options)\n    };\n  };\n\n  /**\n   * Return the reactive search cursor.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n\n\n  MongoDBEngine.prototype.getSearchCursor = function getSearchCursor(searchDefinition, options) {\n    var selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),\n        findOptions = this.getFindOptions(searchDefinition, options),\n        collection = options.index.collection;\n\n    check(options, Object);\n    check(selector, Object);\n    check(findOptions, Object);\n\n    return new Cursor(collection.find(selector, findOptions), collection.find(selector).count());\n  };\n\n  return MongoDBEngine;\n}(ReactiveEngine);","ast":null,"map":{"version":3,"sources":["/packages/easysearch:core/lib/engines/mongo-db.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA,0BAME,oBANF,mCAMyB;AACrB,WAAO,EAAE,QAAF,CAAW,EAAX,EAAe,cAAc,yBAAd,CAAwC,IAAxC,CAAf,EAA8D,0BAAM,oBAAN,WAA9D,CAAP;AACD,GARH;;;;;;;;;;;AAAA,gBAiBS,yBAjBT,sCAiBmC,WAjBnC,EAiBgD;AAC5C,WAAO;AACL,mBAAa,KADR;AAEL,cAFK,oBAEI,YAFJ,EAEkB,OAFlB,EAE2B,WAF3B,EAEwC;AAC3C,YAAI,WAAW,EAAf;;AAEA,iBAAS,WAAT,IAAwB,EAAxB;;AAEA,UAAE,IAAF,CAAO,YAAP,EAAqB,UAAC,YAAD,EAAe,KAAf,EAAyB;AAC5C,cAAI,gBAAgB,YAAY,gBAAZ,CAClB,kBADkB,EACE,KADF,EACS,YADT,EACuB,OADvB,CAApB;;AAIA,cAAI,aAAJ,EAAmB;AACjB,qBAAS,WAAT,EAAsB,IAAtB,CAA2B,aAA3B;AACD;AACF,SARD;;AAUA,eAAO,QAAP;AACD,OAlBI;AAmBL,sBAnBK,4BAmBY,KAnBZ,EAmBmB,YAnBnB,EAmBiC;AACpC,YAAI,WAAW,EAAf;;AAEA,iBAAS,KAAT,IAAkB,EAAE,iBAAgB,YAAhB,OAAF,EAAoC,YAAa,GAAjD,EAAlB;;AAEA,eAAO,QAAP;AACD,OAzBI;AA0BL,UA1BK,gBA0BA,YA1BA,EA0Bc,OA1Bd,EA0BuB;AAC1B,eAAO,QAAQ,KAAR,CAAc,MAArB;AACD;AA5BI,KAAP;AA8BD,GAhDH;;;;;;;;;;AAAA,0BAwDE,cAxDF,2BAwDiB,gBAxDjB,EAwDmC,OAxDnC,EAwD4C;AACxC,WAAO;AACL,YAAM,KAAK,gBAAL,CAAsB,MAAtB,EAA8B,gBAA9B,EAAgD,OAAhD,CADD;AAEL,aAAO,QAAQ,MAAR,CAAe,KAFjB;AAGL,YAAM,QAAQ,MAAR,CAAe,IAHhB;AAIL,cAAQ,KAAK,gBAAL,CAAsB,QAAtB,EAAgC,gBAAhC,EAAkD,OAAlD;AAJH,KAAP;AAMD,GA/DH;;;;;;;;;;AAAA,0BAuEE,eAvEF,4BAuEkB,gBAvElB,EAuEoC,OAvEpC,EAuE6C;AACzC,QAAI,WAAW,KAAK,gBAAL,CAAsB,UAAtB,EAAkC,gBAAlC,EAAoD,OAApD,EAA6D,KAAK,MAAL,CAAY,WAAzE,CAAf;AAAA,QACE,cAAc,KAAK,cAAL,CAAoB,gBAApB,EAAsC,OAAtC,CADhB;AAAA,QAEE,aAAa,QAAQ,KAAR,CAAc,UAF7B;;AAIA,UAAM,OAAN,EAAe,MAAf;AACA,UAAM,QAAN,EAAgB,MAAhB;AACA,UAAM,WAAN,EAAmB,MAAnB;;AAEA,WAAO,IAAI,MAAJ,CACL,WAAW,IAAX,CAAgB,QAAhB,EAA0B,WAA1B,CADK,EAEL,WAAW,IAAX,CAAgB,QAAhB,EAA0B,KAA1B,EAFK,CAAP;AAID,GApFH;;AAAA;AAAA,EAA4C,cAA5C","file":"/packages/easysearch:core/lib/engines/mongo-db.js.map","sourcesContent":["/**\n * The MongoDBEngine lets you search the index on the server side with MongoDB. Subscriptions and publications\n * are handled within the Engine.\n *\n * @type {MongoDBEngine}\n */\nMongoDBEngine = class MongoDBEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Default mongo configuration, used in constructor and MinimongoEngine to get the configuration.\n   *\n   * @param {Object} engineScope Scope of the engine\n   *\n   * @returns {Object}\n   */\n  static defaultMongoConfiguration(engineScope) {\n    return {\n      aggregation: '$or',\n      selector(searchObject, options, aggregation) {\n        let selector = {};\n\n        selector[aggregation] = [];\n\n        _.each(searchObject, (searchString, field) => {\n          let fieldSelector = engineScope.callConfigMethod(\n            'selectorPerField', field, searchString, options\n          );\n\n          if (fieldSelector) {\n            selector[aggregation].push(fieldSelector);\n          }\n        });\n\n        return selector;\n      },\n      selectorPerField(field, searchString) {\n        let selector = {};\n\n        selector[field] = { '$regex' : `.*${searchString}.*`, '$options' : 'i'};\n\n        return selector\n      },\n      sort(searchObject, options) {\n        return options.index.fields;\n      }\n    };\n  }\n\n  /**\n   * Return the find options for the mongo find query.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getFindOptions(searchDefinition, options) {\n    return {\n      sort: this.callConfigMethod('sort', searchDefinition, options),\n      limit: options.search.limit,\n      skip: options.search.skip,\n      fields: this.callConfigMethod('fields', searchDefinition, options)\n    };\n  }\n\n  /**\n   * Return the reactive search cursor.\n   *\n   * @param {String} searchDefinition Search definition\n   * @param {Object} options          Search and index options\n   */\n  getSearchCursor(searchDefinition, options) {\n    let selector = this.callConfigMethod('selector', searchDefinition, options, this.config.aggregation),\n      findOptions = this.getFindOptions(searchDefinition, options),\n      collection = options.index.collection;\n\n    check(options, Object);\n    check(selector, Object);\n    check(findOptions, Object);\n\n    return new Cursor(\n      collection.find(selector, findOptions),\n      collection.find(selector).count()\n    );\n  }\n};\n"]},"hash":"e5d10d1099a741216c4c3e075a485e29cabc840a"}
