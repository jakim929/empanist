{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/aldeed:template-extension/lib/hooks.js","filenameRelative":"/packages/aldeed:template-extension/lib/hooks.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/aldeed:template-extension/lib/hooks.js.map","sourceFileName":"/packages/aldeed:template-extension/lib/hooks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"hooks"},"ignored":false,"code":"Hooks = {\n  global: {\n    created: [],\n    rendered: [],\n    destroyed: []\n  },\n  master: {\n    created: function () {\n      function created() {\n        Hooks.runGlobal('created', this, arguments);\n      }\n\n      return created;\n    }(),\n    rendered: function () {\n      function rendered() {\n        Hooks.runGlobal('rendered', this, arguments);\n      }\n\n      return rendered;\n    }(),\n    destroyed: function () {\n      function destroyed() {\n        Hooks.runGlobal('destroyed', this, arguments);\n      }\n\n      return destroyed;\n    }()\n  }\n};\n\nHooks.addGlobal = function (template) {\n  // For each hookType, define the hooks for this template.\n  // Since we might call this multiple times from startup code\n  // and other functions, make sure we do it only once.\n  // Doing it twice would create an infinite loop of self-calling\n  // hooks.\n  if (!template._hasTemplateExtensionMasterHooks) {\n    template.onCreated(Hooks.master.created);\n    template.onRendered(Hooks.master.rendered);\n    template.onDestroyed(Hooks.master.destroyed);\n\n    template._hasTemplateExtensionMasterHooks = true;\n  }\n};\n\nHooks.runGlobal = function (type, template, args) {\n  for (var _iterator = Hooks.global[type], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var hook = _ref;\n\n    hook.apply(template, args);\n  }\n};","ast":null,"map":{"version":3,"sources":["/packages/aldeed:template-extension/lib/hooks.js"],"names":[],"mappings":"AAAA,QAAQ;AACN,UAAQ;AACN,aAAS,EADH;AAEN,cAAU,EAFJ;AAGN,eAAW;AAHL,GADF;AAMN,UAAQ;AACN;AAAS,yBAAY;AACnB,cAAM,SAAN,CAAgB,SAAhB,EAA2B,IAA3B,EAAiC,SAAjC;AACD;;AAFD;AAAA,OADM;AAIN;AAAU,0BAAY;AACpB,cAAM,SAAN,CAAgB,UAAhB,EAA4B,IAA5B,EAAkC,SAAlC;AACD;;AAFD;AAAA,OAJM;AAON;AAAW,2BAAY;AACrB,cAAM,SAAN,CAAgB,WAAhB,EAA6B,IAA7B,EAAmC,SAAnC;AACD;;AAFD;AAAA;AAPM;AANF,CAAR;;AAmBA,MAAM,SAAN,GAAkB,UAAC,QAAD,EAAc;;;;;;AAM9B,MAAI,CAAC,SAAS,gCAAd,EAAgD;AAC9C,aAAS,SAAT,CAAmB,MAAM,MAAN,CAAa,OAAhC;AACA,aAAS,UAAT,CAAoB,MAAM,MAAN,CAAa,QAAjC;AACA,aAAS,WAAT,CAAqB,MAAM,MAAN,CAAa,SAAlC;;AAEA,aAAS,gCAAT,GAA4C,IAA5C;AACD;AACF,CAbD;;AAeA,MAAM,SAAN,GAAkB,UAAC,IAAD,EAAO,QAAP,EAAiB,IAAjB,EAA0B;AAC1C,uBAAiB,MAAM,MAAN,CAAa,IAAb,CAAjB,kHAAqC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,QAA5B,IAA4B;;AACnC,SAAK,KAAL,CAAW,QAAX,EAAqB,IAArB;AACD;AACF,CAJD","file":"/packages/aldeed:template-extension/lib/hooks.js.map","sourcesContent":["Hooks = {\n  global: {\n    created: [],\n    rendered: [],\n    destroyed: []\n  },\n  master: {\n    created: function () {\n      Hooks.runGlobal('created', this, arguments);\n    },\n    rendered: function () {\n      Hooks.runGlobal('rendered', this, arguments);\n    },\n    destroyed: function () {\n      Hooks.runGlobal('destroyed', this, arguments);\n    }\n  }\n};\n\nHooks.addGlobal = (template) => {\n  // For each hookType, define the hooks for this template.\n  // Since we might call this multiple times from startup code\n  // and other functions, make sure we do it only once.\n  // Doing it twice would create an infinite loop of self-calling\n  // hooks.\n  if (!template._hasTemplateExtensionMasterHooks) {\n    template.onCreated(Hooks.master.created);\n    template.onRendered(Hooks.master.rendered);\n    template.onDestroyed(Hooks.master.destroyed);\n    \n    template._hasTemplateExtensionMasterHooks = true;\n  }\n};\n\nHooks.runGlobal = (type, template, args) => {\n  for (let hook of Hooks.global[type]) {\n    hook.apply(template, args);\n  }\n};\n"]},"hash":"f459e2d05809ecdbe325deaa401b16658fc800af"}
