{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:core/lib/core/engine.js","filenameRelative":"/packages/easysearch:core/lib/core/engine.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:core/lib/core/engine.js.map","sourceFileName":"/packages/easysearch:core/lib/core/engine.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"engine"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * An Engine is the technology used for searching with EasySearch, with\n * customizable configuration to how it interacts with the data from the Index.\n *\n * @type {Engine}\n */\nEngine = function () {\n  /**\n   * Constructor\n   *\n   * @param {Object} config configuration\n   *\n   * @constructor\n   */\n\n  function Engine() {\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    (0, _classCallCheck3['default'])(this, Engine);\n\n    if (this.constructor === Engine) {\n      throw new Error('Cannot initialize instance of Engine');\n    }\n\n    if (!_.isFunction(this.search)) {\n      throw new Error('Engine needs to implement search method');\n    }\n\n    this.config = _.defaults({}, config, this.defaultConfiguration());\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n\n  Engine.prototype.defaultConfiguration = function defaultConfiguration() {\n    return {};\n  };\n\n  /**\n   * Call a configuration method with the engine scope.\n   *\n   * @param {String} methodName Method name\n   * @param {Object} args       Arguments for the method\n   *\n   * @returns {*}\n   */\n\n\n  Engine.prototype.callConfigMethod = function callConfigMethod(methodName) {\n    check(methodName, String);\n\n    var func = this.config[methodName];\n\n    if (func) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return func.apply(this, args);\n    }\n  };\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n\n\n  Engine.prototype.checkSearchParam = function checkSearchParam(search) {\n    check(search, String);\n  };\n\n  /**\n   *Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuraction\n   */\n\n\n  Engine.prototype.onIndexCreate = function onIndexCreate(indexConfig) {\n    if (!indexConfig.allowedFields) {\n      indexConfig.allowedFields = indexConfig.fields;\n    }\n  };\n\n  return Engine;\n}();","ast":null,"map":{"version":3,"sources":["/packages/easysearch:core/lib/core/engine.js"],"names":[],"mappings":";;;;;;;;;;;;AAMA;;;;;;;;;AAQE,oBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AACvB,QAAI,KAAK,WAAL,KAAqB,MAAzB,EAAiC;AAC/B,YAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAI,CAAC,EAAE,UAAF,CAAa,KAAK,MAAlB,CAAL,EAAgC;AAC9B,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,SAAK,MAAL,GAAc,EAAE,QAAF,CAAW,EAAX,EAAe,MAAf,EAAuB,KAAK,oBAAL,EAAvB,CAAd;AACD;;;;;;;;;AAlBH,mBAyBE,oBAzBF,mCAyByB;AACrB,WAAO,EAAP;AACD,GA3BH;;;;;;;;;;;;AAAA,mBAqCE,gBArCF,6BAqCmB,UArCnB,EAqCwC;AACpC,UAAM,UAAN,EAAkB,MAAlB;;AAEA,QAAI,OAAO,KAAK,MAAL,CAAY,UAAZ,CAAX;;AAEA,QAAI,IAAJ,EAAU;AAAA,wCALoB,IAKpB;AALoB,YAKpB;AAAA;;AACR,aAAO,KAAK,KAAL,CAAW,IAAX,EAAiB,IAAjB,CAAP;AACD;AACF,GA7CH;;;;;;;;;AAAA,mBAoDE,gBApDF,6BAoDmB,MApDnB,EAoD2B;AACvB,UAAM,MAAN,EAAc,MAAd;AACD,GAtDH;;;;;;;;;AAAA,mBA6DE,aA7DF,0BA6DgB,WA7DhB,EA6D6B;AACzB,QAAI,CAAC,YAAY,aAAjB,EAAgC;AAC9B,kBAAY,aAAZ,GAA4B,YAAY,MAAxC;AACD;AACF,GAjEH;;AAAA;AAAA","file":"/packages/easysearch:core/lib/core/engine.js.map","sourcesContent":["/**\n * An Engine is the technology used for searching with EasySearch, with\n * customizable configuration to how it interacts with the data from the Index.\n *\n * @type {Engine}\n */\nEngine = class Engine {\n  /**\n   * Constructor\n   *\n   * @param {Object} config configuration\n   *\n   * @constructor\n   */\n  constructor(config = {}) {\n    if (this.constructor === Engine) {\n      throw new Error('Cannot initialize instance of Engine');\n    }\n\n    if (!_.isFunction(this.search)) {\n      throw new Error('Engine needs to implement search method');\n    }\n\n    this.config = _.defaults({}, config, this.defaultConfiguration());\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return {};\n  }\n\n  /**\n   * Call a configuration method with the engine scope.\n   *\n   * @param {String} methodName Method name\n   * @param {Object} args       Arguments for the method\n   *\n   * @returns {*}\n   */\n  callConfigMethod(methodName, ...args) {\n    check(methodName, String);\n\n    let func = this.config[methodName];\n\n    if (func) {\n      return func.apply(this, args);\n    }\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n\n  /**\n   *Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuraction\n   */\n  onIndexCreate(indexConfig) {\n    if (!indexConfig.allowedFields) {\n      indexConfig.allowedFields = indexConfig.fields;\n    }\n  }\n};\n"]},"hash":"eb4b0650bae829ad89ffb76f61ffc6f235c0a89e"}
