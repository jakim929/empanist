{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../collections/musicProfiles.js","imported":["MusicProfiles"],"specifiers":[{"kind":"named","imported":"MusicProfiles","local":"MusicProfiles"}]},{"source":"../collections/accompanistProfiles.js","imported":["AccompanistProfiles"],"specifiers":[{"kind":"named","imported":"AccompanistProfiles","local":"AccompanistProfiles"}]},{"source":"../collections/basicProfiles.js","imported":["BasicProfiles"],"specifiers":[{"kind":"named","imported":"BasicProfiles","local":"BasicProfiles"}]},{"source":"../collections/competitions.js","imported":["MusicCompetitions"],"specifiers":[{"kind":"named","imported":"MusicCompetitions","local":"MusicCompetitions"}]},{"source":"../collections/transactions.js","imported":["Transactions"],"specifiers":[{"kind":"named","imported":"Transactions","local":"Transactions"}]},{"source":"../collections/testData.js","imported":["TestAccountData"],"specifiers":[{"kind":"named","imported":"TestAccountData","local":"TestAccountData"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/main.js","filenameRelative":"/client/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/main.js.map","sourceFileName":"/client/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var MusicProfiles;module.import('../collections/musicProfiles.js',{\"MusicProfiles\":function(v){MusicProfiles=v}});var AccompanistProfiles;module.import('../collections/accompanistProfiles.js',{\"AccompanistProfiles\":function(v){AccompanistProfiles=v}});var BasicProfiles;module.import('../collections/basicProfiles.js',{\"BasicProfiles\":function(v){BasicProfiles=v}});var MusicCompetitions;module.import('../collections/competitions.js',{\"MusicCompetitions\":function(v){MusicCompetitions=v}});var Transactions;module.import('../collections/transactions.js',{\"Transactions\":function(v){Transactions=v}});var TestAccountData;module.import('../collections/testData.js',{\"TestAccountData\":function(v){TestAccountData=v}});\n\n\n\n\n\n\n\nwindow.MusicProfiles = MusicProfiles;\nwindow.AccompanistProfiles = AccompanistProfiles;\nwindow.BasicProfiles = BasicProfiles;\nwindow.MusicCompetitions = MusicCompetitions;\nwindow.Transactions = Transactions;\n\n// Helper functions\n\nfunction wrapDoc(obj) {\n  if (obj) {\n    return { field: \"update\", doc: obj };\n  } else {\n    return { field: \"insert\", doc: null };\n  }\n}\n\n// Javascript Component Initialization\n\nTemplate.CollapsibleStructure.onRendered(function () {\n  $('.collapsible').collapsible({\n    accordion: false\n  });\n});\n\nTemplate.TabStructure.onRendered(function () {\n  $('ul.tabs').tabs();\n});\n\nTemplate.login.onRendered(function () {\n  $(\".dropdown-button\").dropdown({\n    inDuration: 300,\n    outDuration: 700,\n    belowOrigin: true,\n    alignment: 'right'\n  });\n});\n\n// On creation\n\nTemplate.MainLayout.onCreated(function () {\n  this.navbarFields = new ReactiveVar(['myProfile', 'accompanistDashboard', 'bookings']);\n});\n\n// ==Global Template Helpers==\n\n// Get Current User's Account\nTemplate.registerHelper('myAccount', function () {\n  return BasicProfiles.findOne({ userId: Meteor.userId() });\n});\n\n// Get Current User's Music Profile\nTemplate.registerHelper('myProfile', function () {\n  return MusicProfiles.findOne({ userId: Meteor.userId() });\n});\n\n// Get Current Route's Accompanist Profile\nTemplate.registerHelper('myAccompanistProfiles', function () {\n  return AccompanistProfiles.findOne({ Id: Meteor.userId() });\n});\n\nTemplate.registerHelper('routeAccount', function () {\n  return BasicProfiles.findOne({ userId: FlowRouter.getParam(\"profileId\") });\n});\n\n// Get Current Route's Music Profile\nTemplate.registerHelper('routeProfile', function () {\n  return MusicProfiles.findOne({ userId: FlowRouter.getParam(\"profileId\") });\n});\n\n// Get Current Route's Accompanist Profile\nTemplate.registerHelper('routeAccompanistProfiles', function () {\n  return AccompanistProfiles.findOne({ Id: FlowRouter.getParam(\"profileId\") });\n});\n\nTemplate.registerHelper('sentBookingRequests', function () {\n  return Transactions.find({ musician: Meteor.userId() }).fetch();\n});\n\nTemplate.registerHelper('receivedBookingRequests', function () {\n  return Transactions.find({ accompanist: Meteor.userId() }).fetch();\n});\n\nTemplate.registerHelper('accountById', function (id) {\n  return BasicProfiles.findOne({ userId: id });\n});\n\nTemplate.registerHelper('profileById', function (id) {\n  return MusicProfiles.findOne({ userId: id });\n});\n\nTemplate.registerHelper('accompanistProfileById', function (id) {\n  return AccompanistProfiles.findOne({ Id: id });\n});\n\nTemplate.registerHelper('routeTransaction', function () {\n  return Transactions.findOne({ _id: FlowRouter.getParam(\"transactionId\") });\n});\n\nTemplate.registerHelper('isOwnProfile', function () {\n  return FlowRouter.getParam(\"profileId\") == Meteor.userId();\n});\n\n// Get Elements of the Navbar Fields for the User\nTemplate.registerHelper('navbarFields', function () {\n  return Template.instance().navbarFields.get();\n});\n\n// Old Global Template Helpers\n\nTemplate.registerHelper('pendingTransactions', function (array) {\n  return array.filter(function (element, index, array) {\n    return element.status == \"Pending\";\n  });\n});\n\nTemplate.registerHelper('confirmedTransactions', function (array) {\n  return array.filter(function (element, index, array) {\n    return element.status == \"Confirmed\";\n  });\n});\n\nTemplate.registerHelper('completedTransactions', function (array) {\n  return array.filter(function (element, index, array) {\n    return element.status == \"Completed\";\n  });\n});\n\nTemplate.registerHelper('cancelledTransactions', function (array) {\n  return array.filter(function (element, index, array) {\n    return element.status == \"Completed\";\n  });\n});\n\nTemplate.registerHelper('arrayLength', function (array) {\n  return array.length;\n});\n\nTemplate.registerHelper('validId', function () {\n  // For now it is set to looking up in BasicProfiles instead of Meteor.users\n  // Makes it work with test data\n  // if (Meteor.users.findOne(FlowRouter.getParam(\"profileId\"))){\n\n  if (BasicProfiles.findOne({ userId: FlowRouter.getParam(\"profileId\") })) {\n    return true;\n  } else {\n    return false;\n  }\n});\n\nTemplate.registerHelper('defaultTransaction', function () {\n  return { musician: Meteor.userId(),\n    accompanist: FlowRouter.getParam(\"profileId\"),\n    status: 'Pending' };\n});\n\nTemplate.registerHelper('ownProfile', function () {\n  event.preventDefault();\n\n  return FlowRouter.getParam(\"profileId\") == Meteor.userId();\n});\n\nTemplate.registerHelper('userId', function () {\n  event.preventDefault();\n  return Meteor.userId();\n});\n\nTemplate.registerHelper('getProfileRoute', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? Meteor.userId() : arguments[0];\n\n  return \"/profile/\" + id;\n});\n\nTemplate.registerHelper('getBookingRoute', function (bookingId) {\n  return \"/bookingRequest/\" + bookingId;\n});\n\nTemplate.registerHelper('transactionsAsAccompanist', function () {\n  return Transactions.find({ accompanist: Meteor.userId() }).fetch();\n});\n\nTemplate.registerHelper('transactionsAsMusician', function () {\n  return Transactions.find({ musician: Meteor.userId() }).fetch();\n});\n\nTemplate.registerHelper('transactionsDoc', function () {\n  event.preventDefault();\n  var allTransactions = { asMusician: Transactions.find({ musician: Meteor.userId() }).fetch(),\n    asAccompanist: Transactions.find({ accompanist: Meteor.userId() }).fetch() };\n  return allTransactions;\n});\n\nTemplate.registerHelper('transactionById', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? FlowRouter.getParam(\"transactionId\") : arguments[0];\n\n  event.preventDefault();\n  // Only return if the user is the accompanist listed\n  return Transactions.findOne({ _id: id, accompanist: Meteor.userId() });\n});\n\nTemplate.registerHelper('profileDoc', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? FlowRouter.getParam(\"profileId\") : arguments[0];\n\n  event.preventDefault();\n  if (!id) {\n    id = Meteor.userId();\n  }\n  return wrapDoc(MusicProfiles.findOne({ userId: id }));\n});\n\nTemplate.registerHelper('accountDoc', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? FlowRouter.getParam(\"profileId\") : arguments[0];\n\n  event.preventDefault();\n  if (!id) {\n    id = Meteor.userId();\n  }\n  return wrapDoc(BasicProfiles.findOne({ userId: id }));\n});\n\nTemplate.registerHelper('accompanistProfileDoc', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? FlowRouter.getParam(\"profileId\") : arguments[0];\n\n  event.preventDefault();\n  if (!id) {\n    id = Meteor.userId();\n  }\n  return wrapDoc(AccompanistProfiles.findOne({ Id: Meteor.userId() }));\n});\n\nTemplate.registerHelper('musicCompetitionsDoc', function () {\n  event.preventDefault();\n  // array =  MusicCompetitions.find().fetch();\n  return [{ label: \"First Manhattan International Music Competition\", value: \"First Manhattan International Music Competition\" }];\n});\n\n// Local Template On Created\n\nTemplate.upsertMusicProfileForm.onCreated(function () {\n  this.formType = new ReactiveVar('insert');\n});\n\nTemplate.upsertBasicProfileForm.onCreated(function () {\n  this.formType = new ReactiveVar('insert');\n});\n\nTemplate.upsertAccompanistForm.onCreated(function () {\n  this.formType = new ReactiveVar('insert');\n});\n\n// Local Template Helpers\n\nTemplate.upsertMusicProfileForm.helpers({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentProfile: function () {\n    function currentProfile() {\n      var currentProfile = MusicProfiles.findOne({ userId: Meteor.userId() });\n      if (currentProfile) {\n        Template.instance().formType.set('update');\n        return currentProfile;\n      }\n    }\n\n    return currentProfile;\n  }(),\n\n  formType: function () {\n    function formType() {\n      var formType = Template.instance().formType.get();\n      return formType;\n    }\n\n    return formType;\n  }(),\n\n  instrumentList: function () {\n    function instrumentList() {\n      return [\"Voice\", \"Bagpipes\", \"Banjo\", \"Bass drum\", \"Bassoon\", \"Bell\", \"Bongo\", \"Castanets\", \"Cello\", \"Clarinet\", \"Clavichord\", \"Conga drum\", \"Contrabassoon\", \"Cornet\", \"Cymbals\", \"Double bass\", \"Dulcian\", \"Dynamophone\", \"Flute\", \"Flutophone\", \"Glockenspiel\", \"Gongs\", \"Guitar\", \"Harmonica\", \"Harp\", \"Harpsichord\", \"Lute\", \"Mandolin\", \"Maracas\", \"Metallophone\", \"Musical box\", \"Oboe\", \"Ondes-Martenot\", \"Piano\", \"Recorder\", \"Saxophone\", \"Shawm\", \"Snare drum\", \"Steel drum\", \"Tambourine\", \"Theremin\", \"Triangle\", \"Trombone\", \"Trumpet\", \"Tuba\", \"Ukulele\", \"Viola\", \"Violin\", \"Xylophone\", \"Zither\"].map(function (obj) {\n        return { label: obj, value: obj };\n      });\n    }\n\n    return instrumentList;\n  }()\n});\n\nTemplate.upsertBasicProfileForm.helpers({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentBasicProfile: function () {\n    function currentBasicProfile() {\n      var currentAccount = BasicProfiles.findOne({ userId: Meteor.userId() });\n      if (currentAccount) {\n        Template.instance().formType.set('update');\n        return currentAccount;\n      }\n    }\n\n    return currentBasicProfile;\n  }(),\n\n  formType: function () {\n    function formType() {\n      var formType = Template.instance().formType.get();\n      return formType;\n    }\n\n    return formType;\n  }()\n});\n\nTemplate.upsertAccompanistForm.helpers({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentAccompanistProfiles: function () {\n    function currentAccompanistProfiles() {\n      var currentAccompanistProfiles = AccompanistProfiles.findOne({ Id: Meteor.userId() });\n      if (currentAccompanistProfiles) {\n        Template.instance().formType.set('update');\n        return currentAccompanistProfiles;\n      }\n    }\n\n    return currentAccompanistProfiles;\n  }(),\n\n  formType: function () {\n    function formType() {\n      var formType = Template.instance().formType.get();\n      return formType;\n    }\n\n    return formType;\n  }()\n});\n\nTemplate.results.helpers({\n\n  accompanists: function () {\n    function accompanists() {\n      var coords = Session.get('coords');\n\n      //convert dates to dates that can be compared with Mongo schema\n      var sd = new Date(Session.get('start_date'));\n      var ed = new Date(Session.get('end_date'));\n\n      console.log(\"Terms you have Searched with\");\n      console.log(coords);\n      console.log(sd);\n      console.log(ed);\n\n      if (coords !== undefined && moment(sd).isValid() && moment(ed).isValid()) {\n        console.log(\"search all\");\n        return AccompanistProfiles.find({\n          loc: { $near: {\n              $geometry: { type: \"Point\", coordinates: coords },\n              $maxDistance: 20000\n            }\n          },\n          startDate: { $lte: sd, $lte: ed },\n          endDate: { $gte: sd, $gte: ed } }).fetch();\n      } else if (moment(sd).isValid() && moment(ed).isValid()) {\n        console.log(\"search sd and ed\");\n\n        return AccompanistProfiles.find({\n          startDate: { $lte: sd, $lte: ed },\n          endDate: { $gte: sd, $gte: ed } }).fetch();\n      } else if (coords !== undefined) {\n        console.log(\"search coords\");\n\n        return AccompanistProfiles.find({\n          loc: { $near: {\n              $geometry: { type: \"Point\", coordinates: coords },\n              $maxDistance: 20000\n            }\n          } }).fetch();\n      } else {\n        console.log(\"search null\");\n        return null;\n      }\n    }\n\n    return accompanists;\n  }(),\n\n  accompname: function () {\n    function accompname() {\n\n      // We use this helper inside the {{#each posts}} loop, so the context\n      // will be a post object. Thus, we can use this.authorId.\n      var names = BasicProfiles.findOne({ userId: this.Id });\n      //console.log(names)\n\n      return names;\n    }\n\n    return accompname;\n  }()\n\n});\n\n// Events\n\nTemplate.search.events({\n  'submit form': function () {\n    function submitForm() {\n\n      //Constants submitted from the Home search bar\n      // var address = event.target.address.value\n      // var start_date = event.target.start_date.value\n      // var end_date = event.target.end_date.value\n\n      var query = FlowRouter.getParam(\"queryParams\");\n      var address = query.address;\n      var start_date = query.start_date;\n      var end_date = query.end_date;\n\n      console.log(\"address\");\n\n      console.log(address);\n\n      if (address !== 0) {\n\n        console.log(\"Meteor call if worked\");\n\n        Meteor.call('getGeocode', address, function (err, result) {\n\n          console.log(\"Meteor call worked\");\n\n          if (result !== null) {\n\n            var lat = Number(result[0].latitude);\n            var lng = Number(result[0].longitude);\n            var coords = [lng, lat];\n\n            console.log(\"search session set in meteor.call\");\n            Session.set('coords', coords);\n            Session.set('start_date', start_date);\n            Session.set('end_date', end_date);\n          } else {\n            Session.set('start_date', start_date);\n            Session.set('end_date', end_date);\n          }\n        });\n      }\n\n      console.log(\"Form Submitted\");\n      // go to knew page here\n      FlowRouter.go('results');\n    }\n\n    return submitForm;\n  }()\n});\n\n// Template.results.helpers({\n\n//   accompanists: function() {\n//       var coords = Session.get('coords')\n\n//       //convert dates to dates that can be compared with Mongo schema\n//       var sd = new Date(Session.get('start_date'))\n//       var ed = new Date(Session.get('end_date'))\n\n//         console.log(\"Terms you have Searched with\")\n//         console.log(coords)\n//         console.log(sd)\n//         console.log(ed)\n\n//       if (coords !== undefined && moment(sd).isValid() && moment(ed).isValid()) {\n//         console.log(\"search all\")\n//         return AccompanistProfiles.find({\n//           loc:\n//             { $near :\n//               {\n//                 $geometry: { type: \"Point\",  coordinates: coords },\n//                 $maxDistance: 20000\n//               }\n//             },\n//           startDate:  {$lte: sd, $lte: ed},\n//           endDate: {$gte: sd, $gte: ed}}).fetch();\n\n//       }  else if (moment(sd).isValid() && moment(ed).isValid()){\n//         console.log(\"search sd and ed\")\n\n//         return AccompanistProfiles.find({\n//           startDate:  {$lte: sd, $lte: ed},\n//           endDate: {$gte: sd, $gte: ed}}).fetch();\n//       }\n\n//       else if (coords !== undefined){\n//         console.log(\"search coords\")\n\n//         return AccompanistProfiles.find({\n//           loc:\n//             { $near :\n//               {\n//                 $geometry: { type: \"Point\",  coordinates: coords },\n//                 $maxDistance: 20000\n//               }\n//             }}).fetch();\n//       }\n\n//       else {\n//         console.log(\"search null\")\n//         return null\n//       }\n//   },\n\n//     accompname: function() {\n\n//         // We use this helper inside the {{#each posts}} loop, so the context\n//         // will be a post object. Thus, we can use this.authorId.\n//         var names = BasicProfiles.findOne({userId: this.Id});\n//                 //console.log(names)\n\n//         return names\n//     }\n\n//     });\n\n// // Events\n\n// Template.search.events({\n// \t'submit form': function(){\n// \t    event.preventDefault();\n\n// \t    //Constants submitted from the Home search bar\n//       var address = event.target.address.value\n// \t   \tvar start_date = event.target.start_date.value\n// \t   \tvar end_date = event.target.end_date.value\n\n//       console.log(\"address\")\n\n//       console.log(address)\n\n//       if (address !== 0) {\n\n//         console.log(\"Meteor call if worked\")\n\n//         Meteor.call('getGeocode', address, function(err, result){\n\n//           console.log(\"Meteor call worked\")\n\n//           if (result !== null){\n\n//             var lat = Number(result[0].latitude);\n//             var lng = Number(result[0].longitude);\n//             var coords = [lng, lat];\n\n//             console.log(\"search session set in meteor.call\")\n//             Session.set('coords', coords)\n//             Session.set('start_date', start_date)\n//             Session.set('end_date', end_date)\n\n//           } else {\n//             Session.set('start_date', start_date)\n//               Session.set('end_date', end_date)\n\n//           }\n//       });\n//       }\n\n//       console.log(\"Form Submitted\")\n//       // go to knew page here\n//       FlowRouter.go('results');\n//   }\n// });\n\n// Google search autocomplete\nTemplate.search.events({\n  'click #autocomplete': function () {\n    function clickAutocomplete(e, search) {\n      initAutoComplete();\n    }\n\n    return clickAutocomplete;\n  }()\n});\n\nTemplate.NewAccompLayout.events({\n  'click #autocomplete': function () {\n    function clickAutocomplete(e, NewAccompLayout) {\n      initAutoComplete();\n    }\n\n    return clickAutocomplete;\n  }()\n});\n\nvar initAutoComplete = function initAutoComplete() {\n  var autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), { types: ['geocode'] });\n};\n\nTemplate.EditAccompanistProfiles.events({\n  'click button': function () {\n    function clickButton() {\n      Notifications.info('Test', 'Working Notification');\n    }\n\n    return clickButton;\n  }()\n});\n\nTemplate.BookingRequest.events({\n  'click button': function () {\n    function clickButton() {\n      Transactions.update({ _id: FlowRouter.getParam(\"transactionId\") }, { $set: { status: \"Confirmed\" } });\n      Notifications.info('Successful Confirmation', 'You successfully confirmed your booking!');\n    }\n\n    return clickButton;\n  }()\n});\n\nTemplate.makeAdmin.events({\n  'click button': function () {\n    function clickButton() {\n      userId = Meteor.userId();\n      Meteor.call('divinify', userId);\n    }\n\n    return clickButton;\n  }()\n});\n\n// For Debugging\nSimpleSchema.debug = true;","ast":null,"map":{"version":3,"sources":["/client/main.js"],"names":[],"mappings":"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","file":"/client/main.js.map","sourcesContent":["import { MusicProfiles } from '../collections/musicProfiles.js'\nimport { AccompanistProfiles } from '../collections/accompanistProfiles.js'\nimport { BasicProfiles } from '../collections/basicProfiles.js'\nimport { MusicCompetitions } from '../collections/competitions.js'\nimport { Transactions } from '../collections/transactions.js'\n\nimport { TestAccountData } from '../collections/testData.js'\n\nwindow.MusicProfiles = MusicProfiles\nwindow.AccompanistProfiles = AccompanistProfiles\nwindow.BasicProfiles = BasicProfiles\nwindow.MusicCompetitions = MusicCompetitions\nwindow.Transactions = Transactions\n\n// Helper functions\n\nfunction wrapDoc (obj) {\n  if (obj){\n    return {field: \"update\", doc: obj}\n  }else{\n    return {field: \"insert\", doc: null}\n  }\n}\n\n// Javascript Component Initialization\n\nTemplate.CollapsibleStructure.onRendered(function () {\n  $('.collapsible').collapsible({\n    accordion : false\n  });\n});\n\nTemplate.TabStructure.onRendered(function () {\n  $('ul.tabs').tabs();\n});\n\nTemplate.login.onRendered(function () {\n  $(\".dropdown-button\").dropdown({\n    inDuration: 300,\n    outDuration: 700,\n    belowOrigin: true,\n    alignment: 'right'\n  });\n});\n\n// On creation\n\nTemplate.MainLayout.onCreated(function (){\n  this.navbarFields = new ReactiveVar(['myProfile', 'accompanistDashboard','bookings'])\n});\n\n// ==Global Template Helpers==\n\n\n\n// Get Current User's Account\nTemplate.registerHelper('myAccount', () => {\n  return BasicProfiles.findOne({userId: Meteor.userId()});\n});\n\n// Get Current User's Music Profile\nTemplate.registerHelper('myProfile', () => {\n  return MusicProfiles.findOne({userId: Meteor.userId()});\n});\n\n// Get Current Route's Accompanist Profile\nTemplate.registerHelper('myAccompanistProfiles', () => {\n  return AccompanistProfiles.findOne({Id: Meteor.userId()});\n});\n\nTemplate.registerHelper('routeAccount', () => {\n  return BasicProfiles.findOne({userId: FlowRouter.getParam(\"profileId\")});\n});\n\n// Get Current Route's Music Profile\nTemplate.registerHelper('routeProfile', () => {\n  return MusicProfiles.findOne({userId: FlowRouter.getParam(\"profileId\")});\n});\n\n// Get Current Route's Accompanist Profile\nTemplate.registerHelper('routeAccompanistProfiles', () => {\n  return AccompanistProfiles.findOne({Id: FlowRouter.getParam(\"profileId\")});\n});\n\nTemplate.registerHelper('sentBookingRequests', () =>{\n  return Transactions.find({musician: Meteor.userId()}).fetch()\n});\n\nTemplate.registerHelper('receivedBookingRequests', () =>{\n  return Transactions.find({accompanist: Meteor.userId()}).fetch()\n});\n\nTemplate.registerHelper('accountById', (id) =>{\n  return BasicProfiles.findOne({userId: id})\n});\n\nTemplate.registerHelper('profileById', (id) =>{\n  return MusicProfiles.findOne({userId: id})\n});\n\nTemplate.registerHelper('accompanistProfileById', (id) =>{\n  return AccompanistProfiles.findOne({Id: id})\n});\n\nTemplate.registerHelper('routeTransaction', () =>{\n  return Transactions.findOne({_id: FlowRouter.getParam(\"transactionId\")})\n});\n\nTemplate.registerHelper('isOwnProfile', () => {\n  return FlowRouter.getParam(\"profileId\") == Meteor.userId();\n});\n\n\n// Get Elements of the Navbar Fields for the User\nTemplate.registerHelper('navbarFields', () => {\n  return Template.instance().navbarFields.get()\n});\n\n\n\n// Old Global Template Helpers\n\nTemplate.registerHelper('pendingTransactions', (array) =>{\n  return array.filter(function(element, index, array){\n    return element.status == \"Pending\"\n  })\n});\n\nTemplate.registerHelper('confirmedTransactions', (array) =>{\n  return array.filter(function(element, index, array){\n    return element.status == \"Confirmed\"\n  })\n});\n\nTemplate.registerHelper('completedTransactions', (array) =>{\n  return array.filter(function(element, index, array){\n    return element.status == \"Completed\"\n  })\n});\n\nTemplate.registerHelper('cancelledTransactions', (array) =>{\n  return array.filter(function(element, index, array){\n    return element.status == \"Completed\"\n  })\n});\n\n\nTemplate.registerHelper('arrayLength', (array) =>{\n  return array.length\n});\n\nTemplate.registerHelper('validId', () =>{\n  // For now it is set to looking up in BasicProfiles instead of Meteor.users\n  // Makes it work with test data\n  // if (Meteor.users.findOne(FlowRouter.getParam(\"profileId\"))){\n\n  if (BasicProfiles.findOne({userId: FlowRouter.getParam(\"profileId\")})){\n    return true\n  }else{\n    return false\n  }\n});\n\nTemplate.registerHelper('defaultTransaction', () => {\n  return {musician: Meteor.userId(),\n          accompanist: FlowRouter.getParam(\"profileId\"),\n          status: 'Pending'}\n});\n\nTemplate.registerHelper('ownProfile', () => {\n  event.preventDefault();\n\n  return (FlowRouter.getParam(\"profileId\") == Meteor.userId())\n});\n\nTemplate.registerHelper( 'userId', () => {\n    event.preventDefault();\n    return Meteor.userId();\n});\n\nTemplate.registerHelper( 'getProfileRoute', (id = Meteor.userId()) =>{\n  return \"/profile/\"+id\n});\n\nTemplate.registerHelper( 'getBookingRoute', (bookingId) =>{\n  return \"/bookingRequest/\"+bookingId\n});\n\nTemplate.registerHelper('transactionsAsAccompanist', () =>{\n  return Transactions.find({ accompanist: Meteor.userId()}).fetch();\n});\n\nTemplate.registerHelper('transactionsAsMusician', () =>{\n  return Transactions.find({ musician: Meteor.userId()}).fetch()\n});\n\nTemplate.registerHelper( 'transactionsDoc', () => {\n    event.preventDefault();\n    var allTransactions =\n      {asMusician: Transactions.find({ musician: Meteor.userId()}).fetch(),\n       asAccompanist: Transactions.find({ accompanist: Meteor.userId()}).fetch()}\n    return allTransactions;\n});\n\nTemplate.registerHelper( 'transactionById', (id = FlowRouter.getParam(\"transactionId\")) => {\n    event.preventDefault();\n    // Only return if the user is the accompanist listed\n    return Transactions.findOne({_id:id, accompanist: Meteor.userId()})\n});\n\nTemplate.registerHelper( 'profileDoc', (id = FlowRouter.getParam(\"profileId\")) => {\n    event.preventDefault();\n    if (!id) {\n      id = Meteor.userId();\n    }\n    return wrapDoc(MusicProfiles.findOne({ userId: id}));\n});\n\nTemplate.registerHelper( 'accountDoc', (id = FlowRouter.getParam(\"profileId\")) => {\n  \tevent.preventDefault();\n    if (!id) {\n      id = Meteor.userId();\n    }\n    return wrapDoc(BasicProfiles.findOne({ userId: id}));\n});\n\nTemplate.registerHelper( 'accompanistProfileDoc', (id = FlowRouter.getParam(\"profileId\")) => {\n    event.preventDefault();\n    if (!id) {\n      id = Meteor.userId();\n    }\n    return wrapDoc(AccompanistProfiles.findOne({ Id: Meteor.userId()}));\n});\n\nTemplate.registerHelper( 'musicCompetitionsDoc', () => {\n    event.preventDefault();\n    // array =  MusicCompetitions.find().fetch();\n    return [{label: \"First Manhattan International Music Competition\", value: \"First Manhattan International Music Competition\"}]\n});\n\n\n// Local Template On Created\n\nTemplate.upsertMusicProfileForm.onCreated(function() {\n  this.formType = new ReactiveVar('insert')\n});\n\nTemplate.upsertBasicProfileForm.onCreated(function() {\n  this.formType = new ReactiveVar('insert')\n});\n\nTemplate.upsertAccompanistForm.onCreated(function() {\n  this.formType = new ReactiveVar('insert')\n});\n\n// Local Template Helpers\n\nTemplate.upsertMusicProfileForm.helpers ({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentProfile: function () {\n    var currentProfile = MusicProfiles.findOne({ userId: Meteor.userId()});\n    if (currentProfile) {\n      Template.instance().formType.set('update');\n      return currentProfile\n    }\n  },\n\n  formType: function () {\n    var formType = Template.instance().formType.get();\n    return formType;\n  },\n\n  instrumentList: function () {\n    return [\"Voice\",\"Bagpipes\", \"Banjo\", \"Bass drum\", \"Bassoon\", \"Bell\", \"Bongo\", \"Castanets\", \"Cello\", \"Clarinet\", \"Clavichord\", \"Conga drum\", \"Contrabassoon\", \"Cornet\", \"Cymbals\", \"Double bass\", \"Dulcian\", \"Dynamophone\", \"Flute\", \"Flutophone\", \"Glockenspiel\", \"Gongs\", \"Guitar\", \"Harmonica\", \"Harp\", \"Harpsichord\", \"Lute\", \"Mandolin\", \"Maracas\", \"Metallophone\", \"Musical box\", \"Oboe\", \"Ondes-Martenot\", \"Piano\", \"Recorder\", \"Saxophone\", \"Shawm\", \"Snare drum\", \"Steel drum\", \"Tambourine\", \"Theremin\", \"Triangle\", \"Trombone\", \"Trumpet\", \"Tuba\", \"Ukulele\", \"Viola\", \"Violin\", \"Xylophone\",\n    \"Zither\"].map(function(obj){return {label: obj, value:obj}})\n  }\n});\n\nTemplate.upsertBasicProfileForm.helpers ({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentBasicProfile: function () {\n    var currentAccount = BasicProfiles.findOne({ userId: Meteor.userId()});\n    if (currentAccount) {\n      Template.instance().formType.set('update');\n      return currentAccount;\n    }\n  },\n\n  formType: function () {\n    var formType = Template.instance().formType.get();\n    return formType;\n  }\n});\n\nTemplate.upsertAccompanistForm.helpers ({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentAccompanistProfiles: function () {\n    var currentAccompanistProfiles = AccompanistProfiles.findOne({ Id: Meteor.userId()});\n    if (currentAccompanistProfiles) {\n      Template.instance().formType.set('update');\n      return currentAccompanistProfiles;\n    }\n  },\n\n  formType: function () {\n    var formType = Template.instance().formType.get();\n    return formType;\n  }\n});\n\n\nTemplate.results.helpers({\n\n  accompanists: function() {\n      var coords = Session.get('coords')\n\n      //convert dates to dates that can be compared with Mongo schema\n      var sd = new Date(Session.get('start_date'))\n      var ed = new Date(Session.get('end_date'))\n\n        console.log(\"Terms you have Searched with\")\n        console.log(coords)\n        console.log(sd)\n        console.log(ed)\n\n      if (coords !== undefined && moment(sd).isValid() && moment(ed).isValid()) {\n        console.log(\"search all\")\n        return AccompanistProfiles.find({\n          loc:\n            { $near :\n              {\n                $geometry: { type: \"Point\",  coordinates: coords },\n                $maxDistance: 20000\n              }\n            },\n          startDate:  {$lte: sd, $lte: ed},\n          endDate: {$gte: sd, $gte: ed}}).fetch();\n\n      }  else if (moment(sd).isValid() && moment(ed).isValid()){\n        console.log(\"search sd and ed\")\n\n        return AccompanistProfiles.find({\n          startDate:  {$lte: sd, $lte: ed},\n          endDate: {$gte: sd, $gte: ed}}).fetch();\n      } \n      \n      else if (coords !== undefined){\n        console.log(\"search coords\")\n\n        return AccompanistProfiles.find({\n          loc:\n            { $near :\n              {\n                $geometry: { type: \"Point\",  coordinates: coords },\n                $maxDistance: 20000\n              }\n            }}).fetch();\n      } \n    \n      else {\n        console.log(\"search null\")\n        return null\n      }\n  },\n\n    accompname: function() {\n\n        // We use this helper inside the {{#each posts}} loop, so the context\n        // will be a post object. Thus, we can use this.authorId.\n        var names = BasicProfiles.findOne({userId: this.Id});\n                //console.log(names)\n\n        return names\n    }\n\n    });\n\n// Events\n\nTemplate.search.events({\n  'submit form': function(){\n\n      //Constants submitted from the Home search bar\n      // var address = event.target.address.value\n      // var start_date = event.target.start_date.value\n      // var end_date = event.target.end_date.value\n\n      var query = FlowRouter.getParam(\"queryParams\")\n      var address = query.address\n      var start_date = query.start_date\n       var end_date = query.end_date\n\n      console.log(\"address\")\n\n      console.log(address)\n\n\n      if (address !== 0) {\n      \n        console.log(\"Meteor call if worked\")\n\n        Meteor.call('getGeocode', address, function(err, result){\n          \n          console.log(\"Meteor call worked\")\n\n          if (result !== null){\n\n            var lat = Number(result[0].latitude);\n            var lng = Number(result[0].longitude);\n            var coords = [lng, lat];\n\n            console.log(\"search session set in meteor.call\")\n            Session.set('coords', coords)\n            Session.set('start_date', start_date)\n            Session.set('end_date', end_date)\n\n          } else {\n            Session.set('start_date', start_date)\n              Session.set('end_date', end_date)\n\n          }\n      });\n      }\n\n\n\n\n      console.log(\"Form Submitted\")\n      // go to knew page here\n      FlowRouter.go('results');\n  }\n});\n\n// Template.results.helpers({\n\n//   accompanists: function() {\n//       var coords = Session.get('coords')\n\n//       //convert dates to dates that can be compared with Mongo schema\n//       var sd = new Date(Session.get('start_date'))\n//       var ed = new Date(Session.get('end_date'))\n\n//         console.log(\"Terms you have Searched with\")\n//         console.log(coords)\n//         console.log(sd)\n//         console.log(ed)\n\n//       if (coords !== undefined && moment(sd).isValid() && moment(ed).isValid()) {\n//         console.log(\"search all\")\n//         return AccompanistProfiles.find({\n//           loc:\n//             { $near :\n//               {\n//                 $geometry: { type: \"Point\",  coordinates: coords },\n//                 $maxDistance: 20000\n//               }\n//             },\n//           startDate:  {$lte: sd, $lte: ed},\n//           endDate: {$gte: sd, $gte: ed}}).fetch();\n\n//       }  else if (moment(sd).isValid() && moment(ed).isValid()){\n//         console.log(\"search sd and ed\")\n\n//         return AccompanistProfiles.find({\n//           startDate:  {$lte: sd, $lte: ed},\n//           endDate: {$gte: sd, $gte: ed}}).fetch();\n//       } \n      \n//       else if (coords !== undefined){\n//         console.log(\"search coords\")\n\n//         return AccompanistProfiles.find({\n//           loc:\n//             { $near :\n//               {\n//                 $geometry: { type: \"Point\",  coordinates: coords },\n//                 $maxDistance: 20000\n//               }\n//             }}).fetch();\n//       } \n    \n//       else {\n//         console.log(\"search null\")\n//         return null\n//       }\n//   },\n\n//     accompname: function() {\n\n//         // We use this helper inside the {{#each posts}} loop, so the context\n//         // will be a post object. Thus, we can use this.authorId.\n//         var names = BasicProfiles.findOne({userId: this.Id});\n//                 //console.log(names)\n\n//         return names\n//     }\n\n//     });\n\n// // Events\n\n// Template.search.events({\n// \t'submit form': function(){\n// \t    event.preventDefault();\n\n// \t    //Constants submitted from the Home search bar\n//       var address = event.target.address.value\n// \t   \tvar start_date = event.target.start_date.value\n// \t   \tvar end_date = event.target.end_date.value\n\n//       console.log(\"address\")\n\n//       console.log(address)\n\n\n//       if (address !== 0) {\n      \n//         console.log(\"Meteor call if worked\")\n\n//         Meteor.call('getGeocode', address, function(err, result){\n          \n//           console.log(\"Meteor call worked\")\n\n//           if (result !== null){\n\n//             var lat = Number(result[0].latitude);\n//             var lng = Number(result[0].longitude);\n//             var coords = [lng, lat];\n\n//             console.log(\"search session set in meteor.call\")\n//             Session.set('coords', coords)\n//             Session.set('start_date', start_date)\n//             Session.set('end_date', end_date)\n\n//           } else {\n//             Session.set('start_date', start_date)\n//               Session.set('end_date', end_date)\n\n//           }\n//       });\n//       }\n\n\n\n\n//       console.log(\"Form Submitted\")\n//       // go to knew page here\n//       FlowRouter.go('results');\n//   }\n// });\n\n// Google search autocomplete\nTemplate.search.events({\n   'click #autocomplete': function(e,search) {\n     initAutoComplete();\n   }\n});\n\nTemplate.NewAccompLayout.events({\n   'click #autocomplete': function(e,NewAccompLayout) {\n     initAutoComplete();\n   }\n});\n\nvar initAutoComplete = function() {\n  var autocomplete = new google.maps.places.Autocomplete(\n    (document.getElementById('autocomplete')),{types: ['geocode'] }\n  );\n};\n\nTemplate.EditAccompanistProfiles.events({\n\t'click button': function(){\n      Notifications.info('Test', 'Working Notification');\n  }\n});\n\n\nTemplate.BookingRequest.events({\n\t'click button': function(){\n      Transactions.update({_id: FlowRouter.getParam(\"transactionId\")}, {$set: {status: \"Confirmed\"}});\n      Notifications.info('Successful Confirmation', 'You successfully confirmed your booking!');\n  }\n});\n\nTemplate.makeAdmin.events({\n\t'click button': function(){\n    userId = Meteor.userId();\n    Meteor.call('divinify', userId);\n  }\n});\n\n\n// For Debugging\n SimpleSchema.debug = true;\n"]},"hash":"2faefd578a18509774bb2e79fcc8ece2b54a19ae"}
