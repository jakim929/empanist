{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:core/lib/engines/mongo-text-index.js","filenameRelative":"/packages/easysearch:core/lib/engines/mongo-text-index.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:core/lib/engines/mongo-text-index.js.map","sourceFileName":"/packages/easysearch:core/lib/engines/mongo-text-index.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"mongo-text-index"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.\n *\n * @type {MongoTextIndexEngine}\n */\nMongoTextIndexEngine = function (_ReactiveEngine) {\n  (0, _inherits3['default'])(MongoTextIndexEngine, _ReactiveEngine);\n\n  function MongoTextIndexEngine() {\n    (0, _classCallCheck3['default'])(this, MongoTextIndexEngine);\n    return (0, _possibleConstructorReturn3['default'])(this, _ReactiveEngine.apply(this, arguments));\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n  MongoTextIndexEngine.prototype.defaultConfiguration = function defaultConfiguration() {\n    var mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);\n\n    mongoConfiguration.selector = function (searchString) {\n      if (searchString.trim()) {\n        return { $text: { $search: searchString } };\n      }\n\n      return {};\n    };\n\n    return _.defaults({}, mongoConfiguration, _ReactiveEngine.prototype.defaultConfiguration.call(this));\n  };\n\n  /**\n   * Setup the index on creation.\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n\n\n  MongoTextIndexEngine.prototype.onIndexCreate = function onIndexCreate(indexConfig) {\n    _ReactiveEngine.prototype.onIndexCreate.call(this, indexConfig);\n\n    if (Meteor.isServer) {\n      (function () {\n        var textIndexesConfig = {};\n\n        _.each(indexConfig.fields, function (field) {\n          textIndexesConfig[field] = 'text';\n        });\n\n        if (indexConfig.weights) {\n          textIndexesConfig.weights = options.weights();\n        }\n\n        indexConfig.collection._ensureIndex(textIndexesConfig);\n      })();\n    }\n  };\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n\n\n  MongoTextIndexEngine.prototype.transformSearchDefinition = function transformSearchDefinition(searchDefinition, options) {\n    return searchDefinition;\n  };\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n\n\n  MongoTextIndexEngine.prototype.checkSearchParam = function checkSearchParam(search) {\n    check(search, String);\n  };\n\n  return MongoTextIndexEngine;\n}(ReactiveEngine);\n\n// Explicitely inherit getSearchCursor method functionality\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;","ast":null,"map":{"version":3,"sources":["/packages/easysearch:core/lib/engines/mongo-text-index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAKA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA,iCAME,oBANF,mCAMyB;AACrB,QAAI,qBAAqB,cAAc,yBAAd,CAAwC,IAAxC,CAAzB;;AAEA,uBAAmB,QAAnB,GAA8B,UAAU,YAAV,EAAwB;AACpD,UAAI,aAAa,IAAb,EAAJ,EAAyB;AACvB,eAAO,EAAE,OAAO,EAAE,SAAS,YAAX,EAAT,EAAP;AACD;;AAED,aAAO,EAAP;AACD,KAND;;AAQA,WAAO,EAAE,QAAF,CAAW,EAAX,EAAe,kBAAf,EAAmC,0BAAM,oBAAN,WAAnC,CAAP;AACD,GAlBH;;;;;;;;;AAAA,iCAyBE,aAzBF,0BAyBgB,WAzBhB,EAyB6B;AACzB,8BAAM,aAAN,YAAoB,WAApB;;AAEA,QAAI,OAAO,QAAX,EAAqB;AAAA;AACnB,YAAI,oBAAoB,EAAxB;;AAEA,UAAE,IAAF,CAAO,YAAY,MAAnB,EAA2B,UAAU,KAAV,EAAiB;AAC1C,4BAAkB,KAAlB,IAA2B,MAA3B;AACD,SAFD;;AAIA,YAAI,YAAY,OAAhB,EAAyB;AACvB,4BAAkB,OAAlB,GAA4B,QAAQ,OAAR,EAA5B;AACD;;AAED,oBAAY,UAAZ,CAAuB,YAAvB,CAAoC,iBAApC;AAXmB;AAYpB;AACF,GAzCH;;;;;;;;;;;;AAAA,iCAmDE,yBAnDF,sCAmD4B,gBAnD5B,EAmD8C,OAnD9C,EAmDuD;AACnD,WAAO,gBAAP;AACD,GArDH;;;;;;;;;AAAA,iCA4DE,gBA5DF,6BA4DmB,MA5DnB,EA4D2B;AACvB,UAAM,MAAN,EAAc,MAAd;AACD,GA9DH;;AAAA;AAAA,EAA0D,cAA1D;;;AAkEA,qBAAqB,SAArB,CAA+B,eAA/B,GAAiD,cAAc,SAAd,CAAwB,eAAzE;AACA,qBAAqB,SAArB,CAA+B,cAA/B,GAAgD,cAAc,SAAd,CAAwB,cAAxE","file":"/packages/easysearch:core/lib/engines/mongo-text-index.js.map","sourcesContent":["/**\n * The MongoTextIndexEngine lets you search the index with Mongo text indexes.\n *\n * @type {MongoTextIndexEngine}\n */\nMongoTextIndexEngine = class MongoTextIndexEngine extends ReactiveEngine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    let mongoConfiguration = MongoDBEngine.defaultMongoConfiguration(this);\n\n    mongoConfiguration.selector = function (searchString) {\n      if (searchString.trim()) {\n        return { $text: { $search: searchString } };\n      }\n\n      return {};\n    };\n\n    return _.defaults({}, mongoConfiguration, super.defaultConfiguration());\n  }\n\n  /**\n   * Setup the index on creation.\n   *\n   * @param {Object} indexConfig Index configuration\n   */\n  onIndexCreate(indexConfig) {\n    super.onIndexCreate(indexConfig);\n\n    if (Meteor.isServer) {\n      let textIndexesConfig = {};\n\n      _.each(indexConfig.fields, function (field) {\n        textIndexesConfig[field] = 'text';\n      });\n\n      if (indexConfig.weights) {\n        textIndexesConfig.weights = options.weights();\n      }\n\n      indexConfig.collection._ensureIndex(textIndexesConfig);\n    }\n  }\n\n  /**\n   * Transform the search definition.\n   *\n   * @param {String|Object} searchDefinition Search definition\n   * @param {Object}        options          Search and index options\n   *\n   * @returns {Object}\n   */\n  transformSearchDefinition(searchDefinition, options) {\n    return searchDefinition;\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n};\n\n// Explicitely inherit getSearchCursor method functionality\nMongoTextIndexEngine.prototype.getSearchCursor = MongoDBEngine.prototype.getSearchCursor;\nMongoTextIndexEngine.prototype.getFindOptions = MongoDBEngine.prototype.getFindOptions;\n"]},"hash":"054e0b1cef00aed91d3c6a944cdbf2354fe92c30"}
