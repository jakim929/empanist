{"metadata":{"usedHelpers":["createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:core/lib/core/search-collection.js","filenameRelative":"/packages/easysearch:core/lib/core/search-collection.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:core/lib/core/search-collection.js.map","sourceFileName":"/packages/easysearch:core/lib/core/search-collection.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"search-collection"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A search collection represents a reactive collection on the client,\n * which is used by the ReactiveEngine for searching.\n *\n * @type {SearchCollection}\n */\nSearchCollection = function () {\n  /**\n   * Constructor\n   *\n   * @param {Object}         indexConfiguration Index configuration\n   * @param {ReactiveEngine} engine             Reactive Engine\n   *\n   * @constructor\n   */\n\n  function SearchCollection(indexConfiguration, engine) {\n    (0, _classCallCheck3['default'])(this, SearchCollection);\n\n    check(indexConfiguration, Object);\n    check(indexConfiguration.name, Match.OneOf(String, null));\n\n    if (!(engine instanceof ReactiveEngine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');\n    }\n\n    this._indexConfiguration = indexConfiguration;\n    this._name = indexConfiguration.name + '/easySearch';\n    this._engine = engine;\n\n    if (Meteor.isClient) {\n      this._collection = new Meteor.Collection(this._name);\n    } else if (Meteor.isServer) {\n      this._setUpPublication();\n    }\n  }\n\n  /**\n   * Get name\n   *\n   * @returns {String}\n   */\n\n\n  /**\n   * Find documents on the client.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n\n  SearchCollection.prototype.find = function find(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Error('find can only be used on client');\n    }\n\n    var publishHandle = Meteor.subscribe(this.name, searchDefinition, options);\n\n    var count = this._getCount(searchDefinition);\n    var mongoCursor = this._getMongoCursor(searchDefinition, options);\n\n    if (!_.isNumber(count)) {\n      return new Cursor(mongoCursor, 0, false);\n    }\n\n    return new Cursor(mongoCursor, count, true, publishHandle);\n  };\n\n  /**\n   * Get the count of the cursor.\n   *\n   * @params {Object} searchDefinition Search definition\n   *\n   * @returns {Cursor.count}\n   *\n   * @private\n   */\n\n\n  SearchCollection.prototype._getCount = function _getCount(searchDefinition) {\n    var countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));\n\n    if (countDoc) {\n      return countDoc.count;\n    }\n  };\n\n  /**\n   * Get the mongo cursor.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Search options\n   *\n   * @returns {Cursor}\n   * @private\n   */\n\n\n  SearchCollection.prototype._getMongoCursor = function _getMongoCursor(searchDefinition, options) {\n    var _this = this;\n\n    return this._collection.find({ __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options.props) }, {\n      transform: function transform(doc) {\n        delete doc.__searchDefinition;\n        delete doc.__searchOptions;\n        delete doc.__sortPosition;\n\n        doc = _this.engine.config.transform(doc);\n\n        return doc;\n      },\n      sort: ['__sortPosition']\n    });\n  };\n\n  /**\n   * Return a unique document id for publication.\n   *\n   * @param {Document} doc\n   *\n   * @returns string\n   */\n\n\n  SearchCollection.prototype.generateId = function generateId(doc) {\n    return doc._id + doc.__searchDefinition + doc.__searchOptions;\n  };\n\n  /**\n   * Add custom fields to the given document\n   *\n   * @param {Document} doc\n   * @param {Object}   data\n   * @returns {*}\n   */\n\n\n  SearchCollection.prototype.addCustomFields = function addCustomFields(doc, data) {\n    _.forEach(data, function (val, key) {\n      doc['__' + key] = val;\n    });\n\n    return doc;\n  };\n\n  /**\n   * Set up publication.\n   *\n   * @private\n   */\n\n\n  SearchCollection.prototype._setUpPublication = function _setUpPublication() {\n    var collectionScope = this,\n        collectionName = this.name;\n\n    Meteor.publish(collectionName, function (searchDefinition, options) {\n      var _this2 = this;\n\n      check(searchDefinition, Match.OneOf(String, Object));\n      check(options, Object);\n\n      var definitionString = JSON.stringify(searchDefinition),\n          optionsString = JSON.stringify(options.props);\n\n      options.userId = this.userId;\n      options.publicationScope = this;\n\n      if (!collectionScope._indexConfiguration.permission(options)) {\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n      }\n\n      collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);\n\n      var cursor = collectionScope.engine.search(searchDefinition, {\n        search: options,\n        index: collectionScope._indexConfiguration\n      });\n\n      var count = cursor.count();\n\n      this.added(collectionName, 'searchCount' + definitionString, { count: count });\n\n      var resultsHandle = cursor.mongoCursor.observe({\n        addedAt: function addedAt(doc, atIndex, before) {\n          doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          _this2.added(collectionName, collectionScope.generateId(doc), doc);\n        },\n        changedAt: function changedAt(doc, oldDoc, atIndex) {\n          doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          _this2.changed(collectionName, collectionScope.generateId(doc), doc);\n        },\n        movedTo: function movedTo(doc, fromIndex, toIndex, before) {\n          doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: toIndex\n          });\n\n          var beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);\n\n          if (beforeDoc) {\n            beforeDoc = collectionScope.addCustomFields(beforeDoc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: fromIndex\n            });\n            _this2.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);\n          }\n\n          _this2.changed(collectionName, collectionScope.generateId(doc), doc);\n        },\n        removedAt: function removedAt(doc, atIndex) {\n          doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);\n          doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n          _this2.removed(collectionName, collectionScope.generateId(doc));\n        }\n      });\n\n      this.onStop(function () {\n        resultsHandle.stop();\n      });\n\n      this.ready();\n    });\n  };\n\n  (0, _createClass3['default'])(SearchCollection, [{\n    key: 'name',\n    get: function get() {\n      return this._name;\n    }\n\n    /**\n     * Get engine\n     *\n     * @returns {ReactiveEngine}\n     */\n\n  }, {\n    key: 'engine',\n    get: function get() {\n      return this._engine;\n    }\n  }]);\n  return SearchCollection;\n}();","ast":null,"map":{"version":3,"sources":["/packages/easysearch:core/lib/core/search-collection.js"],"names":[],"mappings":"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","file":"/packages/easysearch:core/lib/core/search-collection.js.map","sourcesContent":["/**\n * A search collection represents a reactive collection on the client,\n * which is used by the ReactiveEngine for searching.\n *\n * @type {SearchCollection}\n */\nSearchCollection = class SearchCollection {\n  /**\n   * Constructor\n   *\n   * @param {Object}         indexConfiguration Index configuration\n   * @param {ReactiveEngine} engine             Reactive Engine\n   *\n   * @constructor\n   */\n  constructor(indexConfiguration, engine) {\n    check(indexConfiguration, Object);\n    check(indexConfiguration.name, Match.OneOf(String, null));\n\n    if (!(engine instanceof ReactiveEngine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');\n    }\n\n    this._indexConfiguration = indexConfiguration;\n    this._name = `${indexConfiguration.name}/easySearch`;\n    this._engine = engine;\n\n    if (Meteor.isClient) {\n      this._collection = new Meteor.Collection(this._name);\n    } else if (Meteor.isServer) {\n      this._setUpPublication();\n    }\n  }\n\n  /**\n   * Get name\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Get engine\n   *\n   * @returns {ReactiveEngine}\n   */\n  get engine() {\n    return this._engine;\n  }\n\n  /**\n   * Find documents on the client.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  find(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Error('find can only be used on client');\n    }\n\n    let publishHandle = Meteor.subscribe(this.name, searchDefinition, options);\n\n    let count = this._getCount(searchDefinition);\n    let mongoCursor = this._getMongoCursor(searchDefinition, options);\n\n    if (!_.isNumber(count)) {\n      return new Cursor(mongoCursor, 0, false);\n    }\n\n    return new Cursor(mongoCursor, count, true, publishHandle);\n  }\n\n  /**\n   * Get the count of the cursor.\n   *\n   * @params {Object} searchDefinition Search definition\n   *\n   * @returns {Cursor.count}\n   *\n   * @private\n   */\n  _getCount(searchDefinition) {\n    let countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));\n\n    if (countDoc) {\n      return countDoc.count;\n    }\n  }\n\n  /**\n   * Get the mongo cursor.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Search options\n   *\n   * @returns {Cursor}\n   * @private\n   */\n  _getMongoCursor(searchDefinition, options) {\n    return this._collection.find(\n      { __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options.props) },\n      {\n        transform: (doc) => {\n          delete doc.__searchDefinition;\n          delete doc.__searchOptions;\n          delete doc.__sortPosition;\n\n          doc = this.engine.config.transform(doc);\n\n          return doc;\n        },\n        sort: ['__sortPosition']\n      }\n    );\n  }\n\n  /**\n   * Return a unique document id for publication.\n   *\n   * @param {Document} doc\n   *\n   * @returns string\n   */\n  generateId(doc) {\n    return doc._id + doc.__searchDefinition + doc.__searchOptions;\n  }\n\n  /**\n   * Add custom fields to the given document\n   *\n   * @param {Document} doc\n   * @param {Object}   data\n   * @returns {*}\n   */\n  addCustomFields(doc, data) {\n    _.forEach(data, function (val, key) {\n      doc['__' + key] = val;\n    });\n\n    return doc;\n  }\n\n  /**\n   * Set up publication.\n   *\n   * @private\n   */\n  _setUpPublication() {\n    var collectionScope = this,\n      collectionName = this.name;\n\n    Meteor.publish(collectionName, function (searchDefinition, options) {\n      check(searchDefinition, Match.OneOf(String, Object));\n      check(options, Object);\n\n      let definitionString = JSON.stringify(searchDefinition),\n        optionsString = JSON.stringify(options.props);\n\n      options.userId = this.userId;\n      options.publicationScope = this;\n\n      if (!collectionScope._indexConfiguration.permission(options)) {\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n      }\n\n      collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);\n\n      let cursor = collectionScope.engine.search(searchDefinition, {\n        search: options,\n        index: collectionScope._indexConfiguration\n      });\n\n      const count = cursor.count();\n\n      this.added(collectionName, 'searchCount' + definitionString, { count: count });\n\n      let resultsHandle = cursor.mongoCursor.observe({\n        addedAt: (doc, atIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.added(collectionName, collectionScope.generateId(doc), doc);\n        },\n        changedAt: (doc, oldDoc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc)\n        },\n        movedTo: (doc, fromIndex, toIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: toIndex\n          });\n\n          let beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);\n\n          if (beforeDoc) {\n            beforeDoc = collectionScope.addCustomFields(beforeDoc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: fromIndex\n            });\n            this.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);\n          }\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc);\n        },\n        removedAt: (doc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);\n          doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n          this.removed(collectionName, collectionScope.generateId(doc));\n        }\n      });\n\n      this.onStop(function () {\n        resultsHandle.stop();\n      });\n\n      this.ready();\n    });\n  }\n};\n"]},"hash":"27fdc95639533eb6a76f981db35e75960713869f"}
