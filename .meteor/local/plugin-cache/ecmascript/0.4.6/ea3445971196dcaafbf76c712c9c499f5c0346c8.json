{"metadata":{"usedHelpers":["createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:core/lib/core/cursor.js","filenameRelative":"/packages/easysearch:core/lib/core/cursor.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:core/lib/core/cursor.js.map","sourceFileName":"/packages/easysearch:core/lib/core/cursor.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"cursor"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * A Cursor represents a pointer to the search results. Since it's specific\n * to EasySearch it can also be used to check for valid return values.\n *\n * @type {Cursor}\n */\nCursor = function () {\n  /**\n   * Constructor\n   *\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor\n   * @param {Number}       count         Count of all documents found\n   * @param {Boolean}      isReady       Cursor is ready\n   * @param {Object}       publishHandle Publish handle to stop if on client\n   *\n   * @constructor\n   *\n   */\n\n  function Cursor(mongoCursor, count) {\n    var isReady = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n    var publishHandle = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n    (0, _classCallCheck3[\"default\"])(this, Cursor);\n\n    check(mongoCursor.fetch, Function);\n    check(count, Number);\n    check(isReady, Match.Optional(Boolean));\n    check(publishHandle, Match.OneOf(null, Object));\n\n    this._mongoCursor = mongoCursor;\n    this._count = count;\n    this._isReady = isReady;\n    this._publishHandle = publishHandle;\n  }\n\n  /**\n   * Fetch the search results.\n   *\n   * @returns {[Object]}\n   */\n\n\n  Cursor.prototype.fetch = function fetch() {\n    return this._mongoCursor.fetch();\n  };\n\n  /**\n   * Stop the subscription handle associated with the cursor.\n   */\n\n\n  Cursor.prototype.stop = function stop() {\n    if (this._publishHandle) {\n      return this._publishHandle.stop();\n    }\n  };\n\n  /**\n   * Return count of all documents found\n   *\n   * @returns {Number}\n   */\n\n\n  Cursor.prototype.count = function count() {\n    return this._count;\n  };\n\n  /**\n   * Return if the cursor is ready.\n   *\n   * @returns {Boolean}\n   */\n\n\n  Cursor.prototype.isReady = function isReady() {\n    return this._isReady;\n  };\n\n  /**\n   * Return the raw mongo cursor.\n   *\n   * @returns {Mongo.Cursor}\n   */\n\n\n  (0, _createClass3[\"default\"])(Cursor, [{\n    key: \"mongoCursor\",\n    get: function get() {\n      return this._mongoCursor;\n    }\n\n    /**\n     * Return a fake empty cursor, without data.\n     *\n     * @returns {Object}\n     */\n\n  }], [{\n    key: \"emptyCursor\",\n    get: function get() {\n      return { fetch: function fetch() {\n          return [];\n        }, observe: function observe() {\n          return { stop: function stop() {\n              return null;\n            } };\n        }, stop: function stop() {} };\n    }\n  }]);\n  return Cursor;\n}();","ast":null,"map":{"version":3,"sources":["/packages/easysearch:core/lib/core/cursor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;AAYE,kBAAY,WAAZ,EAAyB,KAAzB,EAAsE;AAAA,QAAtC,OAAsC,yDAA5B,IAA4B;AAAA,QAAtB,aAAsB,yDAAN,IAAM;AAAA;;AACpE,UAAM,YAAY,KAAlB,EAAyB,QAAzB;AACA,UAAM,KAAN,EAAa,MAAb;AACA,UAAM,OAAN,EAAe,MAAM,QAAN,CAAe,OAAf,CAAf;AACA,UAAM,aAAN,EAAqB,MAAM,KAAN,CAAY,IAAZ,EAAkB,MAAlB,CAArB;;AAEA,SAAK,YAAL,GAAoB,WAApB;AACA,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,cAAL,GAAsB,aAAtB;AACD;;;;;;;;;AAtBH,mBA6BE,KA7BF,oBA6BU;AACN,WAAO,KAAK,YAAL,CAAkB,KAAlB,EAAP;AACD,GA/BH;;;;;;;AAAA,mBAoCE,IApCF,mBAoCS;AACL,QAAI,KAAK,cAAT,EAAyB;AACvB,aAAO,KAAK,cAAL,CAAoB,IAApB,EAAP;AACD;AACF,GAxCH;;;;;;;;;AAAA,mBA+CE,KA/CF,oBA+CU;AACN,WAAO,KAAK,MAAZ;AACD,GAjDH;;;;;;;;;AAAA,mBAwDE,OAxDF,sBAwDY;AACR,WAAO,KAAK,QAAZ;AACD,GA1DH;;;;;;;;;AAAA;AAAA;AAAA,wBAiEoB;AAChB,aAAO,KAAK,YAAZ;AACD;;;;;;;;AAnEH;AAAA;AAAA,wBA0E2B;AACvB,aAAO,EAAE,OAAO;AAAA,iBAAM,EAAN;AAAA,SAAT,EAAmB,SAAS,mBAAM;AAAE,iBAAO,EAAE,MAAM;AAAA,qBAAM,IAAN;AAAA,aAAR,EAAP;AAA8B,SAAlE,EAAoE,MAAM,gBAAM,CAAE,CAAlF,EAAP;AACD;AA5EH;AAAA;AAAA","file":"/packages/easysearch:core/lib/core/cursor.js.map","sourcesContent":["/**\n * A Cursor represents a pointer to the search results. Since it's specific\n * to EasySearch it can also be used to check for valid return values.\n *\n * @type {Cursor}\n */\nCursor = class Cursor {\n  /**\n   * Constructor\n   *\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor\n   * @param {Number}       count         Count of all documents found\n   * @param {Boolean}      isReady       Cursor is ready\n   * @param {Object}       publishHandle Publish handle to stop if on client\n   *\n   * @constructor\n   *\n   */\n  constructor(mongoCursor, count, isReady = true, publishHandle = null) {\n    check(mongoCursor.fetch, Function);\n    check(count, Number);\n    check(isReady, Match.Optional(Boolean));\n    check(publishHandle, Match.OneOf(null, Object));\n\n    this._mongoCursor = mongoCursor;\n    this._count = count;\n    this._isReady = isReady;\n    this._publishHandle = publishHandle;\n  }\n\n  /**\n   * Fetch the search results.\n   *\n   * @returns {[Object]}\n   */\n  fetch() {\n    return this._mongoCursor.fetch();\n  }\n\n /**\n  * Stop the subscription handle associated with the cursor.\n  */\n  stop() {\n    if (this._publishHandle) {\n      return this._publishHandle.stop();\n    }\n  }\n\n  /**\n   * Return count of all documents found\n   *\n   * @returns {Number}\n   */\n  count() {\n    return this._count;\n  }\n\n  /**\n   * Return if the cursor is ready.\n   *\n   * @returns {Boolean}\n   */\n  isReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Return the raw mongo cursor.\n   *\n   * @returns {Mongo.Cursor}\n   */\n  get mongoCursor() {\n    return this._mongoCursor;\n  }\n\n  /**\n   * Return a fake empty cursor, without data.\n   *\n   * @returns {Object}\n   */\n  static get emptyCursor() {\n    return { fetch: () => [], observe: () => { return { stop: () => null }; }, stop: () => {} };\n  }\n};\n"]},"hash":"ea3445971196dcaafbf76c712c9c499f5c0346c8"}
