{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/upload-to-amazon-s3.js","filenameRelative":"/client/modules/upload-to-amazon-s3.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/upload-to-amazon-s3.js.map","sourceFileName":"/client/modules/upload-to-amazon-s3.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"upload-to-amazon-s3"},"ignored":false,"code":"var template = void 0;\n\nvar _getFileFromInput = function _getFileFromInput(event) {\n  return event.target.files[0];\n};\n\nvar _setPlaceholderText = function _setPlaceholderText() {\n  var string = arguments.length <= 0 || arguments[0] === undefined ? \"Click or Drag a File Here to Upload\" : arguments[0];\n\n  template.find(\".alert span\").innerText = string;\n};\n\nvar _addUrlToDatabase = function _addUrlToDatabase(url, type) {\n  Meteor.call(\"storeUrlInDatabase\", url, type, function (error) {\n    if (error) {\n      Bert.alert(error.reason, \"warning\");\n      _setPlaceholderText();\n    } else {\n      Bert.alert(\"File uploaded to Amazon S3!\", \"success\");\n      _setPlaceholderText();\n    }\n  });\n};\n\nvar _uploadFileToAmazon = function _uploadFileToAmazon(file, type) {\n  var uploader = new Slingshot.Upload(\"uploadToAmazonS3\");\n\n  uploader.send(file, function (error, url) {\n    if (error) {\n      Bert.alert(error.message, \"warning\");\n      _setPlaceholderText();\n    } else {\n      _addUrlToDatabase(url, type);\n    }\n  });\n};\n\nvar upload = function upload(options) {\n  template = options.template;\n  var file = _getFileFromInput(options.event);\n\n  _setPlaceholderText(\"Uploading \" + file.name + \"...\");\n  _uploadFileToAmazon(file, options.type);\n};\n\nModules.client.uploadToAmazonS3 = upload;","ast":null,"map":{"version":3,"sources":["/client/modules/upload-to-amazon-s3.js"],"names":[],"mappings":"AAAA,IAAI,iBAAJ;;AAEA,IAAI,oBAAoB,SAApB,iBAAoB,CAAE,KAAF;AAAA,SAAa,MAAM,MAAN,CAAa,KAAb,CAAmB,CAAnB,CAAb;AAAA,CAAxB;;AAEA,IAAI,sBAAsB,SAAtB,mBAAsB,GAAsD;AAAA,MAApD,MAAoD,yDAA3C,qCAA2C;;AAC9E,WAAS,IAAT,CAAe,aAAf,EAA+B,SAA/B,GAA2C,MAA3C;AACD,CAFD;;AAIA,IAAI,oBAAoB,SAApB,iBAAoB,CAAE,GAAF,EAAO,IAAP,EAAgB;AACtC,SAAO,IAAP,CAAa,oBAAb,EAAmC,GAAnC,EAAwC,IAAxC,EAA8C,UAAE,KAAF,EAAa;AACzD,QAAK,KAAL,EAAa;AACX,WAAK,KAAL,CAAY,MAAM,MAAlB,EAA0B,SAA1B;AACA;AACD,KAHD,MAGO;AACL,WAAK,KAAL,CAAY,6BAAZ,EAA2C,SAA3C;AACA;AACD;AACF,GARD;AASD,CAVD;;AAaA,IAAI,sBAAsB,SAAtB,mBAAsB,CAAE,IAAF,EAAQ,IAAR,EAAkB;AAC1C,MAAM,WAAW,IAAI,UAAU,MAAd,CAAsB,kBAAtB,CAAjB;;AAEA,WAAS,IAAT,CAAe,IAAf,EAAqB,UAAE,KAAF,EAAS,GAAT,EAAkB;AACrC,QAAK,KAAL,EAAa;AACX,WAAK,KAAL,CAAY,MAAM,OAAlB,EAA2B,SAA3B;AACA;AACD,KAHD,MAGO;AACL,wBAAmB,GAAnB,EAAyB,IAAzB;AACD;AACF,GAPD;AAQD,CAXD;;AAaA,IAAI,SAAS,SAAT,MAAS,CAAE,OAAF,EAAc;AACzB,aAAW,QAAQ,QAAnB;AACA,MAAI,OAAO,kBAAmB,QAAQ,KAA3B,CAAX;;AAEA,qCAAkC,KAAK,IAAvC;AACA,sBAAqB,IAArB,EAA4B,QAAQ,IAApC;AACD,CAND;;AAQA,QAAQ,MAAR,CAAe,gBAAf,GAAkC,MAAlC","file":"/client/modules/upload-to-amazon-s3.js.map","sourcesContent":["let template;\n\nlet _getFileFromInput = ( event ) => event.target.files[0];\n\nlet _setPlaceholderText = ( string = \"Click or Drag a File Here to Upload\" ) => {\n  template.find( \".alert span\" ).innerText = string;\n};\n\nlet _addUrlToDatabase = ( url, type) => {\n  Meteor.call( \"storeUrlInDatabase\", url, type, ( error ) => {\n    if ( error ) {\n      Bert.alert( error.reason, \"warning\" );\n      _setPlaceholderText();\n    } else {\n      Bert.alert( \"File uploaded to Amazon S3!\", \"success\" );\n      _setPlaceholderText();\n    }\n  });\n};\n\n\nlet _uploadFileToAmazon = ( file, type ) => {\n  const uploader = new Slingshot.Upload( \"uploadToAmazonS3\" );\n\n  uploader.send( file, ( error, url ) => {\n    if ( error ) {\n      Bert.alert( error.message, \"warning\" );\n      _setPlaceholderText();\n    } else {\n      _addUrlToDatabase( url , type);\n    }\n  });\n};\n\nlet upload = ( options) => {\n  template = options.template;\n  let file = _getFileFromInput( options.event );\n\n  _setPlaceholderText( `Uploading ${file.name}...` );\n  _uploadFileToAmazon( file , options.type);\n};\n\nModules.client.uploadToAmazonS3 = upload;\n"]},"hash":"54c2ca1f07d78d856b438316c8cf47419dfdfbf2"}
