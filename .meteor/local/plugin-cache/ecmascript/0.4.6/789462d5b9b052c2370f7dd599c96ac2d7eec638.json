{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/aldeed:template-extension/lib/template-inherits-events-from.js","filenameRelative":"/packages/aldeed:template-extension/lib/template-inherits-events-from.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/aldeed:template-extension/lib/template-inherits-events-from.js.map","sourceFileName":"/packages/aldeed:template-extension/lib/template-inherits-events-from.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"template-inherits-events-from"},"ignored":false,"code":"Template.prototype.inheritsEventsFrom = function () {\n  function inheritsEventsFrom(otherTemplate) {\n    var self = this;\n\n    self.__eventMaps = self.__eventMaps || [];\n\n    function inheritEvents(template) {\n      // String template names can be provided and template object is looked up\n      if (typeof template === 'string') template = Template[template];\n      if (!template) return;\n\n      self.__eventMaps = self.__eventMaps.concat(template.__eventMaps);\n    }\n\n    // Accept an array as otherTemplate argument\n    if (_.isArray(otherTemplate)) {\n      _.each(otherTemplate, inheritEvents);\n    } else {\n      //otherTemplate is a string\n      inheritEvents(otherTemplate);\n    }\n  }\n\n  return inheritsEventsFrom;\n}();","ast":null,"map":{"version":3,"sources":["/packages/aldeed:template-extension/lib/template-inherits-events-from.js"],"names":[],"mappings":"AAAA,SAAS,SAAT,CAAmB,kBAAnB;AAAwC,WAAS,kBAAT,CAA4B,aAA5B,EAA2C;AACjF,QAAI,OAAO,IAAX;;AAEA,SAAK,WAAL,GAAmB,KAAK,WAAL,IAAoB,EAAvC;;AAEA,aAAS,aAAT,CAAuB,QAAvB,EAAiC;;AAE/B,UAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC,WAAW,SAAS,QAAT,CAAX;AAClC,UAAI,CAAC,QAAL,EAAe;;AAEf,WAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,MAAjB,CAAwB,SAAS,WAAjC,CAAnB;AACD;;;AAGD,QAAI,EAAE,OAAF,CAAU,aAAV,CAAJ,EAA8B;AAC5B,QAAE,IAAF,CAAO,aAAP,EAAsB,aAAtB;AACD,KAFD,MAEO;;AACL,oBAAc,aAAd;AACD;AACF;;AAnBD,SAAiD,kBAAjD;AAAA","file":"/packages/aldeed:template-extension/lib/template-inherits-events-from.js.map","sourcesContent":["Template.prototype.inheritsEventsFrom = function inheritsEventsFrom(otherTemplate) {\n  var self = this;\n  \n  self.__eventMaps = self.__eventMaps || [];\n\n  function inheritEvents(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    self.__eventMaps = self.__eventMaps.concat(template.__eventMaps);\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritEvents);\n  } else { //otherTemplate is a string\n    inheritEvents(otherTemplate);\n  }\n};\n"]},"hash":"789462d5b9b052c2370f7dd599c96ac2d7eec638"}
