{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../collections/basicProfiles.js","imported":["BasicProfiles"],"specifiers":[{"kind":"named","imported":"BasicProfiles","local":"BasicProfiles"}]},{"source":"../collections/musicProfiles.js","imported":["MusicProfiles"],"specifiers":[{"kind":"named","imported":"MusicProfiles","local":"MusicProfiles"}]},{"source":"../collections/accompanistProfiles.js","imported":["AccompanistProfiles"],"specifiers":[{"kind":"named","imported":"AccompanistProfiles","local":"AccompanistProfiles"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/main.js","filenameRelative":"/server/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/main.js.map","sourceFileName":"/server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var BasicProfiles;module.import('../collections/basicProfiles.js',{\"BasicProfiles\":function(v){BasicProfiles=v}});var MusicProfiles;module.import('../collections/musicProfiles.js',{\"MusicProfiles\":function(v){MusicProfiles=v}});var AccompanistProfiles;module.import('../collections/accompanistProfiles.js',{\"AccompanistProfiles\":function(v){AccompanistProfiles=v}});\n\n\n\n\nMeteor.startup(function () {});\n\nvar geo = new GeoCoder();\n\nMeteor.methods({\n  getGeocode: function getGeocode(arg) {\n    if (arg == 0) {\n      return null;\n    } else {\n      var result = geo.geocode(arg);\n      return result;\n    }\n  },\n\n  insertFullRandomProfile: function insertFullRandomProfile(userId) {\n    BasicProfiles.insert(createNewBasicProfile(userId), { getAutoValues: false });\n    MusicProfiles.insert(createNewMusicProfile(userId), { getAutoValues: false });\n    AccompanistProfiles.insert(createNewAccompanistProfile(userId), { getAutoValues: false });\n  },\n\n  insertRandomData: function insertRandomData(number) {\n    for (var i = 0; i < number; i++) {\n      var genId = Random.id();\n      BasicProfiles.insert(createNewBasicProfile(genId), { getAutoValues: false });\n      MusicProfiles.insert(createNewMusicProfile(genId), { getAutoValues: false });\n      AccompanistProfiles.insert(createNewAccompanistProfile(genId), { getAutoValues: false });\n    }\n  },\n\n  divinify: function divinify(userId) {\n    Roles.addUsersToRoles(userId, 'admin');\n  }\n\n});\n\n// Server Side hooks\n// CHANGE ADMIN SETTINGS WHEN DONE TESTING\n\nMeteor.users.after.insert(function (userId, doc) {\n  Roles.addUsersToRoles(this._id, 'makeBasicProfile');\n});\n\n// Basic Profiles Server Side Hooks\n\nBasicProfiles.before.insert(function (userId, doc) {\n  var loggedInUser = Meteor.user();\n  if (!loggedInUser) {\n    throw new Meteor.Error(403, \"Not Logged In\");\n  } else if (!Roles.userIsInRole(loggedInUser._id, 'makeBasicProfile') && !Roles.userIsInRole(loggedInUser._id, 'admin')) {\n    throw new Meteor.Error(403, \"No Permission to Make Basic Profile\");\n  }\n});\n\nBasicProfiles.after.insert(function (userId, doc) {\n  console.log(\"Basic Profile Made for\", doc.userId);\n  Roles.addUsersToRoles(doc.userId, 'makeMusicProfile');\n  Roles.addUsersToRoles(doc.userId, 'bookAccompanist');\n});\n\n// Music Profile Server Side Hooks\n\nMusicProfiles.before.insert(function (userId, doc) {\n  var loggedInUser = Meteor.user();\n  if (!loggedInUser) {\n    throw new Meteor.Error(403, \"Not Logged In\");\n  } else if (!Roles.userIsInRole(loggedInUser._id, 'makeMusicProfile') && !Roles.userIsInRole(loggedInUser._id, 'admin')) {\n    throw new Meteor.Error(403, \"No Permission to Make Music Profile\");\n  }\n});\n\nMusicProfiles.after.insert(function (userId, doc) {\n  Roles.addUsersToRoles(doc.userId, ['becomeAccompanist', 'musician']);\n});\n\n// Accompanist Profile Server Side Hooks\n\nAccompanistProfiles.before.insert(function (userId, doc) {\n  var loggedInUser = Meteor.user();\n  if (!loggedInUser) {\n    throw new Meteor.Error(403, \"Not Logged In\");\n  } else if (!Roles.userIsInRole(loggedInUser._id, 'becomeAccompanist') && !Roles.userIsInRole(loggedInUser._id, 'admin')) {\n    throw new Meteor.Error(403, \"Must first make Music Profile\");\n  }\n});\n\nAccompanistProfiles.after.insert(function (userId, doc) {\n  var address = doc.mylocation;\n  var coded = getGeocode(address);\n\n  var lat = Number(coded[0].latitude);\n  var lng = Number(coded[0].longitude);\n  var coords_new = [lng, lat];\n  console.log(\"working Insert\");\n  AccompanistProfiles.update({ _id: doc._id }, { $set: { geolocation: coded[0], loc: { 'type': \"Point\", 'coordinates': coords_new } } }, { getAutoValues: false });\n  Roles.addUsersToRoles(userId, 'accompanist');\n});\n\nAccompanistProfiles.after.update(function (userId, doc, fieldNames, modifier, options) {\n\n  var address = doc.mylocation;\n\n  // take if outside to make more efficient!!!!!\n  var result = getGeocode(address);\n\n  var lat = Number(result[0].latitude);\n  var lng = Number(result[0].longitude);\n  var coords_new = [lng, lat];\n  var coords_db = doc.loc.coordinates;\n\n  if (coords_new[0] !== coords_db[0] && coords_new[1] !== coords_db[1]) {\n    console.log(\"updating\");\n    AccompanistProfiles.update({ _id: doc._id }, { $set: { geolocation: result[0], loc: { 'type': \"Point\", 'coordinates': coords_new } } }, { getAutoValues: false });\n  }\n  console.log(\"working_UPDATE nothing done\");\n}, { fetchPrevious: true });","ast":null,"map":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":"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","file":"/server/main.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { BasicProfiles } from '../collections/basicProfiles.js'\nimport { MusicProfiles } from '../collections/musicProfiles.js'\nimport { AccompanistProfiles } from '../collections/accompanistProfiles.js'\n\nMeteor.startup(() => {\n\n});\n\nvar geo = new GeoCoder();\n\nMeteor.methods({\n  getGeocode: function (arg) {\n    if (arg == 0){\n      return null\n    } else {\n    var result = geo.geocode(arg);\n    return result\n  }\n  },\n\n  insertFullRandomProfile: function(userId){\n    BasicProfiles.insert(createNewBasicProfile(userId), {getAutoValues: false});\n    MusicProfiles.insert(createNewMusicProfile(userId), {getAutoValues: false});\n    AccompanistProfiles.insert(createNewAccompanistProfile(userId), {getAutoValues: false});\n  },\n\n  insertRandomData: function(number) {\n    for (var i = 0; i < number; i++){\n      var genId = Random.id();\n      BasicProfiles.insert(createNewBasicProfile(genId), {getAutoValues: false});\n      MusicProfiles.insert(createNewMusicProfile(genId), {getAutoValues: false});\n      AccompanistProfiles.insert(createNewAccompanistProfile(genId), {getAutoValues: false});\n    }\n  },\n\n  divinify: function(userId) {\n    Roles.addUsersToRoles(userId, 'admin');\n  }\n\n});\n\n// Server Side hooks\n// CHANGE ADMIN SETTINGS WHEN DONE TESTING\n\nMeteor.users.after.insert(function (userId, doc){\n  Roles.addUsersToRoles(this._id, 'makeBasicProfile');\n});\n\n// Basic Profiles Server Side Hooks\n\nBasicProfiles.before.insert(function (userId, doc){\n  var loggedInUser = Meteor.user();\n  if(!loggedInUser){\n    throw new Meteor.Error(403, \"Not Logged In\");\n  }else if((!Roles.userIsInRole(loggedInUser._id, 'makeBasicProfile'))\n            &&(!Roles.userIsInRole(loggedInUser._id, 'admin'))){\n    throw new Meteor.Error(403, \"No Permission to Make Basic Profile\");\n  }\n});\n\nBasicProfiles.after.insert(function(userId, doc){\n  console.log(\"Basic Profile Made for\",doc.userId);\n  Roles.addUsersToRoles(doc.userId, 'makeMusicProfile');\n  Roles.addUsersToRoles(doc.userId, 'bookAccompanist');\n});\n\n\n// Music Profile Server Side Hooks\n\nMusicProfiles.before.insert(function (userId, doc){\n  var loggedInUser = Meteor.user();\n  if(!loggedInUser){\n    throw new Meteor.Error(403, \"Not Logged In\");\n  }else if((!Roles.userIsInRole(loggedInUser._id, 'makeMusicProfile'))\n            &&(!Roles.userIsInRole(loggedInUser._id, 'admin'))){\n    throw new Meteor.Error(403, \"No Permission to Make Music Profile\");\n  }\n});\n\nMusicProfiles.after.insert(function(userId, doc){\n  Roles.addUsersToRoles(doc.userId, ['becomeAccompanist', 'musician']);\n});\n\n\n\n// Accompanist Profile Server Side Hooks\n\nAccompanistProfiles.before.insert(function (userId, doc){\n  var loggedInUser = Meteor.user();\n  if(!loggedInUser){\n    throw new Meteor.Error(403, \"Not Logged In\");\n  }else if((!Roles.userIsInRole(loggedInUser._id, 'becomeAccompanist'))\n            &&(!Roles.userIsInRole(loggedInUser._id, 'admin'))){\n    throw new Meteor.Error(403, \"Must first make Music Profile\");\n  }\n});\n\nAccompanistProfiles.after.insert(function (userId, doc) {\n  var address = doc.mylocation;\n  var coded = getGeocode(address);\n\n  var lat = Number(coded[0].latitude);\n  var lng = Number(coded[0].longitude);\n  var coords_new = [lng, lat];\n  console.log(\"working Insert\")\n  AccompanistProfiles.update({_id: doc._id}, {$set: {geolocation : coded[0], loc: {'type': \"Point\", 'coordinates' : coords_new}}},{getAutoValues: false});\n  Roles.addUsersToRoles(userId, 'accompanist');\n});\n\nAccompanistProfiles.after.update(function (userId, doc, fieldNames, modifier, options) {\n\n  var address = doc.mylocation;\n\n  // take if outside to make more efficient!!!!!\n  var result = getGeocode(address);\n\n  var lat = Number(result[0].latitude);\n  var lng = Number(result[0].longitude);\n  var coords_new = [lng, lat];\n  var coords_db = doc.loc.coordinates\n\n  if (coords_new[0] !== coords_db[0] && coords_new[1] !== coords_db[1]) {\n    console.log(\"updating\")\n    AccompanistProfiles.update({_id: doc._id}, {$set: {geolocation : result[0], loc: {'type': \"Point\", 'coordinates' : coords_new}}},\n                                {getAutoValues: false});\n  }\n  console.log(\"working_UPDATE nothing done\")\n\n}, {fetchPrevious: true});\n"]},"hash":"279364c9202a05ba535e714bed3679a34a7c4486"}
