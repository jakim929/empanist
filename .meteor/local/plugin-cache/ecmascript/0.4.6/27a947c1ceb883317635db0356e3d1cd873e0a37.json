{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:core/lib/engines/minimongo.js","filenameRelative":"/packages/easysearch:core/lib/engines/minimongo.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:core/lib/engines/minimongo.js.map","sourceFileName":"/packages/easysearch:core/lib/engines/minimongo.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"minimongo"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * The MinimongEngine lets you search the index on the client-side.\n *\n * @type {MinimongoEngine}\n */\nMinimongoEngine = function (_Engine) {\n  (0, _inherits3['default'])(MinimongoEngine, _Engine);\n\n  function MinimongoEngine() {\n    (0, _classCallCheck3['default'])(this, MinimongoEngine);\n    return (0, _possibleConstructorReturn3['default'])(this, _Engine.apply(this, arguments));\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n  MinimongoEngine.prototype.defaultConfiguration = function () {\n    function defaultConfiguration() {\n      return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), _Engine.prototype.defaultConfiguration.call(this));\n    }\n\n    return defaultConfiguration;\n  }();\n\n  /**\n   * Search the index.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Object of options\n   *\n   * @returns {cursor}\n   */\n\n\n  MinimongoEngine.prototype.search = function () {\n    function search(searchDefinition, options) {\n      if (!Meteor.isClient) {\n        throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');\n      }\n\n      searchDefinition = this.transformSearchDefinition(searchDefinition, options);\n\n      // check() calls are in getSearchCursor method\n      return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);\n    }\n\n    return search;\n  }();\n\n  return MinimongoEngine;\n}(Engine);\n\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;\n\nMinimongoEngine.prototype.getFindOptions = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);\n\n  findOptions.transform = this.config.transform;\n\n  return findOptions;\n};","ast":null,"map":{"version":3,"sources":["/packages/easysearch:core/lib/engines/minimongo.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAKA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA,4BAME,oBANF;AAAA,oCAMyB;AACrB,aAAO,EAAE,QAAF,CAAW,EAAX,EAAe,cAAc,yBAAd,CAAwC,IAAxC,CAAf,EAA8D,kBAAM,oBAAN,WAA9D,CAAP;AACD;;AARH;AAAA;;;;;;;;;;;;AAAA,4BAkBE,MAlBF;AAAA,oBAkBS,gBAlBT,EAkB2B,OAlB3B,EAkBoC;AAChC,UAAI,CAAC,OAAO,QAAZ,EAAsB;AACpB,cAAM,IAAI,OAAO,KAAX,CAAiB,aAAjB,EAAgC,0CAAhC,CAAN;AACD;;AAED,yBAAmB,KAAK,yBAAL,CAA+B,gBAA/B,EAAiD,OAAjD,CAAnB;;;AAGA,aAAO,cAAc,SAAd,CAAwB,eAAxB,CAAwC,KAAxC,CAA8C,IAA9C,EAAoD,CAAC,gBAAD,EAAmB,OAAnB,CAApD,CAAP;AACD;;AA3BH;AAAA;;AAAA;AAAA,EAAgD,MAAhD;;AA8BA,gBAAgB,SAAhB,CAA0B,gBAA1B,GAA6C,eAAe,SAAf,CAAyB,gBAAtE;AACA,gBAAgB,SAAhB,CAA0B,yBAA1B,GAAsD,eAAe,SAAf,CAAyB,yBAA/E;;AAEA,gBAAgB,SAAhB,CAA0B,cAA1B,GAA2C,YAAmB;AAAA,oCAAN,IAAM;AAAN,QAAM;AAAA;;AAC5D,MAAI,cAAc,cAAc,SAAd,CAAwB,cAAxB,CAAuC,KAAvC,CAA6C,IAA7C,EAAmD,IAAnD,CAAlB;;AAEA,cAAY,SAAZ,GAAwB,KAAK,MAAL,CAAY,SAApC;;AAEA,SAAO,WAAP;AACD,CAND","file":"/packages/easysearch:core/lib/engines/minimongo.js.map","sourcesContent":["/**\n * The MinimongEngine lets you search the index on the client-side.\n *\n * @type {MinimongoEngine}\n */\nMinimongoEngine = class MinimongoEngine extends Engine {\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return _.defaults({}, MongoDBEngine.defaultMongoConfiguration(this), super.defaultConfiguration());\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Object of options\n   *\n   * @returns {cursor}\n   */\n  search(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Meteor.Error('only-client', 'Minimongo can only be used on the client');\n    }\n\n    searchDefinition = this.transformSearchDefinition(searchDefinition, options);\n\n    // check() calls are in getSearchCursor method\n    return MongoDBEngine.prototype.getSearchCursor.apply(this, [searchDefinition, options]);\n  }\n};\n\nMinimongoEngine.prototype.checkSearchParam = ReactiveEngine.prototype.checkSearchParam;\nMinimongoEngine.prototype.transformSearchDefinition = ReactiveEngine.prototype.transformSearchDefinition;\n\nMinimongoEngine.prototype.getFindOptions = function (...args) {\n  let findOptions = MongoDBEngine.prototype.getFindOptions.apply(this, args);\n\n  findOptions.transform = this.config.transform;\n\n  return findOptions;\n};\n"]},"hash":"27a947c1ceb883317635db0356e3d1cd873e0a37"}
