{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/emmerge:graviton/lib/relations.js","filenameRelative":"/packages/emmerge:graviton/lib/relations.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/emmerge:graviton/lib/relations.js.map","sourceFileName":"/packages/emmerge:graviton/lib/relations.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"relations"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction BelongsTo(model) {\n  var _this = this;\n\n  return function () {\n    return Graviton.getCollection(_this).findOne({\n      _id: model.get(_this.field)\n    });\n  };\n}\n\nfunction HasOne(model) {\n  var _this2 = this;\n\n  return function () {\n    var _Graviton$getCollecti;\n\n    return Graviton.getCollection(_this2).findOne((_Graviton$getCollecti = {}, _Graviton$getCollecti[_this2.foreignKey] = model._id, _Graviton$getCollecti));\n  };\n}\n\nvar relationGenerators = {\n  belongsTo: BelongsTo,\n  hasOne: HasOne,\n  hasMany: function () {\n    function hasMany(mdl) {\n      return new HasMany(mdl, this);\n    }\n\n    return hasMany;\n  }(),\n  belongsToMany: function () {\n    function belongsToMany(mdl) {\n      return new BelongsToMany(mdl, this);\n    }\n\n    return belongsToMany;\n  }(),\n  manyToMany: function () {\n    function manyToMany(mdl) {\n      return new ManyToMany(mdl, this);\n    }\n\n    return manyToMany;\n  }(),\n  hasAndBelongsToMany: function () {\n    function hasAndBelongsToMany(mdl) {\n      return new HasAndBelongsToMany(mdl, this);\n    }\n\n    return hasAndBelongsToMany;\n  }(),\n  embed: function () {\n    function embed(mdl) {\n      return new Embedded(mdl, this);\n    }\n\n    return embed;\n  }()\n};\nrelationGenerators.embeds = relationGenerators.embed;\nrelationGenerators.embedsMany = relationGenerators.embed;\n\nRelation = function (_MongoQuery) {\n  (0, _inherits3['default'])(Relation, _MongoQuery);\n\n  function Relation(model, config) {\n    (0, _classCallCheck3['default'])(this, Relation);\n\n    var _this3 = (0, _possibleConstructorReturn3['default'])(this, _MongoQuery.call(this, Graviton.getCollection(config)));\n\n    _this3.model = model;\n    _this3.config = config;\n    return _this3;\n  }\n\n  Relation.getGenerator = function () {\n    function getGenerator(type) {\n      return relationGenerators[type];\n    }\n\n    return getGenerator;\n  }();\n\n  Relation.supportedTypes = function () {\n    function supportedTypes() {\n      return Object.keys(relationGenerators);\n    }\n\n    return supportedTypes;\n  }();\n\n  (0, _createClass3['default'])(Relation, [{\n    key: 'field',\n    get: function () {\n      function get() {\n        return this.config.field || '_id';\n      }\n\n      return get;\n    }()\n  }, {\n    key: 'fieldValue',\n    get: function () {\n      function get() {\n        return this.model.get(this.field);\n      }\n\n      return get;\n    }()\n  }, {\n    key: 'foreignKey',\n    get: function () {\n      function get() {\n        return this.config.foreignKey || '_id';\n      }\n\n      return get;\n    }()\n  }]);\n  return Relation;\n}(MongoQuery);\n\n// array on this side of the association\n\nvar BelongsToMany = function (_Relation) {\n  (0, _inherits3['default'])(BelongsToMany, _Relation);\n\n  function BelongsToMany() {\n    (0, _classCallCheck3['default'])(this, BelongsToMany);\n    return (0, _possibleConstructorReturn3['default'])(this, _Relation.apply(this, arguments));\n  }\n\n  BelongsToMany.prototype.add = function () {\n    function add(modelOrAttrs) {\n      var related = _getModel.call(this, modelOrAttrs);\n      this.model.addToSet(this.field, related.get(this.foreignKey)).save();\n      return related;\n    }\n\n    return add;\n  }();\n\n  (0, _createClass3['default'])(BelongsToMany, [{\n    key: 'selector',\n    get: function () {\n      function get() {\n        var _ref;\n\n        return _ref = {}, _ref[this.field] = { $in: this.fieldValue }, _ref;\n      }\n\n      return get;\n    }()\n  }]);\n  return BelongsToMany;\n}(Relation);\n\n// foreign key\n\n\nvar HasMany = function (_Relation2) {\n  (0, _inherits3['default'])(HasMany, _Relation2);\n\n  function HasMany() {\n    (0, _classCallCheck3['default'])(this, HasMany);\n    return (0, _possibleConstructorReturn3['default'])(this, _Relation2.apply(this, arguments));\n  }\n\n  HasMany.prototype.add = function () {\n    function add(modelOrAttrs) {\n      var related = _getModel.call(this, modelOrAttrs);\n      related.set(this.foreignKey, this.fieldValue).save();\n      return related;\n    }\n\n    return add;\n  }();\n\n  (0, _createClass3['default'])(HasMany, [{\n    key: 'selector',\n    get: function () {\n      function get() {\n        var _ref2;\n\n        return _ref2 = {}, _ref2[this.foreignKey] = this.fieldValue, _ref2;\n      }\n\n      return get;\n    }()\n  }]);\n  return HasMany;\n}(Relation);\n\n// array on foreign side of relation\n\n\nvar HasAndBelongsToMany = function (_Relation3) {\n  (0, _inherits3['default'])(HasAndBelongsToMany, _Relation3);\n\n  function HasAndBelongsToMany() {\n    (0, _classCallCheck3['default'])(this, HasAndBelongsToMany);\n    return (0, _possibleConstructorReturn3['default'])(this, _Relation3.apply(this, arguments));\n  }\n\n  HasAndBelongsToMany.prototype.add = function () {\n    function add(modelOrAttrs) {\n      var related = _getModel.call(this, modelOrAttrs);\n      related.addToSet(this.foreignKey, this.fieldValue).save();\n      return related;\n    }\n\n    return add;\n  }();\n\n  (0, _createClass3['default'])(HasAndBelongsToMany, [{\n    key: 'selector',\n    get: function () {\n      function get() {\n        var _ref3;\n\n        return _ref3 = {}, _ref3[this.foreignKey] = this.fieldValue, _ref3;\n      }\n\n      return get;\n    }()\n  }]);\n  return HasAndBelongsToMany;\n}(Relation);\n\n// array on both sides of relation\n\n\nvar ManyToMany = function (_Relation4) {\n  (0, _inherits3['default'])(ManyToMany, _Relation4);\n\n  function ManyToMany() {\n    (0, _classCallCheck3['default'])(this, ManyToMany);\n    return (0, _possibleConstructorReturn3['default'])(this, _Relation4.apply(this, arguments));\n  }\n\n  ManyToMany.prototype.add = function () {\n    function add(modelOrAttrs, commonValue) {\n      var related = _getModel.call(this, modelOrAttrs);\n      this.model.addToSet(this.field, commonValue).save();\n      related.addToSet(this.foreignKey, commonValue).save();\n      return related;\n    }\n\n    return add;\n  }();\n\n  (0, _createClass3['default'])(ManyToMany, [{\n    key: 'selector',\n    get: function () {\n      function get() {\n        var _ref4;\n\n        return _ref4 = {}, _ref4[this.foreignKey] = { $in: this.fieldValue }, _ref4;\n      }\n\n      return get;\n    }()\n  }]);\n  return ManyToMany;\n}(Relation);\n\nfunction _getModel(modelOrAttrs) {\n  if (modelOrAttrs instanceof Graviton.Model) {\n    return modelOrAttrs;\n  } else {\n    return this.collection.build(modelOrAttrs);\n  }\n}\n\nvar Embedded = function () {\n  function Embedded(model, config) {\n    (0, _classCallCheck3['default'])(this, Embedded);\n\n    this.collection = Graviton.getCollection(config);\n    this.model = model;\n    this.config = config;\n  }\n\n  Embedded.prototype.get = function () {\n    function get(index) {\n      var _this8 = this;\n\n      var value = this.model.get(this.config.relationName);\n      if (_.isEmpty(value)) return value;\n\n      if (_.isArray(value)) {\n        if (!_.isUndefined(index)) {\n          value = value[index];\n          value = this.collection.build(value);\n        } else {\n          value = _.map(value, function (obj) {\n            return _this8.collection.build(obj);\n          });\n        }\n      } else {\n        value = this.collection.build(value);\n      }\n      return value;\n    }\n\n    return get;\n  }();\n\n  return Embedded;\n}();","ast":null,"map":{"version":3,"sources":["/packages/emmerge:graviton/lib/relations.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAT,CAAmB,KAAnB,EAA0B;;;AACxB,SAAO,YAAM;AACX,WAAO,SAAS,aAAT,QAA6B,OAA7B,CAAqC;AAC1C,WAAK,MAAM,GAAN,CAAU,MAAK,KAAL,CAAf;KADK,CAAP,CADW;GAAN,CADiB;CAA1B;;AAQA,SAAS,MAAT,CAAgB,KAAhB,EAAuB;;;AACrB,SAAO,YAAM;;;AACX,WAAO,SAAS,aAAT,SAA6B,OAA7B,oDACJ,OAAK,UAAL,IAAkB,MAAM,GAAN,wBADd,CAAP,CADW;GAAN,CADc;CAAvB;;AAQA,IAAM,qBAAqB;AACzB,aAAW,SAAX;AACA,UAAQ,MAAR;AACA;AAAS,qBAAS,GAAT,EAAc;AAAE,aAAO,IAAI,OAAJ,CAAY,GAAZ,EAAiB,IAAjB,CAAP,CAAF;KAAd;;;KAAT;AACA;AAAe,2BAAS,GAAT,EAAc;AAAE,aAAO,IAAI,aAAJ,CAAkB,GAAlB,EAAuB,IAAvB,CAAP,CAAF;KAAd;;;KAAf;AACA;AAAY,wBAAS,GAAT,EAAc;AAAE,aAAO,IAAI,UAAJ,CAAe,GAAf,EAAoB,IAApB,CAAP,CAAF;KAAd;;;KAAZ;AACA;AAAqB,iCAAS,GAAT,EAAc;AAAE,aAAO,IAAI,mBAAJ,CAAwB,GAAxB,EAA6B,IAA7B,CAAP,CAAF;KAAd;;;KAArB;AACA;AAAO,mBAAS,GAAT,EAAc;AAAE,aAAO,IAAI,QAAJ,CAAa,GAAb,EAAkB,IAAlB,CAAP,CAAF;KAAd;;;KAAP;CAPI;AASN,mBAAmB,MAAnB,GAA4B,mBAAmB,KAAnB;AAC5B,mBAAmB,UAAnB,GAAgC,mBAAmB,KAAnB;;AAEhC;6BAAiB;;AACf,WADe,QACf,CAAY,KAAZ,EAAmB,MAAnB,EAA2B;2CADZ,UACY;;mEACzB,uBAAM,SAAS,aAAT,CAAuB,MAAvB,CAAN,GADyB;;AAEzB,WAAK,KAAL,GAAa,KAAb,CAFyB;AAGzB,WAAK,MAAL,GAAc,MAAd,CAHyB;;GAA3B;;AADe,WAmBR;0BAAa,MAAM;AACxB,aAAO,mBAAmB,IAAnB,CAAP,CADwB;;;;;;AAnBX,WAuBR;8BAAiB;AACtB,aAAO,OAAO,IAAP,CAAY,kBAAZ,CAAP,CADsB;;;;;;gCAvBT;;;qBAOH;AACV,eAAO,KAAK,MAAL,CAAY,KAAZ,IAAqB,KAArB,CADG;;;;;;;;qBAIK;AACf,eAAO,KAAK,KAAL,CAAW,GAAX,CAAe,KAAK,KAAL,CAAtB,CADe;;;;;;;;qBAIA;AACf,eAAO,KAAK,MAAL,CAAY,UAAZ,IAA0B,KAA1B,CADQ;;;;;;SAfF;EAAiB,WAAlC;;;;IA6BM;;;;;;;;0BAKJ;iBAAI,cAAc;AAChB,UAAI,UAAU,UAAU,IAAV,CAAe,IAAf,EAAqB,YAArB,CAAV,CADY;AAEhB,WAAK,KAAL,CAAW,QAAX,CAAoB,KAAK,KAAL,EAAY,QAAQ,GAAR,CAAY,KAAK,UAAL,CAA5C,EAA8D,IAA9D,GAFgB;AAGhB,aAAO,OAAP,CAHgB;;;;;;gCALd;;;qBACW;;;AACb,+BAAS,KAAK,KAAL,IAAa,EAAC,KAAK,KAAK,UAAL,QAA5B,CADa;;;;;;SADX;EAAsB;;;;;IAatB;;;;;;;;oBAKJ;iBAAI,cAAc;AAChB,UAAI,UAAU,UAAU,IAAV,CAAe,IAAf,EAAqB,YAArB,CAAV,CADY;AAEhB,cAAQ,GAAR,CAAY,KAAK,UAAL,EAAiB,KAAK,UAAL,CAA7B,CAA8C,IAA9C,GAFgB;AAGhB,aAAO,OAAP,CAHgB;;;;;;gCALd;;;qBACW;;;AACb,iCAAS,KAAK,UAAL,IAAkB,KAAK,UAAL,OAA3B,CADa;;;;;;SADX;EAAgB;;;;;IAahB;;;;;;;;gCAKJ;iBAAI,cAAc;AAChB,UAAI,UAAU,UAAU,IAAV,CAAe,IAAf,EAAqB,YAArB,CAAV,CADY;AAEhB,cAAQ,QAAR,CAAiB,KAAK,UAAL,EAAiB,KAAK,UAAL,CAAlC,CAAmD,IAAnD,GAFgB;AAGhB,aAAO,OAAP,CAHgB;;;;;;gCALd;;;qBACW;;;AACb,iCAAS,KAAK,UAAL,IAAkB,KAAK,UAAL,OAA3B,CADa;;;;;;SADX;EAA4B;;;;;IAa5B;;;;;;;;uBAKJ;iBAAI,cAAc,aAAa;AAC7B,UAAI,UAAU,UAAU,IAAV,CAAe,IAAf,EAAqB,YAArB,CAAV,CADyB;AAE7B,WAAK,KAAL,CAAW,QAAX,CAAoB,KAAK,KAAL,EAAY,WAAhC,EAA6C,IAA7C,GAF6B;AAG7B,cAAQ,QAAR,CAAiB,KAAK,UAAL,EAAiB,WAAlC,EAA+C,IAA/C,GAH6B;AAI7B,aAAO,OAAP,CAJ6B;;;;;;gCAL3B;;;qBACW;;;AACb,iCAAS,KAAK,UAAL,IAAkB,EAAC,KAAK,KAAK,UAAL,SAAjC,CADa;;;;;;SADX;EAAmB;;AAazB,SAAS,SAAT,CAAmB,YAAnB,EAAiC;AAC/B,MAAI,wBAAwB,SAAS,KAAT,EAAgB;AAC1C,WAAO,YAAP,CAD0C;GAA5C,MAEO;AACL,WAAO,KAAK,UAAL,CAAgB,KAAhB,CAAsB,YAAtB,CAAP,CADK;GAFP;CADF;;IAQM;AACJ,WADI,QACJ,CAAY,KAAZ,EAAmB,MAAnB,EAA2B;2CADvB,UACuB;;AACzB,SAAK,UAAL,GAAkB,SAAS,aAAT,CAAuB,MAAvB,CAAlB,CADyB;AAEzB,SAAK,KAAL,GAAa,KAAb,CAFyB;AAGzB,SAAK,MAAL,GAAc,MAAd,CAHyB;GAA3B;;AADI,qBAOJ;iBAAI,OAAO;;;AACT,UAAI,QAAQ,KAAK,KAAL,CAAW,GAAX,CAAe,KAAK,MAAL,CAAY,YAAZ,CAAvB,CADK;AAET,UAAI,EAAE,OAAF,CAAU,KAAV,CAAJ,EAAsB,OAAO,KAAP,CAAtB;;AAEA,UAAI,EAAE,OAAF,CAAU,KAAV,CAAJ,EAAsB;AACpB,YAAI,CAAC,EAAE,WAAF,CAAc,KAAd,CAAD,EAAuB;AACzB,kBAAQ,MAAM,KAAN,CAAR,CADyB;AAEzB,kBAAQ,KAAK,UAAL,CAAgB,KAAhB,CAAsB,KAAtB,CAAR,CAFyB;SAA3B,MAGO;AACL,kBAAQ,EAAE,GAAF,CAAM,KAAN,EAAa,UAAC,GAAD,EAAS;AAC5B,mBAAQ,OAAK,UAAL,CAAgB,KAAhB,CAAsB,GAAtB,CAAR,CAD4B;WAAT,CAArB,CADK;SAHP;OADF,MASO;AACL,gBAAQ,KAAK,UAAL,CAAgB,KAAhB,CAAsB,KAAtB,CAAR,CADK;OATP;AAYA,aAAO,KAAP,CAhBS;;;;;;SAPP","file":"/packages/emmerge:graviton/lib/relations.js.map","sourcesContent":["function BelongsTo(model) {\n  return () => {\n    return Graviton.getCollection(this).findOne({\n      _id: model.get(this.field)\n    });\n  };\n}\n\nfunction HasOne(model) {\n  return () => {\n    return Graviton.getCollection(this).findOne({\n      [this.foreignKey]: model._id\n    });\n  };\n}\n\nconst relationGenerators = {\n  belongsTo: BelongsTo,\n  hasOne: HasOne,\n  hasMany: function(mdl) { return new HasMany(mdl, this); },\n  belongsToMany: function(mdl) { return new BelongsToMany(mdl, this); },\n  manyToMany: function(mdl) { return new ManyToMany(mdl, this); },\n  hasAndBelongsToMany: function(mdl) { return new HasAndBelongsToMany(mdl, this); },\n  embed: function(mdl) { return new Embedded(mdl, this); }\n};\nrelationGenerators.embeds = relationGenerators.embed;\nrelationGenerators.embedsMany = relationGenerators.embed;\n\nRelation = class Relation extends MongoQuery {\n  constructor(model, config) {\n    super(Graviton.getCollection(config));\n    this.model = model;\n    this.config = config;\n  }\n\n  get field() {\n    return this.config.field || '_id';\n  }\n\n  get fieldValue() {\n    return this.model.get(this.field);\n  }\n\n  get foreignKey() {\n    return this.config.foreignKey || '_id';\n  }\n\n  static getGenerator(type) {\n    return relationGenerators[type];\n  }\n\n  static supportedTypes() {\n    return Object.keys(relationGenerators);\n  }\n};\n\n// array on this side of the association\nclass BelongsToMany extends Relation {\n  get selector() {\n    return {[this.field]: {$in: this.fieldValue}};\n  }\n\n  add(modelOrAttrs) {\n    var related = _getModel.call(this, modelOrAttrs);\n    this.model.addToSet(this.field, related.get(this.foreignKey)).save();\n    return related;\n  }\n}\n\n// foreign key\nclass HasMany extends Relation {\n  get selector() {\n    return {[this.foreignKey]: this.fieldValue};\n  }\n\n  add(modelOrAttrs) {\n    var related = _getModel.call(this, modelOrAttrs);\n    related.set(this.foreignKey, this.fieldValue).save();\n    return related;\n  }\n}\n\n// array on foreign side of relation\nclass HasAndBelongsToMany extends Relation {\n  get selector() {\n    return {[this.foreignKey]: this.fieldValue};\n  }\n\n  add(modelOrAttrs) {\n    var related = _getModel.call(this, modelOrAttrs);\n    related.addToSet(this.foreignKey, this.fieldValue).save();\n    return related;\n  }\n}\n\n// array on both sides of relation\nclass ManyToMany extends Relation {\n  get selector() {\n    return {[this.foreignKey]: {$in: this.fieldValue}};\n  }\n\n  add(modelOrAttrs, commonValue) {\n    var related = _getModel.call(this, modelOrAttrs);\n    this.model.addToSet(this.field, commonValue).save();\n    related.addToSet(this.foreignKey, commonValue).save();\n    return related;\n  }\n}\n\nfunction _getModel(modelOrAttrs) {\n  if (modelOrAttrs instanceof Graviton.Model) {\n    return modelOrAttrs;\n  } else {\n    return this.collection.build(modelOrAttrs);\n  }\n}\n\nclass Embedded {\n  constructor(model, config) {\n    this.collection = Graviton.getCollection(config);\n    this.model = model;\n    this.config = config;\n  }\n\n  get(index) {\n    var value = this.model.get(this.config.relationName);\n    if (_.isEmpty(value)) return value;\n\n    if (_.isArray(value)) {\n      if (!_.isUndefined(index)) {\n        value = value[index];\n        value = this.collection.build(value);\n      } else {\n        value = _.map(value, (obj) => {\n          return  this.collection.build(obj);\n        });\n      }\n    } else {\n      value = this.collection.build(value);\n    }\n    return value;\n  }\n}\n"]},"hash":"36683618ebfde37e1976e6570c0407fa785fd7b7"}
