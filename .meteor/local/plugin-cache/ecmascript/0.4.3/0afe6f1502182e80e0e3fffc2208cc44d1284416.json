{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../collections/account.js","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"../collections/musicProfile.js","imported":["MusicProfiles"],"specifiers":[{"kind":"named","imported":"MusicProfiles","local":"MusicProfiles"}]},{"source":"../collections/accompanistProfile.js","imported":["AccompanistProfile"],"specifiers":[{"kind":"named","imported":"AccompanistProfile","local":"AccompanistProfile"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/main.js","filenameRelative":"/server/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/main.js.map","sourceFileName":"/server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var _meteor = require('meteor/meteor');\n\nvar _account = require('../collections/account.js');\n\nvar _musicProfile = require('../collections/musicProfile.js');\n\nvar _accompanistProfile = require('../collections/accompanistProfile.js');\n\n_meteor.Meteor.startup(function () {});\n\n_meteor.Meteor.methods({\n  getGeocode: function () {\n    function getGeocode(arg) {\n      var geo = new GeoCoder();\n      var result = geo.geocode(arg);\n      return result;\n    }\n\n    return getGeocode;\n  }(),\n\n  insertFullRandomProfile: function () {\n    function insertFullRandomProfile(userId) {\n      _account.Accounts.insert(createNewAccount(userId), { getAutoValues: false });\n      _musicProfile.MusicProfiles.insert(createNewMusicProfile(userId), { getAutoValues: false });\n      _accompanistProfile.AccompanistProfile.insert(createNewAccompanistProfile(userId), { getAutoValues: false });\n    }\n\n    return insertFullRandomProfile;\n  }(),\n\n  insertRandomData: function () {\n    function insertRandomData(number) {\n      for (var i = 0; i < number; i++) {\n        var genId = Random.id();\n        _account.Accounts.insert(createNewAccount(genId), { getAutoValues: false });\n        _musicProfile.MusicProfiles.insert(createNewMusicProfile(genId), { getAutoValues: false });\n        _accompanistProfile.AccompanistProfile.insert(createNewAccompanistProfile(genId), { getAutoValues: false });\n      }\n    }\n\n    return insertRandomData;\n  }()\n\n});\n\n_meteor.Meteor.publishComposite('accompanistResults', {\n  find: function () {\n    function find() {\n      // Find top ten highest scoring posts\n      return _accompanistProfile.AccompanistProfile.find({\n        loc: { $near: {\n            $geometry: { type: \"Point\", coordinates: coords },\n            $maxDistance: 20000\n          }\n        },\n        startDate: { $lte: sd, $lte: ed },\n        endDate: { $gte: sd, $gte: ed } });\n    }\n\n    return find;\n  }(),\n  children: [{\n    find: function () {\n      function find(account) {\n        // Find post author. Even though we only want to return\n        // one record here, we use \"find\" instead of \"findOne\"\n        // since this function should return a cursor.\n        return _meteor.Meteor.accounts.find({ userId: accompanists.Id });\n      }\n\n      return find;\n    }()\n  }]\n});","ast":null,"map":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":"AAAA;;AACA;;AACA;;AACA;;AAEA,eAAO,OAAP,CAAe,YAAM,EAAN,CAAf;;AAIA,eAAO,OAAP,CAAe;AACb;AAAY,wBAAU,GAAV,EAAe;AACzB,UAAI,MAAM,IAAI,QAAJ,EAAN,CADqB;AAEzB,UAAI,SAAS,IAAI,OAAJ,CAAY,GAAZ,CAAT,CAFqB;AAGzB,aAAO,MAAP,CAHyB;KAAf;;;KAAZ;;AAMA;AAAyB,qCAAS,MAAT,EAAgB;AACvC,wBAAS,MAAT,CAAgB,iBAAiB,MAAjB,CAAhB,EAA0C,EAAC,eAAe,KAAf,EAA3C,EADuC;AAEvC,kCAAc,MAAd,CAAqB,sBAAsB,MAAtB,CAArB,EAAoD,EAAC,eAAe,KAAf,EAArD,EAFuC;AAGvC,6CAAmB,MAAnB,CAA0B,4BAA4B,MAA5B,CAA1B,EAA+D,EAAC,eAAe,KAAf,EAAhE,EAHuC;KAAhB;;;KAAzB;;AAMA;AAAkB,8BAAS,MAAT,EAAiB;AACjC,WAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAJ,EAAY,GAA5B,EAAgC;AAC9B,YAAI,QAAQ,OAAO,EAAP,EAAR,CAD0B;AAE9B,0BAAS,MAAT,CAAgB,iBAAiB,KAAjB,CAAhB,EAAyC,EAAC,eAAe,KAAf,EAA1C,EAF8B;AAG9B,oCAAc,MAAd,CAAqB,sBAAsB,KAAtB,CAArB,EAAmD,EAAC,eAAe,KAAf,EAApD,EAH8B;AAI9B,+CAAmB,MAAnB,CAA0B,4BAA4B,KAA5B,CAA1B,EAA8D,EAAC,eAAe,KAAf,EAA/D,EAJ8B;OAAhC;KADgB;;;KAAlB;;CAbF;;AAyBA,eAAO,gBAAP,CAAwB,oBAAxB,EAA8C;AAC1C;AAAM,oBAAW;;AAEb,aAAO,uCAAmB,IAAnB,CAAwB;AAC7B,aACE,EAAE,OACA;AACE,uBAAW,EAAE,MAAM,OAAN,EAAgB,aAAa,MAAb,EAA7B;AACA,0BAAc,KAAd;WAHF;SADJ;AAOA,mBAAY,EAAC,MAAM,EAAN,EAAU,MAAM,EAAN,EAAvB;AACA,iBAAS,EAAC,MAAM,EAAN,EAAU,MAAM,EAAN,EAApB,EATK,CAAP,CAFa;KAAX;;;KAAN;AAaC,YAAU,CACN;AACI;AAAM,oBAAS,OAAT,EAAkB;;;;AAIpB,eAAO,eAAO,QAAP,CAAgB,IAAhB,CACH,EAAE,QAAQ,aAAa,EAAb,EADP,CAAP,CAJoB;OAAlB;;;OAAN;GAFE,CAAV;CAdL","file":"/server/main.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from '../collections/account.js'\nimport { MusicProfiles } from '../collections/musicProfile.js'\nimport { AccompanistProfile } from '../collections/accompanistProfile.js'\n\nMeteor.startup(() => {\n\n});\n\nMeteor.methods({\n  getGeocode: function (arg) {\n    var geo = new GeoCoder();\n    var result = geo.geocode(arg);\n    return result\n  },\n\n  insertFullRandomProfile: function(userId){\n    Accounts.insert(createNewAccount(userId), {getAutoValues: false});\n    MusicProfiles.insert(createNewMusicProfile(userId), {getAutoValues: false});\n    AccompanistProfile.insert(createNewAccompanistProfile(userId), {getAutoValues: false});\n  },\n\n  insertRandomData: function(number) {\n    for (var i = 0; i < number; i++){\n      var genId = Random.id();\n      Accounts.insert(createNewAccount(genId), {getAutoValues: false});\n      MusicProfiles.insert(createNewMusicProfile(genId), {getAutoValues: false});\n      AccompanistProfile.insert(createNewAccompanistProfile(genId), {getAutoValues: false});\n    }\n\n  }\n  \n});\n\nMeteor.publishComposite('accompanistResults', {\n    find: function() {\n        // Find top ten highest scoring posts\n        return AccompanistProfile.find({\n          loc:\n            { $near :\n              {\n                $geometry: { type: \"Point\",  coordinates: coords },\n                $maxDistance: 20000\n              }\n            },\n          startDate:  {$lte: sd, $lte: ed},\n          endDate: {$gte: sd, $gte: ed}})\n    },\n\t    children: [\n\t        {\n\t            find: function(account) {\n\t                // Find post author. Even though we only want to return\n\t                // one record here, we use \"find\" instead of \"findOne\"\n\t                // since this function should return a cursor.\n\t                return Meteor.accounts.find(\n\t                    { userId: accompanists.Id });\n\t            }\n\t        }\n\t    ]\n});\n"]},"hash":"0afe6f1502182e80e0e3fffc2208cc44d1284416"}
