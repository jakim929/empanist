{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../collections/musicProfile.js","imported":["MusicProfiles"],"specifiers":[{"kind":"named","imported":"MusicProfiles","local":"MusicProfiles"}]},{"source":"../collections/accompanistProfile.js","imported":["AccompanistProfile"],"specifiers":[{"kind":"named","imported":"AccompanistProfile","local":"AccompanistProfile"}]},{"source":"../collections/account.js","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"../collections/competitions.js","imported":["MusicCompetitions"],"specifiers":[{"kind":"named","imported":"MusicCompetitions","local":"MusicCompetitions"}]},{"source":"../collections/transactions.js","imported":["Transactions"],"specifiers":[{"kind":"named","imported":"Transactions","local":"Transactions"}]},{"source":"../collections/testData.js","imported":["TestAccountData"],"specifiers":[{"kind":"named","imported":"TestAccountData","local":"TestAccountData"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/main.js","filenameRelative":"/client/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/main.js.map","sourceFileName":"/client/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var _musicProfile = require('../collections/musicProfile.js');\n\nvar _accompanistProfile = require('../collections/accompanistProfile.js');\n\nvar _account = require('../collections/account.js');\n\nvar _competitions = require('../collections/competitions.js');\n\nvar _transactions = require('../collections/transactions.js');\n\nvar _testData = require('../collections/testData.js');\n\nwindow.MusicProfiles = _musicProfile.MusicProfiles;\nwindow.AccompanistProfile = _accompanistProfile.AccompanistProfile;\nwindow.Accounts = _account.Accounts;\nwindow.MusicCompetitions = _competitions.MusicCompetitions;\nwindow.Transactions = _transactions.Transactions;\n\n// Helper functions\n\nfunction wrapDoc(obj) {\n  if (obj) {\n    return { field: \"update\", doc: obj };\n  } else {\n    return { field: \"insert\", doc: null };\n  }\n}\n\n// Javascript Component Initialization\n\nTemplate.CollapsibleStructure.onRendered(function () {\n  $('.collapsible').collapsible({\n    accordion: false\n  });\n});\n\nTemplate.TabStructure.onRendered(function () {\n  $('ul.tabs').tabs();\n});\n\nTemplate.login.onRendered(function () {\n  $(\".dropdown-button\").dropdown({\n    inDuration: 300,\n    outDuration: 700,\n    belowOrigin: true,\n    alignment: 'right'\n  });\n});\n\n// On creation\n\nTemplate.MainLayout.onCreated(function () {\n  this.navbarFields = new ReactiveVar(['myProfile', 'accompanistDashboard', 'bookings', 'login']);\n});\n\n// ==Global Template Helpers==\n\n// Get Current User's Account\nTemplate.registerHelper('myAccount', function () {\n  return _account.Accounts.findOne({ userId: Meteor.userId() });\n});\n\n// Get Current User's Music Profile\nTemplate.registerHelper('myProfile', function () {\n  return _musicProfile.MusicProfiles.findOne({ userId: Meteor.userId() });\n});\n\n// Get Current Route's Accompanist Profile\nTemplate.registerHelper('myAccompanistProfile', function () {\n  return _accompanistProfile.AccompanistProfile.findOne({ Id: Meteor.userId() });\n});\n\nTemplate.registerHelper('routeAccount', function () {\n  return _account.Accounts.findOne({ userId: FlowRouter.getParam(\"profileId\") });\n});\n\n// Get Current Route's Music Profile\nTemplate.registerHelper('routeProfile', function () {\n  return _musicProfile.MusicProfiles.findOne({ userId: FlowRouter.getParam(\"profileId\") });\n});\n\n// Get Current Route's Accompanist Profile\nTemplate.registerHelper('routeAccompanistProfile', function () {\n  return _accompanistProfile.AccompanistProfile.findOne({ Id: FlowRouter.getParam(\"profileId\") });\n});\n\nTemplate.registerHelper('sentBookingRequests', function () {\n  return _transactions.Transactions.find({ musician: Meteor.userId() }).fetch();\n});\n\nTemplate.registerHelper('receivedBookingRequests', function () {\n  return _transactions.Transactions.find({ accompanist: Meteor.userId() }).fetch();\n});\n\nTemplate.registerHelper('accountById', function (id) {\n  return _account.Accounts.findOne({ userId: id });\n});\n\nTemplate.registerHelper('profileById', function (id) {\n  return _musicProfile.MusicProfiles.findOne({ userId: id });\n});\n\nTemplate.registerHelper('accompanistProfileById', function (id) {\n  return _accompanistProfile.AccompanistProfile.findOne({ Id: id });\n});\n\nTemplate.registerHelper('routeTransaction', function () {\n  return _transactions.Transactions.findOne({ _id: FlowRouter.getParam(\"transactionId\") });\n});\n\nTemplate.registerHelper('isOwnProfile', function () {\n  return FlowRouter.getParam(\"profileId\") == Meteor.userId();\n});\n\n// Get Elements of the Navbar Fields for the User\nTemplate.registerHelper('navbarFields', function () {\n  return Template.instance().navbarFields.get();\n});\n\n// Old Global Template Helpers\n\nTemplate.registerHelper('pendingTransactions', function (array) {\n  return array.filter(function (element, index, array) {\n    return element.status == \"Pending\";\n  });\n});\n\nTemplate.registerHelper('confirmedTransactions', function (array) {\n  return array.filter(function (element, index, array) {\n    return element.status == \"Confirmed\";\n  });\n});\n\nTemplate.registerHelper('completedTransactions', function (array) {\n  return array.filter(function (element, index, array) {\n    return element.status == \"Completed\";\n  });\n});\n\nTemplate.registerHelper('cancelledTransactions', function (array) {\n  return array.filter(function (element, index, array) {\n    return element.status == \"Completed\";\n  });\n});\n\nTemplate.registerHelper('arrayLength', function (array) {\n  return array.length;\n});\n\nTemplate.registerHelper('validId', function () {\n  // For now it is set to looking up in Accounts instead of Meteor.users\n  // Makes it work with test data\n  // if (Meteor.users.findOne(FlowRouter.getParam(\"profileId\"))){\n\n  if (_account.Accounts.findOne({ userId: FlowRouter.getParam(\"profileId\") })) {\n    return true;\n  } else {\n    return false;\n  }\n});\n\nTemplate.registerHelper('defaultTransaction', function () {\n  return { musician: Meteor.userId(),\n    accompanist: FlowRouter.getParam(\"profileId\"),\n    status: 'Pending' };\n});\n\nTemplate.registerHelper('ownProfile', function () {\n  event.preventDefault();\n\n  return FlowRouter.getParam(\"profileId\") == Meteor.userId();\n});\n\nTemplate.registerHelper('userId', function () {\n  event.preventDefault();\n  return Meteor.userId();\n});\n\nTemplate.registerHelper('getProfileRoute', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? Meteor.userId() : arguments[0];\n\n  return \"/profile/\" + id;\n});\n\nTemplate.registerHelper('getBookingRoute', function (bookingId) {\n  return \"/bookingRequest/\" + bookingId;\n});\n\nTemplate.registerHelper('transactionsAsAccompanist', function () {\n  return _transactions.Transactions.find({ accompanist: Meteor.userId() }).fetch();\n});\n\nTemplate.registerHelper('transactionsAsMusician', function () {\n  return _transactions.Transactions.find({ musician: Meteor.userId() }).fetch();\n});\n\nTemplate.registerHelper('transactionsDoc', function () {\n  event.preventDefault();\n  var allTransactions = { asMusician: _transactions.Transactions.find({ musician: Meteor.userId() }).fetch(),\n    asAccompanist: _transactions.Transactions.find({ accompanist: Meteor.userId() }).fetch() };\n  return allTransactions;\n});\n\nTemplate.registerHelper('transactionById', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? FlowRouter.getParam(\"transactionId\") : arguments[0];\n\n  event.preventDefault();\n  // Only return if the user is the accompanist listed\n  return _transactions.Transactions.findOne({ _id: id, accompanist: Meteor.userId() });\n});\n\nTemplate.registerHelper('profileDoc', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? FlowRouter.getParam(\"profileId\") : arguments[0];\n\n  event.preventDefault();\n  if (!id) {\n    id = Meteor.userId();\n  }\n  return wrapDoc(_musicProfile.MusicProfiles.findOne({ userId: id }));\n});\n\nTemplate.registerHelper('accountDoc', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? FlowRouter.getParam(\"profileId\") : arguments[0];\n\n  event.preventDefault();\n  if (!id) {\n    id = Meteor.userId();\n  }\n  return wrapDoc(_account.Accounts.findOne({ userId: id }));\n});\n\nTemplate.registerHelper('accompanistProfileDoc', function () {\n  var id = arguments.length <= 0 || arguments[0] === undefined ? FlowRouter.getParam(\"profileId\") : arguments[0];\n\n  event.preventDefault();\n  if (!id) {\n    id = Meteor.userId();\n  }\n  return wrapDoc(_accompanistProfile.AccompanistProfile.findOne({ Id: Meteor.userId() }));\n});\n\nTemplate.registerHelper('musicCompetitionsDoc', function () {\n  event.preventDefault();\n  // array =  MusicCompetitions.find().fetch();\n  return [{ label: \"First Manhattan International Music Competition\", value: \"First Manhattan International Music Competition\" }];\n});\n\n// Local Template On Created\n\nTemplate.upsertProfileForm.onCreated(function () {\n  this.formType = new ReactiveVar('insert');\n});\n\nTemplate.upsertAccountForm.onCreated(function () {\n  this.formType = new ReactiveVar('insert');\n});\n\nTemplate.upsertAccompanistForm.onCreated(function () {\n  this.formType = new ReactiveVar('insert');\n});\n\n// Local Template Helpers\n\nTemplate.upsertProfileForm.helpers({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentProfile: function () {\n    function currentProfile() {\n      var currentProfile = _musicProfile.MusicProfiles.findOne({ userId: Meteor.userId() });\n      if (currentProfile) {\n        Template.instance().formType.set('update');\n        return currentProfile;\n      }\n    }\n\n    return currentProfile;\n  }(),\n\n  formType: function () {\n    function formType() {\n      var formType = Template.instance().formType.get();\n      return formType;\n    }\n\n    return formType;\n  }(),\n\n  instrumentList: function () {\n    function instrumentList() {\n      return [\"Voice\", \"Bagpipes\", \"Banjo\", \"Bass drum\", \"Bassoon\", \"Bell\", \"Bongo\", \"Castanets\", \"Cello\", \"Clarinet\", \"Clavichord\", \"Conga drum\", \"Contrabassoon\", \"Cornet\", \"Cymbals\", \"Double bass\", \"Dulcian\", \"Dynamophone\", \"Flute\", \"Flutophone\", \"Glockenspiel\", \"Gongs\", \"Guitar\", \"Harmonica\", \"Harp\", \"Harpsichord\", \"Lute\", \"Mandolin\", \"Maracas\", \"Metallophone\", \"Musical box\", \"Oboe\", \"Ondes-Martenot\", \"Piano\", \"Recorder\", \"Saxophone\", \"Shawm\", \"Snare drum\", \"Steel drum\", \"Tambourine\", \"Theremin\", \"Triangle\", \"Trombone\", \"Trumpet\", \"Tuba\", \"Ukulele\", \"Viola\", \"Violin\", \"Xylophone\", \"Zither\"].map(function (obj) {\n        return { label: obj, value: obj };\n      });\n    }\n\n    return instrumentList;\n  }()\n});\n\nTemplate.upsertAccountForm.helpers({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentAccount: function () {\n    function currentAccount() {\n      var currentAccount = _account.Accounts.findOne({ userId: Meteor.userId() });\n      if (currentAccount) {\n        Template.instance().formType.set('update');\n        return currentAccount;\n      }\n    }\n\n    return currentAccount;\n  }(),\n\n  formType: function () {\n    function formType() {\n      var formType = Template.instance().formType.get();\n      return formType;\n    }\n\n    return formType;\n  }()\n});\n\nTemplate.upsertAccompanistForm.helpers({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentAccompanistProfile: function () {\n    function currentAccompanistProfile() {\n      var currentAccompanistProfile = _accompanistProfile.AccompanistProfile.findOne({ Id: Meteor.userId() });\n      if (currentAccompanistProfile) {\n        Template.instance().formType.set('update');\n        return currentAccompanistProfile;\n      }\n    }\n\n    return currentAccompanistProfile;\n  }(),\n\n  formType: function () {\n    function formType() {\n      var formType = Template.instance().formType.get();\n      return formType;\n    }\n\n    return formType;\n  }()\n});\n\n// Attempt to create relations between collections\n\n// AccompModel = Graviton.Model.extend({\n\n//   belongsTo: {\n//     account: {\n//       collection: 'Accounts',\n//       foreignKey: 'userId'\n//     }\n//   }\n// },{});\n\n// Accompanist = Graviton.define(\"AccompanistProfile\", {\n//   belongsTo: {\n//     account: {\n//       collection: 'Accounts',\n//       foreignKey: 'userId'\n//     }\n//   }\n// });\n\n// AccountModel = Graviton.Model.extend({\n//   belongsTo: {\n//     accompprofile: {\n//       collection: 'AccompanistProfile',\n//       foreignKey: 'Id'\n//     }\n//   }\n// },{});\n\n// Account = Graviton.define(\"Accounts\", {\n//   belongsTo: {\n//     accompprofile: {\n//       collection: 'AccompanistProfile',\n//       foreignKey: 'Id'\n//     }\n//   }\n// });\n\n//Meteor.subscribe('results');\n\nTemplate.results.helpers({\n\n  //  var coords = Session.get('coords')\n\n  //   //convert dates to dates that can be compared with Mongo schema\n  // var sd = new Date(Session.get('start_date'))\n  // var ed = new Date(Session.get('end_date'))\n\n  accompanists: function () {\n    function accompanists() {\n      var coords = Session.get('coords');\n\n      //convert dates to dates that can be compared with Mongo schema\n      var sd = new Date(Session.get('start_date'));\n      var ed = new Date(Session.get('end_date'));\n\n      console.log(coords);\n      console.log(sd);\n      console.log(ed);\n\n      if (coords && sd && ed) {\n        console.log(\"search all\");\n        return _accompanistProfile.AccompanistProfile.find({\n          loc: { $near: {\n              $geometry: { type: \"Point\", coordinates: coords },\n              $maxDistance: 20000\n            }\n          },\n          startDate: { $lte: sd, $lte: ed },\n          endDate: { $gte: sd, $gte: ed } }).fetch();\n      } // else if (sd && ed){\n      //   console.log(\"search sd and ed\")\n\n      //   return AccompanistProfile.find({\n      //     startDate:  {$lte: sd, $lte: ed},\n      //     endDate: {$gte: sd, $gte: ed}}).fetch();\n      // } else if (coords){\n      //   console.log(\"search coords\")\n\n      //   return AccompanistProfile.find({\n      //     loc:\n      //       { $near :\n      //         {\n      //           $geometry: { type: \"Point\",  coordinates: coords },\n      //           $maxDistance: 20000\n      //         }\n      //       }}).fetch();\n      else {\n          console.log(\"search null\");\n\n          return null;\n        }\n    }\n\n    return accompanists;\n  }(),\n\n  accompname: function () {\n    function accompname() {\n      // We use this helper inside the {{#each posts}} loop, so the context\n      // will be a post object. Thus, we can use this.authorId.\n      var names = _account.Accounts.findOne({ userId: this.Id });\n      //console.log(names)\n\n      return names;\n    }\n\n    return accompname;\n  }()\n\n});\n\n// accompanists: ()=> {\n// var coords = Session.get('coords')\n\n// // convert dates to dates that can be compared with Mongo schema\n// var sd = new Date(Session.get('start_date'))\n// var ed = new Date(Session.get('end_date'))\n\n//   if (coords && sd && ed) {\n//   console.log(\"search all\")\n\n//     var pipeline = [\n//       {$group: {}}\n//     ]\n\n//     var accompProfs =\n//       AccompanistProfile.find({\n//         loc:\n//           { $near :\n//             {\n//               $geometry: { type: \"Point\",  coordinates: coords },\n//               $maxDistance: 20000\n//             }\n//           },\n//         startDate:  {$lte: sd, $lte: ed},\n//         endDate: {$gte: sd, $gte: ed}}).fetch()\n\n//return accompProfs //, accompAccounts]\n//}\n// accompanists: ()=> {\n// var coords = Session.get('coords')\n\n// // convert dates to dates that can be compared with Mongo schema\n// var sd = new Date(Session.get('start_date'))\n// var ed = new Date(Session.get('end_date'))\n\n//   if (coords && sd && ed) {\n//   console.log(\"search all\")\n//     return AccompanistProfile.find({\n//       loc:\n//         { $near :\n//           {\n//             $geometry: { type: \"Point\",  coordinates: coords },\n//             $maxDistance: 20000\n//           }\n//         },\n//       startDate:  {$lte: sd, $lte: ed},\n//       endDate: {$gte: sd, $gte: ed}}).fetch()\n\n//    }\n\n//   else if (coords && ed) {\n//   console.log(\"Searched coords and ed\")\n//   return AccompanistProfile.find({\n//     loc:\n//       { $near :\n//         {\n//           $geometry: { type: \"Point\",  coordinates: coords },\n//           $maxDistance: 20000\n//         }\n//       },\n//     endDate: {$gte: new_sd, $gte: new_ed}}).fetch()\n// } else if (coords && sd) {\n//   console.log(\"Searched coords and sd\")\n//   return AccompanistProfile.find({\n//     loc:\n//       { $near :\n//         {\n//           $geometry: { type: \"Point\",  coordinates: coords },\n//           $maxDistance: 20000\n//         }\n//       },\n//     startDate:  {$lte: new_sd, $lte: new_ed}}).fetch()\n// } else if (sd && ed) {\n//   console.log(\"Searched sd and ed\")\n//   return AccompanistProfile.find({\n//     startDate:  {$lte: new_sd, $lte: new_ed},\n//     endDate: {$gte: new_sd, $gte: new_ed}}).fetch()\n// }\n// return No results found return Null (should just go to empty results page with advanced search)\n//console.log(\"new results responding\")\n// return null\n\n// Events\n\nTemplate.search.events({\n  'submit form': function () {\n    function submitForm() {\n      event.preventDefault();\n\n      //Constants submitted from the Home search bar\n      var address = event.target.address.value;\n      var start_date = event.target.start_date.value;\n      var end_date = event.target.end_date.value;\n\n      Meteor.call('getGeocode', address, function (err, result) {\n\n        var lat = Number(result[0].latitude);\n        var lng = Number(result[0].longitude);\n        var coords_new = [lng, lat];\n\n        if (err) {\n          console.log(err);\n        } else {\n          console.log(\"search session set\");\n          Session.set('coords', coords_new);\n          Session.set('start_date', start_date);\n          Session.set('end_date', end_date);\n        }\n        console.log(\"working_search nothing done\");\n      });\n\n      console.log(\"Form Submitted\");\n      // go to knew page here\n      FlowRouter.go('results');\n    }\n\n    return submitForm;\n  }()\n});\n\n// Google search autocomplete\nTemplate.search.events({\n  'click #autocomplete': function () {\n    function clickAutocomplete(e, search) {\n      initAutoComplete();\n    }\n\n    return clickAutocomplete;\n  }()\n});\n\nTemplate.NewAccompLayout.events({\n  'click #autocomplete': function () {\n    function clickAutocomplete(e, NewAccompLayout) {\n      initAutoComplete();\n    }\n\n    return clickAutocomplete;\n  }()\n});\n\nvar initAutoComplete = function initAutoComplete() {\n  var autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), { types: ['geocode'] });\n};\n\nTemplate.EditAccompanistProfile.events({\n  'click button': function () {\n    function clickButton() {\n      Notifications.info('Test', 'Working Notification');\n    }\n\n    return clickButton;\n  }()\n});\n\nTemplate.BookingRequest.events({\n  'click button': function () {\n    function clickButton() {\n      _transactions.Transactions.update({ _id: FlowRouter.getParam(\"transactionId\") }, { $set: { status: \"Confirmed\" } });\n      Notifications.info('Successful Confirmation', 'You successfully confirmed your booking!');\n    }\n\n    return clickButton;\n  }()\n});\n\n// Hooks\n\n// Insert geocode in accomp profile at update\n_accompanistProfile.AccompanistProfile.after.update(function (userId, doc, fieldNames, modifier, options) {\n\n  var address = doc.mylocation;\n\n  // take if outside to make more efficient!!!!!\n  Meteor.call('getGeocode', address, function (err, result) {\n\n    var lat = Number(result[0].latitude);\n    var lng = Number(result[0].longitude);\n    var coords_new = [lng, lat];\n    var coords_db = doc.loc.coordinates;\n\n    if (err) {\n      console.log(err);\n    } else if (coords_new[0] !== coords_db[0] && coords_new[1] !== coords_db[1]) {\n      console.log(\"updating\");\n      _accompanistProfile.AccompanistProfile.update({ _id: doc._id }, { $set: { geolocation: result[0], loc: { 'type': \"Point\", 'coordinates': coords_new } } });\n    }\n    console.log(\"working_UPDATE nothing done\");\n  });\n}, { fetchPrevious: true });\n\n// Insert geocode in accomp profile at Insert\n_accompanistProfile.AccompanistProfile.after.insert(function (userId, doc) {\n\n  var address = doc.mylocation;\n\n  Meteor.call('getGeocode', address, function (err, result) {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(\"working_INSERT\");\n\n      var lat = Number(result[0].latitude);\n      var lng = Number(result[0].longitude);\n      var coords_new = [lng, lat];\n\n      _accompanistProfile.AccompanistProfile.update({ _id: doc._id }, { $set: { geolocation: result[0], loc: { 'type': \"Point\", 'coordinates': coords_new } } });\n    }\n  });\n});\n\n// Random Data Creation (move this to server code!!!)\n\ninsertFullRandomProfile = function insertFullRandomProfile(userId) {\n  console.log(\"check this out:\");\n  console.log(userId);\n  _account.Accounts.insert(createNewAccount(userId), { getAutoValues: false });\n  _musicProfile.MusicProfiles.insert(createNewMusicProfile(userId), { getAutoValues: false });\n  _accompanistProfile.AccompanistProfile.insert(createNewAccompanistProfile(userId), { getAutoValues: false });\n};\n\ninsertRandomData = function insertRandomData(number) {\n  for (var i = 0; i < number; i++) {\n    var genId = Random.id();\n    console.log(genId);\n    _account.Accounts.insert(createNewAccount(genId), { getAutoValues: false });\n    _musicProfile.MusicProfiles.insert(createNewMusicProfile(genId), { getAutoValues: false });\n    _accompanistProfile.AccompanistProfile.insert(createNewAccompanistProfile(genId), { getAutoValues: false });\n  }\n};\n\n// For Debugging\nSimpleSchema.debug = true;","ast":null,"map":{"version":3,"sources":["/client/main.js"],"names":[],"mappings":"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","file":"/client/main.js.map","sourcesContent":["import { MusicProfiles } from '../collections/musicProfile.js'\nimport { AccompanistProfile } from '../collections/accompanistProfile.js'\nimport { Accounts } from '../collections/account.js'\nimport { MusicCompetitions } from '../collections/competitions.js'\nimport { Transactions } from '../collections/transactions.js'\n\nimport { TestAccountData } from '../collections/testData.js'\n\nwindow.MusicProfiles = MusicProfiles\nwindow.AccompanistProfile = AccompanistProfile\nwindow.Accounts = Accounts\nwindow.MusicCompetitions = MusicCompetitions\nwindow.Transactions = Transactions\n\n// Helper functions\n\nfunction wrapDoc (obj) {\n  if (obj){\n    return {field: \"update\", doc: obj}\n  }else{\n    return {field: \"insert\", doc: null}\n  }\n}\n\n// Javascript Component Initialization\n\nTemplate.CollapsibleStructure.onRendered(function () {\n  $('.collapsible').collapsible({\n    accordion : false\n  });\n});\n\nTemplate.TabStructure.onRendered(function () {\n  $('ul.tabs').tabs();\n});\n\nTemplate.login.onRendered(function () {\n  $(\".dropdown-button\").dropdown({\n    inDuration: 300,\n    outDuration: 700,\n    belowOrigin: true,\n    alignment: 'right'\n  });\n});\n\n// On creation\n\nTemplate.MainLayout.onCreated(function (){\n  this.navbarFields = new ReactiveVar(['myProfile', 'accompanistDashboard','bookings', 'login'])\n});\n\n// ==Global Template Helpers==\n\n\n\n// Get Current User's Account\nTemplate.registerHelper('myAccount', () => {\n  return Accounts.findOne({userId: Meteor.userId()});\n});\n\n// Get Current User's Music Profile\nTemplate.registerHelper('myProfile', () => {\n  return MusicProfiles.findOne({userId: Meteor.userId()});\n});\n\n// Get Current Route's Accompanist Profile\nTemplate.registerHelper('myAccompanistProfile', () => {\n  return AccompanistProfile.findOne({Id: Meteor.userId()});\n});\n\nTemplate.registerHelper('routeAccount', () => {\n  return Accounts.findOne({userId: FlowRouter.getParam(\"profileId\")});\n});\n\n// Get Current Route's Music Profile\nTemplate.registerHelper('routeProfile', () => {\n  return MusicProfiles.findOne({userId: FlowRouter.getParam(\"profileId\")});\n});\n\n// Get Current Route's Accompanist Profile\nTemplate.registerHelper('routeAccompanistProfile', () => {\n  return AccompanistProfile.findOne({Id: FlowRouter.getParam(\"profileId\")});\n});\n\nTemplate.registerHelper('sentBookingRequests', () =>{\n  return Transactions.find({musician: Meteor.userId()}).fetch()\n});\n\nTemplate.registerHelper('receivedBookingRequests', () =>{\n  return Transactions.find({accompanist: Meteor.userId()}).fetch()\n});\n\nTemplate.registerHelper('accountById', (id) =>{\n  return Accounts.findOne({userId: id})\n});\n\nTemplate.registerHelper('profileById', (id) =>{\n  return MusicProfiles.findOne({userId: id})\n});\n\nTemplate.registerHelper('accompanistProfileById', (id) =>{\n  return AccompanistProfile.findOne({Id: id})\n});\n\nTemplate.registerHelper('routeTransaction', () =>{\n  return Transactions.findOne({_id: FlowRouter.getParam(\"transactionId\")})\n});\n\nTemplate.registerHelper('isOwnProfile', () => {\n  return FlowRouter.getParam(\"profileId\") == Meteor.userId();\n});\n\n\n// Get Elements of the Navbar Fields for the User\nTemplate.registerHelper('navbarFields', () => {\n  return Template.instance().navbarFields.get()\n});\n\n\n\n// Old Global Template Helpers\n\nTemplate.registerHelper('pendingTransactions', (array) =>{\n  return array.filter(function(element, index, array){\n    return element.status == \"Pending\"\n  })\n});\n\nTemplate.registerHelper('confirmedTransactions', (array) =>{\n  return array.filter(function(element, index, array){\n    return element.status == \"Confirmed\"\n  })\n});\n\nTemplate.registerHelper('completedTransactions', (array) =>{\n  return array.filter(function(element, index, array){\n    return element.status == \"Completed\"\n  })\n});\n\nTemplate.registerHelper('cancelledTransactions', (array) =>{\n  return array.filter(function(element, index, array){\n    return element.status == \"Completed\"\n  })\n});\n\n\nTemplate.registerHelper('arrayLength', (array) =>{\n  return array.length\n});\n\nTemplate.registerHelper('validId', () =>{\n  // For now it is set to looking up in Accounts instead of Meteor.users\n  // Makes it work with test data\n  // if (Meteor.users.findOne(FlowRouter.getParam(\"profileId\"))){\n\n  if (Accounts.findOne({userId: FlowRouter.getParam(\"profileId\")})){\n    return true\n  }else{\n    return false\n  }\n});\n\nTemplate.registerHelper('defaultTransaction', () => {\n  return {musician: Meteor.userId(),\n          accompanist: FlowRouter.getParam(\"profileId\"),\n          status: 'Pending'}\n});\n\nTemplate.registerHelper('ownProfile', () => {\n  event.preventDefault();\n\n  return (FlowRouter.getParam(\"profileId\") == Meteor.userId())\n});\n\nTemplate.registerHelper( 'userId', () => {\n    event.preventDefault();\n    return Meteor.userId();\n});\n\nTemplate.registerHelper( 'getProfileRoute', (id = Meteor.userId()) =>{\n  return \"/profile/\"+id\n});\n\nTemplate.registerHelper( 'getBookingRoute', (bookingId) =>{\n  return \"/bookingRequest/\"+bookingId\n});\n\nTemplate.registerHelper('transactionsAsAccompanist', () =>{\n  return Transactions.find({ accompanist: Meteor.userId()}).fetch();\n});\n\nTemplate.registerHelper('transactionsAsMusician', () =>{\n  return Transactions.find({ musician: Meteor.userId()}).fetch()\n});\n\nTemplate.registerHelper( 'transactionsDoc', () => {\n    event.preventDefault();\n    var allTransactions =\n      {asMusician: Transactions.find({ musician: Meteor.userId()}).fetch(),\n       asAccompanist: Transactions.find({ accompanist: Meteor.userId()}).fetch()}\n    return allTransactions;\n});\n\nTemplate.registerHelper( 'transactionById', (id = FlowRouter.getParam(\"transactionId\")) => {\n    event.preventDefault();\n    // Only return if the user is the accompanist listed\n    return Transactions.findOne({_id:id, accompanist: Meteor.userId()})\n});\n\nTemplate.registerHelper( 'profileDoc', (id = FlowRouter.getParam(\"profileId\")) => {\n    event.preventDefault();\n    if (!id) {\n      id = Meteor.userId();\n    }\n    return wrapDoc(MusicProfiles.findOne({ userId: id}));\n});\n\nTemplate.registerHelper( 'accountDoc', (id = FlowRouter.getParam(\"profileId\")) => {\n  \tevent.preventDefault();\n    if (!id) {\n      id = Meteor.userId();\n    }\n    return wrapDoc(Accounts.findOne({ userId: id}));\n});\n\nTemplate.registerHelper( 'accompanistProfileDoc', (id = FlowRouter.getParam(\"profileId\")) => {\n    event.preventDefault();\n    if (!id) {\n      id = Meteor.userId();\n    }\n    return wrapDoc(AccompanistProfile.findOne({ Id: Meteor.userId()}));\n});\n\nTemplate.registerHelper( 'musicCompetitionsDoc', () => {\n    event.preventDefault();\n    // array =  MusicCompetitions.find().fetch();\n    return [{label: \"First Manhattan International Music Competition\", value: \"First Manhattan International Music Competition\"}]\n});\n\n\n// Local Template On Created\n\nTemplate.upsertProfileForm.onCreated(function() {\n  this.formType = new ReactiveVar('insert')\n});\n\nTemplate.upsertAccountForm.onCreated(function() {\n  this.formType = new ReactiveVar('insert')\n});\n\nTemplate.upsertAccompanistForm.onCreated(function() {\n  this.formType = new ReactiveVar('insert')\n});\n\n// Local Template Helpers\n\nTemplate.upsertProfileForm.helpers ({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentProfile: function () {\n    var currentProfile = MusicProfiles.findOne({ userId: Meteor.userId()});\n    if (currentProfile) {\n      Template.instance().formType.set('update');\n      return currentProfile\n    }\n  },\n\n  formType: function () {\n    var formType = Template.instance().formType.get();\n    return formType;\n  },\n\n  instrumentList: function () {\n    return [\"Voice\",\"Bagpipes\", \"Banjo\", \"Bass drum\", \"Bassoon\", \"Bell\", \"Bongo\", \"Castanets\", \"Cello\", \"Clarinet\", \"Clavichord\", \"Conga drum\", \"Contrabassoon\", \"Cornet\", \"Cymbals\", \"Double bass\", \"Dulcian\", \"Dynamophone\", \"Flute\", \"Flutophone\", \"Glockenspiel\", \"Gongs\", \"Guitar\", \"Harmonica\", \"Harp\", \"Harpsichord\", \"Lute\", \"Mandolin\", \"Maracas\", \"Metallophone\", \"Musical box\", \"Oboe\", \"Ondes-Martenot\", \"Piano\", \"Recorder\", \"Saxophone\", \"Shawm\", \"Snare drum\", \"Steel drum\", \"Tambourine\", \"Theremin\", \"Triangle\", \"Trombone\", \"Trumpet\", \"Tuba\", \"Ukulele\", \"Viola\", \"Violin\", \"Xylophone\",\n    \"Zither\"].map(function(obj){return {label: obj, value:obj}})\n  }\n});\n\nTemplate.upsertAccountForm.helpers ({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentAccount: function () {\n    var currentAccount = Accounts.findOne({ userId: Meteor.userId()});\n    if (currentAccount) {\n      Template.instance().formType.set('update');\n      return currentAccount;\n    }\n  },\n\n  formType: function () {\n    var formType = Template.instance().formType.get();\n    return formType;\n  }\n});\n\nTemplate.upsertAccompanistForm.helpers ({\n  // Helps set up fields for deciding between \"insert\" and \"update\"\n  currentAccompanistProfile: function () {\n    var currentAccompanistProfile = AccompanistProfile.findOne({ Id: Meteor.userId()});\n    if (currentAccompanistProfile) {\n      Template.instance().formType.set('update');\n      return currentAccompanistProfile;\n    }\n  },\n\n  formType: function () {\n    var formType = Template.instance().formType.get();\n    return formType;\n  }\n});\n\n// Attempt to create relations between collections\n\n// AccompModel = Graviton.Model.extend({\n \n//   belongsTo: {\n//     account: {\n//       collection: 'Accounts',\n//       foreignKey: 'userId'\n//     }\n//   }\n// },{});\n\n// Accompanist = Graviton.define(\"AccompanistProfile\", {\n//   belongsTo: {\n//     account: {\n//       collection: 'Accounts',\n//       foreignKey: 'userId'\n//     }\n//   }\n// });\n\n// AccountModel = Graviton.Model.extend({\n//   belongsTo: {\n//     accompprofile: {\n//       collection: 'AccompanistProfile',\n//       foreignKey: 'Id'\n//     }\n//   }\n// },{});\n\n// Account = Graviton.define(\"Accounts\", {\n//   belongsTo: {\n//     accompprofile: {\n//       collection: 'AccompanistProfile',\n//       foreignKey: 'Id'\n//     }\n//   }\n// });\n\n//Meteor.subscribe('results');\n\nTemplate.results.helpers({\n   \n\n   //  var coords = Session.get('coords')\n\n   //   //convert dates to dates that can be compared with Mongo schema\n   // var sd = new Date(Session.get('start_date'))\n   // var ed = new Date(Session.get('end_date'))\n\n  accompanists: function() {\n      var coords = Session.get('coords')\n\n      //convert dates to dates that can be compared with Mongo schema\n      var sd = new Date(Session.get('start_date'))\n      var ed = new Date(Session.get('end_date'))\n        \n        console.log(coords)\n        console.log(sd)\n        console.log(ed)\n\n\n      if (coords && sd && ed) {\n        console.log(\"search all\")\n        return AccompanistProfile.find({\n          loc:\n            { $near :\n              {\n                $geometry: { type: \"Point\",  coordinates: coords },\n                $maxDistance: 20000\n              }\n            },\n          startDate:  {$lte: sd, $lte: ed},\n          endDate: {$gte: sd, $gte: ed}}).fetch();\n      } // else if (sd && ed){\n      //   console.log(\"search sd and ed\")\n\n      //   return AccompanistProfile.find({\n      //     startDate:  {$lte: sd, $lte: ed},\n      //     endDate: {$gte: sd, $gte: ed}}).fetch();\n      // } else if (coords){\n      //   console.log(\"search coords\")\n\n      //   return AccompanistProfile.find({\n      //     loc:\n      //       { $near :\n      //         {\n      //           $geometry: { type: \"Point\",  coordinates: coords },\n      //           $maxDistance: 20000\n      //         }\n      //       }}).fetch();\n        else {\n      console.log(\"search null\")\n\n        return null\n      }\n  },\n\n    accompname: function() {\n        // We use this helper inside the {{#each posts}} loop, so the context\n        // will be a post object. Thus, we can use this.authorId.\n        var names = Accounts.findOne({userId: this.Id});\n                //console.log(names)\n\n        return names\n\n    }\n\n    });\n\n  // accompanists: ()=> {\n\t\t// var coords = Session.get('coords')\n\n\t\t// // convert dates to dates that can be compared with Mongo schema\n\t\t// var sd = new Date(Session.get('start_date'))\n\t\t// var ed = new Date(Session.get('end_date'))\n\n  //   if (coords && sd && ed) {\n\t\t//   console.log(\"search all\")\n      \n  //     var pipeline = [\n  //       {$group: {}}\n  //     ]\n\n  //     var accompProfs = \n  //       AccompanistProfile.find({\n  //         loc:\n  //           { $near :\n  //             {\n  //               $geometry: { type: \"Point\",  coordinates: coords },\n  //               $maxDistance: 20000\n  //             }\n  //           },\n  //         startDate:  {$lte: sd, $lte: ed},\n  //         endDate: {$gte: sd, $gte: ed}}).fetch()\n    \n\n      //return accompProfs //, accompAccounts]\n     //} \n  // accompanists: ()=> {\n\t\t// var coords = Session.get('coords')\n\n\t\t// // convert dates to dates that can be compared with Mongo schema\n\t\t// var sd = new Date(Session.get('start_date'))\n\t\t// var ed = new Date(Session.get('end_date'))\n\n  //   if (coords && sd && ed) {\n\t\t//   console.log(\"search all\")\n  //     return AccompanistProfile.find({\n  //       loc:\n  //         { $near :\n  //           {\n  //             $geometry: { type: \"Point\",  coordinates: coords },\n  //             $maxDistance: 20000\n  //           }\n  //         },\n  //       startDate:  {$lte: sd, $lte: ed},\n  //       endDate: {$gte: sd, $gte: ed}}).fetch()\n\n  //    }\n\n     //   else if (coords && ed) {\n    //   console.log(\"Searched coords and ed\")\n    //   return AccompanistProfile.find({\n    //     loc:\n    //       { $near :\n    //         {\n    //           $geometry: { type: \"Point\",  coordinates: coords },\n    //           $maxDistance: 20000\n    //         }\n    //       },\n    //     endDate: {$gte: new_sd, $gte: new_ed}}).fetch()\n    // } else if (coords && sd) {\n    //   console.log(\"Searched coords and sd\")\n    //   return AccompanistProfile.find({\n    //     loc:\n    //       { $near :\n    //         {\n    //           $geometry: { type: \"Point\",  coordinates: coords },\n    //           $maxDistance: 20000\n    //         }\n    //       },\n    //     startDate:  {$lte: new_sd, $lte: new_ed}}).fetch()\n    // } else if (sd && ed) {\n    //   console.log(\"Searched sd and ed\")\n    //   return AccompanistProfile.find({\n    //     startDate:  {$lte: new_sd, $lte: new_ed},\n    //     endDate: {$gte: new_sd, $gte: new_ed}}).fetch()\n    // }\n    \t// return No results found return Null (should just go to empty results page with advanced search)\n       //console.log(\"new results responding\")\n    \t// return null\n  \n\n\n// Events\n\nTemplate.search.events({\n\t'submit form': function(){\n\t    event.preventDefault();\n\n\t    //Constants submitted from the Home search bar\n      const address = event.target.address.value\n\t   \tconst start_date = event.target.start_date.value\n\t   \tconst end_date = event.target.end_date.value\n\n\n      Meteor.call('getGeocode', address, function(err, result){\n\n        var lat = Number(result[0].latitude);\n        var lng = Number(result[0].longitude);\n        var coords_new = [lng, lat];\n\n        if(err) {\n          console.log(err)\n        } else {\n            console.log(\"search session set\")\n            Session.set('coords', coords_new)\n            Session.set('start_date', start_date)\n            Session.set('end_date', end_date)\n        }\n        console.log(\"working_search nothing done\")\n    });\n\n      console.log(\"Form Submitted\")\n      // go to knew page here\n      FlowRouter.go('results');\n  }\n});\n\n// Google search autocomplete\nTemplate.search.events({\n   'click #autocomplete': function(e,search) {\n     initAutoComplete();\n   }\n});\n\nTemplate.NewAccompLayout.events({\n   'click #autocomplete': function(e,NewAccompLayout) {\n     initAutoComplete();\n   }\n});\n\nvar initAutoComplete = function() {\n  var autocomplete = new google.maps.places.Autocomplete(\n    (document.getElementById('autocomplete')),{types: ['geocode'] }\n  );\n};\n\nTemplate.EditAccompanistProfile.events({\n\t'click button': function(){\n      Notifications.info('Test', 'Working Notification');\n  }\n});\n\n\nTemplate.BookingRequest.events({\n\t'click button': function(){\n      Transactions.update({_id: FlowRouter.getParam(\"transactionId\")}, {$set: {status: \"Confirmed\"}});\n      Notifications.info('Successful Confirmation', 'You successfully confirmed your booking!');\n  }\n});\n\n// Hooks\n\n// Insert geocode in accomp profile at update\nAccompanistProfile.after.update(function (userId, doc, fieldNames, modifier, options) {\n\n  var address = doc.mylocation;\n\n  // take if outside to make more efficient!!!!!\n  Meteor.call('getGeocode', address, function(err, result){\n\n      var lat = Number(result[0].latitude);\n      var lng = Number(result[0].longitude);\n      var coords_new = [lng, lat];\n      var coords_db = doc.loc.coordinates\n\n  if(err) {\n    console.log(err)\n  } else if (coords_new[0] !== coords_db[0] && coords_new[1] !== coords_db[1]) {\n      console.log(\"updating\")\n      AccompanistProfile.update({_id: doc._id}, {$set: {geolocation : result[0], loc: {'type': \"Point\", 'coordinates' : coords_new}}});\n  }\n  console.log(\"working_UPDATE nothing done\")\n\n});\n}, {fetchPrevious: true});\n\n// Insert geocode in accomp profile at Insert\nAccompanistProfile.after.insert(function (userId, doc) {\n\n  var address = doc.mylocation;\n\n  Meteor.call('getGeocode', address, function(err, result){\n    if(err) {\n      console.log(err)\n    }else {\n      console.log(\"working_INSERT\")\n\n      var lat = Number(result[0].latitude);\n      var lng = Number(result[0].longitude);\n      var coords_new = [lng, lat];\n\n      AccompanistProfile.update({_id: doc._id}, {$set: {geolocation : result[0], loc: {'type': \"Point\", 'coordinates' : coords_new}}});\n    }\n  });\n});\n\n// Random Data Creation (move this to server code!!!)\n\ninsertFullRandomProfile = function(userId){\nconsole.log(\"check this out:\")\n    console.log(userId)\n    Accounts.insert(createNewAccount(userId), {getAutoValues: false});\n    MusicProfiles.insert(createNewMusicProfile(userId), {getAutoValues: false});\n    AccompanistProfile.insert(createNewAccompanistProfile(userId), {getAutoValues: false});\n  };\n\n  insertRandomData = function(number) {\n    for (var i = 0; i < number; i++){\n      var genId = Random.id();\n      console.log(genId)\n      Accounts.insert(createNewAccount(genId), {getAutoValues: false});\n      MusicProfiles.insert(createNewMusicProfile(genId), {getAutoValues: false});\n      AccompanistProfile.insert(createNewAccompanistProfile(genId), {getAutoValues: false});\n    }\n  };\n\n// For Debugging\n SimpleSchema.debug = true;\n"]},"hash":"f14abf3e15ea985d8e58afd0d7f95ceb815a7550"}
