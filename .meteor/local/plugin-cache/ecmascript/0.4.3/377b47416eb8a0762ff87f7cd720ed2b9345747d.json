{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/emmerge:graviton/graviton.js","filenameRelative":"/packages/emmerge:graviton/graviton.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/emmerge:graviton/graviton.js.map","sourceFileName":"/packages/emmerge:graviton/graviton.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"graviton"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nGraviton = function () {\n  function Graviton() {\n    (0, _classCallCheck3[\"default\"])(this, Graviton);\n  }\n\n  Graviton.getCollection = function () {\n    function getCollection(options) {\n      var name;\n      if (_.isString(options)) {\n        name = options;\n      } else if (_.isObject(options)) {\n        name = options.collectionName || options.collection || options.klass || options.relationName;\n      }\n      if (name) {\n        return Graviton._collections[name];\n      }\n    }\n\n    return getCollection;\n  }();\n\n  // use a period-delimited string to access a deeply-nested object\n\n\n  Graviton.getProperty = function () {\n    function getProperty(obj, string) {\n      var arr = string.split(\".\");\n      while (obj && arr.length) {\n        obj = obj[arr.shift()];\n      }\n      if (arr.length === 0) {\n        return obj;\n      }\n    }\n\n    return getProperty;\n  }();\n\n  Graviton.setProperty = function () {\n    function setProperty(obj, key, val) {\n      if (!key) throw new Error(\"Cannot setProperty with no key specified.\");\n      var arr = key.split(\".\");\n      while (obj && arr.length > 1) {\n        key = arr.shift();\n        if (_.isUndefined(obj[key])) {\n          obj[key] = {};\n        }\n        obj = obj[key];\n      }\n      if (arr.length === 1) {\n        obj[arr[0]] = val;\n        return val;\n      }\n    }\n\n    return setProperty;\n  }();\n\n  Graviton.unsetProperty = function () {\n    function unsetProperty(obj, key) {\n      if (!key) throw new Error(\"Cannot unsetProperty with no key specified\");\n      var arr = key.split(\".\");\n      while (obj && arr.length > 1) {\n        key = arr.shift();\n        if (_.isUndefined(obj[key])) return; // The nested key can't possibly exist, it is already unset\n        obj = obj[key];\n      }\n      if (arr.length == 1) {\n        delete obj[arr[0]];\n        return;\n      }\n    }\n\n    return unsetProperty;\n  }();\n\n  // currently mongo sanitize causes ambiguous / non-unique keys for some inputs such as...\n  // '$#foo' vs '#foo'\n  // 'foo@.bar' vs 'foo.@bar'\n  // 'foo..bar' vs 'foo@bar'\n  // TODO: refactor to make non-ambiguous / unique keys - probably incorporating some other special characters\n\n\n  Graviton.mongoSanitize = function () {\n    function mongoSanitize(str) {\n      if (/^\\#/.test(str)) {\n        str = '##' + str.substr(1);\n      }\n      if (/^\\$/.test(str)) {\n        str = '#' + str.substr(1);\n      }\n      if (/\\@/.test(str)) {\n        str = str.replace(/\\@/g, '@@');\n      }\n      if (/\\./.test(str)) {\n        str = str.replace(/\\./g, '@');\n      }\n      return str;\n    }\n\n    return mongoSanitize;\n  }();\n\n  Graviton.reverseMongoSanitize = function () {\n    function reverseMongoSanitize(sanitizedString) {\n      if (_.isString(sanitizedString)) {\n        // first replace all singular @ symbols (in js regex that means @ not followed by @ and proceeded by a the beginning of the string or by @)\n        return sanitizedString.replace(/(^|[^@])@(?!@)/g, '$1.')\n        // then replace @@\n        .replace(/@@/g, '@')\n        // then replace starts with # (not followed by another #)\n        .replace(/^\\#(?!\\#)/, '$')\n        // then replace starts with ##\n        .replace(/^\\#\\#/, '#');\n      }\n    }\n\n    return reverseMongoSanitize;\n  }();\n\n  // Helper function to deal with objects which may have keys which are illegal in mongo\n  // 1. Mongo keys cannot start with $\n  // -- convert starts with $ to starts with #\n  // -- also convert starts with # to starts with ## to avoid collisions\n  // 2. Mongo keys cannot contain .\n  // -- convert . to @\n  // -- also convert @ to @@ to avoid collisions\n\n\n  Graviton.sanitizeKeysForMongo = function () {\n    function sanitizeKeysForMongo(obj) {\n      var nk;\n      for (var k in meteorBabelHelpers.sanitizeForInObject(obj)) {\n        if (_.isObject(obj[k])) Graviton.sanitizeKeysForMongo(obj[k]);\n        nk = Graviton.mongoSanitize(k);\n        if (nk !== k) {\n          obj[nk] = obj[k];\n          delete obj[k];\n        }\n      }\n    }\n\n    return sanitizeKeysForMongo;\n  }();\n\n  // declare new collections of models\n  // options contain the relations etc.\n\n\n  Graviton.define = function () {\n    function define(collectionName) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      options = _.pick(options, 'persist', // if false, is backed by a local collection only\n      'modelCls', // either model constructor or object containing model constructors\n      'defaultType', // used only when modelCls is an object\n      'typeAttribute', // attribute to use for type instead of _type\n      'registerCollection', // if true, saves this collection in Gravition._collections[collectionName]\n      'timestamps', // if true, use collection-hooks (if available) to generate createdAt and updatedAt timestamps\n      'name', // name of collection, optional\n      'timestampFormat' // set to 'number' to use old, integer timestamps\n      );\n\n      _.defaults(options, {\n        persist: true,\n        registerCollection: true,\n        timestamps: true,\n        timestampFormat: Graviton.timestampFormat\n      });\n\n      options.model = function (obj) {\n        var Model = _getModelClass(obj, options);\n        return new Model(collection, obj);\n      };\n\n      var collection;\n\n      if (collectionName === 'users') {\n        collection = Meteor.users;\n      } else {\n        var colName = options.persist ? collectionName : null;\n\n        collection = new Mongo.Collection(colName, {\n          transform: options.model\n        });\n\n        // uses collection-hooks package\n        if (Meteor.isServer && options.timestamps && collection.before) {\n          collection.before.insert(function (userId, doc) {\n            var now = options.timestampFormat == 'number' ? +new Date() : new Date();\n            doc.createdAt = now;\n            doc.updatedAt = now;\n          });\n          collection.before.update(function (userId, doc, fieldNames, modifier, options) {\n            var now = options.timestampFormat == 'number' ? +new Date() : new Date();\n            modifier.$set = modifier.$set || {};\n            modifier.$set.updatedAt = now;\n          });\n        }\n      }\n\n      if (options.registerCollection) {\n        this._collections[collectionName] = collection;\n      }\n      collection._graviton = options;\n\n      return collection;\n    }\n\n    return define;\n  }();\n\n  Graviton.registerCollection = function () {\n    function registerCollection(collection) {\n      if (collection && collection instanceof Mongo.Collection && collection._name) this._collections[collection._name] = collection;\n    }\n\n    return registerCollection;\n  }();\n\n  return Graviton;\n}();\n\n// alias\nGraviton.defineCollection = Graviton.define;\n\n_.extend(Graviton, {\n  MongoQuery: MongoQuery,\n  MongoModifier: MongoModifier,\n  Model: Model,\n  Relation: Relation,\n  timestampFormat: 'date', // set to 'number' for backwards compatibilty with old versions\n  _collections: {}\n});\n\n// return model class given options\nvar _getModelClass = function _getModelClass(obj, options) {\n  if (_.isFunction(options.modelCls)) return options.modelCls;\n  if (_.isObject(options.modelCls)) {\n    var type = (options.typeAttribute ? obj[options.typeAttribute] : obj._type) || options.defaultType;\n    if (type) {\n      if (!options.modelCls[type]) throw new Error(\"Model class for type '\" + type + \"' was not found. Can't build model.\");\n      return options.modelCls[type];\n    }\n  }\n  return Graviton.Model;\n};\n\n/**\n *\n * Mongo.Collection.prototype\n *\n */\n\n// all() convenience method\nMongo.Collection.prototype.all = function () {\n  return this.find({}).fetch();\n};\n\n// build an instance of this collections model type but do not save it to the db\n// returns the built model.\nMongo.Collection.prototype.build = function (obj) {\n  if (!_.isObject(obj)) obj = {};\n  var mdl = this._graviton.model(obj);\n  if (obj._id) {\n    mdl._id = obj._id;\n  }\n  mdl._collection = this; // keep the collection this model came out of\n  return mdl;\n};\n\n// does an insert but builds a model first, returns the model instead of an id\nMongo.Collection.prototype.create = function (obj, callback) {\n  var model = this.build(obj);\n  if (callback) {\n    model.setId(this.insert(model.attributes, function (err) {\n      callback(err, model);\n    }));\n  } else {\n    model.setId(this.insert(model.attributes));\n  }\n  return model; // model will have an _id even if this is called with a callback\n};","ast":null,"map":{"version":3,"sources":["/packages/emmerge:graviton/graviton.js"],"names":[],"mappings":"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","file":"/packages/emmerge:graviton/graviton.js.map","sourcesContent":["Graviton = class Graviton {\n\n  static getCollection(options) {\n    var name;\n    if (_.isString(options)) {\n      name = options;\n    } else\n    if (_.isObject(options)) {\n      name = options.collectionName || options.collection || options.klass || options.relationName;\n    }\n    if (name) {\n      return Graviton._collections[name];\n    }\n  }\n\n  // use a period-delimited string to access a deeply-nested object\n  static getProperty(obj, string) {\n    var arr = string.split(\".\");\n    while (obj && arr.length) {\n      obj = obj[arr.shift()];\n    }\n    if (arr.length === 0) {\n      return obj;\n    }\n  }\n\n  static setProperty(obj, key, val) {\n    if (!key) throw new Error(\"Cannot setProperty with no key specified.\");\n    var arr = key.split(\".\");\n    while (obj && arr.length > 1) {\n      key = arr.shift();\n      if (_.isUndefined(obj[key])) {\n        obj[key] = {};\n      }\n      obj = obj[key];\n    }\n    if (arr.length === 1) {\n      obj[arr[0]] = val;\n      return val;\n    }\n  }\n\n  static unsetProperty(obj, key) {\n    if (!key) throw new Error(\"Cannot unsetProperty with no key specified\");\n    var arr = key.split(\".\");\n    while (obj && arr.length > 1) {\n      key = arr.shift();\n      if (_.isUndefined(obj[key]))\n        return;  // The nested key can't possibly exist, it is already unset\n      obj = obj[key];\n    }\n    if (arr.length == 1) {\n      delete obj[arr[0]];\n      return;\n    }\n  }\n\n  // currently mongo sanitize causes ambiguous / non-unique keys for some inputs such as...\n  // '$#foo' vs '#foo'\n  // 'foo@.bar' vs 'foo.@bar'\n  // 'foo..bar' vs 'foo@bar'\n  // TODO: refactor to make non-ambiguous / unique keys - probably incorporating some other special characters\n  static mongoSanitize(str) {\n    if (/^\\#/.test(str)) {\n      str = '##'+str.substr(1);\n    }\n    if (/^\\$/.test(str)) {\n      str = '#'+str.substr(1);\n    }\n    if (/\\@/.test(str)) {\n      str = str.replace(/\\@/g, '@@');\n    }\n    if (/\\./.test(str)) {\n      str = str.replace(/\\./g, '@');\n    }\n    return str;\n  }\n\n  static reverseMongoSanitize(sanitizedString) {\n    if (_.isString(sanitizedString)) {\n      // first replace all singular @ symbols (in js regex that means @ not followed by @ and proceeded by a the beginning of the string or by @)\n      return sanitizedString.replace(/(^|[^@])@(?!@)/g,'$1.')\n        // then replace @@\n        .replace(/@@/g,'@')\n        // then replace starts with # (not followed by another #)\n        .replace(/^\\#(?!\\#)/,'$')\n        // then replace starts with ##\n        .replace(/^\\#\\#/,'#');\n    }\n  }\n\n  // Helper function to deal with objects which may have keys which are illegal in mongo\n  // 1. Mongo keys cannot start with $\n  // -- convert starts with $ to starts with #\n  // -- also convert starts with # to starts with ## to avoid collisions\n  // 2. Mongo keys cannot contain .\n  // -- convert . to @\n  // -- also convert @ to @@ to avoid collisions\n  static sanitizeKeysForMongo(obj) {\n    var nk;\n    for (var k in obj) {\n      if (_.isObject(obj[k])) Graviton.sanitizeKeysForMongo(obj[k]);\n      nk = Graviton.mongoSanitize(k);\n      if (nk !== k) {\n        obj[nk] = obj[k];\n        delete obj[k];\n      }\n    }\n  }\n\n  // declare new collections of models\n  // options contain the relations etc.\n  static define(collectionName, options = {}) {\n    options = _.pick(options,\n      'persist',            // if false, is backed by a local collection only\n      'modelCls',           // either model constructor or object containing model constructors\n      'defaultType',        // used only when modelCls is an object\n      'typeAttribute',      // attribute to use for type instead of _type\n      'registerCollection', // if true, saves this collection in Gravition._collections[collectionName]\n      'timestamps',         // if true, use collection-hooks (if available) to generate createdAt and updatedAt timestamps\n      'name',               // name of collection, optional\n      'timestampFormat'     // set to 'number' to use old, integer timestamps\n    );\n\n    _.defaults(options, {\n      persist: true,\n      registerCollection: true,\n      timestamps: true,\n      timestampFormat: Graviton.timestampFormat\n    });\n\n    options.model = function(obj) {\n      var Model = _getModelClass(obj, options);\n      return new Model(collection, obj);\n    };\n\n    var collection;\n\n    if (collectionName === 'users') {\n      collection = Meteor.users;\n    } else {\n      var colName = (options.persist) ? collectionName : null;\n\n      collection = new Mongo.Collection(colName, {\n        transform: options.model\n      });\n\n      // uses collection-hooks package\n      if (Meteor.isServer && options.timestamps && collection.before) {\n        collection.before.insert(function(userId, doc) {\n          var now = (options.timestampFormat == 'number') ? +new Date() : new Date();\n          doc.createdAt = now;\n          doc.updatedAt = now;\n        });\n        collection.before.update(function(userId, doc, fieldNames, modifier, options) {\n          var now = (options.timestampFormat == 'number') ? +new Date() : new Date();\n          modifier.$set = modifier.$set || {};\n          modifier.$set.updatedAt = now;\n        });\n      }\n    }\n\n    if (options.registerCollection) {\n      this._collections[collectionName] = collection;\n    }\n    collection._graviton = options;\n\n    return collection;\n  }\n\n  static registerCollection(collection) {\n    if (collection && collection instanceof Mongo.Collection && collection._name)\n      this._collections[collection._name] = collection;\n  }\n};\n\n// alias\nGraviton.defineCollection = Graviton.define;\n\n_.extend(Graviton, {\n  MongoQuery: MongoQuery,\n  MongoModifier: MongoModifier,\n  Model: Model,\n  Relation: Relation,\n  timestampFormat: 'date', // set to 'number' for backwards compatibilty with old versions\n  _collections: {}\n});\n\n\n// return model class given options\nvar _getModelClass = function(obj, options) {\n  if (_.isFunction(options.modelCls)) return options.modelCls;\n  if (_.isObject(options.modelCls)) {\n    var type = ((options.typeAttribute) ? obj[options.typeAttribute] : obj._type) || options.defaultType;\n    if (type) {\n      if (!options.modelCls[type]) throw new Error(\"Model class for type '\"+type+\"' was not found. Can't build model.\");\n      return options.modelCls[type];\n    }\n  }\n  return Graviton.Model;\n};\n\n/**\n *\n * Mongo.Collection.prototype\n *\n */\n\n// all() convenience method\nMongo.Collection.prototype.all = function() {\n  return this.find({}).fetch();\n};\n\n// build an instance of this collections model type but do not save it to the db\n// returns the built model.\nMongo.Collection.prototype.build = function(obj) {\n  if (!_.isObject(obj)) obj = {};\n  var mdl = this._graviton.model(obj);\n  if (obj._id) {\n    mdl._id = obj._id;\n  }\n  mdl._collection = this; // keep the collection this model came out of\n  return mdl;\n};\n\n// does an insert but builds a model first, returns the model instead of an id\nMongo.Collection.prototype.create = function(obj, callback) {\n  var model = this.build(obj);\n  if (callback) {\n    model.setId(this.insert(model.attributes, function(err) {\n      callback(err, model);\n    }));\n  } else {\n    model.setId(this.insert(model.attributes));\n  }\n  return model; // model will have an _id even if this is called with a callback\n};\n"]},"hash":"377b47416eb8a0762ff87f7cd720ed2b9345747d"}
