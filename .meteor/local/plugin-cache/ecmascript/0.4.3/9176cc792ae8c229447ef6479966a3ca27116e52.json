{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:components/lib/field-input/field-input.js","filenameRelative":"/packages/easysearch:components/lib/field-input/field-input.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:components/lib/field-input/field-input.js.map","sourceFileName":"/packages/easysearch:components/lib/field-input/field-input.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"field-input"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * The FieldInputComponent lets you search through configured indexes for a specified fild.\n *\n * @type {FieldInputComponent}\n */\nEasySearch.FieldInputComponent = function (_EasySearch$InputComp) {\n  (0, _inherits3['default'])(FieldInputComponent, _EasySearch$InputComp);\n\n  function FieldInputComponent() {\n    (0, _classCallCheck3['default'])(this, FieldInputComponent);\n    return (0, _possibleConstructorReturn3['default'])(this, _EasySearch$InputComp.apply(this, arguments));\n  }\n\n  /**\n   * Setup component on created.\n   */\n\n  FieldInputComponent.prototype.onCreated = function () {\n    function onCreated() {\n      _EasySearch$InputComp.prototype.onCreated.call(this);\n\n      if (_.isEmpty(this.getData().field)) {\n        throw new Meteor.Error('no-field', 'Please provide a field for your field input component');\n      }\n    }\n\n    return onCreated;\n  }();\n\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n\n\n  FieldInputComponent.prototype.search = function () {\n    function search(searchString) {\n      var _this2 = this;\n\n      check(searchString, String);\n\n      this.eachIndex(function (index, name) {\n        var searchDefinition = index.getComponentDict(name).get('searchDefinition') || {};\n\n        if (_.isString(searchDefinition)) {\n          throw new Meteor.Error('You can either EasySearch.FieldInput or EasySearch.Input');\n        }\n\n        if (_this2.options.field) {\n          searchDefinition[_this2.options.field] = searchString;\n          index.getComponentMethods(name).search(searchDefinition);\n        }\n      });\n    }\n\n    return search;\n  }();\n\n  return FieldInputComponent;\n}(EasySearch.InputComponent);\n\nEasySearch.FieldInputComponent.register('EasySearch.FieldInput');","ast":null,"map":{"version":3,"sources":["/packages/easysearch:components/lib/field-input/field-input.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAKA,WAAW,mBAAX;6BAAuC;;;;;;;;;;;gCAIrC;yBAAY;AACV,sCAAM,SAAN,YADU;;AAGV,UAAI,EAAE,OAAF,CAAU,KAAK,OAAL,GAAe,KAAf,CAAd,EAAqC;AACnC,cAAM,IAAI,OAAO,KAAP,CAAa,UAAjB,EAA6B,uDAA7B,CAAN,CADmC;OAArC;;;;;;;;;;;;;AAPmC,gCAiBrC;oBAAO,cAAc;;;AACnB,YAAM,YAAN,EAAoB,MAApB,EADmB;;AAGnB,WAAK,SAAL,CAAe,UAAC,KAAD,EAAQ,IAAR,EAAiB;AAC9B,YAAI,mBAAmB,MAAM,gBAAN,CAAuB,IAAvB,EAA6B,GAA7B,CAAiC,kBAAjC,KAAwD,EAAxD,CADO;;AAG9B,YAAI,EAAE,QAAF,CAAW,gBAAX,CAAJ,EAAkC;AAChC,gBAAM,IAAI,OAAO,KAAP,CAAa,0DAAjB,CAAN,CADgC;SAAlC;;AAIA,YAAI,OAAK,OAAL,CAAa,KAAb,EAAoB;AACtB,2BAAiB,OAAK,OAAL,CAAa,KAAb,CAAjB,GAAuC,YAAvC,CADsB;AAEtB,gBAAM,mBAAN,CAA0B,IAA1B,EAAgC,MAAhC,CAAuC,gBAAvC,EAFsB;SAAxB;OAPa,CAAf,CAHmB;;;;;;SAjBgB;EAA4B,WAAW,cAAX,CAAnE;;AAmCA,WAAW,mBAAX,CAA+B,QAA/B,CAAwC,uBAAxC","file":"/packages/easysearch:components/lib/field-input/field-input.js.map","sourcesContent":["/**\n * The FieldInputComponent lets you search through configured indexes for a specified fild.\n *\n * @type {FieldInputComponent}\n */\nEasySearch.FieldInputComponent = class FieldInputComponent extends EasySearch.InputComponent {\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    super.onCreated();\n\n    if (_.isEmpty(this.getData().field)) {\n      throw new Meteor.Error('no-field', 'Please provide a field for your field input component');\n    }\n  }\n\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n  search(searchString) {\n    check(searchString, String);\n\n    this.eachIndex((index, name) => {\n      let searchDefinition = index.getComponentDict(name).get('searchDefinition') || {};\n\n      if (_.isString(searchDefinition)) {\n        throw new Meteor.Error('You can either EasySearch.FieldInput or EasySearch.Input');\n      }\n\n      if (this.options.field) {\n        searchDefinition[this.options.field] = searchString;\n        index.getComponentMethods(name).search(searchDefinition);\n      }\n    });\n  }\n};\n\nEasySearch.FieldInputComponent.register('EasySearch.FieldInput');\n"]},"hash":"9176cc792ae8c229447ef6479966a3ca27116e52"}
