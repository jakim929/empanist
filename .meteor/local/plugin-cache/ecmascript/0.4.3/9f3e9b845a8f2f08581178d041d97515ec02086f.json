{"metadata":{"usedHelpers":["classCallCheck","inherits","possibleConstructorReturn","toConsumableArray","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/emmerge:graviton/lib/model.js","filenameRelative":"/packages/emmerge:graviton/lib/model.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/emmerge:graviton/lib/model.js.map","sourceFileName":"/packages/emmerge:graviton/lib/model.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"model"},"ignored":false,"code":"var _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nModel = function () {\n  function Model(collection, obj) {\n    (0, _classCallCheck3[\"default\"])(this, Model);\n\n    if (!(collection instanceof Mongo.Collection)) throw new Error(\"Models must be instantiated with a Mongo.Collection\");\n\n    if (!_.isObject(obj) || _.isFunction(obj)) {\n      obj = {};\n    } else {\n      obj = _deepClone(obj);\n    }\n\n    if (obj._id) {\n      this._id = obj._id;\n    }\n\n    this._collection = collection;\n    this.attributes = _.defaults(obj, this.constructor._defaults);\n\n    for (var _iterator = Object.keys(this.constructor._relations), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var relName = _ref;\n\n      var rel = this.constructor._relations[relName];\n      this[relName] = rel.generate(this);\n    }\n\n    this._saveQuery = new MongoQuery(collection);\n  }\n  /**\n   * If merge == true, override and add to any inherited relations\n   * Otherwise, completely re-define the relations for this class\n   * Pass an empty object to clear all inherited relations\n   */\n\n\n  Model.relations = function () {\n    function relations(relationsObj) {\n      var merge = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      relationsObj = _deepClone(relationsObj);\n      var relations = {};\n      for (var _iterator2 = Object.keys(relationsObj), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var relationType = _ref2;\n\n        var generator = Relation.getGenerator(relationType);\n        if (!generator) {\n          continue;\n        }\n        for (var _iterator3 = Object.keys(relationsObj[relationType]), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray3) {\n            if (_i3 >= _iterator3.length) break;\n            _ref3 = _iterator3[_i3++];\n          } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) break;\n            _ref3 = _i3.value;\n          }\n\n          var relationName = _ref3;\n\n          if (relations[relationName]) {\n            throw new Error(\"Trying to add a relation that already exists:\", relationName);\n          }\n          var cfg = relationsObj[relationType][relationName];\n          cfg.type = relationType;\n          cfg.relationName = relationName;\n          cfg.generate = generator;\n          relations[relationName] = cfg;\n        }\n      }\n      if (merge) {\n        _.extend(this._relations, relations);\n      } else {\n        this._relations = relations;\n      }\n      return this;\n    }\n\n    return relations;\n  }();\n\n  /**\n   * If merge == true, override and add to any inherited defaults\n   * Otherwise, completely re-define the defaults for this class\n   * Pass an empty object to clear all inherited defaults\n   * Must be serializable\n   */\n\n\n  Model.defaults = function () {\n    function defaults(defaultsObj) {\n      var merge = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      var defaults = _deepClone(defaultsObj);\n      if (merge) {\n        this._defaults = _.extend({}, this._defaults, defaults);\n      } else {\n        this._defaults = defaults;\n      }\n      return this;\n    }\n\n    return defaults;\n  }();\n\n  /**\n   * Add another class's prototype, relations and defaults\n   * Don't override anthing defined on this class\n   */\n\n\n  Model.mixin = function () {\n    function mixin(modelClass) {\n      _.defaults(this.prototype, modelClass.prototype);\n      _.defaults(this._defaults, modelClass._defaults);\n      for (var _iterator4 = Object.keys(modelClass._relations), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n        var _ref4;\n\n        if (_isArray4) {\n          if (_i4 >= _iterator4.length) break;\n          _ref4 = _iterator4[_i4++];\n        } else {\n          _i4 = _iterator4.next();\n          if (_i4.done) break;\n          _ref4 = _i4.value;\n        }\n\n        var relName = _ref4;\n\n        if (!this._relations[relName]) {\n          this._relations[relName] = modelClass._relations[relName];\n        }\n      }\n      return this;\n    }\n\n    return mixin;\n  }();\n\n  /**\n   * Legacy API support\n   */\n\n\n  Model.extend = function () {\n    function extend(modelClassOrOptions, proto) {\n      var Mdl;\n      if (modelClassOrOptions.prototype instanceof Graviton.Model) {\n        Mdl = function (_ref5) {\n          (0, _inherits3[\"default\"])(_class, _ref5);\n\n          function _class() {\n            (0, _classCallCheck3[\"default\"])(this, _class);\n            return (0, _possibleConstructorReturn3[\"default\"])(this, _ref5.apply(this, arguments));\n          }\n\n          return _class;\n        }(this).mixin(modelClassOrOptions);\n      } else {\n        var BaseClass = _modelClassFromOptions(this, modelClassOrOptions, proto);\n        Mdl = function (_BaseClass) {\n          (0, _inherits3[\"default\"])(Mdl, _BaseClass);\n\n          function Mdl() {\n            (0, _classCallCheck3[\"default\"])(this, Mdl);\n            return (0, _possibleConstructorReturn3[\"default\"])(this, _BaseClass.apply(this, arguments));\n          }\n\n          return Mdl;\n        }(BaseClass);\n      }\n      return Mdl;\n    }\n\n    return extend;\n  }();\n\n  // alter the attributes using dot-delimited key\n\n\n  Model.prototype._setProperty = function () {\n    function _setProperty(key, value) {\n      return Graviton.setProperty(this.attributes, key, value);\n    }\n\n    return _setProperty;\n  }();\n\n  Model.prototype.setId = function () {\n    function setId(id) {\n      this._id = id;\n      this._setProperty('_id', id);\n      return this;\n    }\n\n    return setId;\n  }();\n\n  // take a mongo update statement and modify the model attributes with it\n  // doesn't alter pending save\n\n\n  Model.prototype._applyUpdate = function () {\n    function _applyUpdate(update) {\n      LocalCollection._modify(this.attributes, update);\n    }\n\n    return _applyUpdate;\n  }();\n\n  Model.prototype.get = function () {\n    function get(key) {\n      return _deepClone(Graviton.getProperty(this.attributes, key));\n    }\n\n    return get;\n  }();\n\n  Model.prototype.set = function () {\n    function set(keyOrObj, value) {\n      this._applyUpdate(this._saveQuery.set(keyOrObj, value));\n      return this;\n    }\n\n    return set;\n  }();\n\n  Model.prototype.unset = function () {\n    function unset(keyOrObj) {\n      this._applyUpdate(this._saveQuery.unset(keyOrObj));\n      return this;\n    }\n\n    return unset;\n  }();\n\n  Model.prototype.inc = function () {\n    function inc(keyOrObj, value) {\n      this._applyUpdate(this._saveQuery.inc(keyOrObj, value));\n      return this;\n    }\n\n    return inc;\n  }();\n\n  Model.prototype.push = function () {\n    function push(keyOrObj, value) {\n      this._applyUpdate(this._saveQuery.push(keyOrObj, value));\n      return this;\n    }\n\n    return push;\n  }();\n\n  Model.prototype.pull = function () {\n    function pull(keyOrObj, value) {\n      this._applyUpdate(this._saveQuery.unset(keyOrObj, value));\n      return this;\n    }\n\n    return pull;\n  }();\n\n  Model.prototype.addToSet = function () {\n    function addToSet(keyOrObj, value) {\n      this._applyUpdate(this._saveQuery.addToSet(keyOrObj, value));\n      return this;\n    }\n\n    return addToSet;\n  }();\n\n  Model.prototype.pop = function () {\n    function pop(keyOrObj) {\n      this._applyUpdate(this._saveQuery.pop(keyOrObj));\n      return this;\n    }\n\n    return pop;\n  }();\n\n  Model.prototype.shift = function () {\n    function shift(keyOrObj) {\n      this._applyUpdate(this._saveQuery.shift(keyOrObj));\n      return this;\n    }\n\n    return shift;\n  }();\n\n  // given a mongo update statement, make the modification to\n  // the model's attributes and add to pending modifications to save\n\n\n  Model.prototype.modify = function () {\n    function modify(update) {\n      this._saveQuery.mergeUpdate(update);\n      this._applyUpdate(update);\n      return this;\n    }\n\n    return modify;\n  }();\n\n  Model.prototype.update = function () {\n    function update(_update, callback) {\n      if (!this._id) {\n        throw new Error(\"Can't update model. It has no _id.\");\n      }\n      this.modify(_update);\n      this.save(callback);\n    }\n\n    return update;\n  }();\n\n  Model.prototype.save = function () {\n    function save(callback) {\n      if (this._id) {\n        this._saveQuery.selector = { _id: this._id };\n        _performUpdate.call(this, 'update', callback);\n      } else {\n        this._id = _performUpdate.call(this, 'insert', this.attributes, callback);\n      }\n      return this;\n    }\n\n    return save;\n  }();\n\n  Model.prototype.remove = function () {\n    function remove(callback) {\n      if (this._id) {\n        this._saveQuery.selector = { _id: this._id };\n        return _performUpdate.call(this, 'remove', callback);\n      }\n    }\n\n    return remove;\n  }();\n\n  return Model;\n}();\nModel._relations = [];\nModel._defaults = {};\n\n// handle async vs. sync\nfunction _performUpdate() {\n  var _this3 = this,\n      _arguments = arguments;\n\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var method = args.shift();\n  var callback = _.isFunction(_.last(args)) ? args.pop() : undefined;\n\n  if (callback) {\n    var _saveQuery;\n\n    (_saveQuery = this._saveQuery)[method].apply(_saveQuery, args.concat([function (err) {\n      if (!err) {\n        _this3._saveQuery.reset();\n      }\n      callback.apply(_this3, _arguments);\n    }]));\n  } else {\n    var _saveQuery2;\n\n    var result = (_saveQuery2 = this._saveQuery)[method].apply(_saveQuery2, args);\n    this._saveQuery.reset();\n    return result;\n  }\n}\n\nfunction _deepClone(obj) {\n  if (!_.isObject(obj)) return obj;\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction _modelClassFromOptions(BaseClass) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n  var proto = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n  var Mdl = function (_BaseClass2) {\n    (0, _inherits3[\"default\"])(Mdl, _BaseClass2);\n\n    function Mdl() {\n      (0, _classCallCheck3[\"default\"])(this, Mdl);\n\n      var _this4 = (0, _possibleConstructorReturn3[\"default\"])(this, _BaseClass2.apply(this, arguments));\n\n      if (options.initialize) {\n        options.initialize.apply(_this4, arguments);\n      }\n      return _this4;\n    }\n\n    return Mdl;\n  }(BaseClass);\n  if (options.defaults) {\n    Mdl.defaults(options.defaults, true);\n  }\n  if (options.relations) {\n    Mdl.relations(options.relations, true);\n  } else {\n    var _ref6;\n\n    var relations = (_ref6 = _).pick.apply(_ref6, [options].concat((0, _toConsumableArray3[\"default\"])(Graviton.Relation.supportedTypes())));\n    if (!_.isEmpty(relations)) {\n      Mdl.relations(relations);\n    }\n  }\n  _.extend(Mdl.prototype, proto);\n  return Mdl;\n}\n\n// constructor used by collection transform functions\n// Model classes are not tied to any particular collection\n// model instances have a reference to the collection they came from\n// relations are also defined with collections and added to models when they are instantiated\nOldModel = function OldModel(collection, obj) {\n  if (!(collection instanceof Mongo.Collection)) throw new Error(\"Models must be instantiated with a Mongo.Collection\");\n\n  if (!_.isObject(obj) || _.isFunction(obj)) obj = {};\n\n  this._collection = collection;\n\n  this.attributes = obj;\n  this._pendingMods = []; // fill with modifiers to run when save is called\n\n  // new Gravition.Model will instantiate without any options\n  // use OldModel.extend to create a constructor with defaults/initialize\n  _.defaults(this, {\n    _options: {}\n  });\n\n  var self = this;\n\n  // new way of adding relations\n  _.each(this._options.relations, function (relationsOfType, relationType) {\n    _.each(relationsOfType, function (cfg, relationName) {\n      var relCls = ManyRelation._types[relationType];\n      if (relCls) {\n        cfg.relationName = relationName;\n        self[relationName] = new relCls(self, cfg);\n      }\n    });\n  });\n\n  // old way of adding relations\n  var relations = this._collection._graviton.relations;\n\n  _.each(relations.hasMany, function (cfg, name) {\n    self[name] = new HasMany(self, cfg);\n  });\n  _.each(relations.hasOne, function (cfg, name) {\n    self[name] = colHasOne(self, cfg);\n  });\n  _.each(relations.belongsTo, function (cfg, name) {\n    self[name] = colBelongsTo(self, cfg, name);\n  });\n  _.each(relations.belongsToMany, function (cfg, name) {\n    self[name] = new BelongsToMany(self, cfg);\n  });\n  _.each(relations.embeds, function (cfg, name) {\n    self[name] = colEmbeds(self, cfg, name);\n  });\n  _.each(relations.embedsMany, function (cfg, name) {\n    self[name] = new EmbeddedModels(self, cfg, name);\n  });\n\n  _.defaults(this.attributes, this._options.defaults);\n\n  this.constructor.initialize.apply(this, arguments);\n};\n\nisModel = function isModel(obj) {\n  return obj instanceof Graviton.Model || Graviton.OldModel.prototype.isPrototypeOf(obj);\n};\n\nvar addSingularRelations = function addSingularRelations(proto, relations) {\n  _.each(relations, function (relationsOfType, relationType) {\n    _.each(relationsOfType, function (cfg, relationName) {\n      var relFn = Relation._types[relationType];\n      if (relFn) {\n        cfg.relationName = relationName;\n        proto[relationName] = relFn(cfg);\n      }\n    });\n  });\n};\n\n// no-op initialize\nOldModel.initialize = function () {};\n\n// for creating a custom class to use for model transforms\n// options:\n// * initialize - call when instances are created\n// * defaults - default values for attributes\nOldModel.extend = function (options, proto) {\n  var self = this;\n\n  options = options || {};\n\n  // If we are extending another model constructor we will have stored the options from that model.\n  // Use those options and use its prototype.\n  if (options._fullOptions) {\n    proto = options.prototype;\n    options = options._fullOptions;\n  }\n\n  proto = proto || {};\n\n  var relations = _.clone(this.relations) || {};\n\n  _.each(relations, function (rel, relName) {\n    relations[relName] = _.extend({}, rel, options[relName]);\n  });\n  _.defaults(relations, _.pick(options, Relation.typeNames()));\n\n  var opts = {\n    defaults: _.extend({}, this.defaults, options.defaults),\n    initialize: options.initialize || function () {}, // if no init is supplied, use a no-op\n    relations: relations\n  };\n\n  var Mdl = function Mdl(collection, obj) {\n    // we want any arbitrary options used to extend\n    this._options = _.extend(opts, _.omit(options, 'defaults', 'initialize', 'relations'));\n    OldModel.call(this, collection, obj);\n  };\n\n  // store the full options object (including the 'defaults', 'initialize', 'relations') for use if we ever extend Mdl\n  Mdl._fullOptions = options;\n\n  Mdl.relations = opts.relations;\n  Mdl.initialize = opts.initialize;\n  Mdl.defaults = opts.defaults;\n  Mdl.extend = this.extend;\n  Mdl.prototype = Object.create(this.prototype);\n  Mdl.prototype.constructor = Mdl;\n\n  addSingularRelations(Mdl.prototype, opts.relations);\n\n  _.extend(Mdl.prototype, proto);\n\n  return Mdl;\n};\n\nOldModel.prototype.get = function (key) {\n  return Graviton.getProperty(this.attributes, key);\n};\n\n// function _deepClone(obj) {\n//   if (_.isObject(obj)) {\n//     if (obj.constructor === Object) {\n//       var clone = {};\n//       for (var k in obj) {\n//         clone[k] = _deepClone(obj[k]);\n//       }\n//       return clone;\n//     } else {\n//       return obj;\n//     }\n//   }\n//   return obj;\n// }\n\n// * thing - string or object\n// * value - anything serializable. isn't used if thing is an object\nOldModel.prototype.set = function (thing, value) {\n  if (_.isObject(thing)) {\n    thing = _deepClone(thing);\n    for (var k in meteorBabelHelpers.sanitizeForInObject(thing)) {\n      this._setProperty(k, thing[k]);\n    }\n    this._pendingMods.push({ $set: thing });\n    return this;\n  }\n  // else\n  value = _deepClone(value);\n  this._setProperty(thing, value);\n  var obj = {};\n  obj[thing] = value;\n  this._pendingMods.push({ $set: obj });\n  return this;\n};\n\n// Unset a single or set of keys in this object:\n//  unset(nameOfKey)\n//  unset(nameOfKey1, nameOfKey2, ...)\n//  unset({key1:'', key2:'', ...})\nOldModel.prototype.unset = function () {\n  var keysToUnset;\n  if (_.isObject(arguments[0])) keysToUnset = _.keys(arguments[0]);else keysToUnset = Array.prototype.slice.call(arguments);\n\n  // Remove the property, then push the unset mod:\n  keysToUnset.forEach(function (key) {\n    this._unsetProperty(key);\n  }, this);\n  var mods = _.object(_.map(keysToUnset, function (k) {\n    return [k, ''];\n  }));\n  this._pendingMods.push({ $unset: mods });\n  return this;\n};\n\n/**\n *\n * @param thing {String} or {Object}\n * @param increment {number}\n * @returns {Model} updated model\n */\nOldModel.prototype.inc = function (thing, increment) {\n  var val;\n  if (_.isObject(thing)) {\n    if (_.isObject(thing)) {\n      for (var k in meteorBabelHelpers.sanitizeForInObject(thing)) {\n        val = this.get(k) || 0;\n        this._setProperty(k, val + thing[k]);\n      }\n      this._pendingMods.push({ $inc: thing });\n      return this;\n    }\n  }\n  // else\n  val = this.get(thing) || 0;\n  this._setProperty(thing, val + increment);\n  var incObj = {};\n  incObj[thing] = increment;\n  var $inc = { $inc: incObj };\n  this._pendingMods.push($inc);\n  return this;\n};\n\n/**\n * _pushProperty\n *\n * Takes an object or array value and pushes it to the model property found using `key`.\n * Like Mongo $push, if there is no property for key, create a new array field using the value.\n * Like Mongo $push, fails if the property found for the key is not an array.\n * Returns an object to be used in the Mongo `$push` operation.\n *  - In the case of an {Object} value this is simply just the value.\n *  - In the case of an {Array} value it will be an object containing an `$each` expression.\n *\n * @param key {String} the property key (must have an array value).\n * @param value {Array} or {Object}\n * @returns {Object}\n * @private\n */\nOldModel.prototype._pushProperty = function (key, value) {\n  var array = this.get(key);\n  if (array && !_.isArray(array)) throw new Error(\"Trying to push a value onto a non-array property\");\n  if (_.isArray(value)) {\n    this._setProperty(key, array.concat(value));\n    return { $each: value };\n  } else {\n    if (!array) this._setProperty(key, [value]);else array.push(value);\n    return value;\n  }\n};\n\nOldModel.prototype.push = function (thing, value) {\n  var push;\n  if (_.isObject(thing)) {\n    for (var k in meteorBabelHelpers.sanitizeForInObject(thing)) {\n      thing[k] = this._pushProperty(k, thing[k]);\n    }\n    push = thing;\n  } else {\n    value = this._pushProperty(thing, value);\n    push = {};\n    push[thing] = value;\n  }\n  this._pendingMods.push({ $push: push });\n  return this;\n};\n\n/**\n * _addToSetProperty\n *\n * Takes an object or array value and adds it to the set for the model property found using `key`.\n * Like Mongo $addToSet, if there is no property for key, create a new array field using the value.\n * Like Mongo $addToSet, fails if the property found for the key is not an array.\n * Returns an object to be used in the Mongo `$addToSet` operation.\n *  - In the case of an {Object} value this is simply just the value.\n *  - In the case of an {Array} value it will be an object containing an `$each` expression.\n *\n *\n * @param key {String} the property key (must have an array value).\n * @param value {Array} or {Object}\n * @returns {Object}\n * @private\n */\nOldModel.prototype._addToSetProperty = function (key, value) {\n  var array = this.get(key);\n  if (array !== undefined && !_.isArray(array)) throw new Error(\"Trying to addToSet on a non-array property\");\n  if (_.isArray(value)) {\n    if (!array) this._setProperty(key, value);\n    // this._setProperty(key, _.union(array || [], value))\n    // because compacts the original array to a unique set, Mongo $addToSet does not change the existing array\n    else _.each(value, function (item) {\n        if (!_.contains(array, item)) array.push(item);\n      });\n    return { $each: value };\n  } else {\n    if (!array) this._setProperty(key, [value]);else if (!_.contains(array, value)) array.push(value);\n    return value;\n  }\n};\n\nOldModel.prototype.addToSet = function (thing, value) {\n  var addToSet;\n  if (_.isObject(thing)) {\n    for (var k in meteorBabelHelpers.sanitizeForInObject(thing)) {\n      thing[k] = this._addToSetProperty(k, thing[k]);\n    }\n    addToSet = thing;\n  } else {\n    value = this._addToSetProperty(thing, value);\n    addToSet = {};\n    addToSet[thing] = value;\n  }\n  this._pendingMods.push({ $addToSet: addToSet });\n};\n\nOldModel.prototype._popProperty = function (key, first) {\n  var array = this.get(key);\n  if (!_.isArray(array)) throw new Error(\"Trying to pop a value from a non-array\");\n  if (first) {\n    return array.shift();\n  } else {\n    return array.pop();\n  }\n};\n\nOldModel.prototype._applyPop = function (keys, first) {\n  var pop = {};\n  for (var i in meteorBabelHelpers.sanitizeForInObject(keys)) {\n    pop[keys[i]] = first ? -1 : 1;\n    this._popProperty(keys[i], first);\n  }\n  this._pendingMods.push({ $pop: pop });\n};\n\nOldModel.prototype.pop = function () {\n  this._applyPop(_.toArray(arguments));\n};\n\nOldModel.prototype.shift = function (key) {\n  this._applyPop(_.toArray(arguments), true);\n};\n\nOldModel.prototype._setProperty = function (key, value) {\n  Graviton.setProperty(this.attributes, key, value);\n};\n\nOldModel.prototype._unsetProperty = function (key) {\n  Graviton.unsetProperty(this.attributes, key);\n};\n\nOldModel.prototype.setId = function (id) {\n  this._id = id;\n  this._setProperty('_id', id);\n};\n\n// deep clone of attributes\nOldModel.prototype.plain = function () {\n  var str = JSON.stringify(this.attributes);\n  return JSON.parse(str);\n};\n\n// deep equals of attributes\n// designed to be overridden by subclasses\n// used by indexOf on relations\nOldModel.prototype.equals = function (obj) {\n  if (Graviton.isModel(obj)) obj = obj.attributes;\n  return _.isEqual(obj, this.attributes);\n};\n\n/**\n * Insert a doc if it has no _id. If it already had an _id, do nothing.\n * @param callback\n * @returns return new id if new doc was inserted, `false` if no doc was inserted\n */\nOldModel.prototype.persist = function (callback) {\n  if (!this._id) {\n    var id = this._collection.insert.apply(this._collection, _.compact([this.attributes, callback]));\n    this.setId(id);\n    this._pendingMods = [];\n    return this._id;\n  }\n  if (callback) callback(null, false);\n  return false;\n};\n\n// applies a mongo modifier to the document\n// does not update the database until you call save\nOldModel.prototype.modify = function (modifier) {\n  if (!_.isObject(modifier)) throw new Error(\"Modifier must be an object.\");\n  LocalCollection._modify(this.attributes, modifier);\n  this._pendingMods.push(modifier);\n  return this;\n};\n\n// does a modify with persistence\nOldModel.prototype.update = function (modifier, callback) {\n  var self = this;\n  LocalCollection._modify(this.attributes, modifier);\n\n  if (callback) {\n    this.persist(function (err, id) {\n      if (!err) {\n        self._collection.update(self._id, modifier, callback);\n      } else {\n        callback(err);\n      }\n    });\n  } else {\n    if (!this.persist()) {\n      this._collection.update(this._id, modifier);\n    }\n  }\n  return this;\n};\n\n// insert or execute pending modifiers added with modify\nOldModel.prototype.save = function (callback) {\n  var self = this;\n  if (callback) {\n    this.persist(function (err, id) {\n      if (!err) {\n        var updates = _.map(self._pendingMods, function (mod) {\n          return function (cb) {\n            self._collection.update(self._id, mod, function (err, res) {\n              if (!err) self._pendingMods.shift();\n              cb(err, res);\n            });\n          };\n        });\n        var done = function done(err, res) {\n          callback(err, 1);\n        };\n        async.series(updates, done);\n      } else {\n        callback(err);\n      }\n    });\n  } else {\n    if (!this.persist()) {\n      while (this._pendingMods.length > 0) {\n        var mod = this._pendingMods.shift();\n        try {\n          this._collection.update(this._id, mod);\n        } catch (x) {\n          this._pendingMods.unshift(mod);\n          throw x;\n        }\n      }\n    }\n    return this;\n  }\n};\n\nOldModel.prototype.remove = function (callback) {\n\n  var removed_id = this._id;\n  var self = this;\n  var relations;\n\n  // find all the relations so that we can handle cascade options\n  if (this._options.relations) {\n    relations = _.pick(this._options.relations, ['hasMany', 'hasOne']);\n    relations = _.extend(relations.hasMany || {}, relations.hasOne);\n  }\n\n  // before destroying the parent, check for relational restrictions\n  var denyRelations = _.filter(relations, function (relation) {\n    return relation.onRemove === 'deny';\n  });\n  _.each(denyRelations, function (relation) {\n    //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'is on remove deny restricted');\n    //console.log('self[relation.relationName].findOne()',self[relation.relationName].findOne());\n    if (self[relation.relationName].findOne()) throw Error('Cannot remove record, relation \\'' + relation.relationName + '\\' denies removal if child records exist.');\n  });\n\n  // remove the document from the collection itself\n  if (callback) {\n    this._collection.remove(this._id, function (err, res) {\n      if (!err) self.setId(null);\n      callback(err, res);\n    });\n  } else {\n    this._collection.remove(this._id);\n    this.setId(null);\n  }\n\n  // after destroying the parent, remove or nullify the children based on relational options\n  _.each(relations, function (relation) {\n    self._id = removed_id; //mock up the model like it still exists to allow the relations to work naturally\n\n    if (relation.onRemove == 'cascade') {\n      //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'should onRemove cascade');\n      _.each(self[relation.relationName].all(), function (child) {\n        //console.log('child', relation.collection, 'to delete:', child._id);\n        child.remove();\n      });\n    } else if (relation.onRemove == 'unset') {\n      //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'should remove reference');\n      _.each(self[relation.relationName].all(), function (child) {\n        //console.log('child', relation.collection, 'to remove reference to:', child._id);\n        var updateObj = {};\n        updateObj.$unset = {};\n        updateObj.$unset[relation.foreignKey] = true;\n        child.update(updateObj);\n      });\n    }\n\n    self._id = null; //reset the removed model.\n  });\n\n  return this;\n};","ast":null,"map":{"version":3,"sources":["/packages/emmerge:graviton/lib/model.js"],"names":[],"mappings":"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","file":"/packages/emmerge:graviton/lib/model.js.map","sourcesContent":["Model = class Model {\n  constructor(collection, obj) {\n    if (!(collection instanceof Mongo.Collection))\n      throw new Error(\"Models must be instantiated with a Mongo.Collection\");\n\n    if (!_.isObject(obj) || _.isFunction(obj)) {\n      obj = {};\n    } else {\n      obj = _deepClone(obj);\n    }\n\n    if (obj._id) {\n      this._id = obj._id;\n    }\n\n    this._collection = collection;\n    this.attributes = _.defaults(obj, this.constructor._defaults);\n\n    for (let relName of Object.keys(this.constructor._relations)) {\n      let rel = this.constructor._relations[relName];\n      this[relName] = rel.generate(this);\n    }\n\n    this._saveQuery = new MongoQuery(collection);\n  }\n  /**\n   * If merge == true, override and add to any inherited relations\n   * Otherwise, completely re-define the relations for this class\n   * Pass an empty object to clear all inherited relations\n   */\n  static relations(relationsObj, merge = false) {\n    relationsObj = _deepClone(relationsObj);\n    var relations = {};\n    for (let relationType of Object.keys(relationsObj)) {\n      let generator = Relation.getGenerator(relationType);\n      if (!generator) {\n        continue;\n      }\n      for (let relationName of Object.keys(relationsObj[relationType])) {\n        if (relations[relationName]) {\n          throw new Error(\"Trying to add a relation that already exists:\", relationName);\n        }\n        let cfg = relationsObj[relationType][relationName];\n        cfg.type = relationType;\n        cfg.relationName = relationName;\n        cfg.generate = generator;\n        relations[relationName] = cfg;\n      }\n    }\n    if (merge) {\n      _.extend(this._relations, relations);\n    } else {\n      this._relations = relations;\n    }\n    return this;\n  }\n\n  /**\n   * If merge == true, override and add to any inherited defaults\n   * Otherwise, completely re-define the defaults for this class\n   * Pass an empty object to clear all inherited defaults\n   * Must be serializable\n   */\n  static defaults(defaultsObj, merge = false) {\n    var defaults = _deepClone(defaultsObj);\n    if (merge) {\n      this._defaults = _.extend({}, this._defaults, defaults);\n    } else {\n      this._defaults = defaults;\n    }\n    return this;\n  }\n\n  /**\n   * Add another class's prototype, relations and defaults\n   * Don't override anthing defined on this class\n   */\n  static mixin(modelClass) {\n    _.defaults(this.prototype, modelClass.prototype);\n    _.defaults(this._defaults, modelClass._defaults);\n    for (let relName of Object.keys(modelClass._relations)) {\n      if (!this._relations[relName]) {\n        this._relations[relName] = modelClass._relations[relName];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Legacy API support\n   */\n  static extend(modelClassOrOptions, proto) {\n    var Mdl;\n    if (modelClassOrOptions.prototype instanceof Graviton.Model) {\n      Mdl = class extends this { }.mixin(modelClassOrOptions);\n    } else {\n      var BaseClass = _modelClassFromOptions(this, modelClassOrOptions, proto);\n      Mdl = class extends BaseClass { };\n    }\n    return Mdl;\n  }\n\n  // alter the attributes using dot-delimited key\n  _setProperty(key, value) {\n    return Graviton.setProperty(this.attributes, key, value);\n  }\n\n  setId(id) {\n    this._id = id;\n    this._setProperty('_id', id);\n    return this;\n  }\n\n  // take a mongo update statement and modify the model attributes with it\n  // doesn't alter pending save\n  _applyUpdate(update) {\n    LocalCollection._modify(this.attributes, update);\n  }\n\n  get(key) {\n    return _deepClone(Graviton.getProperty(this.attributes, key));\n  }\n\n  set(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.set(keyOrObj, value));\n    return this;\n  }\n\n  unset(keyOrObj) {\n    this._applyUpdate(this._saveQuery.unset(keyOrObj));\n    return this;\n  }\n\n  inc(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.inc(keyOrObj, value));\n    return this;\n  }\n\n  push(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.push(keyOrObj, value));\n    return this;\n  }\n\n  pull(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.unset(keyOrObj, value));\n    return this;\n  }\n\n  addToSet(keyOrObj, value) {\n    this._applyUpdate(this._saveQuery.addToSet(keyOrObj, value));\n    return this;\n  }\n\n  pop(keyOrObj) {\n    this._applyUpdate(this._saveQuery.pop(keyOrObj));\n    return this;\n  }\n\n  shift(keyOrObj) {\n    this._applyUpdate(this._saveQuery.shift(keyOrObj));\n    return this;\n  }\n\n  // given a mongo update statement, make the modification to\n  // the model's attributes and add to pending modifications to save\n  modify(update) {\n    this._saveQuery.mergeUpdate(update);\n    this._applyUpdate(update);\n    return this;\n  }\n\n  update(update, callback) {\n    if (!this._id) {\n      throw new Error(\"Can't update model. It has no _id.\");\n    }\n    this.modify(update);\n    this.save(callback);\n  }\n\n  save(callback) {\n    if (this._id) {\n      this._saveQuery.selector = {_id: this._id};\n      _performUpdate.call(this, 'update', callback);\n    } else {\n      this._id = _performUpdate.call(this, 'insert', this.attributes, callback);\n    }\n    return this;\n  }\n\n  remove(callback) {\n    if (this._id) {\n      this._saveQuery.selector = {_id: this._id};\n      return _performUpdate.call(this, 'remove', callback);\n    }\n  }\n};\nModel._relations = [];\nModel._defaults = {};\n\n// handle async vs. sync\nfunction _performUpdate(...args) {\n  var method = args.shift();\n  var callback = (_.isFunction(_.last(args))) ? args.pop() : undefined;\n\n  if (callback) {\n    this._saveQuery[method](...args, (err) => {\n      if (!err) {\n        this._saveQuery.reset();\n      }\n      callback.apply(this, arguments);\n    });\n  } else {\n    var result = this._saveQuery[method](...args);\n    this._saveQuery.reset();\n    return result;\n  }\n}\n\nfunction _deepClone(obj) {\n  if (!_.isObject(obj)) return obj;\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction _modelClassFromOptions(BaseClass, options = {}, proto = {}) {\n  var Mdl = class extends BaseClass {\n    constructor() {\n      super(...arguments);\n      if (options.initialize) {\n        options.initialize.apply(this, arguments);\n      }\n    }\n  };\n  if (options.defaults) {\n    Mdl.defaults(options.defaults, true);\n  }\n  if (options.relations) {\n    Mdl.relations(options.relations, true);\n  } else {\n    let relations = _.pick(options, ...Graviton.Relation.supportedTypes());\n    if (!_.isEmpty(relations)) {\n      Mdl.relations(relations);\n    }\n  }\n  _.extend(Mdl.prototype, proto);\n  return Mdl;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// constructor used by collection transform functions\n// Model classes are not tied to any particular collection\n// model instances have a reference to the collection they came from\n// relations are also defined with collections and added to models when they are instantiated\nOldModel = function(collection, obj) {\n  if (!(collection instanceof Mongo.Collection))\n    throw new Error(\"Models must be instantiated with a Mongo.Collection\");\n\n  if (!_.isObject(obj) || _.isFunction(obj))\n    obj = {};\n\n  this._collection = collection;\n\n  this.attributes = obj;\n  this._pendingMods = []; // fill with modifiers to run when save is called\n\n  // new Gravition.Model will instantiate without any options\n  // use OldModel.extend to create a constructor with defaults/initialize\n  _.defaults(this, {\n    _options: {}\n  });\n\n  var self = this;\n\n  // new way of adding relations\n  _.each(this._options.relations, function(relationsOfType, relationType) {\n    _.each(relationsOfType, function(cfg, relationName) {\n      var relCls = ManyRelation._types[relationType];\n      if (relCls) {\n        cfg.relationName = relationName;\n        self[relationName] = new relCls(self, cfg);\n      }\n    });\n  });\n\n  // old way of adding relations\n  var relations = this._collection._graviton.relations;\n\n  _.each(relations.hasMany, function(cfg, name) {\n    self[name] = new HasMany(self, cfg);\n  });\n  _.each(relations.hasOne, function(cfg, name) {\n    self[name] = colHasOne(self, cfg);\n  });\n  _.each(relations.belongsTo, function(cfg, name) {\n    self[name] = colBelongsTo(self, cfg, name);\n  });\n  _.each(relations.belongsToMany, function(cfg, name) {\n    self[name] = new BelongsToMany(self, cfg);\n  });\n  _.each(relations.embeds, function(cfg, name) {\n    self[name] = colEmbeds(self, cfg, name);\n  });\n  _.each(relations.embedsMany, function(cfg, name) {\n    self[name] = new EmbeddedModels(self, cfg, name);\n  });\n\n  _.defaults(this.attributes, this._options.defaults);\n\n  this.constructor.initialize.apply(this, arguments);\n};\n\nisModel = function(obj) {\n  return (obj instanceof Graviton.Model || Graviton.OldModel.prototype.isPrototypeOf(obj));\n};\n\nvar addSingularRelations = function(proto, relations) {\n  _.each(relations, function(relationsOfType, relationType) {\n    _.each(relationsOfType, function(cfg, relationName) {\n      var relFn = Relation._types[relationType];\n      if (relFn) {\n        cfg.relationName = relationName;\n        proto[relationName] = relFn(cfg);\n      }\n    });\n  });\n};\n\n// no-op initialize\nOldModel.initialize = function() {};\n\n// for creating a custom class to use for model transforms\n// options:\n// * initialize - call when instances are created\n// * defaults - default values for attributes\nOldModel.extend = function(options, proto) {\n  var self = this;\n\n  options = options || {};\n\n  // If we are extending another model constructor we will have stored the options from that model.\n  // Use those options and use its prototype.\n  if (options._fullOptions) {\n    proto = options.prototype;\n    options = options._fullOptions;\n  }\n\n  proto = proto || {};\n\n  var relations = _.clone(this.relations) || {};\n\n  _.each(relations, function(rel, relName) {\n    relations[relName] = _.extend({}, rel, options[relName]);\n  });\n  _.defaults(relations, _.pick(options, Relation.typeNames()));\n\n  var opts = {\n    defaults: _.extend({}, this.defaults, options.defaults),\n    initialize: options.initialize || function() {}, // if no init is supplied, use a no-op\n    relations: relations\n  };\n\n  var Mdl = function(collection, obj) {\n    // we want any arbitrary options used to extend\n    this._options = _.extend(opts, _.omit(options, 'defaults', 'initialize', 'relations'));\n    OldModel.call(this, collection, obj);\n  };\n\n  // store the full options object (including the 'defaults', 'initialize', 'relations') for use if we ever extend Mdl\n  Mdl._fullOptions = options;\n\n  Mdl.relations = opts.relations;\n  Mdl.initialize = opts.initialize;\n  Mdl.defaults = opts.defaults;\n  Mdl.extend = this.extend;\n  Mdl.prototype = Object.create(this.prototype);\n  Mdl.prototype.constructor = Mdl;\n\n  addSingularRelations(Mdl.prototype, opts.relations);\n\n  _.extend(Mdl.prototype, proto);\n\n  return Mdl;\n};\n\nOldModel.prototype.get = function(key) {\n  return Graviton.getProperty(this.attributes, key);\n};\n\n// function _deepClone(obj) {\n//   if (_.isObject(obj)) {\n//     if (obj.constructor === Object) {\n//       var clone = {};\n//       for (var k in obj) {\n//         clone[k] = _deepClone(obj[k]);\n//       }\n//       return clone;\n//     } else {\n//       return obj;\n//     }\n//   }\n//   return obj;\n// }\n\n// * thing - string or object\n// * value - anything serializable. isn't used if thing is an object\nOldModel.prototype.set = function(thing, value) {\n  if (_.isObject(thing)) {\n    thing = _deepClone(thing);\n    for (var k in thing) {\n      this._setProperty(k, thing[k]);\n    }\n    this._pendingMods.push({$set: thing});\n    return this;\n  }\n  // else\n  value = _deepClone(value);\n  this._setProperty(thing, value);\n  var obj = {};\n  obj[thing] = value;\n  this._pendingMods.push({$set: obj});\n  return this;\n};\n\n// Unset a single or set of keys in this object:\n//  unset(nameOfKey)\n//  unset(nameOfKey1, nameOfKey2, ...)\n//  unset({key1:'', key2:'', ...})\nOldModel.prototype.unset = function() {\n  var keysToUnset;\n  if (_.isObject(arguments[0]))\n    keysToUnset = _.keys(arguments[0]);\n  else\n    keysToUnset = Array.prototype.slice.call(arguments);\n\n  // Remove the property, then push the unset mod:\n  keysToUnset.forEach(function(key) { this._unsetProperty(key); }, this);\n  var mods = _.object( _.map(keysToUnset, function(k){ return [k,'']; }) );\n  this._pendingMods.push({$unset: mods});\n  return this;\n};\n\n/**\n *\n * @param thing {String} or {Object}\n * @param increment {number}\n * @returns {Model} updated model\n */\nOldModel.prototype.inc = function(thing, increment) {\n  var val;\n  if (_.isObject(thing)) {\n    if (_.isObject(thing)) {\n      for (var k in thing) {\n        val = this.get(k) || 0;\n        this._setProperty(k, val + thing[k]);\n      }\n      this._pendingMods.push({$inc: thing});\n      return this;\n    }\n  }\n  // else\n  val = this.get(thing) || 0;\n  this._setProperty(thing, val + increment);\n  var incObj = {};\n  incObj[thing] = increment;\n  var $inc = {$inc: incObj};\n  this._pendingMods.push($inc);\n  return this;\n};\n\n/**\n * _pushProperty\n *\n * Takes an object or array value and pushes it to the model property found using `key`.\n * Like Mongo $push, if there is no property for key, create a new array field using the value.\n * Like Mongo $push, fails if the property found for the key is not an array.\n * Returns an object to be used in the Mongo `$push` operation.\n *  - In the case of an {Object} value this is simply just the value.\n *  - In the case of an {Array} value it will be an object containing an `$each` expression.\n *\n * @param key {String} the property key (must have an array value).\n * @param value {Array} or {Object}\n * @returns {Object}\n * @private\n */\nOldModel.prototype._pushProperty = function(key, value) {\n  var array = this.get(key);\n  if (array && !_.isArray(array))\n    throw new Error(\"Trying to push a value onto a non-array property\");\n  if (_.isArray(value)) {\n    this._setProperty(key, array.concat(value));\n    return {$each: value};\n  } else {\n    if (!array)\n      this._setProperty(key, [value]);\n    else\n      array.push(value);\n    return value;\n  }\n};\n\nOldModel.prototype.push = function(thing, value) {\n  var push;\n  if (_.isObject(thing)) {\n    for (var k in thing) {\n      thing[k] = this._pushProperty(k, thing[k]);\n    }\n    push = thing;\n  } else {\n    value = this._pushProperty(thing, value);\n    push = {};\n    push[thing] = value;\n  }\n  this._pendingMods.push({$push: push});\n  return this;\n};\n\n/**\n * _addToSetProperty\n *\n * Takes an object or array value and adds it to the set for the model property found using `key`.\n * Like Mongo $addToSet, if there is no property for key, create a new array field using the value.\n * Like Mongo $addToSet, fails if the property found for the key is not an array.\n * Returns an object to be used in the Mongo `$addToSet` operation.\n *  - In the case of an {Object} value this is simply just the value.\n *  - In the case of an {Array} value it will be an object containing an `$each` expression.\n *\n *\n * @param key {String} the property key (must have an array value).\n * @param value {Array} or {Object}\n * @returns {Object}\n * @private\n */\nOldModel.prototype._addToSetProperty = function(key, value) {\n  var array = this.get(key);\n  if (array !== undefined && !_.isArray(array))\n    throw new Error(\"Trying to addToSet on a non-array property\");\n  if (_.isArray(value)) {\n    if (!array)\n      this._setProperty(key, value);\n    // this._setProperty(key, _.union(array || [], value))\n    // because compacts the original array to a unique set, Mongo $addToSet does not change the existing array\n    else\n      _.each(value, function(item) {\n        if (!_.contains(array, item))\n          array.push(item);\n      });\n    return {$each: value};\n  } else {\n    if (!array)\n      this._setProperty(key, [value]);\n    else if (!_.contains(array, value))\n      array.push(value);\n    return value;\n  }\n};\n\nOldModel.prototype.addToSet = function(thing, value) {\n  var addToSet;\n  if (_.isObject(thing)) {\n    for (var k in thing) {\n      thing[k] = this._addToSetProperty(k, thing[k]);\n    }\n    addToSet = thing;\n  } else {\n    value = this._addToSetProperty(thing, value);\n    addToSet = {};\n    addToSet[thing] = value;\n  }\n  this._pendingMods.push({$addToSet: addToSet});\n};\n\nOldModel.prototype._popProperty = function(key, first) {\n  var array = this.get(key);\n  if (!_.isArray(array)) throw new Error(\"Trying to pop a value from a non-array\");\n  if (first) {\n    return array.shift();\n  } else {\n    return array.pop();\n  }\n};\n\nOldModel.prototype._applyPop = function(keys, first) {\n  var pop = {};\n  for (var i in keys) {\n    pop[keys[i]] = (first) ? -1 : 1;\n    this._popProperty(keys[i], first);\n  }\n  this._pendingMods.push({$pop: pop});\n};\n\nOldModel.prototype.pop = function() {\n  this._applyPop(_.toArray(arguments));\n};\n\nOldModel.prototype.shift = function(key) {\n  this._applyPop(_.toArray(arguments), true);\n};\n\nOldModel.prototype._setProperty = function(key, value) {\n  Graviton.setProperty(this.attributes, key, value);\n};\n\nOldModel.prototype._unsetProperty = function(key) {\n  Graviton.unsetProperty(this.attributes, key);\n};\n\nOldModel.prototype.setId = function(id) {\n  this._id = id;\n  this._setProperty('_id', id);\n};\n\n// deep clone of attributes\nOldModel.prototype.plain = function() {\n  var str = JSON.stringify(this.attributes);\n  return JSON.parse(str);\n};\n\n// deep equals of attributes\n// designed to be overridden by subclasses\n// used by indexOf on relations\nOldModel.prototype.equals = function(obj) {\n  if (Graviton.isModel(obj)) obj = obj.attributes;\n  return _.isEqual(obj, this.attributes);\n};\n\n/**\n * Insert a doc if it has no _id. If it already had an _id, do nothing.\n * @param callback\n * @returns return new id if new doc was inserted, `false` if no doc was inserted\n */\nOldModel.prototype.persist = function(callback) {\n  if (!this._id) {\n    var id = this._collection.insert.apply(this._collection, _.compact([this.attributes, callback]));\n    this.setId(id);\n    this._pendingMods = [];\n    return this._id;\n  }\n  if (callback) callback(null, false);\n  return false;\n};\n\n// applies a mongo modifier to the document\n// does not update the database until you call save\nOldModel.prototype.modify = function(modifier) {\n  if (! _.isObject(modifier))\n    throw new Error(\"Modifier must be an object.\");\n  LocalCollection._modify(this.attributes, modifier);\n  this._pendingMods.push(modifier);\n  return this;\n};\n\n// does a modify with persistence\nOldModel.prototype.update = function(modifier, callback) {\n  var self = this;\n  LocalCollection._modify(this.attributes, modifier);\n\n  if (callback) {\n    this.persist(function(err, id) {\n      if (!err) {\n        self._collection.update(self._id, modifier, callback);\n      } else {\n        callback(err);\n      }\n    });\n  } else {\n    if (!this.persist()) {\n      this._collection.update(this._id, modifier);\n    }\n  }\n  return this;\n};\n\n// insert or execute pending modifiers added with modify\nOldModel.prototype.save = function(callback) {\n  var self = this;\n  if (callback) {\n    this.persist(function(err, id) {\n      if (!err) {\n        var updates = _.map(self._pendingMods, function(mod) {\n          return function(cb) {\n            self._collection.update(self._id, mod, function(err, res) {\n              if (!err) self._pendingMods.shift();\n              cb(err, res);\n            });\n          };\n        });\n        var done = function(err, res) {\n          callback(err, 1);\n        };\n        async.series(updates, done);\n      } else {\n        callback(err);\n      }\n    });\n  } else {\n    if (!this.persist()) {\n      while (this._pendingMods.length > 0) {\n        var mod = this._pendingMods.shift();\n        try {\n          this._collection.update(this._id, mod);\n        }\n        catch (x) {\n          this._pendingMods.unshift(mod);\n          throw x;\n        }\n      }\n    }\n    return this;\n  }\n};\n\nOldModel.prototype.remove = function(callback) {\n\n  var removed_id = this._id;\n  var self = this;\n  var relations;\n\n  // find all the relations so that we can handle cascade options\n  if (this._options.relations) {\n    relations = _.pick(this._options.relations, ['hasMany', 'hasOne']);\n    relations = _.extend(relations.hasMany || {}, relations.hasOne);\n  }\n\n  // before destroying the parent, check for relational restrictions\n  var denyRelations = _.filter(relations, function(relation) {\n    return relation.onRemove === 'deny';\n  });\n  _.each(denyRelations, function(relation) {\n    //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'is on remove deny restricted');\n    //console.log('self[relation.relationName].findOne()',self[relation.relationName].findOne());\n    if (self[relation.relationName].findOne())\n      throw Error('Cannot remove record, relation \\''+relation.relationName+'\\' denies removal if child records exist.');\n  });\n\n  // remove the document from the collection itself\n  if (callback) {\n    this._collection.remove(this._id, function(err, res) {\n      if (!err) self.setId(null);\n      callback(err, res);\n    });\n  } else {\n    this._collection.remove(this._id);\n    this.setId(null);\n  }\n\n  // after destroying the parent, remove or nullify the children based on relational options\n  _.each(relations, function(relation) {\n    self._id = removed_id; //mock up the model like it still exists to allow the relations to work naturally\n\n    if (relation.onRemove == 'cascade') {\n      //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'should onRemove cascade');\n      _.each(self[relation.relationName].all(), function(child) {\n        //console.log('child', relation.collection, 'to delete:', child._id);\n        child.remove();\n      });\n    }\n    else if (relation.onRemove == 'unset') {\n      //console.log('collection:', self._collection._name, 'relation:',  relation.relationName, 'should remove reference');\n      _.each(self[relation.relationName].all(), function(child) {\n        //console.log('child', relation.collection, 'to remove reference to:', child._id);\n        var updateObj = {};\n        updateObj.$unset = {};\n        updateObj.$unset[relation.foreignKey] = true;\n        child.update(updateObj);\n      });\n    }\n\n    self._id = null; //reset the removed model.\n  });\n\n  return this;\n};\n"]},"hash":"9f3e9b845a8f2f08581178d041d97515ec02086f"}
