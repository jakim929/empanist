{"metadata":{"usedHelpers":["createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:core/lib/core/search-collection.js","filenameRelative":"/packages/easysearch:core/lib/core/search-collection.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:core/lib/core/search-collection.js.map","sourceFileName":"/packages/easysearch:core/lib/core/search-collection.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"search-collection"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A search collection represents a reactive collection on the client,\n * which is used by the ReactiveEngine for searching.\n *\n * @type {SearchCollection}\n */\nSearchCollection = function () {\n  /**\n   * Constructor\n   *\n   * @param {Object}         indexConfiguration Index configuration\n   * @param {ReactiveEngine} engine             Reactive Engine\n   *\n   * @constructor\n   */\n\n  function SearchCollection(indexConfiguration, engine) {\n    (0, _classCallCheck3['default'])(this, SearchCollection);\n\n    check(indexConfiguration, Object);\n    check(indexConfiguration.name, Match.OneOf(String, null));\n\n    if (!(engine instanceof ReactiveEngine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');\n    }\n\n    this._indexConfiguration = indexConfiguration;\n    this._name = indexConfiguration.name + '/easySearch';\n    this._engine = engine;\n\n    if (Meteor.isClient) {\n      this._collection = new Meteor.Collection(this._name);\n    } else if (Meteor.isServer) {\n      this._setUpPublication();\n    }\n  }\n\n  /**\n   * Get name\n   *\n   * @returns {String}\n   */\n\n\n  /**\n   * Find documents on the client.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n\n  SearchCollection.prototype.find = function () {\n    function find(searchDefinition, options) {\n      if (!Meteor.isClient) {\n        throw new Error('find can only be used on client');\n      }\n\n      var publishHandle = Meteor.subscribe(this.name, searchDefinition, options);\n\n      var count = this._getCount(searchDefinition);\n      var mongoCursor = this._getMongoCursor(searchDefinition, options);\n\n      if (!_.isNumber(count)) {\n        return new Cursor(mongoCursor, 0, false);\n      }\n\n      return new Cursor(mongoCursor, count, true, publishHandle);\n    }\n\n    return find;\n  }();\n\n  /**\n   * Get the count of the cursor.\n   *\n   * @params {Object} searchDefinition Search definition\n   *\n   * @returns {Cursor.count}\n   *\n   * @private\n   */\n\n\n  SearchCollection.prototype._getCount = function () {\n    function _getCount(searchDefinition) {\n      var countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));\n\n      if (countDoc) {\n        return countDoc.count;\n      }\n    }\n\n    return _getCount;\n  }();\n\n  /**\n   * Get the mongo cursor.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Search options\n   *\n   * @returns {Cursor}\n   * @private\n   */\n\n\n  SearchCollection.prototype._getMongoCursor = function () {\n    function _getMongoCursor(searchDefinition, options) {\n      var _this = this;\n\n      return this._collection.find({ __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options.props) }, {\n        transform: function () {\n          function transform(doc) {\n            delete doc.__searchDefinition;\n            delete doc.__searchOptions;\n            delete doc.__sortPosition;\n\n            doc = _this.engine.config.transform(doc);\n\n            return doc;\n          }\n\n          return transform;\n        }(),\n        sort: ['__sortPosition']\n      });\n    }\n\n    return _getMongoCursor;\n  }();\n\n  /**\n   * Return a unique document id for publication.\n   *\n   * @param {Document} doc\n   *\n   * @returns string\n   */\n\n\n  SearchCollection.prototype.generateId = function () {\n    function generateId(doc) {\n      return doc._id + doc.__searchDefinition + doc.__searchOptions;\n    }\n\n    return generateId;\n  }();\n\n  /**\n   * Add custom fields to the given document\n   *\n   * @param {Document} doc\n   * @param {Object}   data\n   * @returns {*}\n   */\n\n\n  SearchCollection.prototype.addCustomFields = function () {\n    function addCustomFields(doc, data) {\n      _.forEach(data, function (val, key) {\n        doc['__' + key] = val;\n      });\n\n      return doc;\n    }\n\n    return addCustomFields;\n  }();\n\n  /**\n   * Set up publication.\n   *\n   * @private\n   */\n\n\n  SearchCollection.prototype._setUpPublication = function () {\n    function _setUpPublication() {\n      var collectionScope = this,\n          collectionName = this.name;\n\n      Meteor.publish(collectionName, function (searchDefinition, options) {\n        var _this2 = this;\n\n        check(searchDefinition, Match.OneOf(String, Object));\n        check(options, Object);\n\n        var definitionString = JSON.stringify(searchDefinition),\n            optionsString = JSON.stringify(options.props);\n\n        options.userId = this.userId;\n        options.publicationScope = this;\n\n        if (!collectionScope._indexConfiguration.permission(options)) {\n          throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n        }\n\n        collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);\n\n        var cursor = collectionScope.engine.search(searchDefinition, {\n          search: options,\n          index: collectionScope._indexConfiguration\n        });\n\n        var count = cursor.count();\n\n        this.added(collectionName, 'searchCount' + definitionString, { count: count });\n\n        var resultsHandle = cursor.mongoCursor.observe({\n          addedAt: function () {\n            function addedAt(doc, atIndex, before) {\n              doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);\n              doc = collectionScope.addCustomFields(doc, {\n                searchDefinition: definitionString,\n                searchOptions: optionsString,\n                sortPosition: atIndex,\n                originalId: doc._id\n              });\n\n              _this2.added(collectionName, collectionScope.generateId(doc), doc);\n            }\n\n            return addedAt;\n          }(),\n          changedAt: function () {\n            function changedAt(doc, oldDoc, atIndex) {\n              doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);\n              doc = collectionScope.addCustomFields(doc, {\n                searchDefinition: definitionString,\n                searchOptions: optionsString,\n                sortPosition: atIndex,\n                originalId: doc._id\n              });\n\n              _this2.changed(collectionName, collectionScope.generateId(doc), doc);\n            }\n\n            return changedAt;\n          }(),\n          movedTo: function () {\n            function movedTo(doc, fromIndex, toIndex, before) {\n              doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);\n              doc = collectionScope.addCustomFields(doc, {\n                searchDefinition: definitionString,\n                searchOptions: optionsString,\n                sortPosition: toIndex\n              });\n\n              var beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);\n\n              if (beforeDoc) {\n                beforeDoc = collectionScope.addCustomFields(beforeDoc, {\n                  searchDefinition: definitionString,\n                  searchOptions: optionsString,\n                  sortPosition: fromIndex\n                });\n                _this2.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);\n              }\n\n              _this2.changed(collectionName, collectionScope.generateId(doc), doc);\n            }\n\n            return movedTo;\n          }(),\n          removedAt: function () {\n            function removedAt(doc, atIndex) {\n              doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);\n              doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n              _this2.removed(collectionName, collectionScope.generateId(doc));\n            }\n\n            return removedAt;\n          }()\n        });\n\n        this.onStop(function () {\n          resultsHandle.stop();\n        });\n\n        this.ready();\n      });\n    }\n\n    return _setUpPublication;\n  }();\n\n  (0, _createClass3['default'])(SearchCollection, [{\n    key: 'name',\n    get: function () {\n      function get() {\n        return this._name;\n      }\n\n      return get;\n    }()\n\n    /**\n     * Get engine\n     *\n     * @returns {ReactiveEngine}\n     */\n\n  }, {\n    key: 'engine',\n    get: function () {\n      function get() {\n        return this._engine;\n      }\n\n      return get;\n    }()\n  }]);\n  return SearchCollection;\n}();","ast":null,"map":{"version":3,"sources":["/packages/easysearch:core/lib/core/search-collection.js"],"names":[],"mappings":"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","file":"/packages/easysearch:core/lib/core/search-collection.js.map","sourcesContent":["/**\n * A search collection represents a reactive collection on the client,\n * which is used by the ReactiveEngine for searching.\n *\n * @type {SearchCollection}\n */\nSearchCollection = class SearchCollection {\n  /**\n   * Constructor\n   *\n   * @param {Object}         indexConfiguration Index configuration\n   * @param {ReactiveEngine} engine             Reactive Engine\n   *\n   * @constructor\n   */\n  constructor(indexConfiguration, engine) {\n    check(indexConfiguration, Object);\n    check(indexConfiguration.name, Match.OneOf(String, null));\n\n    if (!(engine instanceof ReactiveEngine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof ReactiveEngine');\n    }\n\n    this._indexConfiguration = indexConfiguration;\n    this._name = `${indexConfiguration.name}/easySearch`;\n    this._engine = engine;\n\n    if (Meteor.isClient) {\n      this._collection = new Meteor.Collection(this._name);\n    } else if (Meteor.isServer) {\n      this._setUpPublication();\n    }\n  }\n\n  /**\n   * Get name\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Get engine\n   *\n   * @returns {ReactiveEngine}\n   */\n  get engine() {\n    return this._engine;\n  }\n\n  /**\n   * Find documents on the client.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Options\n   *\n   * @returns {Cursor}\n   */\n  find(searchDefinition, options) {\n    if (!Meteor.isClient) {\n      throw new Error('find can only be used on client');\n    }\n\n    let publishHandle = Meteor.subscribe(this.name, searchDefinition, options);\n\n    let count = this._getCount(searchDefinition);\n    let mongoCursor = this._getMongoCursor(searchDefinition, options);\n\n    if (!_.isNumber(count)) {\n      return new Cursor(mongoCursor, 0, false);\n    }\n\n    return new Cursor(mongoCursor, count, true, publishHandle);\n  }\n\n  /**\n   * Get the count of the cursor.\n   *\n   * @params {Object} searchDefinition Search definition\n   *\n   * @returns {Cursor.count}\n   *\n   * @private\n   */\n  _getCount(searchDefinition) {\n    let countDoc = this._collection.findOne('searchCount' + JSON.stringify(searchDefinition));\n\n    if (countDoc) {\n      return countDoc.count;\n    }\n  }\n\n  /**\n   * Get the mongo cursor.\n   *\n   * @param {Object} searchDefinition Search definition\n   * @param {Object} options          Search options\n   *\n   * @returns {Cursor}\n   * @private\n   */\n  _getMongoCursor(searchDefinition, options) {\n    return this._collection.find(\n      { __searchDefinition: JSON.stringify(searchDefinition), __searchOptions: JSON.stringify(options.props) },\n      {\n        transform: (doc) => {\n          delete doc.__searchDefinition;\n          delete doc.__searchOptions;\n          delete doc.__sortPosition;\n\n          doc = this.engine.config.transform(doc);\n\n          return doc;\n        },\n        sort: ['__sortPosition']\n      }\n    );\n  }\n\n  /**\n   * Return a unique document id for publication.\n   *\n   * @param {Document} doc\n   *\n   * @returns string\n   */\n  generateId(doc) {\n    return doc._id + doc.__searchDefinition + doc.__searchOptions;\n  }\n\n  /**\n   * Add custom fields to the given document\n   *\n   * @param {Document} doc\n   * @param {Object}   data\n   * @returns {*}\n   */\n  addCustomFields(doc, data) {\n    _.forEach(data, function (val, key) {\n      doc['__' + key] = val;\n    });\n\n    return doc;\n  }\n\n  /**\n   * Set up publication.\n   *\n   * @private\n   */\n  _setUpPublication() {\n    var collectionScope = this,\n      collectionName = this.name;\n\n    Meteor.publish(collectionName, function (searchDefinition, options) {\n      check(searchDefinition, Match.OneOf(String, Object));\n      check(options, Object);\n\n      let definitionString = JSON.stringify(searchDefinition),\n        optionsString = JSON.stringify(options.props);\n\n      options.userId = this.userId;\n      options.publicationScope = this;\n\n      if (!collectionScope._indexConfiguration.permission(options)) {\n        throw new Meteor.Error('not-allowed', \"You're not allowed to search this index!\");\n      }\n\n      collectionScope.engine.checkSearchParam(searchDefinition, collectionScope._indexConfiguration);\n\n      let cursor = collectionScope.engine.search(searchDefinition, {\n        search: options,\n        index: collectionScope._indexConfiguration\n      });\n\n      const count = cursor.count();\n\n      this.added(collectionName, 'searchCount' + definitionString, { count: count });\n\n      let resultsHandle = cursor.mongoCursor.observe({\n        addedAt: (doc, atIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('addedAt', doc, atIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.added(collectionName, collectionScope.generateId(doc), doc);\n        },\n        changedAt: (doc, oldDoc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('changedAt', doc, oldDoc, atIndex);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: atIndex,\n            originalId: doc._id\n          });\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc)\n        },\n        movedTo: (doc, fromIndex, toIndex, before) => {\n          doc = collectionScope.engine.config.beforePublish('movedTo', doc, fromIndex, toIndex, before);\n          doc = collectionScope.addCustomFields(doc, {\n            searchDefinition: definitionString,\n            searchOptions: optionsString,\n            sortPosition: toIndex\n          });\n\n          let beforeDoc = collectionScope._indexConfiguration.collection.findOne(before);\n\n          if (beforeDoc) {\n            beforeDoc = collectionScope.addCustomFields(beforeDoc, {\n              searchDefinition: definitionString,\n              searchOptions: optionsString,\n              sortPosition: fromIndex\n            });\n            this.changed(collectionName, collectionScope.generateId(beforeDoc), beforeDoc);\n          }\n\n          this.changed(collectionName, collectionScope.generateId(doc), doc);\n        },\n        removedAt: (doc, atIndex) => {\n          doc = collectionScope.engine.config.beforePublish('removedAt', doc, atIndex);\n          doc = collectionScope.addCustomFields(doc, { searchDefinition: definitionString, searchOptions: optionsString });\n          this.removed(collectionName, collectionScope.generateId(doc));\n        }\n      });\n\n      this.onStop(function () {\n        resultsHandle.stop();\n      });\n\n      this.ready();\n    });\n  }\n};\n"]},"hash":"599f26e27327b6f25ff2aee8191c58868c518636"}
