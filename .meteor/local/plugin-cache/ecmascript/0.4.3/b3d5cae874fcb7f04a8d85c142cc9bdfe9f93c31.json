{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:core/lib/core/engine.js","filenameRelative":"/packages/easysearch:core/lib/core/engine.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:core/lib/core/engine.js.map","sourceFileName":"/packages/easysearch:core/lib/core/engine.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"engine"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * An Engine is the technology used for searching with EasySearch, with\n * customizable configuration to how it interacts with the data from the Index.\n *\n * @type {Engine}\n */\nEngine = function () {\n  /**\n   * Constructor\n   *\n   * @param {Object} config configuration\n   *\n   * @constructor\n   */\n\n  function Engine() {\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    (0, _classCallCheck3['default'])(this, Engine);\n\n    if (this.constructor === Engine) {\n      throw new Error('Cannot initialize instance of Engine');\n    }\n\n    if (!_.isFunction(this.search)) {\n      throw new Error('Engine needs to implement search method');\n    }\n\n    this.config = _.defaults({}, config, this.defaultConfiguration());\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n\n\n  Engine.prototype.defaultConfiguration = function () {\n    function defaultConfiguration() {\n      return {};\n    }\n\n    return defaultConfiguration;\n  }();\n\n  /**\n   * Call a configuration method with the engine scope.\n   *\n   * @param {String} methodName Method name\n   * @param {Object} args       Arguments for the method\n   *\n   * @returns {*}\n   */\n\n\n  Engine.prototype.callConfigMethod = function () {\n    function callConfigMethod(methodName) {\n      check(methodName, String);\n\n      var func = this.config[methodName];\n\n      if (func) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return func.apply(this, args);\n      }\n    }\n\n    return callConfigMethod;\n  }();\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n\n\n  Engine.prototype.checkSearchParam = function () {\n    function checkSearchParam(search) {\n      check(search, String);\n    }\n\n    return checkSearchParam;\n  }();\n\n  /**\n   *Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuraction\n   */\n\n\n  Engine.prototype.onIndexCreate = function () {\n    function onIndexCreate(indexConfig) {\n      if (!indexConfig.allowedFields) {\n        indexConfig.allowedFields = indexConfig.fields;\n      }\n    }\n\n    return onIndexCreate;\n  }();\n\n  return Engine;\n}();","ast":null,"map":{"version":3,"sources":["/packages/easysearch:core/lib/core/engine.js"],"names":[],"mappings":";;;;;;;;;;;;AAMA;;;;;;;;;AAQE,WARa,MAQb,GAAyB;QAAb,+DAAS,kBAAI;2CARZ,QAQY;;AACvB,QAAI,KAAK,WAAL,KAAqB,MAArB,EAA6B;AAC/B,YAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN,CAD+B;KAAjC;;AAIA,QAAI,CAAC,EAAE,UAAF,CAAa,KAAK,MAAL,CAAd,EAA4B;AAC9B,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN,CAD8B;KAAhC;;AAIA,SAAK,MAAL,GAAc,EAAE,QAAF,CAAW,EAAX,EAAe,MAAf,EAAuB,KAAK,oBAAL,EAAvB,CAAd,CATuB;GAAzB;;;;;;;;;AARa,mBAyBb;oCAAuB;AACrB,aAAO,EAAP,CADqB;;;;;;;;;;;;;;;;AAzBV,mBAqCb;8BAAiB,YAAqB;AACpC,YAAM,UAAN,EAAkB,MAAlB,EADoC;;AAGpC,UAAI,OAAO,KAAK,MAAL,CAAY,UAAZ,CAAP,CAHgC;;AAKpC,UAAI,IAAJ,EAAU;0CALoB;;SAKpB;;AACR,eAAO,KAAK,KAAL,CAAW,IAAX,EAAiB,IAAjB,CAAP,CADQ;OAAV;;;;;;;;;;;;;AA1CW,mBAoDb;8BAAiB,QAAQ;AACvB,YAAM,MAAN,EAAc,MAAd,EADuB;;;;;;;;;;;;;AApDZ,mBA6Db;2BAAc,aAAa;AACzB,UAAI,CAAC,YAAY,aAAZ,EAA2B;AAC9B,oBAAY,aAAZ,GAA4B,YAAY,MAAZ,CADE;OAAhC;;;;;;SA9DW;GAAf","file":"/packages/easysearch:core/lib/core/engine.js.map","sourcesContent":["/**\n * An Engine is the technology used for searching with EasySearch, with\n * customizable configuration to how it interacts with the data from the Index.\n *\n * @type {Engine}\n */\nEngine = class Engine {\n  /**\n   * Constructor\n   *\n   * @param {Object} config configuration\n   *\n   * @constructor\n   */\n  constructor(config = {}) {\n    if (this.constructor === Engine) {\n      throw new Error('Cannot initialize instance of Engine');\n    }\n\n    if (!_.isFunction(this.search)) {\n      throw new Error('Engine needs to implement search method');\n    }\n\n    this.config = _.defaults({}, config, this.defaultConfiguration());\n  }\n\n  /**\n   * Return default configuration.\n   *\n   * @returns {Object}\n   */\n  defaultConfiguration() {\n    return {};\n  }\n\n  /**\n   * Call a configuration method with the engine scope.\n   *\n   * @param {String} methodName Method name\n   * @param {Object} args       Arguments for the method\n   *\n   * @returns {*}\n   */\n  callConfigMethod(methodName, ...args) {\n    check(methodName, String);\n\n    let func = this.config[methodName];\n\n    if (func) {\n      return func.apply(this, args);\n    }\n  }\n\n  /**\n   * Check the given search parameter for validity\n   *\n   * @param search\n   */\n  checkSearchParam(search) {\n    check(search, String);\n  }\n\n  /**\n   *Code to run on index creation\n   *\n   * @param {Object} indexConfig Index configuraction\n   */\n  onIndexCreate(indexConfig) {\n    if (!indexConfig.allowedFields) {\n      indexConfig.allowedFields = indexConfig.fields;\n    }\n  }\n};\n"]},"hash":"b3d5cae874fcb7f04a8d85c142cc9bdfe9f93c31"}
