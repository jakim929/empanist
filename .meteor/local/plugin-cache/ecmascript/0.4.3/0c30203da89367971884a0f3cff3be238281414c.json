{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../collections/account.js","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/main.js","filenameRelative":"/server/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/main.js.map","sourceFileName":"/server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var _meteor = require('meteor/meteor');\n\nvar _account = require('../collections/account.js');\n\n_meteor.Meteor.startup(function () {\n  // code to run on server at startup\n  // var options = {\n  //   keepHistory: 1000 * 60 * 5,\n  //   localSearch: true\n  // };\n  //\n  // function buildRegExp(searchText) {\n  //   var words = searchText.trim().split(/[ \\-\\:]+/);\n  //   var exps = _.map(words, function(word) {\n  //     return \"(?=.*\" + word + \")\";\n  //   });\n  //   var fullExp = exps.join('') + \".+\";\n  //   return new RegExp(fullExp, \"i\");\n  // }\n  //\n  // SearchSource.defineSource('accounts', function(searchText, options) {\n  //   var options = {sort: {isoScore: -1}, limit: 20};\n  //   if(searchText) {\n  //     var regExp = buildRegExp(searchText);\n  //     var selector = {packageName: regExp, description: regExp};\n  //     return Accounts.find(selector, options).fetch();\n  //   } else {\n  //     return Accounts.find({}, options).fetch();\n  //   }\n  // });\n});\n\nfunction geocodeAddress(geocoder, mylocation) {\n  var mylocation = document.getElementById('mylocation').value;\n  geocoder.geocode({ 'mylocation': mylocation }, function (results, status) {\n    if (status === google.maps.GeocoderStatus.OK) {\n      resultsMap.setCenter(results[0].geometry.location);\n      var marker = new google.maps.Marker({\n        map: resultsMap,\n        position: results[0].geometry.location\n      });\n    } else {\n      alert('Geocode was not successful for the following reason: ' + status);\n    }\n  });\n};","ast":null,"map":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":"AAAA;;AACA;;AAEA,eAAO,OAAP,CAAe,YAAM;;;;;;;;;;;;;;;;;;;;;;;;;;CAAN,CAAf;;AA4BA,SAAS,cAAT,CAAwB,QAAxB,EAAkC,UAAlC,EAA8C;AAC5C,MAAI,aAAa,SAAS,cAAT,CAAwB,YAAxB,EAAsC,KAAtC,CAD2B;AAE5C,WAAS,OAAT,CAAiB,EAAC,cAAc,UAAd,EAAlB,EAA6C,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AACrE,QAAI,WAAW,OAAO,IAAP,CAAY,cAAZ,CAA2B,EAA3B,EAA+B;AAC5C,iBAAW,SAAX,CAAqB,QAAQ,CAAR,EAAW,QAAX,CAAoB,QAApB,CAArB,CAD4C;AAE5C,UAAI,SAAS,IAAI,OAAO,IAAP,CAAY,MAAZ,CAAmB;AAClC,aAAK,UAAL;AACA,kBAAU,QAAQ,CAAR,EAAW,QAAX,CAAoB,QAApB;OAFC,CAAT,CAFwC;KAA9C,MAMO;AACL,YAAM,0DAA0D,MAA1D,CAAN,CADK;KANP;GAD2C,CAA7C,CAF4C;CAA9C","file":"/server/main.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Accounts } from '../collections/account.js'\n\nMeteor.startup(() => {\n  // code to run on server at startup\n  // var options = {\n  //   keepHistory: 1000 * 60 * 5,\n  //   localSearch: true\n  // };\n  //\n  // function buildRegExp(searchText) {\n  //   var words = searchText.trim().split(/[ \\-\\:]+/);\n  //   var exps = _.map(words, function(word) {\n  //     return \"(?=.*\" + word + \")\";\n  //   });\n  //   var fullExp = exps.join('') + \".+\";\n  //   return new RegExp(fullExp, \"i\");\n  // }\n  //\n  // SearchSource.defineSource('accounts', function(searchText, options) {\n  //   var options = {sort: {isoScore: -1}, limit: 20};\n  //   if(searchText) {\n  //     var regExp = buildRegExp(searchText);\n  //     var selector = {packageName: regExp, description: regExp};\n  //     return Accounts.find(selector, options).fetch();\n  //   } else {\n  //     return Accounts.find({}, options).fetch();\n  //   }\n  // });\n});\n\nfunction geocodeAddress(geocoder, mylocation) {\n  var mylocation = document.getElementById('mylocation').value;\n  geocoder.geocode({'mylocation': mylocation}, function(results, status) {\n    if (status === google.maps.GeocoderStatus.OK) {\n      resultsMap.setCenter(results[0].geometry.location);\n      var marker = new google.maps.Marker({\n        map: resultsMap,\n        position: results[0].geometry.location\n      });\n    } else {\n      alert('Geocode was not successful for the following reason: ' + status);\n    }\n  });\n};"]},"hash":"0c30203da89367971884a0f3cff3be238281414c"}
