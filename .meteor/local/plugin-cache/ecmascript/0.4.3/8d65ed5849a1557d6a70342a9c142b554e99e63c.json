{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]}],"exports":{"exported":["AccompanistProfile"],"specifiers":[{"kind":"local","local":"AccompanistProfile","exported":"AccompanistProfile"}]}}},"options":{"filename":"/collections/accompanistProfile.js","filenameRelative":"/collections/accompanistProfile.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/collections/accompanistProfile.js.map","sourceFileName":"/collections/accompanistProfile.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"accompanistProfile"},"ignored":false,"code":"exports.__esModule = true;\nexports.AccompanistProfile = undefined;\n\nvar _mongo = require('meteor/mongo');\n\nvar AccompanistProfile = exports.AccompanistProfile = new _mongo.Mongo.Collection('accompanistProfile');\n\nSimpleSchema.messages;\nneedsLatLong: '[label] should be of form [longitude, latitude]';\nlonOutOfRange: '[label] longitude should be between -90 and 90';\nlatOutOfRange: '[label] latitude should be between -180 and 180';\n\nLocationSchema = new SimpleSchema({\n  \"type\": {\n    type: String,\n    allowedValues: [\"Point\"]\n  },\n  \"coordinates\": {\n    type: Array,\n    minCount: 2,\n    maxCount: 2\n  },\n  \"coordinates.$\": {\n    type: Number,\n    decimal: true,\n    custom: function () {\n      function custom() {\n        if (!(-90 <= this.value[0] <= 90)) return \"lonOutOfRange\";\n        if (!(-180 <= this.value[1] <= 180)) return \"latOutOfRange\";\n      }\n\n      return custom;\n    }()\n\n  },\n  \"name\": {\n    type: String,\n    optional: true\n  }\n});\n\nLocationSchema.messages = {\n  lonOutOfRange: 'Longitude out of range', // Must be between -90 and 90\n  latOutOfRange: 'Latitude out of range' // Must be between -180 and 180\n};\n\nAccompanistProfileSchema = new SimpleSchema({\n  Id: {\n    type: String,\n    label: \"User ID\",\n    autoform: {\n      type: \"hidden\"\n    },\n    autoValue: function () {\n      function autoValue() {\n        return this.userId;\n      }\n\n      return autoValue;\n    }()\n  },\n\n  repertoire: {\n    type: [String],\n    label: \"Repertoire\"\n  },\n\n  charge: {\n    type: Number,\n    label: \"Hourly Charge\",\n    autoform: {\n      options: [{ label: \"$20\", value: 20 }, { label: \"$40\", value: 40 }, { label: \"$60\", value: 60 }]\n    }\n  },\n\n  working_hours: {\n    type: [String],\n    label: \"Times you prefer working\",\n    autoform: {\n      type: \"select-checkbox-inline\",\n      options: [{ label: \"Morning (8am - 12pm)\", value: \"morning\" }, { label: \"Afternoon (12pm - 6pm)\", value: \"afternoon\" }, { label: \"Night (6pm - 11pm)\", value: \"night\" }]\n    }\n  },\n\n  working_days: {\n    type: [String],\n    //noselect:true,\n    label: \"Days you want to accompany\",\n    autoform: {\n      type: \"select-checkbox-inline\",\n      options: [{ label: \"Monday\", value: \"monday\" }, { label: \"Tuesday\", value: \"tuesday\" }, { label: \"Wednesday\", value: \"wednesday\" }, { label: \"Thursday\", value: \"thursday\" }, { label: \"Friday\", value: \"friday\" }, { label: \"Saturday\", value: \"saturday\" }, { label: \"Sunday\", value: \"sunday\" }]\n    }\n  },\n\n  session_location: {\n    type: String,\n    label: \"Session's Location\",\n    autoform: {\n      options: [{ label: \"My Place\", value: \"My Place\" }, { label: \"Student's Place\", value: \"Student's Place\" }, { label: \"Doesn't matter\", value: \"Doesn't matter\" }]\n    }\n  },\n\n  startDate: {\n    type: Date,\n    label: \"Start Date\"\n  },\n\n  endDate: {\n    type: Date,\n    label: \"End Date\"\n  },\n\n  // make this show up only if the accomp said he's willing to give sessoins in his place\n  mylocation: {\n    type: String,\n    label: \"mylocation\"\n  },\n\n  geolocation: {\n    type: Object,\n    blackbox: true,\n    label: 'geolocation',\n    autoform: {\n      type: \"hidden\",\n      label: false\n    }\n  },\n\n  coords: {\n    type: LocationSchema,\n    label: 'coords'\n  },\n\n  one_liner: {\n    type: String,\n    label: \"Describe yourself in one sentence\"\n  }\n\n});\n\n// AccompanistProfileSchema._ensureIndex({ \"coords\": \"2dsphere\"});\n\nAccompanistProfile.attachSchema(AccompanistProfileSchema);","ast":null,"map":{"version":3,"sources":["/collections/accompanistProfile.js"],"names":[],"mappings":"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","file":"/collections/accompanistProfile.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nexport const AccompanistProfile = new Mongo.Collection('accompanistProfile');\n\nSimpleSchema.messages\n  needsLatLong: '[label] should be of form [longitude, latitude]'\n  lonOutOfRange: '[label] longitude should be between -90 and 90'\n  latOutOfRange: '[label] latitude should be between -180 and 180'\n\nLocationSchema = new SimpleSchema({\n    \"type\":{\n        type: String,\n        allowedValues: [\"Point\"]\n    },\n    \"coordinates\":{\n        type: Array,\n        minCount: 2,\n        maxCount: 2\n    },\n    \"coordinates.$\":{\n        type: Number,\n        decimal: true,\n        custom: function(){\n            if(!(-90 <= this.value[0] <= 90))\n                return \"lonOutOfRange\" ;\n            if(!(-180 <= this.value[1] <= 180))\n                return \"latOutOfRange\" ;\n        }\n\n    },\n    \"name\": {\n        type: String,\n        optional: true\n    },\n});\n\n\nLocationSchema.messages = {\n  lonOutOfRange: 'Longitude out of range', // Must be between -90 and 90\n  latOutOfRange: 'Latitude out of range' // Must be between -180 and 180\n}\n\nAccompanistProfileSchema = new SimpleSchema({\n\t\tId: {\n\t\t\ttype: String,\n\t\t\tlabel: \"User ID\",\n\t\t\tautoform: {\n\t\t\t\ttype: \"hidden\"\n\t\t\t},\n\t\t\tautoValue: function(){\n\t\t\t\treturn this.userId\n\t\t\t}\n\t\t},\n\n\t\trepertoire: {\n    \ttype: [String],\n    \tlabel: \"Repertoire\"\n  \t},\n\n  \tcharge: {\n  \t\ttype: Number,\n  \t\tlabel: \"Hourly Charge\",\n  \t\tautoform: {\n      \t\toptions: [\n\t        \t{label: \"$20\", value: 20},\n\t        \t{label: \"$40\", value: 40},\n\t        \t{label: \"$60\", value: 60}\n      \t\t]\n   \t\t}\n  \t},\n\n  \tworking_hours: {\n  \t\ttype: [String],\n  \t\tlabel: \"Times you prefer working\",\n  \t\tautoform: {\n  \t\t\ttype: \"select-checkbox-inline\",\n  \t\t\toptions: [\n        \t{label: \"Morning (8am - 12pm)\", value: \"morning\"},\n        \t{label: \"Afternoon (12pm - 6pm)\", value: \"afternoon\"},\n        \t{label: \"Night (6pm - 11pm)\", value: \"night\"}\n      \t\t]\n   \t\t}\n  \t},\n\n   \tworking_days: {\n  \t\ttype: [String],\n  \t\t//noselect:true,\n  \t\tlabel: \"Days you want to accompany\",\n  \t\tautoform: {\n  \t\t\ttype: \"select-checkbox-inline\",\n  \t\t\toptions: [\n        \t{label: \"Monday\", value: \"monday\"},\n        \t{label: \"Tuesday\", value: \"tuesday\"},\n        \t{label: \"Wednesday\", value: \"wednesday\"},\n        \t{label: \"Thursday\", value: \"thursday\"},\n        \t{label: \"Friday\", value: \"friday\"},\n        \t{label: \"Saturday\", value: \"saturday\"},\n        \t{label: \"Sunday\", value: \"sunday\"},\n      \t\t]\n   \t\t}\n  \t},\n\n  \tsession_location: {\n  \t\ttype: String,\n  \t\tlabel: \"Session's Location\",\n  \t\tautoform: {\n  \t\t\toptions: [\n        \t{label: \"My Place\", value: \"My Place\"},\n        \t{label: \"Student's Place\", value: \"Student's Place\"},\n        \t{label: \"Doesn't matter\", value: \"Doesn't matter\"}\n      \t\t]\n  \t\t}\n  \t},\n\n    startDate: {\n      type: Date,\n      label: \"Start Date\"\n    },\n\n    endDate: {\n      type: Date,\n      label: \"End Date\"\n    },\n\n    // make this show up only if the accomp said he's willing to give sessoins in his place\n    mylocation: {\n      type: String,\n      label: \"mylocation\"\n    },\n\n    geolocation:{\n      type: Object,\n      blackbox: true,\n      label: 'geolocation',\n      autoform: {\n        type: \"hidden\",\n        label: false\n      },\n  },\n\n    coords:{\n      type: LocationSchema,\n      label: 'coords'\n    },\n\n  \tone_liner: {\n  \t\ttype: String,\n  \t\tlabel: \"Describe yourself in one sentence\",\n  \t},\n\n});\n\n// AccompanistProfileSchema._ensureIndex({ \"coords\": \"2dsphere\"});\n\nAccompanistProfile.attachSchema(AccompanistProfileSchema)\n"]},"hash":"8d65ed5849a1557d6a70342a9c142b554e99e63c"}
