{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:autosuggest/lib/autosuggest.js","filenameRelative":"/packages/easysearch:autosuggest/lib/autosuggest.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:autosuggest/lib/autosuggest.js.map","sourceFileName":"/packages/easysearch:autosuggest/lib/autosuggest.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"autosuggest"},"ignored":false,"code":"Template['EasySearch.Autosuggest'].onRendered(function () {\n  var _this = this;\n\n  /**\n   * Helper function to return data for the autosuggest component.\n   *\n   * @param {String} val        Value to return\n   * @param {*}      defaultVal Optional default value to provide\n   *\n   * @return {*}\n   */\n  var getDataValue = function getDataValue(val, defaultVal) {\n    return _this.data[val] || defaultVal;\n  };\n\n  if (!this.data.index) {\n    throw new Meteor.Error('no-index', 'Please provide an index for your component');\n  }\n\n  if (this.data.indexes) {\n    throw new Meteor.Error('only-single-index', 'Can only specify one index');\n  }\n\n  var handle = void 0,\n      computation = void 0,\n      index = this.data.index,\n      valueField = getDataValue('valueField', '_id'),\n      labelField = getDataValue('labelField', index.config.fields[0]),\n      searchField = getDataValue('searchField', labelField),\n      changeConfiguration = getDataValue('changeConfiguration', function (c) {\n    return c;\n  }),\n      suggestionTemplate = Template[getDataValue('renderSuggestion', 'EasySarch.Autogguest.DefaultRenderSuggestion')];\n\n  var select = this.$('select').selectize(changeConfiguration({\n    valueField: valueField,\n    labelField: labelField,\n    searchField: searchField,\n    create: false,\n    preload: true,\n    render: {\n      option: function () {\n        function option(item, escape) {\n          return Blaze.toHTMLWithData(suggestionTemplate, {\n            doc: item,\n            _id: item._id,\n            label: _.get(item, labelField)\n          });\n        }\n\n        return option;\n      }()\n    },\n    load: function () {\n      function load(query, callback) {\n        if (computation) {\n          computation.stop();\n        }\n\n        computation = Tracker.autorun(function () {\n          var cursor = index.search(query),\n              docs = cursor.fetch();\n\n          if (handle) {\n            clearTimeout(handle);\n          }\n\n          handle = setTimeout(function () {\n            select[0].selectize.clearOptions();\n            callback(docs);\n          }, 100);\n        });\n      }\n\n      return load;\n    }()\n  }));\n});","ast":null,"map":{"version":3,"sources":["/packages/easysearch:autosuggest/lib/autosuggest.js"],"names":[],"mappings":"AAAA,SAAS,wBAAT,EAAmC,UAAnC,CAA8C,YAAY;;;;;;;;;;;AASxD,MAAM,eAAe,SAAf,YAAe,CAAC,GAAD,EAAM,UAAN;WAAqB,MAAK,IAAL,CAAU,GAAV,KAAkB,UAAlB;GAArB,CATmC;;AAWxD,MAAI,CAAC,KAAK,IAAL,CAAU,KAAV,EAAiB;AACpB,UAAM,IAAI,OAAO,KAAP,CAAa,UAAjB,EAA6B,4CAA7B,CAAN,CADoB;GAAtB;;AAIA,MAAI,KAAK,IAAL,CAAU,OAAV,EAAmB;AACrB,UAAM,IAAI,OAAO,KAAP,CAAa,mBAAjB,EAAsC,4BAAtC,CAAN,CADqB;GAAvB;;AAIA,MAAI,eAAJ;MAAY,oBAAZ;MACE,QAAQ,KAAK,IAAL,CAAU,KAAV;MACR,aAAa,aAAa,YAAb,EAA2B,KAA3B,CAAb;MACA,aAAa,aAAa,YAAb,EAA2B,MAAM,MAAN,CAAa,MAAb,CAAoB,CAApB,CAA3B,CAAb;MACA,cAAc,aAAa,aAAb,EAA4B,UAA5B,CAAd;MACA,sBAAsB,aAAa,qBAAb,EAAoC,UAAC,CAAD;WAAO;GAAP,CAA1D;MACA,qBAAqB,SACnB,aAAa,kBAAb,EAAiC,8CAAjC,CADmB,CAArB,CAzBsD;;AA6BxD,MAAM,SAAS,KAAK,CAAL,CAAO,QAAP,EAAiB,SAAjB,CAA2B,oBAAoB;AAC5D,0BAD4D;AAE5D,0BAF4D;AAG5D,4BAH4D;AAI5D,YAAQ,KAAR;AACA,aAAS,IAAT;AACA,YAAQ;AACN;AAAQ,wBAAC,IAAD,EAAO,MAAP;iBAAkB,MAAM,cAAN,CAAqB,kBAArB,EAAyC;AACjE,iBAAK,IAAL;AACA,iBAAK,KAAK,GAAL;AACL,mBAAO,EAAE,GAAF,CAAM,IAAN,EAAY,UAAZ,CAAP;WAHwB;SAAlB;;;SAAR;KADF;AAOA;AAAM,oBAAC,KAAD,EAAQ,QAAR,EAAqB;AACzB,YAAI,WAAJ,EAAiB;AACf,sBAAY,IAAZ,GADe;SAAjB;;AAIA,sBAAc,QAAQ,OAAR,CAAgB,YAAM;AAClC,cAAI,SAAS,MAAM,MAAN,CAAa,KAAb,CAAT;cACF,OAAO,OAAO,KAAP,EAAP,CAFgC;;AAIlC,cAAI,MAAJ,EAAY;AACV,yBAAa,MAAb,EADU;WAAZ;;AAIA,mBAAS,WAAW,YAAM;AACxB,mBAAO,CAAP,EAAU,SAAV,CAAoB,YAApB,GADwB;AAExB,qBAAS,IAAT,EAFwB;WAAN,EAGjB,GAHM,CAAT,CARkC;SAAN,CAA9B,CALyB;OAArB;;;OAAN;GAbwC,CAA3B,CAAT,CA7BkD;CAAZ,CAA9C","file":"/packages/easysearch:autosuggest/lib/autosuggest.js.map","sourcesContent":["Template['EasySearch.Autosuggest'].onRendered(function () {\n  /**\n   * Helper function to return data for the autosuggest component.\n   *\n   * @param {String} val        Value to return\n   * @param {*}      defaultVal Optional default value to provide\n   *\n   * @return {*}\n   */\n  const getDataValue = (val, defaultVal) => this.data[val] || defaultVal;\n\n  if (!this.data.index) {\n    throw new Meteor.Error('no-index', 'Please provide an index for your component');\n  }\n\n  if (this.data.indexes) {\n    throw new Meteor.Error('only-single-index', 'Can only specify one index');\n  }\n\n  let handle, computation,\n    index = this.data.index,\n    valueField = getDataValue('valueField', '_id'),\n    labelField = getDataValue('labelField', index.config.fields[0]),\n    searchField = getDataValue('searchField', labelField),\n    changeConfiguration = getDataValue('changeConfiguration', (c) => c),\n    suggestionTemplate = Template[\n      getDataValue('renderSuggestion', 'EasySarch.Autogguest.DefaultRenderSuggestion')\n    ];\n\n  const select = this.$('select').selectize(changeConfiguration({\n    valueField,\n    labelField,\n    searchField,\n    create: false,\n    preload: true,\n    render: {\n      option: (item, escape) => Blaze.toHTMLWithData(suggestionTemplate, {\n        doc: item,\n        _id: item._id,\n        label: _.get(item, labelField)\n      })\n    },\n    load: (query, callback) => {\n      if (computation) {\n        computation.stop();\n      }\n\n      computation = Tracker.autorun(() => {\n        let cursor = index.search(query),\n          docs = cursor.fetch();\n\n        if (handle) {\n          clearTimeout(handle);\n        }\n\n        handle = setTimeout(() => {\n          select[0].selectize.clearOptions();\n          callback(docs);\n        }, 100);\n      });\n    }\n  }));\n});\n"]},"hash":"5d11db75c4c912c7c6074d48d3031db5fd0206e3"}
