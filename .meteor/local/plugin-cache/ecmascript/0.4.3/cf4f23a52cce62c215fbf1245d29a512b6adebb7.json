{"metadata":{"usedHelpers":["createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:core/lib/core/index.js","filenameRelative":"/packages/easysearch:core/lib/core/index.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:core/lib/core/index.js.map","sourceFileName":"/packages/easysearch:core/lib/core/index.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"index"},"ignored":false,"code":"var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * An Index represents the main entry point for searching with EasySearch. It relies on\n * the given engine to have the search functionality and defines the data that should be searchable.\n *\n * @type {Index}\n */\nIndex = function () {\n  /**\n   * Constructor\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n\n  function Index(config) {\n    (0, _classCallCheck3['default'])(this, Index);\n\n    check(config, Object);\n    check(config.collection, Meteor.Collection);\n    check(config.fields, [String]);\n\n    if (!(config.engine instanceof Engine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');\n    }\n\n    if (!config.name) config.name = (config.collection._name || '').toLowerCase();\n\n    this.config = _.extend(Index.defaultConfiguration, config);\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });\n\n    // Engine specific code on index creation\n    config.engine.onIndexCreate(this.config);\n  }\n\n  /**\n   * Default configuration for an index.\n   *\n   * @returns {Object}\n   */\n\n\n  /**\n   * Search the index.\n   *\n   * @param {Object|String} searchDefinition Search definition\n   * @param {Object}        options          Options\n   *\n   * @returns {Cursor}\n   */\n\n  Index.prototype.search = function () {\n    function search(searchDefinition) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      this.config.engine.checkSearchParam(searchDefinition, this.config);\n\n      check(options, {\n        limit: Match.Optional(Number),\n        skip: Match.Optional(Number),\n        props: Match.Optional(Object)\n      });\n\n      options = {\n        search: this._getSearchOptions(options),\n        index: this.config\n      };\n\n      if (!this.config.permission(options.search)) {\n        throw new Meteor.Error('not-allowed', \"Not allowed to search this index!\");\n      }\n\n      return this.config.engine.search(searchDefinition, options);\n    }\n\n    return search;\n  }();\n\n  /**\n   * Returns the search options based on the given options.\n   *\n   * @param {Object} options Options to use\n   *\n   * @returns {Object}\n   */\n\n\n  Index.prototype._getSearchOptions = function () {\n    function _getSearchOptions(options) {\n      return _.defaults(Meteor.userId ? { userId: Meteor.userId() } : {}, options, this.defaultSearchOptions);\n    }\n\n    return _getSearchOptions;\n  }();\n\n  (0, _createClass3['default'])(Index, null, [{\n    key: 'defaultConfiguration',\n    get: function () {\n      function get() {\n        return {\n          permission: function () {\n            function permission() {\n              return true;\n            }\n\n            return permission;\n          }(),\n          defaultSearchOptions: {}\n        };\n      }\n\n      return get;\n    }()\n  }]);\n  return Index;\n}();","ast":null,"map":{"version":3,"sources":["/packages/easysearch:core/lib/core/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAMA;;;;;;;;;AAQE,WARY,KAQZ,CAAY,MAAZ,EAAoB;2CARR,OAQQ;;AAClB,UAAM,MAAN,EAAc,MAAd,EADkB;AAElB,UAAM,OAAO,UAAP,EAAmB,OAAO,UAAP,CAAzB,CAFkB;AAGlB,UAAM,OAAO,MAAP,EAAe,CAAC,MAAD,CAArB,EAHkB;;AAKlB,QAAI,EAAE,OAAO,MAAP,YAAyB,MAAzB,CAAF,EAAoC;AACtC,YAAM,IAAI,OAAO,KAAP,CAAa,gBAAjB,EAAmC,sCAAnC,CAAN,CADsC;KAAxC;;AAIA,QAAI,CAAC,OAAO,IAAP,EACH,OAAO,IAAP,GAAc,CAAC,OAAO,UAAP,CAAkB,KAAlB,IAA2B,EAA3B,CAAD,CAAgC,WAAhC,EAAd,CADF;;AAGA,SAAK,MAAL,GAAc,EAAE,MAAF,CAAS,MAAM,oBAAN,EAA4B,MAArC,CAAd,CAZkB;AAalB,SAAK,oBAAL,GAA4B,EAAE,QAAF,CAAW,EAAX,EAAe,KAAK,MAAL,CAAY,oBAAZ,EAAkC,EAAE,OAAO,EAAP,EAAW,MAAM,CAAN,EAAS,OAAO,EAAP,EAAvE,CAA5B;;;AAbkB,UAgBlB,CAAO,MAAP,CAAc,aAAd,CAA4B,KAAK,MAAL,CAA5B,CAhBkB;GAApB;;;;;;;;;;;;;;;;;;AARY,kBA+CZ;oBAAO,kBAAgC;UAAd,gEAAU,kBAAI;;AACrC,WAAK,MAAL,CAAY,MAAZ,CAAmB,gBAAnB,CAAoC,gBAApC,EAAsD,KAAK,MAAL,CAAtD,CADqC;;AAGrC,YAAM,OAAN,EAAe;AACb,eAAO,MAAM,QAAN,CAAe,MAAf,CAAP;AACA,cAAM,MAAM,QAAN,CAAe,MAAf,CAAN;AACA,eAAO,MAAM,QAAN,CAAe,MAAf,CAAP;OAHF,EAHqC;;AASrC,gBAAU;AACR,gBAAQ,KAAK,iBAAL,CAAuB,OAAvB,CAAR;AACA,eAAO,KAAK,MAAL;OAFT,CATqC;;AAcrC,UAAI,CAAC,KAAK,MAAL,CAAY,UAAZ,CAAuB,QAAQ,MAAR,CAAxB,EAAyC;AAC3C,cAAM,IAAI,OAAO,KAAP,CAAa,aAAjB,EAAgC,mCAAhC,CAAN,CAD2C;OAA7C;;AAIA,aAAO,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAnB,CAA0B,gBAA1B,EAA4C,OAA5C,CAAP,CAlBqC;;;;;;;;;;;;;;;AA/C3B,kBA2EZ;+BAAkB,SAAS;AACzB,aAAO,EAAE,QAAF,CAAa,OAAO,MAAP,GAAgB,EAAE,QAAQ,OAAO,MAAP,EAAR,EAAlB,GAA8C,EAA9C,EAAoD,OAAjE,EAA0E,KAAK,oBAAL,CAAjF,CADyB;;;;;;gCA3Ef;;;qBAgCsB;AAChC,eAAO;AACL;AAAY;qBAAM;aAAN;;;aAAZ;AACA,gCAAsB,EAAtB;SAFF,CADgC;;;;;;SAhCtB;GAAd","file":"/packages/easysearch:core/lib/core/index.js.map","sourcesContent":["/**\n * An Index represents the main entry point for searching with EasySearch. It relies on\n * the given engine to have the search functionality and defines the data that should be searchable.\n *\n * @type {Index}\n */\nIndex = class Index {\n  /**\n   * Constructor\n   *\n   * @param {Object} config Configuration\n   *\n   * @constructor\n   */\n  constructor(config) {\n    check(config, Object);\n    check(config.collection, Meteor.Collection);\n    check(config.fields, [String]);\n\n    if (!(config.engine instanceof Engine)) {\n      throw new Meteor.Error('invalid-engine', 'engine needs to be instanceof Engine');\n    }\n\n    if (!config.name)\n      config.name = (config.collection._name || '').toLowerCase();\n\n    this.config = _.extend(Index.defaultConfiguration, config);\n    this.defaultSearchOptions = _.defaults({}, this.config.defaultSearchOptions, { limit: 10, skip: 0, props: {} });\n\n    // Engine specific code on index creation\n    config.engine.onIndexCreate(this.config);\n  }\n\n  /**\n   * Default configuration for an index.\n   *\n   * @returns {Object}\n   */\n  static get defaultConfiguration() {\n    return {\n      permission: () => true,\n      defaultSearchOptions: {}\n    };\n  }\n\n  /**\n   * Search the index.\n   *\n   * @param {Object|String} searchDefinition Search definition\n   * @param {Object}        options          Options\n   *\n   * @returns {Cursor}\n   */\n  search(searchDefinition, options = {}) {\n    this.config.engine.checkSearchParam(searchDefinition, this.config);\n\n    check(options, {\n      limit: Match.Optional(Number),\n      skip: Match.Optional(Number),\n      props: Match.Optional(Object)\n    });\n\n    options = {\n      search: this._getSearchOptions(options),\n      index: this.config\n    };\n\n    if (!this.config.permission(options.search)) {\n      throw new Meteor.Error('not-allowed', \"Not allowed to search this index!\");\n    }\n\n    return this.config.engine.search(searchDefinition, options);\n  }\n\n  /**\n   * Returns the search options based on the given options.\n   *\n   * @param {Object} options Options to use\n   *\n   * @returns {Object}\n   */\n  _getSearchOptions(options) {\n    return _.defaults(( Meteor.userId ? { userId: Meteor.userId() } : {} ), options, this.defaultSearchOptions);\n  }\n};\n"]},"hash":"cf4f23a52cce62c215fbf1245d29a512b6adebb7"}
