{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/easysearch:components/lib/component-methods.js","filenameRelative":"/packages/easysearch:components/lib/component-methods.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/easysearch:components/lib/component-methods.js.map","sourceFileName":"/packages/easysearch:components/lib/component-methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"component-methods"},"ignored":false,"code":"EasySearch._getComponentMethods = function (dict, index) {\n  return {\n    /**\n     * Search a component for the given search string.\n     *\n     * @param {Object|String} searchDefinition Search definition\n     */\n    search: function () {\n      function search(searchDefinition) {\n        dict.set('searchOptions', {\n          props: (dict.get('searchOptions') || {}).props\n        });\n\n        dict.set('searchDefinition', searchDefinition);\n        dict.set('stopPublication', true);\n      }\n\n      return search;\n    }(),\n    /**\n     * Return the EasySearch.Cursor for the current search.\n     *\n     * @returns {Cursor}\n     */\n    getCursor: function () {\n      function getCursor() {\n        var searchDefinition = dict.get('searchDefinition') || '',\n            options = dict.get('searchOptions'),\n            showDocuments = dict.get('showDocuments');\n\n        check(options, Match.Optional(Object));\n\n        if (false === showDocuments) {\n          dict.set('count', 0);\n          dict.set('searching', false);\n          dict.set('limit', 0);\n          dict.set('skip', 0);\n          dict.set('currentCount', 0);\n          dict.set('stopPublication', false);\n\n          return EasySearch.Cursor.emptyCursor;\n        }\n\n        var cursor = index.search(searchDefinition, options),\n            searchOptions = index._getSearchOptions(options);\n\n        dict.set('count', cursor.count());\n        dict.set('searching', !cursor.isReady());\n        dict.set('limit', searchOptions.limit);\n        dict.set('skip', searchOptions.skip);\n        dict.set('currentCount', cursor.mongoCursor.count());\n        dict.set('stopPublication', false);\n\n        return cursor;\n      }\n\n      return getCursor;\n    }(),\n    /**\n     * Return true if the current search string is empty.\n     *\n     * @returns {boolean}\n     */\n    searchIsEmpty: function () {\n      function searchIsEmpty() {\n        var searchDefinition = dict.get('searchDefinition');\n\n        return !searchDefinition || _.isString(searchDefinition) && 0 === searchDefinition.trim().length;\n      }\n\n      return searchIsEmpty;\n    }(),\n    /**\n     * Return true if the component has no results.\n     *\n     * @returns {boolean}\n     */\n    hasNoResults: function () {\n      function hasNoResults() {\n        var count = dict.get('count'),\n            showDocuments = dict.get('showDocuments');\n\n        return false !== showDocuments && !dict.get('searching') && (!_.isNumber(count) || 0 === count);\n      }\n\n      return hasNoResults;\n    }(),\n    /**\n     * Return true if the component is being searched.\n     *\n     * @returns {boolean}\n     */\n    isSearching: function () {\n      function isSearching() {\n        return !!dict.get('searching');\n      }\n\n      return isSearching;\n    }(),\n    /**\n     * Return true if the component has more documents than displayed right now.\n     *\n     * @returns {boolean}\n     */\n    hasMoreDocuments: function () {\n      function hasMoreDocuments() {\n        return dict.get('currentCount') < dict.get('count');\n      }\n\n      return hasMoreDocuments;\n    }(),\n    /**\n     * Load more documents for the component.\n     *\n     * @param {Number} count Count of docs\n     */\n    loadMore: function () {\n      function loadMore(count) {\n        check(count, Number);\n\n        var currentCount = dict.get('currentCount'),\n            options = dict.get('searchOptions') || {};\n\n        options.limit = currentCount + count;\n        dict.set('searchOptions', options);\n      }\n\n      return loadMore;\n    }(),\n    /**\n     * Paginate through documents for the given page.\n     *\n     * @param {Number} page Page number\n     */\n    paginate: function () {\n      function paginate(page) {\n        check(page, Number);\n\n        var options = dict.get('searchOptions') || {},\n            limit = dict.get('limit');\n\n        options.skip = limit * (page - 1);\n        dict.set('searchOptions', options);\n        dict.set('stopPublication', true);\n      }\n\n      return paginate;\n    }(),\n    /**\n     * Add custom properties for search.\n     */\n    addProps: function () {\n      function addProps() {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var options = dict.get('searchOptions') || {};\n\n        options.props = options.props || {};\n\n        if (_.isObject(args[0])) {\n          options.props = _.extend(options.props, args[0]);\n        } else if (_.isString(args[0])) {\n          options.props[args[0]] = args[1];\n        }\n\n        dict.set('searchOptions', options);\n      }\n\n      return addProps;\n    }(),\n    /**\n     * Remove custom properties for search.\n     */\n    removeProps: function () {\n      function removeProps() {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        var options = dict.get('searchOptions') || {};\n\n        if (!_.isEmpty(args)) {\n          options.props = _.omit(options.props, args) || {};\n        } else {\n          options.props = {};\n        }\n\n        dict.set('searchOptions', options);\n      }\n\n      return removeProps;\n    }()\n  };\n};","ast":null,"map":{"version":3,"sources":["/packages/easysearch:components/lib/component-methods.js"],"names":[],"mappings":"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","file":"/packages/easysearch:components/lib/component-methods.js.map","sourcesContent":["EasySearch._getComponentMethods = function (dict, index) {\n  return {\n    /**\n     * Search a component for the given search string.\n     *\n     * @param {Object|String} searchDefinition Search definition\n     */\n    search: (searchDefinition) => {\n      dict.set('searchOptions', {\n        props: (dict.get('searchOptions') || {}).props\n      });\n\n      dict.set('searchDefinition', searchDefinition);\n      dict.set('stopPublication', true);\n    },\n    /**\n     * Return the EasySearch.Cursor for the current search.\n     *\n     * @returns {Cursor}\n     */\n    getCursor: () => {\n      const searchDefinition = dict.get('searchDefinition') || '',\n        options = dict.get('searchOptions'),\n        showDocuments = dict.get('showDocuments');\n\n      check(options, Match.Optional(Object));\n\n      if (false === showDocuments) {\n        dict.set('count', 0);\n        dict.set('searching', false);\n        dict.set('limit', 0);\n        dict.set('skip', 0);\n        dict.set('currentCount', 0);\n        dict.set('stopPublication', false);\n\n        return EasySearch.Cursor.emptyCursor;\n      }\n\n      const cursor = index.search(searchDefinition, options),\n        searchOptions = index._getSearchOptions(options);\n\n      dict.set('count', cursor.count());\n      dict.set('searching', !cursor.isReady());\n      dict.set('limit', searchOptions.limit);\n      dict.set('skip', searchOptions.skip);\n      dict.set('currentCount', cursor.mongoCursor.count());\n      dict.set('stopPublication', false);\n\n      return cursor;\n    },\n    /**\n     * Return true if the current search string is empty.\n     *\n     * @returns {boolean}\n     */\n    searchIsEmpty: () => {\n      let searchDefinition = dict.get('searchDefinition');\n\n      return !searchDefinition || (_.isString(searchDefinition) && 0 === searchDefinition.trim().length);\n    },\n    /**\n     * Return true if the component has no results.\n     *\n     * @returns {boolean}\n     */\n    hasNoResults: () => {\n      let count = dict.get('count'),\n        showDocuments = dict.get('showDocuments');\n\n      return false !== showDocuments\n        && !dict.get('searching')\n        && (!_.isNumber(count) || 0 === count);\n    },\n    /**\n     * Return true if the component is being searched.\n     *\n     * @returns {boolean}\n     */\n    isSearching: () => {\n      return !!dict.get('searching');\n    },\n    /**\n     * Return true if the component has more documents than displayed right now.\n     *\n     * @returns {boolean}\n     */\n    hasMoreDocuments: () => {\n      return dict.get('currentCount') < dict.get('count');\n    },\n    /**\n     * Load more documents for the component.\n     *\n     * @param {Number} count Count of docs\n     */\n    loadMore: (count) => {\n      check(count, Number);\n\n      let currentCount = dict.get('currentCount'),\n        options = dict.get('searchOptions') || {};\n\n      options.limit = currentCount + count;\n      dict.set('searchOptions', options);\n    },\n    /**\n     * Paginate through documents for the given page.\n     *\n     * @param {Number} page Page number\n     */\n    paginate: (page) => {\n      check(page, Number);\n\n      let options = dict.get('searchOptions') || {},\n        limit = dict.get('limit');\n\n      options.skip = limit * (page - 1);\n      dict.set('searchOptions', options);\n      dict.set('stopPublication', true);\n    },\n    /**\n     * Add custom properties for search.\n     */\n    addProps: (...args) => {\n      let options = dict.get('searchOptions') || {};\n\n      options.props = options.props || {};\n\n      if (_.isObject(args[0])) {\n        options.props = _.extend(options.props, args[0]);\n      } else if (_.isString(args[0])) {\n        options.props[args[0]] = args[1];\n      }\n\n      dict.set('searchOptions', options);\n    },\n    /**\n     * Remove custom properties for search.\n     */\n    removeProps: (...args) => {\n      let options = dict.get('searchOptions') || {};\n\n      if (!_.isEmpty(args)) {\n        options.props = _.omit(options.props, args) || {};\n      } else {\n        options.props = {};\n      }\n\n      dict.set('searchOptions', options);\n    }\n  };\n};\n"]},"hash":"121f892da28f105b4d9c19df3758bd0b0cd9d530"}
