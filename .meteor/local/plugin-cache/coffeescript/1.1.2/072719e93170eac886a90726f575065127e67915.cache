{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar                \n    ComponentsNamespaceReference,\n    HTMLJSExpander,\n    REQUIRE_RENDERED_INSTANCE,\n    SUPPORTS_REACTIVE_INSTANCE,\n    addEvents,\n    argumentsConstructor,\n    bindComponent,\n    bindDataContext,\n    callTemplateBaseHooks,\n    contentAsFunc,\n    contentAsView,\n    currentViewIfRendering,\n    expand,\n    expandView,\n    getTemplateBase,\n    getTemplateInstance,\n    getTemplateInstanceFunction,\n    method,\n    methodName,\n    originalDot,\n    originalFlattenAttributes,\n    originalGetTemplate,\n    originalInclude,\n    originalVisitTag,\n    ref,\n    registerFirstCreatedHook,\n    registerHooks,\n    templateInstanceToComponent,\n    withTemplateInstanceFunc,\n    wrapHelper,\n    wrapViewAndTemplate,\n    slice = [].slice,\n    extend = function extend(child, parent) {\n  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {\n    if (hasProp.call(parent, key)) child[key] = parent[key];\n  }function ctor() {\n    this.constructor = child;\n  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;\n},\n    hasProp = {}.hasOwnProperty,\n    indexOf = [].indexOf || function (item) {\n  for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item) return i;\n  }return -1;\n};\n\ngetTemplateInstance = function getTemplateInstance(view, skipBlockHelpers) {\n  while (view && !view._templateInstance) {\n    if (skipBlockHelpers) {\n      view = view.parentView;\n    } else {\n      view = view.originalParentView || view.parentView;\n    }\n  }\n  return view != null ? view._templateInstance : void 0;\n};\n\ntemplateInstanceToComponent = function templateInstanceToComponent(templateInstanceFunc, skipBlockHelpers) {\n  var templateInstance;\n  templateInstance = typeof templateInstanceFunc === \"function\" ? templateInstanceFunc() : void 0;\n  templateInstance = getTemplateInstance(templateInstance != null ? templateInstance.view : void 0, skipBlockHelpers);\n  while (templateInstance) {\n    if ('component' in templateInstance) {\n      return templateInstance.component;\n    }\n    if (skipBlockHelpers) {\n      templateInstance = getTemplateInstance(templateInstance.view.parentView, skipBlockHelpers);\n    } else {\n      templateInstance = getTemplateInstance(templateInstance.view.originalParentView || templateInstance.view.parentView, skipBlockHelpers);\n    }\n  }\n  return null;\n};\n\ngetTemplateInstanceFunction = function getTemplateInstanceFunction(view, skipBlockHelpers) {\n  var templateInstance;\n  templateInstance = getTemplateInstance(view, skipBlockHelpers);\n  return function () {\n    return templateInstance;\n  };\n};\n\nComponentsNamespaceReference = function () {\n  function ComponentsNamespaceReference(namespace, templateInstance1) {\n    this.namespace = namespace;\n    this.templateInstance = templateInstance1;\n  }\n\n  return ComponentsNamespaceReference;\n}();\n\noriginalDot = Spacebars.dot;\n\nSpacebars.dot = function () {\n  var args, value;\n  value = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n  if (value instanceof ComponentsNamespaceReference) {\n    return Blaze._getTemplate(value.namespace + \".\" + args.join('.'), value.templateInstance);\n  }\n  return originalDot.apply(null, [value].concat(slice.call(args)));\n};\n\noriginalInclude = Spacebars.include;\n\nSpacebars.include = function () {\n  var args, templateOrFunction;\n  templateOrFunction = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n  if (templateOrFunction instanceof ComponentsNamespaceReference) {\n    templateOrFunction = Blaze._getTemplate(templateOrFunction.namespace, templateOrFunction.templateInstance);\n  }\n  return originalInclude.apply(null, [templateOrFunction].concat(slice.call(args)));\n};\n\nBlaze._getTemplateHelper = function (template, name, templateInstance) {\n  var component, helper, isKnownOldStyleHelper, mixinOrComponent, ref, ref1, ref2;\n  isKnownOldStyleHelper = false;\n  if (template.__helpers.has(name)) {\n    helper = template.__helpers.get(name);\n    if (helper === Blaze._OLDSTYLE_HELPER) {\n      isKnownOldStyleHelper = true;\n    } else if (helper != null) {\n      return wrapHelper(bindDataContext(helper), templateInstance);\n    } else {\n      return null;\n    }\n  }\n  if (name in template) {\n    if (!isKnownOldStyleHelper) {\n      template.__helpers.set(name, Blaze._OLDSTYLE_HELPER);\n      if (!template._NOWARN_OLDSTYLE_HELPERS) {\n        Blaze._warn(\"Assigning helper with `\" + template.viewName + \".\" + name + \" = ...` is deprecated.  Use `\" + template.viewName + \".helpers(...)` instead.\");\n      }\n    }\n    if (template[name] != null) {\n      return wrapHelper(bindDataContext(template[name]), templateInstance);\n    } else {\n      return null;\n    }\n  }\n  if (!templateInstance) {\n    return null;\n  }\n  if ((ref = template.viewName) === 'Template.__dynamicWithDataContext' || ref === 'Template.__dynamic') {\n    return null;\n  }\n  component = Tracker.nonreactive(function () {\n    return templateInstanceToComponent(templateInstance, true);\n  });\n  if (component) {\n    if (mixinOrComponent = component.getFirstWith(null, name)) {\n      return wrapHelper(bindComponent(mixinOrComponent, mixinOrComponent[name]), templateInstance);\n    }\n  }\n  if (name && name in BlazeComponent.components) {\n    return new ComponentsNamespaceReference(name, templateInstance);\n  }\n  if (component) {\n    if ((helper = (ref1 = component._componentInternals) != null ? (ref2 = ref1.templateBase) != null ? ref2.__helpers.get(name) : void 0 : void 0) != null) {\n      return wrapHelper(bindDataContext(helper), templateInstance);\n    }\n  }\n  return null;\n};\n\nshare.inExpandAttributes = false;\n\nbindComponent = function bindComponent(component, helper) {\n  if (_.isFunction(helper)) {\n    return function () {\n      var args, name, result, value;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      result = helper.apply(component, args);\n      if (share.inExpandAttributes && _.isObject(result)) {\n        for (name in meteorBabelHelpers.sanitizeForInObject(result)) {\n          value = result[name];\n          if (share.EVENT_HANDLER_REGEX.test(name)) {\n            if (_.isFunction(value)) {\n              result[name] = _.bind(value, component);\n            } else if (_.isArray(value)) {\n              result[name] = _.map(value, function (fun) {\n                if (_.isFunction(fun)) {\n                  return _.bind(fun, component);\n                } else {\n                  return fun;\n                }\n              });\n            }\n          }\n        }\n      }\n      return result;\n    };\n  } else {\n    return helper;\n  }\n};\n\nbindDataContext = function bindDataContext(helper) {\n  if (_.isFunction(helper)) {\n    return function () {\n      var data;\n      data = Blaze.getData();\n      if (data == null) {\n        data = {};\n      }\n      return helper.apply(data, arguments);\n    };\n  } else {\n    return helper;\n  }\n};\n\nwrapHelper = function wrapHelper(f, templateFunc) {\n  if (!Blaze.Template._withTemplateInstanceFunc) {\n    return Blaze._wrapCatchingExceptions(f, 'template helper');\n  }\n  if (!_.isFunction(f)) {\n    return f;\n  }\n  return function () {\n    var args, self;\n    self = this;\n    args = arguments;\n    return Blaze.Template._withTemplateInstanceFunc(templateFunc, function () {\n      return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args);\n    });\n  };\n};\n\nif (Blaze.Template._withTemplateInstanceFunc) {\n  withTemplateInstanceFunc = Blaze.Template._withTemplateInstanceFunc;\n} else {\n  withTemplateInstanceFunc = function withTemplateInstanceFunc(templateInstance, f) {\n    return f();\n  };\n}\n\ngetTemplateBase = function getTemplateBase(component) {\n  return Tracker.nonreactive(function () {\n    var componentTemplate, templateBase;\n    componentTemplate = component.template();\n    if (_.isString(componentTemplate)) {\n      templateBase = Template[componentTemplate];\n      if (!templateBase) {\n        throw new Error(\"Template '\" + componentTemplate + \"' cannot be found.\");\n      }\n    } else if (componentTemplate) {\n      templateBase = componentTemplate;\n    } else {\n      throw new Error(\"Template for the component '\" + (component.componentName() || 'unnamed') + \"' not provided.\");\n    }\n    return templateBase;\n  });\n};\n\ncallTemplateBaseHooks = function callTemplateBaseHooks(component, hookName) {\n  var callbacks, templateInstance;\n  if (component._componentInternals == null) {\n    component._componentInternals = {};\n  }\n  if (!component._componentInternals.templateInstance) {\n    return;\n  }\n  templateInstance = Tracker.nonreactive(function () {\n    return component._componentInternals.templateInstance();\n  });\n  callbacks = component._componentInternals.templateBase._getCallbacks(hookName);\n  Template._withTemplateInstanceFunc(function () {\n    return templateInstance;\n  }, function () {\n    var callback, i, len, results;\n    results = [];\n    for (i = 0, len = callbacks.length; i < len; i++) {\n      callback = callbacks[i];\n      results.push(callback.call(templateInstance));\n    }\n    return results;\n  });\n};\n\nwrapViewAndTemplate = function wrapViewAndTemplate(currentView, f) {\n  var templateInstance;\n  templateInstance = getTemplateInstanceFunction(currentView, true);\n  return withTemplateInstanceFunc(templateInstance, function () {\n    return Blaze._withCurrentView(currentView, function () {\n      return f();\n    });\n  });\n};\n\naddEvents = function addEvents(view, component) {\n  var eventMap, events, eventsList, fn, handler, i, len, spec;\n  eventsList = component.events();\n  if (!_.isArray(eventsList)) {\n    throw new Error(\"'events' method from the component '\" + (component.componentName() || 'unnamed') + \"' did not return a list of event maps.\");\n  }\n  for (i = 0, len = eventsList.length; i < len; i++) {\n    events = eventsList[i];\n    eventMap = {};\n    fn = function fn(spec, handler) {\n      return eventMap[spec] = function () {\n        var args, currentView, event;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        event = args[0];\n        currentView = Blaze.getView(event.currentTarget);\n        wrapViewAndTemplate(currentView, function () {\n          return handler.apply(component, args);\n        });\n      };\n    };\n    for (spec in meteorBabelHelpers.sanitizeForInObject(events)) {\n      handler = events[spec];\n      fn(spec, handler);\n    }\n    Blaze._addEventMap(view, eventMap, view);\n  }\n};\n\noriginalGetTemplate = Blaze._getTemplate;\n\nBlaze._getTemplate = function (name, templateInstance) {\n  var template;\n  template = Tracker.nonreactive(function () {\n    var parentComponent, ref;\n    if (Blaze.currentView) {\n      parentComponent = BlazeComponent.currentComponent();\n    } else {\n      parentComponent = templateInstanceToComponent(templateInstance, false);\n    }\n    return (ref = BlazeComponent.getComponent(name)) != null ? ref.renderComponent(parentComponent) : void 0;\n  });\n  if (template && (template instanceof Blaze.Template || _.isFunction(template))) {\n    return template;\n  }\n  return originalGetTemplate(name);\n};\n\nregisterHooks = function registerHooks(template, hooks) {\n  if (template.onCreated) {\n    template.onCreated(hooks.onCreated);\n    template.onRendered(hooks.onRendered);\n    return template.onDestroyed(hooks.onDestroyed);\n  } else {\n    template.created = hooks.onCreated;\n    template.rendered = hooks.onRendered;\n    return template.destroyed = hooks.onDestroyed;\n  }\n};\n\nregisterFirstCreatedHook = function registerFirstCreatedHook(template, onCreated) {\n  var oldCreated;\n  if (template._callbacks) {\n    return template._callbacks.created.unshift(onCreated);\n  } else {\n    oldCreated = template.created;\n    return template.created = function () {\n      onCreated.call(this);\n      return oldCreated != null ? oldCreated.call(this) : void 0;\n    };\n  }\n};\n\nTemplate.__dynamicWithDataContext.__helpers.set('chooseTemplate', function (name) {\n  return Blaze._getTemplate(name, function (_this) {\n    return function () {\n      return Template.instance();\n    };\n  }(this));\n});\n\nargumentsConstructor = function argumentsConstructor() {\n  return assert(false);\n};\n\nTemplate.registerHelper('args', function () {\n  var obj;\n  obj = {};\n  obj.constructor = argumentsConstructor;\n  obj._arguments = arguments;\n  return obj;\n});\n\nshare.EVENT_HANDLER_REGEX = /^on[A-Z]/;\n\nshare.isEventHandler = function (fun) {\n  return _.isFunction(fun) && fun.eventHandler;\n};\n\noriginalFlattenAttributes = HTML.flattenAttributes;\n\nHTML.flattenAttributes = function (attrs) {\n  var name, value;\n  if (attrs = originalFlattenAttributes(attrs)) {\n    for (name in meteorBabelHelpers.sanitizeForInObject(attrs)) {\n      value = attrs[name];\n      if (!share.EVENT_HANDLER_REGEX.test(name)) {\n        continue;\n      }\n      if (share.isEventHandler(value)) {\n        continue;\n      }\n      if (_.isArray(value) && _.some(value, share.isEventHandler)) {\n        continue;\n      }\n      if (_.isArray(value)) {\n        attrs[name] = _.map(value, Spacebars.event);\n      } else {\n        attrs[name] = Spacebars.event(value);\n      }\n    }\n  }\n  return attrs;\n};\n\nSpacebars.event = function () {\n  var args, eventHandler, fun;\n  eventHandler = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n  if (!_.isFunction(eventHandler)) {\n    throw new Error(\"Event handler not a function: \" + eventHandler);\n  }\n  args = Spacebars.mustacheImpl.apply(Spacebars, [function () {\n    var xs;\n    xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return xs;\n  }].concat(slice.call(args)));\n  fun = function fun() {\n    var currentView, event, eventArgs;\n    event = arguments[0], eventArgs = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    currentView = Blaze.getView(event.currentTarget);\n    return wrapViewAndTemplate(currentView, function () {\n      return eventHandler.apply(null, [event].concat(args, eventArgs));\n    });\n  };\n  fun.eventHandler = true;\n  return fun;\n};\n\noriginalVisitTag = HTML.ToHTMLVisitor.prototype.visitTag;\n\nHTML.ToHTMLVisitor.prototype.visitTag = function (tag) {\n  var attrs, name;\n  if (attrs = tag.attrs) {\n    attrs = HTML.flattenAttributes(attrs);\n    for (name in meteorBabelHelpers.sanitizeForInObject(attrs)) {\n      if (share.EVENT_HANDLER_REGEX.test(name)) {\n        delete attrs[name];\n      }\n    }\n    tag.attrs = attrs;\n  }\n  return originalVisitTag.call(this, tag);\n};\n\ncurrentViewIfRendering = function currentViewIfRendering() {\n  var view;\n  view = Blaze.currentView;\n  if (view != null ? view._isInRender : void 0) {\n    return view;\n  } else {\n    return null;\n  }\n};\n\ncontentAsFunc = function contentAsFunc(content) {\n  if (!_.isFunction(content)) {\n    return function () {\n      return content;\n    };\n  }\n  return content;\n};\n\ncontentAsView = function contentAsView(content) {\n  if (content instanceof Blaze.Template) {\n    return content.constructView();\n  } else if (content instanceof Blaze.View) {\n    return content;\n  } else {\n    return Blaze.View('render', contentAsFunc(content));\n  }\n};\n\nHTMLJSExpander = Blaze._HTMLJSExpander.extend();\n\nHTMLJSExpander.def({\n  visitObject: function () {\n    function visitObject(x) {\n      if (x instanceof Blaze.Template) {\n        x = x.constructView();\n      }\n      if (x instanceof Blaze.View) {\n        return expandView(x, this.parentView);\n      }\n      return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n    }\n\n    return visitObject;\n  }()\n});\n\nexpand = function expand(htmljs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return new HTMLJSExpander({\n    parentView: parentView\n  }).visit(htmljs);\n};\n\nexpandView = function expandView(view, parentView) {\n  var htmljs, result;\n  Blaze._createView(view, parentView, true);\n  view._isInRender = true;\n  htmljs = Blaze._withCurrentView(view, function () {\n    return view._render();\n  });\n  view._isInRender = false;\n  Tracker.flush();\n  result = expand(htmljs, view);\n  Tracker.flush();\n  if (Tracker.active) {\n    Tracker.onInvalidate(function () {\n      return Blaze._destroyView(view);\n    });\n  } else {\n    Blaze._destroyView(view);\n  }\n  Tracker.flush();\n  return result;\n};\n\nBlazeComponent = function (superClass) {\n  extend(BlazeComponent, superClass);\n\n  function BlazeComponent() {\n    return BlazeComponent.__super__.constructor.apply(this, arguments);\n  }\n\n  BlazeComponent.getComponentForElement = function (domElement) {\n    var templateInstance;\n    if (!domElement) {\n      return null;\n    }\n    if (domElement.nodeType !== Node.ELEMENT_NODE) {\n      throw new Error(\"Expected DOM element.\");\n    }\n    templateInstance = getTemplateInstanceFunction(Blaze.getView(domElement), true);\n    return templateInstanceToComponent(templateInstance, true);\n  };\n\n  BlazeComponent.prototype.mixins = function () {\n    return [];\n  };\n\n  BlazeComponent.prototype.mixinParent = function (mixinParent) {\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    if (mixinParent) {\n      this._componentInternals.mixinParent = mixinParent;\n      return this;\n    }\n    return this._componentInternals.mixinParent || null;\n  };\n\n  BlazeComponent.prototype.requireMixin = function (nameOrMixin) {\n    var ref;\n    assert((ref = this._componentInternals) != null ? ref.mixins : void 0);\n    Tracker.nonreactive(function (_this) {\n      return function () {\n        var base, mixinInstance, mixinInstanceComponent, ref1, ref2, ref3;\n        if (_this.getMixin(nameOrMixin)) {\n          return;\n        }\n        if (_.isString(nameOrMixin)) {\n          if (_this.constructor.getComponent) {\n            mixinInstanceComponent = _this.constructor.getComponent(nameOrMixin);\n          } else {\n            mixinInstanceComponent = BlazeComponent.getComponent(nameOrMixin);\n          }\n          if (!mixinInstanceComponent) {\n            throw new Error(\"Unknown mixin '\" + nameOrMixin + \"'.\");\n          }\n          mixinInstance = new mixinInstanceComponent();\n        } else if (_.isFunction(nameOrMixin)) {\n          mixinInstance = new nameOrMixin();\n        } else {\n          mixinInstance = nameOrMixin;\n        }\n        _this._componentInternals.mixins.push(mixinInstance);\n        if (mixinInstance.mixinParent) {\n          mixinInstance.mixinParent(_this);\n        }\n        if (typeof mixinInstance.createMixins === \"function\") {\n          mixinInstance.createMixins();\n        }\n        if ((base = _this._componentInternals).templateInstance == null) {\n          base.templateInstance = new ReactiveField(null, function (a, b) {\n            return a === b;\n          });\n        }\n        if (!((ref1 = _this._componentInternals.templateInstance()) != null ? ref1.view.isDestroyed : void 0)) {\n          if (!_this._componentInternals.inOnCreated && ((ref2 = _this._componentInternals.templateInstance()) != null ? ref2.view.isCreated : void 0)) {\n            if (typeof mixinInstance.onCreated === \"function\") {\n              mixinInstance.onCreated();\n            }\n          }\n          if (!_this._componentInternals.inOnRendered && ((ref3 = _this._componentInternals.templateInstance()) != null ? ref3.view.isRendered : void 0)) {\n            return typeof mixinInstance.onRendered === \"function\" ? mixinInstance.onRendered() : void 0;\n          }\n        }\n      };\n    }(this));\n    return this;\n  };\n\n  BlazeComponent.prototype.createMixins = function () {\n    var i, len, mixin, ref;\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    if (this._componentInternals.mixins) {\n      return;\n    }\n    this._componentInternals.mixins = [];\n    ref = this.mixins();\n    for (i = 0, len = ref.length; i < len; i++) {\n      mixin = ref[i];\n      this.requireMixin(mixin);\n    }\n    return this;\n  };\n\n  BlazeComponent.prototype.getMixin = function (nameOrMixin) {\n    var i, j, len, len1, mixin, mixinComponentName, ref, ref1, ref2;\n    assert((ref = this._componentInternals) != null ? ref.mixins : void 0);\n    if (_.isString(nameOrMixin)) {\n      ref1 = this._componentInternals.mixins;\n      for (i = 0, len = ref1.length; i < len; i++) {\n        mixin = ref1[i];\n        mixinComponentName = (typeof mixin.componentName === \"function\" ? mixin.componentName() : void 0) || null;\n        if (mixinComponentName && mixinComponentName === nameOrMixin) {\n          return mixin;\n        }\n      }\n    } else {\n      ref2 = this._componentInternals.mixins;\n      for (j = 0, len1 = ref2.length; j < len1; j++) {\n        mixin = ref2[j];\n        if (mixin.constructor === nameOrMixin) {\n          return mixin;\n        } else if (mixin === nameOrMixin) {\n          return mixin;\n        }\n      }\n    }\n    return null;\n  };\n\n  BlazeComponent.prototype.callFirstWith = function () {\n    var afterComponentOrMixin, args, mixin, propertyName;\n    afterComponentOrMixin = arguments[0], propertyName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n    mixin = this.getFirstWith(afterComponentOrMixin, propertyName);\n    if (!mixin) {\n      return;\n    }\n    if (_.isFunction(mixin[propertyName])) {\n      return mixin[propertyName].apply(mixin, args);\n    } else {\n      return mixin[propertyName];\n    }\n  };\n\n  BlazeComponent.prototype.getFirstWith = function (afterComponentOrMixin, propertyName) {\n    var found, i, len, mixin, ref, ref1;\n    assert((ref = this._componentInternals) != null ? ref.mixins : void 0);\n    if (!afterComponentOrMixin) {\n      if (propertyName in this) {\n        return this;\n      }\n      found = true;\n    } else if (afterComponentOrMixin && afterComponentOrMixin === this) {\n      found = true;\n    } else {\n      found = false;\n    }\n    ref1 = this._componentInternals.mixins;\n    for (i = 0, len = ref1.length; i < len; i++) {\n      mixin = ref1[i];\n      if (found && propertyName in mixin) {\n        return mixin;\n      }\n      if (mixin === afterComponentOrMixin) {\n        found = true;\n      }\n    }\n    return null;\n  };\n\n  BlazeComponent.renderComponent = function (parentComponent) {\n    return Tracker.nonreactive(function (_this) {\n      return function () {\n        var componentClass, data;\n        componentClass = _this;\n        if (Blaze.currentView) {\n          data = Template.currentData();\n        } else {\n          data = null;\n        }\n        if ((data != null ? data.constructor : void 0) !== argumentsConstructor) {\n          return wrapViewAndTemplate(Blaze.currentView, function () {\n            var component;\n            component = new componentClass();\n            return component.renderComponent(parentComponent);\n          });\n        }\n        return function () {\n          var currentWith, nonreactiveArguments, reactiveArguments;\n          assert(Tracker.active);\n          currentWith = Blaze.getView('with');\n          reactiveArguments = new ComputedField(function () {\n            data = currentWith.dataVar.get();\n            assert.equal(data != null ? data.constructor : void 0, argumentsConstructor);\n            return data._arguments;\n          }, EJSON.equals);\n          nonreactiveArguments = reactiveArguments();\n          return Tracker.nonreactive(function () {\n            var template;\n            template = Blaze._withCurrentView(Blaze.currentView.parentView.parentView, function (_this) {\n              return function () {\n                return wrapViewAndTemplate(Blaze.currentView, function () {\n                  var component;\n                  component = function (func, args, ctor) {\n                    ctor.prototype = func.prototype;\n                    var child = new ctor(),\n                        result = func.apply(child, args);\n                    return Object(result) === result ? result : child;\n                  }(componentClass, nonreactiveArguments, function () {});\n                  return component.renderComponent(parentComponent);\n                });\n              };\n            }(this));\n            registerFirstCreatedHook(template, function () {\n              this.view.originalParentView = this.view.parentView;\n              return this.view.parentView = this.view.parentView.parentView.parentView;\n            });\n            return template;\n          });\n        };\n      };\n    }(this));\n  };\n\n  BlazeComponent.prototype.renderComponent = function (parentComponent) {\n    return Tracker.nonreactive(function (_this) {\n      return function () {\n        var component, template, templateBase;\n        component = _this;\n        component.createMixins();\n        templateBase = getTemplateBase(component);\n        template = new Blaze.Template(\"BlazeComponent.\" + (component.componentName() || 'unnamed'), templateBase.renderFunction);\n        if (component._componentInternals == null) {\n          component._componentInternals = {};\n        }\n        component._componentInternals.templateBase = templateBase;\n        registerHooks(template, {\n          onCreated: function () {\n            function onCreated() {\n              var base, base1, base2, base3, componentOrMixin, results;\n              if (parentComponent) {\n                Tracker.nonreactive(function (_this) {\n                  return function () {\n                    assert(!component.parentComponent());\n                    component.parentComponent(parentComponent);\n                    return parentComponent.addChildComponent(component);\n                  };\n                }(this));\n              }\n              this.view._onViewRendered(function (_this) {\n                return function () {\n                  var componentOrMixin, results;\n                  if (_this.view.renderCount !== 1) {\n                    return;\n                  }\n                  componentOrMixin = null;\n                  results = [];\n                  while (componentOrMixin = _this.component.getFirstWith(componentOrMixin, 'events')) {\n                    results.push(addEvents(_this.view, componentOrMixin));\n                  }\n                  return results;\n                };\n              }(this));\n              this.component = component;\n              assert(!Tracker.nonreactive(function (_this) {\n                return function () {\n                  var base;\n                  return typeof (base = _this.component._componentInternals).templateInstance === \"function\" ? base.templateInstance() : void 0;\n                };\n              }(this)));\n              if ((base = this.component._componentInternals).templateInstance == null) {\n                base.templateInstance = new ReactiveField(this, function (a, b) {\n                  return a === b;\n                });\n              }\n              this.component._componentInternals.templateInstance(this);\n              if ((base1 = this.component._componentInternals).isCreated == null) {\n                base1.isCreated = new ReactiveField(true);\n              }\n              this.component._componentInternals.isCreated(true);\n              if ((base2 = this.component._componentInternals).isRendered == null) {\n                base2.isRendered = new ReactiveField(false);\n              }\n              this.component._componentInternals.isRendered(false);\n              if ((base3 = this.component._componentInternals).isDestroyed == null) {\n                base3.isDestroyed = new ReactiveField(false);\n              }\n              this.component._componentInternals.isDestroyed(false);\n              try {\n                this.component._componentInternals.inOnCreated = true;\n                componentOrMixin = null;\n                results = [];\n                while (componentOrMixin = this.component.getFirstWith(componentOrMixin, 'onCreated')) {\n                  results.push(componentOrMixin.onCreated());\n                }\n                return results;\n              } finally {\n                delete this.component._componentInternals.inOnCreated;\n              }\n            }\n\n            return onCreated;\n          }(),\n          onRendered: function () {\n            function onRendered() {\n              var base, componentOrMixin, results;\n              if ((base = this.component._componentInternals).isRendered == null) {\n                base.isRendered = new ReactiveField(true);\n              }\n              this.component._componentInternals.isRendered(true);\n              Tracker.nonreactive(function (_this) {\n                return function () {\n                  return assert.equal(_this.component._componentInternals.isCreated(), true);\n                };\n              }(this));\n              try {\n                this.component._componentInternals.inOnRendered = true;\n                componentOrMixin = null;\n                results = [];\n                while (componentOrMixin = this.component.getFirstWith(componentOrMixin, 'onRendered')) {\n                  results.push(componentOrMixin.onRendered());\n                }\n                return results;\n              } finally {\n                delete this.component._componentInternals.inOnRendered;\n              }\n            }\n\n            return onRendered;\n          }(),\n          onDestroyed: function () {\n            function onDestroyed() {\n              return this.autorun(function (_this) {\n                return function (computation) {\n                  if (_this.component.childComponents().length) {\n                    return;\n                  }\n                  computation.stop();\n                  return Tracker.nonreactive(function () {\n                    var base, base1, componentOrMixin;\n                    assert.equal(_this.component._componentInternals.isCreated(), true);\n                    _this.component._componentInternals.isCreated(false);\n                    if ((base = _this.component._componentInternals).isRendered == null) {\n                      base.isRendered = new ReactiveField(false);\n                    }\n                    _this.component._componentInternals.isRendered(false);\n                    if ((base1 = _this.component._componentInternals).isDestroyed == null) {\n                      base1.isDestroyed = new ReactiveField(true);\n                    }\n                    _this.component._componentInternals.isDestroyed(true);\n                    componentOrMixin = null;\n                    while (componentOrMixin = _this.component.getFirstWith(componentOrMixin, 'onDestroyed')) {\n                      componentOrMixin.onDestroyed();\n                    }\n                    if (parentComponent) {\n                      component.parentComponent(null);\n                      parentComponent.removeChildComponent(component);\n                    }\n                    return _this.component._componentInternals.templateInstance(null);\n                  });\n                };\n              }(this));\n            }\n\n            return onDestroyed;\n          }()\n        });\n        return template;\n      };\n    }(this));\n  };\n\n  BlazeComponent.prototype.removeComponent = function () {\n    if (this.isRendered()) {\n      return Blaze.remove(this._componentInternals.templateInstance().view);\n    }\n  };\n\n  BlazeComponent.renderComponentToHTML = function (parentComponent, parentView, data) {\n    var component;\n    component = Tracker.nonreactive(function (_this) {\n      return function () {\n        var componentClass;\n        componentClass = _this;\n        parentView = parentView || currentViewIfRendering() || (parentComponent != null ? parentComponent.isRendered() : void 0) && parentComponent._componentInternals.templateInstance().view || null;\n        return wrapViewAndTemplate(parentView, function () {\n          return new componentClass();\n        });\n      };\n    }(this));\n    if (arguments.length > 2) {\n      return component.renderComponentToHTML(parentComponent, parentView, data);\n    } else {\n      return component.renderComponentToHTML(parentComponent, parentView);\n    }\n  };\n\n  BlazeComponent.prototype.renderComponentToHTML = function (parentComponent, parentView, data) {\n    var expandedView, template;\n    template = Tracker.nonreactive(function (_this) {\n      return function () {\n        parentView = parentView || currentViewIfRendering() || (parentComponent != null ? parentComponent.isRendered() : void 0) && parentComponent._componentInternals.templateInstance().view || null;\n        return wrapViewAndTemplate(parentView, function () {\n          return _this.renderComponent(parentComponent);\n        });\n      };\n    }(this));\n    if (arguments.length > 2) {\n      expandedView = expandView(Blaze._TemplateWith(data, contentAsFunc(template)), parentView);\n    } else {\n      expandedView = expandView(contentAsView(template), parentView);\n    }\n    return HTML.toHTML(expandedView);\n  };\n\n  BlazeComponent.prototype.template = function () {\n    return this.callFirstWith(this, 'template') || this.constructor.componentName();\n  };\n\n  BlazeComponent.prototype.onCreated = function () {\n    return callTemplateBaseHooks(this, 'created');\n  };\n\n  BlazeComponent.prototype.onRendered = function () {\n    return callTemplateBaseHooks(this, 'rendered');\n  };\n\n  BlazeComponent.prototype.onDestroyed = function () {\n    return callTemplateBaseHooks(this, 'destroyed');\n  };\n\n  BlazeComponent.prototype.isCreated = function () {\n    var base;\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    if ((base = this._componentInternals).isCreated == null) {\n      base.isCreated = new ReactiveField(false);\n    }\n    return this._componentInternals.isCreated();\n  };\n\n  BlazeComponent.prototype.isRendered = function () {\n    var base;\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    if ((base = this._componentInternals).isRendered == null) {\n      base.isRendered = new ReactiveField(false);\n    }\n    return this._componentInternals.isRendered();\n  };\n\n  BlazeComponent.prototype.isDestroyed = function () {\n    var base;\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    if ((base = this._componentInternals).isDestroyed == null) {\n      base.isDestroyed = new ReactiveField(false);\n    }\n    return this._componentInternals.isDestroyed();\n  };\n\n  BlazeComponent.prototype.insertDOMElement = function (parent, node, before) {\n    if (before == null) {\n      before = null;\n    }\n    if (parent && node && (node.parentNode !== parent || node.nextSibling !== before)) {\n      parent.insertBefore(node, before);\n    }\n  };\n\n  BlazeComponent.prototype.moveDOMElement = function (parent, node, before) {\n    if (before == null) {\n      before = null;\n    }\n    if (parent && node && (node.parentNode !== parent || node.nextSibling !== before)) {\n      parent.insertBefore(node, before);\n    }\n  };\n\n  BlazeComponent.prototype.removeDOMElement = function (parent, node) {\n    if (parent && node && node.parentNode === parent) {\n      parent.removeChild(node);\n    }\n  };\n\n  BlazeComponent.prototype.events = function () {\n    var eventMap, events, fn, handler, i, len, ref, results, spec, templateInstance, view;\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    if (!this._componentInternals.templateInstance) {\n      return [];\n    }\n    view = Tracker.nonreactive(function (_this) {\n      return function () {\n        return _this._componentInternals.templateInstance().view;\n      };\n    }(this));\n    templateInstance = getTemplateInstanceFunction(view, true);\n    ref = this._componentInternals.templateBase.__eventMaps;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      events = ref[i];\n      eventMap = {};\n      fn = function fn(spec, handler) {\n        return eventMap[spec] = function () {\n          var args;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return withTemplateInstanceFunc(templateInstance, function () {\n            return Blaze._withCurrentView(view, function () {\n              return handler.apply(view, args);\n            });\n          });\n        };\n      };\n      for (spec in meteorBabelHelpers.sanitizeForInObject(events)) {\n        handler = events[spec];\n        fn(spec, handler);\n      }\n      results.push(eventMap);\n    }\n    return results;\n  };\n\n  BlazeComponent.prototype.data = function (path, equalsFunc) {\n    var base, ref, view;\n    if (this._componentInternals == null) {\n      this._componentInternals = {};\n    }\n    if ((base = this._componentInternals).templateInstance == null) {\n      base.templateInstance = new ReactiveField(null, function (a, b) {\n        return a === b;\n      });\n    }\n    if (view = (ref = this._componentInternals.templateInstance()) != null ? ref.view : void 0) {\n      if (path != null) {\n        return DataLookup.get(function (_this) {\n          return function () {\n            return Blaze.getData(view);\n          };\n        }(this), path, equalsFunc);\n      } else {\n        return Blaze.getData(view);\n      }\n    }\n    return void 0;\n  };\n\n  BlazeComponent.currentData = function (path, equalsFunc) {\n    var currentView;\n    if (!Blaze.currentView) {\n      return void 0;\n    }\n    currentView = Blaze.currentView;\n    if (_.isString(path)) {\n      path = path.split('.');\n    } else if (!_.isArray(path)) {\n      return Blaze.getData(currentView);\n    }\n    return DataLookup.get(function (_this) {\n      return function () {\n        var lexicalData, result;\n        if (Blaze._lexicalBindingLookup && (lexicalData = Blaze._lexicalBindingLookup(currentView, path[0]))) {\n          result = {};\n          result[path[0]] = lexicalData;\n          return result;\n        }\n        return Blaze.getData(currentView);\n      };\n    }(this), path, equalsFunc);\n  };\n\n  BlazeComponent.prototype.currentData = function (path, equalsFunc) {\n    return this.constructor.currentData(path, equalsFunc);\n  };\n\n  BlazeComponent.prototype.component = function () {\n    return this;\n  };\n\n  BlazeComponent.currentComponent = function () {\n    var templateInstance;\n    templateInstance = getTemplateInstanceFunction(Blaze.currentView, false);\n    return templateInstanceToComponent(templateInstance, false);\n  };\n\n  BlazeComponent.prototype.currentComponent = function () {\n    return this.constructor.currentComponent();\n  };\n\n  BlazeComponent.prototype.firstNode = function () {\n    if (this.isRendered()) {\n      return this._componentInternals.templateInstance().view._domrange.firstNode();\n    }\n    return void 0;\n  };\n\n  BlazeComponent.prototype.lastNode = function () {\n    if (this.isRendered()) {\n      return this._componentInternals.templateInstance().view._domrange.lastNode();\n    }\n    return void 0;\n  };\n\n  BlazeComponent.prototype.autorun = function (runFunc) {\n    var templateInstance;\n    templateInstance = Tracker.nonreactive(function (_this) {\n      return function () {\n        var ref;\n        return (ref = _this._componentInternals) != null ? typeof ref.templateInstance === \"function\" ? ref.templateInstance() : void 0 : void 0;\n      };\n    }(this));\n    if (!templateInstance) {\n      throw new Error(\"The component has to be created before calling 'autorun'.\");\n    }\n    return templateInstance.autorun(_.bind(runFunc, this));\n  };\n\n  return BlazeComponent;\n}(BaseComponent);\n\nSUPPORTS_REACTIVE_INSTANCE = ['subscriptionsReady'];\n\nREQUIRE_RENDERED_INSTANCE = ['$', 'find', 'findAll'];\n\nref = Blaze.TemplateInstance.prototype;\nfor (methodName in meteorBabelHelpers.sanitizeForInObject(ref)) {\n  method = ref[methodName];\n  if (!(methodName in BlazeComponent.prototype)) {\n    (function (methodName, method) {\n      if (indexOf.call(SUPPORTS_REACTIVE_INSTANCE, methodName) >= 0) {\n        return BlazeComponent.prototype[methodName] = function () {\n          var args, base, templateInstance;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          if (this._componentInternals == null) {\n            this._componentInternals = {};\n          }\n          if ((base = this._componentInternals).templateInstance == null) {\n            base.templateInstance = new ReactiveField(null, function (a, b) {\n              return a === b;\n            });\n          }\n          if (templateInstance = this._componentInternals.templateInstance()) {\n            return templateInstance[methodName].apply(templateInstance, args);\n          }\n          return void 0;\n        };\n      } else if (indexOf.call(REQUIRE_RENDERED_INSTANCE, methodName) >= 0) {\n        return BlazeComponent.prototype[methodName] = function () {\n          var args, ref1;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          if (this.isRendered()) {\n            return (ref1 = this._componentInternals.templateInstance())[methodName].apply(ref1, args);\n          }\n          return void 0;\n        };\n      } else {\n        return BlazeComponent.prototype[methodName] = function () {\n          var args, templateInstance;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          templateInstance = Tracker.nonreactive(function (_this) {\n            return function () {\n              var ref1;\n              return (ref1 = _this._componentInternals) != null ? typeof ref1.templateInstance === \"function\" ? ref1.templateInstance() : void 0 : void 0;\n            };\n          }(this));\n          if (!templateInstance) {\n            throw new Error(\"The component has to be created before calling '\" + methodName + \"'.\");\n          }\n          return templateInstance[methodName].apply(templateInstance, args);\n        };\n      }\n    })(methodName, method);\n  }\n}","sourceMap":{"version":3,"sources":[],"names":[],"mappings":";","file":"/packages/peerlibrary:blaze-components/lib.coffee.map","sourcesContent":[]}}