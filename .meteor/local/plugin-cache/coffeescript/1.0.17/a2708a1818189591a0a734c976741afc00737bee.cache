{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\n        \n\nMeteor.startup(function() {\n  if (Meteor.isClient) {\n    return typeof Template !== \"undefined\" && Template !== null ? Template.registerHelper('t9n', function(x, params) {\n      return T9n.get(x, true, params.hash);\n    }) : void 0;\n  }\n});\n\nT9n = (function() {\n  function T9n() {}\n\n  T9n.maps = {};\n\n  T9n.defaultLanguage = 'en';\n\n  T9n.language = '';\n\n  T9n.dep = new Deps.Dependency();\n\n  T9n.depLanguage = new Deps.Dependency();\n\n  T9n.missingPrefix = \">\";\n\n  T9n.missingPostfix = \"<\";\n\n  T9n.map = function(language, map) {\n    if (!this.maps[language]) {\n      this.maps[language] = {};\n    }\n    this.registerMap(language, '', false, map);\n    return this.dep.changed();\n  };\n\n  T9n.get = function(label, markIfMissing, args, language) {\n    var index, parent, ref, ref1, ret;\n    if (markIfMissing == null) {\n      markIfMissing = true;\n    }\n    if (args == null) {\n      args = {};\n    }\n    this.dep.depend();\n    this.depLanguage.depend();\n    if (typeof label !== 'string') {\n      return '';\n    }\n    if (language == null) {\n      language = this.language;\n    }\n    ret = (ref = this.maps[language]) != null ? ref[label] : void 0;\n    if (!ret) {\n      index = language.lastIndexOf('_');\n      if (index) {\n        parent = language.substring(0, index);\n        if (parent) {\n          return this.get(label, markIfMissing, args, parent);\n        }\n      }\n    }\n    if (!ret) {\n      ret = (ref1 = this.maps[this.defaultLanguage]) != null ? ref1[label] : void 0;\n    }\n    if (!ret) {\n      if (markIfMissing) {\n        return this.missingPrefix + label + this.missingPostfix;\n      } else {\n        return label;\n      }\n    }\n    if (Object.keys(args).length === 0) {\n      return ret;\n    } else {\n      return this.replaceParams(ret, args);\n    }\n  };\n\n  T9n.registerMap = function(language, prefix, dot, map) {\n    var key, results, value;\n    if (typeof map === 'string') {\n      return this.maps[language][prefix] = map;\n    } else if (typeof map === 'object') {\n      if (dot) {\n        prefix = prefix + '.';\n      }\n      results = [];\n      for (key in map) {\n        value = map[key];\n        results.push(this.registerMap(language, prefix + key, true, value));\n      }\n      return results;\n    }\n  };\n\n  T9n.getLanguage = function() {\n    this.depLanguage.depend();\n    return this.language;\n  };\n\n  T9n.getLanguages = function() {\n    this.dep.depend();\n    return Object.keys(this.maps).sort();\n  };\n\n  T9n.getLanguageInfo = function() {\n    var i, k, keys, len, results;\n    this.dep.depend();\n    keys = Object.keys(this.maps).sort();\n    results = [];\n    for (i = 0, len = keys.length; i < len; i++) {\n      k = keys[i];\n      results.push({\n        name: this.maps[k]['t9Name'],\n        code: k\n      });\n    }\n    return results;\n  };\n\n  T9n.setLanguage = function(language) {\n    if (this.language === language) {\n      return;\n    }\n    language = language.replace(new RegExp('-', 'g'), '_');\n    if (!this.maps[language]) {\n      if (language.indexOf('_') > 1) {\n        return this.setLanguage(language.substring(0, language.lastIndexOf('_')));\n      } else {\n        throw Error(\"language \" + language + \" does not exist\");\n      }\n    }\n    this.language = language;\n    return this.depLanguage.changed();\n  };\n\n  T9n.replaceParams = function(str, args) {\n    var key, re, value;\n    for (key in args) {\n      value = args[key];\n      re = new RegExp(\"@{\" + key + \"}\", 'g');\n      str = str.replace(re, value);\n    }\n    return str;\n  };\n\n  return T9n;\n\n})();\n\nthis.T9n = T9n;\n\nthis.t9n = function(x, includePrefix, params) {\n  return T9n.get(x);\n};\n","sourceMap":{"version":3,"file":"/t9n.coffee.js","sourceRoot":"","sources":["/packages/softwarerero_accounts-t9n/t9n.coffee"],"names":[],"mappings":"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","sourcesContent":["Meteor.startup ->\n  if Meteor.isClient\n    Template?.registerHelper 't9n', (x, params) ->\n      T9n.get(x, true, params.hash)\n\n\nclass T9n\n\n  @maps: {}\n  @defaultLanguage: 'en'\n  @language: ''\n  @dep: new Deps.Dependency()\n  @depLanguage: new Deps.Dependency()\n  @missingPrefix = \">\"\n  @missingPostfix = \"<\"\n\n  @map: (language, map) ->\n    if(!@maps[language]) \n      @maps[language] = {}\n    @registerMap(language, '', false, map)\n    @dep.changed()\n\n  @get: (label, markIfMissing = true, args = {}, language) ->\n    @dep.depend()\n    @depLanguage.depend()\n    if typeof label != 'string' then return ''\n    language ?= @language\n    ret = @maps[language]?[label]\n    unless ret\n      index = language.lastIndexOf '_'\n      if index \n        parent = language.substring 0, index \n        if parent\n          return @get label, markIfMissing, args, parent\n    unless ret\n      ret = @maps[@defaultLanguage]?[label]\n    unless ret\n      return if markIfMissing then @missingPrefix + label + @missingPostfix else label\n    if Object.keys(args).length == 0 then ret else @replaceParams ret, args\n  \n  @registerMap = (language, prefix, dot, map) ->\n    if typeof map == 'string' \n      @maps[language][prefix] = map\n    else if typeof map == 'object'\n      if dot \n        prefix = prefix + '.'\n      for key, value of map\n        @registerMap(language, prefix + key, true, value)        \n\n  @getLanguage: () ->\n    @depLanguage.depend()\n    return @language\n\n  @getLanguages: () ->\n    @dep.depend()\n    return Object.keys(@maps).sort()\n\n  @getLanguageInfo: () ->\n    @dep.depend()\n    keys = Object.keys(@maps).sort()\n    for k in keys\n      {name: @maps[k]['t9Name'], code: k}\n\n  @setLanguage: (language) ->\n    if @language is language then return # silent\n    language = language.replace(new RegExp('-', 'g'), '_')\n    unless @maps[language] # try parent variants\n      return if language.indexOf('_') > 1         \n        @setLanguage language.substring 0, language.lastIndexOf '_'\n      else \n        throw Error \"language #{language} does not exist\"\n    @language = language\n    @depLanguage.changed()\n\n  @replaceParams = (str, args) ->\n    for key, value of args\n      re = new RegExp \"@{#{key}}\", 'g'\n      str = str.replace re, value\n    str\n\n\n@T9n = T9n\n@t9n = (x, includePrefix, params) -> T9n.get(x)\n\n"]}}